2024-08-27 14:43:21 [triggerCompletion] {"requestId":"31f455d7c573652e","request":{"prompt":"// Path: test.js\n// 随机函数\nfu'n","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"ction random(min, max) {","finishReason":"stop"}}} 
  2024-08-27 14:43:21 [showCompletion] {"requestId":"31f455d7c573652e","model":"codeqwenModel","text":"ction random(min, max) {","finishReason":"stop"} 
  2024-08-27 14:43:21 [vscodeShowCompletion] [{"insertText":"fu'nction random(min, max) {","range":[{"line":1,"character":0},{"line":1,"character":4}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"44c8cdb3-cb6a-49e0-91e7-c3b5d49019df","insertText":"fu'nction random(min, max) {","range":{"start":{"line":1,"character":0},"end":{"line":1,"character":4}},"file":{"$mid":1,"fsPath":"d:\\workspace\\stock-diagnose-front\\test.js","_sep":1,"external":"file:///d%3A/workspace/stock-diagnose-front/test.js","path":"/d:/workspace/stock-diagnose-front/test.js","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"31f455d7c573652e","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"ayx7pz4mqg1ofphfb1w3o6t79wtsj1mp","sku":"monthly_subscriber","languageId":"javascript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":9,\"PathMarker\":6},\"unused\":{\"LanguageMarker\":5},\"usedCounts\":{\"BeforeCursor\":2,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/stock-diagnose-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"stock-diagnose-front","gitRepoPath":"/10jqka/quote/b2cweb/free/stock-diagnose-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"d5f384bb-da40-460f-889a-c4911a6d09361724740944246","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"javascript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"f8519d6a-7549-474b-b051-2e4e675e064e","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-880fdc95b3b94cc4bf358ae294b5ee6b","created":"1724741016","serverExperiments":"","deploymentId":""},"measurements":{"promptCharLen":29,"promptEndPos":13,"documentLength":13,"delayMs":0,"promptComputeTimeMs":6,"contextualFilterScore":0.8666257042326577,"timeSinceIssuedMs":15,"current_time":1724741001,"numTokens":8,"compCharLen":24,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724741001056,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"javascript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"ction random(min, max) {","position":{"line":1,"character":4},"offset":13,"resultType":0}]}}] 
  2024-08-27 14:43:22 [triggerCompletion] {"requestId":"c9320f7d852761b3","request":{"prompt":"// Path: test.js\n// 随机函数\nfun","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":14,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"ction random(min, max) {","finishReason":"stop"}}} 
  2024-08-27 14:43:22 [showCompletion] {"requestId":"c9320f7d852761b3","model":"codeqwenModel","text":"ction random(min, max) {","finishReason":"stop"} 
  2024-08-27 14:43:22 [triggerCompletion] {"requestId":"533f1fee20d54303","request":{"prompt":"// Path: test.js\n// 随机函数\nfun","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":14,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"ction random(min, max) {","finishReason":"stop"}}} 
  2024-08-27 14:43:22 [showCompletion] {"requestId":"533f1fee20d54303","model":"codeqwenModel","text":"ction random(min, max) {","finishReason":"stop"} 
  2024-08-27 14:43:23 [triggerCompletion] {"requestId":"ebf71e5b08dc1fd8","request":{"prompt":"// Path: test.js\n// 随机函数\nfuntion","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":16,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"  random(min, max) {","finishReason":"stop"}}} 
  2024-08-27 14:43:23 [showCompletion] {"requestId":"ebf71e5b08dc1fd8","model":"codeqwenModel","text":"  random(min, max) {","finishReason":"stop"} 
  2024-08-27 14:43:24 [triggerCompletion] {"requestId":"5c2c66476d522aae","request":{"prompt":"// Path: test.js\n// 随机函数\nfunt","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"ion random(min, max) {","finishReason":"stop"}}} 
  2024-08-27 14:43:24 [showCompletion] {"requestId":"5c2c66476d522aae","model":"codeqwenModel","text":"ion random(min, max) {","finishReason":"stop"} 
  2024-08-27 14:43:24 [triggerCompletion] {"requestId":"0f945822bef18794","request":{"prompt":"// Path: test.js\n// 随机函数\nfunc","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":14,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"tion random(min, max) {","finishReason":"stop"}}} 
  2024-08-27 14:43:24 [showCompletion] {"requestId":"0f945822bef18794","model":"codeqwenModel","text":"tion random(min, max) {","finishReason":"stop"} 
  2024-08-27 14:43:29 [triggerCompletion] {"requestId":"138e68af6c664bd0","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction","suffix":"","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":14,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"  ran  ran  randddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   + ++1) 1 1) + ) + ) + mmimiinnn));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机生机机颜色\nfunct颜色\nfunct成一个ion ranion ran字domCodomCo符串\nfunctloloion ranr(r(domStr))i {\n  {\n ng(len   ret   retgururthn `n `)rgrg {\n bb   (${ran(${ranvardd chooarmms ((= '0, 0, 012255255345)},)}6 ${ran,${ran789ddabcoodemmfgh((i0, 0, jk255255lm)},)}n ${ran,${ranoddpqoorsmmt((uv0, 0, w255255xyz))ABC}}DE))FG``HI;\n;\nJK}\n}\nLM\n\nN////OPQ 随机 RS字随T符串\nfunct机数\nfunctUVion ranion ranWdomStrdomXYiNZng(um(';\n lm   enin, var res)mul {\n axt =    )'le {\n ';\n n =    ret   lenurn Mfo ar (||th.flva or 3or(Mi = len2;\n ag   th.ranthvado; r m(i$ch)  ar* (>s ma 0;= 'x -  ABCmi-DEnF-i) res Gult+H += 1JK ch) + MamiNrs[MnPQa)Rth.fl;\nSTo}\nWor(M\nXYZa//abcth.ran 随机ddo字efhm(符串\nfunctij) *ion rankm chdomnpaSrrs.lentr(stglwthenxyz))234];\n  {\n 5   ret   67urn reslet u8stl';\n r = t   ';\nvar ';\n }\nmax   \nPofo//s r ( 随= le机生$cht a成一个irs.len字 g符串\nfunct=tion ran 0h;\n domStr;    ii < vanlr g2(lenenpwg; id = th++'))';\n  {\n  {\n              fovarstrr ( ch += Strvaarir s ng.fi= 'romC 012harC=345o 06de(ran; 789d","finishReason":"length"}}} 
  2024-08-27 14:43:29 [showCompletion] {"requestId":"138e68af6c664bd0","model":"codeqwenModel","text":"  ran  ran  randddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   + ++1) 1 1) + ) + ) + mmimiinnn));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机生机机颜色\nfunct颜色\nfunct成一个ion ranion ran字domCodomCo符串\nfunctloloion ranr(r(domStr))i {\n  {\n ng(len   ret   retgururthn `n `)rgrg {\n bb   (${ran(${ranvardd chooarmms ((= '0, 0, 012255255345)},)}6 ${ran,${ran789ddabcoodemmfgh((i0, 0, jk255255lm)},)}n ${ran,${ranoddpqoorsmmt((uv0, 0, w255255xyz))ABC}}DE))FG``HI;\n;\nJK}\n}\nLM\n\nN////OPQ 随机 RS字随T符串\nfunct机数\nfunctUVion ranion ranWdomStrdomXYiNZng(um(';\n lm   enin, var res)mul {\n axt =    )'le {\n ';\n n =    ret   lenurn Mfo ar (||th.flva or 3or(Mi = len2;\n ag   th.ranthvado; r m(i$ch)  ar* (>s ma 0;= 'x -  ABCmi-DEnF-i) res Gult+H += 1JK ch) + MamiNrs[MnPQa)Rth.fl;\nSTo}\nWor(M\nXYZa//abcth.ran 随机ddo字efhm(符串\nfunctij) *ion rankm chdomnpaSrrs.lentr(stglwthenxyz))234];\n  {\n 5   ret   67urn reslet u8stl';\n r = t   ';\nvar ';\n }\nmax   \nPofo//s r ( 随= le机生$cht a成一个irs.len字 g符串\nfunct=tion ran 0h;\n domStr;    ii < vanlr g2(lenenpwg; id = th++'))';\n  {\n  {\n              fovarstrr ( ch += Strvaarir s ng.fi= 'romC 012harC=345o 06de(ran; 789d","finishReason":"length"} 
  2024-08-27 14:43:30 [triggerCompletion] {"requestId":"3134cab092bf6a69","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction ","suffix":"","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ran ran randddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   +++ 1 1 1) + ) + ) + mimiminnn)));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机颜色\nfunct颜色\nfunct函数\nfunction ranion ranion randomCodomCodloloom(r(r(m))in,  {\n  {\n m   ret   retaxurur)n `n ` {\n rgrg   retbburn M(${ran(${ranaddth.flooommor(M((a0, 0, th.ran255255do)})}m(,${ran,${ran) dd* (oomammx - ((mi0, 0, n255255 )})}+,${ran,${ran 1dd) + oomimmn(()0, 0, ;\n255255}\n))\n}}//)) 随``机;\n;\n函数\nfunct}\n}\nion ran\n\nd////om( 随机 m字随in, 符串\nfunct机数\nfunctmion ranion ranaxdomStrdom)iN {\n ng(um(   retlmurn Menin, a)mth.fl {\n axo   )or(Mle {\n an =    retth.ranlenurn Mdo am(||th.fl)  o* (3or(Mma2;\n ax -    th.ranmivadonr m( $ch) +ar* ( 1s ma) + = 'x - miABCminDEn)F ;\nG+}\nH 1\nJK) + //Mmi 随Nn机PQ)函数\nfunctR;\nion ranST}\ndW\nom(XYZ//mabc 随机in, d字mefh符串\nfunctaxijion ran)kmdom {\n npS   retrtr(urn Mstlawenth.flxyz)o234 {\n or(M5   a67let th.ran8stdo';\n r = m(   ') var ';\n * (max   maPofox - s r (mi= len$cht  ai+","finishReason":"length"}}} 
  2024-08-27 14:43:30 [showCompletion] {"requestId":"3134cab092bf6a69","model":"codeqwenModel","text":" ran ran randddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   +++ 1 1 1) + ) + ) + mimiminnn)));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机颜色\nfunct颜色\nfunct函数\nfunction ranion ranion randomCodomCodloloom(r(r(m))in,  {\n  {\n m   ret   retaxurur)n `n ` {\n rgrg   retbburn M(${ran(${ranaddth.flooommor(M((a0, 0, th.ran255255do)})}m(,${ran,${ran) dd* (oomammx - ((mi0, 0, n255255 )})}+,${ran,${ran 1dd) + oomimmn(()0, 0, ;\n255255}\n))\n}}//)) 随``机;\n;\n函数\nfunct}\n}\nion ran\n\nd////om( 随机 m字随in, 符串\nfunct机数\nfunctmion ranion ranaxdomStrdom)iN {\n ng(um(   retlmurn Menin, a)mth.fl {\n axo   )or(Mle {\n an =    retth.ranlenurn Mdo am(||th.fl)  o* (3or(Mma2;\n ax -    th.ranmivadonr m( $ch) +ar* ( 1s ma) + = 'x - miABCminDEn)F ;\nG+}\nH 1\nJK) + //Mmi 随Nn机PQ)函数\nfunctR;\nion ranST}\ndW\nom(XYZ//mabc 随机in, d字mefh符串\nfunctaxijion ran)kmdom {\n npS   retrtr(urn Mstlawenth.flxyz)o234 {\n or(M5   a67let th.ran8stdo';\n r = m(   ') var ';\n * (max   maPofox - s r (mi= len$cht  ai+","finishReason":"length"} 
  2024-08-27 14:43:38 [triggerCompletion] {"requestId":"ca712c84ad7606ac","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction r","suffix":"","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"   ananandddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   +++  1 11)) + ) + ) + mimimnni))n;\n;\n;}\n}\n\n}\n\n\n////// 随 随 随机机机颜色\nfunct颜色\nfunct颜色\nfunction ranion ranion randomCodomCodomColololor(r(r())) {\n  {\n  {\n    ret   ret   returururn `n `n `rgrgrgbbb(${ran(${ran(${randddooommm(((0, 0, 0, 255255255)},)},)}, ${ran ${ran ${randddooommm(((0, 0, 0, 255255255)},)},)}, ${ran ${ran ${randddooommm(((0, 0, 0, 255255255)))}}})))```;\n;\n;}\n}\n\n}\n\n\n////// 随机  随字随机符串\nfunct机数\nfunct颜色\nfunction ranion ranion randomStrdomdomCoiNlng(um(orlm2(enin, ))m {\n  {\n ax   ret   )urle {\n nn =    ret `lenurn M#${M aa||th.flth.fl oo3or(Mor(M2;\n aa   th.ranth.ranvadodor m(m($ch) )ar* ( s ma*= 'x -  0xfABCmiffDEnffF f).toStrG+iH 1ngJK) + (1Mmi6).NnpadPQ)ER;nST\n}dW\n(6XYZ//,abc 随机 d字'0efh符串\nfunct'ijion ran)kmdom}npS`rtr(;\nstl}\nwen\nxyz)//234 {\n  随5   机67let 颜色\nfunct8stion ran';\n domCor =    l\"var or\";\n max3(   Po)fos  {\n r (=    retle$churt anirs.len ` g#${M=","finishReason":"length"}}} 
  2024-08-27 14:43:38 [showCompletion] {"requestId":"ca712c84ad7606ac","model":"codeqwenModel","text":"   ananandddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   +++  1 11)) + ) + ) + mimimnni))n;\n;\n;}\n}\n\n}\n\n\n////// 随 随 随机机机颜色\nfunct颜色\nfunct颜色\nfunction ranion ranion randomCodomCodomColololor(r(r())) {\n  {\n  {\n    ret   ret   returururn `n `n `rgrgrgbbb(${ran(${ran(${randddooommm(((0, 0, 0, 255255255)},)},)}, ${ran ${ran ${randddooommm(((0, 0, 0, 255255255)},)},)}, ${ran ${ran ${randddooommm(((0, 0, 0, 255255255)))}}})))```;\n;\n;}\n}\n\n}\n\n\n////// 随机  随字随机符串\nfunct机数\nfunct颜色\nfunction ranion ranion randomStrdomdomCoiNlng(um(orlm2(enin, ))m {\n  {\n ax   ret   )urle {\n nn =    ret `lenurn M#${M aa||th.flth.fl oo3or(Mor(M2;\n aa   th.ranth.ranvadodor m(m($ch) )ar* ( s ma*= 'x -  0xfABCmiffDEnffF f).toStrG+iH 1ngJK) + (1Mmi6).NnpadPQ)ER;nST\n}dW\n(6XYZ//,abc 随机 d字'0efh符串\nfunct'ijion ran)kmdom}npS`rtr(;\nstl}\nwen\nxyz)//234 {\n  随5   机67let 颜色\nfunct8stion ran';\n domCor =    l\"var or\";\n max3(   Po)fos  {\n r (=    retle$churt anirs.len ` g#${M=","finishReason":"length"} 
  2024-08-27 14:43:38 [triggerCompletion] {"requestId":"fafff588482efae5","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction ran","suffix":"","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"   dddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   ++ +  11)1)) + ) + ) + mmmiiinnn);\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机生机生颜色\nfunct成一个成一ion ran字个domCo符串\nfunct数组\nfunctloion ranion ranr(domStrdomAr)ir {\n ng(lenay(len   retggurthth, n `)mrg {\n in, bm   (${ranaxlet d)sto {\n r = m   '(let ';\n 0, ar   255r = fo)},[r ( ${ran];\n led   t ofoimr ( (le=0, t  0255i; )}, i < len ${ran=gd 0tho; ; imi < len++(g)0, th {\n     255; i   )++str}) += Str) {\n     i`   ng.f;\naromC}\nrr.pharC\nuo//sh(rande(ran 随机dd字om(om符串\nfunctm(ion ranin, 9domStrmax7, i)122ng();\n )l );\n en  ) }\n   {\n    ret }\n    urn    retleaurn n = rslenrt ;\nr||}\n;\n \n}\n3//\n2;\n  随//   机生 随va成一机生r 个成一个$ch数组\n字arlet 符串\nfuncts arion ran= 'r = randomStrABCdomAriDErnFayg2(lenG(gH1thJK0)M, {\n N    PQ1, let R10stST0r = W);\ncons'XYZo';\n abcle.   dlfoefhog(r (ijarlekmr)t ","finishReason":"length"}}} 
  2024-08-27 14:43:38 [showCompletion] {"requestId":"fafff588482efae5","model":"codeqwenModel","text":"   dddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   ++ +  11)1)) + ) + ) + mmmiiinnn);\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机生机生颜色\nfunct成一个成一ion ran字个domCo符串\nfunct数组\nfunctloion ranion ranr(domStrdomAr)ir {\n ng(lenay(len   retggurthth, n `)mrg {\n in, bm   (${ranaxlet d)sto {\n r = m   '(let ';\n 0, ar   255r = fo)},[r ( ${ran];\n led   t ofoimr ( (le=0, t  0255i; )}, i < len ${ran=gd 0tho; ; imi < len++(g)0, th {\n     255; i   )++str}) += Str) {\n     i`   ng.f;\naromC}\nrr.pharC\nuo//sh(rande(ran 随机dd字om(om符串\nfunctm(ion ranin, 9domStrmax7, i)122ng();\n )l );\n en  ) }\n   {\n    ret }\n    urn    retleaurn n = rslenrt ;\nr||}\n;\n \n}\n3//\n2;\n  随//   机生 随va成一机生r 个成一个$ch数组\n字arlet 符串\nfuncts arion ran= 'r = randomStrABCdomAriDErnFayg2(lenG(gH1thJK0)M, {\n N    PQ1, let R10stST0r = W);\ncons'XYZo';\n abcle.   dlfoefhog(r (ijarlekmr)t ","finishReason":"length"} 
  2024-08-27 14:43:45 [triggerCompletion] {"requestId":"c78840c74e56b5b8","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction ra","suffix":"","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" n n ndddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   ++ +  11)1)) + ) + ) + mmmiiinnn);\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机生颜色\nfunct颜色\nfunct成一个ion ranion ran字domCodomCo符串\nfunctloloion ranr(r(domStr))i {\n  {\n ng(len   ret   retgururthn `n `)rgrg {\n bb   (${ran(${ranvar ddstoor = mm\"((\";\n 0, 0,    255255fo)},)},r ( ${ran ${ranvaddr ooimm ((=0, 0,  0255255; )},)},i < len ${ran ${rangddthoo; imm++(()0, 0,  {\n     255255   ))str}} += Str))i``ng.f;\n;\nromC}\n}\nharC\n\no////de(ran 随机 d字随om符串\nfunct机数\nfunct(ion ranion ran6domStrdom5,iN 90um()ng(lenm);\n gin,  thm )ax }\n  {\n )   ret    {\n urn let    retssturn Mtr = ar'th.fl;\n';\n o}\n   or(M\nfoa//r (th.ran 随ledo机生t m(i成一)  个* (=数字\nfunctma 0ion ranx - ; domNummii < lenbnger(len thg+ ; ith1)++)) + ) {\n m {\n        i   var nstrst;\n += Strr = }\ni\"\nng.f\";\n //romC    随机harCfo字or (符串\nfunctde(ranvaion randr domomiS( tr(6=","finishReason":"length"}}} 
  2024-08-27 14:43:45 [showCompletion] {"requestId":"c78840c74e56b5b8","model":"codeqwenModel","text":" n n ndddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   ++ +  11)1)) + ) + ) + mmmiiinnn);\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机生颜色\nfunct颜色\nfunct成一个ion ranion ran字domCodomCo符串\nfunctloloion ranr(r(domStr))i {\n  {\n ng(len   ret   retgururthn `n `)rgrg {\n bb   (${ran(${ranvar ddstoor = mm\"((\";\n 0, 0,    255255fo)},)},r ( ${ran ${ranvaddr ooimm ((=0, 0,  0255255; )},)},i < len ${ran ${rangddthoo; imm++(()0, 0,  {\n     255255   ))str}} += Str))i``ng.f;\n;\nromC}\n}\nharC\n\no////de(ran 随机 d字随om符串\nfunct机数\nfunct(ion ranion ran6domStrdom5,iN 90um()ng(lenm);\n gin,  thm )ax }\n  {\n )   ret    {\n urn let    retssturn Mtr = ar'th.fl;\n';\n o}\n   or(M\nfoa//r (th.ran 随ledo机生t m(i成一)  个* (=数字\nfunctma 0ion ranx - ; domNummii < lenbnger(len thg+ ; ith1)++)) + ) {\n m {\n        i   var nstrst;\n += Strr = }\ni\"\nng.f\";\n //romC    随机harCfo字or (符串\nfunctde(ranvaion randr domomiS( tr(6=","finishReason":"length"} 
  2024-08-27 14:43:46 [triggerCompletion] {"requestId":"25a46248ce045940","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction random() { }","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":18,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-27 14:43:46 [triggerCompletion] {"requestId":"94f6e63c80ecdce4","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction r","suffix":"","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"   ananandddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   +++  1 11)) + ) + ) + mimimnni))n;\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机颜色\nfunct颜色\nfunct颜色\nfunction ranion ranion randomCodomCodomColololor(r(r())) {\n  {\n  {\n    ret   ret   returururn `n `n `rgrgrgbbb(${ran(${ran(${randddooommm(((0, 0, 0, 255255255)})})},,${ran,${ran ${randddooommm(((0, 0, 0, 255255255)})})},,${ran,${ran ${randddooommm(((0, 0, 0, 255255255)))}}})))```;\n;\n;\n}\n}\n}\n\n\n\n////// 随机  随机字随字符串\nfunct机数\nfunct符串\nfunction ranion ranion randomStrdomdomStriNing(um(ng(lmlenin, en)m) {\n ax {\n    )   le {\n len =    retn = lenurn Mlen a ||th.fl|| o 3or(M32;\n a2;\n    th.ran   vadovar m(r $ch) $char* (ars mas = 'x - = 'ABCmiABCDEnDEF FG+GH 1HJK) + JKMmiMNnNPQ)PQR;\nRST}\nSTW\nWXYZ//XYZabc 随机abcd字defh符串\nfunctefhijion ranijkmdomkmnpSnprtr(rstlstwenwxyz)xyz234 {\n 2345   567let 678st8';\n r = ';\n    '   var ';\n var max   maxPofoPos r (s = le= $cht $chaiars.len rs.leng=gt 0th;\n ; h;\n    i <    valvar enr pw; ipwd = ++d = ')'';\n  {\n     ';\n          fostrfor ( += Strr (vaivar ng.fr iromCi harC =o= 0de(ran 0; d; i < omi < l(len6en; i5,; i++ 90++))) {\n     );\n  {\n             pwd }\n pwd +   ret += urn = $chs$chatars.crrs.cha;\nhar}\nrAt(M\nAt(Ma//ath.flth.fl 随机oo字or(Mor(M符串\nfunctaaion ranth.ranth.randomdodoSm(m(t) * ) * r2(maxmaxlPosPosen))));\n );\n  {\n        let  }\n  }\n st   ret   retr = urur'n n ';\n pp   wwfoddr (;\n;\nle}\n}\nt \n\ni////  随 随=机机 0数字\nfunct数字\nfunct; ion ranion ran","finishReason":"length"}}} 
  2024-08-27 14:43:46 [showCompletion] {"requestId":"94f6e63c80ecdce4","model":"codeqwenModel","text":"   ananandddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   +++  1 11)) + ) + ) + mimimnni))n;\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机颜色\nfunct颜色\nfunct颜色\nfunction ranion ranion randomCodomCodomColololor(r(r())) {\n  {\n  {\n    ret   ret   returururn `n `n `rgrgrgbbb(${ran(${ran(${randddooommm(((0, 0, 0, 255255255)})})},,${ran,${ran ${randddooommm(((0, 0, 0, 255255255)})})},,${ran,${ran ${randddooommm(((0, 0, 0, 255255255)))}}})))```;\n;\n;\n}\n}\n}\n\n\n\n////// 随机  随机字随字符串\nfunct机数\nfunct符串\nfunction ranion ranion randomStrdomdomStriNing(um(ng(lmlenin, en)m) {\n ax {\n    )   le {\n len =    retn = lenurn Mlen a ||th.fl|| o 3or(M32;\n a2;\n    th.ran   vadovar m(r $ch) $char* (ars mas = 'x - = 'ABCmiABCDEnDEF FG+GH 1HJK) + JKMmiMNnNPQ)PQR;\nRST}\nSTW\nWXYZ//XYZabc 随机abcd字defh符串\nfunctefhijion ranijkmdomkmnpSnprtr(rstlstwenwxyz)xyz234 {\n 2345   567let 678st8';\n r = ';\n    '   var ';\n var max   maxPofoPos r (s = le= $cht $chaiars.len rs.leng=gt 0th;\n ; h;\n    i <    valvar enr pw; ipwd = ++d = ')'';\n  {\n     ';\n          fostrfor ( += Strr (vaivar ng.fr iromCi harC =o= 0de(ran 0; d; i < omi < l(len6en; i5,; i++ 90++))) {\n     );\n  {\n             pwd }\n pwd +   ret += urn = $chs$chatars.crrs.cha;\nhar}\nrAt(M\nAt(Ma//ath.flth.fl 随机oo字or(Mor(M符串\nfunctaaion ranth.ranth.randomdodoSm(m(t) * ) * r2(maxmaxlPosPosen))));\n );\n  {\n        let  }\n  }\n st   ret   retr = urur'n n ';\n pp   wwfoddr (;\n;\nle}\n}\nt \n\ni////  随 随=机机 0数字\nfunct数字\nfunct; ion ranion ran","finishReason":"length"} 
  2024-08-27 14:43:46 [triggerCompletion] {"requestId":"5eb7e79862be9ffc","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction ","suffix":"","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ran ran randddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   ++ + 11) 1) + ) + ) + mmimiinnn));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机生机字颜色\nfunct成一符串\nfunction ran个ion randomCo数组\nfunctdomStrloion ranir(domArng()rl {\n enay(   ret)lur {\n en, n `   mrglein, bn = m(${ranlenaxd )o|| {\n m    (3let 0, 2;\n ar255   r = )},va[ ${ranr ];\n d$ch   oarfoms r ((= 'le0, ABCt 255DEi)},F  ${ranG=dH 0oJK; mMi < (Nl0, PQen255R; i)ST++}W))XYZ {\n     `abc   ;\nda}\nefhrr.p\niju//kmsh(ran 随机npd字rom(符串\nfunctstmion ranwin, domStrxyzmaxi234)ng(5);\n l67 en8 )';\n  }\n  {\n       ret   var urn lemaxan = Porlens r = ;\n||$ch}\n a\n3rs.len//2;\n g 随   t机生vah;\n 成一r    个$chva数组\nfunctarr ion rans pwdomAr= 'd = rABC'ay(DE';\n lF   en, GfomHr (in, JKlemMt axNi)PQ  {\n R=   ST 0let W; arXYZi < r = abcl[den];\n efh; i   ij++fo","finishReason":"length"}}} 
  2024-08-27 14:43:46 [showCompletion] {"requestId":"5eb7e79862be9ffc","model":"codeqwenModel","text":" ran ran randddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   ++ + 11) 1) + ) + ) + mmimiinnn));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机生机字颜色\nfunct成一符串\nfunction ran个ion randomCo数组\nfunctdomStrloion ranir(domArng()rl {\n enay(   ret)lur {\n en, n `   mrglein, bn = m(${ranlenaxd )o|| {\n m    (3let 0, 2;\n ar255   r = )},va[ ${ranr ];\n d$ch   oarfoms r ((= 'le0, ABCt 255DEi)},F  ${ranG=dH 0oJK; mMi < (Nl0, PQen255R; i)ST++}W))XYZ {\n     `abc   ;\nda}\nefhrr.p\niju//kmsh(ran 随机npd字rom(符串\nfunctstmion ranwin, domStrxyzmaxi234)ng(5);\n l67 en8 )';\n  }\n  {\n       ret   var urn lemaxan = Porlens r = ;\n||$ch}\n a\n3rs.len//2;\n g 随   t机生vah;\n 成一r    个$chva数组\nfunctarr ion rans pwdomAr= 'd = rABC'ay(DE';\n lF   en, GfomHr (in, JKlemMt axNi)PQ  {\n R=   ST 0let W; arXYZi < r = abcl[den];\n efh; i   ij++fo","finishReason":"length"} 
  2024-08-27 14:43:47 [triggerCompletion] {"requestId":"fe405a21356e372c","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction re","suffix":"","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" n n ndddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   + ++ 1) 11)) + ) + ) + mmmiiinnn);\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机生机颜色\nfunct颜色\nfunct成一个ion ranion ran字domCodomCo符串\nfunctloloion ranr(r(domStr))i {\n  {\n ng(len   ret   retgururthn `n `)rgrg {\n bb   (${r(${rvar enenstddr = oo\"mm\";\n ((   0, 0, fo255255r ()})},va,${r ${rr enenidd oo=mm 0((; 0, 0, i < len255255g)})},th,${r ${r; ienen++dd)oo {\n     mm   ((str0, 0,  += Str255255i))ng.f}}romC))harC``o;\n;\nde(ran}\n}\nd\n\nom////( 随机 6字随5,符串\nfunct机数\nfunct 90ion ranion ran)domStrdom);\n iN ng(um( lm }\n enin,    ret)murn  {\n axs   )tle {\n rn =    ret;\nlenurn M}\n a\n||th.fl// o 随3or(M机生2;\n a成一   th.ran个vado数字\nfunctr m(ion ran$ch) domNumar* (bs maer(len= 'x - gABCmithDEn)F  {\n G+    H1)var JK) + stMmr = Ni\"PQn\";\n R;\n   ST}\nfoW\nr (XYZ//vaabc 随机r d字iefh符串\nfunct ijion ran=kmdom 0npS; rtr(i < lenstlgwenthxyz); i234 {\n ++5   )67let  {\n     st   8'; r = str ' += ran  /*';\n d**   o*默fom认r ((去掉le0了容t , 易混i9淆 );\n 的= 字符 0 o;  }\n Oi <    retLlurn lens,; it9++rg);\nq {\n     }\n,   \nVstr//v += Str 随,i机生Ung.f成一个uromC字,I1*harC符串*o和*数字\nfunctde(ran*/\n ion random   domStrNvar ingmaxumAndNumPo(bs 6er(len= 5,g$ch 90tha))rs.len);\n  {\n g    t var h;\n  }\n st      retr = vaurn \"r s\";\n pwt   d = rfo';\nr (';\n }\nva   \nr fo//i 随机r ( 字va=符串\nfunctr  0ion rani; dom i < len=Sg 0tth; r2(; ii < l++len)en) {\n     ; i {\n    ++   str)let  += ran {\n     std r = o  'mpwd';\n ( +   0= fo, $chr (9ale);\n     rs.ct    haistrr  += StrAt(M=ia 0ng.fth.fl; romCoi < harCor(Mloaende(ranth.ran; iddo++omm()() *  {\n     6max   5,Posstr 90) += Str));\n i);\n  ng.f  romC  }\n harC }\n    reto   returde(ranurn n domspNtwumrd(;\n;\n9}\n}\n7, \n\n122////) 随);\n  随机生 机成一个 数组\nfunct字 }\n ion ran符串   retdomAr和urn r数字say(和tl字母\nfunctren, ion ran;\nmdomStr}\nin, ing\nmAndNum//axber 随机)And字 {\n Let符串\nfunct   tion ranvar er(lendomargSr = tht[)r3(];\n  {\n l      enfovar )r (st {\n var =    r \"let i\";\n st    r = =fo' 0r (';\n ; va   i < r folir (en le; i=t ++ 0i);   {\n     i < len=   g 0ath; rr.p; ii < u++lsh(r)enen {\n     ; id   ++om(str)m += ran {\n     in, d   maxostr)m += Str);\n (i 0ng.f , romC }\n 9harC   ret);\n     ourn    de(ranastrdomr += StringNum(r;\n}","finishReason":"length"}}} 
  2024-08-27 14:43:47 [showCompletion] {"requestId":"fe405a21356e372c","model":"codeqwenModel","text":" n n ndddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   + ++ 1) 11)) + ) + ) + mmmiiinnn);\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机生机颜色\nfunct颜色\nfunct成一个ion ranion ran字domCodomCo符串\nfunctloloion ranr(r(domStr))i {\n  {\n ng(len   ret   retgururthn `n `)rgrg {\n bb   (${r(${rvar enenstddr = oo\"mm\";\n ((   0, 0, fo255255r ()})},va,${r ${rr enenidd oo=mm 0((; 0, 0, i < len255255g)})},th,${r ${r; ienen++dd)oo {\n     mm   ((str0, 0,  += Str255255i))ng.f}}romC))harC``o;\n;\nde(ran}\n}\nd\n\nom////( 随机 6字随5,符串\nfunct机数\nfunct 90ion ranion ran)domStrdom);\n iN ng(um( lm }\n enin,    ret)murn  {\n axs   )tle {\n rn =    ret;\nlenurn M}\n a\n||th.fl// o 随3or(M机生2;\n a成一   th.ran个vado数字\nfunctr m(ion ran$ch) domNumar* (bs maer(len= 'x - gABCmithDEn)F  {\n G+    H1)var JK) + stMmr = Ni\"PQn\";\n R;\n   ST}\nfoW\nr (XYZ//vaabc 随机r d字iefh符串\nfunct ijion ran=kmdom 0npS; rtr(i < lenstlgwenthxyz); i234 {\n ++5   )67let  {\n     st   8'; r = str ' += ran  /*';\n d**   o*默fom认r ((去掉le0了容t , 易混i9淆 );\n 的= 字符 0 o;  }\n Oi <    retLlurn lens,; it9++rg);\nq {\n     }\n,   \nVstr//v += Str 随,i机生Ung.f成一个uromC字,I1*harC符串*o和*数字\nfunctde(ran*/\n ion random   domStrNvar ingmaxumAndNumPo(bs 6er(len= 5,g$ch 90tha))rs.len);\n  {\n g    t var h;\n  }\n st      retr = vaurn \"r s\";\n pwt   d = rfo';\nr (';\n }\nva   \nr fo//i 随机r ( 字va=符串\nfunctr  0ion rani; dom i < len=Sg 0tth; r2(; ii < l++len)en) {\n     ; i {\n    ++   str)let  += ran {\n     std r = o  'mpwd';\n ( +   0= fo, $chr (9ale);\n     rs.ct    haistrr  += StrAt(M=ia 0ng.fth.fl; romCoi < harCor(Mloaende(ranth.ran; iddo++omm()() *  {\n     6max   5,Posstr 90) += Str));\n i);\n  ng.f  romC  }\n harC }\n    reto   returde(ranurn n domspNtwumrd(;\n;\n9}\n}\n7, \n\n122////) 随);\n  随机生 机成一个 数组\nfunct字 }\n ion ran符串   retdomAr和urn r数字say(和tl字母\nfunctren, ion ran;\nmdomStr}\nin, ing\nmAndNum//axber 随机)And字 {\n Let符串\nfunct   tion ranvar er(lendomargSr = tht[)r3(];\n  {\n l      enfovar )r (st {\n var =    r \"let i\";\n st    r = =fo' 0r (';\n ; va   i < r folir (en le; i=t ++ 0i);   {\n     i < len=   g 0ath; rr.p; ii < u++lsh(r)enen {\n     ; id   ++om(str)m += ran {\n     in, d   maxostr)m += Str);\n (i 0ng.f , romC }\n 9harC   ret);\n     ourn    de(ranastrdomr += StringNum(r;\n}","finishReason":"length"} 
  2024-08-27 14:43:48 [triggerCompletion] {"requestId":"94d5973d9e933b93","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction rabnd","suffix":"","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":16,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"   om(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   + ++ 1) 11)) + ) + ) + mmmiiinnn);\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机生颜色\nfunct颜色\nfunct成一个ion ranion ran字domCodomCo符串\nfunctloloion ranr(r(domStr))i {\n  {\n ng(   ret   retlururenn `n `)rgrg {\n bb   ((le${${n = raralenbnbn dd||oo mm3((2;\n 0, 0,    255255va)})}r ,,$ch${${arraras bnbn= 'ddABCooDEmmF((G0, 0, H255255JK)})}M,,N${${PQraraRbnbnSTddWooXYZmmabc((d0, 0, efh255255ij))km}}np))r``st;\n;\nw}\n}\nxyz\n\n234////567 随机 随字8机符串\nfunct';\n 数组\nfunction ran   ion randomStrvar domArimaxrng(Poay(ls men= in, )$chm {\n aax   rs.len)leg {\n n = t   lenh;\n let     ar||var =  r [3pw];\n 2;\n d =       'fova';\n r (r    le$chfot arr (is va = 'r =ABCi 0DE ; F=i < G 0mH; axJKi < ; iMl++Nen)PQ; i {\n     R++   ST)aW {\n     rr.pXYZ uabc  sdpwdh(efh +raij= bnkm$chdnpaom(rrs.cmsthain, wrmaxxyzAt(M)234a);\n 5th.fl 67o 8or(M }\n ';\n a   ret   th.ranurn var doamaxm(rPo) * rs max;\n= Pos}\n$ch)\na);\n //rs.len  随机g 字t }\n 符串\nfuncth;\n    retion ran   urdomStrvan ir png(lenpwwgd = dth';\n)';\n }\n {\n    \n   fo//let  随r (st机生ler = 成一个t '字i';\n 符串\nfunct    ion ran=fodomStr 0r (i; leni < t g2(lilen en; i=)++ 0 {\n );     {\n     i < lenle gn =   thlenpwd; i  +++||= ) $ch {\n     3a   2;\n rs.cstr   ha += Strvarir At(Mng.f$charomCarth.flharCs oo= 'or(MdABCae(DEth.ranraFdobnGm(dH) * omJKmax(MPos9N)7, PQ);\n 122R )ST );\n W }\n  XYZ   ret abcur }\n dn    retefhpurn ijwskmdtnp;\nrr}\n;\nst\n}\nw//\nxyz// 234 随随5机机数\nfunct67对象\nfunction ran8ion random';\n domObjN   eum(var ct(lenmmaxgin, Pothms )ax=  {\n )$ch    {\n alet    retrs.lenob","finishReason":"length"}}} 
  2024-08-27 14:43:48 [showCompletion] {"requestId":"94d5973d9e933b93","model":"codeqwenModel","text":"   om(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   + ++ 1) 11)) + ) + ) + mmmiiinnn);\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机生颜色\nfunct颜色\nfunct成一个ion ranion ran字domCodomCo符串\nfunctloloion ranr(r(domStr))i {\n  {\n ng(   ret   retlururenn `n `)rgrg {\n bb   ((le${${n = raralenbnbn dd||oo mm3((2;\n 0, 0,    255255va)})}r ,,$ch${${arraras bnbn= 'ddABCooDEmmF((G0, 0, H255255JK)})}M,,N${${PQraraRbnbnSTddWooXYZmmabc((d0, 0, efh255255ij))km}}np))r``st;\n;\nw}\n}\nxyz\n\n234////567 随机 随字8机符串\nfunct';\n 数组\nfunction ran   ion randomStrvar domArimaxrng(Poay(ls men= in, )$chm {\n aax   rs.len)leg {\n n = t   lenh;\n let     ar||var =  r [3pw];\n 2;\n d =       'fova';\n r (r    le$chfot arr (is va = 'r =ABCi 0DE ; F=i < G 0mH; axJKi < ; iMl++Nen)PQ; i {\n     R++   ST)aW {\n     rr.pXYZ uabc  sdpwdh(efh +raij= bnkm$chdnpaom(rrs.cmsthain, wrmaxxyzAt(M)234a);\n 5th.fl 67o 8or(M }\n ';\n a   ret   th.ranurn var doamaxm(rPo) * rs max;\n= Pos}\n$ch)\na);\n //rs.len  随机g 字t }\n 符串\nfuncth;\n    retion ran   urdomStrvan ir png(lenpwwgd = dth';\n)';\n }\n {\n    \n   fo//let  随r (st机生ler = 成一个t '字i';\n 符串\nfunct    ion ran=fodomStr 0r (i; leni < t g2(lilen en; i=)++ 0 {\n );     {\n     i < lenle gn =   thlenpwd; i  +++||= ) $ch {\n     3a   2;\n rs.cstr   ha += Strvarir At(Mng.f$charomCarth.flharCs oo= 'or(MdABCae(DEth.ranraFdobnGm(dH) * omJKmax(MPos9N)7, PQ);\n 122R )ST );\n W }\n  XYZ   ret abcur }\n dn    retefhpurn ijwskmdtnp;\nrr}\n;\nst\n}\nw//\nxyz// 234 随随5机机数\nfunct67对象\nfunction ran8ion random';\n domObjN   eum(var ct(lenmmaxgin, Pothms )ax=  {\n )$ch    {\n alet    retrs.lenob","finishReason":"length"} 
  2024-08-27 14:43:48 [triggerCompletion] {"requestId":"952908abef7d91d2","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction rab","suffix":"","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"   dddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   + + + 1)1)1)) + ) + ) + mmmiiinnn;\n;\n;}\n}\n\n}\n\n\n////// 随 随 随机机机颜色\nfunct数组\nfunct颜色\nfunction ranion ranion randomCodomArdomColorlor(ay(lenr()g) {\n th,  {\n    retm   returin, urn `mn `rgaxrgb)b( {\n (${ran${   drablet odarmor = (m[0, (];\n 2550,    )}255fo,${ran)},r (d leo${t mrabi(d 0, o=255m 0)}(; ,${ran0, i < lend255go)},thm ; i(${++0, rab)255d {\n     )o   }ma)(rr.p`0, u;255s\n})h(\n}rab//)d 随机`om(字;\nm符串\nfunct}\nin, ion ran\nmaxdomStr//)i 随机);\n ng(字 l符串\nfunct enion ran }\n )domStr   ret {\n iurn    ng(alelrn = enrlen);\n  {\n }\n||   \n le//3n =  随机2;\n len字    符串\nfunctva||ion ranr  domStr$ch3iar2;\n ng(lens    g= 'vath, ABCr mDE$chin, FarmGs axH= ')JKABC {\n MDE   NFlet PQGarRHr = STJK[WM];\n XYZN   abcPQfodRr (efhSTleijWt kmXYZinpabc rd=stefh 0wij; xyzkmi < len234npg5rth67st; i8w++';\n xyz)   234 {\n     var 5   max67aPo8rr.ps ';\n u=    sh(Str$chvar iamaxng.frs.lenPoromCgs harCt= oh;\n $chd   ae(vars.lenrabr gdpwtom(d = h;\n m'   in, ';\n vamax)   r )fopw);\n r (d =  va' r ';\n  }\n i      ret fourn =r (a 0varr.j; r oii < in('l 'en=); i 0;\n++; }\n)i < \n {\n     l// en 随  ","finishReason":"length"}}} 
  2024-08-27 14:43:48 [showCompletion] {"requestId":"952908abef7d91d2","model":"codeqwenModel","text":"   dddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   + + + 1)1)1)) + ) + ) + mmmiiinnn;\n;\n;}\n}\n\n}\n\n\n////// 随 随 随机机机颜色\nfunct数组\nfunct颜色\nfunction ranion ranion randomCodomArdomColorlor(ay(lenr()g) {\n th,  {\n    retm   returin, urn `mn `rgaxrgb)b( {\n (${ran${   drablet odarmor = (m[0, (];\n 2550,    )}255fo,${ran)},r (d leo${t mrabi(d 0, o=255m 0)}(; ,${ran0, i < lend255go)},thm ; i(${++0, rab)255d {\n     )o   }ma)(rr.p`0, u;255s\n})h(\n}rab//)d 随机`om(字;\nm符串\nfunct}\nin, ion ran\nmaxdomStr//)i 随机);\n ng(字 l符串\nfunct enion ran }\n )domStr   ret {\n iurn    ng(alelrn = enrlen);\n  {\n }\n||   \n le//3n =  随机2;\n len字    符串\nfunctva||ion ranr  domStr$ch3iar2;\n ng(lens    g= 'vath, ABCr mDE$chin, FarmGs axH= ')JKABC {\n MDE   NFlet PQGarRHr = STJK[WM];\n XYZN   abcPQfodRr (efhSTleijWt kmXYZinpabc rd=stefh 0wij; xyzkmi < len234npg5rth67st; i8w++';\n xyz)   234 {\n     var 5   max67aPo8rr.ps ';\n u=    sh(Str$chvar iamaxng.frs.lenPoromCgs harCt= oh;\n $chd   ae(vars.lenrabr gdpwtom(d = h;\n m'   in, ';\n vamax)   r )fopw);\n r (d =  va' r ';\n  }\n i      ret fourn =r (a 0varr.j; r oii < in('l 'en=); i 0;\n++; }\n)i < \n {\n     l// en 随  ","finishReason":"length"} 
  2024-08-27 14:43:48 [triggerCompletion] {"requestId":"8d3bba018e499f4f","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction ra","suffix":"","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" n n ndddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   ++ + 11) 1) + ) + ) + mmimiinnn));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机生颜色\nfunct颜色\nfunct成一个ion ranion ran字domCodomCo符串\nfunctloloion ranr(r(domStr))i {\n  {\n ng(len   ret   retgururthn `n `)rgrg {\n bb   (${ran(${ranvardd chooarmms ((= '0, 0, 012255255345)},)}6 ${ran,${ran789ddabcoodemmfgh((i0, 0, jk255255lm)},)}n ${ran,${ranoddpqoorsmmt((uv0, 0, w255255xyz))ABC}}DE))FG``HI;\n;\nJK}\n}\nLM\n\nN////O 随机 随机PQ字字RS符串\nfunct符串\nfunctTion ranion ranUVdomStrdomStrWiiXYng(ng(Zll';\n enen   ))var res {\n  {\n ul      t = lele'n = n = ';\n lenlen     fo||||r (  va33r 2;\n 2;\n i = len      gvavathr r ; $ch$chiarar s s >= '= ' 0;ABCABC DEDE-FF-i) resGGultHH +=JKJK chMMaNNrs[MPQPQaRRth.flSTSToWWor(MXYZXYZaabcabcth.randddoefhefhm(ijij) *kmkm chnpnparrrs.lenststgwwthxyzxyz)234234];\n 55   ret6767urn res88u';\n ';\n l      tvar var ;\nmaxmax}\nPoPo\ns s //= =  随$ch$ch机生aa成一rs.lenrs.len个gg数字\nfunctttion ranh;\n h;\n domNum      bvavaer(lenr r gpwpwthd = d = )'' {\n ';\n ';\n          varfofo chr (r (arvavas r r = 'ii012  345==6 0 078; ; 9i < i < ';\n ll   enenvar res; i; iul++++t = ))' {\n      {\n     ';\n          fopwdpwdr ( + +va= = r $ch$chi = lenaagrs.crs.cthhaha; rriAt(MAt(M aa>th.flth.fl 0;oo or(Mor(M-aa-i) resth.ranth.ranultdodo +=m(m( ch) * ) * amaxmaxrs[MPosPosa))th.fl);\n );\n o  or(M  a }\n  }\n th.ran","finishReason":"length"}}} 
  2024-08-27 14:43:48 [showCompletion] {"requestId":"8d3bba018e499f4f","model":"codeqwenModel","text":" n n ndddom(om(om(mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   ++ + 11) 1) + ) + ) + mmimiinnn));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机生颜色\nfunct颜色\nfunct成一个ion ranion ran字domCodomCo符串\nfunctloloion ranr(r(domStr))i {\n  {\n ng(len   ret   retgururthn `n `)rgrg {\n bb   (${ran(${ranvardd chooarmms ((= '0, 0, 012255255345)},)}6 ${ran,${ran789ddabcoodemmfgh((i0, 0, jk255255lm)},)}n ${ran,${ranoddpqoorsmmt((uv0, 0, w255255xyz))ABC}}DE))FG``HI;\n;\nJK}\n}\nLM\n\nN////O 随机 随机PQ字字RS符串\nfunct符串\nfunctTion ranion ranUVdomStrdomStrWiiXYng(ng(Zll';\n enen   ))var res {\n  {\n ul      t = lele'n = n = ';\n lenlen     fo||||r (  va33r 2;\n 2;\n i = len      gvavathr r ; $ch$chiarar s s >= '= ' 0;ABCABC DEDE-FF-i) resGGultHH +=JKJK chMMaNNrs[MPQPQaRRth.flSTSToWWor(MXYZXYZaabcabcth.randddoefhefhm(ijij) *kmkm chnpnparrrs.lenststgwwthxyzxyz)234234];\n 55   ret6767urn res88u';\n ';\n l      tvar var ;\nmaxmax}\nPoPo\ns s //= =  随$ch$ch机生aa成一rs.lenrs.len个gg数字\nfunctttion ranh;\n h;\n domNum      bvavaer(lenr r gpwpwthd = d = )'' {\n ';\n ';\n          varfofo chr (r (arvavas r r = 'ii012  345==6 0 078; ; 9i < i < ';\n ll   enenvar res; i; iul++++t = ))' {\n      {\n     ';\n          fopwdpwdr ( + +va= = r $ch$chi = lenaagrs.crs.cthhaha; rriAt(MAt(M aa>th.flth.fl 0;oo or(Mor(M-aa-i) resth.ranth.ranultdodo +=m(m( ch) * ) * amaxmaxrs[MPosPosa))th.fl);\n );\n o  or(M  a }\n  }\n th.ran","finishReason":"length"} 
  2024-08-27 14:43:49 [triggerCompletion] {"requestId":"deb672d3cc2a9aa3","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction random","suffix":"","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ( ( (mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   +++  1 11)) + ) + ) + mmimiinnn));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机颜色\nfunct颜色\nfunct颜色\nfunction ranion ranion randomCodomCodomColololor(r(r())) {\n  {\n  {\n    ret   ret   returururn `n `n `rgrgrgbbb(${ran(${ran(${randddooommm(((0, 0, 0, 255255255)})},)},,${ran ${ran ${randddooommm(((0, 0, 0, 255255255)})},)},,${ran ${ran ${randddooommm(((0, 0, 0, 255255255)))}}})))```;\n;\n;\n}\n}\n}\n\n\n\n////// 随机 随机 随机字字字符串\nfunct符串\nfunct符串\nfunction ranion ranion randomStrdomStrdomStriiing(ng(ng(lllenenen))) {\n  {\n  {\n          lelelen = n = n = lenlenlen   ||||||   3332;\n 2;\n 2;\n          vavavar r r $ch$ch$chararars s s = '= '= 'ABCABCABCDEDEDEFFFGGGHHHJKJKJKMMMNNNPQPQPQRRRSTSTSTWWWXYZXYZXYZabcabcabcdddefhefhefhijijijkmkmkmnpnpnprrrstststwwwxyzxyzxyz234234234555676767888';\n ';\n ';\n          var var var maxmaxmaxPoPoPos s s = = = $ch$ch$chaaars.lenrs.lenrs.lengggttth;\n h;\n h;\n          vavavar r r ","finishReason":"length"}}} 
  2024-08-27 14:43:49 [showCompletion] {"requestId":"deb672d3cc2a9aa3","model":"codeqwenModel","text":" ( ( (mmmin, in, in, mmmaxaxax))) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m() ) ) * (* (* (mamamax - x - x - mimiminnn   +++  1 11)) + ) + ) + mmimiinnn));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机颜色\nfunct颜色\nfunct颜色\nfunction ranion ranion randomCodomCodomColololor(r(r())) {\n  {\n  {\n    ret   ret   returururn `n `n `rgrgrgbbb(${ran(${ran(${randddooommm(((0, 0, 0, 255255255)})},)},,${ran ${ran ${randddooommm(((0, 0, 0, 255255255)})},)},,${ran ${ran ${randddooommm(((0, 0, 0, 255255255)))}}})))```;\n;\n;\n}\n}\n}\n\n\n\n////// 随机 随机 随机字字字符串\nfunct符串\nfunct符串\nfunction ranion ranion randomStrdomStrdomStriiing(ng(ng(lllenenen))) {\n  {\n  {\n          lelelen = n = n = lenlenlen   ||||||   3332;\n 2;\n 2;\n          vavavar r r $ch$ch$chararars s s = '= '= 'ABCABCABCDEDEDEFFFGGGHHHJKJKJKMMMNNNPQPQPQRRRSTSTSTWWWXYZXYZXYZabcabcabcdddefhefhefhijijijkmkmkmnpnpnprrrstststwwwxyzxyzxyz234234234555676767888';\n ';\n ';\n          var var var maxmaxmaxPoPoPos s s = = = $ch$ch$chaaars.lenrs.lenrs.lengggttth;\n h;\n h;\n          vavavar r r ","finishReason":"length"} 
  2024-08-27 14:43:50 [triggerCompletion] {"requestId":"cd7bb4ee13281f55","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction random() {","suffix":"}","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":17,"suffix_tokens":1}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-27 14:43:50 [triggerCompletion] {"requestId":"14260142f581904d","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction random() ","suffix":"","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":17,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m())) *  *  *1010 1000)));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机函数\nfunct函数\nfunct函数\nfunction ranion ranion randddomomom2(2(2())) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m())) *  *  *1010 1000)));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机函数\nfunct函数\nfunct函数\nfunction ranion ranion randddomomom3(3(3())) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m())) *  *  *1010 1000)));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机函数\nfunct函数\nfunct函数\nfunction ranion ranion randddomomom4(4(4())) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m())) *  *  *1010 1000)));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机函数\nfunct函数\nfunct函数\nfunction ranion ranion randddomomom5(5(5())) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m())) *  *  *1010 1000)));\n;\n;\n}\n}\n}\n\n\n\n//////","finishReason":"length"}}} 
  2024-08-27 14:43:50 [showCompletion] {"requestId":"14260142f581904d","model":"codeqwenModel","text":" {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m())) *  *  *1010 1000)));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机函数\nfunct函数\nfunct函数\nfunction ranion ranion randddomomom2(2(2())) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m())) *  *  *1010 1000)));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机函数\nfunct函数\nfunct函数\nfunction ranion ranion randddomomom3(3(3())) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m())) *  *  *1010 1000)));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机函数\nfunct函数\nfunct函数\nfunction ranion ranion randddomomom4(4(4())) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m())) *  *  *1010 1000)));\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机函数\nfunct函数\nfunct函数\nfunction ranion ranion randddomomom5(5(5())) {\n  {\n  {\n    ret   ret   return Murn Murn Maaath.flth.flth.floooor(Mor(Mor(Maaath.ranth.ranth.randododom(m(m())) *  *  *1010 1000)));\n;\n;\n}\n}\n}\n\n\n\n//////","finishReason":"length"} 
  2024-08-27 14:43:51 [triggerCompletion] {"requestId":"9722480673bc06c4","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction random() {\n","suffix":"}","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":18,"suffix_tokens":1}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"       ret    ret    return Murn Murn Maaath.ranth.ranth.randododom(m(m())) *  *  * 111000000;\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机函数\nfunct函数\nfunct函数\nfunction ranion ranion randoddm(omom)2(2( {\n ))   ret {\n  {\n urn M   ret   retaurn Murn Mth.ranaadoth.ranth.ranm(dodo)m(m( * ))1 *  * 011000;\n0;\n0;\n}\n\n// 随机函数\nfunction random3() {\n    return Math.random() * 100;\n","finishReason":"stop"}}} 
  2024-08-27 14:43:51 [showCompletion] {"requestId":"9722480673bc06c4","model":"codeqwenModel","text":"       ret    ret    return Murn Murn Maaath.ranth.ranth.randododom(m(m())) *  *  * 111000000;\n;\n;\n}\n}\n}\n\n\n\n////// 随 随 随机机机函数\nfunct函数\nfunct函数\nfunction ranion ranion randoddm(omom)2(2( {\n ))   ret {\n  {\n urn M   ret   retaurn Murn Mth.ranaadoth.ranth.ranm(dodo)m(m( * ))1 *  * 011000;\n0;\n0;\n}\n\n// 随机函数\nfunction random3() {\n    return Math.random() * 100;\n","finishReason":"stop"} 
  2024-08-27 14:43:51 [vscodeShowCompletion] [{"insertText":"      return Math.random() * 100;","range":[{"line":2,"character":0},{"line":2,"character":2}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"19790fe0-4a50-4e2a-ae8c-7ff9b60899bd","insertText":"      return Math.random() * 100;","range":{"start":{"line":2,"character":0},"end":{"line":2,"character":2}},"file":{"$mid":1,"fsPath":"d:\\workspace\\stock-diagnose-front\\test.js","_sep":1,"external":"file:///d%3A/workspace/stock-diagnose-front/test.js","path":"/d:/workspace/stock-diagnose-front/test.js","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"9722480673bc06c4","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"ayx7pz4mqg1ofphfb1w3o6t79wtsj1mp","sku":"monthly_subscriber","languageId":"javascript","beforeCursorWhitespace":"true","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":12,\"PathMarker\":6},\"unused\":{\"LanguageMarker\":5},\"usedCounts\":{\"BeforeCursor\":3,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/stock-diagnose-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"stock-diagnose-front","gitRepoPath":"/10jqka/quote/b2cweb/free/stock-diagnose-front","engineName":"copilot-codex","isMultiline":"true","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"d5f384bb-da40-460f-889a-c4911a6d09361724740944246","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"javascript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"62dc8a20-94ca-4a2b-9575-aace48650d35","endpoint":"completions","uiKind":"ghostText","temperature":"0.2","n":"3","stop":"unset","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-faf3e803d3b4424c841bd8a4d656c6d8","created":"1724741045","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":45,"promptSuffixCharLen":1,"promptEndPos":32,"documentLength":35,"delayMs":0,"promptComputeTimeMs":20,"contextualFilterScore":0.6883065225210857,"timeSinceIssuedMs":24,"current_time":1724741030,"numTokens":19,"compCharLen":32,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724741030010,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"javascript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"    return Math.random() * 100;","position":{"line":2,"character":2},"offset":32,"resultType":0}]}}] 
  2024-08-27 14:43:53 [vscodeShowCompletion] [{"insertText":"      return Math.random() * 100;","range":[{"line":2,"character":0},{"line":2,"character":4}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"0db84c04-5b5d-4c61-8721-8f4e58dcb82d","insertText":"      return Math.random() * 100;","range":{"start":{"line":2,"character":0},"end":{"line":2,"character":4}},"file":{"$mid":1,"fsPath":"d:\\workspace\\stock-diagnose-front\\test.js","_sep":1,"external":"file:///d%3A/workspace/stock-diagnose-front/test.js","path":"/d:/workspace/stock-diagnose-front/test.js","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"9722480673bc06c4","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"ayx7pz4mqg1ofphfb1w3o6t79wtsj1mp","sku":"monthly_subscriber","languageId":"javascript","beforeCursorWhitespace":"true","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":12,\"PathMarker\":6},\"unused\":{\"LanguageMarker\":5},\"usedCounts\":{\"BeforeCursor\":3,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/stock-diagnose-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"stock-diagnose-front","gitRepoPath":"/10jqka/quote/b2cweb/free/stock-diagnose-front","engineName":"copilot-codex","isMultiline":"true","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"d5f384bb-da40-460f-889a-c4911a6d09361724740944246","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"javascript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"62dc8a20-94ca-4a2b-9575-aace48650d35","endpoint":"completions","uiKind":"ghostText","temperature":"0.2","n":"3","stop":"unset","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-faf3e803d3b4424c841bd8a4d656c6d8","created":"1724741045","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":45,"promptSuffixCharLen":1,"promptEndPos":32,"documentLength":35,"delayMs":0,"promptComputeTimeMs":20,"contextualFilterScore":0.6883065225210857,"timeSinceIssuedMs":24,"current_time":1724741030,"numTokens":19,"compCharLen":32,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724741030010,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"javascript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"  return Math.random() * 100;","position":{"line":2,"character":4},"offset":34,"resultType":2}]}}] 
  2024-08-27 14:43:54 [vscodeShowCompletion] [{"insertText":"      return Math.random() * 100;","range":[{"line":2,"character":0},{"line":2,"character":6}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"02ac0660-5e38-468d-b362-b0382ed802d2","insertText":"      return Math.random() * 100;","range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"file":{"$mid":1,"fsPath":"d:\\workspace\\stock-diagnose-front\\test.js","_sep":1,"external":"file:///d%3A/workspace/stock-diagnose-front/test.js","path":"/d:/workspace/stock-diagnose-front/test.js","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"9722480673bc06c4","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"ayx7pz4mqg1ofphfb1w3o6t79wtsj1mp","sku":"monthly_subscriber","languageId":"javascript","beforeCursorWhitespace":"true","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":12,\"PathMarker\":6},\"unused\":{\"LanguageMarker\":5},\"usedCounts\":{\"BeforeCursor\":3,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/stock-diagnose-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"stock-diagnose-front","gitRepoPath":"/10jqka/quote/b2cweb/free/stock-diagnose-front","engineName":"copilot-codex","isMultiline":"true","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"d5f384bb-da40-460f-889a-c4911a6d09361724740944246","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"javascript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"62dc8a20-94ca-4a2b-9575-aace48650d35","endpoint":"completions","uiKind":"ghostText","temperature":"0.2","n":"3","stop":"unset","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-faf3e803d3b4424c841bd8a4d656c6d8","created":"1724741045","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":45,"promptSuffixCharLen":1,"promptEndPos":32,"documentLength":35,"delayMs":0,"promptComputeTimeMs":20,"contextualFilterScore":0.6883065225210857,"timeSinceIssuedMs":24,"current_time":1724741030,"numTokens":19,"compCharLen":32,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724741030010,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"javascript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"return Math.random() * 100;","position":{"line":2,"character":6},"offset":36,"resultType":2}]}}] 
  2024-08-27 14:43:54 [acceptCompletion] {"requestId":"9722480673bc06c4","text":"      return Math.random() * 100;","telemetry":{"uuid":"02ac0660-5e38-468d-b362-b0382ed802d2","insertText":"      return Math.random() * 100;","range":{"start":{"line":2,"character":0},"end":{"line":2,"character":6}},"file":{"$mid":1,"fsPath":"d:\\workspace\\stock-diagnose-front\\test.js","_sep":1,"external":"file:///d%3A/workspace/stock-diagnose-front/test.js","path":"/d:/workspace/stock-diagnose-front/test.js","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"9722480673bc06c4","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"ayx7pz4mqg1ofphfb1w3o6t79wtsj1mp","sku":"monthly_subscriber","languageId":"javascript","beforeCursorWhitespace":"true","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":12,\"PathMarker\":6},\"unused\":{\"LanguageMarker\":5},\"usedCounts\":{\"BeforeCursor\":3,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/stock-diagnose-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"stock-diagnose-front","gitRepoPath":"/10jqka/quote/b2cweb/free/stock-diagnose-front","engineName":"copilot-codex","isMultiline":"true","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"d5f384bb-da40-460f-889a-c4911a6d09361724740944246","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"javascript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"62dc8a20-94ca-4a2b-9575-aace48650d35","endpoint":"completions","uiKind":"ghostText","temperature":"0.2","n":"3","stop":"unset","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-faf3e803d3b4424c841bd8a4d656c6d8","created":"1724741045","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":45,"promptSuffixCharLen":1,"promptEndPos":32,"documentLength":35,"delayMs":0,"promptComputeTimeMs":20,"contextualFilterScore":0.6883065225210857,"timeSinceIssuedMs":24,"current_time":1724741030,"numTokens":19,"compCharLen":32,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724741030010,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"javascript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"return Math.random() * 100;","position":{"line":2,"character":6},"offset":36,"resultType":2}} 
  2024-08-27 14:43:55 [triggerCompletion] {"requestId":"e40df68f4110f3e5","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction random() {\n      return Math.random() * 100;","suffix":"}","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":26,"suffix_tokens":1}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-27 14:43:56 [triggerCompletion] {"requestId":"c29794b650df2607","request":{"prompt":"// Path: test.js\n// 随机函数\nfunction random() {\n  return Math.random() * 100;","suffix":"}","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":26,"suffix_tokens":1}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-27 16:07:50 [triggerCompletion] {"requestId":"c513f6b2f58db65e","request":{"prompt":"// Path: src/stores/listener.ts\nimport { defineStore } from 'pinia';\n\n// 用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n// 为什么不用watch？本质上不希望同一个监听通过多个watch监听，而是希望通过一个监听，触发多个函数，可以统一管理请求，设立优先级、减少watch监听数量\ninterface RequestDep {\n  id: string; // 请求id\n  func: () => void | Promise<void>; // 请求函数\n  level: number; // 请求优先级\n}\nexport const useListenerStore = defineStore('listener', () => {\n  // 这里用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n  const requestDep: RequestDep[] = [];\n\n  // 加入监听数组\n  function addRequestDep(id: string, func: () => void, level = 0) {\n    requestDep.push({ id, func, level });\n  }\n\n  // 移除监听数组\n  function removeRequestDep(id: string) {\n    const index = requestDep.findIndex((item) => item.id === id);\n    index > -1 && requestDep.splice(index, 1);\n  }\n\n  /**\n   * 触发监听数组\n   * @description 按照优先级依次触发监听数组中的函数,因为这个数组\n   * \n   * */\n  async function triggerRequestDep() {\n    // 按优先级从高到低排序\n    const sortedRequestDep = [...requestDep].sort((a, b) => b.level - a.level);\n\n    // 按优先级分组\n    const groupedByLevel = sortedRequestDep.reduce((acc, item) => {\n      if (!acc[item.level]) {\n        acc[item.level] = [];\n      }\n      acc[item.level].push(item);\n      return acc;\n    }, {} as Record<number, RequestDep[]>);\n\n    // 依次处理每个优先级的请求\n    for (const level of Object.keys(groupedByLevel).sort((a, b) => Number(b) - Number(a))) {\n      const items = groupedByLevel[Number(level)];\n      const promises = items.map(item => item.func());\n","suffix":"// 等待当前优先级的所有请求完成\r\n      await Promise.all(promises);\r\n    }\r\n  }\r\n\r\n  return { addRequestDep, removeRequestDep, triggerRequestDep };\r\n});\r\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":6,"trim_by_indentation":true,"prompt_tokens":612,"suffix_tokens":41}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"                     ","finishReason":"stop"}}} 
  2024-08-27 16:07:56 [triggerCompletion] {"requestId":"99ed82529ffe39a8","request":{"prompt":"// Path: src/stores/listener.ts\nimport { defineStore } from 'pinia';\n\n// 用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n// 为什么不用watch？本质上不希望同一个监听通过多个watch监听，而是希望通过一个监听，触发多个函数，可以统一管理请求，设立优先级、减少watch监听数量\ninterface RequestDep {\n  id: string; // 请求id\n  func: () => void | Promise<void>; // 请求函数\n  level: number; // 请求优先级\n}\nexport const useListenerStore = defineStore('listener', () => {\n  // 这里用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n  const requestDep: RequestDep[] = [];\n\n  // 加入监听数组\n  function addRequestDep(id: string, func: () => void, level = 0) {\n    requestDep.push({ id, func, level });\n  }\n\n  // 移除监听数组\n  function removeRequestDep(id: string) {\n    const index = requestDep.findIndex((item) => item.id === id);\n    index > -1 && requestDep.splice(index, 1);\n  }\n\n  /**\n   * 触发监听数组\n   * @description 按照优先级依次触发监听数组中的函数,因为这个数组\n   * \n   * */\n  async function triggerRequestDep() {\n    // 按优先级从高到低排序\n    const sortedRequestDep = [...requestDep].sort((a, b) => b.level - a.level);\n\n    // 按优先级分组\n    const groupedByLevel = sortedRequestDep.reduce((acc, item) => {\n      if (!acc[item.level]) {\n        acc[item.level] = [];\n      }\n      acc[item.level].push(item);\n      return acc;\n    }, {} as Record<number, RequestDep[]>);\n\n    // 依次处理每个优先级的请求\n    for (const level of Object.keys(groupedByLevel).sort((a, b) => Number(b) - Number(a))) {\n      const items = groupedByLevel[Number(level)];\n      const promises = items.map(item => item.func());\n      try","suffix":"// 等待当前优先级的所有请求完成\r\n      await Promise.all(promises);\r\n    }\r\n  }\r\n\r\n  return { addRequestDep, removeRequestDep, triggerRequestDep };\r\n});\r\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":6,"trim_by_indentation":true,"prompt_tokens":613,"suffix_tokens":41}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" {\n      {\n      {\n            aw aw await Promait Promait Promiiise.se.se.aaall(pll(pll(promiromiromisesesesss);\n );\n );\n            }ca  }ca  }catttccch(h(h(eee){\n     ){\n     ){\n        cons   cons   consooole.le.le.erllrooog(r(gee();\n );\n e)\n              }\n  }\n  }\n         <file_s   ep  }> /// \ns  rc}\n/sto\n  retrures/ln { isteaddRequnesterD.ep, remts\nimpoveRequorestt { defDineStep, trigorgerReque } festroDem 'p pi}ni;a'\r\n};\n\nexp)ort co;nst \rus\neSt\rockSt\nor\re = def\nineSt\ror\ne('st\roc\nk',\r ()\n =\r>\n {\r\n  co\nnst st\roc\nk = \rre\nf('\r\n'\r);\n\n  co\rnst st\nockN\ram\ne = \rre\nf('\r'\n);\r\n  co\nnst st\rockC\nod\re = \nre\rf('\n'\r);\n\n  co\rnst st\nockT\ryp\ne = \rre\nf('\r'\n);\r\n  co\nnst st\rockT\nypeN\ram\ne = \rre\nf('\r'\n);\r\n  co\nnst st\rockT\nypeC\rod\ne = \rre\nf('","finishReason":"length"}}} 
  2024-08-27 16:07:56 [showCompletion] {"requestId":"99ed82529ffe39a8","model":"codeqwenModel","text":" {\n      {\n      {\n            aw aw await Promait Promait Promiiise.se.se.aaall(pll(pll(promiromiromisesesesss);\n );\n );\n            }ca  }ca  }catttccch(h(h(eee){\n     ){\n     ){\n        cons   cons   consooole.le.le.erllrooog(r(gee();\n );\n e)\n              }\n  }\n  }\n         <file_s   ep  }> /// \ns  rc}\n/sto\n  retrures/ln { isteaddRequnesterD.ep, remts\nimpoveRequorestt { defDineStep, trigorgerReque } festroDem 'p pi}ni;a'\r\n};\n\nexp)ort co;nst \rus\neSt\rockSt\nor\re = def\nineSt\ror\ne('st\roc\nk',\r ()\n =\r>\n {\r\n  co\nnst st\roc\nk = \rre\nf('\r\n'\r);\n\n  co\rnst st\nockN\ram\ne = \rre\nf('\r'\n);\r\n  co\nnst st\rockC\nod\re = \nre\rf('\n'\r);\n\n  co\rnst st\nockT\ryp\ne = \rre\nf('\r'\n);\r\n  co\nnst st\rockT\nypeN\ram\ne = \rre\nf('\r'\n);\r\n  co\nnst st\rockT\nypeC\rod\ne = \rre\nf('","finishReason":"length"} 
  2024-08-27 16:07:56 [triggerCompletion] {"requestId":"23507cb37ac693c1","request":{"prompt":"// Path: src/stores/listener.ts\nimport { defineStore } from 'pinia';\n\n// 用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n// 为什么不用watch？本质上不希望同一个监听通过多个watch监听，而是希望通过一个监听，触发多个函数，可以统一管理请求，设立优先级、减少watch监听数量\ninterface RequestDep {\n  id: string; // 请求id\n  func: () => void | Promise<void>; // 请求函数\n  level: number; // 请求优先级\n}\nexport const useListenerStore = defineStore('listener', () => {\n  // 这里用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n  const requestDep: RequestDep[] = [];\n\n  // 加入监听数组\n  function addRequestDep(id: string, func: () => void, level = 0) {\n    requestDep.push({ id, func, level });\n  }\n\n  // 移除监听数组\n  function removeRequestDep(id: string) {\n    const index = requestDep.findIndex((item) => item.id === id);\n    index > -1 && requestDep.splice(index, 1);\n  }\n\n  /**\n   * 触发监听数组\n   * @description 按照优先级依次触发监听数组中的函数,因为这个数组\n   * \n   * */\n  async function triggerRequestDep() {\n    // 按优先级从高到低排序\n    const sortedRequestDep = [...requestDep].sort((a, b) => b.level - a.level);\n\n    // 按优先级分组\n    const groupedByLevel = sortedRequestDep.reduce((acc, item) => {\n      if (!acc[item.level]) {\n        acc[item.level] = [];\n      }\n      acc[item.level].push(item);\n      return acc;\n    }, {} as Record<number, RequestDep[]>);\n\n    // 依次处理每个优先级的请求\n    for (const level of Object.keys(groupedByLevel).sort((a, b) => Number(b) - Number(a))) {\n      const items = groupedByLevel[Number(level)];\n      const promises = items.map(item => item.func());\n      try ","suffix":"// 等待当前优先级的所有请求完成\r\n      await Promise.all(promises);\r\n    }\r\n  }\r\n\r\n  return { addRequestDep, removeRequestDep, triggerRequestDep };\r\n});\r\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":6,"trim_by_indentation":true,"prompt_tokens":614,"suffix_tokens":41}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" {\n      {\n      {\n            aw aw await Promait Promait Promiiise.se.se.aaall(pll(pll(promiromiromisesesesss);\n );\n );\n            } ca  } ca  } catctctch (erh (erh (errrrororor))) {\n      {\n      {\n        cons   cons   consooole.erle.erle.errroroor(err('Err(`Errororrorr in trig in requ);\n gerRequest  estD Dep ep[${le }\n :', ervero  lr }]);\n }\r:`, er  \n ro  r });\n  }\n \r  \n\r  \n     } }\n //\n    触  发监}}\r听\r\n 数\n\r 组\r\n  }\n  as/\rync funct*\n\rion trig*\r\n gerRequ\n  est //De * 触p() 触发监 发监听{\r\n 听数  数组\r /组\r\n  as/ \n ync funct按  ion trig优* @descriptgerRequ先ionest级 按De从照p()高到优先 低级依{\r\n 排次触  序\r\n 发监 /   co听数/ nst sor组中按tedRequ的优est函数先De,因级p 为这从= [个高到...requ数低est组\r排De\n 序\r\n p].s     coor*nst sort \rtedRequ(\n est(a  *De, p  b)*= [ =/\r...requ>\n  asest b.leync functDeveion trigp].sl gerRequor-estt a.leDe(velp()(a) ,;{\r\n  b)\r   =\n\r\n  />  /  b.le /按ve/ 优l 按先-优先级 a.le级从vel分高到)组\r\n 低;   co排\rnst grou序\r\n \n\r\n pe   co  dByLenst sor /vetedRequ/ l = sorest按tedRequDe优先estp 级D= [分ep.r...requ组\r\n edest   coucDenst groue((p].speaordByLecc, itvet(l = sorem)(atedRequ =>,est  b)D","finishReason":"length"}}} 
  2024-08-27 16:07:56 [showCompletion] {"requestId":"23507cb37ac693c1","model":"codeqwenModel","text":" {\n      {\n      {\n            aw aw await Promait Promait Promiiise.se.se.aaall(pll(pll(promiromiromisesesesss);\n );\n );\n            } ca  } ca  } catctctch (erh (erh (errrrororor))) {\n      {\n      {\n        cons   cons   consooole.erle.erle.errroroor(err('Err(`Errororrorr in trig in requ);\n gerRequest  estD Dep ep[${le }\n :', ervero  lr }]);\n }\r:`, er  \n ro  r });\n  }\n \r  \n\r  \n     } }\n //\n    触  发监}}\r听\r\n 数\n\r 组\r\n  }\n  as/\rync funct*\n\rion trig*\r\n gerRequ\n  est //De * 触p() 触发监 发监听{\r\n 听数  数组\r /组\r\n  as/ \n ync funct按  ion trig优* @descriptgerRequ先ionest级 按De从照p()高到优先 低级依{\r\n 排次触  序\r\n 发监 /   co听数/ nst sor组中按tedRequ的优est函数先De,因级p 为这从= [个高到...requ数低est组\r排De\n 序\r\n p].s     coor*nst sort \rtedRequ(\n est(a  *De, p  b)*= [ =/\r...requ>\n  asest b.leync functDeveion trigp].sl gerRequor-estt a.leDe(velp()(a) ,;{\r\n  b)\r   =\n\r\n  />  /  b.le /按ve/ 优l 按先-优先级 a.le级从vel分高到)组\r\n 低;   co排\rnst grou序\r\n \n\r\n pe   co  dByLenst sor /vetedRequ/ l = sorest按tedRequDe优先estp 级D= [分ep.r...requ组\r\n edest   coucDenst groue((p].speaordByLecc, itvet(l = sorem)(atedRequ =>,est  b)D","finishReason":"length"} 
  2024-08-27 16:07:57 [showCompletion] {"requestId":"1d61d214faddaa85","model":"codeqwenModel","text":"                   aw    aw    await Promait Promait Promiiise.se.se.aaall(pll(pll(promiromiromisessesses)));\r\n ;\r\n ;\r\n            } ca  } ca  } catctctch (erh (erh (errrror)or)or)   {\r\n     {\r\n     {\r\n        cons   cons   consooole.erle.erle.errroroor(err(`Err(`Errorrorror) in requ in requ;\r\n estest le  Dep wvel  ith le ${le velve}\r\n  ${lel}  ve:`, erl}   ror:`, er)ror;\r\n )  ;\r\n        }\r\n    }\r\n    }\r \n }\r \n } \r}\n\r\r\n  \n\r/\n  */*\r*\n *\r \n  *  触 *发监 触听发监数听组\r数\n 组\r  \n * @descript  ion* @descript 按ion照 按优先照级依优先次触级依发监次触听数发监组中听数的组中函数的,因函数为这,因个为这数个组\r数\n 组\r  \n *   \r*\n  \r  *\n    ** /\r*\n  as/\rync funct\n  asion trigync functgerRequion trigestgerRequDestepD2()ep 2(){\r\n    {\r\n  /  /  /按/ 优按先优级先从级高到从低高到排低序\r\n 排   co序\r\n nst sor   cotedRequnst soresttedRequDeestp De= [p ...requ= [est...requDeestp].sDeorp].stor(t(a(,(a b), = b)>","finishReason":"length"} 
  2024-08-27 16:07:57 [triggerCompletion] {"requestId":"1d61d214faddaa85","request":{"prompt":"// Path: src/stores/listener.ts\nimport { defineStore } from 'pinia';\n\n// 用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n// 为什么不用watch？本质上不希望同一个监听通过多个watch监听，而是希望通过一个监听，触发多个函数，可以统一管理请求，设立优先级、减少watch监听数量\ninterface RequestDep {\n  id: string; // 请求id\n  func: () => void | Promise<void>; // 请求函数\n  level: number; // 请求优先级\n}\nexport const useListenerStore = defineStore('listener', () => {\n  // 这里用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n  const requestDep: RequestDep[] = [];\n\n  // 加入监听数组\n  function addRequestDep(id: string, func: () => void, level = 0) {\n    requestDep.push({ id, func, level });\n  }\n\n  // 移除监听数组\n  function removeRequestDep(id: string) {\n    const index = requestDep.findIndex((item) => item.id === id);\n    index > -1 && requestDep.splice(index, 1);\n  }\n\n  /**\n   * 触发监听数组\n   * @description 按照优先级依次触发监听数组中的函数,因为这个数组\n   * \n   * */\n  async function triggerRequestDep() {\n    // 按优先级从高到低排序\n    const sortedRequestDep = [...requestDep].sort((a, b) => b.level - a.level);\n\n    // 按优先级分组\n    const groupedByLevel = sortedRequestDep.reduce((acc, item) => {\n      if (!acc[item.level]) {\n        acc[item.level] = [];\n      }\n      acc[item.level].push(item);\n      return acc;\n    }, {} as Record<number, RequestDep[]>);\n\n    // 依次处理每个优先级的请求\n    for (const level of Object.keys(groupedByLevel).sort((a, b) => Number(b) - Number(a))) {\n      const items = groupedByLevel[Number(level)];\n      const promises = items.map(item => item.func());\n      try {\n","suffix":"// 等待当前优先级的所有请求完成\r\n      await Promise.all(promises);\r\n    }\r\n  }\r\n\r\n  return { addRequestDep, removeRequestDep, triggerRequestDep };\r\n});\r\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":6,"trim_by_indentation":true,"prompt_tokens":615,"suffix_tokens":41}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"                   aw    aw    await Promait Promait Promiiise.se.se.aaall(pll(pll(promiromiromisessesses)));\r\n ;\r\n ;\r\n            } ca  } ca  } catctctch (erh (erh (errrror)or)or)   {\r\n     {\r\n     {\r\n        cons   cons   consooole.erle.erle.errroroor(err(`Err(`Errorrorror) in requ in requ;\r\n estest le  Dep wvel  ith le ${le velve}\r\n  ${lel}  ve:`, erl}   ror:`, er)ror;\r\n )  ;\r\n        }\r\n    }\r\n    }\r \n }\r \n } \r}\n\r\r\n  \n\r/\n  */*\r*\n *\r \n  *  触 *发监 触听发监数听组\r数\n 组\r  \n * @descript  ion* @descript 按ion照 按优先照级依优先次触级依发监次触听数发监组中听数的组中函数的,因函数为这,因个为这数个组\r数\n 组\r  \n *   \r*\n  \r  *\n    ** /\r*\n  as/\rync funct\n  asion trigync functgerRequion trigestgerRequDestepD2()ep 2(){\r\n    {\r\n  /  /  /按/ 优按先优级先从级高到从低高到排低序\r\n 排   co序\r\n nst sor   cotedRequnst soresttedRequDeestp De= [p ...requ= [est...requDeestp].sDeorp].stor(t(a(,(a b), = b)>","finishReason":"length"}}} 
  2024-08-27 16:07:58 [triggerCompletion] {"requestId":"e9c9217329024b50","request":{"prompt":"// Path: src/stores/listener.ts\nimport { defineStore } from 'pinia';\n\n// 用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n// 为什么不用watch？本质上不希望同一个监听通过多个watch监听，而是希望通过一个监听，触发多个函数，可以统一管理请求，设立优先级、减少watch监听数量\ninterface RequestDep {\n  id: string; // 请求id\n  func: () => void | Promise<void>; // 请求函数\n  level: number; // 请求优先级\n}\nexport const useListenerStore = defineStore('listener', () => {\n  // 这里用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n  const requestDep: RequestDep[] = [];\n\n  // 加入监听数组\n  function addRequestDep(id: string, func: () => void, level = 0) {\n    requestDep.push({ id, func, level });\n  }\n\n  // 移除监听数组\n  function removeRequestDep(id: string) {\n    const index = requestDep.findIndex((item) => item.id === id);\n    index > -1 && requestDep.splice(index, 1);\n  }\n\n  /**\n   * 触发监听数组\n   * @description 按照优先级依次触发监听数组中的函数,因为这个数组\n   * \n   * */\n  async function triggerRequestDep() {\n    // 按优先级从高到低排序\n    const sortedRequestDep = [...requestDep].sort((a, b) => b.level - a.level);\n\n    // 按优先级分组\n    const groupedByLevel = sortedRequestDep.reduce((acc, item) => {\n      if (!acc[item.level]) {\n        acc[item.level] = [];\n      }\n      acc[item.level].push(item);\n      return acc;\n    }, {} as Record<number, RequestDep[]>);\n\n    // 依次处理每个优先级的请求\n    for (const level of Object.keys(groupedByLevel).sort((a, b) => Number(b) - Number(a))) {\n      const items = groupedByLevel[Number(level)];\n      const promises = items.map(item => item.func());\n      try {","suffix":"// 等待当前优先级的所有请求完成\r\n      await Promise.all(promises);\r\n    }\r\n  }\r\n\r\n  return { addRequestDep, removeRequestDep, triggerRequestDep };\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":8,"trim_by_indentation":true,"prompt_tokens":614,"suffix_tokens":41}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"","finishReason":"stop"}}} 
  2024-08-27 16:08:02 [triggerCompletion] {"requestId":"ba54697d90065c13","request":{"prompt":"// Path: src/stores/listener.ts\nimport { defineStore } from 'pinia';\n\n// 用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n// 为什么不用watch？本质上不希望同一个监听通过多个watch监听，而是希望通过一个监听，触发多个函数，可以统一管理请求，设立优先级、减少watch监听数量\ninterface RequestDep {\n  id: string; // 请求id\n  func: () => void | Promise<void>; // 请求函数\n  level: number; // 请求优先级\n}\nexport const useListenerStore = defineStore('listener', () => {\n  // 这里用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n  const requestDep: RequestDep[] = [];\n\n  // 加入监听数组\n  function addRequestDep(id: string, func: () => void, level = 0) {\n    requestDep.push({ id, func, level });\n  }\n\n  // 移除监听数组\n  function removeRequestDep(id: string) {\n    const index = requestDep.findIndex((item) => item.id === id);\n    index > -1 && requestDep.splice(index, 1);\n  }\n\n  /**\n   * 触发监听数组\n   * @description 按照优先级依次触发监听数组中的函数,因为这个数组\n   * \n   * */\n  async function triggerRequestDep() {\n    // 按优先级从高到低排序\n    const sortedRequestDep = [...requestDep].sort((a, b) => b.level - a.level);\n\n    // 按优先级分组\n    const groupedByLevel = sortedRequestDep.reduce((acc, item) => {\n      if (!acc[item.level]) {\n        acc[item.level] = [];\n      }\n      acc[item.level].push(item);\n      return acc;\n    }, {} as Record<number, RequestDep[]>);\n\n    // 依次处理每个优先级的请求\n    for (const level of Object.keys(groupedByLevel).sort((a, b) => Number(b) - Number(a))) {\n      const items = groupedByLevel[Number(level)];\n      const promises = items.map(item => item.func());\n      try {\n        // 等待当前优先级的所有请求完成\n        await Promise.all(promises);\n      } ","suffix":"}\r\n  }\r\n\r\n  return { addRequestDep, removeRequestDep, triggerRequestDep };\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":639,"suffix_tokens":19}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" catch (error) {","finishReason":"stop"}}} 
  2024-08-27 16:08:02 [showCompletion] {"requestId":"ba54697d90065c13","model":"codeqwenModel","text":" catch (error) {","finishReason":"stop"} 
  2024-08-27 16:08:02 [vscodeShowCompletion] [{"insertText":"      } catch (error) {","range":[{"line":49,"character":0},{"line":49,"character":8}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"d0ceb2c2-6365-48a8-a4b6-ca7b083570e3","insertText":"      } catch (error) {","range":{"start":{"line":49,"character":0},"end":{"line":49,"character":8}},"file":{"$mid":1,"fsPath":"d:\\workspace\\stock-diagnose-front\\src\\stores\\listener.ts","_sep":1,"external":"file:///d%3A/workspace/stock-diagnose-front/src/stores/listener.ts","path":"/d:/workspace/stock-diagnose-front/src/stores/listener.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"ba54697d90065c13","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"cyud4rnpj214tvpp1rak2344elmqck9y","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":630,\"PathMarker\":10},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":50,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c71f7b86f397f4eca8779afb41c4589bb5c3325987b95636fa05b34e601b05f5\",\"ba968344bb45c9a95888854ea4a1c942be7ecba6db70efef8c0ed9798d765c80\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/stock-diagnose-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"stock-diagnose-front","gitRepoPath":"/10jqka/quote/b2cweb/free/stock-diagnose-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"d5f384bb-da40-460f-889a-c4911a6d09361724740944246","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"6828df36-1146-4ab3-b7a3-d5ce0443097c","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-957e977e367840949c01dbc69500cb6e","created":"1724746086","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1600,"promptSuffixCharLen":81,"promptEndPos":1617,"documentLength":1704,"delayMs":0,"promptComputeTimeMs":9,"contextualFilterScore":0.6624224531338674,"timeSinceIssuedMs":13,"current_time":1724746081,"numTokens":5,"compCharLen":16,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724746081861,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"catch (error) {","position":{"line":49,"character":8},"offset":1617,"resultType":0}]}}] 
  2024-08-27 16:08:02 [triggerCompletion] {"requestId":"0df5701c000a5d24","request":{"prompt":"// Path: src/stores/listener.ts\nimport { defineStore } from 'pinia';\n\n// 用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n// 为什么不用watch？本质上不希望同一个监听通过多个watch监听，而是希望通过一个监听，触发多个函数，可以统一管理请求，设立优先级、减少watch监听数量\ninterface RequestDep {\n  id: string; // 请求id\n  func: () => void | Promise<void>; // 请求函数\n  level: number; // 请求优先级\n}\nexport const useListenerStore = defineStore('listener', () => {\n  // 这里用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n  const requestDep: RequestDep[] = [];\n\n  // 加入监听数组\n  function addRequestDep(id: string, func: () => void, level = 0) {\n    requestDep.push({ id, func, level });\n  }\n\n  // 移除监听数组\n  function removeRequestDep(id: string) {\n    const index = requestDep.findIndex((item) => item.id === id);\n    index > -1 && requestDep.splice(index, 1);\n  }\n\n  /**\n   * 触发监听数组\n   * @description 按照优先级依次触发监听数组中的函数,因为这个数组\n   * \n   * */\n  async function triggerRequestDep() {\n    // 按优先级从高到低排序\n    const sortedRequestDep = [...requestDep].sort((a, b) => b.level - a.level);\n\n    // 按优先级分组\n    const groupedByLevel = sortedRequestDep.reduce((acc, item) => {\n      if (!acc[item.level]) {\n        acc[item.level] = [];\n      }\n      acc[item.level].push(item);\n      return acc;\n    }, {} as Record<number, RequestDep[]>);\n\n    // 依次处理每个优先级的请求\n    for (const level of Object.keys(groupedByLevel).sort((a, b) => Number(b) - Number(a))) {\n      const items = groupedByLevel[Number(level)];\n      const promises = items.map(item => item.func());\n      try {\n        // 等待当前优先级的所有请求完成\n        await Promise.all(promises);\n      } c","suffix":"}\r\n  }\r\n\r\n  return { addRequestDep, removeRequestDep, triggerRequestDep };\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":639,"suffix_tokens":19}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" atch (error) {\r","finishReason":"stop"}}} 
  2024-08-27 16:08:02 [showCompletion] {"requestId":"0df5701c000a5d24","model":"codeqwenModel","text":" atch (error) {\r","finishReason":"stop"} 
  2024-08-27 16:08:02 [triggerCompletion] {"requestId":"a6531c0bf101c338","request":{"prompt":"// Path: src/stores/listener.ts\nimport { defineStore } from 'pinia';\n\n// 用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n// 为什么不用watch？本质上不希望同一个监听通过多个watch监听，而是希望通过一个监听，触发多个函数，可以统一管理请求，设立优先级、减少watch监听数量\ninterface RequestDep {\n  id: string; // 请求id\n  func: () => void | Promise<void>; // 请求函数\n  level: number; // 请求优先级\n}\nexport const useListenerStore = defineStore('listener', () => {\n  // 这里用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n  const requestDep: RequestDep[] = [];\n\n  // 加入监听数组\n  function addRequestDep(id: string, func: () => void, level = 0) {\n    requestDep.push({ id, func, level });\n  }\n\n  // 移除监听数组\n  function removeRequestDep(id: string) {\n    const index = requestDep.findIndex((item) => item.id === id);\n    index > -1 && requestDep.splice(index, 1);\n  }\n\n  /**\n   * 触发监听数组\n   * @description 按照优先级依次触发监听数组中的函数,因为这个数组\n   * \n   * */\n  async function triggerRequestDep() {\n    // 按优先级从高到低排序\n    const sortedRequestDep = [...requestDep].sort((a, b) => b.level - a.level);\n\n    // 按优先级分组\n    const groupedByLevel = sortedRequestDep.reduce((acc, item) => {\n      if (!acc[item.level]) {\n        acc[item.level] = [];\n      }\n      acc[item.level].push(item);\n      return acc;\n    }, {} as Record<number, RequestDep[]>);\n\n    // 依次处理每个优先级的请求\n    for (const level of Object.keys(groupedByLevel).sort((a, b) => Number(b) - Number(a))) {\n      const items = groupedByLevel[Number(level)];\n      const promises = items.map(item => item.func());\n      try {\n        // 等待当前优先级的所有请求完成\n        await Promise.all(promises);\n      } cat","suffix":"}\r\n  }\r\n\r\n  return { addRequestDep, removeRequestDep, triggerRequestDep };\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":639,"suffix_tokens":19}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"ch (error) {\r","finishReason":"stop"}}} 
  2024-08-27 16:08:02 [vscodeShowCompletion] [{"insertText":"      } catch (error) {","range":[{"line":49,"character":0},{"line":49,"character":11}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"5fc15ad7-74de-4ffa-853c-b7273436672c","insertText":"      } catch (error) {","range":{"start":{"line":49,"character":0},"end":{"line":49,"character":11}},"file":{"$mid":1,"fsPath":"d:\\workspace\\stock-diagnose-front\\src\\stores\\listener.ts","_sep":1,"external":"file:///d%3A/workspace/stock-diagnose-front/src/stores/listener.ts","path":"/d:/workspace/stock-diagnose-front/src/stores/listener.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"a6531c0bf101c338","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"cyud4rnpj214tvpp1rak2344elmqck9y","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":630,\"PathMarker\":10},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":50,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c71f7b86f397f4eca8779afb41c4589bb5c3325987b95636fa05b34e601b05f5\",\"ba968344bb45c9a95888854ea4a1c942be7ecba6db70efef8c0ed9798d765c80\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/stock-diagnose-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"stock-diagnose-front","gitRepoPath":"/10jqka/quote/b2cweb/free/stock-diagnose-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"d5f384bb-da40-460f-889a-c4911a6d09361724740944246","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"8821568b-d950-40e8-8d5c-974f023e41d4","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-1b9daf11d9da4027bbb2e9a419338ea9","created":"1724746087","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1603,"promptSuffixCharLen":81,"promptEndPos":1620,"documentLength":1707,"delayMs":0,"promptComputeTimeMs":24,"contextualFilterScore":0.7597671641985169,"timeSinceIssuedMs":30,"current_time":1724746082,"numTokens":5,"compCharLen":12,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724746082642,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"ch (error) {","position":{"line":49,"character":11},"offset":1620,"resultType":0}]}}] 
  2024-08-27 16:08:02 [showCompletion] {"requestId":"a6531c0bf101c338","model":"codeqwenModel","text":"ch (error) {\r","finishReason":"stop"} 
  2024-08-27 16:08:03 [vscodeShowCompletion] [{"insertText":"      } catch (error) {","range":[{"line":49,"character":0},{"line":49,"character":11}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"d03b6cda-77d4-4c12-a7de-28c8637e1067","insertText":"      } catch (error) {","range":{"start":{"line":49,"character":0},"end":{"line":49,"character":11}},"file":{"$mid":1,"fsPath":"d:\\workspace\\stock-diagnose-front\\src\\stores\\listener.ts","_sep":1,"external":"file:///d%3A/workspace/stock-diagnose-front/src/stores/listener.ts","path":"/d:/workspace/stock-diagnose-front/src/stores/listener.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"a6531c0bf101c338","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"cyud4rnpj214tvpp1rak2344elmqck9y","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":630,\"PathMarker\":10},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":50,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c71f7b86f397f4eca8779afb41c4589bb5c3325987b95636fa05b34e601b05f5\",\"ba968344bb45c9a95888854ea4a1c942be7ecba6db70efef8c0ed9798d765c80\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/stock-diagnose-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"stock-diagnose-front","gitRepoPath":"/10jqka/quote/b2cweb/free/stock-diagnose-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"d5f384bb-da40-460f-889a-c4911a6d09361724740944246","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"8821568b-d950-40e8-8d5c-974f023e41d4","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-1b9daf11d9da4027bbb2e9a419338ea9","created":"1724746087","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1603,"promptSuffixCharLen":81,"promptEndPos":1620,"documentLength":1707,"delayMs":0,"promptComputeTimeMs":24,"contextualFilterScore":0.7597671641985169,"timeSinceIssuedMs":30,"current_time":1724746082,"numTokens":5,"compCharLen":12,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724746082642,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"ch (error) {","position":{"line":49,"character":11},"offset":1620,"resultType":2}]}}] 
  2024-08-27 16:08:03 [vscodeShowCompletion] [{"insertText":"      } catch (error) {","range":[{"line":49,"character":0},{"line":49,"character":12}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"6b940728-4e00-42c5-88fa-51136b29f117","insertText":"      } catch (error) {","range":{"start":{"line":49,"character":0},"end":{"line":49,"character":12}},"file":{"$mid":1,"fsPath":"d:\\workspace\\stock-diagnose-front\\src\\stores\\listener.ts","_sep":1,"external":"file:///d%3A/workspace/stock-diagnose-front/src/stores/listener.ts","path":"/d:/workspace/stock-diagnose-front/src/stores/listener.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"a6531c0bf101c338","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"cyud4rnpj214tvpp1rak2344elmqck9y","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":630,\"PathMarker\":10},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":50,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c71f7b86f397f4eca8779afb41c4589bb5c3325987b95636fa05b34e601b05f5\",\"ba968344bb45c9a95888854ea4a1c942be7ecba6db70efef8c0ed9798d765c80\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/stock-diagnose-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"stock-diagnose-front","gitRepoPath":"/10jqka/quote/b2cweb/free/stock-diagnose-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"d5f384bb-da40-460f-889a-c4911a6d09361724740944246","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"8821568b-d950-40e8-8d5c-974f023e41d4","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-1b9daf11d9da4027bbb2e9a419338ea9","created":"1724746087","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1603,"promptSuffixCharLen":81,"promptEndPos":1620,"documentLength":1707,"delayMs":0,"promptComputeTimeMs":24,"contextualFilterScore":0.7597671641985169,"timeSinceIssuedMs":30,"current_time":1724746082,"numTokens":5,"compCharLen":11,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724746082642,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"h (error) {","position":{"line":49,"character":12},"offset":1621,"resultType":2}]}}] 
  2024-08-27 16:08:04 [acceptCompletion] {"requestId":"a6531c0bf101c338","text":"      } catch (error) {","telemetry":{"uuid":"6b940728-4e00-42c5-88fa-51136b29f117","insertText":"      } catch (error) {","range":{"start":{"line":49,"character":0},"end":{"line":49,"character":12}},"file":{"$mid":1,"fsPath":"d:\\workspace\\stock-diagnose-front\\src\\stores\\listener.ts","_sep":1,"external":"file:///d%3A/workspace/stock-diagnose-front/src/stores/listener.ts","path":"/d:/workspace/stock-diagnose-front/src/stores/listener.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"a6531c0bf101c338","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"cyud4rnpj214tvpp1rak2344elmqck9y","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":630,\"PathMarker\":10},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":50,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c71f7b86f397f4eca8779afb41c4589bb5c3325987b95636fa05b34e601b05f5\",\"ba968344bb45c9a95888854ea4a1c942be7ecba6db70efef8c0ed9798d765c80\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/stock-diagnose-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"stock-diagnose-front","gitRepoPath":"/10jqka/quote/b2cweb/free/stock-diagnose-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"d5f384bb-da40-460f-889a-c4911a6d09361724740944246","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"8821568b-d950-40e8-8d5c-974f023e41d4","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-1b9daf11d9da4027bbb2e9a419338ea9","created":"1724746087","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1603,"promptSuffixCharLen":81,"promptEndPos":1620,"documentLength":1707,"delayMs":0,"promptComputeTimeMs":24,"contextualFilterScore":0.7597671641985169,"timeSinceIssuedMs":30,"current_time":1724746082,"numTokens":5,"compCharLen":11,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724746082642,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"h (error) {","position":{"line":49,"character":12},"offset":1621,"resultType":2}} 
  2024-08-27 16:08:05 [triggerCompletion] {"requestId":"04dd8365edec4885","request":{"prompt":"// Path: src/stores/listener.ts\nimport { defineStore } from 'pinia';\n\n// 用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n// 为什么不用watch？本质上不希望同一个监听通过多个watch监听，而是希望通过一个监听，触发多个函数，可以统一管理请求，设立优先级、减少watch监听数量\ninterface RequestDep {\n  id: string; // 请求id\n  func: () => void | Promise<void>; // 请求函数\n  level: number; // 请求优先级\n}\nexport const useListenerStore = defineStore('listener', () => {\n  // 这里用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n  const requestDep: RequestDep[] = [];\n\n  // 加入监听数组\n  function addRequestDep(id: string, func: () => void, level = 0) {\n    requestDep.push({ id, func, level });\n  }\n\n  // 移除监听数组\n  function removeRequestDep(id: string) {\n    const index = requestDep.findIndex((item) => item.id === id);\n    index > -1 && requestDep.splice(index, 1);\n  }\n\n  /**\n   * 触发监听数组\n   * @description 按照优先级依次触发监听数组中的函数,因为这个数组\n   * \n   * */\n  async function triggerRequestDep() {\n    // 按优先级从高到低排序\n    const sortedRequestDep = [...requestDep].sort((a, b) => b.level - a.level);\n\n    // 按优先级分组\n    const groupedByLevel = sortedRequestDep.reduce((acc, item) => {\n      if (!acc[item.level]) {\n        acc[item.level] = [];\n      }\n      acc[item.level].push(item);\n      return acc;\n    }, {} as Record<number, RequestDep[]>);\n\n    // 依次处理每个优先级的请求\n    for (const level of Object.keys(groupedByLevel).sort((a, b) => Number(b) - Number(a))) {\n      const items = groupedByLevel[Number(level)];\n      const promises = items.map(item => item.func());\n      try {\n        // 等待当前优先级的所有请求完成\n        await Promise.all(promises);\n      } catch (error) {{","suffix":"}\r\n  }\r\n\r\n  return { addRequestDep, removeRequestDep, triggerRequestDep };\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":643,"suffix_tokens":19}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"\r","finishReason":"stop"}}} 
  2024-08-27 16:08:07 [triggerCompletion] {"requestId":"b402d2b7f268ebbd","request":{"prompt":"// Path: src/stores/listener.ts\nimport { defineStore } from 'pinia';\n\n// 用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n// 为什么不用watch？本质上不希望同一个监听通过多个watch监听，而是希望通过一个监听，触发多个函数，可以统一管理请求，设立优先级、减少watch监听数量\ninterface RequestDep {\n  id: string; // 请求id\n  func: () => void | Promise<void>; // 请求函数\n  level: number; // 请求优先级\n}\nexport const useListenerStore = defineStore('listener', () => {\n  // 这里用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n  const requestDep: RequestDep[] = [];\n\n  // 加入监听数组\n  function addRequestDep(id: string, func: () => void, level = 0) {\n    requestDep.push({ id, func, level });\n  }\n\n  // 移除监听数组\n  function removeRequestDep(id: string) {\n    const index = requestDep.findIndex((item) => item.id === id);\n    index > -1 && requestDep.splice(index, 1);\n  }\n\n  /**\n   * 触发监听数组\n   * @description 按照优先级依次触发监听数组中的函数,因为这个数组\n   * \n   * */\n  async function triggerRequestDep() {\n    // 按优先级从高到低排序\n    const sortedRequestDep = [...requestDep].sort((a, b) => b.level - a.level);\n\n    // 按优先级分组\n    const groupedByLevel = sortedRequestDep.reduce((acc, item) => {\n      if (!acc[item.level]) {\n        acc[item.level] = [];\n      }\n      acc[item.level].push(item);\n      return acc;\n    }, {} as Record<number, RequestDep[]>);\n\n    // 依次处理每个优先级的请求\n    for (const level of Object.keys(groupedByLevel).sort((a, b) => Number(b) - Number(a))) {\n      const items = groupedByLevel[Number(level)];\n      const promises = items.map(item => item.func());\n      try {\n        // 等待当前优先级的所有请求完成\n        await Promise.all(promises);\n      } catch (error) { }","suffix":"}\r\n  }\r\n\r\n  return { addRequestDep, removeRequestDep, triggerRequestDep };\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":644,"suffix_tokens":19}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"","finishReason":"stop"}}} 
  2024-08-27 16:08:08 [triggerCompletion] {"requestId":"76b12b8452e9af57","request":{"prompt":"// Path: src/stores/listener.ts\nimport { defineStore } from 'pinia';\n\n// 用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n// 为什么不用watch？本质上不希望同一个监听通过多个watch监听，而是希望通过一个监听，触发多个函数，可以统一管理请求，设立优先级、减少watch监听数量\ninterface RequestDep {\n  id: string; // 请求id\n  func: () => void | Promise<void>; // 请求函数\n  level: number; // 请求优先级\n}\nexport const useListenerStore = defineStore('listener', () => {\n  // 这里用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n  const requestDep: RequestDep[] = [];\n\n  // 加入监听数组\n  function addRequestDep(id: string, func: () => void, level = 0) {\n    requestDep.push({ id, func, level });\n  }\n\n  // 移除监听数组\n  function removeRequestDep(id: string) {\n    const index = requestDep.findIndex((item) => item.id === id);\n    index > -1 && requestDep.splice(index, 1);\n  }\n\n  /**\n   * 触发监听数组\n   * @description 按照优先级依次触发监听数组中的函数,因为这个数组\n   * \n   * */\n  async function triggerRequestDep() {\n    // 按优先级从高到低排序\n    const sortedRequestDep = [...requestDep].sort((a, b) => b.level - a.level);\n\n    // 按优先级分组\n    const groupedByLevel = sortedRequestDep.reduce((acc, item) => {\n      if (!acc[item.level]) {\n        acc[item.level] = [];\n      }\n      acc[item.level].push(item);\n      return acc;\n    }, {} as Record<number, RequestDep[]>);\n\n    // 依次处理每个优先级的请求\n    for (const level of Object.keys(groupedByLevel).sort((a, b) => Number(b) - Number(a))) {\n      const items = groupedByLevel[Number(level)];\n      const promises = items.map(item => item.func());\n      try {\n        // 等待当前优先级的所有请求完成\n        await Promise.all(promises);\n      } catch","suffix":"}\r\n  }\r\n\r\n  return { addRequestDep, removeRequestDep, triggerRequestDep };\r\n});\r\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":639,"suffix_tokens":19}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" (er (er (errrror)oror )){\r\n      {\n      {\n        cons   cons   consooole.erle.erle.errororor('Err(`Err(`Errorrorror in trig in requ in requgerRequestest westDep with leDith levelepvel ${le:', er ${leverorvel})l}:`, er;\r\n :`, erro  ror r);\n );\n   }<file_s    ep  > /  s }\n  }\n rc   <file_s /stoep r> / }es/ls\nisterc  n/sto}\nerr\n .es/l ts\nimpisteor//nt { defer 监ineSt.听orts\nimp函数e } for\n  functrot { defion wam 'ineSttchRequpiorestnie } fDaroep';\nimpm '(orpiid: strt { niiuseListeang, fnerSt';\nimpuorornc:e } ft {  ()romuseListe => v nerSto'@orid, le/stoe } fverromles/l  iste'@=ne/sto 0rr)';\nimpes/l {\n oriste   t { neaddRequusresteSt';\nimpDockStoreport { (e } fusid, fromeStu ockStnc, le'@orve/stoe } flrrom);\n es/st    retoc'@urnk/sto ()';\nimpr =ores/st>t { oc {\n useUk  serSt';\nimp   remororoveReque } ft { estromusD eStep'@ockD(i/stoataStdror);\n es/ue } f   seromr ';\nimp'@or/stot { ruseSettes/stingStockDorate } farom';\nimp or'@t { /stousreStes/settockIinnfoStgor';\nimpe } forromt {  us'@eSt/stoockDrataStes/storockIe } fnfromo ';\nimp'@or/stot { ruses/steStockDockLatistStaor';\nimpe } forrom","finishReason":"length"}}} 
  2024-08-27 16:08:08 [showCompletion] {"requestId":"76b12b8452e9af57","model":"codeqwenModel","text":" (er (er (errrror)oror )){\r\n      {\n      {\n        cons   cons   consooole.erle.erle.errororor('Err(`Err(`Errorrorror in trig in requ in requgerRequestest westDep with leDith levelepvel ${le:', er ${leverorvel})l}:`, er;\r\n :`, erro  ror r);\n );\n   }<file_s    ep  > /  s }\n  }\n rc   <file_s /stoep r> / }es/ls\nisterc  n/sto}\nerr\n .es/l ts\nimpisteor//nt { defer 监ineSt.听orts\nimp函数e } for\n  functrot { defion wam 'ineSttchRequpiorestnie } fDaroep';\nimpm '(orpiid: strt { niiuseListeang, fnerSt';\nimpuorornc:e } ft {  ()romuseListe => v nerSto'@orid, le/stoe } fverromles/l  iste'@=ne/sto 0rr)';\nimpes/l {\n oriste   t { neaddRequusresteSt';\nimpDockStoreport { (e } fusid, fromeStu ockStnc, le'@orve/stoe } flrrom);\n es/st    retoc'@urnk/sto ()';\nimpr =ores/st>t { oc {\n useUk  serSt';\nimp   remororoveReque } ft { estromusD eStep'@ockD(i/stoataStdror);\n es/ue } f   seromr ';\nimp'@or/stot { ruseSettes/stingStockDorate } farom';\nimp or'@t { /stousreStes/settockIinnfoStgor';\nimpe } forromt {  us'@eSt/stoockDrataStes/storockIe } fnfromo ';\nimp'@or/stot { ruses/steStockDockLatistStaor';\nimpe } forrom","finishReason":"length"} 
  2024-08-27 16:08:09 [triggerCompletion] {"requestId":"cb6f871b832669e1","request":{"prompt":"// Path: src/stores/listener.ts\nimport { defineStore } from 'pinia';\n\n// 用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n// 为什么不用watch？本质上不希望同一个监听通过多个watch监听，而是希望通过一个监听，触发多个函数，可以统一管理请求，设立优先级、减少watch监听数量\ninterface RequestDep {\n  id: string; // 请求id\n  func: () => void | Promise<void>; // 请求函数\n  level: number; // 请求优先级\n}\nexport const useListenerStore = defineStore('listener', () => {\n  // 这里用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n  const requestDep: RequestDep[] = [];\n\n  // 加入监听数组\n  function addRequestDep(id: string, func: () => void, level = 0) {\n    requestDep.push({ id, func, level });\n  }\n\n  // 移除监听数组\n  function removeRequestDep(id: string) {\n    const index = requestDep.findIndex((item) => item.id === id);\n    index > -1 && requestDep.splice(index, 1);\n  }\n\n  /**\n   * 触发监听数组\n   * @description 按照优先级依次触发监听数组中的函数,因为这个数组\n   * \n   * */\n  async function triggerRequestDep() {\n    // 按优先级从高到低排序\n    const sortedRequestDep = [...requestDep].sort((a, b) => b.level - a.level);\n\n    // 按优先级分组\n    const groupedByLevel = sortedRequestDep.reduce((acc, item) => {\n      if (!acc[item.level]) {\n        acc[item.level] = [];\n      }\n      acc[item.level].push(item);\n      return acc;\n    }, {} as Record<number, RequestDep[]>);\n\n    // 依次处理每个优先级的请求\n    for (const level of Object.keys(groupedByLevel).sort((a, b) => Number(b) - Number(a))) {\n      const items = groupedByLevel[Number(level)];\n      const promises = items.map(item => item.func());\n      try {\n        // 等待当前优先级的所有请求完成\n        await Promise.all(promises);\n      } catch (error) {","suffix":"}\r\n  }\r\n\r\n  return { addRequestDep, removeRequestDep, triggerRequestDep };\r\n});\r\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":643,"suffix_tokens":19}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"\n     \n     \n        cons   cons   consooole.erle.erle.errororor('Err('Err('Errorrorror in trig in trig in triggerRequgerRequgerRequestestestDDDepepep:', er:', er:', errorororrr);\n );\n );\n              }\n  }\n  }\n     <file_s   <file_s epep }> /> /\nss  rcrc}\n/sto/sto\n rr es/les/l//isteiste 监nn听数erer组..变化ts\nimpts\nimp\n  functororion wat { deft { deftchRequineStineStestororDee } fe } fp(roro)m 'm ' {\n pipinini   waaa't';\nimp;\n\nexpch(requorort coestt { nst DuseListeusepnerSteSt, (orockStnewVae } forlrom e = defue, './lineStoldVaisteorlnee('stue)roc =';\nimpk',>or () {\n t {  =  us>  eSt { iockSt\n  cof (ornst stnewVae } fockClrom odue.len'./ste = gtocreh > kf('oldVa';\nimp000lor0ue.lent { 0guseU1thserSt.SZ)or') {\n     e } f;\n   trigrom \n  retgerRequ'./uurestsen { stDeprockC(';\nimpode);\n or   t { };\n us} eSt);\n }\n ockL  istSt }or, { de } ferom ep: t'./strue ockL}is);t\n';\nimp  or}\nt { \n us eSt// 监ockD听数ataSt组or变化e } f\n  warom tchRequ'./stestockDDepat()a;\n';\nimp\n or t { //us 监eSt听数ockD组ataL变化istSt\n  functorion wae } ftchRequrom est'./stDeockDp()ataL is{\r\n t   wa';\nimptorch(requt { estusDeStepockD, (ataLnewVaistStloreue,  as oldVausleStue)ockD =>ataL istSt{\r\n o  re  2 } f irom f ('./stnewVaockDlataLue.lenigtsth > 2oldVa';\nimplorue.lent { gusth)eSt ockD{\r\n     ataL   trigistStgerRequoreest as Dep(us)eSt;\r\n ockD  ataL  istSt o}\r\n re  3 } f }rom , { d'./steockDep: tataLrue }i)st;\r3\n ';\nimp or}t { \rus\n\reSt\n ockD ataL//istSt 监ore听数 as 组us变eSt化\rockD\n  functataLion waistSttchRequoestreDe4 } fp()rom  './st{\r\n ockD   waataLtich(requstest4D';\nimpepor, (t { newVausleStue, ockDoldVaataLlistSt","finishReason":"length"}}} 
  2024-08-27 16:08:09 [showCompletion] {"requestId":"cb6f871b832669e1","model":"codeqwenModel","text":"\n     \n     \n        cons   cons   consooole.erle.erle.errororor('Err('Err('Errorrorror in trig in trig in triggerRequgerRequgerRequestestestDDDepepep:', er:', er:', errorororrr);\n );\n );\n              }\n  }\n  }\n     <file_s   <file_s epep }> /> /\nss  rcrc}\n/sto/sto\n rr es/les/l//isteiste 监nn听数erer组..变化ts\nimpts\nimp\n  functororion wat { deft { deftchRequineStineStestororDee } fe } fp(roro)m 'm ' {\n pipinini   waaa't';\nimp;\n\nexpch(requorort coestt { nst DuseListeusepnerSteSt, (orockStnewVae } forlrom e = defue, './lineStoldVaisteorlnee('stue)roc =';\nimpk',>or () {\n t {  =  us>  eSt { iockSt\n  cof (ornst stnewVae } fockClrom odue.len'./ste = gtocreh > kf('oldVa';\nimp000lor0ue.lent { 0guseU1thserSt.SZ)or') {\n     e } f;\n   trigrom \n  retgerRequ'./uurestsen { stDeprockC(';\nimpode);\n or   t { };\n us} eSt);\n }\n ockL  istSt }or, { de } ferom ep: t'./strue ockL}is);t\n';\nimp  or}\nt { \n us eSt// 监ockD听数ataSt组or变化e } f\n  warom tchRequ'./stestockDDepat()a;\n';\nimp\n or t { //us 监eSt听数ockD组ataL变化istSt\n  functorion wae } ftchRequrom est'./stDeockDp()ataL is{\r\n t   wa';\nimptorch(requt { estusDeStepockD, (ataLnewVaistStloreue,  as oldVausleStue)ockD =>ataL istSt{\r\n o  re  2 } f irom f ('./stnewVaockDlataLue.lenigtsth > 2oldVa';\nimplorue.lent { gusth)eSt ockD{\r\n     ataL   trigistStgerRequoreest as Dep(us)eSt;\r\n ockD  ataL  istSt o}\r\n re  3 } f }rom , { d'./steockDep: tataLrue }i)st;\r3\n ';\nimp or}t { \rus\n\reSt\n ockD ataL//istSt 监ore听数 as 组us变eSt化\rockD\n  functataLion waistSttchRequoestreDe4 } fp()rom  './st{\r\n ockD   waataLtich(requstest4D';\nimpepor, (t { newVausleStue, ockDoldVaataLlistSt","finishReason":"length"} 
  2024-08-27 16:08:10 [triggerCompletion] {"requestId":"e6b0ff706fca8648","request":{"prompt":"// Path: src/stores/listener.ts\nimport { defineStore } from 'pinia';\n\n// 用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n// 为什么不用watch？本质上不希望同一个监听通过多个watch监听，而是希望通过一个监听，触发多个函数，可以统一管理请求，设立优先级、减少watch监听数量\ninterface RequestDep {\n  id: string; // 请求id\n  func: () => void | Promise<void>; // 请求函数\n  level: number; // 请求优先级\n}\nexport const useListenerStore = defineStore('listener', () => {\n  // 这里用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n  const requestDep: RequestDep[] = [];\n\n  // 加入监听数组\n  function addRequestDep(id: string, func: () => void, level = 0) {\n    requestDep.push({ id, func, level });\n  }\n\n  // 移除监听数组\n  function removeRequestDep(id: string) {\n    const index = requestDep.findIndex((item) => item.id === id);\n    index > -1 && requestDep.splice(index, 1);\n  }\n\n  /**\n   * 触发监听数组\n   * @description 按照优先级依次触发监听数组中的函数,因为这个数组\n   * \n   * */\n  async function triggerRequestDep() {\n    // 按优先级从高到低排序\n    const sortedRequestDep = [...requestDep].sort((a, b) => b.level - a.level);\n\n    // 按优先级分组\n    const groupedByLevel = sortedRequestDep.reduce((acc, item) => {\n      if (!acc[item.level]) {\n        acc[item.level] = [];\n      }\n      acc[item.level].push(item);\n      return acc;\n    }, {} as Record<number, RequestDep[]>);\n\n    // 依次处理每个优先级的请求\n    for (const level of Object.keys(groupedByLevel).sort((a, b) => Number(b) - Number(a))) {\n      const items = groupedByLevel[Number(level)];\n      const promises = items.map(item => item.func());\n      try {\n        // 等待当前优先级的所有请求完成\n        await Promise.all(promises);\n      } catch (error) {","suffix":"}\r\n  }\r\n\r\n  return { addRequestDep, removeRequestDep, triggerRequestDep };\r\n});\r\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":643,"suffix_tokens":19}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"\n     \n     \n        cons   cons   consooole.erle.erle.errororor(`Err('Err('Errorrorror in requ in trig in triggerRequgerRequestestestDep wDDith leepepvel:', er:', er ${leroroverrl});\n );\n :`, er    ro  r  );\n  }\n  }\n          } } }\n \n\n      }\n}\n }\n \n\n     ///}\n** 监\n \n  听数 组// *变化 监 触听\n  wa发监数组t听ch(requ\n  funct数组estion wa\n DtchRequ  ep,est* @descript ()Dei =p(on>) 触 {\n  {\n 发监   trig  听数gerRequ 组中est//的Dep 监函数(听,因);数组\n 为这\n    wa个 }t数组, { dch(requ\n eest ep: tD rue ep,* }) ()\n ;\n =  *\n >   {\n *///  \n  funct 监   trigion trig听数gerRequgerRequ组estest变化DepDepS\n  wa(ynt);\n c(ch(requ   )est} {\n D);  ep,\n  / () /  =}按>\r优 {\n \n\r先   trig\n 级gerRequ 从est//高到Dep 监低(听排序\n );数   co\n 组\rnst sor }\n  functtedRequ, { dion waestetchRequDeep: testp rue De= [})p()...requ;\n est\n {\r\n De   p].s// or 监//t听数 监(组听(a变化数,\n  wa组\r\n  b)t   wa =ch(requt>estch(requ b.leDestveep,Dl  ()ep,- = () a.le> =>ve {\n  l)   trig{\r\n ;\n\n gerRequ    est   trig /DepgerRequ/ (est按);Dep(优先\n )级 };\r\n 分组\n , { d    coe  }nst grouep: t)perue ;\rdByLe})\n ve;\n l = sor\n }tedRequ \rest//\n\rD 监\n ep.r听数 ed组//uc变化 监e((\n  wa听at数cc, ich(requ组\rtest\n  functem)Dion wa =ep,tchRequ> ()est {\n  =De  >p()   {\n   if   trig{\r\n ","finishReason":"length"}}} 
  2024-08-27 16:08:10 [showCompletion] {"requestId":"e6b0ff706fca8648","model":"codeqwenModel","text":"\n     \n     \n        cons   cons   consooole.erle.erle.errororor(`Err('Err('Errorrorror in requ in trig in triggerRequgerRequestestestDep wDDith leepepvel:', er:', er ${leroroverrl});\n );\n :`, er    ro  r  );\n  }\n  }\n          } } }\n \n\n      }\n}\n }\n \n\n     ///}\n** 监\n \n  听数 组// *变化 监 触听\n  wa发监数组t听ch(requ\n  funct数组estion wa\n DtchRequ  ep,est* @descript ()Dei =p(on>) 触 {\n  {\n 发监   trig  听数gerRequ 组中est//的Dep 监函数(听,因);数组\n 为这\n    wa个 }t数组, { dch(requ\n eest ep: tD rue ep,* }) ()\n ;\n =  *\n >   {\n *///  \n  funct 监   trigion trig听数gerRequgerRequ组estest变化DepDepS\n  wa(ynt);\n c(ch(requ   )est} {\n D);  ep,\n  / () /  =}按>\r优 {\n \n\r先   trig\n 级gerRequ 从est//高到Dep 监低(听排序\n );数   co\n 组\rnst sor }\n  functtedRequ, { dion waestetchRequDeep: testp rue De= [})p()...requ;\n est\n {\r\n De   p].s// or 监//t听数 监(组听(a变化数,\n  wa组\r\n  b)t   wa =ch(requt>estch(requ b.leDestveep,Dl  ()ep,- = () a.le> =>ve {\n  l)   trig{\r\n ;\n\n gerRequ    est   trig /DepgerRequ/ (est按);Dep(优先\n )级 };\r\n 分组\n , { d    coe  }nst grouep: t)perue ;\rdByLe})\n ve;\n l = sor\n }tedRequ \rest//\n\rD 监\n ep.r听数 ed组//uc变化 监e((\n  wa听at数cc, ich(requ组\rtest\n  functem)Dion wa =ep,tchRequ> ()est {\n  =De  >p()   {\n   if   trig{\r\n ","finishReason":"length"} 
  2024-08-27 16:08:13 [triggerCompletion] {"requestId":"3820fead6573d1e7","request":{"prompt":"// Path: src/stores/listener.ts\nimport { defineStore } from 'pinia';\n\n// 用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n// 为什么不用watch？本质上不希望同一个监听通过多个watch监听，而是希望通过一个监听，触发多个函数，可以统一管理请求，设立优先级、减少watch监听数量\ninterface RequestDep {\n  id: string; // 请求id\n  func: () => void | Promise<void>; // 请求函数\n  level: number; // 请求优先级\n}\nexport const useListenerStore = defineStore('listener', () => {\n  // 这里用于维护请求，作为一个‌观察者模式的实现，所有模块需要设置监听的请求都可以在这里设置，在后续监听到股票代码变化时，立即触发该数组中所有的函数，触发数据变化\n  const requestDep: RequestDep[] = [];\n\n  // 加入监听数组\n  function addRequestDep(id: string, func: () => void, level = 0) {\n    requestDep.push({ id, func, level });\n  }\n\n  // 移除监听数组\n  function removeRequestDep(id: string) {\n    const index = requestDep.findIndex((item) => item.id === id);\n    index > -1 && requestDep.splice(index, 1);\n  }\n\n  /**\n   * 触发监听数组\n   * @description 按照优先级依次触发监听数组中的函数,因为这个数组\n   * \n   * */\n  async function triggerRequestDep() {\n    // 按优先级从高到低排序\n    const sortedRequestDep = [...requestDep].sort((a, b) => b.level - a.level);\n\n    // 按优先级分组\n    const groupedByLevel = sortedRequestDep.reduce((acc, item) => {\n      if (!acc[item.level]) {\n        acc[item.level] = [];\n      }\n      acc[item.level].push(item);\n      return acc;\n    }, {} as Record<number, RequestDep[]>);\n\n    // 依次处理每个优先级的请求\n    for (const level of Object.keys(groupedByLevel).sort((a, b) => Number(b) - Number(a))) {\n      const items = groupedByLevel[Number(level)];\n      const promises = items.map(item => item.func());\n      try {\n        // 等待当前优先级的所有请求完成\n        await Promise.all(promises);\n      } catch (error) {\n","suffix":"}\r\n  }\r\n\r\n  return { addRequestDep, removeRequestDep, triggerRequestDep };\r\n});\r\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":6,"trim_by_indentation":true,"prompt_tokens":644,"suffix_tokens":19}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"                   cons    cons   oo le.erle.er/roro/r('Err('Er 捕rorror获 in trig in trig错误gerRequgerRequ并继estest续处理DD下一epep个优:', er:', er先级rorror的))请求\n     ;\r\n ;\r\n    cons    o    le.er  r}\r\n }\r\n or(er ro   <file_s rep }\n );\n > /    s  rc /sto/ }\n r/ es/l 移 iste除已n }经er\n触发.  的ts\nimp}\n请求\n or\n    requt { def estineStD//orep.len e } fgt测试roh\n  functm ' ion tpi=esni t(a0;)';\nimp\n {\n or     cot { }\nnstuseListe\n  inerSt d or//= 'te } f 监esrom听t ';\n 函'@   co数，/stonst f当run监听es/lc =到股iste ()票代ne =码r>变';\nimp {\n 化时or  ，立t {    cons即uso触发eStle.该ockStlo函数org('t，触e } fest发数rom'据 );\n 变化'@  \n  funct/sto ion war};\n tces/st   hStocaddRequockCkesto';\nimpDde(storepockCt { (ousid, fde: streStunicockTng);\n ypeSt)   trigor {\n gerReque } f  estrom Dep /('@/);\n /sto 遍   remr历监oveReques/st听estockT数组Dyp，触epe发所(i';\nimp有dor函数\n );\n t {       trigusfogerRequeStr (coestockTnst iDepypeLtem(istSt of requ);orest\ne } fD  romep}\n )\n '@ {\n  /sto  //r   i es/stt测试ockTem.f\n  functypeLuncion tis(et);\n st';\nimp   <file_s2(orep)t { > / {\n uss   coeStrcnstockT/sto iypeLrd istIes/l= 'ttemStisteeornste } fer2rom.';\n  ts\nimp   co'@ornst f/stot { defunrineStc =es/stor ()ockTe } f =ypeLro>istIm ' {\n tepi  mni   cons';\nimpaoor","finishReason":"length"}}} 
  2024-08-27 16:08:13 [showCompletion] {"requestId":"3820fead6573d1e7","model":"codeqwenModel","text":"                   cons    cons   oo le.erle.er/roro/r('Err('Er 捕rorror获 in trig in trig错误gerRequgerRequ并继estest续处理DD下一epep个优:', er:', er先级rorror的))请求\n     ;\r\n ;\r\n    cons    o    le.er  r}\r\n }\r\n or(er ro   <file_s rep }\n );\n > /    s  rc /sto/ }\n r/ es/l 移 iste除已n }经er\n触发.  的ts\nimp}\n请求\n or\n    requt { def estineStD//orep.len e } fgt测试roh\n  functm ' ion tpi=esni t(a0;)';\nimp\n {\n or     cot { }\nnstuseListe\n  inerSt d or//= 'te } f 监esrom听t ';\n 函'@   co数，/stonst f当run监听es/lc =到股iste ()票代ne =码r>变';\nimp {\n 化时or  ，立t {    cons即uso触发eStle.该ockStlo函数org('t，触e } fest发数rom'据 );\n 变化'@  \n  funct/sto ion war};\n tces/st   hStocaddRequockCkesto';\nimpDde(storepockCt { (ousid, fde: streStunicockTng);\n ypeSt)   trigor {\n gerReque } f  estrom Dep /('@/);\n /sto 遍   remr历监oveReques/st听estockT数组Dyp，触epe发所(i';\nimp有dor函数\n );\n t {       trigusfogerRequeStr (coestockTnst iDepypeLtem(istSt of requ);orest\ne } fD  romep}\n )\n '@ {\n  /sto  //r   i es/stt测试ockTem.f\n  functypeLuncion tis(et);\n st';\nimp   <file_s2(orep)t { > / {\n uss   coeStrcnstockT/sto iypeLrd istIes/l= 'ttemStisteeornste } fer2rom.';\n  ts\nimp   co'@ornst f/stot { defunrineStc =es/stor ()ockTe } f =ypeLro>istIm ' {\n tepi  mni   cons';\nimpaoor","finishReason":"length"} 
  2024-08-28 10:44:47 [triggerCompletion] {"requestId":"395b311174a74fb0","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nconsole.log('loca","suffix":"initTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":153,"suffix_tokens":315}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" lstorage', localstorage.get());","finishReason":"stop"}}} 
  2024-08-28 10:44:47 [showCompletion] {"requestId":"395b311174a74fb0","model":"codeqwenModel","text":" lstorage', localstorage.get());","finishReason":"stop"} 
  2024-08-28 10:44:47 [triggerCompletion] {"requestId":"f9ee6c0da6f4eef1","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nconsole.log('local","suffix":"initTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":152,"suffix_tokens":315}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" storage', localstorage.get());","finishReason":"stop"}}} 
  2024-08-28 10:44:47 [showCompletion] {"requestId":"f9ee6c0da6f4eef1","model":"codeqwenModel","text":" storage', localstorage.get());","finishReason":"stop"} 
  2024-08-28 10:44:47 [triggerCompletion] {"requestId":"61c8cdcbc3667af9","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nconsole.log(","suffix":"initTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":151,"suffix_tokens":315}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 'process.env.VUE_APP_ENV', process.env.VUE_APP_ENV);","finishReason":"stop"}}} 
  2024-08-28 10:44:47 [showCompletion] {"requestId":"61c8cdcbc3667af9","model":"codeqwenModel","text":" 'process.env.VUE_APP_ENV', process.env.VUE_APP_ENV);","finishReason":"stop"} 
  2024-08-28 10:44:47 [triggerCompletion] {"requestId":"2dd7567469bdaf5b","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nconsole.log('","suffix":"initTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":151,"suffix_tokens":315}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 🚀 ~ file: main.ts:12 ~ process.env.VITE_APP_ENV:', process.env.VITE_APP_ENV);\r","finishReason":"stop"}}} 
  2024-08-28 10:44:47 [showCompletion] {"requestId":"2dd7567469bdaf5b","model":"codeqwenModel","text":" 🚀 ~ file: main.ts:12 ~ process.env.VITE_APP_ENV:', process.env.VITE_APP_ENV);\r","finishReason":"stop"} 
  2024-08-28 10:44:48 [triggerCompletion] {"requestId":"67163b3086dde406","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nconsole.log('local')\n","suffix":"initTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":153,"suffix_tokens":315}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"  \n// \n// ","finishReason":"stop"}}} 
  2024-08-28 10:44:48 [showCompletion] {"requestId":"67163b3086dde406","model":"codeqwenModel","text":"  \n// \n// ","finishReason":"stop"} 
  2024-08-28 10:44:48 [vscodeShowCompletion] [{"insertText":"//","range":[{"line":15,"character":0},{"line":15,"character":0}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"44144531-aa77-4db0-818b-9b5d996ee409","insertText":"//","range":{"start":{"line":15,"character":0},"end":{"line":15,"character":0}},"file":{"$mid":1,"fsPath":"d:\\workspace\\stock-diagnose-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/stock-diagnose-front/src/main.ts","path":"/d:/workspace/stock-diagnose-front/src/main.ts","scheme":"file"},"index":2,"telemetry":{"properties":{"headerRequestId":"67163b3086dde406","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"81v2ipd3neg5yua0mtsrro3em3re9omj","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"true","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":146,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":16,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c71f7b86f397f4eca8779afb41c4589bb5c3325987b95636fa05b34e601b05f5\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/stock-diagnose-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"stock-diagnose-front","gitRepoPath":"/10jqka/quote/b2cweb/free/stock-diagnose-front","engineName":"copilot-codex","isMultiline":"true","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"f90f389c-08c0-4a9c-9cae-987b3bb0b8ec1724813000405","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"5cf1aeb6-c8d4-4fc0-afe2-e13eadbe4d38","endpoint":"completions","uiKind":"ghostText","temperature":"0.2","n":"3","stop":"unset","logit_bias":"null","choiceIndex":"2","completionId":"cmpl-9f0225da52c04b8194c53886bf31ee8b","created":"1724813098","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":584,"promptSuffixCharLen":1150,"promptEndPos":578,"documentLength":1730,"delayMs":0,"promptComputeTimeMs":103,"contextualFilterScore":0.5022550390050806,"timeSinceIssuedMs":105,"current_time":1724813088,"numTokens":1,"compCharLen":2,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724813087930,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"//","position":{"line":15,"character":0},"offset":578,"resultType":0}]}}] 
  2024-08-28 11:24:11 [triggerCompletion] {"requestId":"2f1f985cf5bd64a1","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, themeBlock } = options;\n","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":176,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"         //// 获 获取当前取当前使用的使用的客皮户端\r肤\r\n  co\n nst cli ienf (tht = awemeBlait ogetClick)ent( ){\r\n ;   th\rem\n\re = th\n emeBloc //k 如;\r果\n 传入了th emeBl}o\rc\n\rk，\n  则使用传入的themeBlock\r\n  if (themeBlock) {\r\n    theme = themeBlock;\r\n  }\r\n\r\n  // 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r","finishReason":"length"}}} 
  2024-08-28 11:24:11 [showCompletion] {"requestId":"2f1f985cf5bd64a1","model":"codeqwenModel","text":"         //// 获 获取当前取当前使用的使用的客皮户端\r肤\r\n  co\n nst cli ienf (tht = awemeBlait ogetClick)ent( ){\r\n ;   th\rem\n\re = th\n emeBloc //k 如;\r果\n 传入了th emeBl}o\rc\n\rk，\n  则使用传入的themeBlock\r\n  if (themeBlock) {\r\n    theme = themeBlock;\r\n  }\r\n\r\n  // 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r","finishReason":"length"} 
  2024-08-28 11:24:31 [triggerCompletion] {"requestId":"e762f840c8dff804","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  cons","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":178,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" t { insertThemeBlock } = options;\r","finishReason":"stop"}}} 
  2024-08-28 11:24:31 [showCompletion] {"requestId":"e762f840c8dff804","model":"codeqwenModel","text":" t { insertThemeBlock } = options;\r","finishReason":"stop"} 
  2024-08-28 11:24:31 [showCompletion] {"requestId":"e1defc1e2292bb3c","model":"codeqwenModel","text":" insertThemeBlock = options.insertThemeBlock;\r","finishReason":"stop"} 
  2024-08-28 11:24:31 [triggerCompletion] {"requestId":"e1defc1e2292bb3c","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const ","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":179,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" insertThemeBlock = options.insertThemeBlock;\r","finishReason":"stop"}}} 
  2024-08-28 11:24:31 [triggerCompletion] {"requestId":"3dc0d7b2ef1e409b","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":177,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"        i i//f (insf (insertert 插入ThThcemeBlemeBlsoos\rck)ck)\n    i{\r\n {\r\n f (ins   co   coertnst thnst stThemeBlyleemeBlocTaok = documg = documck)ee nt.createElemnt.createElem{\r\n enen   cot('stt('stnst style'yle'yle))Ta;\r\n ;\r\n g = docum   st   theyleemeBlnt.createElemToenag.tck.tt('stextContextContyle'enen)t = ft ;\r\n orm=   sta ylete(th`\r\n T  ag.teme extCont)  :ren;\r\n oott = ins   docum erte{\r\n     Thnt.h  emeBle --ocad.apptkendChhs;\r\n i-   documld(stpc-theylent.heTageme:)ad.app ${th;\rendChe\n ime ld(st}}yle;\r\n \rTag  \n\r)  \n  ;\r \n }\r\n   }  \r`\n\r;\r\n \n     document.head.appendChild(themeBlock);\r\n  }\r\n\r\n  ","finishReason":"stop"}}} 
  2024-08-28 11:24:31 [showCompletion] {"requestId":"3dc0d7b2ef1e409b","model":"codeqwenModel","text":"        i i//f (insf (insertert 插入ThThcemeBlemeBlsoos\rck)ck)\n    i{\r\n {\r\n f (ins   co   coertnst thnst stThemeBlyleemeBlocTaok = documg = documck)ee nt.createElemnt.createElem{\r\n enen   cot('stt('stnst style'yle'yle))Ta;\r\n ;\r\n g = docum   st   theyleemeBlnt.createElemToenag.tck.tt('stextContextContyle'enen)t = ft ;\r\n orm=   sta ylete(th`\r\n T  ag.teme extCont)  :ren;\r\n oott = ins   docum erte{\r\n     Thnt.h  emeBle --ocad.apptkendChhs;\r\n i-   documld(stpc-theylent.heTageme:)ad.app ${th;\rendChe\n ime ld(st}}yle;\r\n \rTag  \n\r)  \n  ;\r \n }\r\n   }  \r`\n\r;\r\n \n     document.head.appendChild(themeBlock);\r\n  }\r\n\r\n  ","finishReason":"stop"} 
  2024-08-28 11:24:32 [triggerCompletion] {"requestId":"30e9815ac932c18b","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const them","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":179,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" eGroup = {\r","finishReason":"stop"}}} 
  2024-08-28 11:24:32 [vscodeShowCompletion] [{"insertText":"  const them eGroup = {","range":[{"line":21,"character":0},{"line":21,"character":12}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"f676c319-5859-4040-b4bd-a586fced809a","insertText":"  const them eGroup = {","range":{"start":{"line":21,"character":0},"end":{"line":21,"character":12}},"file":{"$mid":1,"fsPath":"d:\\workspace\\token-lib\\packages\\pc\\src\\index.js","_sep":1,"external":"file:///d%3A/workspace/token-lib/packages/pc/src/index.js","path":"/d:/workspace/token-lib/packages/pc/src/index.js","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"30e9815ac932c18b","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"3b5ndytyogmpqs2szebl403xefn37s6c","sku":"monthly_subscriber","languageId":"javascript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":172,\"PathMarker\":8},\"unused\":{\"LanguageMarker\":5},\"usedCounts\":{\"BeforeCursor\":22,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"","gitRepoHost":"","gitRepoOwner":"","gitRepoName":"","gitRepoPath":"","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"c88312fa-6c5f-4117-9c65-bdfc6e65b2cc1724815294205","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"javascript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"baa929ca-f77b-43c4-b346-5ef5ad4e843a","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-c89e4fc394d443ac923c3420d77227d4","created":"1724815476","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":461,"promptSuffixCharLen":3062,"promptEndPos":457,"documentLength":3523,"delayMs":0,"promptComputeTimeMs":2,"contextualFilterScore":0.7040096374738983,"timeSinceIssuedMs":8,"current_time":1724815472,"numTokens":4,"compCharLen":11,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724815472060,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"javascript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" eGroup = {","position":{"line":21,"character":12},"offset":457,"resultType":0}]}}] 
  2024-08-28 11:24:32 [showCompletion] {"requestId":"30e9815ac932c18b","model":"codeqwenModel","text":" eGroup = {\r","finishReason":"stop"} 
  2024-08-28 11:24:33 [triggerCompletion] {"requestId":"9a95748a1e3d2884","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const themB","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":180,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" lock = insertThemeBlock ? insertThemeBlock : '';\r","finishReason":"stop"}}} 
  2024-08-28 11:24:33 [showCompletion] {"requestId":"9a95748a1e3d2884","model":"codeqwenModel","text":" lock = insertThemeBlock ? insertThemeBlock : '';\r","finishReason":"stop"} 
  2024-08-28 11:24:33 [vscodeShowCompletion] [{"insertText":"  const themB lock = insertThemeBlock ? insertThemeBlock : '';","range":[{"line":21,"character":0},{"line":21,"character":13}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"e737dd3e-014d-420f-ab0c-9f6c6531af81","insertText":"  const themB lock = insertThemeBlock ? insertThemeBlock : '';","range":{"start":{"line":21,"character":0},"end":{"line":21,"character":13}},"file":{"$mid":1,"fsPath":"d:\\workspace\\token-lib\\packages\\pc\\src\\index.js","_sep":1,"external":"file:///d%3A/workspace/token-lib/packages/pc/src/index.js","path":"/d:/workspace/token-lib/packages/pc/src/index.js","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"9a95748a1e3d2884","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"3b5ndytyogmpqs2szebl403xefn37s6c","sku":"monthly_subscriber","languageId":"javascript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":173,\"PathMarker\":8},\"unused\":{\"LanguageMarker\":5},\"usedCounts\":{\"BeforeCursor\":22,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"","gitRepoHost":"","gitRepoOwner":"","gitRepoName":"","gitRepoPath":"","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"c88312fa-6c5f-4117-9c65-bdfc6e65b2cc1724815294205","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"javascript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"454e5483-4061-4d33-b051-ea6701a57aec","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-3bdbd2de6aa243d59d4f336b40350472","created":"1724815477","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":462,"promptSuffixCharLen":3062,"promptEndPos":458,"documentLength":3524,"delayMs":0,"promptComputeTimeMs":11,"contextualFilterScore":0.7040096374738983,"timeSinceIssuedMs":47,"current_time":1724815472,"numTokens":14,"compCharLen":49,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724815472688,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"javascript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" lock = insertThemeBlock ? insertThemeBlock : '';","position":{"line":21,"character":13},"offset":458,"resultType":0}]}}] 
  2024-08-28 11:24:33 [vscodeShowCompletion] [{"insertText":"  const them eGroup = {","range":[{"line":21,"character":0},{"line":21,"character":12}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"c2b0cc43-39bf-4586-a309-2c28e3063d08","insertText":"  const them eGroup = {","range":{"start":{"line":21,"character":0},"end":{"line":21,"character":12}},"file":{"$mid":1,"fsPath":"d:\\workspace\\token-lib\\packages\\pc\\src\\index.js","_sep":1,"external":"file:///d%3A/workspace/token-lib/packages/pc/src/index.js","path":"/d:/workspace/token-lib/packages/pc/src/index.js","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"30e9815ac932c18b","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"3b5ndytyogmpqs2szebl403xefn37s6c","sku":"monthly_subscriber","languageId":"javascript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":172,\"PathMarker\":8},\"unused\":{\"LanguageMarker\":5},\"usedCounts\":{\"BeforeCursor\":22,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"","gitRepoHost":"","gitRepoOwner":"","gitRepoName":"","gitRepoPath":"","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"c88312fa-6c5f-4117-9c65-bdfc6e65b2cc1724815294205","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"javascript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"baa929ca-f77b-43c4-b346-5ef5ad4e843a","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-c89e4fc394d443ac923c3420d77227d4","created":"1724815476","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":461,"promptSuffixCharLen":3062,"promptEndPos":457,"documentLength":3523,"delayMs":0,"promptComputeTimeMs":2,"contextualFilterScore":0.7040096374738983,"timeSinceIssuedMs":8,"current_time":1724815472,"numTokens":4,"compCharLen":11,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724815472060,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"javascript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" eGroup = {","position":{"line":21,"character":12},"offset":457,"resultType":1}]}}] 
  2024-08-28 11:24:33 [triggerCompletion] {"requestId":"a3a3d58c7494b540","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const theme","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":179,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" Group = {\r","finishReason":"stop"}}} 
  2024-08-28 11:24:33 [showCompletion] {"requestId":"a3a3d58c7494b540","model":"codeqwenModel","text":" Group = {\r","finishReason":"stop"} 
  2024-08-28 11:24:34 [triggerCompletion] {"requestId":"d52355fd7c0f3a45","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const themeB","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":180,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" lock = insertThemeBlock ? insertThemeBlock : 'head';\r","finishReason":"stop"}}} 
  2024-08-28 11:24:34 [showCompletion] {"requestId":"d52355fd7c0f3a45","model":"codeqwenModel","text":" lock = insertThemeBlock ? insertThemeBlock : 'head';\r","finishReason":"stop"} 
  2024-08-28 11:24:34 [triggerCompletion] {"requestId":"b428aa560c60021a","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const themeBl","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":180,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ock = insertThemeBlock ? insertThemeBlock : 'head';\r","finishReason":"stop"}}} 
  2024-08-28 11:24:34 [showCompletion] {"requestId":"b428aa560c60021a","model":"codeqwenModel","text":" ock = insertThemeBlock ? insertThemeBlock : 'head';\r","finishReason":"stop"} 
  2024-08-28 11:24:34 [triggerCompletion] {"requestId":"bd572ef019feff44","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const themeBlo","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":180,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"ck = insertThemeBlock ? insertThemeBlock : 'head';\r","finishReason":"stop"}}} 
  2024-08-28 11:24:34 [showCompletion] {"requestId":"bd572ef019feff44","model":"codeqwenModel","text":"ck = insertThemeBlock ? insertThemeBlock : 'head';\r","finishReason":"stop"} 
  2024-08-28 11:24:35 [triggerCompletion] {"requestId":"7593703f4cfa279a","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const themeBlock","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":180,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"  = insertThemeBlock ? insertThemeBlock : '';\r","finishReason":"stop"}}} 
  2024-08-28 11:24:35 [showCompletion] {"requestId":"7593703f4cfa279a","model":"codeqwenModel","text":"  = insertThemeBlock ? insertThemeBlock : '';\r","finishReason":"stop"} 
  2024-08-28 11:24:35 [triggerCompletion] {"requestId":"e259cac6b119c5bd","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const themeBlock ","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":181,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" = insertThemeBlock ? insertThemeBlock : '';\r","finishReason":"stop"}}} 
  2024-08-28 11:24:35 [showCompletion] {"requestId":"e259cac6b119c5bd","model":"codeqwenModel","text":" = insertThemeBlock ? insertThemeBlock : '';\r","finishReason":"stop"} 
  2024-08-28 11:24:35 [triggerCompletion] {"requestId":"833928283ff6daba","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const themeBlock = ","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":182,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" options.themeBlock;\r","finishReason":"stop"}}} 
  2024-08-28 11:24:35 [showCompletion] {"requestId":"833928283ff6daba","model":"codeqwenModel","text":" options.themeBlock;\r","finishReason":"stop"} 
  2024-08-28 11:24:35 [vscodeShowCompletion] [{"insertText":"  const themeBlock = options.themeBlock;","range":[{"line":21,"character":0},{"line":21,"character":21}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"8e4edf1a-6c8f-4ee1-b720-252db2609758","insertText":"  const themeBlock = options.themeBlock;","range":{"start":{"line":21,"character":0},"end":{"line":21,"character":21}},"file":{"$mid":1,"fsPath":"d:\\workspace\\token-lib\\packages\\pc\\src\\index.js","_sep":1,"external":"file:///d%3A/workspace/token-lib/packages/pc/src/index.js","path":"/d:/workspace/token-lib/packages/pc/src/index.js","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"833928283ff6daba","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"3b5ndytyogmpqs2szebl403xefn37s6c","sku":"monthly_subscriber","languageId":"javascript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":175,\"PathMarker\":8},\"unused\":{\"LanguageMarker\":5},\"usedCounts\":{\"BeforeCursor\":22,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"","gitRepoHost":"","gitRepoOwner":"","gitRepoName":"","gitRepoPath":"","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"c88312fa-6c5f-4117-9c65-bdfc6e65b2cc1724815294205","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"javascript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"fcc4d49e-ff19-436c-8f6a-cb1e811e343e","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-2a0d264c172d46acaa877166117cd308","created":"1724815479","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":470,"promptSuffixCharLen":3062,"promptEndPos":466,"documentLength":3532,"delayMs":0,"promptComputeTimeMs":3,"contextualFilterScore":0.7786082415109736,"timeSinceIssuedMs":8,"current_time":1724815475,"numTokens":5,"compCharLen":20,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724815475403,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"javascript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"options.themeBlock;","position":{"line":21,"character":21},"offset":466,"resultType":0}]}}] 
  2024-08-28 11:24:38 [triggerCompletion] {"requestId":"22c5860431876af4","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const themeBlock = i","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":182,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" nsertThemeBlock ? insertThemeBlock : '';\r","finishReason":"stop"}}} 
  2024-08-28 11:24:38 [showCompletion] {"requestId":"22c5860431876af4","model":"codeqwenModel","text":" nsertThemeBlock ? insertThemeBlock : '';\r","finishReason":"stop"} 
  2024-08-28 11:24:38 [vscodeShowCompletion] [{"insertText":"  const themeBlock = i nsertThemeBlock ? insertThemeBlock : '';","range":[{"line":21,"character":0},{"line":21,"character":22}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"4f441146-ce90-4a1a-94b3-3e379d720556","insertText":"  const themeBlock = i nsertThemeBlock ? insertThemeBlock : '';","range":{"start":{"line":21,"character":0},"end":{"line":21,"character":22}},"file":{"$mid":1,"fsPath":"d:\\workspace\\token-lib\\packages\\pc\\src\\index.js","_sep":1,"external":"file:///d%3A/workspace/token-lib/packages/pc/src/index.js","path":"/d:/workspace/token-lib/packages/pc/src/index.js","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"22c5860431876af4","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"3b5ndytyogmpqs2szebl403xefn37s6c","sku":"monthly_subscriber","languageId":"javascript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":175,\"PathMarker\":8},\"unused\":{\"LanguageMarker\":5},\"usedCounts\":{\"BeforeCursor\":22,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"","gitRepoHost":"","gitRepoOwner":"","gitRepoName":"","gitRepoPath":"","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"c88312fa-6c5f-4117-9c65-bdfc6e65b2cc1724815294205","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"javascript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"0a867e4c-c226-4606-8072-ee00ba05387f","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-0d8a730a688346ab9c7811aac106f079","created":"1724815481","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":471,"promptSuffixCharLen":3062,"promptEndPos":467,"documentLength":3533,"delayMs":0,"promptComputeTimeMs":2,"contextualFilterScore":0.6920873416224128,"timeSinceIssuedMs":10,"current_time":1724815477,"numTokens":13,"compCharLen":41,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724815477523,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"javascript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" nsertThemeBlock ? insertThemeBlock : '';","position":{"line":21,"character":22},"offset":467,"resultType":0}]}}] 
  2024-08-28 11:24:38 [triggerCompletion] {"requestId":"dee75a1aa4ac6945","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const themeBlock = in","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":182,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" sertThemeBlock ? insertThemeBlock : '';\r","finishReason":"stop"}}} 
  2024-08-28 11:24:38 [showCompletion] {"requestId":"dee75a1aa4ac6945","model":"codeqwenModel","text":" sertThemeBlock ? insertThemeBlock : '';\r","finishReason":"stop"} 
  2024-08-28 11:24:39 [triggerCompletion] {"requestId":"272666e8575ae9a5","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const themeBlock = ins","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":182,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"ertThemeBlock ? insertThemeBlock : '';\r","finishReason":"stop"}}} 
  2024-08-28 11:24:39 [showCompletion] {"requestId":"272666e8575ae9a5","model":"codeqwenModel","text":"ertThemeBlock ? insertThemeBlock : '';\r","finishReason":"stop"} 
  2024-08-28 11:24:39 [triggerCompletion] {"requestId":"18344bbe77372997","request":{"prompt":"// Path: pc/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const themeBlock = inse","suffix":"// 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeGroup[usingTheme] ? themeGroup[usingTheme] : themeGroup['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":182,"suffix_tokens":964}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"rtThemeBlock ? insertThemeBlock : '';\r","finishReason":"stop"}}} 
  2024-08-28 11:24:39 [showCompletion] {"requestId":"18344bbe77372997","model":"codeqwenModel","text":"rtThemeBlock ? insertThemeBlock : '';\r","finishReason":"stop"} 
  2024-08-28 11:24:39 [vscodeShowCompletion] [{"insertText":"  const themeBlock = insertThemeBlock ? insertThemeBlock : '';","range":[{"line":21,"character":0},{"line":21,"character":25}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"d96c24c9-5c8f-48cc-8abe-8d07e9d4d37b","insertText":"  const themeBlock = insertThemeBlock ? insertThemeBlock : '';","range":{"start":{"line":21,"character":0},"end":{"line":21,"character":25}},"file":{"$mid":1,"fsPath":"d:\\workspace\\token-lib\\packages\\pc\\src\\index.js","_sep":1,"external":"file:///d%3A/workspace/token-lib/packages/pc/src/index.js","path":"/d:/workspace/token-lib/packages/pc/src/index.js","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"18344bbe77372997","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"3b5ndytyogmpqs2szebl403xefn37s6c","sku":"monthly_subscriber","languageId":"javascript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":175,\"PathMarker\":8},\"unused\":{\"LanguageMarker\":5},\"usedCounts\":{\"BeforeCursor\":22,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"","gitRepoHost":"","gitRepoOwner":"","gitRepoName":"","gitRepoPath":"","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"c88312fa-6c5f-4117-9c65-bdfc6e65b2cc1724815294205","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"javascript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"3e7d698a-60bb-45f9-b58c-aa868553101a","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-da38539773b54f3fb49510955dabb77e","created":"1724815483","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":474,"promptSuffixCharLen":3062,"promptEndPos":470,"documentLength":3536,"delayMs":0,"promptComputeTimeMs":5,"contextualFilterScore":0.7582596157709651,"timeSinceIssuedMs":10,"current_time":1724815478,"numTokens":12,"compCharLen":37,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724815478789,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"javascript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"rtThemeBlock ? insertThemeBlock : '';","position":{"line":21,"character":25},"offset":470,"resultType":0}]}}] 
  2024-08-28 11:24:39 [vscodeShowCompletion] [{"insertText":"  const themeBlock = insertThemeBlock ? insertThemeBlock : '';","range":[{"line":21,"character":0},{"line":21,"character":37}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"143fba51-91a1-4638-8f24-80bdd8da0c7f","insertText":"  const themeBlock = insertThemeBlock ? insertThemeBlock : '';","range":{"start":{"line":21,"character":0},"end":{"line":21,"character":37}},"file":{"$mid":1,"fsPath":"d:\\workspace\\token-lib\\packages\\pc\\src\\index.js","_sep":1,"external":"file:///d%3A/workspace/token-lib/packages/pc/src/index.js","path":"/d:/workspace/token-lib/packages/pc/src/index.js","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"18344bbe77372997","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"3b5ndytyogmpqs2szebl403xefn37s6c","sku":"monthly_subscriber","languageId":"javascript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":175,\"PathMarker\":8},\"unused\":{\"LanguageMarker\":5},\"usedCounts\":{\"BeforeCursor\":22,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"","gitRepoHost":"","gitRepoOwner":"","gitRepoName":"","gitRepoPath":"","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"c88312fa-6c5f-4117-9c65-bdfc6e65b2cc1724815294205","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"javascript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"3e7d698a-60bb-45f9-b58c-aa868553101a","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-da38539773b54f3fb49510955dabb77e","created":"1724815483","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":474,"promptSuffixCharLen":3062,"promptEndPos":470,"documentLength":3536,"delayMs":0,"promptComputeTimeMs":5,"contextualFilterScore":0.7582596157709651,"timeSinceIssuedMs":10,"current_time":1724815478,"numTokens":12,"compCharLen":25,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724815478789,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"javascript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" ? insertThemeBlock : '';","position":{"line":21,"character":37},"offset":482,"resultType":2}]}}] 
  2024-08-28 11:24:40 [acceptCompletion] {"requestId":"18344bbe77372997","text":"  const themeBlock = insertThemeBlock ? insertThemeBlock : '';","telemetry":{"uuid":"143fba51-91a1-4638-8f24-80bdd8da0c7f","insertText":"  const themeBlock = insertThemeBlock ? insertThemeBlock : '';","range":{"start":{"line":21,"character":0},"end":{"line":21,"character":37}},"file":{"$mid":1,"fsPath":"d:\\workspace\\token-lib\\packages\\pc\\src\\index.js","_sep":1,"external":"file:///d%3A/workspace/token-lib/packages/pc/src/index.js","path":"/d:/workspace/token-lib/packages/pc/src/index.js","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"18344bbe77372997","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"3b5ndytyogmpqs2szebl403xefn37s6c","sku":"monthly_subscriber","languageId":"javascript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":175,\"PathMarker\":8},\"unused\":{\"LanguageMarker\":5},\"usedCounts\":{\"BeforeCursor\":22,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"","gitRepoHost":"","gitRepoOwner":"","gitRepoName":"","gitRepoPath":"","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.0","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"c88312fa-6c5f-4117-9c65-bdfc6e65b2cc1724815294205","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.0","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"javascript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"3e7d698a-60bb-45f9-b58c-aa868553101a","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-da38539773b54f3fb49510955dabb77e","created":"1724815483","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":474,"promptSuffixCharLen":3062,"promptEndPos":470,"documentLength":3536,"delayMs":0,"promptComputeTimeMs":5,"contextualFilterScore":0.7582596157709651,"timeSinceIssuedMs":10,"current_time":1724815478,"numTokens":12,"compCharLen":25,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724815478789,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.0","X-Copilot-FileType":"javascript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" ? insertThemeBlock : '';","position":{"line":21,"character":37},"offset":482,"resultType":2}} 
  2024-08-28 13:53:04 [triggerCompletion] {"requestId":"9bbe5b019f33a052","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: sc","suffix":";\n\n  .middle-module {\n    min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  height: 100%;\n  overflow-y: scroll;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":2,"trim_by_indentation":true,"prompt_tokens":1852,"suffix_tokens":580}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 13:53:04 [triggerCompletion] {"requestId":"0e6bb3b9df3e95b7","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll","suffix":";\n\n  .middle-module {\n    min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  height: 100%;\n  overflow-y: scroll;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":2,"trim_by_indentation":true,"prompt_tokens":1852,"suffix_tokens":580}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 13:53:59 [triggerCompletion] {"requestId":"2122f2a1ad425f73","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;","suffix":"overflow-y: scroll;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":2,"trim_by_indentation":true,"prompt_tokens":1926,"suffix_tokens":499}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 13:54:29 [triggerCompletion] {"requestId":"7d4c585416a93609","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;","suffix":"overflow-y: scroll;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":2,"trim_by_indentation":true,"prompt_tokens":1926,"suffix_tokens":499}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 13:54:54 [triggerCompletion] {"requestId":"75ed1a5288bcaac3","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;","suffix":"display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":2,"trim_by_indentation":true,"prompt_tokens":1926,"suffix_tokens":493}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 13:57:13 [triggerCompletion] {"requestId":"3c9fac37974fb011","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n","suffix":"}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":0,"trim_by_indentation":true,"prompt_tokens":1853,"suffix_tokens":515}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 13:57:13 [triggerCompletion] {"requestId":"a6a5a2b80bf5f894","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n","suffix":"}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":0,"trim_by_indentation":true,"prompt_tokens":1853,"suffix_tokens":515}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 13:57:13 [triggerCompletion] {"requestId":"fd8f9338b859141d","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;","suffix":"}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":0,"trim_by_indentation":true,"prompt_tokens":1853,"suffix_tokens":515}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:16 [triggerCompletion] {"requestId":"81ab2a01171c55de","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个wen'jian","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":16,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:19 [triggerCompletion] {"requestId":"bc16ab00457a1cd5","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件sh'j","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":17,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:20 [triggerCompletion] {"requestId":"4a2e03e0603e2706","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件shi","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:23 [triggerCompletion] {"requestId":"9283711becf23cb9","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是lin'shi","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":18,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:23 [triggerCompletion] {"requestId":"0100693f80591da0","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时chu","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":19,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:24 [triggerCompletion] {"requestId":"f6797b7fbf2769d0","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时chu'li","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":21,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:24 [triggerCompletion] {"requestId":"0b4fce30e661fc37","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":21,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:24 [triggerCompletion] {"requestId":"d14751f31f34027e","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":22,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:25 [triggerCompletion] {"requestId":"abd921de4abc6539","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，zhi","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":24,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:25 [triggerCompletion] {"requestId":"f82a20de5e102d1f","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，zhi'z","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":26,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:26 [triggerCompletion] {"requestId":"2c0feb5d3a1a711f","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，zhi'zai","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":27,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:26 [triggerCompletion] {"requestId":"c0d56a1e061b9ad6","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，只在","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":24,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:26 [triggerCompletion] {"requestId":"6dccf1aaba0b37fd","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":22,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:28 [triggerCompletion] {"requestId":"a126ce4b15b7633d","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，lao","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":24,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:28 [triggerCompletion] {"requestId":"61363920c41d1571","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，lao'ban","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":26,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:29 [triggerCompletion] {"requestId":"b60ed78c22a449f3","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，lao'ban'e'b","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":28,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:29 [triggerCompletion] {"requestId":"af07f30c49801069","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，lao'ban'e'b'n","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":29,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:29 [triggerCompletion] {"requestId":"f96270d0d113071c","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，老板厄本那","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":29,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:30 [triggerCompletion] {"requestId":"9888a51e9a57c8bf","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，老","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":23,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:30 [triggerCompletion] {"requestId":"95b6ebe311a6b167","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":22,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:30 [triggerCompletion] {"requestId":"8f59e86a4dad0fc8","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，xin'm","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":24,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:31 [triggerCompletion] {"requestId":"f7212ca860f2d2ef","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，xin","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":23,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:31 [triggerCompletion] {"requestId":"c0f823e83f9bb08e","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，xin'ban","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":25,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:32 [triggerCompletion] {"requestId":"0486cbca3d606ea1","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，xin'ban'ben","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":27,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:32 [triggerCompletion] {"requestId":"d1dd94ea4fd48c70","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的额","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":26,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:32 [triggerCompletion] {"requestId":"45ba7fbea8777230","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的额s","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":27,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:33 [triggerCompletion] {"requestId":"f6aa6cf2a0d5fbfa","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的s","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":26,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:33 [triggerCompletion] {"requestId":"f89a2e5830412281","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的se'b","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":27,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:34 [triggerCompletion] {"requestId":"5833657b27088aab","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的se'ban","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":28,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:34 [triggerCompletion] {"requestId":"9f34174e8c16fb94","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":27,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:35 [triggerCompletion] {"requestId":"8579a5772a35d142","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板bu'z","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":30,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:35 [triggerCompletion] {"requestId":"692bbaf97a64ae94","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板bu'zhi'chi","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":33,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:35 [triggerCompletion] {"requestId":"c2ec6af013fe86d6","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":30,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:38 [triggerCompletion] {"requestId":"1f9c2b0993e5b26c","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持gai","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":32,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:39 [triggerCompletion] {"requestId":"72cac699ba521035","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该xia","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":32,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:39 [triggerCompletion] {"requestId":"49e5da3b1364ccda","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该xiang","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":33,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:39 [triggerCompletion] {"requestId":"a5025fa7d80cac9f","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该xiang'm","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":34,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:40 [triggerCompletion] {"requestId":"062169b51ee2e3ff","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该xiang'mu","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":35,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:40 [triggerCompletion] {"requestId":"cf06a67ad53938aa","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":32,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:40 [triggerCompletion] {"requestId":"62ff4cb34d64ccf8","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":33,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:41 [triggerCompletion] {"requestId":"efef6c5d5ae3951e","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，xin'xiang'm","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":38,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:41 [triggerCompletion] {"requestId":"bc8801d673a73c40","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，xin'xiang'mu","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":39,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:42 [triggerCompletion] {"requestId":"fe2225c006672cf0","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目zhi","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":37,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:42 [triggerCompletion] {"requestId":"62d25d7788a4b5ee","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目zhi'chi","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":39,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:43 [triggerCompletion] {"requestId":"63c68530af792b89","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":37,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:43 [triggerCompletion] {"requestId":"b3fcb89dd907b2d1","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持xu","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":39,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:43 [triggerCompletion] {"requestId":"c17ba9d124f6e313","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":38,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:43 [triggerCompletion] {"requestId":"e96790b4ebfb4fbe","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":39,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:44 [triggerCompletion] {"requestId":"a31ec230a49dfccf","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UIo'a","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":41,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:45 [triggerCompletion] {"requestId":"7a374952b592e058","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UIo","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":40,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:45 [triggerCompletion] {"requestId":"ef6cc49a19ad4603","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI【p","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":41,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:45 [triggerCompletion] {"requestId":"ac393de7cc91e6f3","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":39,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:47 [triggerCompletion] {"requestId":"cd244cc707bfdb45","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UIpai","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":40,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:47 [triggerCompletion] {"requestId":"ae2dd045cc309d83","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UIpai'qi","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":42,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:47 [triggerCompletion] {"requestId":"7d30e34be0a59b31","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":41,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:47 [triggerCompletion] {"requestId":"3ceac5e4c152dc25","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":42,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:48 [triggerCompletion] {"requestId":"e09dbb3af2cd371f","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UYI","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":44,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:49 [triggerCompletion] {"requestId":"5863a51009c09a39","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，U","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":43,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:49 [triggerCompletion] {"requestId":"4e14bd080d4cc79f","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":43,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:50 [triggerCompletion] {"requestId":"3b5a2e40729762fa","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UIwu'y","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":45,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:51 [triggerCompletion] {"requestId":"d812e163d72a30bf","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UIwu","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":44,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:51 [triggerCompletion] {"requestId":"45bec122411846f8","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UIwu'zi","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":46,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:51 [triggerCompletion] {"requestId":"fb40900755178f4b","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UIwu'zi'yuan","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":48,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:52 [triggerCompletion] {"requestId":"ecab8a080b4a9e59","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":45,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:52 [triggerCompletion] {"requestId":"2543c214c254da91","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源m","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":46,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:53 [triggerCompletion] {"requestId":"ae24d1267ed9180c","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":45,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:07:53 [triggerCompletion] {"requestId":"35253a40ace6fe66","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":46,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:23 [triggerCompletion] {"requestId":"856583bfbabc034b","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，gu","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":47,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:24 [triggerCompletion] {"requestId":"eb6d520c115e307d","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，股","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":48,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:24 [triggerCompletion] {"requestId":"da01556a1e1661ed","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":46,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:24 [triggerCompletion] {"requestId":"3cb78e151383167b","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，gu","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":47,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:27 [triggerCompletion] {"requestId":"dd08a18ae3262ab2","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":48,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:27 [triggerCompletion] {"requestId":"a616cc62ef5af2b9","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故xian","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":50,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:28 [triggerCompletion] {"requestId":"61f836a3f010fd64","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":49,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:29 [triggerCompletion] {"requestId":"a00f7d855a8d0a49","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现bao'cun","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":53,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:29 [triggerCompletion] {"requestId":"fcd5d2bd84bea3c7","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":50,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:29 [triggerCompletion] {"requestId":"1eabb4447f48628b","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存j","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":51,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:30 [triggerCompletion] {"requestId":"1bf41a463153b2c7","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存ji","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":51,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:30 [triggerCompletion] {"requestId":"e31680c50459f16d","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存jiu","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":52,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:30 [triggerCompletion] {"requestId":"11485936664a234f","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存jiu'ban","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":54,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:31 [triggerCompletion] {"requestId":"e72edb360355bf18","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版s","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":54,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:31 [triggerCompletion] {"requestId":"ee8226318f5bda5a","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版se'b","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":55,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:31 [triggerCompletion] {"requestId":"69c3b80e643599e0","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版se'ban","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":56,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:32 [triggerCompletion] {"requestId":"19e9eb44ab08101f","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":55,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:32 [triggerCompletion] {"requestId":"87cff0345fda8b06","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":56,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:33 [triggerCompletion] {"requestId":"8904d71a64c8231c","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，y","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":57,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:33 [triggerCompletion] {"requestId":"bd125088f35b1a50","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":56,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:33 [triggerCompletion] {"requestId":"96a978900e72a35b","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，l","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":57,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:34 [triggerCompletion] {"requestId":"edad3fa9ce62d8e2","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，刘永","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":60,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:35 [triggerCompletion] {"requestId":"803cd5219976ad1f","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":56,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:35 [triggerCompletion] {"requestId":"72c2d7eb61c84562","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，l","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":57,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:35 [triggerCompletion] {"requestId":"2c4a5d83c2c9c7c0","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，li","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":57,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:36 [triggerCompletion] {"requestId":"9611452c3ee4a2f4","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":58,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:36 [triggerCompletion] {"requestId":"408e226e7fbfb5cb","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用cha","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":59,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:37 [triggerCompletion] {"requestId":"b170d86b03955fe1","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用cha'ru","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":61,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:37 [triggerCompletion] {"requestId":"b7f6cc8ad4ec4f4b","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":61,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:37 [triggerCompletion] {"requestId":"011a8a891e8440a8","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入k","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":62,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:38 [triggerCompletion] {"requestId":"6ff1e82f701c2c73","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":61,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:38 [triggerCompletion] {"requestId":"0bf0d42c636797e9","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入g","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":62,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:38 [triggerCompletion] {"requestId":"968f443f774405c5","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入g'n","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":63,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:39 [triggerCompletion] {"requestId":"7350773c6d4cae84","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入g","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":62,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:39 [triggerCompletion] {"requestId":"906073bd9747268c","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入g'n","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":63,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:40 [triggerCompletion] {"requestId":"52233d8012b126ee","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入功能","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":62,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:40 [triggerCompletion] {"requestId":"12eaa7337e445947","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入功能x","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":63,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:41 [triggerCompletion] {"requestId":"0ef747e640088fa5","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入功能xiu","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":64,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:41 [triggerCompletion] {"requestId":"a8c15047e9583d98","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入功能xiu'fu","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":66,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:41 [triggerCompletion] {"requestId":"1f828f9567a09de2","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入功能修复","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":64,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:43 [triggerCompletion] {"requestId":"7cd8a752202af323","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入功能","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":62,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:43 [triggerCompletion] {"requestId":"ee802c52e2a89751","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入功能chu","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":63,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:44 [triggerCompletion] {"requestId":"c9c733332e2b0b1c","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入功能chu'l","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":64,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:44 [triggerCompletion] {"requestId":"de900cd450b9faa3","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入功能chu'li","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":65,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:44 [triggerCompletion] {"requestId":"357ef8fcdb1e6416","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入功能处理","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":63,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:45 [triggerCompletion] {"requestId":"535da006e8fd840f","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入功能处理gai","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":65,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:45 [triggerCompletion] {"requestId":"a5ec772ebc340272","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入功能处理该","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":64,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:47 [triggerCompletion] {"requestId":"f724b93581dda95b","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入功能处理该项目","suffix":"","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":65,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:08:51 [triggerCompletion] {"requestId":"3ea6fc792135c12b","request":{"prompt":"// Path: src/assets/theme/theme.ts\n// 这个文件是临时处理方案，新版本的色板不支持该项目，新项目支持需要UI排期，UI无资源，故现保存旧版色板，利用插入功能处理该项目\n","suffix":"","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":66,"suffix_tokens":0}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:34 [triggerCompletion] {"requestId":"b60f0c45cfeb87a3","request":{"prompt":"// Path: src/assets/theme/index.ts\n// gai","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":12,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:35 [triggerCompletion] {"requestId":"9ba33e2240e40659","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该xia","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":13,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:36 [triggerCompletion] {"requestId":"e70dcd44f080900f","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":14,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:39 [triggerCompletion] {"requestId":"7edd72cc6c0748b1","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是；","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:40 [triggerCompletion] {"requestId":"2556064ca7edce79","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":14,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:40 [triggerCompletion] {"requestId":"08a5439ac6f30c2d","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是l","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:41 [triggerCompletion] {"requestId":"dea19cf088ad6b6c","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是lin'sh'ji","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":19,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:42 [triggerCompletion] {"requestId":"20eacbdaeb6bcfaf","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是lin'sh'ji'f","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":21,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:42 [triggerCompletion] {"requestId":"70bf5512a45a6e7d","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是lin'sh'j","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":19,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:42 [triggerCompletion] {"requestId":"1b53be248a1f2cd1","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是lin'sh","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":17,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:44 [triggerCompletion] {"requestId":"a4bea8d1c3712c93","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":19,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:44 [triggerCompletion] {"requestId":"c6ff84b5c3337ade","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":20,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:44 [triggerCompletion] {"requestId":"226e45ff39c87a8b","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，jie'j","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":23,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:45 [triggerCompletion] {"requestId":"0b0a3b436b1d0da3","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":23,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:47 [triggerCompletion] {"requestId":"4d0776a21820e160","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":24,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:49 [triggerCompletion] {"requestId":"a88ad11f9fa9d177","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UIwu","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":25,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:50 [triggerCompletion] {"requestId":"5b3ae475d30e2385","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UIwu'zi","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":27,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:50 [triggerCompletion] {"requestId":"a99fbee782b1af9b","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UIwu'zi'yuan","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":29,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:51 [triggerCompletion] {"requestId":"c9c591bacf73517a","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源wen","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":27,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:51 [triggerCompletion] {"requestId":"6f30ec5f48ff71b7","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":27,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:52 [triggerCompletion] {"requestId":"a7a4c3b35de099ad","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":28,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:52 [triggerCompletion] {"requestId":"00a6b36ffb24dfa2","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，yu","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":29,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:53 [triggerCompletion] {"requestId":"71460db5209523c5","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，yu'ji","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":31,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:53 [triggerCompletion] {"requestId":"5bea23cdb080b9a5","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":30,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:53 [triggerCompletion] {"requestId":"35d3df91cd12212a","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计 ","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":31,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:54 [triggerCompletion] {"requestId":"b0302712e368d1ec","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":30,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:55 [triggerCompletion] {"requestId":"62bda4d70d369978","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":31,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:55 [triggerCompletion] {"requestId":"d34380fca44825ce","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计27","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":31,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:56 [triggerCompletion] {"requestId":"e9ed697a3c4291b5","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":32,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:56 [triggerCompletion] {"requestId":"cea29f52bcd4437c","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761 ","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":33,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:14:57 [triggerCompletion] {"requestId":"23ae7d4dfe38d2ec","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761 中","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":33,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:00 [triggerCompletion] {"requestId":"60e98745f8c3f9df","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中hui","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":35,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:01 [triggerCompletion] {"requestId":"21d4173728220db9","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中会gen","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":35,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:01 [triggerCompletion] {"requestId":"18c8ceb3a9bd9f71","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中会geng","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":36,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:02 [triggerCompletion] {"requestId":"1829f6f64808650b","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中会geng'xin","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":38,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:02 [triggerCompletion] {"requestId":"9fc3dc3b97f1acea","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中会更新xin","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":36,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:03 [triggerCompletion] {"requestId":"9828a6dbcae41682","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中会更新xin'sa'e","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":39,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:03 [triggerCompletion] {"requestId":"f53969312b958586","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中会更新xin'sa'e'ban","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":41,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:04 [triggerCompletion] {"requestId":"51ea786140ec80a7","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中会更新新萨尔版","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":40,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:04 [triggerCompletion] {"requestId":"16b2e220eaf3aa59","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中会更新新","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":36,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:05 [triggerCompletion] {"requestId":"dd1fc23d1ce903e5","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中会更新新s","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":37,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:05 [triggerCompletion] {"requestId":"cccf97179df61ffa","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中会更新新se'b","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":38,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:05 [triggerCompletion] {"requestId":"2342da7ccd0b1861","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中会更新新se'ban","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":39,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:07 [triggerCompletion] {"requestId":"02c4c07236bd8ca3","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中会更新新色板shang","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":40,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:07 [triggerCompletion] {"requestId":"834b2760fc996f14","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中会更新新色板shang'xian","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":43,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:08 [triggerCompletion] {"requestId":"0e88b5094fb35e29","request":{"prompt":"// Path: src/assets/theme/index.ts\n// 该项目是临时方案，解决UI无资源问题，预计2761中会更新新色板上线","suffix":"import { defaultTheme } from './defaultTheme.js';\r\nimport { tybblack } from './tybblack.js';\r\nimport { tybwhite } from './tybwhite.js';\r\nimport { tybgray } from './tybgray.js';\r\nimport { hevoblack } from './hevoblack.js';\r\nimport { hevowhite } from './hevowhite.js';\r\nimport { hevogray } from './hevogray.js';\r\n\r\nexport default {\r\n    tybblack,\r\n    tybwhite,\r\n    tybgray,\r\n    hevoblack,\r\n    hevowhite,\r\n    hevogray,\r\n    defaultTheme,\r\n};\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":40,"suffix_tokens":136}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:17 [triggerCompletion] {"requestId":"6f8a4d4b28704205","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\n","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":148,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:18 [triggerCompletion] {"requestId":"272034256609058f","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nim","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":149,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:18 [triggerCompletion] {"requestId":"8837a0debf6481a2","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimpor","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":150,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:19 [triggerCompletion] {"requestId":"68de9d37c63deca9","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":149,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:19 [triggerCompletion] {"requestId":"da12f5838cd42058","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport ","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":150,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:27 [triggerCompletion] {"requestId":"8ca75627e379446b","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport t","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":150,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:29 [triggerCompletion] {"requestId":"ad456456d9561c57","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport th","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":150,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:29 [triggerCompletion] {"requestId":"cd13be6678df163c","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport thme","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":151,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:30 [triggerCompletion] {"requestId":"e857b3352a70d481","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport th","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":150,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:30 [triggerCompletion] {"requestId":"4dd2b2964399a460","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport t","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":150,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:30 [triggerCompletion] {"requestId":"861aa61401a28ace","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport ","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":150,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:30 [triggerCompletion] {"requestId":"3bbde2331ad9265a","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport t","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":150,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:31 [triggerCompletion] {"requestId":"4533a305fd2cec70","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport th","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":150,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:31 [triggerCompletion] {"requestId":"073da7c0bf2aabf8","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport theme","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":150,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:34 [triggerCompletion] {"requestId":"fea4785b11792e38","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeB","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":151,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:35 [triggerCompletion] {"requestId":"4fc85f442124b35c","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBl","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":151,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:35 [triggerCompletion] {"requestId":"1debbef6f11a77b2","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":151,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:35 [triggerCompletion] {"requestId":"7b7f2459eaaf9838","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock ","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":152,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:36 [triggerCompletion] {"requestId":"db10ff2416f47755","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock f","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":152,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:36 [triggerCompletion] {"requestId":"d4ae1893c465ccb3","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":152,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:36 [triggerCompletion] {"requestId":"697f7bbefdfbd218","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from ","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":153,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:37 [triggerCompletion] {"requestId":"273006ff74691aa7","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":153,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:37 [triggerCompletion] {"requestId":"303721d3749d7eef","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '@","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":153,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:38 [triggerCompletion] {"requestId":"05f971d38b47e93b","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '@/","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":153,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:39 [triggerCompletion] {"requestId":"42b168b87f55576d","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '@/as","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":154,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:39 [triggerCompletion] {"requestId":"ca95e1364d45cc00","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '@/ass","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":154,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:39 [triggerCompletion] {"requestId":"e496283fffac0515","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '@/asse","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":154,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:40 [triggerCompletion] {"requestId":"85b09a4334f8455e","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '@/asset","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":154,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:40 [triggerCompletion] {"requestId":"a29af4de18e554cc","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '@/assets/","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":155,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:42 [triggerCompletion] {"requestId":"da6e7577bc280a9f","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '@/assets/t","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":155,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:42 [triggerCompletion] {"requestId":"9741927eb716d2d6","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '@/assets/tj","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":156,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:42 [triggerCompletion] {"requestId":"7ade752cb69c059c","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '@/assets/tje","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":156,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:43 [triggerCompletion] {"requestId":"79594b19f15e412c","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '@/assets/tj","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":156,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:43 [triggerCompletion] {"requestId":"f3a8713a63ba8115","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '@/assets/t","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":155,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:44 [triggerCompletion] {"requestId":"9e43e088e2e2eaa1","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '@/assets/th","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":155,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:15:44 [triggerCompletion] {"requestId":"ac335c21ab0b97c7","request":{"prompt":"// Path: src/main.ts\nimport { createApp } from 'vue';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\nimport App from './App.vue';\nimport router from './router';\n// 公共管理模块\nimport pinia from '@/stores/store';\n// 矢量图统一处理组件\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport 'virtual:svg-icons-register';\nimport { ErrorLevel } from './types/request.d';\nimport useStorage from './utils/storage';\nimport type { RouteParamsRaw } from 'vue-router';\nimport { supportRouter } from './utils/config';\nimport VueObserveVisibility from 'vue-observe-visibility';\nimport themeBlock from '@/assets/theme","suffix":"console.log('local')\r\n\r\ninitTheme({ name: 'prompt-tableheader-front' }).then(() => {\r\n  const app = createApp(App);\r\n  app.component('svg-icon', SvgIcon);\r\n  app.use(pinia);\r\n  app.use(router);\r\n  app.use(VueObserveVisibility);\r\n  app.mount('#app');\r\n\r\n  // 路由切换时做相应处理\r\n  const localstorage = useStorage();\r\n  router.beforeEach((to, from, next) => {\r\n    // 在进入非识别的路由时，根据localstorage 中的记忆切换相应的地址\r\n    if (supportRouter.indexOf(to.path) === -1) {\r\n      try {\r\n        const query = to.query as RouteParamsRaw;\r\n        const localMess = localstorage.get();\r\n        const { path = '/general' } = localMess && localMess.data;\r\n        next({ path, query });\r\n      } catch (err) {\r\n        next({ path: '/general' });\r\n      }\r\n    } else {\r\n      localstorage.save({ path: to.path });\r\n      next();\r\n    }\r\n  });\r\n\r\n  app.config.errorHandler = (err, instance, info) => {\r\n    window.ClientMonitor.reportFrameErrors(\r\n      {\r\n        category: 'vue',\r\n        grade: 'Error',\r\n        level: ErrorLevel.UNEXPECT_ERROR,\r\n      },\r\n      {\r\n        name: `vue内部错误`,\r\n        message: `errorInfo:${info}`,\r\n        stack: new Error(info).stack,\r\n      }\r\n    );\r\n  };\r\n\r\n});\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":155,"suffix_tokens":320}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:27:41 [triggerCompletion] {"requestId":"edbad70ab93f2ae4","request":{"prompt":"// Path: node_modules/%40atom/b2c-pc-standard-tokens/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  const themeBlock = insertThemeBlock ? insertThemeBlock : themeGroup;\n  // 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\n  if (!window.API) {\n    console.error('请引入客户端API');\n    theme = 'defaultTheme';\n  } else {\n    if (!theme) {\n      theme = await getUsingSkin();\n    }\n  }\n\n  // 如果存在埋点，则利用埋点收集数据\n  if (window.TA) {\n    window.TA.log({ id: name, _sid: name });\n  }\n\n  // 使用的色值\n  let usingTheme = theme.","suffix":";\r\n\r\n  const _theme = {\r\n    ...themeBlock[usingTheme] ? themeBlock[usingTheme] : themeBlock['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":333,"suffix_tokens":837}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:29:22 [triggerCompletion] {"requestId":"f3fedbcd03dd7512","request":{"prompt":"// Path: node_modules/%40atom/b2c-pc-standard-tokens/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n","suffix":"const themeBlock = insertThemeBlock ? insertThemeBlock : themeGroup;\r\n  // 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeBlock[usingTheme] ? themeBlock[usingTheme] : themeBlock['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":189,"suffix_tokens":980}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:29:23 [triggerCompletion] {"requestId":"b646f44875742d96","request":{"prompt":"// Path: node_modules/%40atom/b2c-pc-standard-tokens/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  c","suffix":"const themeBlock = insertThemeBlock ? insertThemeBlock : themeGroup;\r\n  // 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeBlock[usingTheme] ? themeBlock[usingTheme] : themeBlock['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":190,"suffix_tokens":980}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:29:23 [triggerCompletion] {"requestId":"08434d5a1cc777c0","request":{"prompt":"// Path: node_modules/%40atom/b2c-pc-standard-tokens/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  conso","suffix":"const themeBlock = insertThemeBlock ? insertThemeBlock : themeGroup;\r\n  // 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeBlock[usingTheme] ? themeBlock[usingTheme] : themeBlock['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":191,"suffix_tokens":980}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:29:24 [triggerCompletion] {"requestId":"d58f2c8b30abfab0","request":{"prompt":"// Path: node_modules/%40atom/b2c-pc-standard-tokens/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  console.","suffix":"const themeBlock = insertThemeBlock ? insertThemeBlock : themeGroup;\r\n  // 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeBlock[usingTheme] ? themeBlock[usingTheme] : themeBlock['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":191,"suffix_tokens":980}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:29:24 [triggerCompletion] {"requestId":"32ec54cabda21b8e","request":{"prompt":"// Path: node_modules/%40atom/b2c-pc-standard-tokens/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  console.log","suffix":"const themeBlock = insertThemeBlock ? insertThemeBlock : themeGroup;\r\n  // 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeBlock[usingTheme] ? themeBlock[usingTheme] : themeBlock['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":191,"suffix_tokens":980}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:29:24 [triggerCompletion] {"requestId":"34c3e872f7a3d669","request":{"prompt":"// Path: node_modules/%40atom/b2c-pc-standard-tokens/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  console.log9","suffix":"const themeBlock = insertThemeBlock ? insertThemeBlock : themeGroup;\r\n  // 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeBlock[usingTheme] ? themeBlock[usingTheme] : themeBlock['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":192,"suffix_tokens":980}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:29:25 [triggerCompletion] {"requestId":"dc5796145f5175c4","request":{"prompt":"// Path: node_modules/%40atom/b2c-pc-standard-tokens/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  console.log","suffix":"const themeBlock = insertThemeBlock ? insertThemeBlock : themeGroup;\r\n  // 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeBlock[usingTheme] ? themeBlock[usingTheme] : themeBlock['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":191,"suffix_tokens":980}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:29:25 [triggerCompletion] {"requestId":"0cf2d1b393fb2364","request":{"prompt":"// Path: node_modules/%40atom/b2c-pc-standard-tokens/src/index.js\nimport themeGroup from './theme/index.js';\nimport { supportSkin, getClient } from './util/index.js';\n\n/**\n * 初始化\n * @param {*} options {\n *\n *  自定义色版类型，如果传入则使用传入色版，没传入则自动取当前所在客户端&使用的皮肤\n *  目前支持端侧：统一版\n *\n *  theme: '',\n *\n *  用于自定义修改色版，提供特殊化功能，正常情况不建议使用\n *\n *  params: {},\n * }\n */\nexport async function initTheme(options = {}) {\n  // 获取参数配置\n  let theme = options.theme;\n  const { params, name, insertThemeBlock } = options;\n  console.log()","suffix":"const themeBlock = insertThemeBlock ? insertThemeBlock : themeGroup;\r\n  // 如果不存在window.API，则提示引入，因为需要使用客户端API，并返回默认色版\r\n  if (!window.API) {\r\n    console.error('请引入客户端API');\r\n    theme = 'defaultTheme';\r\n  } else {\r\n    if (!theme) {\r\n      theme = await getUsingSkin();\r\n    }\r\n  }\r\n\r\n  // 如果存在埋点，则利用埋点收集数据\r\n  if (window.TA) {\r\n    window.TA.log({ id: name, _sid: name });\r\n  }\r\n\r\n  // 使用的色值\r\n  let usingTheme = theme;\r\n\r\n  const _theme = {\r\n    ...themeBlock[usingTheme] ? themeBlock[usingTheme] : themeBlock['defaultTheme'],\r\n    ...params,\r\n  };\r\n\r\n  setThemeColors(_theme);\r\n  return theme;\r\n}\r\n\r\n/**\r\n * 设置色版, 通过设置theme变量的方式获取色板色值\r\n * @param { string } theme \r\n *\r\n */\r\nfunction setThemeColors(theme) {\r\n  // 删除上一次的tag标签\r\n  if (window.pcThemeStyleTag) {\r\n    document.head.removeChild(window.pcThemeStyleTag);\r\n  }\r\n  // 创建一个新的style标签\r\n  const styleTag = document.createElement('style');\r\n\r\n  // 设置样式内容\r\n  styleTag.textContent = formate(theme);\r\n\r\n  // 将style标签插入到文档头部\r\n  document.head.appendChild(styleTag);\r\n\r\n  // 缓存tag标签\r\n  window.pcThemeStyleTag = styleTag;\r\n\r\n  // 设置 window 标签\r\n  window.thsTheme = theme;\r\n}\r\n\r\n/**\r\n * 转化css变量，将色值数据转化为string，用style标签赋值在html上\r\n * @param { string } theme \r\n *\r\n */\r\nfunction formate(theme) {\r\n  let keys = '';\r\n  Object.keys(theme).forEach(key => {\r\n    keys += `${transformString(key)}: ${theme[key]};\\n`;\r\n    keys += `${transformString(key)}-rgb: ${hexToRgba(theme[key])};\\n`;\r\n  });\r\n  return `\r\n      :root {\r\n          ${keys}\r\n      }\r\n  `;\r\n}\r\n\r\n/**\r\n * 将16进制色值转化为rgb色值，可用于透明度的设置\r\n * @param { string } hex 16进制的数据\r\n *\r\n */\r\nfunction hexToRgba(hex) {\r\n  if (!hex) hex = '#ededed';\r\n  let rgba = parseInt('0x' + hex.slice(1, 3)) + ',' +\r\n    parseInt('0x' + hex.slice(3, 5)) + ',' +\r\n    parseInt('0x' + hex.slice(5, 7));\r\n  return rgba;\r\n}\r\n\r\n/**\r\n * 将js变量的key转化为 --ths-pc- 的形式，用于设置css变量\r\n * @param { string } inputString js的key形式，例如 Brand1\r\n *\r\n */\r\nfunction transformString(inputString) {\r\n  let result = '--ths-pc-';\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    const char = inputString[i];\r\n    if (char.match(/[A-Z0-9]/)) {\r\n      if (i > 0) {\r\n        result += '-';\r\n      }\r\n      result += char.toLowerCase();\r\n    } else {\r\n      result += char;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description 获取当前使用的皮肤\r\n *\r\n */\r\nasync function getUsingSkin() {\r\n  const support = supportSkin();\r\n  const res = await getSkin();\r\n  return support.includes(res) ? res : 'defaultTheme';\r\n}\r\n\r\n/**\r\n * @description 通过客户端获取皮肤颜色\r\n *\r\n */\r\nasync function getSkin() {\r\n  // 获取是哪一个客户端\r\n  const client = await getClient();\r\n\r\n  return new Promise((resolve) => {\r\n    if (client === 'tyb' || client === 'hevo') {\r\n      try {\r\n        window.API.use({\r\n          method: 'Util.getSkinName',\r\n          success: function (theme) {\r\n            const skinName = {\r\n              '核新风格': 'black',\r\n              '白色风格': 'white',\r\n              '酷灰风格': 'gray',\r\n            }[theme];\r\n            resolve(`${client}${skinName}`);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        resolve('defaultTheme');\r\n      }\r\n    } else {\r\n      resolve('defaultTheme');\r\n    }\r\n  })\r\n}\r\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"javascript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":192,"suffix_tokens":980}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:35:58 [triggerCompletion] {"requestId":"784a5d0e8995c6c1","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    height","suffix":"min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1860,"suffix_tokens":561}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:35:59 [triggerCompletion] {"requestId":"0215d95461eaaf62","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    height:","suffix":"min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1861,"suffix_tokens":561}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:36:00 [triggerCompletion] {"requestId":"936e59b6cde92897","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    height:","suffix":"min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1861,"suffix_tokens":561}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:36:00 [triggerCompletion] {"requestId":"82cb47f8d6fa5599","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    height: ","suffix":"min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1862,"suffix_tokens":561}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:36:01 [triggerCompletion] {"requestId":"54e94b1a746a01d4","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    height: a","suffix":"min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1862,"suffix_tokens":561}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:36:01 [triggerCompletion] {"requestId":"6731f9c2d114b1f7","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    height: auto","suffix":"min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1862,"suffix_tokens":561}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:36:02 [triggerCompletion] {"requestId":"4ebdf70d87c40299","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    height: auto;","suffix":"min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1863,"suffix_tokens":561}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 14:49:50 [triggerCompletion] {"requestId":"b693f2779a589601","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;","suffix":"overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    height: auto;\n    min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":2,"trim_by_indentation":true,"prompt_tokens":1592,"suffix_tokens":827}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 15:04:01 [triggerCompletion] {"requestId":"b6495f6b678ad43e","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    height: auto;\n    min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n","suffix":"display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":2,"trim_by_indentation":true,"prompt_tokens":1927,"suffix_tokens":493}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 15:04:01 [triggerCompletion] {"requestId":"28fdc9915a236b74","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    height: auto;\n    min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  h","suffix":"display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":2,"trim_by_indentation":true,"prompt_tokens":1928,"suffix_tokens":493}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 15:04:04 [triggerCompletion] {"requestId":"a5f85771465d9598","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    height: auto;\n    min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  h","suffix":"display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":2,"trim_by_indentation":true,"prompt_tokens":1928,"suffix_tokens":493}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 15:04:04 [triggerCompletion] {"requestId":"0b1cc591d6b55bcf","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    height: auto;\n    min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  he","suffix":"display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":2,"trim_by_indentation":true,"prompt_tokens":1928,"suffix_tokens":493}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 15:04:05 [triggerCompletion] {"requestId":"8c19222c976f8b62","request":{"prompt":"// Path: src/views/DiagnoseCards/DiagnoseView.vue\n<template>\n  <div\n    ref=\"diagnoseView\"\n    class=\"diagnose-view\"\n    :class=\"model === WindowSize.SMALL ? 'diagnose-view-small' : ''\"\n  >\n    <div\n      class=\"diagnose-inner diagnose-inner-small scrollbar\"\n      v-if=\"model === WindowSize.SMALL\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCardSmall\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <div class=\"middle-module\">\n        <a-spin :loading=\"riskModuleLoading\">\n          <RiskCardSmall\n            ref=\"riskcardModule\"\n            :risk=\"risk\"\n            :highlight=\"highlight\"\n          />\n        </a-spin>\n      </div>\n      <AbilityModelSmall\n        ref=\"abilityModules\"\n        :data=\"stock.diagnosis_abilities\"\n        :company=\"stock.name\"\n      />\n    </div>\n\n    <div\n      v-else\n      class=\"diagnose-inner diagnose-inner-normal\"\n    >\n      <!-- 六维财务诊股模块 -->\n      <DiagnoseCard\n        id=\"diagnose\"\n        ref=\"diagnoseModule\"\n        :card-title=\"reportTitle\"\n        :card-content=\"reportContent\"\n        :industry=\"stock.industry_name\"\n        :industry-code=\"stock.industry_quote_code\"\n        :abilities=\"stock.diagnosis_abilities\"\n        :score=\"stock.share_comprehensive_score\"\n        :last-score=\"stock.last_score\"\n        :rank-number=\"stock.rank\"\n        :rank-sum=\"stock.total\"\n        :history=\"history[AbilityId.FINAL_SCORE]\"\n        @tab=\"handleGetHistory\"\n      />\n      <!-- 财务亮点及风险模块 -->\n      <RiskCard\n        ref=\"riskcardModule\"\n        :loading=\"riskModuleLoading\"\n        :risk=\"risk\"\n        :highlight=\"highlight\"\n      />\n\n      <!-- 能力卡片模块 -->\n      <AbilityCard\n        v-for=\"item in stock.diagnosis_abilities\"\n        v-observe-visibility=\"{\n          callback: (isVisible: boolean) => abilityModulesVisibilityChanged(isVisible, item.diagnosis_ability_id),\n        }\"\n        ref=\"abilityModules\"\n        :key=\"item.name\"\n        :id=\"item.diagnosis_ability_id\"\n        :icon=\"item.icon\"\n        :name=\"item.name\"\n        :rank=\"item.rank\"\n        :total=\"item.total\"\n        :increase=\"item.increase\"\n        :score=\"item.score\"\n        :history=\"history[item.diagnosis_ability_id]\"\n        :title=\"item.name\"\n        @refresh=\"handleLoadAbilityModel(item.diagnosis_ability_id)\"\n      />\n      <div class=\"duty-announce\">\n        免责声明：本信息由同花顺金融研究中心提供，仅供参考，同花顺金融研究中心力求但不保证数据的完全准确，如有错漏请以中国证监会指定上市公司信息披露媒体为准。用户查看或依据这些内容所进行的任何行为造成的风险和结果都自行负责，与同花顺无关。\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { storeToRefs } from 'pinia';\nimport DiagnoseCard from '@/views/DiagnoseCards/components/DiagnoseCard.vue';\nimport RiskCard from '@/views/DiagnoseCards/components/RiskCard.vue';\nimport AbilityCard from '@/views/DiagnoseCards/components/AbilityCard.vue';\nimport RiskCardSmall from '@/views/DiagnoseCards/components/RiskCardSmall.vue';\nimport AbilityModelSmall from '@/views/DiagnoseCards/components/AbilityModelSmall.vue';\nimport DiagnoseCardSmall from '@/views/DiagnoseCards/components/DiagnoseCardSmall.vue';\n// store\nimport { useWindowStore } from '@/stores/window';\nimport { useStockStore } from '@/stores/stock';\nimport { useListenerStore } from '@/stores/listener';\n// 类型引入\nimport { AbilityId } from '@/types/StockAbility.d';\nimport { WindowSize } from '@/types/window.d';\nimport type { AbilityComponent, ExposeComponent } from '@/types/components.d';\n// 图片引入\nimport { history, getHistoryData, handleGetHistory } from './hooks/useHistoryHooks';\nimport { getRiskContent, risk, highlight, reportContent, reportTitle, riskModuleLoading } from './hooks/useRiskHooks';\nimport { sendTaLog } from '@/utils/ta';\n\nconst stockStore = useStockStore();\nconst { stock } = storeToRefs(stockStore);\n// 获取对应节点\nconst diagnoseView = ref<HTMLElement>();\nconst diagnoseModule = ref<ExposeComponent>();\nconst riskcardModule = ref<ExposeComponent>();\nconst abilityModules = ref<AbilityComponent[]>();\n// 设置属性\nconst windowStore = useWindowStore();\nconst { windowSize } = windowStore;\nconst model = ref<WindowSize>(windowSize.type);\n\nconst route = useRoute();\n// 监听页面更新变化\nwatch(\n  () => windowSize.type,\n  () => {\n    model.value = windowSize.type;\n  },\n  {\n    immediate: true,\n  },\n);\n\n// TODO，这个插件大概率不支持49内核，记得做相应的适配支持\nfunction abilityModulesVisibilityChanged(isVisible: boolean, id: string) {\n  if (isVisible) {\n    handleLoadAbilityModel(id);\n  }\n}\n\n// 获取能力模块数据\nasync function handleLoadAbilityModel(id: string) {\n  if (!history.value[id]) {\n    await getHistoryData(id);\n  }\n}\n\n// 页面初始化\nasync function init() {\n  const code = route.query.code;\n  // 清空历史数据\n  history.value = {};\n  // 获取与风险模块\n  getRiskContent();\n  sendTaLog(`pc_web_free_zhengu_caiwu_${code}.show`);\n}\n\nconst { addRequestDep, removeRequestDep } = useListenerStore();\n\nonMounted(() => {\n  init();\n  addRequestDep('handleLoadDiagnoseView', init);\n  sendTaLog('pc_web_free_zhengu_caiwu.show');\n});\n\nonUnmounted(() => {\n  removeRequestDep('handleLoadDiagnoseView');\n});\n</script>\n\n<style scoped lang=\"less\">\n.diagnose-view {\n  width: 100%;\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 8px;\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar:hover,\n  &::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-thumb:active {\n    width: 4px;\n    height: 4px;\n    background-color: var(--ths-pc-fill-color-1);\n  }\n\n  &::-webkit-scrollbar-button:horizontal:start,\n  &::-webkit-scrollbar-button:horizontal:end,\n  &::-webkit-scrollbar-button:vertical:start,\n  &::-webkit-scrollbar-button:vertical:end {\n    display: none;\n  }\n}\n\n.diagnose-view-small {\n  width: 100%;\n  height: 100%;\n  min-width: 250px;\n  overflow-y: scroll;\n\n  .middle-module {\n    height: auto;\n    min-height: calc(100% - 630px); // middle-module为充满高度，所以需要减去头部 300 + 底部 330 像素\n  }\n}\n</style>\n\n<style lang=\"less\">\n.diagnose-inner-small {\n  width: 100%;\n  height: ","suffix":";\n  display: flex;\n  flex-direction: column;\n\n  .diagnose-card {\n    width: 100%;\n    flex: 1;\n  }\n\n  .diagnose-card-header {\n    display: flex;\n    background-color: var(--ths-pc-fill-color-3);\n    padding: 0 8px;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    height: 20px;\n    color: var(--ths-pc-text-color-3);\n    font-size: 12px;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .card-more {\n    height: 20px;\n    color: var(--ths-pc-text-color-2);\n    font-size: 12px;\n    line-height: 20px;\n    cursor: pointer;\n  }\n\n  .diagnose-card-body {\n    width: 100%;\n  }\n}\n\n.diagnose-inner-normal {\n  width: calc(100% - 4px);\n\n  .diagnose-card {\n    padding: 12px 0;\n    border-bottom: 1px solid var(--ths-pc-background-color-4);\n    width: 100%;\n  }\n\n  .diagnose-card-header,\n  .ability-card-header {\n    display: flex;\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .card-title {\n    flex: 1;\n    display: flex;\n    color: var(--ths-pc-text-color-3);\n    font-size: 20px;\n    font-weight: 600;\n\n    span {\n      margin-right: 8px;\n    }\n  }\n\n  .diagnose-card-body {\n    width: calc(100% - 32px);\n    margin: 0 auto;\n  }\n\n  .diagnose-card-loading {\n    width: 100%;\n    min-height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.duty-announce {\n  margin: 0 auto;\n  padding: 12px 0;\n  width: calc(100% - 32px);\n  color: var(--ths-pc-text-color-3);\n  font-size: 12px;\n  text-align: center;\n}\n</style>\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"vue","next_indent":2,"trim_by_indentation":true,"prompt_tokens":1930,"suffix_tokens":495}},"responses":{"codeqwenModel":{"response":{},"data":""}}} 
  2024-08-28 15:44:20 [triggerCompletion] {"requestId":"63bae1c8861665a5","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":404,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"                                       ","finishReason":"stop"}}} 
  2024-08-28 15:44:20 [triggerCompletion] {"requestId":"37f0fd2ea47d5226","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // ","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":406,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 错误信息","finishReason":"stop"}}} 
  2024-08-28 15:44:20 [showCompletion] {"requestId":"37f0fd2ea47d5226","model":"codeqwenModel","text":" 错误信息","finishReason":"stop"} 
  2024-08-28 15:44:20 [vscodeShowCompletion] [{"insertText":"            // 错误信息","range":[{"line":51,"character":0},{"line":51,"character":15}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"77531198-d569-4753-bcc7-ccdba2fcf4bd","insertText":"            // 错误信息","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":15}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"37f0fd2ea47d5226","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":399,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"c46dd3df-326d-4bad-b847-19f75ff268f0","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-9a87d55c56ca4e08b070192b53f080c6","created":"1724831063","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1410,"promptSuffixCharLen":248,"promptEndPos":1389,"documentLength":1650,"delayMs":0,"promptComputeTimeMs":19,"contextualFilterScore":0.584409779239135,"timeSinceIssuedMs":316,"current_time":1724831060,"numTokens":3,"compCharLen":5,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831059693,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"错误信息","position":{"line":51,"character":15},"offset":1389,"resultType":0}]}}] 
  2024-08-28 15:44:21 [triggerCompletion] {"requestId":"d2f94f980589d722","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":406,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"  : 暂时不传","finishReason":"stop"}}} 
  2024-08-28 15:44:21 [showCompletion] {"requestId":"d2f94f980589d722","model":"codeqwenModel","text":"  : 暂时不传","finishReason":"stop"} 
  2024-08-28 15:44:21 [triggerCompletion] {"requestId":"345e2c51a15f41f1","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO ","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":407,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 错误信息","finishReason":"stop"}}} 
  2024-08-28 15:44:22 [vscodeShowCompletion] [{"insertText":"            // TODO 错误信息","range":[{"line":51,"character":0},{"line":51,"character":20}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"13f47223-c729-456f-af30-31b34774e8a2","insertText":"            // TODO 错误信息","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":20}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"345e2c51a15f41f1","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":400,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"495c718c-55dc-4c6e-aec9-9cb827bc9140","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-df81109be0bc4d06adb200726f57c99d","created":"1724831065","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1415,"promptSuffixCharLen":248,"promptEndPos":1394,"documentLength":1655,"delayMs":0,"promptComputeTimeMs":19,"contextualFilterScore":0.6697816088587286,"timeSinceIssuedMs":30,"current_time":1724831061,"numTokens":3,"compCharLen":5,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831061666,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"错误信息","position":{"line":51,"character":20},"offset":1394,"resultType":0}]}}] 
  2024-08-28 15:44:21 [showCompletion] {"requestId":"345e2c51a15f41f1","model":"codeqwenModel","text":" 错误信息","finishReason":"stop"} 
  2024-08-28 15:44:23 [triggerCompletion] {"requestId":"76afaea0dca5b6cb","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO z","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":407,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" huangjie.zhuang 2023-03-01 14:01:01","finishReason":"stop"}}} 
  2024-08-28 15:44:23 [showCompletion] {"requestId":"76afaea0dca5b6cb","model":"codeqwenModel","text":" huangjie.zhuang 2023-03-01 14:01:01","finishReason":"stop"} 
  2024-08-28 15:44:23 [vscodeShowCompletion] [{"insertText":"            // TODO z huangjie.zhuang 2023-03-01 14:01:01","range":[{"line":51,"character":0},{"line":51,"character":21}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"9ce60b92-ab9b-4fd6-85e6-369d61585f57","insertText":"            // TODO z huangjie.zhuang 2023-03-01 14:01:01","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":21}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"76afaea0dca5b6cb","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":400,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"780f3183-e8d5-4bc7-960a-03ca8f6c8d6a","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-3701244f35d74ea2a0a286e97f21c91b","created":"1724831065","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1416,"promptSuffixCharLen":248,"promptEndPos":1395,"documentLength":1656,"delayMs":0,"promptComputeTimeMs":20,"contextualFilterScore":0.7077090584139456,"timeSinceIssuedMs":31,"current_time":1724831062,"numTokens":26,"compCharLen":36,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831062536,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" huangjie.zhuang 2023-03-01 14:01:01","position":{"line":51,"character":21},"offset":1395,"resultType":0}]}}] 
  2024-08-28 15:44:24 [triggerCompletion] {"requestId":"f63f672410552373","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO zhe'k","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":410,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" e","finishReason":"stop"}}} 
  2024-08-28 15:44:24 [showCompletion] {"requestId":"f63f672410552373","model":"codeqwenModel","text":" e","finishReason":"stop"} 
  2024-08-28 15:44:24 [showCompletion] {"requestId":"f999dee476379a01","model":"codeqwenModel","text":" 错误信息需要优化","finishReason":"stop"} 
  2024-08-28 15:44:24 [triggerCompletion] {"requestId":"f999dee476379a01","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 这款","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":409,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 错误信息需要优化","finishReason":"stop"}}} 
  2024-08-28 15:44:24 [vscodeShowCompletion] [{"insertText":"            // TODO 这款 错误信息需要优化","range":[{"line":51,"character":0},{"line":51,"character":22}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"cb112384-a3d3-461a-b693-5aa562928e05","insertText":"            // TODO 这款 错误信息需要优化","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":22}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"f999dee476379a01","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":402,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"b2f4ae9b-9afa-4db4-b33f-f1019b547cd8","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-803a75b803864604bf35eeaf25484fb3","created":"1724831067","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1417,"promptSuffixCharLen":248,"promptEndPos":1396,"documentLength":1657,"delayMs":0,"promptComputeTimeMs":19,"contextualFilterScore":0.5867752070921631,"timeSinceIssuedMs":25,"current_time":1724831064,"numTokens":5,"compCharLen":9,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831064502,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" 错误信息需要优化","position":{"line":51,"character":22},"offset":1396,"resultType":0}]}}] 
  2024-08-28 15:44:25 [triggerCompletion] {"requestId":"2ab2102713d72fc7","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 这款b","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":410,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 2c项目没有使用vuex，所以没有store","finishReason":"stop"}}} 
  2024-08-28 15:44:25 [showCompletion] {"requestId":"2ab2102713d72fc7","model":"codeqwenModel","text":" 2c项目没有使用vuex，所以没有store","finishReason":"stop"} 
  2024-08-28 15:44:25 [vscodeShowCompletion] [{"insertText":"            // TODO 这款 错误信息需要优化","range":[{"line":51,"character":0},{"line":51,"character":22}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"768285bd-6879-482c-ae2f-bae775347e96","insertText":"            // TODO 这款 错误信息需要优化","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":22}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"f999dee476379a01","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":402,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"b2f4ae9b-9afa-4db4-b33f-f1019b547cd8","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-803a75b803864604bf35eeaf25484fb3","created":"1724831067","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1417,"promptSuffixCharLen":248,"promptEndPos":1396,"documentLength":1657,"delayMs":0,"promptComputeTimeMs":19,"contextualFilterScore":0.5867752070921631,"timeSinceIssuedMs":25,"current_time":1724831064,"numTokens":5,"compCharLen":9,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831064502,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" 错误信息需要优化","position":{"line":51,"character":22},"offset":1396,"resultType":2}]}}] 
  2024-08-28 15:44:25 [triggerCompletion] {"requestId":"d50f56d6fa7654e0","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 这","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":408,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 边需要优化","finishReason":"stop"}}} 
  2024-08-28 15:44:25 [showCompletion] {"requestId":"d50f56d6fa7654e0","model":"codeqwenModel","text":" 边需要优化","finishReason":"stop"} 
  2024-08-28 15:44:25 [vscodeShowCompletion] [{"insertText":"            // TODO 这 边需要优化","range":[{"line":51,"character":0},{"line":51,"character":21}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"9eecce3b-0567-4317-9d33-9787a1ca5d21","insertText":"            // TODO 这 边需要优化","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":21}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"d50f56d6fa7654e0","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":401,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"8877d724-5cf8-49be-b4f8-f568537be599","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-28387b6d851c4e80ad487fcae50db84a","created":"1724831069","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1416,"promptSuffixCharLen":248,"promptEndPos":1395,"documentLength":1656,"delayMs":0,"promptComputeTimeMs":8,"contextualFilterScore":0.5884718776654254,"timeSinceIssuedMs":16,"current_time":1724831065,"numTokens":4,"compCharLen":6,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831065565,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" 边需要优化","position":{"line":51,"character":21},"offset":1395,"resultType":0}]}}] 
  2024-08-28 15:44:26 [vscodeShowCompletion] [{"insertText":"            // TODO 错误信息","range":[{"line":51,"character":0},{"line":51,"character":20}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"4ee82b83-46a5-4448-84b3-8b9d6afda0ce","insertText":"            // TODO 错误信息","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":20}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"345e2c51a15f41f1","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":400,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"495c718c-55dc-4c6e-aec9-9cb827bc9140","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-df81109be0bc4d06adb200726f57c99d","created":"1724831065","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1415,"promptSuffixCharLen":248,"promptEndPos":1394,"documentLength":1655,"delayMs":0,"promptComputeTimeMs":19,"contextualFilterScore":0.6697816088587286,"timeSinceIssuedMs":30,"current_time":1724831061,"numTokens":3,"compCharLen":5,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831061666,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"错误信息","position":{"line":51,"character":20},"offset":1394,"resultType":1}]}}] 
  2024-08-28 15:44:27 [triggerCompletion] {"requestId":"04b7261ef14d4eeb","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO bu","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":407,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" gId: 0,","finishReason":"stop"}}} 
  2024-08-28 15:44:27 [showCompletion] {"requestId":"04b7261ef14d4eeb","model":"codeqwenModel","text":" gId: 0,","finishReason":"stop"} 
  2024-08-28 15:44:27 [triggerCompletion] {"requestId":"7e06dc98bdedb680","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO bu'zhuo","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":411,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ng',","finishReason":"stop"}}} 
  2024-08-28 15:44:27 [showCompletion] {"requestId":"7e06dc98bdedb680","model":"codeqwenModel","text":" ng',","finishReason":"stop"} 
  2024-08-28 15:44:27 [vscodeShowCompletion] [{"insertText":"            // TODO bu'zhuo ng',","range":[{"line":51,"character":0},{"line":51,"character":27}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"5572d6da-1f3e-46c9-857e-caa8017c7b80","insertText":"            // TODO bu'zhuo ng',","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":27}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"7e06dc98bdedb680","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":404,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"80a189ad-cc80-4520-89cc-ca1d57690209","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-af049bf73abb4775ade5c93a804453f9","created":"1724831071","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1422,"promptSuffixCharLen":248,"promptEndPos":1401,"documentLength":1662,"delayMs":0,"promptComputeTimeMs":52,"contextualFilterScore":0.739591628620507,"timeSinceIssuedMs":58,"current_time":1724831067,"numTokens":2,"compCharLen":5,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831067594,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" ng',","position":{"line":51,"character":27},"offset":1401,"resultType":0}]}}] 
  2024-08-28 15:44:28 [triggerCompletion] {"requestId":"1fe764c4a5720009","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":411,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 错误信息","finishReason":"stop"}}} 
  2024-08-28 15:44:28 [showCompletion] {"requestId":"1fe764c4a5720009","model":"codeqwenModel","text":" 错误信息","finishReason":"stop"} 
  2024-08-28 15:44:29 [triggerCompletion] {"requestId":"a307decdf0b2be99","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉hui","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":413,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 错误","finishReason":"stop"}}} 
  2024-08-28 15:44:29 [showCompletion] {"requestId":"a307decdf0b2be99","model":"codeqwenModel","text":" 错误","finishReason":"stop"} 
  2024-08-28 15:44:29 [triggerCompletion] {"requestId":"c28011809118e932","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉hui'you","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":415,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 错误","finishReason":"stop"}}} 
  2024-08-28 15:44:29 [showCompletion] {"requestId":"c28011809118e932","model":"codeqwenModel","text":" 错误","finishReason":"stop"} 
  2024-08-28 15:44:29 [triggerCompletion] {"requestId":"2d620afa4d7c3884","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":413,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 延迟，所以暂时不记录","finishReason":"stop"}}} 
  2024-08-28 15:44:29 [showCompletion] {"requestId":"2d620afa4d7c3884","model":"codeqwenModel","text":" 延迟，所以暂时不记录","finishReason":"stop"} 
  2024-08-28 15:44:29 [vscodeShowCompletion] [{"insertText":"            // TODO 捕捉会有 延迟，所以暂时不记录","range":[{"line":51,"character":0},{"line":51,"character":24}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"decf3921-74a7-4fcf-ae00-f8bc8aadf991","insertText":"            // TODO 捕捉会有 延迟，所以暂时不记录","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":24}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"2d620afa4d7c3884","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":406,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"4c889f11-9212-40d3-bc18-92ae12e8835c","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-27b168a7eb14445aae2dba95949050c2","created":"1724831072","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1419,"promptSuffixCharLen":248,"promptEndPos":1398,"documentLength":1659,"delayMs":0,"promptComputeTimeMs":4,"contextualFilterScore":0.5896028935736822,"timeSinceIssuedMs":10,"current_time":1724831069,"numTokens":7,"compCharLen":11,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831069456,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" 延迟，所以暂时不记录","position":{"line":51,"character":24},"offset":1398,"resultType":0}]}}] 
  2024-08-28 15:44:30 [triggerCompletion] {"requestId":"e700ede166ad3213","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有hui","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":415,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 端报错，所以暂时注释掉","finishReason":"stop"}}} 
  2024-08-28 15:44:30 [showCompletion] {"requestId":"e700ede166ad3213","model":"codeqwenModel","text":" 端报错，所以暂时注释掉","finishReason":"stop"} 
  2024-08-28 15:44:30 [vscodeShowCompletion] [{"insertText":"            // TODO 捕捉会有hui 端报错，所以暂时注释掉","range":[{"line":51,"character":0},{"line":51,"character":27}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"33a21bab-cfe9-4969-9d5f-63c4e11b0cb9","insertText":"            // TODO 捕捉会有hui 端报错，所以暂时注释掉","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":27}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"e700ede166ad3213","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":408,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"a473acd0-e9c6-431e-bad5-a19b9401ece2","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-9b9f05b9144347bf95d08ea0084d4027","created":"1724831073","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1422,"promptSuffixCharLen":248,"promptEndPos":1401,"documentLength":1662,"delayMs":0,"promptComputeTimeMs":9,"contextualFilterScore":0.6984599566066391,"timeSinceIssuedMs":12,"current_time":1724831070,"numTokens":8,"compCharLen":12,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831070110,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" 端报错，所以暂时注释掉","position":{"line":51,"character":27},"offset":1401,"resultType":0}]}}] 
  2024-08-28 15:44:30 [vscodeShowCompletion] [{"insertText":"            // TODO 捕捉会有 延迟，所以暂时不记录","range":[{"line":51,"character":0},{"line":51,"character":24}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"70fc4ca6-812f-4b36-9025-63940ac80b29","insertText":"            // TODO 捕捉会有 延迟，所以暂时不记录","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":24}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"2d620afa4d7c3884","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":406,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"4c889f11-9212-40d3-bc18-92ae12e8835c","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-27b168a7eb14445aae2dba95949050c2","created":"1724831072","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1419,"promptSuffixCharLen":248,"promptEndPos":1398,"documentLength":1659,"delayMs":0,"promptComputeTimeMs":4,"contextualFilterScore":0.5896028935736822,"timeSinceIssuedMs":10,"current_time":1724831069,"numTokens":7,"compCharLen":11,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831069456,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" 延迟，所以暂时不记录","position":{"line":51,"character":24},"offset":1398,"resultType":1}]}}] 
  2024-08-28 15:44:31 [triggerCompletion] {"requestId":"4125e7ebf0280589","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有we","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":414,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" bpack打包后报错，暂时不处理","finishReason":"stop"}}} 
  2024-08-28 15:44:31 [showCompletion] {"requestId":"4125e7ebf0280589","model":"codeqwenModel","text":" bpack打包后报错，暂时不处理","finishReason":"stop"} 
  2024-08-28 15:44:32 [triggerCompletion] {"requestId":"ca6940905798f030","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有文婷","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":417,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 15:44:33 [vscodeShowCompletion] [{"insertText":"            // TODO 捕捉会有 延迟，所以暂时不记录","range":[{"line":51,"character":0},{"line":51,"character":24}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"d85bbfd4-f986-4ce4-8ee3-8dd0d0c54e83","insertText":"            // TODO 捕捉会有 延迟，所以暂时不记录","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":24}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"2d620afa4d7c3884","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":406,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"4c889f11-9212-40d3-bc18-92ae12e8835c","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-27b168a7eb14445aae2dba95949050c2","created":"1724831072","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1419,"promptSuffixCharLen":248,"promptEndPos":1398,"documentLength":1659,"delayMs":0,"promptComputeTimeMs":4,"contextualFilterScore":0.5896028935736822,"timeSinceIssuedMs":10,"current_time":1724831069,"numTokens":7,"compCharLen":11,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831069456,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" 延迟，所以暂时不记录","position":{"line":51,"character":24},"offset":1398,"resultType":2}]}}] 
  2024-08-28 15:44:33 [triggerCompletion] {"requestId":"11837d3c6a75dfa7","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有文","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":414,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 件名，需要修改","finishReason":"stop"}}} 
  2024-08-28 15:44:33 [showCompletion] {"requestId":"11837d3c6a75dfa7","model":"codeqwenModel","text":" 件名，需要修改","finishReason":"stop"} 
  2024-08-28 15:44:34 [triggerCompletion] {"requestId":"ea6b0ed55b047196","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有we","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":414,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" bpack打包后报错，暂时不处理","finishReason":"stop"}}} 
  2024-08-28 15:44:34 [showCompletion] {"requestId":"ea6b0ed55b047196","model":"codeqwenModel","text":" bpack打包后报错，暂时不处理","finishReason":"stop"} 
  2024-08-28 15:44:34 [triggerCompletion] {"requestId":"ab1ea3cda0c346bf","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有wen","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":414,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"g-ui的报错，需要排查","finishReason":"stop"}}} 
  2024-08-28 15:44:34 [showCompletion] {"requestId":"ab1ea3cda0c346bf","model":"codeqwenModel","text":"g-ui的报错，需要排查","finishReason":"stop"} 
  2024-08-28 15:44:35 [triggerCompletion] {"requestId":"72e99f062bde7c83","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有wen'ti","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":416,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 15:44:35 [triggerCompletion] {"requestId":"48b58acb9a35b91c","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":414,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 15:44:49 [triggerCompletion] {"requestId":"91e7399baf929cd1","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题\n            content: err ","suffix":"err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":420,"suffix_tokens":52}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"?.message || JSON.stringify(err),","finishReason":"stop"}}} 
  2024-08-28 15:44:49 [showCompletion] {"requestId":"91e7399baf929cd1","model":"codeqwenModel","text":"?.message || JSON.stringify(err),","finishReason":"stop"} 
  2024-08-28 15:44:49 [vscodeShowCompletion] [{"insertText":"            content: err ?.message || JSON.stringify(err),","range":[{"line":52,"character":0},{"line":52,"character":26}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"e9bb7039-dd2e-4ebb-bc20-92f0e9d71833","insertText":"            content: err ?.message || JSON.stringify(err),","range":{"start":{"line":52,"character":0},"end":{"line":52,"character":26}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"91e7399baf929cd1","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"false","promptChoices":"{\"used\":{\"BeforeCursor\":413,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":53,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"24fdc861-37e5-4233-975f-8c152c7577a6","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-ae3e82d33a894c2b892579c9e35ced0b","created":"1724831093","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1447,"promptSuffixCharLen":222,"promptEndPos":1426,"documentLength":1642,"delayMs":0,"promptComputeTimeMs":4,"contextualFilterScore":0.6511538398190969,"timeSinceIssuedMs":10,"current_time":1724831089,"numTokens":10,"compCharLen":33,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831089410,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"?.message || JSON.stringify(err),","position":{"line":52,"character":25},"offset":1426,"resultType":0}]}}] 
  2024-08-28 15:44:50 [triggerCompletion] {"requestId":"aba99b6fa9747a25","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题\n            content: err","suffix":"err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":419,"suffix_tokens":52}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" .message,","finishReason":"stop"}}} 
  2024-08-28 15:44:50 [showCompletion] {"requestId":"aba99b6fa9747a25","model":"codeqwenModel","text":" .message,","finishReason":"stop"} 
  2024-08-28 15:44:50 [vscodeShowCompletion] [{"insertText":"            content: err .message,","range":[{"line":52,"character":0},{"line":52,"character":25}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"49c80a7a-ccbe-4629-b6f0-793d4bd02214","insertText":"            content: err .message,","range":{"start":{"line":52,"character":0},"end":{"line":52,"character":25}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"aba99b6fa9747a25","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"false","promptChoices":"{\"used\":{\"BeforeCursor\":412,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":53,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"be3209dc-77d6-4c6f-a953-79a2215e447d","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-3bdea97aa8ae46d091318975ee71af6b","created":"1724831093","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1446,"promptSuffixCharLen":222,"promptEndPos":1425,"documentLength":1641,"delayMs":0,"promptComputeTimeMs":6,"contextualFilterScore":0.5590958078356248,"timeSinceIssuedMs":10,"current_time":1724831090,"numTokens":3,"compCharLen":10,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831090102,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" .message,","position":{"line":52,"character":24},"offset":1425,"resultType":0}]}}] 
  2024-08-28 15:45:41 [triggerCompletion] {"requestId":"18f35c5ea234e747","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题,","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":415,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 暂时先不处理","finishReason":"stop"}}} 
  2024-08-28 15:45:41 [showCompletion] {"requestId":"18f35c5ea234e747","model":"codeqwenModel","text":" 暂时先不处理","finishReason":"stop"} 
  2024-08-28 15:45:41 [vscodeShowCompletion] [{"insertText":"            // TODO 捕捉会有问题, 暂时先不处理","range":[{"line":51,"character":0},{"line":51,"character":27}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"cec26095-3936-4691-9991-1128c8c888a7","insertText":"            // TODO 捕捉会有问题, 暂时先不处理","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":27}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"18f35c5ea234e747","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":408,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"679960f0-091e-470a-a38c-32108bdc2241","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-5de9f1e5e9a048fcbf70d9072e8be87a","created":"1724831144","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1422,"promptSuffixCharLen":248,"promptEndPos":1401,"documentLength":1662,"delayMs":0,"promptComputeTimeMs":4,"contextualFilterScore":0.5780822767753875,"timeSinceIssuedMs":7,"current_time":1724831140,"numTokens":5,"compCharLen":7,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831140941,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" 暂时先不处理","position":{"line":51,"character":27},"offset":1401,"resultType":0}]}}] 
  2024-08-28 15:45:42 [triggerCompletion] {"requestId":"4de4704977f169f3","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题,zuo","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":416,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 15:45:42 [vscodeShowCompletion] [{"insertText":"            // TODO 捕捉会有问题, 暂时先不处理","range":[{"line":51,"character":0},{"line":51,"character":27}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"3b622919-3960-45e6-ac8a-b6a449c25c27","insertText":"            // TODO 捕捉会有问题, 暂时先不处理","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":27}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"18f35c5ea234e747","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":408,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"679960f0-091e-470a-a38c-32108bdc2241","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-5de9f1e5e9a048fcbf70d9072e8be87a","created":"1724831144","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1422,"promptSuffixCharLen":248,"promptEndPos":1401,"documentLength":1662,"delayMs":0,"promptComputeTimeMs":4,"contextualFilterScore":0.5780822767753875,"timeSinceIssuedMs":7,"current_time":1724831140,"numTokens":5,"compCharLen":7,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831140941,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" 暂时先不处理","position":{"line":51,"character":27},"offset":1401,"resultType":2}]}}] 
  2024-08-28 15:45:43 [vscodeShowCompletion] [{"insertText":"            // TODO 捕捉会有问题, 暂时先不处理","range":[{"line":51,"character":0},{"line":51,"character":28}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"c3bddae9-97f1-4081-8697-de28e26c40da","insertText":"            // TODO 捕捉会有问题, 暂时先不处理","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":28}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\main.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/main.ts","path":"/d:/workspace/prompt-tableheader-front/src/main.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"18f35c5ea234e747","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":408,\"PathMarker\":7},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":52,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"679960f0-091e-470a-a38c-32108bdc2241","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-5de9f1e5e9a048fcbf70d9072e8be87a","created":"1724831144","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":1422,"promptSuffixCharLen":248,"promptEndPos":1401,"documentLength":1662,"delayMs":0,"promptComputeTimeMs":4,"contextualFilterScore":0.5780822767753875,"timeSinceIssuedMs":7,"current_time":1724831140,"numTokens":5,"compCharLen":6,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831140941,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"暂时先不处理","position":{"line":51,"character":28},"offset":1402,"resultType":2}]}}] 
  2024-08-28 15:45:43 [triggerCompletion] {"requestId":"aa1a6beb79b298b8","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题, z","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":416,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 15:45:44 [showCompletion] {"requestId":"9f554b95d156fc80","model":"codeqwenModel","text":" i-ui 错误信息无法捕捉","finishReason":"stop"} 
  2024-08-28 15:45:44 [triggerCompletion] {"requestId":"9f554b95d156fc80","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题, zu","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":416,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" i-ui 错误信息无法捕捉","finishReason":"stop"}}} 
  2024-08-28 15:45:44 [triggerCompletion] {"requestId":"4c6fcb877f1cdea9","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题, zuo","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":417,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 15:45:44 [triggerCompletion] {"requestId":"d0456a1529cb20bb","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题, 做","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":418,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 兼容","finishReason":"stop"}}} 
  2024-08-28 15:45:44 [showCompletion] {"requestId":"d0456a1529cb20bb","model":"codeqwenModel","text":" 兼容","finishReason":"stop"} 
  2024-08-28 15:45:45 [triggerCompletion] {"requestId":"574894c4c1c8c92e","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题, 做lei'xing","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":421,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 15:45:46 [triggerCompletion] {"requestId":"73254b4f4ccdb8fa","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题, 做类型判断","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":421,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"","finishReason":"stop"}}} 
  2024-08-28 15:45:46 [triggerCompletion] {"requestId":"ad6380607f827105","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题,zu","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":416,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"i-ui-vue-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-","finishReason":"length"}}} 
  2024-08-28 15:45:46 [showCompletion] {"requestId":"ad6380607f827105","model":"codeqwenModel","text":"i-ui-vue-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-handler-error-","finishReason":"length"} 
  2024-08-28 15:45:47 [triggerCompletion] {"requestId":"de949065cd3f8cbd","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题, 做类型判断x","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":422,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 15:45:48 [triggerCompletion] {"requestId":"e8a21e8028025093","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题, 做类型判断","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":421,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"","finishReason":"stop"}}} 
  2024-08-28 15:45:48 [triggerCompletion] {"requestId":"d66b0e48636c70a8","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题, 做类型判断z","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":422,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 15:45:49 [triggerCompletion] {"requestId":"dc1a56df1c5cb951","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题, 做类型判断zuo","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":423,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"","finishReason":"stop"}}} 
  2024-08-28 15:45:50 [triggerCompletion] {"requestId":"f2a438d91aca2231","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题, 做类型判断做相应","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":425,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"处理","finishReason":"stop"}}} 
  2024-08-28 15:45:50 [showCompletion] {"requestId":"f2a438d91aca2231","model":"codeqwenModel","text":"处理","finishReason":"stop"} 
  2024-08-28 15:45:51 [triggerCompletion] {"requestId":"86440ff41c8b16bf","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题, 做类型判断做相应chu","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":426,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" nk","finishReason":"stop"}}} 
  2024-08-28 15:45:51 [showCompletion] {"requestId":"86440ff41c8b16bf","model":"codeqwenModel","text":" nk","finishReason":"stop"} 
  2024-08-28 15:45:51 [triggerCompletion] {"requestId":"9256f0bf25e2751a","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题, 做类型判断做相应chu'l","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":427,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"ei","finishReason":"stop"}}} 
  2024-08-28 15:45:51 [showCompletion] {"requestId":"9256f0bf25e2751a","model":"codeqwenModel","text":"ei","finishReason":"stop"} 
  2024-08-28 15:45:51 [triggerCompletion] {"requestId":"bfe3250cc85aa377","request":{"prompt":"// Path: src/main.ts\nimport 'virtual:svg-icons-register';\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport vClickOutside from 'click-outside-vue3';\nimport { initTheme } from '@atom/b2c-pc-standard-tokens';\n\nimport App from './App.vue';\nimport SvgIcon from '@/components/SvgIcon.vue';\nimport router from './router';\nimport { useMainStore } from './stores/main';\nimport { useThemeStore } from './stores/theme';\nimport i18n from './utils/i18n';\n// 初始化皮肤\ninitTheme({ name: 'prompt-tableheader-front' }).then(theme => {\n  const themeType =\n    {\n      tybblack: 'pc-dark',\n      tybwhite: 'pc',\n      tybgray: 'pc-dark',\n    }[theme] || 'pc-dark';\n  document.documentElement.setAttribute('theme-mode', themeType);\n\n  const pinia = createPinia();\n  const app = createApp(App);\n  app.use(pinia);\n  app.use(vClickOutside);\n\n  // 设置皮肤\n  const themeStore = useThemeStore();\n  themeStore.switchTheme(theme);\n\n  // #region 国际化配置\n\n  const store = useMainStore();\n  store.$i18n = i18n;\n\n  app.use(router);\n  app.use(i18n);\n  app.component('svg-icon', SvgIcon);\n  app.mount('#app');\n  // 关闭组件埋点\n  app.provide('taStop', true);\n\n  // 测试环境不开这个全局捕获\n  const DEV = process.env.NODE_ENV === 'development';\n  app.config.errorHandler = !DEV\n    ? (err, instance, info) => {\n        window.ClientMonitor.reportFrameErrors(\n          {\n            category: 'vue',\n            grade: 'Error',\n            // TODO 捕捉会有问题, 做类型判断做相应处理","suffix":"content: JSON.stringify({ err }),\n            level: 3,\n          },\n          {\n            name: `vue内部错误`,\n            message: `errorInfo:${info}`,\n            stack: new Error(info).stack,\n          },\n        );\n      }\n    : () => null;\n});\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":12,"trim_by_indentation":true,"prompt_tokens":426,"suffix_tokens":57}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"","finishReason":"stop"}}} 
  2024-08-28 15:49:33 [triggerCompletion] {"requestId":"f27915927a9b063b","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // ","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1560,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 如果返回false，则不置顶，否则置顶","finishReason":"stop"}}} 
  2024-08-28 15:49:33 [showCompletion] {"requestId":"f27915927a9b063b","model":"codeqwenModel","text":" 如果返回false，则不置顶，否则置顶","finishReason":"stop"} 
  2024-08-28 15:49:33 [vscodeShowCompletion] [{"insertText":"    // 如果返回false，则不置顶，否则置顶","range":[{"line":157,"character":0},{"line":157,"character":7}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"ebaa9c5c-cedf-4150-a2b3-54a8b2707cfe","insertText":"    // 如果返回false，则不置顶，否则置顶","range":{"start":{"line":157,"character":0},"end":{"line":157,"character":7}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\hooks\\useEditScheme.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/hooks/useEditScheme.ts","path":"/d:/workspace/prompt-tableheader-front/src/hooks/useEditScheme.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"f27915927a9b063b","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":1550,\"PathMarker\":10},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":158,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"ac83efa962f58d222bbdf0d1f05ff0ff6cbea8822d91641bac9bccf9f4062bcd\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"13a5c2ad-9088-45c8-82a2-13130aa8279f","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-396c2e06e4d14cf39aa717143be83fe1","created":"1724831379","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":5222,"promptSuffixCharLen":6507,"promptEndPos":5186,"documentLength":11698,"delayMs":0,"promptComputeTimeMs":312,"contextualFilterScore":0.36413091557825383,"timeSinceIssuedMs":325,"current_time":1724831373,"numTokens":12,"compCharLen":20,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831372744,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"如果返回false，则不置顶，否则置顶","position":{"line":157,"character":7},"offset":5186,"resultType":0}]}}] 
  2024-08-28 15:49:36 [triggerCompletion] {"requestId":"4eb7789a8c578b67","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // TODO","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1560,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"  需要兼容老版本，如果返回false，则不置顶","finishReason":"stop"}}} 
  2024-08-28 15:49:36 [showCompletion] {"requestId":"4eb7789a8c578b67","model":"codeqwenModel","text":"  需要兼容老版本，如果返回false，则不置顶","finishReason":"stop"} 
  2024-08-28 15:49:36 [triggerCompletion] {"requestId":"9757ed6325568a62","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // TODO ","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1561,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 兼容老版本，如果返回false，则不置顶","finishReason":"stop"}}} 
  2024-08-28 15:49:36 [showCompletion] {"requestId":"9757ed6325568a62","model":"codeqwenModel","text":" 兼容老版本，如果返回false，则不置顶","finishReason":"stop"} 
  2024-08-28 15:49:36 [vscodeShowCompletion] [{"insertText":"    // TODO 兼容老版本，如果返回false，则不置顶","range":[{"line":157,"character":0},{"line":157,"character":12}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"15e7c6b4-d0fc-47ee-be61-09a416b3028f","insertText":"    // TODO 兼容老版本，如果返回false，则不置顶","range":{"start":{"line":157,"character":0},"end":{"line":157,"character":12}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\hooks\\useEditScheme.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/hooks/useEditScheme.ts","path":"/d:/workspace/prompt-tableheader-front/src/hooks/useEditScheme.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"9757ed6325568a62","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":1551,\"PathMarker\":10},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":158,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"ac83efa962f58d222bbdf0d1f05ff0ff6cbea8822d91641bac9bccf9f4062bcd\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"0138361a-4297-4f49-a0c0-572c8bed1c59","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-cb0fe03ec4a1415c9d3389de742aa052","created":"1724831381","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":5227,"promptSuffixCharLen":6507,"promptEndPos":5191,"documentLength":11703,"delayMs":0,"promptComputeTimeMs":26,"contextualFilterScore":0.6471953898623798,"timeSinceIssuedMs":48,"current_time":1724831375,"numTokens":13,"compCharLen":21,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831375798,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"兼容老版本，如果返回false，则不置顶","position":{"line":157,"character":12},"offset":5191,"resultType":0}]}}] 
  2024-08-28 15:49:36 [triggerCompletion] {"requestId":"143c7190ccfb8d8e","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // TO","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1560,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" DO: 兼容老版本，如果返回false，则不置顶","finishReason":"stop"}}} 
  2024-08-28 15:49:36 [showCompletion] {"requestId":"143c7190ccfb8d8e","model":"codeqwenModel","text":" DO: 兼容老版本，如果返回false，则不置顶","finishReason":"stop"} 
  2024-08-28 15:49:37 [triggerCompletion] {"requestId":"d8cbfe4f6e75ed6b","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // TODO bu","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1561,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ild 2023.05.09 兼容老版本，如果返回false，则不调整顺序","finishReason":"stop"}}} 
  2024-08-28 15:49:37 [showCompletion] {"requestId":"d8cbfe4f6e75ed6b","model":"codeqwenModel","text":" ild 2023.05.09 兼容老版本，如果返回false，则不调整顺序","finishReason":"stop"} 
  2024-08-28 15:49:38 [triggerCompletion] {"requestId":"1e841f54d37b60f7","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // TODO 不要shi","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1563,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" p，因为老版本兼容问题，返回的是false","finishReason":"stop"}}} 
  2024-08-28 15:49:38 [showCompletion] {"requestId":"1e841f54d37b60f7","model":"codeqwenModel","text":" p，因为老版本兼容问题，返回的是false","finishReason":"stop"} 
  2024-08-28 15:49:39 [triggerCompletion] {"requestId":"1abc2321d52c00f0","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // TODO 不要使用","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1563,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" setSchemePosition，因为该方法存在老版本兼容问题，如果不兼容，返回的是false","finishReason":"stop"}}} 
  2024-08-28 15:49:39 [showCompletion] {"requestId":"1abc2321d52c00f0","model":"codeqwenModel","text":" setSchemePosition，因为该方法存在老版本兼容问题，如果不兼容，返回的是false","finishReason":"stop"} 
  2024-08-28 15:49:40 [triggerCompletion] {"requestId":"9f10bebd0d6e5ccb","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // TODO 不要使用","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1563,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" setSchemePosition，因为该方法存在老版本兼容问题，如果不兼容，返回的是false","finishReason":"stop"}}} 
  2024-08-28 15:49:40 [showCompletion] {"requestId":"9f10bebd0d6e5ccb","model":"codeqwenModel","text":" setSchemePosition，因为该方法存在老版本兼容问题，如果不兼容，返回的是false","finishReason":"stop"} 
  2024-08-28 15:49:41 [triggerCompletion] {"requestId":"edc778e4cefc30df","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // TODO 不要使用mo'shu","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1566,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 15:49:41 [triggerCompletion] {"requestId":"d52f6ac6516ddb58","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // TODO 不要使用mo","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1564,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" difySchemeInfo，因为该方法存在老版本兼容问题，如果不兼容，返回的是false","finishReason":"stop"}}} 
  2024-08-28 15:49:41 [showCompletion] {"requestId":"d52f6ac6516ddb58","model":"codeqwenModel","text":" difySchemeInfo，因为该方法存在老版本兼容问题，如果不兼容，返回的是false","finishReason":"stop"} 
  2024-08-28 15:49:42 [triggerCompletion] {"requestId":"7ad91b114ae6b09f","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // TODO 不要使用魔术","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1568,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 值，使用枚举","finishReason":"stop"}}} 
  2024-08-28 15:49:42 [showCompletion] {"requestId":"7ad91b114ae6b09f","model":"codeqwenModel","text":" 值，使用枚举","finishReason":"stop"} 
  2024-08-28 15:49:43 [triggerCompletion] {"requestId":"17e45dd1858f7d59","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // TODO 不要使用魔sh","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1567,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" emaId，因为老版本兼容问题，返回的是false","finishReason":"stop"}}} 
  2024-08-28 15:49:43 [showCompletion] {"requestId":"17e45dd1858f7d59","model":"codeqwenModel","text":" emaId，因为老版本兼容问题，返回的是false","finishReason":"stop"} 
  2024-08-28 15:49:43 [triggerCompletion] {"requestId":"6c0a294ad139a4ac","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // TODO 不要使用魔shu","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1568,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"e方案，使用默认方案","finishReason":"stop"}}} 
  2024-08-28 15:49:43 [showCompletion] {"requestId":"6c0a294ad139a4ac","model":"codeqwenModel","text":"e方案，使用默认方案","finishReason":"stop"} 
  2024-08-28 15:49:43 [triggerCompletion] {"requestId":"1dba07da70bbb555","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // TODO 不要使用魔","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1566,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 奇的方案，因为方案是保存在客户端的，所以需要先保存，再调整顺序","finishReason":"stop"}}} 
  2024-08-28 15:49:43 [showCompletion] {"requestId":"1dba07da70bbb555","model":"codeqwenModel","text":" 奇的方案，因为方案是保存在客户端的，所以需要先保存，再调整顺序","finishReason":"stop"} 
  2024-08-28 15:49:44 [triggerCompletion] {"requestId":"e8e884ed571890ac","request":{"prompt":"// Path: src/hooks/useEditScheme.ts\nimport { Message } from '@thsc-pcui/thsc-design-vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm, warningModalCofirm } from '@/components/common/modal';\nimport { handleDealHeaders, handleResDetailHeaders } from '@/utils/header';\nimport { MAX_SCHEME_COUNT } from '@/utils/const';\nimport { handleError } from '@/utils/handleError';\nimport useCommonStoreState from '@/hooks/useCommonStoreState';\nimport { type SchemeItem, SchemeSourceType } from '@/types/shcemeItem.d';\nimport type { BusinessHeaderItem } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/common/request.d';\nimport { sendTaLog } from '@platform';\nimport { getQuery } from '@/utils';\n\n/**\n * 用于处理对方案的操作整体封装\n * @returns {Object} 包含方案操作方法的对象\n */\nconst useEditTabItem = () => {\n  const { i18n } = useCommonStoreState();\n  const slider = useSlideBarStore();\n  const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 新建方案\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleCreateNewScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      if (handleCheckSchemeMaxLimit()) {\n        // 新建只需要传一个方案名称，其他参数都是默认值\n        newSchemeId = await createScheme(schemeName);\n        Message.success(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_success'));\n        sendTaLog('createNewScheme');\n      }\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新建方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 下载方案\n   * @param {string} schemeId - 方案名称\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function handleDownloadScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list: BusinessHeaderItem[],\n    sourceId: string,\n    sourceType: SchemeSourceType,\n  ): Promise<string> {\n    let newSchemeId = '';\n    try {\n      newSchemeId = await createScheme(schemeName, list, sourceId, sourceType);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_success'),\n      );\n      sendTaLog('downloadScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_install_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '下载方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n\n    return newSchemeId;\n  }\n\n  /**\n   * 复制方案的操作。\n   *\n   * @param {SchemeItem} scheme - 要复制的方案。\n   * @returns {Promise<string>} - 复制过程完成时的方案id，如果取消则返回空字符串\n   * @throws {Error} - 复制过程中发生错误时抛出异常。\n   */\n  async function handleCopyScheme(scheme: SchemeItem): Promise<string> {\n    let schemeId = '';\n    if (handleCheckSchemeMaxLimit()) {\n      try {\n        const { schemeName, list, sourceId, sourceType } = scheme;\n        schemeId = await createScheme(schemeName, list, sourceId, sourceType);\n        Message.success(\n          i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_success'),\n        );\n        sendTaLog('copyScheme');\n      } catch (error) {\n        Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_copy_error1'));\n        handleError('js', {\n          ...(error as ErrorData),\n          name: '侧边栏复制方案方法错误！',\n          level: 1,\n          params: { error },\n        });\n      }\n    }\n    return schemeId;\n  }\n\n  /**\n   * 新建流程，新建操作、下载操作均需使用\n   * @param {string} schemeName - 方案名称，默认为 '新建表头方案'\n   * @param {BusinessHeaderItem[]} [list] - 业务头部列表 不传入则从客户端接口获取默认方案\n   * @param {string} [sourceId] - 方案来源ID，默认为 -1，表示从本地新建\n   * @param {SchemeSourceType} [sourceType] - 方案来源类型，默认为 LOCAL\n   *\n   * @returns {string} schemeId - 新建方案的ID\n   */\n  async function createScheme(\n    schemeName = i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_defaultname'),\n    list?: BusinessHeaderItem[],\n    sourceId = '-1',\n    sourceType = SchemeSourceType.LOCAL,\n  ): Promise<string> {\n    // 通过检查方案名，确定该方案是否已经存在\n    schemeName = slider.getUnRepeatName(schemeName);\n    // list 是一个可选参数，如果不传，说明使用默认方案，否则使用传入的方案\n    if (!list) {\n      const clientDefaultList = await clientApi.getDefaultTableHeaderItems({\n        windowId,\n        tableId,\n      });\n      list = clientDefaultList.map(item => handleDealHeaders(item));\n    }\n    // 先保存方案，此处不传 schemeId，因为是新建方案\n    const { schemeId } = await clientApi.saveScheme({\n      schemeId: '',\n      windowId,\n      tableId,\n      schemeName,\n      list,\n      sourceType,\n      sourceId,\n    });\n    // 调整顺序，将新建的方案置顶，因为该方法存在老版本兼容问题，如果不兼容，返回的是false\n    // TODO 不要使用魔数","suffix":"const setTopStatus = await clientApi.setSchemePosition({\n      windowId,\n      tableId,\n      position: 0,\n      schemeId,\n    });\n    // 将新建的方案添加到侧边栏\n    slider.addSchemeItem(\n      {\n        schemeId,\n        schemeName,\n        isCurrent: 0,\n        list,\n        sourceType,\n        sourceId,\n      },\n      setTopStatus,\n    );\n    return schemeId;\n  }\n\n  /**\n   * 删除方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleDeleteScheme(schemeId: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_title'),\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_deletewindow_content'),\n      });\n      if (!isOk) {\n        return;\n      }\n      await clientApi.deleteScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.deleteSchemeItem(schemeId);\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_delete_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 应用方案\n   * @param {string} schemeId - 方案ID\n   * @returns {Promise<void>}\n   */\n  async function handleApplyScheme(schemeId: string) {\n    try {\n      await clientApi.useCurrentScheme({\n        schemeId,\n        windowId,\n        tableId,\n      });\n      slider.setSchemeItemUsed(schemeId);\n      Message.success({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip1'),\n      });\n      sendTaLog('applyScheme');\n    } catch (error) {\n      Message.error({\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_cahnge_tip2'),\n      });\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '应用方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 重命名方案\n   * @param {string} schemeId - 方案ID\n   * @param {string} schemeName - 方案名称\n   * @returns {Promise<void>}\n   */\n  async function handleRenameScheme(schemeId: string, schemeName: string) {\n    try {\n      const { name, isOk } = await renameModalConfirm({\n        name: schemeName,\n        type: RenameModalType.RENAMESCHEME,\n      });\n      // 取消了重命名\n      if (!isOk) {\n        return;\n      }\n      const params = {\n        schemeId,\n        newname: name,\n        windowId,\n        tableId,\n      };\n      await clientApi.modifySchemeInfo(params);\n      slider.updateSchemeItemName(schemeId, name);\n      sendTaLog('renameScheme');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案重命名方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 设置新方案内容\n   * @param {SchemeItem} scheme - 方案\n   * @returns {Promise<void>}\n   */\n  async function handleUpdateScheme(scheme: SchemeItem) {\n    try {\n      const { schemeId, schemeName, sourceType, sourceId, list } = scheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        sourceType,\n        schemeName,\n        sourceId,\n        list,\n      });\n      slider.updateScheme(schemeId, list, schemeName);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '更新方案方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 恢复默认方案内容\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleResetDefaultScheme(scheme: SchemeItem) {\n    try {\n      const { sourceType, sourceId } = scheme;\n      // 根据sourceType判断是本地方案还是广场方案\n      switch (sourceType) {\n        // 本地方案\n        case SchemeSourceType.LOCAL:\n          scheme.list = await getLocalDefaultScheme();\n          break;\n        // 广场下载方案\n        case SchemeSourceType.SQUARE:\n          scheme.list = await getOnlineSchemeList(sourceId);\n          break;\n        default:\n          scheme.list = await getLocalDefaultScheme();\n      }\n      await handleUpdateScheme(scheme);\n      Message.success(\n        i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_default_success'),\n      );\n      sendTaLog('resetDefaultScheme');\n    } catch (error) {\n      Message.error(i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_reset_error1'));\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '方案恢复默认方法错误！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  /**\n   * 获取本地默认方案-通过客户端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 本地默认方案\n   */\n  async function getLocalDefaultScheme(): Promise<BusinessHeaderItem[]> {\n    const list = await clientApi.getDefaultTableHeaderItems({\n      windowId,\n      tableId,\n    });\n    return list.map(item => handleDealHeaders(item));\n  }\n\n  /**\n   * 获取线上方案的源数据-通过后端方法获取默认配置\n   * @returns {Promise<BusinessHeaderItem[]>} 线上方案数据\n   */\n  async function getOnlineSchemeList(id: string): Promise<BusinessHeaderItem[]> {\n    const { detail } = await requestApi.getDetial({ id });\n    return detail.header_list.map(item => handleResDetailHeaders(item));\n  }\n\n  /**\n   * 检查是否当前的方案已经到达最大的限制\n   *\n   * @returns {boolean} 是否可以继续添加方案\n   */\n  function handleCheckSchemeMaxLimit(): boolean {\n    if (slider.schemeList.length >= MAX_SCHEME_COUNT) {\n      Message.error({\n        id: 'checkSchemeMaxLimit',\n        content: i18n.value.t('AinvestH5_customTableHeader_filter_window_plan_new_error2', {\n          max: MAX_SCHEME_COUNT,\n        }),\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * 删除我的方案详情\n   * @param {SchemeItem} scheme - 方案\n   */\n  async function handleDeleteMySchemeDetailItem(id: string) {\n    try {\n      const isOk = await warningModalCofirm({\n        title: '是否删除发布方案？',\n        content: '仅删除表头广场上的方案，不删除本地方案，删除后无法恢复，请确认？',\n      });\n      if (!isOk) {\n        return;\n      }\n      await requestApi.deleteRelease({ id });\n      Message.success('删除成功！');\n      sendTaLog('myReleaseDeleteScheme');\n    } catch (error) {\n      Message.error('删除方案详情失败！');\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '删除方案详情失败！！',\n        level: 1,\n        params: { error },\n      });\n    }\n  }\n\n  return {\n    handleCreateNewScheme,\n    handleDeleteScheme,\n    handleApplyScheme,\n    handleRenameScheme,\n    handleCopyScheme,\n    handleResetDefaultScheme,\n    handleCheckSchemeMaxLimit,\n    handleDownloadScheme,\n    handleDeleteMySchemeDetailItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":4,"trim_by_indentation":true,"prompt_tokens":1567,"suffix_tokens":1774}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 15:55:42 [triggerCompletion] {"requestId":"70b6738d817d71c5","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":197,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"         ","finishReason":"stop"}}} 
  2024-08-28 15:55:44 [showCompletion] {"requestId":"3d8a50b4a4458136","model":"codeqwenModel","text":" ODO: 获取windowId和tableId","finishReason":"stop"} 
  2024-08-28 15:55:44 [triggerCompletion] {"requestId":"3d8a50b4a4458136","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // T","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":199,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ODO: 获取windowId和tableId","finishReason":"stop"}}} 
  2024-08-28 15:55:44 [triggerCompletion] {"requestId":"1e89bcb6117a80bc","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TO","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":199,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" DO: 获取windowId和tableId","finishReason":"stop"}}} 
  2024-08-28 15:55:44 [showCompletion] {"requestId":"1e89bcb6117a80bc","model":"codeqwenModel","text":" DO: 获取windowId和tableId","finishReason":"stop"} 
  2024-08-28 15:55:44 [triggerCompletion] {"requestId":"74d455e0d358165b","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TOD","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":199,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" O: 获取windowId和tableId","finishReason":"stop"}}} 
  2024-08-28 15:55:44 [showCompletion] {"requestId":"74d455e0d358165b","model":"codeqwenModel","text":" O: 获取windowId和tableId","finishReason":"stop"} 
  2024-08-28 15:55:46 [showCompletion] {"requestId":"bd3e7c7f149ad49d","model":"codeqwenModel","text":" Query 函数","finishReason":"stop"} 
  2024-08-28 15:55:46 [triggerCompletion] {"requestId":"bd3e7c7f149ad49d","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TODO get","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":200,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" Query 函数","finishReason":"stop"}}} 
  2024-08-28 15:55:46 [triggerCompletion] {"requestId":"427126354be281c9","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TODO getQ","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":201,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" uery 函数","finishReason":"stop"}}} 
  2024-08-28 15:55:46 [showCompletion] {"requestId":"427126354be281c9","model":"codeqwenModel","text":" uery 函数","finishReason":"stop"} 
  2024-08-28 15:55:46 [vscodeShowCompletion] [{"insertText":"  // TODO getQ uery 函数","range":[{"line":16,"character":0},{"line":16,"character":14}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"a4fceaf7-d054-4cad-bbc3-fc854fd081f3","insertText":"  // TODO getQ uery 函数","range":{"start":{"line":16,"character":0},"end":{"line":16,"character":14}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\hooks\\useEditTabItem.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/hooks/useEditTabItem.ts","path":"/d:/workspace/prompt-tableheader-front/src/hooks/useEditTabItem.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"427126354be281c9","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":190,\"PathMarker\":11},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":17,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"d24f1bc17111ea7bb5ec5a776597a95f003b0ad4867b064fd95438dfd8edee8a\",\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\",\"62a49391817aab399dc4805487405c963a53ba7cfd3233d04fb2a729f9de04da\",\"ac83efa962f58d222bbdf0d1f05ff0ff6cbea8822d91641bac9bccf9f4062bcd\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"a17b40d5-747e-44d0-b140-f95b1ae6dee8","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-1882b3ce02bd4b999b97f02f27f5bc6e","created":"1724831755","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":795,"promptSuffixCharLen":3693,"promptEndPos":758,"documentLength":4454,"delayMs":0,"promptComputeTimeMs":39,"contextualFilterScore":0.657484784469275,"timeSinceIssuedMs":67,"current_time":1724831746,"numTokens":4,"compCharLen":8,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724831745938,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" uery 函数","position":{"line":16,"character":14},"offset":758,"resultType":0}]}}] 
  2024-08-28 15:55:46 [triggerCompletion] {"requestId":"8ddab6fd3acb6665","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TODO g","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":200,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" etQuery 函数用于获取 URL 中的查询参数","finishReason":"stop"}}} 
  2024-08-28 15:55:46 [showCompletion] {"requestId":"8ddab6fd3acb6665","model":"codeqwenModel","text":" etQuery 函数用于获取 URL 中的查询参数","finishReason":"stop"} 
  2024-08-28 15:55:46 [triggerCompletion] {"requestId":"8bdfd558eb7a5c76","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TODO","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":199,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ：需要优化，将windowId和tableId从这里传到store中，然后从store中获取","finishReason":"stop"}}} 
  2024-08-28 15:55:46 [showCompletion] {"requestId":"8bdfd558eb7a5c76","model":"codeqwenModel","text":" ：需要优化，将windowId和tableId从这里传到store中，然后从store中获取","finishReason":"stop"} 
  2024-08-28 15:55:46 [triggerCompletion] {"requestId":"e1158ac4a18bcbe9","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TODO ","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":200,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 优化：将schemeId、windowId、tableId从useSlideBarStore中移除，使用getQuery获取","finishReason":"stop"}}} 
  2024-08-28 15:55:46 [showCompletion] {"requestId":"e1158ac4a18bcbe9","model":"codeqwenModel","text":" 优化：将schemeId、windowId、tableId从useSlideBarStore中移除，使用getQuery获取","finishReason":"stop"} 
  2024-08-28 15:55:47 [triggerCompletion] {"requestId":"1f82a5d3245de1b9","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TODO getQuer","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":202,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" y 函数","finishReason":"stop"}}} 
  2024-08-28 15:55:47 [showCompletion] {"requestId":"1f82a5d3245de1b9","model":"codeqwenModel","text":" y 函数","finishReason":"stop"} 
  2024-08-28 15:55:48 [triggerCompletion] {"requestId":"2cecb1a84f64e4b6","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TODO getQuery ","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":202,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 获取windowId和tableId","finishReason":"stop"}}} 
  2024-08-28 15:55:48 [showCompletion] {"requestId":"2cecb1a84f64e4b6","model":"codeqwenModel","text":" 获取windowId和tableId","finishReason":"stop"} 
  2024-08-28 15:55:48 [triggerCompletion] {"requestId":"488ab7d6ce84eca7","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TODO getQuery","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":201,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 函数的返回值类型","finishReason":"stop"}}} 
  2024-08-28 15:55:48 [showCompletion] {"requestId":"488ab7d6ce84eca7","model":"codeqwenModel","text":" 函数的返回值类型","finishReason":"stop"} 
  2024-08-28 15:55:48 [showCompletion] {"requestId":"1908db2104ae84ee","model":"codeqwenModel","text":" ssing","finishReason":"stop"} 
  2024-08-28 15:55:48 [triggerCompletion] {"requestId":"1908db2104ae84ee","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TODO getQuery mi","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":202,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ssing","finishReason":"stop"}}} 
  2024-08-28 15:55:48 [triggerCompletion] {"requestId":"265b4723c9389f7a","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TODO getQuery min","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":202,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 15:55:49 [triggerCompletion] {"requestId":"7fc6686567d28acf","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TODO getQuery ming'ming","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":204,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 15:55:50 [triggerCompletion] {"requestId":"4e26bbea186633c2","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TODO getQuery 命名","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":205,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 冲突，需要修改","finishReason":"stop"}}} 
  2024-08-28 15:55:50 [showCompletion] {"requestId":"4e26bbea186633c2","model":"codeqwenModel","text":" 冲突，需要修改","finishReason":"stop"} 
  2024-08-28 15:55:50 [triggerCompletion] {"requestId":"50c14b6a80a7374d","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TODO getQuery 命名you","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":206,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 15:55:51 [triggerCompletion] {"requestId":"33a79269bbde28d1","request":{"prompt":"// Path: src/hooks/useEditTabItem.ts\nimport { toRaw } from 'vue';\nimport { useSlideBarStore } from '@/stores/slideBar';\nimport clientApi from '@/api/client.api';\nimport requestApi from '@/api/request.api';\nimport { renameModalConfirm } from '@/components/common/modal';\nimport { handleError } from '@/utils/handleError';\nimport { sendTaLog } from '@platform';\nimport { type BusinessHeaderItem, HeaderType, type BusinessHeader } from '@/types/headerItem.d';\nimport { RenameModalType } from '@/types/components/renameModal.d';\nimport type { ErrorData } from '@/types/request';\nimport { getQuery } from '@/utils/tools';\n\n// 用于处理对表头的处理整体封装\nconst useEditTabItem = () => {\n  const slider = useSlideBarStore();\n  const { addHeaderItem, isUsingSchemeListFull, deleteHeaderItem } = slider;\n  // TODO getQuery 命名优化","suffix":"const windowId = getQuery('windowId');\n  const tableId = getQuery('tableId');\n\n  /**\n   * 处理添加表头项的逻辑\n   * @param {BusinessHeaderItem} header - 需要添加的表头项信息\n   * @param {boolean} [rename=true] - 是否需要重命名，在批量添加时不需要问\n   */\n  async function handleAddItem(header: BusinessHeaderItem, rename = true) {\n    try {\n      // 如果表头列表已满，不允许添加\n      if (isUsingSchemeListFull()) {\n        return;\n      }\n      // 如果是IWC表头，则需要弹出重命名框\n      if ([HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType) && rename) {\n        const { name, isOk } = await renameModalConfirm({\n          name: header.display_name,\n          type: RenameModalType.RENAMETABLEITEM,\n        });\n        // 取消了重命名\n        if (!isOk) {\n          return;\n        }\n        header.display_name = name;\n      }\n\n      addHeaderItem(header);\n\n      // 保存方案\n      const { schemeId, schemeName, list, sourceType, sourceId } = slider.usingScheme;\n      await clientApi.saveScheme({\n        schemeId,\n        windowId,\n        tableId,\n        schemeName,\n        list: toRaw(list),\n        sourceType,\n        sourceId,\n      });\n\n      // 如果 valid为0，需要调用一下保存接口\n      if (header.valid === 0 && header.fieldType === HeaderType.IWCHeader) {\n        const { name, domain = '', query_index = 0, model_condition = '', query = '' } = header;\n        await requestApi.saveIndicator({\n          index_id: name,\n          domain,\n          query_index,\n          model_condition,\n          query,\n        });\n      }\n      sendTaLog('addTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '新增表头项功能出错！',\n        level: 1,\n        params: {\n          windowId,\n          tableId,\n          header,\n          scheme: slider.usingScheme,\n        },\n        msg: '新增表头项功能出错！',\n      });\n    }\n  }\n\n  /**\n   * 处理删除表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleDeleteItem(header: BusinessHeader) {\n    if (!slider.usingScheme.schemeId) {\n      return;\n    }\n    const { schemeId, schemeName, sourceType, sourceId } = slider.usingScheme;\n    const list = toRaw(deleteHeaderItem(slider.usingScheme.schemeId, header));\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n      sendTaLog('deleteTableItem');\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n  }\n\n  /**\n   * 处理重命名表头项的逻辑\n   * @param {BusinessHeader} header - 需要删除的表头项信息\n   */\n  async function handleRenameItem(header: BusinessHeader) {\n    if (![HeaderType.OldIWCHeader, HeaderType.IWCHeader].includes(header.fieldType)) {\n      return;\n    }\n    const { name, isOk } = await renameModalConfirm({\n      name: header.display_name,\n      type: RenameModalType.RENAMETABLEITEM,\n    });\n    if (!isOk) {\n      return;\n    }\n    header.display_name = name;\n    const { schemeId, schemeName, sourceType, sourceId, list } = slider.usingScheme;\n    const params = {\n      schemeId, // 方案请求\n      list, // 方案列表\n      schemeName,\n      sourceType,\n      sourceId,\n      windowId,\n      tableId,\n    };\n    try {\n      await clientApi.saveScheme(params);\n    } catch (error) {\n      handleError('js', {\n        ...(error as ErrorData),\n        name: '根据弹窗触发保存方法错误！',\n        level: 1,\n        params,\n        msg: '根据弹窗触发保存方法错误！',\n      });\n    }\n\n    sendTaLog('renameTableItem');\n  }\n\n  return {\n    handleAddItem,\n    handleDeleteItem,\n    handleRenameItem,\n  };\n};\n\nexport default useEditTabItem;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":2,"trim_by_indentation":true,"prompt_tokens":207,"suffix_tokens":1078}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"","finishReason":"stop"}}} 
  2024-08-28 16:02:26 [showCompletion] {"requestId":"837a5efbb597f3a1","model":"codeqwenModel","text":" his file is a part of inquirk-server.","finishReason":"stop"} 
  2024-08-28 16:02:26 [triggerCompletion] {"requestId":"837a5efbb597f3a1","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// T","suffix":"/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\nexport interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":12,"suffix_tokens":966}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" his file is a part of inquirk-server.","finishReason":"stop"}}} 
  2024-08-28 16:02:26 [triggerCompletion] {"requestId":"0d7c9aa4fa16ee35","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TO","suffix":"/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\nexport interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":12,"suffix_tokens":966}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" DO: 2023/08/01 17:05:05 添加注释","finishReason":"stop"}}} 
  2024-08-28 16:02:26 [showCompletion] {"requestId":"0d7c9aa4fa16ee35","model":"codeqwenModel","text":" DO: 2023/08/01 17:05:05 添加注释","finishReason":"stop"} 
  2024-08-28 16:02:27 [triggerCompletion] {"requestId":"d08c71ba15af45d7","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO","suffix":"/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\nexport interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":12,"suffix_tokens":966}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" : 2023/08/01 17:05:03","finishReason":"stop"}}} 
  2024-08-28 16:02:27 [showCompletion] {"requestId":"d08c71ba15af45d7","model":"codeqwenModel","text":" : 2023/08/01 17:05:03","finishReason":"stop"} 
  2024-08-28 16:02:27 [triggerCompletion] {"requestId":"a25adc6330598af5","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO ","suffix":"/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\nexport interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":13,"suffix_tokens":966}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 2023/07/03 17:05:03","finishReason":"stop"}}} 
  2024-08-28 16:02:27 [vscodeShowCompletion] [{"insertText":"// TODO 2023/07/03 17:05:03","range":[{"line":0,"character":0},{"line":0,"character":8}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"ad1bdfec-fe0b-4d93-a78e-d9883ee18837","insertText":"// TODO 2023/07/03 17:05:03","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":8}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\types\\headerItem.d.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/types/headerItem.d.ts","path":"/d:/workspace/prompt-tableheader-front/src/types/headerItem.d.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"a25adc6330598af5","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":3,\"PathMarker\":10},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":1,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"d87e398f297d0a259f87b3c95d02f8a395d441c6abefb509ee5ae5e24b03b550\",\"e3b885d0f215f57eb637f06215e172fb8e0508e23587ddd69df4898ebbb1a96f\",\"963c07249ce5b26959adb9bedb1a2c8a9d4c49213965f075f2470b3820156ba1\",\"d24f1bc17111ea7bb5ec5a776597a95f003b0ad4867b064fd95438dfd8edee8a\",\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\",\"62a49391817aab399dc4805487405c963a53ba7cfd3233d04fb2a729f9de04da\",\"ac83efa962f58d222bbdf0d1f05ff0ff6cbea8822d91641bac9bccf9f4062bcd\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"17ce8f56-9c26-4b71-8759-ca4f3cea9ccf","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-223edfd870c944f6beeb17d7c4ec09b4","created":"1724832150","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":43,"promptSuffixCharLen":2824,"promptEndPos":8,"documentLength":2833,"delayMs":0,"promptComputeTimeMs":7,"contextualFilterScore":0.5028983299463139,"timeSinceIssuedMs":11,"current_time":1724832146,"numTokens":17,"compCharLen":20,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724832146897,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"2023/07/03 17:05:03","position":{"line":0,"character":8},"offset":8,"resultType":0}]}}] 
  2024-08-28 16:02:27 [showCompletion] {"requestId":"a25adc6330598af5","model":"codeqwenModel","text":" 2023/07/03 17:05:03","finishReason":"stop"} 
  2024-08-28 16:02:29 [showCompletion] {"requestId":"7f69fac20b0226d3","model":"codeqwenModel","text":" xing","finishReason":"stop"} 
  2024-08-28 16:02:29 [triggerCompletion] {"requestId":"7f69fac20b0226d3","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO yi","suffix":"/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\nexport interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":13,"suffix_tokens":966}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" xing","finishReason":"stop"}}} 
  2024-08-28 16:02:29 [triggerCompletion] {"requestId":"4a11ab54e7d11cae","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO ying","suffix":"/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\nexport interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":14,"suffix_tokens":966}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:02:30 [triggerCompletion] {"requestId":"24a3ba1b1ccd9d9c","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO 应该fang","suffix":"/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\nexport interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":16,"suffix_tokens":966}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 改为接口，而不是枚举，因为枚举不能动态添加属性","finishReason":"stop"}}} 
  2024-08-28 16:02:30 [showCompletion] {"requestId":"24a3ba1b1ccd9d9c","model":"codeqwenModel","text":" 改为接口，而不是枚举，因为枚举不能动态添加属性","finishReason":"stop"} 
  2024-08-28 16:02:30 [triggerCompletion] {"requestId":"84664b406a8cfef0","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO 应该fang'z","suffix":"/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\nexport interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":18,"suffix_tokens":966}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" hou 2023/03/01","finishReason":"stop"}}} 
  2024-08-28 16:02:30 [showCompletion] {"requestId":"84664b406a8cfef0","model":"codeqwenModel","text":" hou 2023/03/01","finishReason":"stop"} 
  2024-08-28 16:02:31 [triggerCompletion] {"requestId":"dfaedcd357fc617a","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO 应该放在","suffix":"/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\nexport interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":17,"suffix_tokens":966}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" types/index.d.ts中，但是由于tsconfig.json中设置了\"baseUrl\": \"./src\"，所以需要这样写","finishReason":"stop"}}} 
  2024-08-28 16:02:31 [showCompletion] {"requestId":"dfaedcd357fc617a","model":"codeqwenModel","text":" types/index.d.ts中，但是由于tsconfig.json中设置了\"baseUrl\": \"./src\"，所以需要这样写","finishReason":"stop"} 
  2024-08-28 16:02:32 [triggerCompletion] {"requestId":"c552ed35e9f9ead4","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO 应该放在常量","suffix":"/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\nexport interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":19,"suffix_tokens":966}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 模块中，但是目前没有找到合适的模块，所以暂时放在这里","finishReason":"stop"}}} 
  2024-08-28 16:02:32 [showCompletion] {"requestId":"c552ed35e9f9ead4","model":"codeqwenModel","text":" 模块中，但是目前没有找到合适的模块，所以暂时放在这里","finishReason":"stop"} 
  2024-08-28 16:02:32 [showCompletion] {"requestId":"041e0f3fba7e5448","model":"codeqwenModel","text":" t-ui/src/constants/index.ts中","finishReason":"stop"} 
  2024-08-28 16:02:32 [triggerCompletion] {"requestId":"041e0f3fba7e5448","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO 应该放在常量wen","suffix":"/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\nexport interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":20,"suffix_tokens":966}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" t-ui/src/constants/index.ts中","finishReason":"stop"}}} 
  2024-08-28 16:02:33 [triggerCompletion] {"requestId":"62d57cb987979b95","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO 应该放在常量文件里","suffix":"/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\nexport interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":21,"suffix_tokens":966}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:03:52 [triggerCompletion] {"requestId":"6fbf67597c2f24ef","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO enum 应该放在常量文件里\n/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\n","suffix":"export interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":760,"suffix_tokens":229}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"","finishReason":"stop"}}} 
  2024-08-28 16:03:53 [triggerCompletion] {"requestId":"4e2bac69d34dbadd","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO enum 应该放在常量文件里\n/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\n// ","suffix":"export interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":762,"suffix_tokens":229}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:03:53 [triggerCompletion] {"requestId":"58705e191b354de4","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO enum 应该放在常量文件里\n/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\n// T","suffix":"export interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":762,"suffix_tokens":229}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ODO 暂时不考虑业务表头项的排序，后续考虑","finishReason":"stop"}}} 
  2024-08-28 16:03:53 [showCompletion] {"requestId":"58705e191b354de4","model":"codeqwenModel","text":" ODO 暂时不考虑业务表头项的排序，后续考虑","finishReason":"stop"} 
  2024-08-28 16:03:55 [showCompletion] {"requestId":"d269967b8cb99c87","model":"codeqwenModel","text":" 暂时不考虑业务表头项的排序，因为业务表头项的排序是客户端决定的，服务端不关心","finishReason":"stop"} 
  2024-08-28 16:03:55 [triggerCompletion] {"requestId":"d269967b8cb99c87","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO enum 应该放在常量文件里\n/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\n// TODO ","suffix":"export interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":763,"suffix_tokens":229}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 暂时不考虑业务表头项的排序，因为业务表头项的排序是客户端决定的，服务端不关心","finishReason":"stop"}}} 
  2024-08-28 16:03:55 [vscodeShowCompletion] [{"insertText":"// TODO 暂时不考虑业务表头项的排序，因为业务表头项的排序是客户端决定的，服务端不关心","range":[{"line":107,"character":0},{"line":107,"character":8}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"28eb0f81-0755-4086-b94b-a38f0f02db8c","insertText":"// TODO 暂时不考虑业务表头项的排序，因为业务表头项的排序是客户端决定的，服务端不关心","range":{"start":{"line":107,"character":0},"end":{"line":107,"character":8}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\types\\headerItem.d.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/types/headerItem.d.ts","path":"/d:/workspace/prompt-tableheader-front/src/types/headerItem.d.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"d269967b8cb99c87","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":753,\"PathMarker\":10},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":108,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"d87e398f297d0a259f87b3c95d02f8a395d441c6abefb509ee5ae5e24b03b550\",\"e3b885d0f215f57eb637f06215e172fb8e0508e23587ddd69df4898ebbb1a96f\",\"963c07249ce5b26959adb9bedb1a2c8a9d4c49213965f075f2470b3820156ba1\",\"d24f1bc17111ea7bb5ec5a776597a95f003b0ad4867b064fd95438dfd8edee8a\",\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\",\"62a49391817aab399dc4805487405c963a53ba7cfd3233d04fb2a729f9de04da\",\"ac83efa962f58d222bbdf0d1f05ff0ff6cbea8822d91641bac9bccf9f4062bcd\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"012d98aa-6c02-4431-8bcf-812678161476","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-ad4fc0f533dd41aa815c9d136fb04c21","created":"1724832238","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":2233,"promptSuffixCharLen":657,"promptEndPos":2198,"documentLength":2856,"delayMs":0,"promptComputeTimeMs":54,"contextualFilterScore":0.5983030596339858,"timeSinceIssuedMs":59,"current_time":1724832234,"numTokens":26,"compCharLen":39,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724832234236,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"暂时不考虑业务表头项的排序，因为业务表头项的排序是客户端决定的，服务端不关心","position":{"line":107,"character":8},"offset":2198,"resultType":0}]}}] 
  2024-08-28 16:03:56 [triggerCompletion] {"requestId":"734cf86b9f253098","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO enum 应该放在常量文件里\n/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\n// TODO l","suffix":"export interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":763,"suffix_tokens":229}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ocalStorage 存储的表头项","finishReason":"stop"}}} 
  2024-08-28 16:03:56 [showCompletion] {"requestId":"734cf86b9f253098","model":"codeqwenModel","text":" ocalStorage 存储的表头项","finishReason":"stop"} 
  2024-08-28 16:03:56 [vscodeShowCompletion] [{"insertText":"// TODO 暂时不考虑业务表头项的排序，因为业务表头项的排序是客户端决定的，服务端不关心","range":[{"line":107,"character":0},{"line":107,"character":8}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"a6fb0532-27c1-44f3-8692-d716059edfda","insertText":"// TODO 暂时不考虑业务表头项的排序，因为业务表头项的排序是客户端决定的，服务端不关心","range":{"start":{"line":107,"character":0},"end":{"line":107,"character":8}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\types\\headerItem.d.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/types/headerItem.d.ts","path":"/d:/workspace/prompt-tableheader-front/src/types/headerItem.d.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"d269967b8cb99c87","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":753,\"PathMarker\":10},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":108,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"d87e398f297d0a259f87b3c95d02f8a395d441c6abefb509ee5ae5e24b03b550\",\"e3b885d0f215f57eb637f06215e172fb8e0508e23587ddd69df4898ebbb1a96f\",\"963c07249ce5b26959adb9bedb1a2c8a9d4c49213965f075f2470b3820156ba1\",\"d24f1bc17111ea7bb5ec5a776597a95f003b0ad4867b064fd95438dfd8edee8a\",\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\",\"62a49391817aab399dc4805487405c963a53ba7cfd3233d04fb2a729f9de04da\",\"ac83efa962f58d222bbdf0d1f05ff0ff6cbea8822d91641bac9bccf9f4062bcd\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"012d98aa-6c02-4431-8bcf-812678161476","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-ad4fc0f533dd41aa815c9d136fb04c21","created":"1724832238","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":2233,"promptSuffixCharLen":657,"promptEndPos":2198,"documentLength":2856,"delayMs":0,"promptComputeTimeMs":54,"contextualFilterScore":0.5983030596339858,"timeSinceIssuedMs":59,"current_time":1724832234,"numTokens":26,"compCharLen":39,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724832234236,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"暂时不考虑业务表头项的排序，因为业务表头项的排序是客户端决定的，服务端不关心","position":{"line":107,"character":8},"offset":2198,"resultType":2}]}}] 
  2024-08-28 16:03:57 [triggerCompletion] {"requestId":"2ca40b7fa27f10be","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO enum 应该放在常量文件里\n/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\n// TODO l","suffix":"export interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":763,"suffix_tokens":229}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ocalStorage 存储的表头项","finishReason":"stop"}}} 
  2024-08-28 16:03:57 [vscodeShowCompletion] [{"insertText":"// TODO l ocalStorage 存储的表头项","range":[{"line":107,"character":0},{"line":107,"character":9}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"669d9df1-8c80-4378-aa11-b4b8f9050c09","insertText":"// TODO l ocalStorage 存储的表头项","range":{"start":{"line":107,"character":0},"end":{"line":107,"character":9}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\types\\headerItem.d.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/types/headerItem.d.ts","path":"/d:/workspace/prompt-tableheader-front/src/types/headerItem.d.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"2ca40b7fa27f10be","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":753,\"PathMarker\":10},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":108,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"d87e398f297d0a259f87b3c95d02f8a395d441c6abefb509ee5ae5e24b03b550\",\"e3b885d0f215f57eb637f06215e172fb8e0508e23587ddd69df4898ebbb1a96f\",\"963c07249ce5b26959adb9bedb1a2c8a9d4c49213965f075f2470b3820156ba1\",\"d24f1bc17111ea7bb5ec5a776597a95f003b0ad4867b064fd95438dfd8edee8a\",\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\",\"62a49391817aab399dc4805487405c963a53ba7cfd3233d04fb2a729f9de04da\",\"ac83efa962f58d222bbdf0d1f05ff0ff6cbea8822d91641bac9bccf9f4062bcd\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"077ecfd5-84c9-446b-a036-be1d70c23c3d","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-98b4154716f14bf2ac6ecb4e740f415e","created":"1724832241","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":2234,"promptSuffixCharLen":657,"promptEndPos":2199,"documentLength":2857,"delayMs":0,"promptComputeTimeMs":13,"contextualFilterScore":0.701949157014566,"timeSinceIssuedMs":23,"current_time":1724832236,"numTokens":9,"compCharLen":19,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724832236942,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" ocalStorage 存储的表头项","position":{"line":107,"character":9},"offset":2199,"resultType":0}]}}] 
  2024-08-28 16:03:57 [showCompletion] {"requestId":"2ca40b7fa27f10be","model":"codeqwenModel","text":" ocalStorage 存储的表头项","finishReason":"stop"} 
  2024-08-28 16:03:57 [vscodeShowCompletion] [{"insertText":"// TODO 暂时不考虑业务表头项的排序，因为业务表头项的排序是客户端决定的，服务端不关心","range":[{"line":107,"character":0},{"line":107,"character":8}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"cfac707e-9273-45a7-81a7-daf611e92e02","insertText":"// TODO 暂时不考虑业务表头项的排序，因为业务表头项的排序是客户端决定的，服务端不关心","range":{"start":{"line":107,"character":0},"end":{"line":107,"character":8}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\types\\headerItem.d.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/types/headerItem.d.ts","path":"/d:/workspace/prompt-tableheader-front/src/types/headerItem.d.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"d269967b8cb99c87","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"gdid9ckihmv7ojjv9jup3dseuc6k4fay","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":753,\"PathMarker\":10},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":108,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"d87e398f297d0a259f87b3c95d02f8a395d441c6abefb509ee5ae5e24b03b550\",\"e3b885d0f215f57eb637f06215e172fb8e0508e23587ddd69df4898ebbb1a96f\",\"963c07249ce5b26959adb9bedb1a2c8a9d4c49213965f075f2470b3820156ba1\",\"d24f1bc17111ea7bb5ec5a776597a95f003b0ad4867b064fd95438dfd8edee8a\",\"c0536e1ce33807b09ca04c46028dc122c132672ccc20b123860e99e562c3d252\",\"62a49391817aab399dc4805487405c963a53ba7cfd3233d04fb2a729f9de04da\",\"ac83efa962f58d222bbdf0d1f05ff0ff6cbea8822d91641bac9bccf9f4062bcd\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"012d98aa-6c02-4431-8bcf-812678161476","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-ad4fc0f533dd41aa815c9d136fb04c21","created":"1724832238","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":2233,"promptSuffixCharLen":657,"promptEndPos":2198,"documentLength":2856,"delayMs":0,"promptComputeTimeMs":54,"contextualFilterScore":0.5983030596339858,"timeSinceIssuedMs":59,"current_time":1724832234,"numTokens":26,"compCharLen":39,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724832234236,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"暂时不考虑业务表头项的排序，因为业务表头项的排序是客户端决定的，服务端不关心","position":{"line":107,"character":8},"offset":2198,"resultType":1}]}}] 
  2024-08-28 16:04:00 [triggerCompletion] {"requestId":"41ebfeec060ab870","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO enum 应该放在常量文件里\n/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\n// TODO zhu'shi","suffix":"export interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":766,"suffix_tokens":229}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:04:01 [triggerCompletion] {"requestId":"3feeb04417bb5dde","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO enum 应该放在常量文件里\n/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\n// TODO 注释风格","suffix":"export interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":767,"suffix_tokens":229}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:04:02 [triggerCompletion] {"requestId":"ade99588902031cf","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO enum 应该放在常量文件里\n/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\n// TODO 注释风格tong'yi","suffix":"export interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":771,"suffix_tokens":229}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:04:02 [triggerCompletion] {"requestId":"67ec56362249e7a8","request":{"prompt":"// Path: src/types/headerItem.d.ts\n// TODO enum 应该放在常量文件里\n/** 表头类型枚举 */\nexport enum HeaderType {\n  /** 行情常规类型 */\n  NormalHeader = 'hq',\n  /** 扶摇类型 */\n  IWCHeader = 'fuyao',\n  /** 老问财类型 */\n  OldIWCHeader = 'iwc',\n  /** 扶摇dataApi类型 */\n  FyDataApiHeader = 'fy_dataapi',\n}\n\n/** 客户端接口返回的常规表头 */\nexport interface NormalHeader {\n  fieldType: HeaderType.NormalHeader;\n  id: string;\n  name: string;\n  width: number;\n}\n\n/** 客户端接口返回的老问财类型表头 */\nexport interface OldIWCHeader {\n  fieldType: HeaderType.OldIWCHeader;\n  name: string;\n  chunk: string;\n  days: string;\n  display_name: string;\n  id: string;\n  index: number;\n  index_name: string;\n  show_name: string;\n  timestamp: string;\n  width: number;\n}\n\n/** 客户端接口返回的新问财类型表头 */\nexport interface IWCHeader {\n  fieldType: HeaderType.IWCHeader;\n  id: string;\n  index_name: string;\n  show_name: string;\n  data_id: string;\n  days: string;\n  display_name: string;\n  timestamp: string;\n  width: number;\n  model_condition?: string;\n  time_stamp?: string;\n  domain?: string;\n  query_index?: number;\n  query?: string;\n}\n\n/** 客户端接口返回的扶摇类型表头 */\nexport interface FyDataApiHeader {\n  fieldType: HeaderType.FyDataApiHeader;\n  id: string;\n  name: string;\n  width: number;\n  rela_config: {\n    attribute: unknown;\n    display_scheme: string;\n    index_id: string;\n    req_interval_sec: number;\n    time_offset: number;\n    time_type: string;\n  };\n}\n\n/** 客户端接口返回的所有表头类型 */\nexport type HeaderItem = NormalHeader | OldIWCHeader | IWCHeader | FyDataApiHeader;\n\n/** agent返回的常规数据表头 */\nexport interface PromptNormalHeader {\n  id: string;\n  gms_id: string;\n  index_id: string;\n  index_name_en: string;\n  index_name_zh: string;\n  index_type: string;\n  time_stamp: null;\n  domain: null;\n  query_index: null;\n  model_condition: null;\n  query: null;\n}\n\n/** agent返回的问财数据表头 */\nexport interface PromptIWCHeader {\n  id: string;\n  gms_id: null;\n  index_id: string;\n  index_name_en: null;\n  index_name_zh: null;\n  index_type: string;\n  /** 这个是问财表头的标识，标识的是该表头的取数逻辑，仅用于在问财表头，业务中通过这个字段获取 id 映射，后续保存后会通过该逻辑进行取数 */\n  model_condition: string;\n  time_stamp: string;\n  domain: string;\n  query_index: number;\n  query: string;\n}\n/** agent返回的数据表头集合 */\nexport type PromptHeader = PromptNormalHeader | PromptIWCHeader;\n\n/** 业务处理的常用字段 */\n// TODO 注释风格统一","suffix":"export interface BusinessHeader {\n  _id: string; // 业务表头的唯一标识, 用于区分表头项， 不用id是因为id在客户端创建时是个需要传参的标志位\n  name: string; // 原始的名称\n  display_name: string; // 表头显示名称\n  valid: number; // 是否有效，如果为0则说明需要调用接口保存，默认为 1\n  fieldType: HeaderType; // 表头类型\n}\n\n/** 业务处理的常用表头项 */\nexport type BusinessNormalHeader = BusinessHeader & NormalHeader;\nexport type BusinessOldIWCHeader = BusinessHeader & OldIWCHeader;\nexport type BusinessIWCHeader = BusinessHeader & IWCHeader;\nexport type BusinessFyDataApiHeader = BusinessHeader & FyDataApiHeader;\nexport type BusinessHeaderItem =\n  | BusinessNormalHeader\n  | BusinessOldIWCHeader\n  | BusinessIWCHeader\n  | BusinessFyDataApiHeader;\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":769,"suffix_tokens":229}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:14:55 [triggerCompletion] {"requestId":"e471b3c63b5bcbb4","request":{"prompt":"// Path: src/utils/header.ts\n// TODO","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":10,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" : 1、处理客户端返回的表头数据，将表头处理为业务类型","finishReason":"stop"}}} 
  2024-08-28 16:14:55 [showCompletion] {"requestId":"e471b3c63b5bcbb4","model":"codeqwenModel","text":" : 1、处理客户端返回的表头数据，将表头处理为业务类型","finishReason":"stop"} 
  2024-08-28 16:14:55 [triggerCompletion] {"requestId":"49fc75cec4cbd4ec","request":{"prompt":"// Path: src/utils/header.ts\n// TODO ","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":11,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 2023-05-09 16:05:05 添加注释","finishReason":"stop"}}} 
  2024-08-28 16:14:55 [vscodeShowCompletion] [{"insertText":"// TODO 2023-05-09 16:05:05 添加注释","range":[{"line":0,"character":0},{"line":0,"character":8}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"79b390e5-0142-4537-9423-4a10e382f3ec","insertText":"// TODO 2023-05-09 16:05:05 添加注释","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":8}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\utils\\header.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/utils/header.ts","path":"/d:/workspace/prompt-tableheader-front/src/utils/header.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"49fc75cec4cbd4ec","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"tiy8urmr3udop0930re6b1kxbs8vk5rw","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":3,\"PathMarker\":8},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":1,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"5073cba3-2bad-47a5-961d-f077a37716d4","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-52fe8793281a45b0b082b653227938ac","created":"1724832904","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":37,"promptSuffixCharLen":6380,"promptEndPos":8,"documentLength":6389,"delayMs":0,"promptComputeTimeMs":5,"contextualFilterScore":0.48232680129010974,"timeSinceIssuedMs":10,"current_time":1724832894,"numTokens":20,"compCharLen":25,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724832894665,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"2023-05-09 16:05:05 添加注释","position":{"line":0,"character":8},"offset":8,"resultType":0}]}}] 
  2024-08-28 16:14:55 [showCompletion] {"requestId":"49fc75cec4cbd4ec","model":"codeqwenModel","text":" 2023-05-09 16:05:05 添加注释","finishReason":"stop"} 
  2024-08-28 16:14:57 [triggerCompletion] {"requestId":"73421b832c2c0942","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":12,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 描述","finishReason":"stop"}}} 
  2024-08-28 16:14:57 [showCompletion] {"requestId":"73421b832c2c0942","model":"codeqwenModel","text":" 描述","finishReason":"stop"} 
  2024-08-28 16:14:57 [triggerCompletion] {"requestId":"3c3bed6de54837cf","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数ming'cheng","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:14:57 [triggerCompletion] {"requestId":"39f26755acb70c81","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数ming","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":13,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 命名规范：以动词开头，使用驼峰式命名，如：dealNormalHeader","finishReason":"stop"}}} 
  2024-08-28 16:14:57 [showCompletion] {"requestId":"39f26755acb70c81","model":"codeqwenModel","text":" 命名规范：以动词开头，使用驼峰式命名，如：dealNormalHeader","finishReason":"stop"} 
  2024-08-28 16:14:58 [triggerCompletion] {"requestId":"44550595758d05f7","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":13,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ：dealNormalHeader","finishReason":"stop"}}} 
  2024-08-28 16:14:58 [showCompletion] {"requestId":"44550595758d05f7","model":"codeqwenModel","text":" ：dealNormalHeader","finishReason":"stop"} 
  2024-08-28 16:14:59 [triggerCompletion] {"requestId":"12fc18a951ec21c8","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称k","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":14,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ebab-case","finishReason":"stop"}}} 
  2024-08-28 16:14:59 [showCompletion] {"requestId":"12fc18a951ec21c8","model":"codeqwenModel","text":" ebab-case","finishReason":"stop"} 
  2024-08-28 16:14:59 [triggerCompletion] {"requestId":"a14357204780a33e","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称考虑","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":16,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 优化","finishReason":"stop"}}} 
  2024-08-28 16:14:59 [showCompletion] {"requestId":"a14357204780a33e","model":"codeqwenModel","text":" 优化","finishReason":"stop"} 
  2024-08-28 16:15:00 [triggerCompletion] {"requestId":"5ef0fe23935542a8","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称考虑you'hua","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":19,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:15:01 [triggerCompletion] {"requestId":"8b8087a6dc606838","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称考虑you'hu","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":19,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" i/src/utils/header.ts","finishReason":"stop"}}} 
  2024-08-28 16:15:01 [showCompletion] {"requestId":"8b8087a6dc606838","model":"codeqwenModel","text":" i/src/utils/header.ts","finishReason":"stop"} 
  2024-08-28 16:15:01 [triggerCompletion] {"requestId":"0f7b7f8d256aabf7","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称考虑优化","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":18,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:15:03 [showCompletion] {"requestId":"4e723a20bf822965","model":"codeqwenModel","text":" 语义化，如：dealNormalHeader","finishReason":"stop"} 
  2024-08-28 16:15:03 [triggerCompletion] {"requestId":"4e723a20bf822965","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称考虑优化，用","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":20,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 语义化，如：dealNormalHeader","finishReason":"stop"}}} 
  2024-08-28 16:15:03 [vscodeShowCompletion] [{"insertText":"// TODO 函数名称考虑优化，用 语义化，如：dealNormalHeader","range":[{"line":0,"character":0},{"line":0,"character":18}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"1bd34d4f-8745-4363-824e-b44c0cdb30c7","insertText":"// TODO 函数名称考虑优化，用 语义化，如：dealNormalHeader","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":18}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\utils\\header.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/utils/header.ts","path":"/d:/workspace/prompt-tableheader-front/src/utils/header.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"4e723a20bf822965","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"tiy8urmr3udop0930re6b1kxbs8vk5rw","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":12,\"PathMarker\":8},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":1,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"22bb6623-41d2-4123-86bd-34a6bc80d0cc","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-8cd40dc236ca4930bef75ad5ac88dc88","created":"1724832913","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":47,"promptSuffixCharLen":6380,"promptEndPos":18,"documentLength":6399,"delayMs":0,"promptComputeTimeMs":3,"contextualFilterScore":0.5258327247586541,"timeSinceIssuedMs":18,"current_time":1724832902,"numTokens":10,"compCharLen":23,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724832902921,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" 语义化，如：dealNormalHeader","position":{"line":0,"character":18},"offset":18,"resultType":0}]}}] 
  2024-08-28 16:15:03 [showCompletion] {"requestId":"577a18384db3fe0e","model":"codeqwenModel","text":" 考虑使用更准确的名称，如：dealNormalHeader、dealOldIWCHeader、dealIWCHeader、dealFyDataApiHeader、handleDealHeaders、dealPromptHeaders、handleResDetailHeaders","finishReason":"stop"} 
  2024-08-28 16:15:03 [triggerCompletion] {"requestId":"577a18384db3fe0e","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称考虑优化，","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":19,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 考虑使用更准确的名称，如：dealNormalHeader、dealOldIWCHeader、dealIWCHeader、dealFyDataApiHeader、handleDealHeaders、dealPromptHeaders、handleResDetailHeaders","finishReason":"stop"}}} 
  2024-08-28 16:15:05 [triggerCompletion] {"requestId":"18f5f9ff8f55bfa7","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称考虑优化，用deal","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":21,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"XXXHeader 命名","finishReason":"stop"}}} 
  2024-08-28 16:15:05 [showCompletion] {"requestId":"18f5f9ff8f55bfa7","model":"codeqwenModel","text":"XXXHeader 命名","finishReason":"stop"} 
  2024-08-28 16:15:05 [vscodeShowCompletion] [{"insertText":"// TODO 函数名称考虑优化，用dealXXXHeader 命名","range":[{"line":0,"character":0},{"line":0,"character":22}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"b0261482-1f9f-4489-bea1-3c390c4fd8c0","insertText":"// TODO 函数名称考虑优化，用dealXXXHeader 命名","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":22}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\utils\\header.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/utils/header.ts","path":"/d:/workspace/prompt-tableheader-front/src/utils/header.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"18f5f9ff8f55bfa7","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"tiy8urmr3udop0930re6b1kxbs8vk5rw","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":13,\"PathMarker\":8},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":1,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"67254f52-48c6-497c-afb4-82155ea551c5","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-9f73ccc4690f4e1a9796d9e378b2079e","created":"1724832914","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":51,"promptSuffixCharLen":6380,"promptEndPos":22,"documentLength":6403,"delayMs":0,"promptComputeTimeMs":3,"contextualFilterScore":0.6233874597948981,"timeSinceIssuedMs":10,"current_time":1724832904,"numTokens":5,"compCharLen":12,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724832904531,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"XXXHeader 命名","position":{"line":0,"character":22},"offset":22,"resultType":0}]}}] 
  2024-08-28 16:15:05 [triggerCompletion] {"requestId":"6ea3a5979e979eff","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称kao'l","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":16,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" e'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le","finishReason":"length"}}} 
  2024-08-28 16:15:05 [showCompletion] {"requestId":"6ea3a5979e979eff","model":"codeqwenModel","text":" e'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le'le","finishReason":"length"} 
  2024-08-28 16:15:06 [triggerCompletion] {"requestId":"a82971dcf3ea6137","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称考虑优化，用deal会","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":22,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 冲突，用dealHeader会更清晰","finishReason":"stop"}}} 
  2024-08-28 16:15:06 [showCompletion] {"requestId":"a82971dcf3ea6137","model":"codeqwenModel","text":" 冲突，用dealHeader会更清晰","finishReason":"stop"} 
  2024-08-28 16:15:07 [triggerCompletion] {"requestId":"4f56533c927096e7","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称考虑优化，用deal会产生","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":24,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 歧义","finishReason":"stop"}}} 
  2024-08-28 16:15:07 [showCompletion] {"requestId":"4f56533c927096e7","model":"codeqwenModel","text":" 歧义","finishReason":"stop"} 
  2024-08-28 16:15:07 [vscodeShowCompletion] [{"insertText":"// TODO 函数名称考虑优化，用deal会产生 歧义","range":[{"line":0,"character":0},{"line":0,"character":25}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"e56648d8-c65a-4f1a-9263-b41e3d262c8b","insertText":"// TODO 函数名称考虑优化，用deal会产生 歧义","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":25}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\utils\\header.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/utils/header.ts","path":"/d:/workspace/prompt-tableheader-front/src/utils/header.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"4f56533c927096e7","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"tiy8urmr3udop0930re6b1kxbs8vk5rw","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":16,\"PathMarker\":8},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":1,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"2c2023bb-2225-4a1c-8354-2609f2123a6c","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-f2b5c93b238a4d62864fbdf6a46c5556","created":"1724832917","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":54,"promptSuffixCharLen":6380,"promptEndPos":25,"documentLength":6406,"delayMs":0,"promptComputeTimeMs":5,"contextualFilterScore":0.5205805201185667,"timeSinceIssuedMs":31,"current_time":1724832907,"numTokens":3,"compCharLen":3,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724832906976,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" 歧义","position":{"line":0,"character":25},"offset":25,"resultType":0}]}}] 
  2024-08-28 16:15:09 [triggerCompletion] {"requestId":"35beab8e70f540a5","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称考虑优化，用de'a'l","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":23,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" e'a'd'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'","finishReason":"length"}}} 
  2024-08-28 16:15:09 [showCompletion] {"requestId":"35beab8e70f540a5","model":"codeqwenModel","text":" e'a'd'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'l'a'","finishReason":"length"} 
  2024-08-28 16:15:13 [triggerCompletion] {"requestId":"d467f085688573a9","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称考虑优化，用deal、handle会产生qi","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":27,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:15:14 [triggerCompletion] {"requestId":"931c61d0839f20ca","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称考虑优化，用deal、handle会产生qi'yi","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":29,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"an","finishReason":"stop"}}} 
  2024-08-28 16:15:14 [showCompletion] {"requestId":"931c61d0839f20ca","model":"codeqwenModel","text":"an","finishReason":"stop"} 
  2024-08-28 16:15:14 [vscodeShowCompletion] [{"insertText":"// TODO 函数名称考虑优化，用deal、handle会产生qi'yian","range":[{"line":0,"character":0},{"line":0,"character":37}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"c6640add-286a-4bb5-a868-2014a3f382cc","insertText":"// TODO 函数名称考虑优化，用deal、handle会产生qi'yian","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":37}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\utils\\header.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/utils/header.ts","path":"/d:/workspace/prompt-tableheader-front/src/utils/header.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"931c61d0839f20ca","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"tiy8urmr3udop0930re6b1kxbs8vk5rw","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":21,\"PathMarker\":8},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":1,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"32d59067-821e-43e5-8581-51b6be15d1ef","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-cde7b974d26c4e86a7a272217412f653","created":"1724832924","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":66,"promptSuffixCharLen":6380,"promptEndPos":37,"documentLength":6418,"delayMs":0,"promptComputeTimeMs":2,"contextualFilterScore":0.6181125943782096,"timeSinceIssuedMs":10,"current_time":1724832913,"numTokens":1,"compCharLen":2,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724832913702,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"an","position":{"line":0,"character":37},"offset":37,"resultType":0}]}}] 
  2024-08-28 16:15:16 [triggerCompletion] {"requestId":"33d619fc3dc7b2b2","request":{"prompt":"// Path: src/utils/header.ts\n// TODO 函数名称考虑优化，用deal、handle会产生歧义","suffix":"import { BASEITEM_WIDTH } from './const';\nimport { HeaderType } from '@/types/headerItem.d';\n\nimport type {\n  BusinessHeader,\n  BusinessIWCHeader,\n  BusinessNormalHeader,\n  BusinessHeaderItem,\n  FyDataApiHeader,\n  HeaderItem,\n  IWCHeader,\n  NormalHeader,\n  OldIWCHeader,\n  PromptIWCHeader,\n  PromptNormalHeader,\n} from '@/types/headerItem.d';\nimport type { DetailHeaderItem } from '@/types/request/requestResponse.d';\n\n/**\n * 处理常规表头\n * @param {NormalHeader} header - 常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务常规表头对象\n */\nexport function dealNormalHeader(header: NormalHeader): NormalHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.NormalHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理老问财表头(注意不同接口)\n * @param {OldIWCHeader} header - 老问财表头对象\n * @returns {OldIWCHeader & BusinessHeader} 处理后的业务老问财表头对象\n * @description 老问财表头对象是客户端版本 9.10.10 之前的表头广场使用的版本，后续问财表头有过一个改版，此处是兼容老版本的操作，\n *\n * 遗留特性：\n *\n * 1、老问财表头对象的 id 字段是表头的唯一标识，新问财表头对象的data_id字段是表头的唯一标识\n *\n * 2、老问财表头的来源仅包括表头广场、当前历史遗留两个地方，后续不再存在新增老问财的操作\n *\n */\nexport function dealOldIWCHeader(header: OldIWCHeader): OldIWCHeader & BusinessHeader {\n  // 问财表头名称（chunk传给了客户端）\n  const stampStr = header.timestamp ? `[${header.timestamp}]` : '';\n  // 旧问财表头名称数据有多种格式，优先取show_name、index_name；如果都没有取name\n  const firstName = header.show_name || header.index_name;\n  const display_name = firstName\n    ? `${firstName}${stampStr}`\n    : header.name || `${header.chunk}${stampStr}` || '';\n  return {\n    ...header,\n    fieldType: HeaderType.OldIWCHeader,\n    // 旧问财表头在新版客户端是无法自定义新增的\n    _id: header.id,\n    name: header.chunk || display_name,\n    display_name: header.display_name || display_name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理新问财表头\n * @param {IWCHeader} header - 新问财表头对象\n * @returns {IWCHeader & BusinessHeader} 处理后的业务新问财表头对象\n * @description 对应上述老问财表头数据\n */\nexport function dealIWCHeader(header: IWCHeader): IWCHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id || '', // 不存在id的情况说明是新增的表头\n    width: BASEITEM_WIDTH,\n    // 不同接口返回的id不同\n    display_name:\n      header.display_name ||\n      `${header.show_name}${header.timestamp ? `[${header.timestamp}]` : ''}`,\n    name: header.show_name || header.display_name || '',\n    valid: 1,\n  };\n}\n\n/**\n * 处理FyDataApi表头\n * @param {FyDataApiHeader} header - FyDataApi表头对象\n * @returns {FyDataApiHeader & BusinessHeader} 处理后的业务FyDataApi表头对象\n */\nexport function dealFyDataApiHeader(header: FyDataApiHeader): FyDataApiHeader & BusinessHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.FyDataApiHeader,\n    _id: header.id,\n    display_name: header.name,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt常规表头\n * @param {PromptNormalHeader} header - Prompt常规表头对象\n * @returns {BusinessNormalHeader} 处理后的业务Prompt常规表头对象\n * @description 从AI对话流程的查询接口中获取的常规表头数据\n *\n */\nexport function dealPromptNormalHeader(header: PromptNormalHeader): BusinessNormalHeader {\n  return {\n    _id: header.id,\n    id: header.id,\n    fieldType: HeaderType.NormalHeader,\n    name: header.index_id,\n    display_name: header.index_id,\n    width: BASEITEM_WIDTH,\n    valid: 1,\n  };\n}\n\n/**\n * 处理Prompt问财表头\n * @param {PromptIWCHeader} header - Prompt问财表头对象\n * @returns {BusinessIWCHeader} 处理后的业务Prompt问财表头对象\n * @description 从AI对话流程的查询接口中获取的问财表头数据\n */\nexport function dealPromptIWCHeader(\n  header: PromptIWCHeader & { data_id: string },\n): BusinessIWCHeader {\n  return {\n    ...header,\n    fieldType: HeaderType.IWCHeader,\n    _id: header.data_id,\n    id: header.id,\n    name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    index_name: header.index_id,\n    show_name: header.index_id,\n    timestamp: header.time_stamp,\n    display_name: `${header.index_id}${header.time_stamp ? `[${header.time_stamp}]` : ''}`,\n    model_condition: header.model_condition,\n    domain: header.domain,\n    query_index: header.query_index,\n    width: BASEITEM_WIDTH,\n    days: '0',\n    valid: 0,\n  };\n}\n\n/**\n * 处理四类表头，将表头处理为业务类型\n * @param {T} header - 表头对象\n * @returns {T & BusinessHeaderItem} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头:\n *\n * 1、处理客户端返回: 对于行情表头（常规）id不从后端接口返回,是客户端返回的。\n *\n * 2、处理用户新建（非广场安装）涉及后端接口返回；接口不含旧表tou项，只有新表头项！！\n */\nexport function handleDealHeaders(header: HeaderItem): BusinessHeaderItem {\n  switch (header.fieldType) {\n    case HeaderType.NormalHeader:\n      return dealNormalHeader(header);\n    case HeaderType.OldIWCHeader:\n      return dealOldIWCHeader(header);\n    case HeaderType.IWCHeader:\n      return dealIWCHeader(header);\n    case HeaderType.FyDataApiHeader:\n      return dealFyDataApiHeader(header);\n    default:\n      return dealNormalHeader(header);\n  }\n}\n\n/**\n * 处理prompt表头的返回\n * @param {BusinessNormalHeader | BusinessIWCHeader} header - 表头对象\n * @returns {BusinessIWCHeader | BusinessNormalHeader & { pcid: string; analysis_type: string; }} 处理后的业务表头对象\n */\nexport function dealPromptHeaders(header: BusinessNormalHeader | BusinessIWCHeader): (\n  | BusinessIWCHeader\n  | BusinessNormalHeader\n) & {\n  pcid: string; // Aimi组件的唯一标识\n  analysis_type: string; // 分析类型，1 对应常规表头，2 对应扶摇表头\n} {\n  const analysis_type = {\n    [HeaderType.NormalHeader]: '1',\n    [HeaderType.IWCHeader]: '2',\n  }[header.fieldType];\n\n  return {\n    ...header,\n    pcid: header._id,\n    analysis_type,\n  };\n}\n\n/**\n * 处理表头广场 接口 -- 仅安装\n * @param {DetailHeaderItem} header - 表头对象\n * @returns {BusinessHeader} 处理后的业务表头对象\n * @description fieldType系客户端返回带的字段（客户端生产），用于区分三类表头。\n * 处理广场安装涉及后端接口返回；接口含新表头项，也有旧表头项！！\n *\n * 1、行情表头：is_quote = 1 取 data_id,\n *\n * 2、 老问财：is_quote = 0 取id,\n *\n * 3、 新问财： is_quote = null 取fy_wc_data_id\n */\nexport function handleResDetailHeaders(header: DetailHeaderItem) {\n  const tempId = header.id;\n  if (header?.is_quote === 1) {\n    header.id = header?.data_id?.toString();\n    header.width = header.width || BASEITEM_WIDTH;\n    return dealNormalHeader(header as NormalHeader);\n  } else if (header.is_quote === 0) {\n    delete header.data_id;\n    const result = dealOldIWCHeader(header as OldIWCHeader);\n    // 新增数据id为空\n    result.id = '';\n    return result;\n  } else {\n    header.data_id = header.fy_wc_data_id || tempId;\n    // 新建搜索扶摇表头 show_name 、index_name 2个都有值；详情返回只有index_name，没有show_name\n    header.show_name = header.show_name || header.index_name;\n    header.id = '';\n    return dealIWCHeader(header as IWCHeader);\n  }\n}\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":29,"suffix_tokens":2236}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"，建议使用deal、handle等","finishReason":"stop"}}} 
  2024-08-28 16:15:16 [showCompletion] {"requestId":"33d619fc3dc7b2b2","model":"codeqwenModel","text":"，建议使用deal、handle等","finishReason":"stop"} 
  2024-08-28 16:15:16 [vscodeShowCompletion] [{"insertText":"// TODO 函数名称考虑优化，用deal、handle会产生歧义，建议使用deal、handle等","range":[{"line":0,"character":0},{"line":0,"character":34}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"2045fe1d-bb0d-4d07-800c-b60042c93ace","insertText":"// TODO 函数名称考虑优化，用deal、handle会产生歧义，建议使用deal、handle等","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":34}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\utils\\header.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/utils/header.ts","path":"/d:/workspace/prompt-tableheader-front/src/utils/header.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"33d619fc3dc7b2b2","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"tiy8urmr3udop0930re6b1kxbs8vk5rw","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":21,\"PathMarker\":8},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":1,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"cc2c1952-7fae-41a9-90f1-937e026ebf27","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-1ad8a9c44c54418684ef642a9c85e19a","created":"1724832926","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":63,"promptSuffixCharLen":6380,"promptEndPos":34,"documentLength":6415,"delayMs":0,"promptComputeTimeMs":2,"contextualFilterScore":0.51902974400346,"timeSinceIssuedMs":9,"current_time":1724832915,"numTokens":7,"compCharLen":17,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724832915907,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"，建议使用deal、handle等","position":{"line":0,"character":34},"offset":34,"resultType":0}]}}] 
  2024-08-28 16:17:33 [triggerCompletion] {"requestId":"503213060451af88","request":{"prompt":"// Path: src/api/request/env.ts\n/*\n * api HOST 和 mock 配置\n *\n * @module api/host\n * @author liboshen <liboshen@myhexin.com>\n * @description define api host and config mock control\n */\n","suffix":"const DEV = process.env.NODE_ENV === 'development';\nconst BASE_URL = DEV\n  ? 'localhost:3000'\n  : `${window.location.protocol}//erup.10jqka.com.cn/platform/stockdiagnosefront/html`;\nconst DQ_HOST = '//apigate.10jqka.com.cn/d/platform/';\nconst EQ_HOST = '//eq.10jqka.com.cn/';\nconst ZX_HOST = '//zx.10jqka.com.cn';\nconst DATAQ_HOST = '//api.ainvest.com/od/mobileweb-indicator-api/';\nconst REQUESTTIMEOUT = 5000;\n\nexport default {\n  NCZG_HOST: `${DQ_HOST}`,\n  CONFIG_HOST: `${EQ_HOST}`,\n  ZX_HOST,\n  BASE_URL,\n  DATAQ_HOST,\n  REQUESTTIMEOUT,\n};\n","max_tokens":500,"temperature":0.2,"top_p":1,"n":3,"stop":["\n\n\n","\n```"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":54,"suffix_tokens":161}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" \n \n \n","finishReason":"stop"}}} 
  2024-08-28 16:17:35 [triggerCompletion] {"requestId":"f075eff506f96eb4","request":{"prompt":"// Path: src/api/request/env.ts\n/*\n * api HOST 和 mock 配置\n *\n * @module api/host\n * @author liboshen <liboshen@myhexin.com>\n * @description define api host and config mock control\n */\n// TODO","suffix":"const DEV = process.env.NODE_ENV === 'development';\nconst BASE_URL = DEV\n  ? 'localhost:3000'\n  : `${window.location.protocol}//erup.10jqka.com.cn/platform/stockdiagnosefront/html`;\nconst DQ_HOST = '//apigate.10jqka.com.cn/d/platform/';\nconst EQ_HOST = '//eq.10jqka.com.cn/';\nconst ZX_HOST = '//zx.10jqka.com.cn';\nconst DATAQ_HOST = '//api.ainvest.com/od/mobileweb-indicator-api/';\nconst REQUESTTIMEOUT = 5000;\n\nexport default {\n  NCZG_HOST: `${DQ_HOST}`,\n  CONFIG_HOST: `${EQ_HOST}`,\n  ZX_HOST,\n  BASE_URL,\n  DATAQ_HOST,\n  REQUESTTIMEOUT,\n};\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":56,"suffix_tokens":161}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" : 配置mock","finishReason":"stop"}}} 
  2024-08-28 16:17:35 [showCompletion] {"requestId":"f075eff506f96eb4","model":"codeqwenModel","text":" : 配置mock","finishReason":"stop"} 
  2024-08-28 16:17:35 [vscodeShowCompletion] [{"insertText":"// TODO : 配置mock","range":[{"line":7,"character":0},{"line":7,"character":7}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"666004b9-9e26-4618-b808-f00af90284ca","insertText":"// TODO : 配置mock","range":{"start":{"line":7,"character":0},"end":{"line":7,"character":7}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\api\\request\\env.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/api/request/env.ts","path":"/d:/workspace/prompt-tableheader-front/src/api/request/env.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"f075eff506f96eb4","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"tiy8urmr3udop0930re6b1kxbs8vk5rw","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":47,\"PathMarker\":9},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":8,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"d87e398f297d0a259f87b3c95d02f8a395d441c6abefb509ee5ae5e24b03b550\",\"453e9553aa1931ff41db98128053c4d3fe081622fdeb2f26d73b9f965cdf03ef\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"7d550776-1272-4753-be6f-8ecf7fbbc214","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-7fb51b671070409dbc134b0e6728cdc4","created":"1724833066","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":190,"promptSuffixCharLen":543,"promptEndPos":158,"documentLength":702,"delayMs":0,"promptComputeTimeMs":14,"contextualFilterScore":0.5491917631686474,"timeSinceIssuedMs":18,"current_time":1724833055,"numTokens":4,"compCharLen":9,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724833055245,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" : 配置mock","position":{"line":7,"character":7},"offset":158,"resultType":0}]}}] 
  2024-08-28 16:17:36 [vscodeShowCompletion] [{"insertText":"// TODO : 配置mock","range":[{"line":7,"character":0},{"line":7,"character":8}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"ec7f7ad2-fe89-4e16-b866-5fb20b5c12b1","insertText":"// TODO : 配置mock","range":{"start":{"line":7,"character":0},"end":{"line":7,"character":8}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\api\\request\\env.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/api/request/env.ts","path":"/d:/workspace/prompt-tableheader-front/src/api/request/env.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"f075eff506f96eb4","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"tiy8urmr3udop0930re6b1kxbs8vk5rw","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":47,\"PathMarker\":9},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":8,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"d87e398f297d0a259f87b3c95d02f8a395d441c6abefb509ee5ae5e24b03b550\",\"453e9553aa1931ff41db98128053c4d3fe081622fdeb2f26d73b9f965cdf03ef\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"7d550776-1272-4753-be6f-8ecf7fbbc214","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-7fb51b671070409dbc134b0e6728cdc4","created":"1724833066","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":190,"promptSuffixCharLen":543,"promptEndPos":158,"documentLength":702,"delayMs":0,"promptComputeTimeMs":14,"contextualFilterScore":0.5491917631686474,"timeSinceIssuedMs":18,"current_time":1724833055,"numTokens":4,"compCharLen":8,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724833055245,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":": 配置mock","position":{"line":7,"character":8},"offset":159,"resultType":2}]}}] 
  2024-08-28 16:17:36 [triggerCompletion] {"requestId":"6604b2cd3de7e75f","request":{"prompt":"// Path: src/api/request/env.ts\n/*\n * api HOST 和 mock 配置\n *\n * @module api/host\n * @author liboshen <liboshen@myhexin.com>\n * @description define api host and config mock control\n */\n// TODO d","suffix":"const DEV = process.env.NODE_ENV === 'development';\nconst BASE_URL = DEV\n  ? 'localhost:3000'\n  : `${window.location.protocol}//erup.10jqka.com.cn/platform/stockdiagnosefront/html`;\nconst DQ_HOST = '//apigate.10jqka.com.cn/d/platform/';\nconst EQ_HOST = '//eq.10jqka.com.cn/';\nconst ZX_HOST = '//zx.10jqka.com.cn';\nconst DATAQ_HOST = '//api.ainvest.com/od/mobileweb-indicator-api/';\nconst REQUESTTIMEOUT = 5000;\n\nexport default {\n  NCZG_HOST: `${DQ_HOST}`,\n  CONFIG_HOST: `${EQ_HOST}`,\n  ZX_HOST,\n  BASE_URL,\n  DATAQ_HOST,\n  REQUESTTIMEOUT,\n};\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":57,"suffix_tokens":161}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" efine api host and config mock control","finishReason":"stop"}}} 
  2024-08-28 16:17:36 [showCompletion] {"requestId":"6604b2cd3de7e75f","model":"codeqwenModel","text":" efine api host and config mock control","finishReason":"stop"} 
  2024-08-28 16:17:37 [triggerCompletion] {"requestId":"bda930c68176b5d9","request":{"prompt":"// Path: src/api/request/env.ts\n/*\n * api HOST 和 mock 配置\n *\n * @module api/host\n * @author liboshen <liboshen@myhexin.com>\n * @description define api host and config mock control\n */\n// TODO don","suffix":"const DEV = process.env.NODE_ENV === 'development';\nconst BASE_URL = DEV\n  ? 'localhost:3000'\n  : `${window.location.protocol}//erup.10jqka.com.cn/platform/stockdiagnosefront/html`;\nconst DQ_HOST = '//apigate.10jqka.com.cn/d/platform/';\nconst EQ_HOST = '//eq.10jqka.com.cn/';\nconst ZX_HOST = '//zx.10jqka.com.cn';\nconst DATAQ_HOST = '//api.ainvest.com/od/mobileweb-indicator-api/';\nconst REQUESTTIMEOUT = 5000;\n\nexport default {\n  NCZG_HOST: `${DQ_HOST}`,\n  CONFIG_HOST: `${EQ_HOST}`,\n  ZX_HOST,\n  BASE_URL,\n  DATAQ_HOST,\n  REQUESTTIMEOUT,\n};\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":57,"suffix_tokens":161}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"'t use window.location.hostname","finishReason":"stop"}}} 
  2024-08-28 16:17:37 [showCompletion] {"requestId":"bda930c68176b5d9","model":"codeqwenModel","text":"'t use window.location.hostname","finishReason":"stop"} 
  2024-08-28 16:17:37 [vscodeShowCompletion] [{"insertText":"// TODO don't use window.location.hostname","range":[{"line":7,"character":0},{"line":7,"character":11}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"44dd4c19-c658-4706-a0d4-9758c3076b93","insertText":"// TODO don't use window.location.hostname","range":{"start":{"line":7,"character":0},"end":{"line":7,"character":11}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\api\\request\\env.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/api/request/env.ts","path":"/d:/workspace/prompt-tableheader-front/src/api/request/env.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"bda930c68176b5d9","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"tiy8urmr3udop0930re6b1kxbs8vk5rw","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":48,\"PathMarker\":9},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":8,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"d87e398f297d0a259f87b3c95d02f8a395d441c6abefb509ee5ae5e24b03b550\",\"453e9553aa1931ff41db98128053c4d3fe081622fdeb2f26d73b9f965cdf03ef\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"8baecca9-5e7b-466c-b176-ac4c51109dbd","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-83c01657379943d7a8be079051c3279b","created":"1724833068","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":194,"promptSuffixCharLen":543,"promptEndPos":162,"documentLength":706,"delayMs":0,"promptComputeTimeMs":12,"contextualFilterScore":0.7177571932727893,"timeSinceIssuedMs":22,"current_time":1724833056,"numTokens":9,"compCharLen":31,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724833056753,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"'t use window.location.hostname","position":{"line":7,"character":11},"offset":162,"resultType":0}]}}] 
  2024-08-28 16:17:37 [triggerCompletion] {"requestId":"682b269b0da6da45","request":{"prompt":"// Path: src/api/request/env.ts\n/*\n * api HOST 和 mock 配置\n *\n * @module api/host\n * @author liboshen <liboshen@myhexin.com>\n * @description define api host and config mock control\n */\n// TODO ","suffix":"const DEV = process.env.NODE_ENV === 'development';\nconst BASE_URL = DEV\n  ? 'localhost:3000'\n  : `${window.location.protocol}//erup.10jqka.com.cn/platform/stockdiagnosefront/html`;\nconst DQ_HOST = '//apigate.10jqka.com.cn/d/platform/';\nconst EQ_HOST = '//eq.10jqka.com.cn/';\nconst ZX_HOST = '//zx.10jqka.com.cn';\nconst DATAQ_HOST = '//api.ainvest.com/od/mobileweb-indicator-api/';\nconst REQUESTTIMEOUT = 5000;\n\nexport default {\n  NCZG_HOST: `${DQ_HOST}`,\n  CONFIG_HOST: `${EQ_HOST}`,\n  ZX_HOST,\n  BASE_URL,\n  DATAQ_HOST,\n  REQUESTTIMEOUT,\n};\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":57,"suffix_tokens":161}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 配置mock","finishReason":"stop"}}} 
  2024-08-28 16:17:37 [showCompletion] {"requestId":"682b269b0da6da45","model":"codeqwenModel","text":" 配置mock","finishReason":"stop"} 
  2024-08-28 16:17:37 [vscodeShowCompletion] [{"insertText":"// TODO 配置mock","range":[{"line":7,"character":0},{"line":7,"character":8}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"794e5e54-b9cc-42e9-95de-cf99094e0098","insertText":"// TODO 配置mock","range":{"start":{"line":7,"character":0},"end":{"line":7,"character":8}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\api\\request\\env.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/api/request/env.ts","path":"/d:/workspace/prompt-tableheader-front/src/api/request/env.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"682b269b0da6da45","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"tiy8urmr3udop0930re6b1kxbs8vk5rw","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":48,\"PathMarker\":9},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":8,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"d87e398f297d0a259f87b3c95d02f8a395d441c6abefb509ee5ae5e24b03b550\",\"453e9553aa1931ff41db98128053c4d3fe081622fdeb2f26d73b9f965cdf03ef\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"8b9bce2c-6058-45e8-929a-926f27a07487","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-33042c19997d4bc384c6456567fc5b9a","created":"1724833069","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":191,"promptSuffixCharLen":543,"promptEndPos":159,"documentLength":703,"delayMs":0,"promptComputeTimeMs":5,"contextualFilterScore":0.6589617896046662,"timeSinceIssuedMs":8,"current_time":1724833057,"numTokens":3,"compCharLen":7,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724833057511,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"配置mock","position":{"line":7,"character":8},"offset":159,"resultType":0}]}}] 
  2024-08-28 16:17:38 [vscodeShowCompletion] [{"insertText":"// TODO don't use window.location.hostname","range":[{"line":7,"character":0},{"line":7,"character":11}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"81312e79-86ee-4798-900d-18b9c79f1fe0","insertText":"// TODO don't use window.location.hostname","range":{"start":{"line":7,"character":0},"end":{"line":7,"character":11}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\api\\request\\env.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/api/request/env.ts","path":"/d:/workspace/prompt-tableheader-front/src/api/request/env.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"bda930c68176b5d9","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"tiy8urmr3udop0930re6b1kxbs8vk5rw","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":48,\"PathMarker\":9},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":8,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"d87e398f297d0a259f87b3c95d02f8a395d441c6abefb509ee5ae5e24b03b550\",\"453e9553aa1931ff41db98128053c4d3fe081622fdeb2f26d73b9f965cdf03ef\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"8baecca9-5e7b-466c-b176-ac4c51109dbd","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-83c01657379943d7a8be079051c3279b","created":"1724833068","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":194,"promptSuffixCharLen":543,"promptEndPos":162,"documentLength":706,"delayMs":0,"promptComputeTimeMs":12,"contextualFilterScore":0.7177571932727893,"timeSinceIssuedMs":22,"current_time":1724833056,"numTokens":9,"compCharLen":31,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724833056753,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":"'t use window.location.hostname","position":{"line":7,"character":11},"offset":162,"resultType":1}]}}] 
  2024-08-28 16:17:38 [triggerCompletion] {"requestId":"e8eddcc59815fa1c","request":{"prompt":"// Path: src/api/request/env.ts\n/*\n * api HOST 和 mock 配置\n *\n * @module api/host\n * @author liboshen <liboshen@myhexin.com>\n * @description define api host and config mock control\n */\n// TODO dong","suffix":"const DEV = process.env.NODE_ENV === 'development';\nconst BASE_URL = DEV\n  ? 'localhost:3000'\n  : `${window.location.protocol}//erup.10jqka.com.cn/platform/stockdiagnosefront/html`;\nconst DQ_HOST = '//apigate.10jqka.com.cn/d/platform/';\nconst EQ_HOST = '//eq.10jqka.com.cn/';\nconst ZX_HOST = '//zx.10jqka.com.cn';\nconst DATAQ_HOST = '//api.ainvest.com/od/mobileweb-indicator-api/';\nconst REQUESTTIMEOUT = 5000;\n\nexport default {\n  NCZG_HOST: `${DQ_HOST}`,\n  CONFIG_HOST: `${EQ_HOST}`,\n  ZX_HOST,\n  BASE_URL,\n  DATAQ_HOST,\n  REQUESTTIMEOUT,\n};\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":57,"suffix_tokens":161}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:17:39 [triggerCompletion] {"requestId":"d09ebaca9695f958","request":{"prompt":"// Path: src/api/request/env.ts\n/*\n * api HOST 和 mock 配置\n *\n * @module api/host\n * @author liboshen <liboshen@myhexin.com>\n * @description define api host and config mock control\n */\n// TODO 动态","suffix":"const DEV = process.env.NODE_ENV === 'development';\nconst BASE_URL = DEV\n  ? 'localhost:3000'\n  : `${window.location.protocol}//erup.10jqka.com.cn/platform/stockdiagnosefront/html`;\nconst DQ_HOST = '//apigate.10jqka.com.cn/d/platform/';\nconst EQ_HOST = '//eq.10jqka.com.cn/';\nconst ZX_HOST = '//zx.10jqka.com.cn';\nconst DATAQ_HOST = '//api.ainvest.com/od/mobileweb-indicator-api/';\nconst REQUESTTIMEOUT = 5000;\n\nexport default {\n  NCZG_HOST: `${DQ_HOST}`,\n  CONFIG_HOST: `${EQ_HOST}`,\n  ZX_HOST,\n  BASE_URL,\n  DATAQ_HOST,\n  REQUESTTIMEOUT,\n};\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":59,"suffix_tokens":161}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 获取","finishReason":"stop"}}} 
  2024-08-28 16:17:39 [showCompletion] {"requestId":"d09ebaca9695f958","model":"codeqwenModel","text":" 获取","finishReason":"stop"} 
  2024-08-28 16:17:39 [triggerCompletion] {"requestId":"e925d374b249e8d1","request":{"prompt":"// Path: src/api/request/env.ts\n/*\n * api HOST 和 mock 配置\n *\n * @module api/host\n * @author liboshen <liboshen@myhexin.com>\n * @description define api host and config mock control\n */\n// TODO 动态yu","suffix":"const DEV = process.env.NODE_ENV === 'development';\nconst BASE_URL = DEV\n  ? 'localhost:3000'\n  : `${window.location.protocol}//erup.10jqka.com.cn/platform/stockdiagnosefront/html`;\nconst DQ_HOST = '//apigate.10jqka.com.cn/d/platform/';\nconst EQ_HOST = '//eq.10jqka.com.cn/';\nconst ZX_HOST = '//zx.10jqka.com.cn';\nconst DATAQ_HOST = '//api.ainvest.com/od/mobileweb-indicator-api/';\nconst REQUESTTIMEOUT = 5000;\n\nexport default {\n  NCZG_HOST: `${DQ_HOST}`,\n  CONFIG_HOST: `${EQ_HOST}`,\n  ZX_HOST,\n  BASE_URL,\n  DATAQ_HOST,\n  REQUESTTIMEOUT,\n};\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":60,"suffix_tokens":161}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" rl","finishReason":"stop"}}} 
  2024-08-28 16:17:39 [showCompletion] {"requestId":"e925d374b249e8d1","model":"codeqwenModel","text":" rl","finishReason":"stop"} 
  2024-08-28 16:17:40 [triggerCompletion] {"requestId":"21035c4e7a0459ac","request":{"prompt":"// Path: src/api/request/env.ts\n/*\n * api HOST 和 mock 配置\n *\n * @module api/host\n * @author liboshen <liboshen@myhexin.com>\n * @description define api host and config mock control\n */\n// TODO 动态yu'ming","suffix":"const DEV = process.env.NODE_ENV === 'development';\nconst BASE_URL = DEV\n  ? 'localhost:3000'\n  : `${window.location.protocol}//erup.10jqka.com.cn/platform/stockdiagnosefront/html`;\nconst DQ_HOST = '//apigate.10jqka.com.cn/d/platform/';\nconst EQ_HOST = '//eq.10jqka.com.cn/';\nconst ZX_HOST = '//zx.10jqka.com.cn';\nconst DATAQ_HOST = '//api.ainvest.com/od/mobileweb-indicator-api/';\nconst REQUESTTIMEOUT = 5000;\n\nexport default {\n  NCZG_HOST: `${DQ_HOST}`,\n  CONFIG_HOST: `${EQ_HOST}`,\n  ZX_HOST,\n  BASE_URL,\n  DATAQ_HOST,\n  REQUESTTIMEOUT,\n};\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":62,"suffix_tokens":161}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":"","finishReason":"stop"}}} 
  2024-08-28 16:17:41 [triggerCompletion] {"requestId":"0f4ad8f89cd5a26f","request":{"prompt":"// Path: src/api/request/env.ts\n/*\n * api HOST 和 mock 配置\n *\n * @module api/host\n * @author liboshen <liboshen@myhexin.com>\n * @description define api host and config mock control\n */\n// TODO 动态域名切换","suffix":"const DEV = process.env.NODE_ENV === 'development';\nconst BASE_URL = DEV\n  ? 'localhost:3000'\n  : `${window.location.protocol}//erup.10jqka.com.cn/platform/stockdiagnosefront/html`;\nconst DQ_HOST = '//apigate.10jqka.com.cn/d/platform/';\nconst EQ_HOST = '//eq.10jqka.com.cn/';\nconst ZX_HOST = '//zx.10jqka.com.cn';\nconst DATAQ_HOST = '//api.ainvest.com/od/mobileweb-indicator-api/';\nconst REQUESTTIMEOUT = 5000;\n\nexport default {\n  NCZG_HOST: `${DQ_HOST}`,\n  CONFIG_HOST: `${EQ_HOST}`,\n  ZX_HOST,\n  BASE_URL,\n  DATAQ_HOST,\n  REQUESTTIMEOUT,\n};\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":65,"suffix_tokens":161}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:17:41 [showCompletion] {"requestId":"c80003fa2efd3d17","model":"codeqwenModel","text":" p","finishReason":"stop"} 
  2024-08-28 16:17:41 [triggerCompletion] {"requestId":"c80003fa2efd3d17","request":{"prompt":"// Path: src/api/request/env.ts\n/*\n * api HOST 和 mock 配置\n *\n * @module api/host\n * @author liboshen <liboshen@myhexin.com>\n * @description define api host and config mock control\n */\n// TODO 动态域名切换shi","suffix":"const DEV = process.env.NODE_ENV === 'development';\nconst BASE_URL = DEV\n  ? 'localhost:3000'\n  : `${window.location.protocol}//erup.10jqka.com.cn/platform/stockdiagnosefront/html`;\nconst DQ_HOST = '//apigate.10jqka.com.cn/d/platform/';\nconst EQ_HOST = '//eq.10jqka.com.cn/';\nconst ZX_HOST = '//zx.10jqka.com.cn';\nconst DATAQ_HOST = '//api.ainvest.com/od/mobileweb-indicator-api/';\nconst REQUESTTIMEOUT = 5000;\n\nexport default {\n  NCZG_HOST: `${DQ_HOST}`,\n  CONFIG_HOST: `${EQ_HOST}`,\n  ZX_HOST,\n  BASE_URL,\n  DATAQ_HOST,\n  REQUESTTIMEOUT,\n};\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":66,"suffix_tokens":161}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" p","finishReason":"stop"}}} 
  2024-08-28 16:17:42 [triggerCompletion] {"requestId":"b19807bab4cde776","request":{"prompt":"// Path: src/api/request/env.ts\n/*\n * api HOST 和 mock 配置\n *\n * @module api/host\n * @author liboshen <liboshen@myhexin.com>\n * @description define api host and config mock control\n */\n// TODO 动态域名切换shi'pei","suffix":"const DEV = process.env.NODE_ENV === 'development';\nconst BASE_URL = DEV\n  ? 'localhost:3000'\n  : `${window.location.protocol}//erup.10jqka.com.cn/platform/stockdiagnosefront/html`;\nconst DQ_HOST = '//apigate.10jqka.com.cn/d/platform/';\nconst EQ_HOST = '//eq.10jqka.com.cn/';\nconst ZX_HOST = '//zx.10jqka.com.cn';\nconst DATAQ_HOST = '//api.ainvest.com/od/mobileweb-indicator-api/';\nconst REQUESTTIMEOUT = 5000;\n\nexport default {\n  NCZG_HOST: `${DQ_HOST}`,\n  CONFIG_HOST: `${EQ_HOST}`,\n  ZX_HOST,\n  BASE_URL,\n  DATAQ_HOST,\n  REQUESTTIMEOUT,\n};\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":68,"suffix_tokens":161}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:17:42 [triggerCompletion] {"requestId":"d8e62b2b33b6ac24","request":{"prompt":"// Path: src/api/request/env.ts\n/*\n * api HOST 和 mock 配置\n *\n * @module api/host\n * @author liboshen <liboshen@myhexin.com>\n * @description define api host and config mock control\n */\n// TODO 动态域名切换适配","suffix":"const DEV = process.env.NODE_ENV === 'development';\nconst BASE_URL = DEV\n  ? 'localhost:3000'\n  : `${window.location.protocol}//erup.10jqka.com.cn/platform/stockdiagnosefront/html`;\nconst DQ_HOST = '//apigate.10jqka.com.cn/d/platform/';\nconst EQ_HOST = '//eq.10jqka.com.cn/';\nconst ZX_HOST = '//zx.10jqka.com.cn';\nconst DATAQ_HOST = '//api.ainvest.com/od/mobileweb-indicator-api/';\nconst REQUESTTIMEOUT = 5000;\n\nexport default {\n  NCZG_HOST: `${DQ_HOST}`,\n  CONFIG_HOST: `${EQ_HOST}`,\n  ZX_HOST,\n  BASE_URL,\n  DATAQ_HOST,\n  REQUESTTIMEOUT,\n};\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":68,"suffix_tokens":161}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:20:11 [showCompletion] {"requestId":"5030db3e5f1f702e","model":"codeqwenModel","text":" DO: 优化代码","finishReason":"stop"} 
  2024-08-28 16:20:11 [triggerCompletion] {"requestId":"5030db3e5f1f702e","request":{"prompt":"// Path: src/utils/const.ts\n// TO","suffix":"export const BASEITEM_WIDTH = 100; // 表头的基础项宽度\nexport const disabledIds = ['5', '3902222', '55', '8197']; // 分别对应统一版代码、名称code、远航版名称代码\nexport const MAX_HEADERS = 80; // 最大表头数\nexport const MAX_SCHEME_COUNT = 100; // 最大方案数\nexport const filePath = 'tableheader/sync/chat.json'; // 本地存储路径\nexport const version = '1.0.0'; // 本地对话缓存的版本号\nexport const DEBOUNCETIME = 300; // 防抖时间\nexport const uselessHeaderName = ['股票代码', '股票简称']; // 无用表头名称, 需要过滤的表头项，后续会推进接口改进处理掉\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":11,"suffix_tokens":211}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" DO: 优化代码","finishReason":"stop"}}} 
  2024-08-28 16:20:12 [triggerCompletion] {"requestId":"975d9aba7cf01e6b","request":{"prompt":"// Path: src/utils/const.ts\n// TOD","suffix":"export const BASEITEM_WIDTH = 100; // 表头的基础项宽度\nexport const disabledIds = ['5', '3902222', '55', '8197']; // 分别对应统一版代码、名称code、远航版名称代码\nexport const MAX_HEADERS = 80; // 最大表头数\nexport const MAX_SCHEME_COUNT = 100; // 最大方案数\nexport const filePath = 'tableheader/sync/chat.json'; // 本地存储路径\nexport const version = '1.0.0'; // 本地对话缓存的版本号\nexport const DEBOUNCETIME = 300; // 防抖时间\nexport const uselessHeaderName = ['股票代码', '股票简称']; // 无用表头名称, 需要过滤的表头项，后续会推进接口改进处理掉\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":11,"suffix_tokens":211}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" O: 优化代码","finishReason":"stop"}}} 
  2024-08-28 16:20:12 [showCompletion] {"requestId":"975d9aba7cf01e6b","model":"codeqwenModel","text":" O: 优化代码","finishReason":"stop"} 
  2024-08-28 16:20:12 [triggerCompletion] {"requestId":"4cb7f5d90e0ee6c7","request":{"prompt":"// Path: src/utils/const.ts\n// TODO ","suffix":"export const BASEITEM_WIDTH = 100; // 表头的基础项宽度\nexport const disabledIds = ['5', '3902222', '55', '8197']; // 分别对应统一版代码、名称code、远航版名称代码\nexport const MAX_HEADERS = 80; // 最大表头数\nexport const MAX_SCHEME_COUNT = 100; // 最大方案数\nexport const filePath = 'tableheader/sync/chat.json'; // 本地存储路径\nexport const version = '1.0.0'; // 本地对话缓存的版本号\nexport const DEBOUNCETIME = 300; // 防抖时间\nexport const uselessHeaderName = ['股票代码', '股票简称']; // 无用表头名称, 需要过滤的表头项，后续会推进接口改进处理掉\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":12,"suffix_tokens":211}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 优化代码，将所有常量定义放在一个文件中，并使用命名空间或模块来组织常量，以便于维护和管理。","finishReason":"stop"}}} 
  2024-08-28 16:20:12 [showCompletion] {"requestId":"4cb7f5d90e0ee6c7","model":"codeqwenModel","text":" 优化代码，将所有常量定义放在一个文件中，并使用命名空间或模块来组织常量，以便于维护和管理。","finishReason":"stop"} 
  2024-08-28 16:20:13 [triggerCompletion] {"requestId":"37df46ebf3113c49","request":{"prompt":"// Path: src/utils/const.ts\n// TODO z'g'y's'gu","suffix":"export const BASEITEM_WIDTH = 100; // 表头的基础项宽度\nexport const disabledIds = ['5', '3902222', '55', '8197']; // 分别对应统一版代码、名称code、远航版名称代码\nexport const MAX_HEADERS = 80; // 最大表头数\nexport const MAX_SCHEME_COUNT = 100; // 最大方案数\nexport const filePath = 'tableheader/sync/chat.json'; // 本地存储路径\nexport const version = '1.0.0'; // 本地对话缓存的版本号\nexport const DEBOUNCETIME = 300; // 防抖时间\nexport const uselessHeaderName = ['股票代码', '股票简称']; // 无用表头名称, 需要过滤的表头项，后续会推进接口改进处理掉\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":18,"suffix_tokens":211}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:20:14 [triggerCompletion] {"requestId":"1df99de74abe99f4","request":{"prompt":"// Path: src/utils/const.ts\n// TODO z","suffix":"export const BASEITEM_WIDTH = 100; // 表头的基础项宽度\nexport const disabledIds = ['5', '3902222', '55', '8197']; // 分别对应统一版代码、名称code、远航版名称代码\nexport const MAX_HEADERS = 80; // 最大表头数\nexport const MAX_SCHEME_COUNT = 100; // 最大方案数\nexport const filePath = 'tableheader/sync/chat.json'; // 本地存储路径\nexport const version = '1.0.0'; // 本地对话缓存的版本号\nexport const DEBOUNCETIME = 300; // 防抖时间\nexport const uselessHeaderName = ['股票代码', '股票简称']; // 无用表头名称, 需要过滤的表头项，后续会推进接口改进处理掉\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":12,"suffix_tokens":211}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" 添加注释","finishReason":"stop"}}} 
  2024-08-28 16:20:14 [vscodeShowCompletion] [{"insertText":"// TODO z 添加注释","range":[{"line":0,"character":0},{"line":0,"character":9}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"7ebc6ce3-309e-4212-878a-7ae084f8b485","insertText":"// TODO z 添加注释","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":9}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\utils\\const.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/utils/const.ts","path":"/d:/workspace/prompt-tableheader-front/src/utils/const.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"1df99de74abe99f4","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"tiy8urmr3udop0930re6b1kxbs8vk5rw","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":3,\"PathMarker\":9},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":1,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"2cf47339d53f38a499d7d48b8947218ebb5f78a6776e85709f01ef7fe43a0668\",\"55651e18ba9619970848e91898229dadf2a304ff5079de33c2c68c040768d7c3\",\"d87e398f297d0a259f87b3c95d02f8a395d441c6abefb509ee5ae5e24b03b550\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"b822d7b3-2bef-493f-98b4-bfc480a10e64","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-159e4e66a3274ec89efbaa7a96f26a96","created":"1724833218","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":37,"promptSuffixCharLen":455,"promptEndPos":9,"documentLength":465,"delayMs":0,"promptComputeTimeMs":4,"contextualFilterScore":0.5838970178451317,"timeSinceIssuedMs":6,"current_time":1724833214,"numTokens":3,"compCharLen":5,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724833214326,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" 添加注释","position":{"line":0,"character":9},"offset":9,"resultType":0}]}}] 
  2024-08-28 16:20:14 [showCompletion] {"requestId":"1df99de74abe99f4","model":"codeqwenModel","text":" 添加注释","finishReason":"stop"} 
  2024-08-28 16:20:15 [triggerCompletion] {"requestId":"6b9ddb79def77364","request":{"prompt":"// Path: src/utils/const.ts\n// TODO zhu'sh","suffix":"export const BASEITEM_WIDTH = 100; // 表头的基础项宽度\nexport const disabledIds = ['5', '3902222', '55', '8197']; // 分别对应统一版代码、名称code、远航版名称代码\nexport const MAX_HEADERS = 80; // 最大表头数\nexport const MAX_SCHEME_COUNT = 100; // 最大方案数\nexport const filePath = 'tableheader/sync/chat.json'; // 本地存储路径\nexport const version = '1.0.0'; // 本地对话缓存的版本号\nexport const DEBOUNCETIME = 300; // 防抖时间\nexport const uselessHeaderName = ['股票代码', '股票简称']; // 无用表头名称, 需要过滤的表头项，后续会推进接口改进处理掉\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":15,"suffix_tokens":211}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" i","finishReason":"stop"}}} 
  2024-08-28 16:20:15 [showCompletion] {"requestId":"6b9ddb79def77364","model":"codeqwenModel","text":" i","finishReason":"stop"} 
  2024-08-28 16:20:15 [vscodeShowCompletion] [{"insertText":"// TODO zhu'sh i","range":[{"line":0,"character":0},{"line":0,"character":14}],"command":{"title":"PostInsertTask","command":"_github.copilot.ghostTextPostInsert","arguments":[{"uuid":"01b041e9-72cc-46b5-a7b8-adae4578a614","insertText":"// TODO zhu'sh i","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":14}},"file":{"$mid":1,"fsPath":"d:\\workspace\\prompt-tableheader-front\\src\\utils\\const.ts","_sep":1,"external":"file:///d%3A/workspace/prompt-tableheader-front/src/utils/const.ts","path":"/d:/workspace/prompt-tableheader-front/src/utils/const.ts","scheme":"file"},"index":0,"telemetry":{"properties":{"headerRequestId":"6b9ddb79def77364","github_copilot_inlineSuggest_enable":"true","copilot_build":"1014","copilot_buildType":"prod","copilot_trackingId":"tiy8urmr3udop0930re6b1kxbs8vk5rw","sku":"monthly_subscriber","languageId":"typescript","beforeCursorWhitespace":"false","afterCursorWhitespace":"true","promptChoices":"{\"used\":{\"BeforeCursor\":6,\"PathMarker\":9},\"unused\":{\"LanguageMarker\":6},\"usedCounts\":{\"BeforeCursor\":1,\"PathMarker\":1},\"unusedCounts\":{\"LanguageMarker\":1}}","promptBackground":"{\"used\":[],\"unused\":[]}","neighborSource":"[[\"opentabs\",[\"2cf47339d53f38a499d7d48b8947218ebb5f78a6776e85709f01ef7fe43a0668\",\"55651e18ba9619970848e91898229dadf2a304ff5079de33c2c68c040768d7c3\",\"d87e398f297d0a259f87b3c95d02f8a395d441c6abefb509ee5ae5e24b03b550\"]]]","gitRepoInformation":"available","gitRepoUrl":"http://gitlab.myhexin.com/10jqka/quote/b2cweb/free/prompt-tableheader-front","gitRepoHost":"gitlab.myhexin.com","gitRepoOwner":"10jqka/quote/b2cweb/free","gitRepoName":"prompt-tableheader-front","gitRepoPath":"/10jqka/quote/b2cweb/free/prompt-tableheader-front","engineName":"copilot-codex","isMultiline":"false","blockMode":"parsingandserver","isCycling":"false","editor_version":"vscode/1.92.2","editor_plugin_version":"copilot/1.219.0","client_machineid":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","client_sessionid":"64b59242-9b89-40e6-b4c0-b08f236105341724830068519","copilot_version":"copilot/1.219.0","runtime_version":"node/20.14.0","common_extname":"copilot","common_extversion":"1.219.0","common_vscodeversion":"vscode/1.92.2","fetcher":"HelixFetcher","proxy_enabled":"false","proxy_auth":"false","proxy_kerberos_spn":"false","reject_unauthorized":"false","VSCode.ABExp.Features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService","abexp.assignmentcontext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","fileType":"typescript","timeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","unique_id":"fb49e9f7-8ac3-4b0c-86e2-cc4dcf62dd61","endpoint":"completions","uiKind":"ghostText","temperature":"0","n":"1","stop":"[\"\\n\"]","logit_bias":"null","choiceIndex":"0","completionId":"cmpl-d5389e17a965450d939e5b3f0966aff4","created":"1724833219","serverExperiments":"","deploymentId":""},"measurements":{"promptPrefixCharLen":42,"promptSuffixCharLen":455,"promptEndPos":14,"documentLength":470,"delayMs":0,"promptComputeTimeMs":3,"contextualFilterScore":0.668402224723008,"timeSinceIssuedMs":5,"current_time":1724833215,"numTokens":1,"compCharLen":2,"numLines":1,"confidence":null,"quantile":null},"issuedTime":1724833215550,"filtersAndExp":{"filters":{"filters":{"X-MSEdge-ClientId":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4","X-VSCode-TargetPopulation":"public","X-VSCode-ExtensionName":"copilot","X-VSCode-ExtensionVersion":"1.219.0","X-VSCode-Build":"vscode","X-VSCode-AppVersion":"1.92.2","X-Copilot-FileType":"typescript","X-Copilot-ClientTimeBucket":"704b591d9fa02ca7f2ef758c191f51e686996b3d777fd4d6eff4610ed99ebba4"}},"exp":{"variables":{"aa_t_chat":true,"account-aa":false,"config.editor.experimental.asyncTokenization":true,"copilotcachereferencetokens":true,"copilotchat.renameSuggestionsDelayBeforeFetch":50,"copilotcppheaders":true,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true},"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593cf:30376535;c4g48928:30535728;asynctok:30898717;aa_t_chat:31080850;f3je6385:31013174;vsc_trt_9033:31086482;reftokenstreat:31111842;","features":"aa_t_chat;account-aacf;config.editor.experimental.asyncTokenization;copilotcachereferencetokens;copilotchat.renameSuggestionsDelayBeforeFetch;copilotcppheaders;livesharecontinuousaacf;mindaroBinariesVersion;portForwardingServiceEnabled-development;portForwardingServiceEnabled-production;portForwardingServiceEnabled-staging;shouldUseGrpcService"}}},"displayText":" i","position":{"line":0,"character":14},"offset":14,"resultType":0}]}}] 
  2024-08-28 16:20:16 [triggerCompletion] {"requestId":"7398799a1fa24298","request":{"prompt":"// Path: src/utils/const.ts\n// TODO 注释","suffix":"export const BASEITEM_WIDTH = 100; // 表头的基础项宽度\nexport const disabledIds = ['5', '3902222', '55', '8197']; // 分别对应统一版代码、名称code、远航版名称代码\nexport const MAX_HEADERS = 80; // 最大表头数\nexport const MAX_SCHEME_COUNT = 100; // 最大方案数\nexport const filePath = 'tableheader/sync/chat.json'; // 本地存储路径\nexport const version = '1.0.0'; // 本地对话缓存的版本号\nexport const DEBOUNCETIME = 300; // 防抖时间\nexport const uselessHeaderName = ['股票代码', '股票简称']; // 无用表头名称, 需要过滤的表头项，后续会推进接口改进处理掉\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":13,"suffix_tokens":211}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:20:17 [triggerCompletion] {"requestId":"50a80e263efaac6c","request":{"prompt":"// Path: src/utils/const.ts\n// TODO 注释风格","suffix":"export const BASEITEM_WIDTH = 100; // 表头的基础项宽度\nexport const disabledIds = ['5', '3902222', '55', '8197']; // 分别对应统一版代码、名称code、远航版名称代码\nexport const MAX_HEADERS = 80; // 最大表头数\nexport const MAX_SCHEME_COUNT = 100; // 最大方案数\nexport const filePath = 'tableheader/sync/chat.json'; // 本地存储路径\nexport const version = '1.0.0'; // 本地对话缓存的版本号\nexport const DEBOUNCETIME = 300; // 防抖时间\nexport const uselessHeaderName = ['股票代码', '股票简称']; // 无用表头名称, 需要过滤的表头项，后续会推进接口改进处理掉\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":16,"suffix_tokens":211}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  2024-08-28 16:20:17 [triggerCompletion] {"requestId":"06d685eaa389c543","request":{"prompt":"// Path: src/utils/const.ts\n// TODO 注释风格修改","suffix":"export const BASEITEM_WIDTH = 100; // 表头的基础项宽度\nexport const disabledIds = ['5', '3902222', '55', '8197']; // 分别对应统一版代码、名称code、远航版名称代码\nexport const MAX_HEADERS = 80; // 最大表头数\nexport const MAX_SCHEME_COUNT = 100; // 最大方案数\nexport const filePath = 'tableheader/sync/chat.json'; // 本地存储路径\nexport const version = '1.0.0'; // 本地对话缓存的版本号\nexport const DEBOUNCETIME = 300; // 防抖时间\nexport const uselessHeaderName = ['股票代码', '股票简称']; // 无用表头名称, 需要过滤的表头项，后续会推进接口改进处理掉\n","max_tokens":500,"temperature":0,"top_p":1,"n":1,"stop":["\n"],"stream":true,"extra":{"language":"typescript","next_indent":0,"trim_by_indentation":true,"prompt_tokens":17,"suffix_tokens":211}},"responses":{"codeqwenModel":{"response":{"status":200,"statusText":"success","headers":{}},"data":" ","finishReason":"stop"}}} 
  