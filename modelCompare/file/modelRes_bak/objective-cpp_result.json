[{"prefix":"\n#import \"FullScreenTipView.h\"\n#import \"CoverViewHideManageCenter.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n\n@interface FullScreenTipView ()\n@property (nonatomic, strong) UIView *eqwindow;\n@end\n\n@implementation FullScreenTipView\n\n- (instancetype)initWithDelegate:(id<FullScreenTipViewDelegate>)delegate {\n    return [self initWithAlpha:0.6 delegate:delegate];\n}\n\n- (instancetype)initWithAlpha:(float)alpha delegate:(id<FullScreenTipViewDelegate>)delegate {\n    self = [self initWithFrame:c];\n    if (self) {\n        self.delegate = delegate;\n        if (delegate) {\n            self.userInteractionEnabled = YES;\n        }\n        [self setBackgroundColor:[UIColor colorWithRed:0 green:0 blue:0 alpha:alpha]];\n        self.donotChangeSubviewTheme = YES;\n        self.donotChangeSelfTheme = YES;\n        if (@available(iOS 13.0, *)) {\n            self.overrideUserInterfaceStyle = UIUserInterfaceStyleLight;\n        }\n    }\n    return self;\n}\n\n- (void)addToEqWindow {\n    [self.eqwindow addSubview:self];\n}\n\n- (void)layoutSubviews {\n    [super layoutSubviews];\n    if (!CGRectEqualToRect(self.frame, self.eqwindow.frame)) {\n        [super setFrame:self.eqwindow.frame];\n    }\n}\n\n- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event {\n    [super touchesEnded:touches withEvent:event];\n    self.clickPoint = [[touches anyObject] locationInView:self];\n    if(_delegate && [_delegate respondsToSelector:@selector(clickedTipView:)]) {\n        [_delegate clickedTipView:self];\n    }\n}\n\n@end\n\n@implementation FullScreenTipViewA\n- (void)willMoveToSuperview:(UIView *)newSuperview {\n    [super willMoveToSuperview:newSuperview];\n    if (newSuperview != nil) {\n        [self registerself];\n        self.donotChangeSubviewTheme = YES;\n        self.donotChangeSelfTheme = YES;\n        if (@available(iOS 13.0, *)) {\n            self.overrideUserInterfaceStyle = UIUserInterfaceStyleLight;\n        }\n    }    \n}\n\n- (void)removeFromSuperview {\n    [super removeFromSuperview];\n    [self unregisterself];\n}\n\n- (void)registerself {\n     [[CoverViewHideManageCenter shareCenter] registerCoverView:self];\n}\n\n- (void)unregisterself {\n    [[CoverViewHideManageCenter shareCenter] unregisterCoverView:self];\n}\n\n#pragma mark - HideCoverViewProtocol\n- (BOOL)coverviewIsFree:(id)cover {\n    if ([self.manager respondsToSelector:@selector(coverviewIsFree:)]) {\n        return  [self.manager coverviewIsFree:cover];\n    } else {\n        return NO;\n    }\n}\n\n- (NSDictionary*)coverview:(id)cover snapshotCurrentContext:(NSDictionary *)defaultCtx {\n    if ([self.manager respondsToSelector:@selector(coverview:snapshotCurrentContext:)]) {\n        return [self.manager coverview:cover snapshotCurrentContext:defaultCtx];\n    } else {\n        return defaultCtx;\n    }\n}\n\n- (void)coverview:(id)cover contextChanged:(NSDictionary *)currentCtx previousContext:(NSDictionary *)previousCtx {\n    if ([self.manager respondsToSelector:@selector(coverview:contextChanged:previousContext:)]) {\n        [self.manager coverview:cover contextChanged:currentCtx previousContext:previousCtx];\n    } else {\n        [self removeFromSuperview];\n    }\n}\n\n- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer {\n    return NO;\n}\n\n- (UIView *)eqwindow {\n    if ","infill":"(!_eqwindow) {\r\n        NSArray *currentWindows = [UIApplication sharedApplicati","suffix":"on].windows;\r\n        for (UIWindow *window in currentWindows) {\r\n            if ([window isKindOfClass:NSClassFromString(@\"EQUIWindow\")]) {\r\n                _eqwindow = window;\r\n                break;\r\n            }\r\n        }\r\n        if (!_eqwindow) {\r\n            _eqwindow = [UIApplication sharedApplication].keyWindow;\r\n        }\r\n    }\r\n    return _eqwindow;\r\n}\r\n\r\n@end\r\n","relevantFile":"","relevantFileList":[],"filePath":"FullScreenTipView.mm","template":"objective-cpp","multiRes":{"hipilot":"(!_eqwindow) {\n        NSArray *currentWindows = [UIApplication sharedApplicati","deepseek-chat-lite":"(!_eqwindow) {","CodeQwen2.5-7B":"(!_eqwindow) {\r","copilot":"(!_eqwindow) {\r\n        NSArray *currentWindows = [UIApplication sharedApplicati"}},{"prefix":"\n#import \"FullScreenTipView.h\"\n#import \"CoverViewHideManageCenter.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n\n@interface FullScreenTipView ()\n@property (nonatomic, strong) UIView *eqUI","infill":"Window;\r\n@end\r\n\r\n@implementation FullScreenTipVie","suffix":"w\r\n\r\n- (instancetype)initWithDelegate:(id<FullScreenTipViewDelegate>)delegate {\r\n    return [self initWithAlpha:0.6 delegate:delegate];\r\n}\r\n\r\n- (instancetype)initWithAlpha:(float)alpha delegate:(id<FullScreenTipViewDelegate>)delegate {\r\n    self = [self initWithFrame:self.eqwindow.bounds];\r\n    if (self) {\r\n        self.delegate = delegate;\r\n        if (delegate) {\r\n            self.userInteractionEnabled = YES;\r\n        }\r\n        [self setBackgroundColor:[UIColor colorWithRed:0 green:0 blue:0 alpha:alpha]];\r\n        self.donotChangeSubviewTheme = YES;\r\n        self.donotChangeSelfTheme = YES;\r\n        if (@available(iOS 13.0, *)) {\r\n            self.overrideUserInterfaceStyle = UIUserInterfaceStyleLight;\r\n        }\r\n    }\r\n    return self;\r\n}\r\n\r\n- (void)addToEqWindow {\r\n    [self.eqwindow addSubview:self];\r\n}\r\n\r\n- (void)layoutSubviews {\r\n    [super layoutSubviews];\r\n    if (!CGRectEqualToRect(self.frame, self.eqwindow.frame)) {\r\n        [super setFrame:self.eqwindow.frame];\r\n    }\r\n}\r\n\r\n- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event {\r\n    [super touchesEnded:touches withEvent:event];\r\n    self.clickPoint = [[touches anyObject] locationInView:self];\r\n    if(_delegate && [_delegate respondsToSelector:@selector(clickedTipView:)]) {\r\n        [_delegate clickedTipView:self];\r\n    }\r\n}\r\n\r\n@end\r\n\r\n@implementation FullScreenTipViewA\r\n- (void)willMoveToSuperview:(UIView *)newSuperview {\r\n    [super willMoveToSuperview:newSuperview];\r\n    if (newSuperview != nil) {\r\n        [self registerself];\r\n        self.donotChangeSubviewTheme = YES;\r\n        self.donotChangeSelfTheme = YES;\r\n        if (@available(iOS 13.0, *)) {\r\n            self.overrideUserInterfaceStyle = UIUserInterfaceStyleLight;\r\n        }\r\n    }    \r\n}\r\n\r\n- (void)removeFromSuperview {\r\n    [super removeFromSuperview];\r\n    [self unregisterself];\r\n}\r\n\r\n- (void)registerself {\r\n     [[CoverViewHideManageCenter shareCenter] registerCoverView:self];\r\n}\r\n\r\n- (void)unregisterself {\r\n    [[CoverViewHideManageCenter shareCenter] unregisterCoverView:self];\r\n}\r\n\r\n#pragma mark - HideCoverViewProtocol\r\n- (BOOL)coverviewIsFree:(id)cover {\r\n    if ([self.manager respondsToSelector:@selector(coverviewIsFree:)]) {\r\n        return  [self.manager coverviewIsFree:cover];\r\n    } else {\r\n        return NO;\r\n    }\r\n}\r\n\r\n- (NSDictionary*)coverview:(id)cover snapshotCurrentContext:(NSDictionary *)defaultCtx {\r\n    if ([self.manager respondsToSelector:@selector(coverview:snapshotCurrentContext:)]) {\r\n        return [self.manager coverview:cover snapshotCurrentContext:defaultCtx];\r\n    } else {\r\n        return defaultCtx;\r\n    }\r\n}\r\n\r\n- (void)coverview:(id)cover contextChanged:(NSDictionary *)currentCtx previousContext:(NSDictionary *)previousCtx {\r\n    if ([self.manager respondsToSelector:@selector(coverview:contextChanged:previousContext:)]) {\r\n        [self.manager coverview:cover contextChanged:currentCtx previousContext:previousCtx];\r\n    } else {\r\n        [self removeFromSuperview];\r\n    }\r\n}\r\n\r\n- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer {\r\n    return NO;\r\n}\r\n\r\n- (UIView *)eqUIWindow {\r\n    if (!_eqUIWindow) {\r\n        NSArray *currentWindows = [UIApplication sharedApplication].windows;\r\n        for (UIWindow *window in currentWindows) {\r\n            if ([window isKindOfClass:NSClassFromString(@\"EQUIWindow\")]) {\r\n                _eqUIWindow = window;\r\n                break;\r\n            }\r\n        }\r\n        if (!_eqwindow) {\r\n            _eqUIWindow = [UIApplication sharedApplication].keyWindow;\r\n        }\r\n    }\r\n    return _eqUIWindow;\r\n}\r\n\r\n@end\r\n","relevantFile":"","relevantFileList":[],"filePath":"FullScreenTipView.mm","template":"objective-cpp","multiRes":{"hipilot":"Window;","deepseek-chat-lite":"Window;","CodeQwen2.5-7B":"Windo<|file_sep|><|fim_prefix|>/README.md","copilot":"Window;\r\n@end\r\n\r\n@implementation FullScreenTipVie"}},{"prefix":"\n#import \"FullScreenTipView.h\"\n#import \"CoverViewHideManageCenter.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n\n@interface FullScreenTipView ()\n@property (nonatomic, strong) UIView *","infill":"eqwindow;\r\n@end\r\n\r\n@implementation FullScreenTi","suffix":"pView\r\n\r\n- (instancetype)initWithDelegate:(id<FullScreenTipViewDelegate>)delegate {\r\n    return [self initWithAlpha:0.6 delegate:delegate];\r\n}\r\n\r\n- (instancetype)initWithAlpha:(float)alpha delegate:(id<FullScreenTipViewDelegate>)delegate {\r\n    self = [self initWithFrame:self.eqwindow.bounds];\r\n    if (self) {\r\n        self.delegate = delegate;\r\n        if (delegate) {\r\n            self.userInteractionEnabled = YES;\r\n        }\r\n        [self setBackgroundColor:[UIColor colorWithRed:0 green:0 blue:0 alpha:alpha]];\r\n        self.donotChangeSubviewTheme = YES;\r\n        self.donotChangeSelfTheme = YES;\r\n        if (@available(iOS 13.0, *)) {\r\n            self.overrideUserInterfaceStyle = UIUserInterfaceStyleLight;\r\n        }\r\n    }\r\n    return self;\r\n}\r\n\r\n- (void)addToEqWindow {\r\n    [self.eqwindow addSubview:self];\r\n}\r\n\r\n- (void)layoutSubviews {\r\n    [super layoutSubviews];\r\n    if (!CGRectEqualToRect(self.frame, self.eqwindow.frame)) {\r\n        [super setFrame:self.eqwindow.frame];\r\n    }\r\n}\r\n\r\n- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event {\r\n    [super touchesEnded:touches withEvent:event];\r\n    self.clickPoint = [[touches anyObject] locationInView:self];\r\n    if(_delegate && [_delegate respondsToSelector:@selector(clickedTipView:)]) {\r\n        [_delegate clickedTipView:self];\r\n    }\r\n}\r\n\r\n@end\r\n\r\n@implementation FullScreenTipViewA\r\n- (void)willMoveToSuperview:(UIView *)newSuperview {\r\n    [super willMoveToSuperview:newSuperview];\r\n    if (newSuperview != nil) {\r\n        [self registerself];\r\n        self.donotChangeSubviewTheme = YES;\r\n        self.donotChangeSelfTheme = YES;\r\n        if (@available(iOS 13.0, *)) {\r\n            self.overrideUserInterfaceStyle = UIUserInterfaceStyleLight;\r\n        }\r\n    }    \r\n}\r\n\r\n- (void)removeFromSuperview {\r\n    [super removeFromSuperview];\r\n    [self unregisterself];\r\n}\r\n\r\n- (void)registerself {\r\n     [[CoverViewHideManageCenter shareCenter] registerCoverView:self];\r\n}\r\n\r\n- (void)unregisterself {\r\n    [[CoverViewHideManageCenter shareCenter] unregisterCoverView:self];\r\n}\r\n\r\n#pragma mark - HideCoverViewProtocol\r\n- (BOOL)coverviewIsFree:(id)cover {\r\n    if ([self.manager respondsToSelector:@selector(coverviewIsFree:)]) {\r\n        return  [self.manager coverviewIsFree:cover];\r\n    } else {\r\n        return NO;\r\n    }\r\n}\r\n\r\n- (NSDictionary*)coverview:(id)cover snapshotCurrentContext:(NSDictionary *)defaultCtx {\r\n    if ([self.manager respondsToSelector:@selector(coverview:snapshotCurrentContext:)]) {\r\n        return [self.manager coverview:cover snapshotCurrentContext:defaultCtx];\r\n    } else {\r\n        return defaultCtx;\r\n    }\r\n}\r\n\r\n- (void)coverview:(id)cover contextChanged:(NSDictionary *)currentCtx previousContext:(NSDictionary *)previousCtx {\r\n    if ([self.manager respondsToSelector:@selector(coverview:contextChanged:previousContext:)]) {\r\n        [self.manager coverview:cover contextChanged:currentCtx previousContext:previousCtx];\r\n    } else {\r\n        [self removeFromSuperview];\r\n    }\r\n}\r\n\r\n- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer {\r\n    return NO;\r\n}\r\n\r\n// - (UIView *)  return _eqwindow;\r\n- (UIView *)\r\n//}\r\n\r\n@end\r\n","relevantFile":"","relevantFileList":[],"filePath":"FullScreenTipView.mm","template":"objective-cpp","multiRes":{"hipilot":"backgroudView;\n@property (nonatomic, strong) UIButton *closeButton;\n@property (nonatomic, assign) id<FullScreenTipViewDelegate> delegate;\n@end\n\n@implementation FullScreenTi","deepseek-chat-lite":"eqwindow;","CodeQwen2.5-7B":"eqwindow;\r","copilot":"eqwindow;\r\n@end\r\n\r\n@implementation FullScreenTi"}},{"prefix":"    [LJWebClientIdentification sharedInstance];\n    // 行情日志监控\n    [LJTCPLogManager shareInstance];\n    // 自定义用户权限\n    [[LJUserPermissionPushManager shared] registerPush];\n    // 交易日志\n    (void)[HXTradeDailyDataManager shared];\n    (void)[HXTradePushDailyDataManager shared];\n    \n    // 网格监听\n    [[CTMediator sharedInstance] GridTrade_registerNotification];\n\n    // 画线同步\n    [LJDrawLinePushManage sharedInstance];\n    \n    // 常用指标\n    (void)[LJCommonIndicatorsManage shared];\n    // 指标同步\n    [LJIndicatorPushManage sharedInstance];\n    \n    \n    [PhoneNumLoginManager getPhoneNumberWithTimeout:5 completion:^(NSString * _Nullable phoneNum, NSString * _Nullable accessCode, NSString * _Nullable gwAuth) {\n        if (phoneNum != nil) {\n            [[NSUserDefaults standardUserDefaults] setObject:phoneNum forKey:KEY_PHONE_NUM];\n        } else {\n            [[NSUserDefaults standardUserDefaults] removeObjectForKey:KEY_PHONE_NUM];\n        }\n    }];\n    \n    [[HXCapitalLuaUpdateManager shared] registerPushProcessor];\n\n// 暂时不需要投顾，需要更换kAppId kAppSecret\n//    [[HXIMClient sharedClient] initClientWithAppId:kAppId withAppSecret:kAppSecret];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(startUrlProtocol:) name:KEY_IS_SHOW_URL object:nil];\n    \n    [self registScreenShotNotification];\n    [self registerActionNotification];\n    [self registerSafeProtectorNotification];\n    \n    self.window.backgroundColor = THEMECOLOR(BackgroundTwoAppColor);\n    // 设置全局弹窗黑白版背景色和字体色\n    [[ToastManagerPool sharedToastManagerPool] setToastBackgroundColor:HXUIColor.JiaoYiHandKeyBoardText\n                                                             textColor:HXUIColor.CharacterZeroAppColor];\n    /// 请求隐私协议地址\n    [[LJRequestURLConfigManager sharedInstance] requestPrivacyAndUser];\n    [self initRootViewController];\n\n#if defined DEBUG\n    [[HXPerformanceCenter sharedInstance] enable];\n#endif\n    \n//特殊包测试代码\n#if defined(DEBUGTOOL)\n    if ([HXTradeDevelopTool share].showDebugEntranceWhenAppLaunch) {\n        [[HXPerformanceCenter sharedInstance] enable];\n    }\n    \n    // 添加仿真柜台\n    [[HXTradeDevelopTool share] configTestCounter];\n    [[NSBundle bundleWithPath:@\"/Applications/InjectionIII.app/Contents/Resources/iOSInjection.bundle\"] load];\n#endif\n\n    [self checkUserNotifiction];\n    NSString *userid = [[CTMediator sharedInstance] SocketFetcherHandler_getUserId];\n    NSLog(@\"useriduseriduserid:%@\", userid);\n    \n    [IQKeyboardManager sharedManager].enableAutoToolbar = NO;\n    \n    // 画线配置\n    [self registerDrawLine];\n    // 画线分享配置\n    [self registerDrawLineShare];\n    \n    [LJFloatingADManager shared].delegate = [LJFloatingADBridge shared];\n    \n    // 初始化ua\n    [self initUserAgent];\n    \n    return YES;\n}\n\n/// 检测系统消息通知是否开启并发送埋点\n- (void)checkUserNotifiction {\n    if (IS_SYSTEM_BEYOND_IOS10) {\n        [[UNUserNotificationCenter currentNotificationCenter] getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) {\n              if (settings.authorizationStatus == UNAuthorizationStatusAuthorized) {\n                // 开启状态\n                [self sendNotificationStatus:YES];\n            } else {\n                // 关闭状态\n                [self sendNotificationStatus:NO];\n            }\n        }];\n    } else if (IS_SYSTEM_BEYOND_IOS8) {\n        if ([[UIApplication sharedApplication] isRegisteredForRemoteNotifications]) {\n            // 开启\n            [self sendNotificationStatus:YES];\n        } else {\n            // 关闭\n            [self sendNotificationStatus:NO];\n        }\n    }\n}\n\n/// 发送推送开启状态埋点\n/// @param isOpen 推送是否开启\n- (void)sendNotificationStatus:(BOOL)isOpen {\n    // 记录是开启还是关闭\n    [ClientUserBehaviorLog sendLogWithLogobject:isOpen ? LOG_PUSH_OPEN : LOG_PUSH_CLOSE];\n    \n    // 记录是由开启->关闭 或者 关闭->开启\n    if ([[UserDefaultsPool sharedUserDefaultsPool] objectForKey:LogPushStatus] && [[[UserDefaultsPool sharedUserDefaultsPool] objectForKey:LogPushStatus] boolValue] == isOpen) {\n        return ;\n    }\n    [[UserDefaultsPool sharedUserDefaultsPool] setObject:@(isOpen) forKey:LogPushStatus];\n\n    [ClientUserBehaviorLog sendLogWithLogobject:isOpen ? LOG_PUSH_CHANGE_OPEN : LOG_PUSH_CHANGE_CLOSE];\n\n}\n\n/*\n CTCellularData在iOS9之前是私有类，权限设置是iOS10开始的，所以App Store审核没有问题\n 获取网络权限状态\n */\n- (void)networkStatus:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    //2.根据权限执行相应的交互\n    CTCellularData *cellularData = [[CTCellularData alloc] init];\n    \n    /*\n     此函数会在网络权限改变时再次调用\n     */\n    WEAKSELF\n    cellularData.cellularDataRestrictionDidUpdateNotifier = ^(CTCellularDataRestrictedState state) {\n        switch (state) {\n            case kCTCellularDataRestricted:\n                \n                HXLogInfo(kQHGlobal, @\"network restricted\");\n                //2.1权限关闭的情况下 再次请求网络数据会弹出设置网络提示\n                \n                break;\n            case kCTCellularDataNotRestricted:\n            {\n                HXLogInfo(kQHGlobal, @\"network notRestricted\");\n                //2.2已经开启网络权限\n                dispatch_async(weakSelf.analysisQueue, ^{\n                    [weakSelf analysisPasteboard];\n                });\n                [[LJRequestURLConfigManager sharedInstance] requestPrivacyAndUser];\n                // 获取网络权限后重新初始化合约代码表, 获取网络权限后直接调用，里面获取是否有网络返回的是没网络，所以加个延迟调用\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    [self registerStockCodeTable];\n                });\n                break;\n            }\n            case kCTCellularDataRestrictedStateUnknown:\n                HXLogInfo(kQHGlobal, @\"network Unknown\");\n                //2.3未知情况 （还没有遇到推测是有网络但是连接不正常的情况下）\n                \n                break;\n                \n            default:\n                break;\n        }\n    };\n}\n\n- (void)startUrlProtocol:(NSNotification *)notification {\n    NSString *isShowUrl = notification.object;\n    if ([isShowUrl intValue] == 1) {\n        [HXURLProtocol start];\n    }else{\n        [HXURLProtocol stop];\n    }\n}\n\n- (void)registerStockCodeTable {\n    // 无网络时只注册elk，不发送请求\n    if (![LJSystemGeneralContent isConnectionAvailable]) {\n        [LJStockCodeTableManage share].sendElkBlock = ^(NSDictionary * _Nonnull params) {\n            [self sendStockCodeTableElk:params];\n        };\n        return;\n    }\n    \n    // 获取网络权限后重新初始化合约代码表\n    [LJStockCodeTable registerStockCodeTableBySendElkBlock:^(NSDictionary * _Nonnull params) {\n        [self sendStockCodeTableElk:params];\n    } stockRequestCompletion:^(BOOL isSuccess) {\n        \n    } varietyRequestCompletion:^(BOOL isSuccess) {\n        \n    }];\n}\n\n- (void)sendStockCodeTableElk:(NSDictionary * _Nonnull)params{\n    Log(LJStockCodeTableELKBt, LJStockCodeTableELKTrace, params);\n}\n\n- (void)applicationWillResignActive:(UIApplication *)application {\n    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.\n    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.\n}\n\n- (void)applicationDidEnterBackground:(UIApplication *)application {\n    [HXEnvManager getDataBaseService]->writeHistoryStocksToLocal();\n    HXLogInfo(kQHGlobal, @\"app 已经进入后台\");\n    //! 保存行为收集的纪录\n    [AMCollectUserBehavior saveActionRecord];\n    \n    //储存指标数据到本地\n    [[LJTechDataManage sharedInstance] archiveTechData];\n    \n    // 添加时间自动登录时间记录\n    [[HXTradeAutoLoginManager shared] updateEnterBackgroundDateWithDate:[NSDate date]];\n}\n\n- (void)applicationWillEnterForeground:(UIApplication *)application {\n    application.applicationIconBadgeNumber = 0;\n    HXLogInfo(kQHGlobal, @\"app 即将进入前台\");\n    // sdk心跳检测，判断sdk断连情况\n    [HXTradeClientSDK checkSpiHeartBeat];\n}\n\n- (void)a","infill":"\n            }\n        } else if ([_in","suffix":"foMsgPush.TY isEqualToString:LJPushedTypeUserPermission] && _infoMsgPush.U.length > 0) {\n            [self openUrlMessagePush];\n        } else {\n            if ([_infoMsgPush.pushType isEqualToString:@\"feedback\"]) {\n                [[FeedBackManager shared] goFeedBackList:_infoMsgPush.U];\n            }\n        }\n    }\n}\n\n- (BOOL)isSameTradeAccount {\n    return _infoMsgPush.tradeNoForHuiBao.length > 0 &&\n    [MePool sharedMePool].transactionAccountID.length > 0 &&\n    [[MePool sharedMePool].transactionAccountID isEqualToString:_infoMsgPush.tradeNoForHuiBao];\n}\n\n- (NSString *)getTabIndexWithInfoType:(NSString *)type {\n    NSInteger index = [type integerValue];\n    switch (index) {\n        case 1:\n            return @\"2\";//委托回报跳转到挂单\n            break;\n        case 2:\n            return @\"4\";//成交回报跳转到成交\n            break;\n        case 3:\n            return @\"3\";//撤单回报跳转到委托\n            break;\n        default:\n            return @\"1\";//默认跳转\n            break;\n    }\n}\n\n- (void)hidenSwitchlistView {\n    for (UIView *viewController in [[UIViewController getCurNavUIViewController].tabBarController.view subviews]) {\n        if ([viewController isKindOfClass:[UIControl class]]) {\n            for (UIView *view in [viewController subviews]) {\n                if ([view isKindOfClass:[SwitchAccountListView class]]) {\n                    [(SwitchAccountListView *)view hide];\n                    break;\n                }\n            }\n        }\n    }\n    \n}\n\n- (void)zyzsPushJump {\n    MePool *mePool = [MePool sharedMePool];\n    if ([mePool isTransactionLogined]) {\n        if ([mePool.transactionAccountID isEqualToString:_infoMsgPush.tradeno] && [mePool.transactionQsid isEqualToString:_infoMsgPush.qsid]) {\n            if ([_infoMsgPush.F isEqualToString:[NSString stringWithFormat:@\"%d\",TradeXiaDanView]]) {\n                NSDictionary *parmaa = @{@\"webid\":[NSString stringWithFormat:@\"%d\",TradeXiaDanView]};\n                [[[JumpTool alloc] init] jumpToViewControllerWithFrameID:[NSString stringWithFormat:@\"%d\",TradeXiaDanView] withParms:parmaa];\n            } else {\n                NSDictionary *parma = @{@\"webid\": _infoMsgPush.F};\n                [[[JumpTool alloc] init] jumpToViewControllerWithFrameID:_infoMsgPush.F withParms:parma];\n            }\n        } else {\n            self.tradeAccount = _infoMsgPush.tradeno;\n            self.tradeAccountQSID = _infoMsgPush.qsid;\n            self.tradeAccountWTID = _infoMsgPush.wtid;\n            [mePool exitTransactionLogin];\n            MainTabbarController *tabBarController = (MainTabbarController *)[UIViewController getCurNavUIViewController].tabBarController;\n            if (tabBarController.selectedIndex == [tabBarController tradeTabIndex]) {\n                [[UIViewController getCurNavUIViewController].navigationController popToRootViewControllerAnimated:YES];\n                [[UIViewController getCurNavUIViewController] viewWillAppear:YES];\n                [[UIViewController getCurNavUIViewController] viewDidAppear:YES];\n            }\n            [tabBarController selectTradeTab];\n        }\n        \n    } else {\n        self.tradeAccount = _infoMsgPush.tradeno;\n        self.tradeAccountQSID = _infoMsgPush.qsid;\n        self.tradeAccountWTID = _infoMsgPush.wtid;\n        MainTabbarController *tabBarController = (MainTabbarController *)[UIViewController getCurNavUIViewController].tabBarController;\n        if (tabBarController.selectedIndex == [tabBarController tradeTabIndex]) {\n            [[UIViewController getCurNavUIViewController].navigationController popToRootViewControllerAnimated:YES];\n            [[UIViewController getCurNavUIViewController] viewWillAppear:YES];\n            [[UIViewController getCurNavUIViewController] viewDidAppear:YES];\n        }\n        [tabBarController selectTradeTab];\n    }\n}\n\n- (void)popToPushFenShiView {\n    if ([UIApplication sharedApplication].statusBarOrientation == UIInterfaceOrientationLandscapeLeft || [UIApplication sharedApplication].statusBarOrientation == UIInterfaceOrientationLandscapeRight) {\n        if (_infoMsgPush.C) {\n\n        }\n    } else {\n        _geGuViewController = [[LJHQDetailController alloc] init];\n        if (_infoMsgPush.C) {\n            LJStockInfo *stockInfo = [LJStockInfoProvider getStockInfo:_infoMsgPush.C];\n            //获取股票名称\n            NSString *name = stockInfo.stockName;\n            NSString *market1 = stockInfo.marketId;\n            NSString *showStockCode = stockInfo.showCode;\n            if (name == nil || [name isKindOfClass:[NSNull class]] || [name isEqual:[NSNull null]]) {\n                return;\n            }\n            if (market1 == nil || [market1 isKindOfClass:[NSNull class]] || [market1 isEqual:[NSNull null]]) {\n                market1 = @\"1\";\n            }\n            if (!IsNSStringNotEmpty(showStockCode)) {\n                showStockCode = @\"\";\n            }\n            NSArray *stockCodeArray = @[self->_infoMsgPush.C];\n            NSArray *stockNameArray = @[name];\n            NSArray *stockMarketArray = @[market1];\n            NSArray *showCodeArray = @[showStockCode];\n            [self->_geGuViewController setValue:@\"0\" forKey:LJHQDetailStockTagKey];\n            [self->_geGuViewController setValue:stockCodeArray forKey:LJHQDetailStockCodeArrayKey];\n            [self->_geGuViewController setValue:stockNameArray forKey:LJHQDetailStockNameArrayKey];\n            [self->_geGuViewController setValue:stockMarketArray forKey:LJHQDetailStockMarketArrayKey];\n            [self->_geGuViewController setValue:showCodeArray forKey:LJHQDetailShowStockCodeArrayKey];\n            if ([self->_infoMsgPush.F isEqualToString:@\"2361\"] || [self->_infoMsgPush.F isEqualToString:@\"2352\"]) {\n                self->_geGuViewController.defaultPeriodType = TimeSharingOrKLineType_kLine_day;\n            }\n            self->_geGuViewController.hidesBottomBarWhenPushed = YES;\n            \n            [[UIViewController getCurNavUIViewController].navigationController pushViewController:self->_geGuViewController animated:YES];\n        }\n    }\n}\n\n- (void)openUrlMessagePush {\n    NSString *urlString = _infoMsgPush.U;\n    NSRange range = [urlString rangeOfString:kClientHtml];\n    if (range.length > 0) {\n        urlString = [urlString stringByRemovingPercentEncoding];\n        urlString = [urlString stringByReplacingOccurrencesOfString:@\"\\\\r\\\\n\" withString:@\"\\r\\n\"];\n        NSDictionary *params = [HXTools getParms:urlString];\n        NSString *pageid = [HXTools getPageID:urlString];\n        [[[JumpTool alloc] init] jumpToViewControllerWithFrameID:pageid withParms:params];\n        return;\n    }\n    \n    WKWebViewController *msgHtmlViewcontorl = [[WKWebViewController alloc] init];\n    msgHtmlViewcontorl.loadURL =  _infoMsgPush.U;\n    if (_infoMsgPush.TY.integerValue == 4) {\n        msgHtmlViewcontorl.navigationTitle = @\"消息\";\n    } else {\n        msgHtmlViewcontorl.navigationTitle = @\"提示消息\";\n    }\n    msgHtmlViewcontorl.hidesBottomBarWhenPushed = YES;\n    [[UIViewController getCurNavUIViewController].navigationController pushViewController:msgHtmlViewcontorl animated:TRUE];\n}\n\n// 注册推送失败\n- (void)application:(UIApplication*)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n    NSLog(@\"注册推送失败 == %@\", error);\n}\n\n//返回第三方APP时候用的回调函数  两者写其一即可\n- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {\n    if ([url.scheme isEqualToString:kAppScheme]) {\n        [[LJRouter shareInstance] openUrl:url];\n        return YES;\n    }\n    if (url.absoluteString) {\n        if ([[url host] isEqualToString:HXTHSAuthRes]) {\n            //手抄授权登录回调\n            if ([[HXEnvManager shareInstance].appWindow isHawkEyeOpen]) {\n                [AMCommunicationManager forceReConnect];\n            }\n                \n            return [HXLoginManager authLoginhandleOpenURL:url];\n        }\n        if ([url.absoluteString isEqualToString:[NSString stringWithFormat:@\"%@://\", APP_SCHEME]]) ","relevantFile":"","relevantFileList":[],"filePath":"AppDelegate.mm","template":"objective-cpp","multiRes":{"hipilot":"pushedMessage:(LJPushedMessageModel *)infoMsgPush {\n    if (_infoMsgPush != nil) {\n        if (_in","deepseek-chat-lite":"pplicationDidBecomeActive:(UIApplication *)application {","CodeQwen2.5-7B":"pplicationDidBecomeActive:(UIApplication *)application {","copilot":"\n            }\n        } else if ([_in"}},{"prefix":"    [LJTCPLogManager shareInstance];\n    // 自定义用户权限\n    [[LJUserPermissionPushManager shared] registerPush];\n    // 交易日志\n    (void)[HXTradeDailyDataManager shared];\n    (void)[HXTradePushDailyDataManager shared];\n    \n    // 网格监听\n    [[CTMediator sharedInstance] GridTrade_registerNotification];\n\n    // 画线同步\n    [LJDrawLinePushManage sharedInstance];\n    \n    // 常用指标\n    (void)[LJCommonIndicatorsManage shared];\n    // 指标同步\n    [LJIndicatorPushManage sharedInstance];\n    \n    \n    [PhoneNumLoginManager getPhoneNumberWithTimeout:5 completion:^(NSString * _Nullable phoneNum, NSString * _Nullable accessCode, NSString * _Nullable gwAuth) {\n        if (phoneNum != nil) {\n            [[NSUserDefaults standardUserDefaults] setObject:phoneNum forKey:KEY_PHONE_NUM];\n        } else {\n            [[NSUserDefaults standardUserDefaults] removeObjectForKey:KEY_PHONE_NUM];\n        }\n    }];\n    \n    [[HXCapitalLuaUpdateManager shared] registerPushProcessor];\n\n// 暂时不需要投顾，需要更换kAppId kAppSecret\n//    [[HXIMClient sharedClient] initClientWithAppId:kAppId withAppSecret:kAppSecret];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(startUrlProtocol:) name:KEY_IS_SHOW_URL object:nil];\n    \n    [self registScreenShotNotification];\n    [self registerActionNotification];\n    [self registerSafeProtectorNotification];\n    \n    self.window.backgroundColor = THEMECOLOR(BackgroundTwoAppColor);\n    // 设置全局弹窗黑白版背景色和字体色\n    [[ToastManagerPool sharedToastManagerPool] setToastBackgroundColor:HXUIColor.JiaoYiHandKeyBoardText\n                                                             textColor:HXUIColor.CharacterZeroAppColor];\n    /// 请求隐私协议地址\n    [[LJRequestURLConfigManager sharedInstance] requestPrivacyAndUser];\n    [self initRootViewController];\n\n#if defined DEBUG\n    [[HXPerformanceCenter sharedInstance] enable];\n#endif\n    \n//特殊包测试代码\n#if defined(DEBUGTOOL)\n    if ([HXTradeDevelopTool share].showDebugEntranceWhenAppLaunch) {\n        [[HXPerformanceCenter sharedInstance] enable];\n    }\n    \n    // 添加仿真柜台\n    [[HXTradeDevelopTool share] configTestCounter];\n    [[NSBundle bundleWithPath:@\"/Applications/InjectionIII.app/Contents/Resources/iOSInjection.bundle\"] load];\n#endif\n\n    [self checkUserNotifiction];\n    NSString *userid = [[CTMediator sharedInstance] SocketFetcherHandler_getUserId];\n    NSLog(@\"useriduseriduserid:%@\", userid);\n    \n    [IQKeyboardManager sharedManager].enableAutoToolbar = NO;\n    \n    // 画线配置\n    [self registerDrawLine];\n    // 画线分享配置\n    [self registerDrawLineShare];\n    \n    [LJFloatingADManager shared].delegate = [LJFloatingADBridge shared];\n    \n    // 初始化ua\n    [self initUserAgent];\n    \n    return YES;\n}\n\n/// 检测系统消息通知是否开启并发送埋点\n- (void)checkUserNotifiction {\n    if (IS_SYSTEM_BEYOND_IOS10) {\n        [[UNUserNotificationCenter currentNotificationCenter] getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) {\n              if (settings.authorizationStatus == UNAuthorizationStatusAuthorized) {\n                // 开启状态\n                [self sendNotificationStatus:YES];\n            } else {\n                // 关闭状态\n                [self sendNotificationStatus:NO];\n            }\n        }];\n    } else if (IS_SYSTEM_BEYOND_IOS8) {\n        if ([[UIApplication sharedApplication] isRegisteredForRemoteNotifications]) {\n            // 开启\n            [self sendNotificationStatus:YES];\n        } else {\n            // 关闭\n            [self sendNotificationStatus:NO];\n        }\n    }\n}\n\n/// 发送推送开启状态埋点\n/// @param isOpen 推送是否开启\n- (void)sendNotificationStatus:(BOOL)isOpen {\n    // 记录是开启还是关闭\n    [ClientUserBehaviorLog sendLogWithLogobject:isOpen ? LOG_PUSH_OPEN : LOG_PUSH_CLOSE];\n    \n    // 记录是由开启->关闭 或者 关闭->开启\n    if ([[UserDefaultsPool sharedUserDefaultsPool] objectForKey:LogPushStatus] && [[[UserDefaultsPool sharedUserDefaultsPool] objectForKey:LogPushStatus] boolValue] == isOpen) {\n        return ;\n    }\n    [[UserDefaultsPool sharedUserDefaultsPool] setObject:@(isOpen) forKey:LogPushStatus];\n\n    [ClientUserBehaviorLog sendLogWithLogobject:isOpen ? LOG_PUSH_CHANGE_OPEN : LOG_PUSH_CHANGE_CLOSE];\n\n}\n\n/*\n CTCellularData在iOS9之前是私有类，权限设置是iOS10开始的，所以App Store审核没有问题\n 获取网络权限状态\n */\n- (void)networkStatus:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    //2.根据权限执行相应的交互\n    CTCellularData *cellularData = [[CTCellularData alloc] init];\n    \n    /*\n     此函数会在网络权限改变时再次调用\n     */\n    WEAKSELF\n    cellularData.cellularDataRestrictionDidUpdateNotifier = ^(CTCellularDataRestrictedState state) {\n        switch (state) {\n            case kCTCellularDataRestricted:\n                \n                HXLogInfo(kQHGlobal, @\"network restricted\");\n                //2.1权限关闭的情况下 再次请求网络数据会弹出设置网络提示\n                \n                break;\n            case kCTCellularDataNotRestricted:\n            {\n                HXLogInfo(kQHGlobal, @\"network notRestricted\");\n                //2.2已经开启网络权限\n                dispatch_async(weakSelf.analysisQueue, ^{\n                    [weakSelf analysisPasteboard];\n                });\n                [[LJRequestURLConfigManager sharedInstance] requestPrivacyAndUser];\n                // 获取网络权限后重新初始化合约代码表, 获取网络权限后直接调用，里面获取是否有网络返回的是没网络，所以加个延迟调用\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    [self registerStockCodeTable];\n                });\n                break;\n            }\n            case kCTCellularDataRestrictedStateUnknown:\n                HXLogInfo(kQHGlobal, @\"network Unknown\");\n                //2.3未知情况 （还没有遇到推测是有网络但是连接不正常的情况下）\n                \n                break;\n                \n            default:\n                break;\n        }\n    };\n}\n\n- (void)startUrlProtocol:(NSNotification *)notification {\n    NSString *isShowUrl = notification.object;\n    if ([isShowUrl intValue] == 1) {\n        [HXURLProtocol start];\n    }else{\n        [HXURLProtocol stop];\n    }\n}\n\n- (void)registerStockCodeTable {\n    // 无网络时只注册elk，不发送请求\n    if (![LJSystemGeneralContent isConnectionAvailable]) {\n        [LJStockCodeTableManage share].sendElkBlock = ^(NSDictionary * _Nonnull params) {\n            [self sendStockCodeTableElk:params];\n        };\n        return;\n    }\n    \n    // 获取网络权限后重新初始化合约代码表\n    [LJStockCodeTable registerStockCodeTableBySendElkBlock:^(NSDictionary * _Nonnull params) {\n        [self sendStockCodeTableElk:params];\n    } stockRequestCompletion:^(BOOL isSuccess) {\n        \n    } varietyRequestCompletion:^(BOOL isSuccess) {\n        \n    }];\n}\n\n- (void)sendStockCodeTableElk:(NSDictionary * _Nonnull)params{\n    Log(LJStockCodeTableELKBt, LJStockCodeTableELKTrace, params);\n}\n\n- (void)applicationWillResignActive:(UIApplication *)application {\n    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.\n    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.\n}\n\n- (void)applicationDidEnterBackground:(UIApplication *)application {\n    [HXEnvManager getDataBaseService]->writeHistoryStocksToLocal();\n    HXLogInfo(kQHGlobal, @\"app 已经进入后台\");\n    //! 保存行为收集的纪录\n    [AMCollectUserBehavior saveActionRecord];\n    \n    //储存指标数据到本地\n    [[LJTechDataManage sharedInstance] archiveTechData];\n    \n    // 添加时间自动登录时间记录\n    [[HXTradeAutoLoginManager shared] updateEnterBackgroundDateWithDate:[NSDate date]];\n}\n\n- (void)applicationWillEnterForeground:(UIApplication *)application {\n    application.applicationIconBadgeNumber = 0;\n    HXLogInfo(kQHGlobal, @\"app 即将进入前台\");\n    // sdk心跳检测，判断sdk断连情况\n    [HXTradeClientSDK checkSpiHeartBeat];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)applic","infill":"\n            }\n        } else if ([_infoMsgPush.TY isEqualToString:LJPushedTypeUserPermission] && _infoMsgPush.U.length > 0) {\n            [self openUrlMessagePush];\n  ","suffix":"      } else {\n            if ([_infoMsgPush.pushType isEqualToString:@\"feedback\"]) {\n                [[FeedBackManager shared] goFeedBackList:_infoMsgPush.U];\n            }\n        }\n    }\n}\n\n- (BOOL)isSameTradeAccount {\n    return _infoMsgPush.tradeNoForHuiBao.length > 0 &&\n    [MePool sharedMePool].transactionAccountID.length > 0 &&\n    [[MePool sharedMePool].transactionAccountID isEqualToString:_infoMsgPush.tradeNoForHuiBao];\n}\n\n- (NSString *)getTabIndexWithInfoType:(NSString *)type {\n    NSInteger index = [type integerValue];\n    switch (index) {\n        case 1:\n            return @\"2\";//委托回报跳转到挂单\n            break;\n        case 2:\n            return @\"4\";//成交回报跳转到成交\n            break;\n        case 3:\n            return @\"3\";//撤单回报跳转到委托\n            break;\n        default:\n            return @\"1\";//默认跳转\n            break;\n    }\n}\n\n- (void)hidenSwitchlistView {\n    for (UIView *viewController in [[UIViewController getCurNavUIViewController].tabBarController.view subviews]) {\n        if ([viewController isKindOfClass:[UIControl class]]) {\n            for (UIView *view in [viewController subviews]) {\n                if ([view isKindOfClass:[SwitchAccountListView class]]) {\n                    [(SwitchAccountListView *)view hide];\n                    break;\n                }\n            }\n        }\n    }\n    \n}\n\n- (void)zyzsPushJump {\n    MePool *mePool = [MePool sharedMePool];\n    if ([mePool isTransactionLogined]) {\n        if ([mePool.transactionAccountID isEqualToString:_infoMsgPush.tradeno] && [mePool.transactionQsid isEqualToString:_infoMsgPush.qsid]) {\n            if ([_infoMsgPush.F isEqualToString:[NSString stringWithFormat:@\"%d\",TradeXiaDanView]]) {\n                NSDictionary *parmaa = @{@\"webid\":[NSString stringWithFormat:@\"%d\",TradeXiaDanView]};\n                [[[JumpTool alloc] init] jumpToViewControllerWithFrameID:[NSString stringWithFormat:@\"%d\",TradeXiaDanView] withParms:parmaa];\n            } else {\n                NSDictionary *parma = @{@\"webid\": _infoMsgPush.F};\n                [[[JumpTool alloc] init] jumpToViewControllerWithFrameID:_infoMsgPush.F withParms:parma];\n            }\n        } else {\n            self.tradeAccount = _infoMsgPush.tradeno;\n            self.tradeAccountQSID = _infoMsgPush.qsid;\n            self.tradeAccountWTID = _infoMsgPush.wtid;\n            [mePool exitTransactionLogin];\n            MainTabbarController *tabBarController = (MainTabbarController *)[UIViewController getCurNavUIViewController].tabBarController;\n            if (tabBarController.selectedIndex == [tabBarController tradeTabIndex]) {\n                [[UIViewController getCurNavUIViewController].navigationController popToRootViewControllerAnimated:YES];\n                [[UIViewController getCurNavUIViewController] viewWillAppear:YES];\n                [[UIViewController getCurNavUIViewController] viewDidAppear:YES];\n            }\n            [tabBarController selectTradeTab];\n        }\n        \n    } else {\n        self.tradeAccount = _infoMsgPush.tradeno;\n        self.tradeAccountQSID = _infoMsgPush.qsid;\n        self.tradeAccountWTID = _infoMsgPush.wtid;\n        MainTabbarController *tabBarController = (MainTabbarController *)[UIViewController getCurNavUIViewController].tabBarController;\n        if (tabBarController.selectedIndex == [tabBarController tradeTabIndex]) {\n            [[UIViewController getCurNavUIViewController].navigationController popToRootViewControllerAnimated:YES];\n            [[UIViewController getCurNavUIViewController] viewWillAppear:YES];\n            [[UIViewController getCurNavUIViewController] viewDidAppear:YES];\n        }\n        [tabBarController selectTradeTab];\n    }\n}\n\n- (void)popToPushFenShiView {\n    if ([UIApplication sharedApplication].statusBarOrientation == UIInterfaceOrientationLandscapeLeft || [UIApplication sharedApplication].statusBarOrientation == UIInterfaceOrientationLandscapeRight) {\n        if (_infoMsgPush.C) {\n\n        }\n    } else {\n        _geGuViewController = [[LJHQDetailController alloc] init];\n        if (_infoMsgPush.C) {\n            LJStockInfo *stockInfo = [LJStockInfoProvider getStockInfo:_infoMsgPush.C];\n            //获取股票名称\n            NSString *name = stockInfo.stockName;\n            NSString *market1 = stockInfo.marketId;\n            NSString *showStockCode = stockInfo.showCode;\n            if (name == nil || [name isKindOfClass:[NSNull class]] || [name isEqual:[NSNull null]]) {\n                return;\n            }\n            if (market1 == nil || [market1 isKindOfClass:[NSNull class]] || [market1 isEqual:[NSNull null]]) {\n                market1 = @\"1\";\n            }\n            if (!IsNSStringNotEmpty(showStockCode)) {\n                showStockCode = @\"\";\n            }\n            NSArray *stockCodeArray = @[self->_infoMsgPush.C];\n            NSArray *stockNameArray = @[name];\n            NSArray *stockMarketArray = @[market1];\n            NSArray *showCodeArray = @[showStockCode];\n            [self->_geGuViewController setValue:@\"0\" forKey:LJHQDetailStockTagKey];\n            [self->_geGuViewController setValue:stockCodeArray forKey:LJHQDetailStockCodeArrayKey];\n            [self->_geGuViewController setValue:stockNameArray forKey:LJHQDetailStockNameArrayKey];\n            [self->_geGuViewController setValue:stockMarketArray forKey:LJHQDetailStockMarketArrayKey];\n            [self->_geGuViewController setValue:showCodeArray forKey:LJHQDetailShowStockCodeArrayKey];\n            if ([self->_infoMsgPush.F isEqualToString:@\"2361\"] || [self->_infoMsgPush.F isEqualToString:@\"2352\"]) {\n                self->_geGuViewController.defaultPeriodType = TimeSharingOrKLineType_kLine_day;\n            }\n            self->_geGuViewController.hidesBottomBarWhenPushed = YES;\n            \n            [[UIViewController getCurNavUIViewController].navigationController pushViewController:self->_geGuViewController animated:YES];\n        }\n    }\n}\n\n- (void)openUrlMessagePush {\n    NSString *urlString = _infoMsgPush.U;\n    NSRange range = [urlString rangeOfString:kClientHtml];\n    if (range.length > 0) {\n        urlString = [urlString stringByRemovingPercentEncoding];\n        urlString = [urlString stringByReplacingOccurrencesOfString:@\"\\\\r\\\\n\" withString:@\"\\r\\n\"];\n        NSDictionary *params = [HXTools getParms:urlString];\n        NSString *pageid = [HXTools getPageID:urlString];\n        [[[JumpTool alloc] init] jumpToViewControllerWithFrameID:pageid withParms:params];\n        return;\n    }\n    \n    WKWebViewController *msgHtmlViewcontorl = [[WKWebViewController alloc] init];\n    msgHtmlViewcontorl.loadURL =  _infoMsgPush.U;\n    if (_infoMsgPush.TY.integerValue == 4) {\n        msgHtmlViewcontorl.navigationTitle = @\"消息\";\n    } else {\n        msgHtmlViewcontorl.navigationTitle = @\"提示消息\";\n    }\n    msgHtmlViewcontorl.hidesBottomBarWhenPushed = YES;\n    [[UIViewController getCurNavUIViewController].navigationController pushViewController:msgHtmlViewcontorl animated:TRUE];\n}\n\n// 注册推送失败\n- (void)application:(UIApplication*)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n    NSLog(@\"注册推送失败 == %@\", error);\n}\n\n//返回第三方APP时候用的回调函数  两者写其一即可\n- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {\n    if ([url.scheme isEqualToString:kAppScheme]) {\n        [[LJRouter shareInstance] openUrl:url];\n        return YES;\n    }\n    if (url.absoluteString) {\n        if ([[url host] isEqualToString:HXTHSAuthRes]) {\n            //手抄授权登录回调\n            if ([[HXEnvManager shareInstance].appWindow isHawkEyeOpen]) {\n                [AMCommunicationManager forceReConnect];\n            }\n                \n            return [HXLoginManager authLoginhandleOpenURL:url];\n        }\n        if ([url.absoluteString isEqualToString:[NSString stringWithFormat:@\"%@://\", APP_SCHEME]]) {\n            return YES;\n        }\n        NSString *urlS = url.absoluteString;\n        if ([urlS rangeOfString:LJQQAppId].loca","relevantFile":"","relevantFileList":[],"filePath":"AppDelegate.mm","template":"objective-cpp","multiRes":{"hipilot":"tion {\n    // Restart any tasks that were paused (or not yet started) while the application was in the background. If the application was previously in the foreground, optionally refresh the user interface.\n}\n\n- (void)showMessageWithInfoMsgPush:(InfoMsgPushModel","deepseek-chat-lite":"ation {","CodeQwen2.5-7B":"ation {","copilot":"\n            }\n        } else if ([_infoMsgPush.TY isEqualToString:LJPushedTypeUserPermission] && _infoMsgPush.U.length > 0) {\n            [self openUrlMessagePush];\n  "}},{"prefix":"    [LJWebClientIdentification sharedInstance];\n    // 行情日志监控\n    [LJTCPLogManager shareInstance];\n    // 自定义用户权限\n    [[LJUserPermissionPushManager shared] registerPush];\n    // 交易日志\n    (void)[HXTradeDailyDataManager shared];\n    (void)[HXTradePushDailyDataManager shared];\n    \n    // 网格监听\n    [[CTMediator sharedInstance] GridTrade_registerNotification];\n\n    // 画线同步\n    [LJDrawLinePushManage sharedInstance];\n    \n    // 常用指标\n    (void)[LJCommonIndicatorsManage shared];\n    // 指标同步\n    [LJIndicatorPushManage sharedInstance];\n    \n    \n    [PhoneNumLoginManager getPhoneNumberWithTimeout:5 completion:^(NSString * _Nullable phoneNum, NSString * _Nullable accessCode, NSString * _Nullable gwAuth) {\n        if (phoneNum != nil) {\n            [[NSUserDefaults standardUserDefaults] setObject:phoneNum forKey:KEY_PHONE_NUM];\n        } else {\n            [[NSUserDefaults standardUserDefaults] removeObjectForKey:KEY_PHONE_NUM];\n        }\n    }];\n    \n    [[HXCapitalLuaUpdateManager shared] registerPushProcessor];\n\n// 暂时不需要投顾，需要更换kAppId kAppSecret\n//    [[HXIMClient sharedClient] initClientWithAppId:kAppId withAppSecret:kAppSecret];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(startUrlProtocol:) name:KEY_IS_SHOW_URL object:nil];\n    \n    [self registScreenShotNotification];\n    [self registerActionNotification];\n    [self registerSafeProtectorNotification];\n    \n    self.window.backgroundColor = THEMECOLOR(BackgroundTwoAppColor);\n    // 设置全局弹窗黑白版背景色和字体色\n    [[ToastManagerPool sharedToastManagerPool] setToastBackgroundColor:HXUIColor.JiaoYiHandKeyBoardText\n                                                             textColor:HXUIColor.CharacterZeroAppColor];\n    /// 请求隐私协议地址\n    [[LJRequestURLConfigManager sharedInstance] requestPrivacyAndUser];\n    [self initRootViewController];\n\n#if defined DEBUG\n    [[HXPerformanceCenter sharedInstance] enable];\n#endif\n    \n//特殊包测试代码\n#if defined(DEBUGTOOL)\n    if ([HXTradeDevelopTool share].showDebugEntranceWhenAppLaunch) {\n        [[HXPerformanceCenter sharedInstance] enable];\n    }\n    \n    // 添加仿真柜台\n    [[HXTradeDevelopTool share] configTestCounter];\n    [[NSBundle bundleWithPath:@\"/Applications/InjectionIII.app/Contents/Resources/iOSInjection.bundle\"] load];\n#endif\n\n    [self checkUserNotifiction];\n    NSString *userid = [[CTMediator sharedInstance] SocketFetcherHandler_getUserId];\n    NSLog(@\"useriduseriduserid:%@\", userid);\n    \n    [IQKeyboardManager sharedManager].enableAutoToolbar = NO;\n    \n    // 画线配置\n    [self registerDrawLine];\n    // 画线分享配置\n    [self registerDrawLineShare];\n    \n    [LJFloatingADManager shared].delegate = [LJFloatingADBridge shared];\n    \n    // 初始化ua\n    [self initUserAgent];\n    \n    return YES;\n}\n\n/// 检测系统消息通知是否开启并发送埋点\n- (void)checkUserNotifiction {\n    if (IS_SYSTEM_BEYOND_IOS10) {\n        [[UNUserNotificationCenter currentNotificationCenter] getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) {\n              if (settings.authorizationStatus == UNAuthorizationStatusAuthorized) {\n                // 开启状态\n                [self sendNotificationStatus:YES];\n            } else {\n                // 关闭状态\n                [self sendNotificationStatus:NO];\n            }\n        }];\n    } else if (IS_SYSTEM_BEYOND_IOS8) {\n        if ([[UIApplication sharedApplication] isRegisteredForRemoteNotifications]) {\n            // 开启\n            [self sendNotificationStatus:YES];\n        } else {\n            // 关闭\n            [self sendNotificationStatus:NO];\n        }\n    }\n}\n\n/// 发送推送开启状态埋点\n/// @param isOpen 推送是否开启\n- (void)sendNotificationStatus:(BOOL)isOpen {\n    // 记录是开启还是关闭\n    [ClientUserBehaviorLog sendLogWithLogobject:isOpen ? LOG_PUSH_OPEN : LOG_PUSH_CLOSE];\n    \n    // 记录是由开启->关闭 或者 关闭->开启\n    if ([[UserDefaultsPool sharedUserDefaultsPool] objectForKey:LogPushStatus] && [[[UserDefaultsPool sharedUserDefaultsPool] objectForKey:LogPushStatus] boolValue] == isOpen) {\n        return ;\n    }\n    [[UserDefaultsPool sharedUserDefaultsPool] setObject:@(isOpen) forKey:LogPushStatus];\n\n    [ClientUserBehaviorLog sendLogWithLogobject:isOpen ? LOG_PUSH_CHANGE_OPEN : LOG_PUSH_CHANGE_CLOSE];\n\n}\n\n/*\n CTCellularData在iOS9之前是私有类，权限设置是iOS10开始的，所以App Store审核没有问题\n 获取网络权限状态\n */\n- (void)networkStatus:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    //2.根据权限执行相应的交互\n    CTCellularData *cellularData = [[CTCellularData alloc] init];\n    \n    /*\n     此函数会在网络权限改变时再次调用\n     */\n    WEAKSELF\n    cellularData.cellularDataRestrictionDidUpdateNotifier = ^(CTCellularDataRestrictedState state) {\n        switch (state) {\n            case kCTCellularDataRestricted:\n                \n                HXLogInfo(kQHGlobal, @\"network restricted\");\n                //2.1权限关闭的情况下 再次请求网络数据会弹出设置网络提示\n                \n                break;\n            case kCTCellularDataNotRestricted:\n            {\n                HXLogInfo(kQHGlobal, @\"network notRestricted\");\n                //2.2已经开启网络权限\n                dispatch_async(weakSelf.analysisQueue, ^{\n                    [weakSelf analysisPasteboard];\n                });\n                [[LJRequestURLConfigManager sharedInstance] requestPrivacyAndUser];\n                // 获取网络权限后重新初始化合约代码表, 获取网络权限后直接调用，里面获取是否有网络返回的是没网络，所以加个延迟调用\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    [self registerStockCodeTable];\n                });\n                break;\n            }\n            case kCTCellularDataRestrictedStateUnknown:\n                HXLogInfo(kQHGlobal, @\"network Unknown\");\n                //2.3未知情况 （还没有遇到推测是有网络但是连接不正常的情况下）\n                \n                break;\n                \n            default:\n                break;\n        }\n    };\n}\n\n- (void)startUrlProtocol:(NSNotification *)notification {\n    NSString *isShowUrl = notification.object;\n    if ([isShowUrl intValue] == 1) {\n        [HXURLProtocol start];\n    }else{\n        [HXURLProtocol stop];\n    }\n}\n\n- (void)registerStockCodeTable {\n    // 无网络时只注册elk，不发送请求\n    if (![LJSystemGeneralContent isConnectionAvailable]) {\n        [LJStockCodeTableManage share].sendElkBlock = ^(NSDictionary * _Nonnull params) {\n            [self sendStockCodeTableElk:params];\n        };\n        return;\n    }\n    \n    // 获取网络权限后重新初始化合约代码表\n    [LJStockCodeTable registerStockCodeTableBySendElkBlock:^(NSDictionary * _Nonnull params) {\n        [self sendStockCodeTableElk:params];\n    } stockRequestCompletion:^(BOOL isSuccess) {\n        \n    } varietyRequestCompletion:^(BOOL isSuccess) {\n        \n    }];\n}\n\n- (void)sendStockCodeTableElk:(NSDictionary * _Nonnull)params{\n    Log(LJStockCodeTableELKBt, LJStockCodeTableELKTrace, params);\n}\n\n- (void)applicationWillResignActive:(UIApplication *)application {\n    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.\n    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.\n}\n\n- (void)applicationDidEnterBackground:(UIApplication *)application {\n    [HXEnvManager getDataBaseService]->writeHistoryStocksToLocal();\n    HXLogInfo(kQHGlobal, @\"app 已经进入后台\");\n    //! 保存行为收集的纪录\n    [AMCollectUserBehavior saveActionRecord];\n    \n    //储存指标数据到本地\n    [[LJTechDataManage sharedInstance] archiveTechData];\n    \n    // 添加时间自动登录时间记录\n    [[HXTradeAutoLoginManager shared] updateEnterBackgroundDateWithDate:[NSDate date]];\n}\n\n- (void)applicationWillEnterForeground:(UIApplication *)application {\n    application.applicationIconBadgeNumber = 0;\n    HXLogInfo(kQHGlobal, @\"app 即将进入前台\");\n    // sdk心跳检测，判断sdk断连情况\n    [HXTradeClientSDK checkSpiHeartBeat];\n}\n\n- (void)a","infill":"          }\n        } else if ([_infoM","suffix":"sgPush.TY isEqualToString:LJPushedTypeUserPermission] && _infoMsgPush.U.length > 0) {\n            [self openUrlMessagePush];\n        } else {\n            if ([_infoMsgPush.pushType isEqualToString:@\"feedback\"]) {\n                [[FeedBackManager shared] goFeedBackList:_infoMsgPush.U];\n            } else {\n                // re\n            }\n        }\n    }\n}\n\n- (BOOL)isSameTradeAccount {\n    return _infoMsgPush.tradeNoForHuiBao.length > 0 &&\n    [MePool sharedMePool].transactionAccountID.length > 0 &&\n    [[MePool sharedMePool].transactionAccountID isEqualToString:_infoMsgPush.tradeNoForHuiBao];\n}\n\n- (NSString *)getTabIndexWithInfoType:(NSString *)type {\n    NSInteger index = [type integerValue];\n    switch (index) {\n        case 1:\n            return @\"2\";//委托回报跳转到挂单\n            break;\n        case 2:\n            return @\"4\";//成交回报跳转到成交\n            break;\n        case 3:\n            return @\"3\";//撤单回报跳转到委托\n            break;\n        default:\n            return @\"1\";//默认跳转\n            break;\n    }\n}\n\n- (void)hidenSwitchlistView {\n    for (UIView *viewController in [[UIViewController getCurNavUIViewController].tabBarController.view subviews]) {\n        if ([viewController isKindOfClass:[UIControl class]]) {\n            for (UIView *view in [viewController subviews]) {\n                if ([view isKindOfClass:[SwitchAccountListView class]]) {\n                    [(SwitchAccountListView *)view hide];\n                    break;\n                }\n            }\n        }\n    }\n    \n}\n\n- (void)zyzsPushJump {\n    MePool *mePool = [MePool sharedMePool];\n    if ([mePool isTransactionLogined]) {\n        if ([mePool.transactionAccountID isEqualToString:_infoMsgPush.tradeno] && [mePool.transactionQsid isEqualToString:_infoMsgPush.qsid]) {\n            if ([_infoMsgPush.F isEqualToString:[NSString stringWithFormat:@\"%d\",TradeXiaDanView]]) {\n                NSDictionary *parmaa = @{@\"webid\":[NSString stringWithFormat:@\"%d\",TradeXiaDanView]};\n                [[[JumpTool alloc] init] jumpToViewControllerWithFrameID:[NSString stringWithFormat:@\"%d\",TradeXiaDanView] withParms:parmaa];\n            } else {\n                NSDictionary *parma = @{@\"webid\": _infoMsgPush.F};\n                [[[JumpTool alloc] init] jumpToViewControllerWithFrameID:_infoMsgPush.F withParms:parma];\n            }\n        } else {\n            self.tradeAccount = _infoMsgPush.tradeno;\n            self.tradeAccountQSID = _infoMsgPush.qsid;\n            self.tradeAccountWTID = _infoMsgPush.wtid;\n            [mePool exitTransactionLogin];\n            MainTabbarController *tabBarController = (MainTabbarController *)[UIViewController getCurNavUIViewController].tabBarController;\n            if (tabBarController.selectedIndex == [tabBarController tradeTabIndex]) {\n                [[UIViewController getCurNavUIViewController].navigationController popToRootViewControllerAnimated:YES];\n                [[UIViewController getCurNavUIViewController] viewWillAppear:YES];\n                [[UIViewController getCurNavUIViewController] viewDidAppear:YES];\n            }\n            [tabBarController selectTradeTab];\n        }\n        \n    } else {\n        self.tradeAccount = _infoMsgPush.tradeno;\n        self.tradeAccountQSID = _infoMsgPush.qsid;\n        self.tradeAccountWTID = _infoMsgPush.wtid;\n        MainTabbarController *tabBarController = (MainTabbarController *)[UIViewController getCurNavUIViewController].tabBarController;\n        if (tabBarController.selectedIndex == [tabBarController tradeTabIndex]) {\n            [[UIViewController getCurNavUIViewController].navigationController popToRootViewControllerAnimated:YES];\n            [[UIViewController getCurNavUIViewController] viewWillAppear:YES];\n            [[UIViewController getCurNavUIViewController] viewDidAppear:YES];\n        }\n        [tabBarController selectTradeTab];\n    }\n}\n\n- (void)popToPushFenShiView {\n    if ([UIApplication sharedApplication].statusBarOrientation == UIInterfaceOrientationLandscapeLeft || [UIApplication sharedApplication].statusBarOrientation == UIInterfaceOrientationLandscapeRight) {\n        if (_infoMsgPush.C) {\n\n        }\n    } else {\n        _geGuViewController = [[LJHQDetailController alloc] init];\n        if (_infoMsgPush.C) {\n            LJStockInfo *stockInfo = [LJStockInfoProvider getStockInfo:_infoMsgPush.C];\n            //获取股票名称\n            NSString *name = stockInfo.stockName;\n            NSString *market1 = stockInfo.marketId;\n            NSString *showStockCode = stockInfo.showCode;\n            if (name == nil || [name isKindOfClass:[NSNull class]] || [name isEqual:[NSNull null]]) {\n                return;\n            }\n            if (market1 == nil || [market1 isKindOfClass:[NSNull class]] || [market1 isEqual:[NSNull null]]) {\n                market1 = @\"1\";\n            }\n            if (!IsNSStringNotEmpty(showStockCode)) {\n                showStockCode = @\"\";\n            }\n            NSArray *stockCodeArray = @[self->_infoMsgPush.C];\n            NSArray *stockNameArray = @[name];\n            NSArray *stockMarketArray = @[market1];\n            NSArray *showCodeArray = @[showStockCode];\n            [self->_geGuViewController setValue:@\"0\" forKey:LJHQDetailStockTagKey];\n            [self->_geGuViewController setValue:stockCodeArray forKey:LJHQDetailStockCodeArrayKey];\n            [self->_geGuViewController setValue:stockNameArray forKey:LJHQDetailStockNameArrayKey];\n            [self->_geGuViewController setValue:stockMarketArray forKey:LJHQDetailStockMarketArrayKey];\n            [self->_geGuViewController setValue:showCodeArray forKey:LJHQDetailShowStockCodeArrayKey];\n            if ([self->_infoMsgPush.F isEqualToString:@\"2361\"] || [self->_infoMsgPush.F isEqualToString:@\"2352\"]) {\n                self->_geGuViewController.defaultPeriodType = TimeSharingOrKLineType_kLine_day;\n            }\n            self->_geGuViewController.hidesBottomBarWhenPushed = YES;\n            \n            [[UIViewController getCurNavUIViewController].navigationController pushViewController:self->_geGuViewController animated:YES];\n        }\n    }\n}\n\n- (void)openUrlMessagePush {\n    NSString *urlString = _infoMsgPush.U;\n    NSRange range = [urlString rangeOfString:kClientHtml];\n    if (range.length > 0) {\n        urlString = [urlString stringByRemovingPercentEncoding];\n        urlString = [urlString stringByReplacingOccurrencesOfString:@\"\\\\r\\\\n\" withString:@\"\\r\\n\"];\n        NSDictionary *params = [HXTools getParms:urlString];\n        NSString *pageid = [HXTools getPageID:urlString];\n        [[[JumpTool alloc] init] jumpToViewControllerWithFrameID:pageid withParms:params];\n        return;\n    }\n    \n    WKWebViewController *msgHtmlViewcontorl = [[WKWebViewController alloc] init];\n    msgHtmlViewcontorl.loadURL =  _infoMsgPush.U;\n    if (_infoMsgPush.TY.integerValue == 4) {\n        msgHtmlViewcontorl.navigationTitle = @\"消息\";\n    } else {\n        msgHtmlViewcontorl.navigationTitle = @\"提示消息\";\n    }\n    msgHtmlViewcontorl.hidesBottomBarWhenPushed = YES;\n    [[UIViewController getCurNavUIViewController].navigationController pushViewController:msgHtmlViewcontorl animated:TRUE];\n}\n\n// 注册推送失败\n- (void)application:(UIApplication*)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n    NSLog(@\"注册推送失败 == %@\", error);\n}\n\n//返回第三方APP时候用的回调函数  两者写其一即可\n- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {\n    if ([url.scheme isEqualToString:kAppScheme]) {\n        [[LJRouter shareInstance] openUrl:url];\n        return YES;\n    }\n    if (url.absoluteString) {\n        if ([[url host] isEqualToString:HXTHSAuthRes]) {\n            //手抄授权登录回调\n            if ([[HXEnvManager shareInstance].appWindow isHawkEyeOpen]) {\n                [AMCommunicationManager forceReConnect];\n            }\n                \n            return [HXLoginManager authLoginhandleOpenURL:url];\n        }\n        if ([url.absoluteString isEqualToString:[NSString s","relevantFile":"","relevantFileList":[],"filePath":"AppDelegate.mm","template":"objective-cpp","multiRes":{"hipilot":"pushedMessage:(NSDictionary *)infoMsgPush {\n    if (infoMsgPush == nil) {\n        return;\n    }\n    \n    _infoMsgPush = infoMsgPush;\n    \n    if ([[HXEnvManager shareInstance] getPushSwitch","deepseek-chat-lite":"pplicationDidBecomeActive:(UIApplication *)application {","CodeQwen2.5-7B":"pplicationDidBecomeActive:(UIApplication *)application {","copilot":"          }\n        } else if ([_infoM"}},{"prefix":"    [LJWebClientIdentification sharedInstance];\n    // 行情日志监控\n    [LJTCPLogManager shareInstance];\n    // 自定义用户权限\n    [[LJUserPermissionPushManager shared] registerPush];\n    // 交易日志\n    (void)[HXTradeDailyDataManager shared];\n    (void)[HXTradePushDailyDataManager shared];\n    \n    // 网格监听\n    [[CTMediator sharedInstance] GridTrade_registerNotification];\n\n    // 画线同步\n    [LJDrawLinePushManage sharedInstance];\n    \n    // 常用指标\n    (void)[LJCommonIndicatorsManage shared];\n    // 指标同步\n    [LJIndicatorPushManage sharedInstance];\n    \n    \n    [PhoneNumLoginManager getPhoneNumberWithTimeout:5 completion:^(NSString * _Nullable phoneNum, NSString * _Nullable accessCode, NSString * _Nullable gwAuth) {\n        if (phoneNum != nil) {\n            [[NSUserDefaults standardUserDefaults] setObject:phoneNum forKey:KEY_PHONE_NUM];\n        } else {\n            [[NSUserDefaults standardUserDefaults] removeObjectForKey:KEY_PHONE_NUM];\n        }\n    }];\n    \n    [[HXCapitalLuaUpdateManager shared] registerPushProcessor];\n\n// 暂时不需要投顾，需要更换kAppId kAppSecret\n//    [[HXIMClient sharedClient] initClientWithAppId:kAppId withAppSecret:kAppSecret];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(startUrlProtocol:) name:KEY_IS_SHOW_URL object:nil];\n    \n    [self registScreenShotNotification];\n    [self registerActionNotification];\n    [self registerSafeProtectorNotification];\n    \n    self.window.backgroundColor = THEMECOLOR(BackgroundTwoAppColor);\n    // 设置全局弹窗黑白版背景色和字体色\n    [[ToastManagerPool sharedToastManagerPool] setToastBackgroundColor:HXUIColor.JiaoYiHandKeyBoardText\n                                                             textColor:HXUIColor.CharacterZeroAppColor];\n    /// 请求隐私协议地址\n    [[LJRequestURLConfigManager sharedInstance] requestPrivacyAndUser];\n    [self initRootViewController];\n\n#if defined DEBUG\n    [[HXPerformanceCenter sharedInstance] enable];\n#endif\n    \n//特殊包测试代码\n#if defined(DEBUGTOOL)\n    if ([HXTradeDevelopTool share].showDebugEntranceWhenAppLaunch) {\n        [[HXPerformanceCenter sharedInstance] enable];\n    }\n    \n    // 添加仿真柜台\n    [[HXTradeDevelopTool share] configTestCounter];\n    [[NSBundle bundleWithPath:@\"/Applications/InjectionIII.app/Contents/Resources/iOSInjection.bundle\"] load];\n#endif\n\n    [self checkUserNotifiction];\n    NSString *userid = [[CTMediator sharedInstance] SocketFetcherHandler_getUserId];\n    NSLog(@\"useriduseriduserid:%@\", userid);\n    \n    [IQKeyboardManager sharedManager].enableAutoToolbar = NO;\n    \n    // 画线配置\n    [self registerDrawLine];\n    // 画线分享配置\n    [self registerDrawLineShare];\n    \n    [LJFloatingADManager shared].delegate = [LJFloatingADBridge shared];\n    \n    // 初始化ua\n    [self initUserAgent];\n    \n    return YES;\n}\n\n/// 检测系统消息通知是否开启并发送埋点\n- (void)checkUserNotifiction {\n    if (IS_SYSTEM_BEYOND_IOS10) {\n        [[UNUserNotificationCenter currentNotificationCenter] getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) {\n              if (settings.authorizationStatus == UNAuthorizationStatusAuthorized) {\n                // 开启状态\n                [self sendNotificationStatus:YES];\n            } else {\n                // 关闭状态\n                [self sendNotificationStatus:NO];\n            }\n        }];\n    } else if (IS_SYSTEM_BEYOND_IOS8) {\n        if ([[UIApplication sharedApplication] isRegisteredForRemoteNotifications]) {\n            // 开启\n            [self sendNotificationStatus:YES];\n        } else {\n            // 关闭\n            [self sendNotificationStatus:NO];\n        }\n    }\n}\n\n/// 发送推送开启状态埋点\n/// @param isOpen 推送是否开启\n- (void)sendNotificationStatus:(BOOL)isOpen {\n    // 记录是开启还是关闭\n    [ClientUserBehaviorLog sendLogWithLogobject:isOpen ? LOG_PUSH_OPEN : LOG_PUSH_CLOSE];\n    \n    // 记录是由开启->关闭 或者 关闭->开启\n    if ([[UserDefaultsPool sharedUserDefaultsPool] objectForKey:LogPushStatus] && [[[UserDefaultsPool sharedUserDefaultsPool] objectForKey:LogPushStatus] boolValue] == isOpen) {\n        return ;\n    }\n    [[UserDefaultsPool sharedUserDefaultsPool] setObject:@(isOpen) forKey:LogPushStatus];\n\n    [ClientUserBehaviorLog sendLogWithLogobject:isOpen ? LOG_PUSH_CHANGE_OPEN : LOG_PUSH_CHANGE_CLOSE];\n\n}\n\n/*\n CTCellularData在iOS9之前是私有类，权限设置是iOS10开始的，所以App Store审核没有问题\n 获取网络权限状态\n */\n- (void)networkStatus:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    //2.根据权限执行相应的交互\n    CTCellularData *cellularData = [[CTCellularData alloc] init];\n    \n    /*\n     此函数会在网络权限改变时再次调用\n     */\n    WEAKSELF\n    cellularData.cellularDataRestrictionDidUpdateNotifier = ^(CTCellularDataRestrictedState state) {\n        switch (state) {\n            case kCTCellularDataRestricted:\n                \n                HXLogInfo(kQHGlobal, @\"network restricted\");\n                //2.1权限关闭的情况下 再次请求网络数据会弹出设置网络提示\n                \n                break;\n            case kCTCellularDataNotRestricted:\n            {\n                HXLogInfo(kQHGlobal, @\"network notRestricted\");\n                //2.2已经开启网络权限\n                dispatch_async(weakSelf.analysisQueue, ^{\n                    [weakSelf analysisPasteboard];\n                });\n                [[LJRequestURLConfigManager sharedInstance] requestPrivacyAndUser];\n                // 获取网络权限后重新初始化合约代码表, 获取网络权限后直接调用，里面获取是否有网络返回的是没网络，所以加个延迟调用\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    [self registerStockCodeTable];\n                });\n                break;\n            }\n            case kCTCellularDataRestrictedStateUnknown:\n                HXLogInfo(kQHGlobal, @\"network Unknown\");\n                //2.3未知情况 （还没有遇到推测是有网络但是连接不正常的情况下）\n                \n                break;\n                \n            default:\n                break;\n        }\n    };\n}\n\n- (void)startUrlProtocol:(NSNotification *)notification {\n    NSString *isShowUrl = notification.object;\n    if ([isShowUrl intValue] == 1) {\n        [HXURLProtocol start];\n    }else{\n        [HXURLProtocol stop];\n    }\n}\n\n- (void)registerStockCodeTable {\n    // 无网络时只注册elk，不发送请求\n    if (![LJSystemGeneralContent isConnectionAvailable]) {\n        [LJStockCodeTableManage share].sendElkBlock = ^(NSDictionary * _Nonnull params) {\n            [self sendStockCodeTableElk:params];\n        };\n        return;\n    }\n    \n    // 获取网络权限后重新初始化合约代码表\n    [LJStockCodeTable registerStockCodeTableBySendElkBlock:^(NSDictionary * _Nonnull params) {\n        [self sendStockCodeTableElk:params];\n    } stockRequestCompletion:^(BOOL isSuccess) {\n        \n    } varietyRequestCompletion:^(BOOL isSuccess) {\n        \n    }];\n}\n\n- (void)sendStockCodeTableElk:(NSDictionary * _Nonnull)params{\n    Log(LJStockCodeTableELKBt, LJStockCodeTableELKTrace, params);\n}\n\n- (void)applicationWillResignActive:(UIApplication *)application {\n    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.\n    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.\n}\n\n- (void)applicationDidEnterBackground:(UIApplication *)application {\n    [HXEnvManager getDataBaseService]->writeHistoryStocksToLocal();\n    HXLogInfo(kQHGlobal, @\"app 已经进入后台\");\n    //! 保存行为收集的纪录\n    [AMCollectUserBehavior saveActionRecord];\n    \n    //储存指标数据到本地\n    [[LJTechDataManage sharedInstance] archiveTechData];\n    \n    // 添加时间自动登录时间记录\n    [[HXTradeAutoLoginManager shared] updateEnterBackgroundDateWithDate:[NSDate date]];\n}\n\n- (void)applicationWillEnterForeground:(UIApplication *)application {\n    application.applicationIconBadgeNumber = 0;\n    HXLogInfo(kQHGlobal, @\"app 即将进入前台\");\n    // sdk心跳检测，判断sdk断连情况\n    [HXTradeClientSDK checkSpiHeartBeat];\n}\n\n- (void)a","infill":"oMsgPush.TY isEqualToSt","suffix":"ring:LJPushedTypeUserPermission] && _infoMsgPush.U.length > 0) {\n            [self openUrlMessagePush];\n        } else {\n            if ([_infoMsgPush.pushType isEqualToString:@\"feedback\"]) {\n                [[FeedBackManager shared] goFeedBackList:_infoMsgPush.U];\n            } else {\n                // re\n            }\n        }\n    }\n}\n\n- (BOOL)isSameTradeAccount {\n    return _infoMsgPush.tradeNoForHuiBao.length > 0 &&\n    [MePool sharedMePool].transactionAccountID.length > 0 &&\n    [[MePool sharedMePool].transactionAccountID isEqualToString:_infoMsgPush.tradeNoForHuiBao];\n}\n\n- (NSString *)getTabIndexWithInfoType:(NSString *)type {\n    NSInteger index = [type integerValue];\n    switch (index) {\n        case 1:\n            return @\"2\";//委托回报跳转到挂单\n            break;\n        case 2:\n            return @\"4\";//成交回报跳转到成交\n            break;\n        case 3:\n            return @\"3\";//撤单回报跳转到委托\n            break;\n        default:\n            return @\"1\";//默认跳转\n            break;\n    }\n}\n\n- (void)hidenSwitchlistView {\n    for (UIView *viewController in [[UIViewController getCurNavUIViewController].tabBarController.view subviews]) {\n        if ([viewController isKindOfClass:[UIControl class]]) {\n            for (UIView *view in [viewController subviews]) {\n                if ([view isKindOfClass:[SwitchAccountListView class]]) {\n                    [(SwitchAccountListView *)view hide];\n                    break;\n                }\n            }\n        }\n    }\n    \n}\n\n- (void)zyzsPushJump {\n    MePool *mePool = [MePool sharedMePool];\n    if ([mePool isTransactionLogined]) {\n        if ([mePool.transactionAccountID isEqualToString:_infoMsgPush.tradeno] && [mePool.transactionQsid isEqualToString:_infoMsgPush.qsid]) {\n            if ([_infoMsgPush.F isEqualToString:[NSString stringWithFormat:@\"%d\",TradeXiaDanView]]) {\n                NSDictionary *parmaa = @{@\"webid\":[NSString stringWithFormat:@\"%d\",TradeXiaDanView]};\n                [[[JumpTool alloc] init] jumpToViewControllerWithFrameID:[NSString stringWithFormat:@\"%d\",TradeXiaDanView] withParms:parmaa];\n            } else {\n                NSDictionary *parma = @{@\"webid\": _infoMsgPush.F};\n                [[[JumpTool alloc] init] jumpToViewControllerWithFrameID:_infoMsgPush.F withParms:parma];\n            }\n        } else {\n            self.tradeAccount = _infoMsgPush.tradeno;\n            self.tradeAccountQSID = _infoMsgPush.qsid;\n            self.tradeAccountWTID = _infoMsgPush.wtid;\n            [mePool exitTransactionLogin];\n            MainTabbarController *tabBarController = (MainTabbarController *)[UIViewController getCurNavUIViewController].tabBarController;\n            if (tabBarController.selectedIndex == [tabBarController tradeTabIndex]) {\n                [[UIViewController getCurNavUIViewController].navigationController popToRootViewControllerAnimated:YES];\n                [[UIViewController getCurNavUIViewController] viewWillAppear:YES];\n                [[UIViewController getCurNavUIViewController] viewDidAppear:YES];\n            }\n            [tabBarController selectTradeTab];\n        }\n        \n    } else {\n        self.tradeAccount = _infoMsgPush.tradeno;\n        self.tradeAccountQSID = _infoMsgPush.qsid;\n        self.tradeAccountWTID = _infoMsgPush.wtid;\n        MainTabbarController *tabBarController = (MainTabbarController *)[UIViewController getCurNavUIViewController].tabBarController;\n        if (tabBarController.selectedIndex == [tabBarController tradeTabIndex]) {\n            [[UIViewController getCurNavUIViewController].navigationController popToRootViewControllerAnimated:YES];\n            [[UIViewController getCurNavUIViewController] viewWillAppear:YES];\n            [[UIViewController getCurNavUIViewController] viewDidAppear:YES];\n        }\n        [tabBarController selectTradeTab];\n    }\n}\n\n- (void)popToPushFenShiView {\n    if ([UIApplication sharedApplication].statusBarOrientation == UIInterfaceOrientationLandscapeLeft || [UIApplication sharedApplication].statusBarOrientation == UIInterfaceOrientationLandscapeRight) {\n        if (_infoMsgPush.C) {\n\n        }\n    } else {\n        _geGuViewController = [[LJHQDetailController alloc] init];\n        if (_infoMsgPush.C) {\n            LJStockInfo *stockInfo = [LJStockInfoProvider getStockInfo:_infoMsgPush.C];\n            //获取股票名称\n            NSString *name = stockInfo.stockName;\n            NSString *market1 = stockInfo.marketId;\n            NSString *showStockCode = stockInfo.showCode;\n            if (name == nil || [name isKindOfClass:[NSNull class]] || [name isEqual:[NSNull null]]) {\n                return;\n            }\n            if (market1 == nil || [market1 isKindOfClass:[NSNull class]] || [market1 isEqual:[NSNull null]]) {\n                market1 = @\"1\";\n            }\n            if (!IsNSStringNotEmpty(showStockCode)) {\n                showStockCode = @\"\";\n            }\n            NSArray *stockCodeArray = @[self->_infoMsgPush.C];\n            NSArray *stockNameArray = @[name];\n            NSArray *stockMarketArray = @[market1];\n            NSArray *showCodeArray = @[showStockCode];\n            [self->_geGuViewController setValue:@\"0\" forKey:LJHQDetailStockTagKey];\n            [self->_geGuViewController setValue:stockCodeArray forKey:LJHQDetailStockCodeArrayKey];\n            [self->_geGuViewController setValue:stockNameArray forKey:LJHQDetailStockNameArrayKey];\n            [self->_geGuViewController setValue:stockMarketArray forKey:LJHQDetailStockMarketArrayKey];\n            [self->_geGuViewController setValue:showCodeArray forKey:LJHQDetailShowStockCodeArrayKey];\n            if ([self->_infoMsgPush.F isEqualToString:@\"2361\"] || [self->_infoMsgPush.F isEqualToString:@\"2352\"]) {\n                self->_geGuViewController.defaultPeriodType = TimeSharingOrKLineType_kLine_day;\n            }\n            self->_geGuViewController.hidesBottomBarWhenPushed = YES;\n            \n            [[UIViewController getCurNavUIViewController].navigationController pushViewController:self->_geGuViewController animated:YES];\n        }\n    }\n}\n\n- (void)openUrlMessagePush {\n    NSString *urlString = _infoMsgPush.U;\n    NSRange range = [urlString rangeOfString:kClientHtml];\n    if (range.length > 0) {\n        urlString = [urlString stringByRemovingPercentEncoding];\n        urlString = [urlString stringByReplacingOccurrencesOfString:@\"\\\\r\\\\n\" withString:@\"\\r\\n\"];\n        NSDictionary *params = [HXTools getParms:urlString];\n        NSString *pageid = [HXTools getPageID:urlString];\n        [[[JumpTool alloc] init] jumpToViewControllerWithFrameID:pageid withParms:params];\n        return;\n    }\n    \n    WKWebViewController *msgHtmlViewcontorl = [[WKWebViewController alloc] init];\n    msgHtmlViewcontorl.loadURL =  _infoMsgPush.U;\n    if (_infoMsgPush.TY.integerValue == 4) {\n        msgHtmlViewcontorl.navigationTitle = @\"消息\";\n    } else {\n        msgHtmlViewcontorl.navigationTitle = @\"提示消息\";\n    }\n    msgHtmlViewcontorl.hidesBottomBarWhenPushed = YES;\n    [[UIViewController getCurNavUIViewController].navigationController pushViewController:msgHtmlViewcontorl animated:TRUE];\n}\n\n// 注册推送失败\n- (void)application:(UIApplication*)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n    NSLog(@\"注册推送失败 == %@\", error);\n}\n\n//返回第三方APP时候用的回调函数  两者写其一即可\n- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {\n    if ([url.scheme isEqualToString:kAppScheme]) {\n        [[LJRouter shareInstance] openUrl:url];\n        return YES;\n    }\n    if (url.absoluteString) {\n        if ([[url host] isEqualToString:HXTHSAuthRes]) {\n            //手抄授权登录回调\n            if ([[HXEnvManager shareInstance].appWindow isHawkEyeOpen]) {\n                [AMCommunicationManager forceReConnect];\n            }\n                \n            return [HXLoginManager authLoginhandleOpenURL:url];\n        }\n        if ([url.absoluteString isEqualToString:[NSString stringWithFormat:@\"%@","relevantFile":"","relevantFileList":[],"filePath":"AppDelegate.mm","template":"objective-cpp","multiRes":{"hipilot":"pushedMessage:(LJPushedMessageModel *)pushModel {\n    // 推送数据\n    _infoMsgPush = pushModel;\n    \n    // 推送消息分为两类\n    // 一、系统消息（个人信息管理，资金账户管理，交易账户","deepseek-chat-lite":"pplicationDidBecomeActive:(UIApplication *)application {","CodeQwen2.5-7B":"pplicationDidBecomeActive:(UIApplication *)application {","copilot":"oMsgPush.TY isEqualToSt"}},{"prefix":"            [selfWeak tableRequestDataFinished:model];\n        }];\n        return;\n    } else {\n        [_handicapManager unregisterWTSDKHqData];\n    }\n    if (_fullSpeedFetcher == nil) {\n        HXSocketRequest *request = [[HXSocketRequest alloc] initWithProtocolId:FullSpeedProtocolId paramsDict:@{@\"stockcode\":_curCode,@\"marketcode\":_curMarket} pageId:AM_PAGE_HANGQING_PAGE_ID];\n        request.wait = NO;\n        WeakObj(self);\n        _fullSpeedFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n            if (!error) {\n                if (data && [data modelType] == StuffModelTypeTable) {\n                    StuffTableModel *tableData = (StuffTableModel *)data;\n                    [selfWeak setFullSpeedDataWith:tableData];\n                    [selfWeak dealFullSpeedReloadDate];\n                }\n            }\n            \n        }];\n    } else {\n           _fullSpeedFetcher.request.paramsDict =@{@\"stockcode\":_curCode,@\"marketcode\":_curMarket};\n           [_fullSpeedFetcher pause];\n    }\n    [_fullSpeedFetcher start];\n}\n\n#pragma mark -- dealWith Handicap model\n//处理买卖盘口数据\n- (void)dealWithHandicapModelWithModel:(StuffTableModel *)tableModel {\n    [self.buyArr removeAllObjects];\n    [self.sellArr removeAllObjects];\n    [self.infoArr removeAllObjects];\n    //买入\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE1 andAmountKey:SM_HQ_BUYCOUNT1 tradeType:TradeType_buy];\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE2 andAmountKey:SM_HQ_BUYCOUNT2 tradeType:TradeType_buy];\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE3 andAmountKey:SM_HQ_BUYCOUNT3 tradeType:TradeType_buy];\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE4 andAmountKey:SM_HQ_BUYCOUNT4 tradeType:TradeType_buy];\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE5 andAmountKey:SM_HQ_BUYCOUNT5 tradeType:TradeType_buy];\n    \n    if (_isMMPanTen)\n    {\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE6 andAmountKey:SM_HQ_BUYCOUNT6 tradeType:TradeType_buy];\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE7 andAmountKey:SM_HQ_BUYCOUNT7 tradeType:TradeType_buy];\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE8 andAmountKey:SM_HQ_BUYCOUNT8 tradeType:TradeType_buy];\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE9 andAmountKey:SM_HQ_BUYCOUNT9 tradeType:TradeType_buy];\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE10 andAmountKey:SM_HQ_BUYCOUNT10 tradeType:TradeType_buy];\n    }\n    \n    //卖出\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE1 andAmountKey:SM_HQ_SELLCOUNT1 tradeType:TradeType_sell];\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE2 andAmountKey:SM_HQ_SELLCOUNT2 tradeType:TradeType_sell];\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE3 andAmountKey:SM_HQ_SELLCOUNT3 tradeType:TradeType_sell];\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE4 andAmountKey:SM_HQ_SELLCOUNT4 tradeType:TradeType_sell];\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE5 andAmountKey:SM_HQ_SELLCOUNT5 tradeType:TradeType_sell];\n    \n    if (_isMMPanTen)\n    {\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE6 andAmountKey:SM_HQ_SELLCOUNT6 tradeType:TradeType_sell];\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE7 andAmountKey:SM_HQ_SELLCOUNT7 tradeType:TradeType_sell];\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE8 andAmountKey:SM_HQ_SELLCOUNT8 tradeType:TradeType_sell];\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE9 andAmountKey:SM_HQ_SELLCOUNT9 tradeType:TradeType_sell];\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE10 andAmountKey:SM_HQ_SELLCOUNT10 tradeType:TradeType_sell];\n    }\n    \n    \n    \n    self.isPriceLabelHasValue = NO;\n    for (int i = 0; i < _nMMPanCount; i++) {\n        HXWTMMPanModel *itemBuy = [self.buyArr safetyObjectAtIndex:i];\n        itemBuy.titleStr = [NSString stringWithFormat:@\"买%d\",i+1];\n        itemBuy.stockCode = self.curCode;\n        itemBuy.stockMarket = self.curMarket;\n        if (itemBuy.amount == nil ) {\n            itemBuy.amount = [[TableModelColorString alloc] init];\n            itemBuy.amount.string = @\"0\";\n        }\n        HXWTMMPanModel *itemSell = [self.sellArr safetyObjectAtIndex:i];\n        itemSell.titleStr = [NSString stringWithFormat:@\"卖%d\",i+1];\n        if (itemSell.amount == nil ) {\n            itemSell.amount = [[TableModelColorString alloc] init];\n            itemSell.amount.string = @\"0\";\n        }\n        itemSell.stockCode = self.curCode;\n\n        itemSell.stockMarket = self.curMarket;\n        if (!self.isSameStock) {\n            [self setLayoutParameter:itemBuy sellItem:itemSell];\n        }\n    }\n    if (!self.isSameStock) {\n        [self setneedRemoveValue];\n    }\n    [self.infoArr addObject:[[self.sellArr reverseObjectEnumerator] allObjects]];\n    [self.infoArr addObject:self.buyArr];\n\n    [self.tableDelegate setItems:self.infoArr];\n    [self.tableView reloadData];\n}\n\n- (void)setLayoutParameter:(HXWTMMPanModel *)itemBuy sellItem:(HXWTMMPanModel *)itemSell {\n    float buyPriceWidth = [self getNumnberTotalLength:itemBuy.price.string isNumber:NO];\n    float sellPriceWidth = [self getNumnberTotalLength:itemSell.price.string isNumber:NO];\n    float buyOrSellPriceMaxWidth = MAX(buyPriceWidth, sellPriceWidth);\n    self.priceMaxWidth = MAX(self.priceMaxWidth, buyOrSellPriceMaxWidth);\n    float buyNumberWidth = [self getNumnberTotalLength:itemBuy.amount.string isNumber:YES];\n    float sellNumberWidth = [self getNumnberTotalLength:itemSell.amount.string isNumber:YES];\n    float buyOrSellNumberMaxWidth = MAX(buyNumberWidth, sellNumberWidth);\n    self.numberMaxWidth = MAX(self.numberMaxWidth, buyOrSellNumberMaxWidth);\n}\n\n- (BOOL)isSameStockCode {\n    if ([self.oldStockCode isEqualToString:_curCode] && [self.oldStockMarket isEqualToString:_curMarket]) {\n        return YES;\n    }\n    self.faultToleranceWidth = MaxOneNumberWidth;\n    self.numberMaxWidth = 0;\n    self.priceMaxWidth = 0;\n    self.labelOriginX = BASEORIGINX;\n    self.oldStockCode = _curCode;\n    self.oldStockMarket = _curMarket;\n    return NO;\n}\n\n//设置数量label宽度(不同股票时累加,想通股票时清空原有累计数据)\n- (float)getNumnberTotalLength:(NSString *)priceLabelStr isNumber:(BOOL)isNumber {\n    float maxWidth = isNumber ? NUMBERLABELWIDTH : MAXPRICELABELWIDTH;\n    if ([priceLabelStr doubleValue] <= 0) {\n        priceLabelStr = @\"--\";\n    }\n    if (!isNumber && ![priceLabelStr isEqualToString:@\"--\"]) {\n        self.isPriceLabelHasValue = YES;\n    }\n    CGSize textSize = [priceLabelStr boundingRectWithSize:CGSizeMake(CGFLOAT_MAX, CGFLOAT_MAX)\n                                                       options:NSStringDrawingUsesFontLeading | NSStringDrawingUsesLineFragmentOrigin\n                                                    attributes:@{NSFontAttributeName : [UIFont THSMoneyFontOfSize:12]}\n                                                       context:nil].size;\n    //预置容错宽度，4的宽度是6.24，取7\n    float labelWidth = textSize.width + MaxOneNumberWidth;\n    labelWidth = MIN(labelWidth, maxWidth);\n    if (isNumber) {\n        //每条数据的容错宽度\n        float toleranceWidth = labelWidth - textSize.width;\n        //取最小的容错宽度\n        self.faultToleranceWidth = MIN(toleranceWidth, self.faultToleranceWidth);\n    }\n    return labelWidth;\n}\n\n- (void)setneedRemoveValue {\n    if (self.priceMaxWidth <= 0 || !self.isPriceLabelHasValue) {\n        self.priceMaxWidth = MAXPRICELABELWIDTH;\n  ","infill":"end\n","suffix":"","relevantFile":"","relevantFileList":[],"filePath":"HXWTMMPanTen.mm","template":"objective-cpp","multiRes":{"hipilot":"      [self.buyArr enumerateObjectsUsingBlock:^(HXWTMMPanModel * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n            obj.price.string = @\"--\";\n        }];\n        [self.s","deepseek-chat-lite":"  }","CodeQwen2.5-7B":"  }","copilot":"end\n"}},{"prefix":"\n#import \"HXWTModuleManager.h\"\n#import \"WtModule.h\"\n#import <Foundation/Foundation.h>\n#import <objc/runtime.h>\n#import \"HXAutoOrderShareData.h\"\n\n//资源Key\nNSString *const Kget = @\"get\";\nNSString *const Kdata = @\"data\";\nNSString *const KConfigFilePath = @\"ConfigFilePath\";\nNSString *const KCommonFontHeight = @\"CommonFontHeight\";\nNSString *const KAppletVersion = @\"AppletVersion\";\nNSString *const KIMEI = @\"IMEI\";\nNSString *const KIMSI = @\"IMSI\";\nNSString *const KMac = @\"Mac\";\nNSString *const KSysVer = @\"SysVer\";\nNSString *const KFunClientSupport = @\"FunClientSupport\";\nNSString *const KProgid = @\"Progid\";\nNSString *const KAccount = @\"Account\";\nNSString *const KPhone = @\"Phone\";\nNSString *const KUDID = @\"UDID\";\nNSString *const KApp = @\"App\";\nNSString *const KUserid = @\"Userid\";\nNSString *const KPwdMd5 = @\"PwdMd5\";\nNSString *const KSessionId = @\"SessionId\";\nNSString *const KClientIp = @\"ClientIp\";\nNSString *const KSysBootTime = @\"SysBootTime\";\nNSString *const KLogLevel = @\"LogLevel\";\nNSString *const KIPv4Environment = @\"IPv4Environment\";\nNSString *const KMobileServer = @\"MobileServer\";\nNSString *const KReloadLua = @\"ReloadLua\";\nNSString *const KNetType = @\"NetType\";\nNSString *const KWTZLFunClientSupport = @\"WTZLFunClientSupport\";\nNSString *const KReqMd5Str = @\"ReqMd5Str\";\n\n//主站回调\n@interface HXWTClientInterfaceMap : NSObject\n\n@property (nonatomic, copy) HXWTModuleClientInterface ciBlock;\n@property (nonatomic, assign) WTMODULE_CLIENT_INTERFACE ciIMP;\n\n- (instancetype)initWithIMP:(WTMODULE_CLIENT_INTERFACE)ciIMP blcok:(HXWTModuleClientInterface)ciBlcok;\n@end\n\n@implementation HXWTClientInterfaceMap\n\n- (instancetype)initWithIMP:(WTMODULE_CLIENT_INTERFACE)ciIMP blcok:(HXWTModuleClientInterface)ciBlcok\n{\n    if (self = [super init]) {\n        self.ciIMP = ciIMP;\n        self.ciBlock = ciBlcok;\n    }\n    return self;\n}\n@end\n\nstatic HXWTModuleReplyHandle __replayHandler = nil;\nstatic NSMutableDictionary *__clientInterfaceCache = nil;\nstatic dispatch_queue_t wtmoduleBarrierQueue;\nstatic BOOL __hasRegister;\n\n//=====衔接委托SDK部分=====\nstatic HXWTModuleManager *shareInstance;\n@implementation HXWTModuleManager\n\n+ (HXWTModuleManager *)sharedManager{\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        shareInstance = [[HXWTModuleManager alloc] init];\n    });\n    return shareInstance;\n}\n\n+ (void)initialize\n{\n    wtmoduleBarrierQueue = dispatch_queue_create(\"cn.com.10jqka.WTModuleBarrierQueue\", DISPATCH_QUEUE_CONCURRENT);\n}\n\n//委托模块是否初始化\n+ (BOOL)hasWTModuleRegister{\n    return __hasRegister;\n}\n\n// 重制模块初始化状态\n+ (void)resetWTModuleRegister{\n    __hasRegister = NO;\n}\n\n\n+ (void)setLuaKey:(NSString *)luaKey{\n    if (luaKey == nil) {\n        return;\n    }\n    setLuaAESKey([luaKey UTF8String]);\n}\n\n+ (void)wtModuleRegister\n{\n    if (__hasRegister) {\n        [self tipInfo:@\"委托模块已经初始化！！！！\"];\n        return;\n    }\n    if (!isReadyLuaAESKey()) {\n        [self tipInfo:@\"未设置LuaKey值！！！！\"];\n        return;\n    }\n    [self tipInfo:@\"委托模块初始化!\"];\n    //注册数据回调接口\n    [self registerWtmodule];\n    //注册客户端与SDK通信管道\n    [self registerClientInterface];\n    //已经初始化过wtModule\n    __hasRegister = YES;\n}\n\n+ (int)sendRequestToWtmoduleWithData:(char *)pData length:(int)nLen\n{\n    if(!__hasRegister){\n        [self tipInfo:@\"委托模块未初始化~~~\"];\n        return 0;\n    }\n    int i = sendReqToWtmodule(pData, nLen);\n    return i;\n}\n\n+ (int)notifyUserChanged{\n    return sendReqToWtmodule(NULL, 0 ,WTMODULE_TYPE_USER_CHANGED);\n}\n\n+ (int)registerWtmodule{\n    return [self registerWtModuleReplyHandle:^int(char *pData, int nLen) {\n        // pData的含义：","infill":"pData为SDK返回的数据，nLen为pData的长度\n        // nLen的含义：","suffix":"\n        //容错处理\n        if(pData == NULL || nLen == 0) return -1;\n        //分发数据\n        NSString *logStr = [NSString stringWithFormat:@\"====== 接收委托SDK数据：长度%d ======\", nLen];\n        [self logInfo:logStr];\n        char *pDataCopy = new char[nLen];\n        memcpy(pDataCopy, pData, nLen);\n        //回调主站返回的数据\n        if (shareInstance && shareInstance.receiveDataCallback) {\n            shareInstance.receiveDataCallback(pData, nLen);\n        }\n        delete [] pDataCopy;\n        return 1;\n    }];\n}\n\n+ (void)registerClientInterface\n{\n    ///注册 CLIENT_INTERFACE_LOG\n    [self registerWtModuleWithFlag:CLIENT_INTERFACE_LOG clientInterface:^int(const char *pIn, int nLen, char **pOut) {\n        //日志接口\n\n        if(pIn == NULL){\n           return 0;\n        }\n        \n        if (shareInstance && shareInstance.wtLogInfoCallback) {\n            shareInstance.wtLogInfoCallback(pIn, nLen, pOut);\n        }\n        return 1;\n    }];\n\n//    // 直连模块初始化成功注册,JIRA3074 ，经评估暂时无效\n//    [self registerWtModuleWithFlag:CLIENT_INTERFACE_NOTIFY clientInterface:^int(const char *pIn, int nLen, char **pOut) {\n//        if (shareInstance && shareInstance.initializaSuccCallback) {\n//            shareInstance.initializaSuccCallback(pIn, nLen, pOut);\n//        }\n//        return 1;\n//    }];\n\n    ///注册 CLIENT_INTERFACE_GET\n    dispatch_barrier_async(wtmoduleBarrierQueue, ^{\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [self registerWtModuleWithFlag:CLIENT_INTERFACE_GET clientInterface:^int(const char *pIn, int nLen, char **pOut) {\n                ///将string转成json对象\n                NSString *jsonString = [NSString stringWithUTF8String:pIn];\n                id jsonObj = [self getJSONValue:jsonString];\n                if ([jsonObj isKindOfClass:[NSDictionary class]]) {\n                    NSDictionary *sourceDic = (NSDictionary *)jsonObj;\n                    //获取配置信息内容\n                    if (shareInstance && shareInstance.configDataCallback) {\n                        NSDictionary *configDic = shareInstance.configDataCallback(sourceDic);\n                        if (configDic && [configDic isKindOfClass:[NSDictionary class]]) {\n                            NSString *pOutNSString = [self objectToJsonString:configDic];\n                            if (pOutNSString) {\n                                const char* pszReturn = [pOutNSString cStringUsingEncoding:NSUTF8StringEncoding];\n                                __wtModuleCopyString__(pOut, pszReturn);\n                                int nOutLen = (int)strlen(*pOut);\n                                return nOutLen;\n                            }\n                        }else{\n                            [self logInfo:@\"未获取的配置信息\"];\n                        }\n                    }\n                    return -1;\n                }else {\n                    return -1;\n                }\n            }];\n        });\n    });\n}\n\n+ (int)registerWtModuleReplyHandle:(HXWTModuleReplyHandle)wtModuleReplyHandle\n{\n    self.replayHandler = wtModuleReplyHandle;\n    return initWtmodule(receiveWtModuleData);\n}\n\n+ (int)registerWtModuleWithFlag:(int)flag clientInterface:(HXWTModuleClientInterface)clientInterface\n{\n    //TODO: 动态创建C函数\n    ///每次注册时，可以动态创建C函数壳，实现返回注册的Block\n    HXWTClientInterfaceMap *ciMap = [[HXWTClientInterfaceMap alloc] initWithIMP:[self clientInterfaceWithFlag:flag] blcok:clientInterface];\n    [self.clientInterfaceCache setObject:ciMap forKey:@(flag)];\n    return registerClientInterface(flag, ciMap.ciIMP);\n}\n\n+ (int)unRegisterClientInterfaceWithFlag:(int)flag\n{\n    [self.clientInterfaceCache removeObjectForKey:@(flag)];\n    return unRegisterClientInterface(flag);\n}\n\n//打印一些信息日志\n+ (void)logInfo:(NSString *)logStr{\n    if (shareInstance && shareInstance.logInfoCallback) {\n        shareInstance.logInfoCallback(logStr);\n    }\n}\n\n//提示信息\n+ (void)tipInfo:(NSString *)logStr{\n    if (shareInstance && shareInstance.tipInfoCallback) {\n        shareInstance.tipInfoCallback(logStr);\n    }\n}\n\n#pragma mark - private Methods\nint receiveWtModuleData(char *pData, int nLen)\n{\n    return HXWTModuleManager.replayHandler(pData, nLen);\n}\n\nint clinetInterface_Get(const char *pIn, int nLen, char **pOut)\n{\n    HXWTClientInterfaceMap *ciMap = [HXWTModuleManager.clientInterfaceCache objectForKey:@(CLIENT_INTERFACE_GET)];\n    return ciMap ? ciMap.ciBlock(pIn, nLen, pOut) : -1;\n}\n\nint clinetInterface_Log(const char *pIn, int nLen, char **pOut)\n{\n    HXWTClientInterfaceMap *ciMap = [HXWTModuleManager.clientInterfaceCache objectForKey:@(CLIENT_INTERFACE_LOG)];\n    return ciMap ? ciMap.ciBlock(pIn, nLen, pOut) : -1;\n}\n\n//int clinetInterface_Notify(const char *pIn, int nLen, char **pOut)\n//{\n//    HXWTClientInterfaceMap *ciMap = [HXWTModuleManager.clientInterfaceCache objectForKey:@(CLIENT_INTERFACE_NOTIFY)];\n//    return ciMap ? ciMap.ciBlock(pIn, nLen, pOut) : -1;\n//}\n\n\n#pragma mark - Getter & Setter\n+ (HXWTModuleReplyHandle)replayHandler\n{\n    return __replayHandler;\n}\n\n+ (void)setReplayHandler:(HXWTModuleReplyHandle)replayHandler\n{\n    __replayHandler = [replayHandler copy];\n}\n                   \n+ (void)setClientInterfaceCache:(NSMutableDictionary *)clientInterfaceCache\n{\n    __clientInterfaceCache = clientInterfaceCache;\n}\n\n+ (NSMutableDictionary *)clientInterfaceCache\n{\n    if (!__clientInterfaceCache) {\n        __clientInterfaceCache = [[NSMutableDictionary alloc] init];\n    }\n    return __clientInterfaceCache;\n}\n\n#pragma mark - Tool Methods\n+ (WTMODULE_CLIENT_INTERFACE)clientInterfaceWithFlag:(int)flag\n{\n    switch (flag) {\n        case CLIENT_INTERFACE_GET:\n        {\n            return clinetInterface_Get;\n        }\n            break;\n        case CLIENT_INTERFACE_LOG:\n        {\n            return clinetInterface_Log;\n        }\n            break;\n//        case CLIENT_INTERFACE_NOTIFY:\n//        {\n//            return clinetInterface_Notify;\n//        }\n            break;\n        default:\n        {\n            return NULL;\n        }\n            break;\n    }\n}\n\nint __wtModuleCopyString__(char **ppDest, const char *pSrc)\n{\n    if (*ppDest) {\n        delete [] (*ppDest);\n        *ppDest = NULL;\n    }\n    if (pSrc) {\n        unsigned long nLen = strlen(pSrc) + 1;\n        *ppDest = new char[nLen];\n        if (*ppDest == NULL)\n            return -1;\n        strcpy(*ppDest, pSrc);\n    }\n    return 0;\n}\n\n+ (int)unRegisterWtmodule{\n    self.replayHandler = nil;\n    return closeWtmodule();\n}\n\n//Util,Method 字符串转NSDictionary\n+ (id)getJSONValue:(NSString *)jsonStr {\n    if (jsonStr == nil || jsonStr.length == 0) {\n        return nil;\n    }\n    NSError *error = nil;\n    id value = [NSJSONSerialization JSONObjectWithData:[jsonStr dataUsingEncoding:NSUTF8StringEncoding] options:NSJSONReadingMutableLeaves\n                | NSJSONReadingMutableContainers error:&error];\n    if (error) {\n        return nil;\n    }\n    return value;\n}\n\n//NSDictionary转JSON字符串\n+ (NSString *)objectToJsonString:(NSDictionary *)dict{\n    NSError *error = nil;\n    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dict options:NSJSONWritingPrettyPrinted error:&error];\n    if (jsonData == nil || error) {\n        return nil;\n    }\n    return [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n}\n\n\n\n@end\n\n","relevantFile":"","relevantFileList":[],"filePath":"HXWTModuleManager.mm","template":"objective-cpp","multiRes":{"hipilot":"包含加密的数据","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"pData为SDK返回的数据，nLen为pData的长度\n        // nLen的含义："}},{"prefix":"\n#import \"HXWTModuleManager.h\"\n#import \"WtModule.h\"\n#import <Foundation/Foundation.h>\n#import <objc/runtime.h>\n#import \"HXAutoOrderShareData.h\"\n\n//资源Key\nNSString *const Kget = @\"get\";\nNSString *const Kdata = @\"data\";\nNSString *const KConfigFilePath = @\"ConfigFilePath\";\nNSString *const KCommonFontHeight = @\"CommonFontHeight\";\nNSString *const KAppletVersion = @\"AppletVersion\";\nNSString *const KIMEI = @\"IMEI\";\nNSString *const KIMSI = @\"IMSI\";\nNSString *const KMac = @\"Mac\";\nNSString *const KSysVer = @\"SysVer\";\nNSString *const KFunClientSupport = @\"FunClientSupport\";\nNSString *const KProgid = @\"Progid\";\nNSString *const KAccount = @\"Account\";\nNSString *const KPhone = @\"Phone\";\nNSString *const KUDID = @\"UDID\";\nNSString *const KApp = @\"App\";\nNSString *const KUserid = @\"Userid\";\nNSString *const KPwdMd5 = @\"PwdMd5\";\nNSString *const KSessionId = @\"SessionId\";\nNSString *const KClientIp = @\"ClientIp\";\nNSString *const KSysBootTime = @\"SysBootTime\";\nNSString *const KLogLevel = @\"LogLevel\";\nNSString *const KIPv4Environment = @\"IPv4Environment\";\nNSString *const KMobileServer = @\"MobileServer\";\nNSString *const KReloadLua = @\"ReloadLua\";\nNSString *const KNetType = @\"NetType\";\nNSString *const KWTZLFunClientSupport = @\"WTZLFunClientSupport\";\nNSString *const KReqMd5Str = @\"ReqMd5Str\";\n\n//主站回调\n@interface HXWTClientInterfaceMap : NSObject\n\n@property (nonatomic, copy) HXWTModuleClientInterface ciBlock;\n@property (nonatomic, assign) WTMODULE_CLIENT_INTERFACE ciIMP;\n\n- (instancetype)initWithIMP:(WTMODULE_CLIENT_INTERFACE)ciIMP blcok:(HXWTModuleClientInterface)ciBlcok;\n@end\n\n@implementation HXWTClientInterfaceMap\n\n- (instancetype)initWithIMP:(WTMODULE_CLIENT_INTERFACE)ciIMP blcok:(HXWTModuleClientInterface)ciBlcok\n{\n    if (self = [super init]) {\n        self.ciIMP = ciIMP;\n        self.ciBlock = ciBlcok;\n    }\n    return self;\n}\n@end\n\nstatic HXWTModuleReplyHandle __replayHandler = nil;\nstatic NSMutableDictionary *__clientInterfaceCache = nil;\nstatic dispatch_queue_t wtmoduleBarrierQueue;\nstatic BOOL __hasRegister;\n\n//=====衔接委托SDK部分=====\nstatic HXWTModuleManager *shareInstance;\n@implementation HXWTModuleManager\n\n+ (HXWTModuleManager *)sharedManager{\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        shareInstance = [[HXWTModuleManager alloc] init];\n    });\n    return shareInstance;\n}\n\n+ (void)initialize\n{\n    wtmoduleBarrierQueue = dispatch_queue_create(\"cn.com.10jqka.WTModuleBarrierQueue\", DISPATCH_QUEUE_CONCURRENT);\n}\n\n//委托模块是否初始化\n+ (BOOL)hasWTModuleRegister{\n    return __hasRegister;\n}\n\n// 重制模块初始化状态\n+ (void)resetWTModuleRegister{\n    __hasRegister = NO;\n}\n\n\n+ (void)setLuaKey:(NSString *)luaKey{\n    if (luaKey == nil) {\n        return;\n    }\n    setLuaAESKey([luaKey UTF8String]);\n}\n\n+ (void)wtModuleRegister\n{\n    if (__hasRegister) {\n        [self tipInfo:@\"委托模块已经初始化！！！！\"];\n        return;\n    }\n    if (!isReadyLuaAESKey()) {\n        [self tipInfo:@\"未设置LuaKey值！！！！\"];\n        return;\n    }\n    [self tipInfo:@\"委托模块初始化!\"];\n    //注册数据回调接口\n    [self registerWtmodule];\n    //注册客户端与SDK通信管道\n    [self registerClientInterface];\n    //已经初始化过wtModule\n    __hasRegister = YES;\n}\n\n+ (int)sendRequestToWtmoduleWithData:(char *)pData length:(int)nLen\n{\n    if(!__hasRegister){\n        [self tipInfo:@\"委托模块未初始化~~~\"];\n        return 0;\n    }\n    int i = sendReqToWtmodule(pData, nLen);\n    return i;\n}\n\n+ (int)notifyUserChanged{\n    return sendReqToWtmodule(NULL, 0 ,WTMODULE_TYPE_USER_CHANGED);\n}\n\n+ (int)registerWtmodule{\n    return [self registerWtModuleReplyHandle:^int(char *pData, int nLen) {\n        // pData的含义：pData为SDK返回的数据，nLen为pData的长度\n        // nLen的含义：","infill":"\n        //容错处理\n        if(","suffix":"pData == NULL || nLen == 0) return -1;\n        //分发数据\n        NSString *logStr = [NSString stringWithFormat:@\"====== 接收委托SDK数据：长度%d ======\", nLen];\n        [self logInfo:logStr];\n        char *pDataCopy = new char[nLen];\n        memcpy(pDataCopy, pData, nLen);\n        //回调主站返回的数据\n        if (shareInstance && shareInstance.receiveDataCallback) {\n            shareInstance.receiveDataCallback(pData, nLen);\n        }\n        delete [] pDataCopy;\n        return 1;\n    }];\n}\n\n+ (void)registerClientInterface\n{\n    ///注册 CLIENT_INTERFACE_LOG\n    [self registerWtModuleWithFlag:CLIENT_INTERFACE_LOG clientInterface:^int(const char *pIn, int nLen, char **pOut) {\n        //日志接口\n\n        if(pIn == NULL){\n           return 0;\n        }\n        \n        if (shareInstance && shareInstance.wtLogInfoCallback) {\n            shareInstance.wtLogInfoCallback(pIn, nLen, pOut);\n        }\n        return 1;\n    }];\n\n//    // 直连模块初始化成功注册,JIRA3074 ，经评估暂时无效\n//    [self registerWtModuleWithFlag:CLIENT_INTERFACE_NOTIFY clientInterface:^int(const char *pIn, int nLen, char **pOut) {\n//        if (shareInstance && shareInstance.initializaSuccCallback) {\n//            shareInstance.initializaSuccCallback(pIn, nLen, pOut);\n//        }\n//        return 1;\n//    }];\n\n    ///注册 CLIENT_INTERFACE_GET\n    dispatch_barrier_async(wtmoduleBarrierQueue, ^{\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [self registerWtModuleWithFlag:CLIENT_INTERFACE_GET clientInterface:^int(const char *pIn, int nLen, char **pOut) {\n                ///将string转成json对象\n                NSString *jsonString = [NSString stringWithUTF8String:pIn];\n                id jsonObj = [self getJSONValue:jsonString];\n                if ([jsonObj isKindOfClass:[NSDictionary class]]) {\n                    NSDictionary *sourceDic = (NSDictionary *)jsonObj;\n                    //获取配置信息内容\n                    if (shareInstance && shareInstance.configDataCallback) {\n                        NSDictionary *configDic = shareInstance.configDataCallback(sourceDic);\n                        if (configDic && [configDic isKindOfClass:[NSDictionary class]]) {\n                            NSString *pOutNSString = [self objectToJsonString:configDic];\n                            if (pOutNSString) {\n                                const char* pszReturn = [pOutNSString cStringUsingEncoding:NSUTF8StringEncoding];\n                                __wtModuleCopyString__(pOut, pszReturn);\n                                int nOutLen = (int)strlen(*pOut);\n                                return nOutLen;\n                            }\n                        }else{\n                            [self logInfo:@\"未获取的配置信息\"];\n                        }\n                    }\n                    return -1;\n                }else {\n                    return -1;\n                }\n            }];\n        });\n    });\n}\n\n+ (int)registerWtModuleReplyHandle:(HXWTModuleReplyHandle)wtModuleReplyHandle\n{\n    self.replayHandler = wtModuleReplyHandle;\n    return initWtmodule(receiveWtModuleData);\n}\n\n+ (int)registerWtModuleWithFlag:(int)flag clientInterface:(HXWTModuleClientInterface)clientInterface\n{\n    //TODO: 动态创建C函数\n    ///每次注册时，可以动态创建C函数壳，实现返回注册的Block\n    HXWTClientInterfaceMap *ciMap = [[HXWTClientInterfaceMap alloc] initWithIMP:[self clientInterfaceWithFlag:flag] blcok:clientInterface];\n    [self.clientInterfaceCache setObject:ciMap forKey:@(flag)];\n    return registerClientInterface(flag, ciMap.ciIMP);\n}\n\n+ (int)unRegisterClientInterfaceWithFlag:(int)flag\n{\n    [self.clientInterfaceCache removeObjectForKey:@(flag)];\n    return unRegisterClientInterface(flag);\n}\n\n//打印一些信息日志\n+ (void)logInfo:(NSString *)logStr{\n    if (shareInstance && shareInstance.logInfoCallback) {\n        shareInstance.logInfoCallback(logStr);\n    }\n}\n\n//提示信息\n+ (void)tipInfo:(NSString *)logStr{\n    if (shareInstance && shareInstance.tipInfoCallback) {\n        shareInstance.tipInfoCallback(logStr);\n    }\n}\n\n#pragma mark - private Methods\nint receiveWtModuleData(char *pData, int nLen)\n{\n    return HXWTModuleManager.replayHandler(pData, nLen);\n}\n\nint clinetInterface_Get(const char *pIn, int nLen, char **pOut)\n{\n    HXWTClientInterfaceMap *ciMap = [HXWTModuleManager.clientInterfaceCache objectForKey:@(CLIENT_INTERFACE_GET)];\n    return ciMap ? ciMap.ciBlock(pIn, nLen, pOut) : -1;\n}\n\nint clinetInterface_Log(const char *pIn, int nLen, char **pOut)\n{\n    HXWTClientInterfaceMap *ciMap = [HXWTModuleManager.clientInterfaceCache objectForKey:@(CLIENT_INTERFACE_LOG)];\n    return ciMap ? ciMap.ciBlock(pIn, nLen, pOut) : -1;\n}\n\n//int clinetInterface_Notify(const char *pIn, int nLen, char **pOut)\n//{\n//    HXWTClientInterfaceMap *ciMap = [HXWTModuleManager.clientInterfaceCache objectForKey:@(CLIENT_INTERFACE_NOTIFY)];\n//    return ciMap ? ciMap.ciBlock(pIn, nLen, pOut) : -1;\n//}\n\n\n#pragma mark - Getter & Setter\n+ (HXWTModuleReplyHandle)replayHandler\n{\n    return __replayHandler;\n}\n\n+ (void)setReplayHandler:(HXWTModuleReplyHandle)replayHandler\n{\n    __replayHandler = [replayHandler copy];\n}\n                   \n+ (void)setClientInterfaceCache:(NSMutableDictionary *)clientInterfaceCache\n{\n    __clientInterfaceCache = clientInterfaceCache;\n}\n\n+ (NSMutableDictionary *)clientInterfaceCache\n{\n    if (!__clientInterfaceCache) {\n        __clientInterfaceCache = [[NSMutableDictionary alloc] init];\n    }\n    return __clientInterfaceCache;\n}\n\n#pragma mark - Tool Methods\n+ (WTMODULE_CLIENT_INTERFACE)clientInterfaceWithFlag:(int)flag\n{\n    switch (flag) {\n        case CLIENT_INTERFACE_GET:\n        {\n            return clinetInterface_Get;\n        }\n            break;\n        case CLIENT_INTERFACE_LOG:\n        {\n            return clinetInterface_Log;\n        }\n            break;\n//        case CLIENT_INTERFACE_NOTIFY:\n//        {\n//            return clinetInterface_Notify;\n//        }\n            break;\n        default:\n        {\n            return NULL;\n        }\n            break;\n    }\n}\n\nint __wtModuleCopyString__(char **ppDest, const char *pSrc)\n{\n    if (*ppDest) {\n        delete [] (*ppDest);\n        *ppDest = NULL;\n    }\n    if (pSrc) {\n        unsigned long nLen = strlen(pSrc) + 1;\n        *ppDest = new char[nLen];\n        if (*ppDest == NULL)\n            return -1;\n        strcpy(*ppDest, pSrc);\n    }\n    return 0;\n}\n\n+ (int)unRegisterWtmodule{\n    self.replayHandler = nil;\n    return closeWtmodule();\n}\n\n//Util,Method 字符串转NSDictionary\n+ (id)getJSONValue:(NSString *)jsonStr {\n    if (jsonStr == nil || jsonStr.length == 0) {\n        return nil;\n    }\n    NSError *error = nil;\n    id value = [NSJSONSerialization JSONObjectWithData:[jsonStr dataUsingEncoding:NSUTF8StringEncoding] options:NSJSONReadingMutableLeaves\n                | NSJSONReadingMutableContainers error:&error];\n    if (error) {\n        return nil;\n    }\n    return value;\n}\n\n//NSDictionary转JSON字符串\n+ (NSString *)objectToJsonString:(NSDictionary *)dict{\n    NSError *error = nil;\n    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dict options:NSJSONWritingPrettyPrinted error:&error];\n    if (jsonData == nil || error) {\n        return nil;\n    }\n    return [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n}\n\n\n\n@end\n\n","relevantFile":"","relevantFileList":[],"filePath":"HXWTModuleManager.mm","template":"objective-cpp","multiRes":{"hipilot":"nLen为pData的长度，","deepseek-chat-lite":"nLen为SDK返回的数据长度","CodeQwen2.5-7B":"pData的长度","copilot":"\n        //容错处理\n        if("}},{"prefix":"\n#import \"MainTabbarController.h\"\n#import \"HXUIFrmPool.h\"\n#import \"UserDefaultsPoolKeys.h\"\n#import \"AM_UI_VarKeyString.h\"\n#import \"MePool.h\"\n#import \"EntreyJiaoYiTabViewController.h\"\n#import \"UIView+Toast.h\"\n#import \"BuryPointWindow.h\"\n#import \"SurveyModel.h\"\n#import \"LJHQDetailController.h\"\n#import \"SwitchAccountListView.h\"\n#import \"JiaoYiLoginPool.h\"\n#import \"EQCommunicationManager.h\"\n#import \"HomeViewController.h\"\n#import \"WKHorizontalScreenWebViewController.h\"\n#import \"HXTradeOrderMaroc.h\"\n#import \"HXTradeLoginManager.h\"\n#import \"HXTradeElkLog.h\"\n#import \"HXJumpModuleManager.h\"\n#import \"HXSwiftHeader.h\"\n#import \"HangQingTabViewController.h\"\n#import \"DynamicZiXunViewController.h\"\n#import \"HXPIPManager.h\"\n#import \"LJPrivacyManage.h\"\n#import \"AppDelegate.h\"\n#import \"LJLaunchGrayScaleManager.h\"\n\n#import \"LJInformationTotalViewController.h\"\n#import <HXBaseViewController/HXViewController.h>\n#import \"LJTabbarModel.h\"\n#import <HXBaseViewController/NavigationControllerEx.h>\n#import \"YUBaseTabBar.h\"\n#import <HXTradeDevelopTool/HXTradeDevelopTool.h>\n#import <LEEAlert/LEEAlert.h>\n#import <LJAlertView/LEEAlert+LJStyle.h>\n#import <LJCategoryKit/UIViewController+LJAdd.h>\n#import <LJCommunication/AMCommunicationManager.h>\n#import <LJDeviceHelper/LJDeviceHelper.h>\n#import <LJInformationViewController/LJInformationViewController.h>\n#import <LJPopUpManager/HXPopUpManager.h>\n#import <LJTradeFunctionManager/HXTradeFunctionManager.h>\n#import <LJUIKit/LJBadgeKit.h>\n#import <LogManager/LJLogManagerMacros.h>\n#import <HXLauncher/HXLAppLifeLauncher.h>\n#import <LJGrayView/LJGrayView.h>\n\n@import GrayScaleManager;\n@import LJTradeLog;\n@import LJTradeAccountManager;\n \nstatic const NSString *kMainTabbarJson = @\"mainTabbar\";\nstatic NSString *kEntreyJiaoYiTabViewController = @\"EntreyJiaoYiTabViewController\";\n\nstatic NSString * const kSystem = @\"14.2\";\nstatic NSString *kLJInformationTotalViewController = @\"LJInformationTotalViewController\";\nstatic NSString *kNewInformationTabBadge = @\"NEW\";\nstatic NSString *kTabBar = @\"TabBar\";\n\n/// tabId\nstatic NSString *kHome = @\"home\";\nstatic NSString *kQuotes = @\"quotes\";\nstatic NSString *kTrade = @\"trade\";\nstatic NSString *kAI = @\"ai\";\nstatic NSString *kInformation = @\"information\";\n\n/// 灰度开关\nstatic NSString *const kAITabGray = @\"aiTab\";\n\n@interface MainTabbarController () <UITabBarDelegate>\n\n@property (nonatomic, strong) UIView *backView; //自定义tabbar背景\n@property (nonatomic, strong) UIView *topLine;\n@property (nonatomic, assign) NSInteger originalTag;    //获取原来显示的tab编号\n@property (nonatomic, strong) NSMutableArray *tabArray; //tab栏数组\n/// 原始数据，即配置文件中配置的\n@property (nonatomic, strong) NSArray *rawTabBarArray;\n/// 实际使用的数据\n@property (nonatomic, strong) NSMutableArray *tabBarArray;\n@property (nonatomic, strong) NSArray *shouldAutorotateArray;\n/// 资讯页面是否已经加载过了\n@property (nonatomic, assign) BOOL isInformationViewDidLoad;\n/// 是否需要显示老版本资讯\n@property (nonatomic, assign) BOOL needShowNewInformation;\n/// 是否处理启动推送消息\n@property (nonatomic, assign) BOOL isHandledLauncherPushMsg;\n/// 灰化页面\n@property (nonatomic, strong) LJGrayView *grayView;\n\n/// 是否已经更新tab\n@property (nonatomic, assign) BOOL isAlreadyUpdateTab;\n@end\n\n@implementation MainTabbarController\n\n#pragma mark - life cycle\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    /// 加载tabbar配置文件\n    [self loadTabbarJson];\n    /// 处理Tabbar\n    [self addTabBar];\n    /// 添加通知\n    [self addNotifica];\n    /// 添加tab控制器\n    [self addTabController];\n    // 添加资讯灰度监听\n    [self addInformationGrayScaleObserver];\n    /// 初始化基础参数\n    [self addUserDefaut];\n    /// 添加调试相关设置\n    [self addDebugTool];\n    self.shouldAutorotateArray = @[@\"HomeViewController\", @\"HangQingTabViewController\", @\"LJHQDetailController\", @\"LJHQLandscapeDetailController\", @\"MoviePlayViewController\", @\"WKHorizontalScreenWebViewController\", @\"WKWebViewController\", @\"HXFutures.LJLiveRoomsViewController\", @\"HXFutures.LJShortVideoListController\"];\n    \n    // ","infill":"开启纪念日灰化\n    if ([LJFunctionJudge isFunctionEnableForKey:LJAppGrayThemeSwitch]) {\n        [self showGrayView];\n    }\n    \n    UILabel\n}\n\n- (void)viewDidAppear:(BOOL","suffix":")animated {\n    [super viewDidAppear:animated];\n    if (!self.isAlreadyUpdateTab && [LJLaunchGrayScaleManager isLaunchGrayEnable] && [HXLAppLifeLauncher checkLastLaunchValid]){\n        [self updateTabController];\n        [self handleNotificationInfoMsgPush];\n    }\n\n    [self addStarePip];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n}\n\n#pragma mark - 纪念日模式\n\n- (void)showGrayView {\n    self.grayView = [[LJGrayView alloc] initWithFrame:self.tabBar.bounds];\n    [self.tabBar addSubview:self.grayView];\n    [self.tabBar bringSubviewToFront:self.grayView];\n}\n\n#pragma mark - public\n- (void)selectTradeTab {\n    [self selectedTabWith:kTrade];\n}\n\n- (void)selectQuotesTab {\n    [self selectedTabWith:kQuotes];\n}\n\n- (void)selectInformationTab {\n    [self selectedTabWith:kInformation];\n}\n\n- (NSInteger)tradeTabIndex {\n    return [self tabIndexWith:kTrade];\n}\n\n- (NSInteger)quotesTabIndex {\n    return [self tabIndexWith:kQuotes];\n}\n\n- (NSInteger)informationTabIndex {\n    return [self tabIndexWith:kInformation];\n}\n\n- (BOOL)isSelectInformationTab {\n    NSInteger index = [self tabIndexWith:kInformation];\n    if (self.selectedIndex == index) {\n        return YES;\n    }\n    return NO;\n}\n\n- (NSInteger)aiTabIndex {\n    return [self tabIndexWith:kAI];\n}\n\n- (NSInteger)tabCount {\n    return self.viewControllers.count;\n}\n\n- (void)resetAITabBar {\n    BOOL isHideTab = ![LJFunctionJudge isFunctionEnableForKey:LJZongKaiGuanSwitch];\n    BOOL isHideAITab = ![[LJGrayScaleOCManager shared] isEnableForFeatureKey:kAITabGray isDefaultEnable:NO];\n    NSInteger aiIndex = [self aiTabIndex];\n    [self resetTabBarWith:kAI atIndex:aiIndex isHide:isHideTab || isHideAITab];\n}\n\n- (void)resetTabBarWith:(NSString *)tabId atIndex:(NSInteger)index isHide:(BOOL)isHide {\n    if (isHide && index > kNoIndex && index < self.tabBarArray.count) {\n        [self.tabBarArray removeObjectAtIndex:index];\n        [self.tabArray removeObjectAtIndex:index];\n    } else if (!isHide && index == kNoIndex) {\n        int tabIndex = 0;\n        NSInteger insertIndex = kNoIndex;\n        for (LJTabbarModel *tabBarItem in self.rawTabBarArray) {\n            LJTabbarModel *currentTabBarItem = [self.tabBarArray thsObjectAtIndex:tabIndex];\n            if (![currentTabBarItem.tabId isEqualToString:tabBarItem.tabId] && insertIndex == kNoIndex) {\n                insertIndex = tabIndex;\n            }\n            tabIndex += 1;\n            if (![tabBarItem.tabId isEqualToString:tabId] || insertIndex == kNoIndex) {\n                continue;\n            }\n            Class tab = NSClassFromString(tabBarItem.col);\n            UIViewController *tabCol = [[tab alloc] init];\n            [self initTabarItem:tabCol tag:tabIndex title:tabBarItem.title image:HXUIImage(tabBarItem.normalImage) selectImage:HXUIImage(tabBarItem.selectedImage)];\n            NavigationControllerEx *tabNav = [[NavigationControllerEx alloc] initWithRootViewController:tabCol];\n            [self.tabBarArray insertObject:tabBarItem atIndex:insertIndex];\n            [self.tabArray insertObject:tabNav atIndex:insertIndex];\n        }\n    } else {\n        return;\n    }\n    self.viewControllers = self.tabArray;\n}\n\n#pragma mark - private\n- (void)selectedTabWith:(NSString *)tabId {\n    NSInteger index = [self tabIndexWith:tabId];\n    if (index == kNoIndex) {\n        Log(kTabBar, @\"\", (@{@\"msg\" : @\"当前想要跳转的tab不存在\",\n                             @\"tab\" : tabId}));\n        return;\n    }\n    self.selectedIndex = index;\n    if ([tabId isEqualToString:kTrade]) {\n        [JumpTool iOS18TabShow:self selectedTabIndex:index];\n    }\n}\n\n- (NSInteger)tabIndexWith:(NSString *)tabId {\n    __block NSInteger index = kNoIndex;\n    [self.tabBarArray enumerateObjectsUsingBlock:^(LJTabbarModel * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        if ([obj.tabId isEqualToString:tabId]) {\n            index = idx;\n            *stop = YES;\n        }\n    }];\n    if (index == kNoIndex) {\n        Log(kTabBar, @\"\", (@{@\"msg\" : @\"目标tab不存在\",\n                             @\"tab\" : tabId}));\n    }\n    return index;\n}\n\n- (void)loadTabbarJson {\n    NSString *path = [[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@\"%@\", kMainTabbarJson] ofType:@\"json\"];\n    NSString *jsonString = [[NSString alloc] initWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil];\n    self.rawTabBarArray = [NSArray lj_modelArrayWithClass:[LJTabbarModel class] json:jsonString];\n}\n\n- (void)addTabBar {\n    if (IS_IPHONEX) {\n        YUBaseTabBar *baseTabBar = [[YUBaseTabBar alloc] init];\n        baseTabBar.delegate = self;\n        [self setValue:baseTabBar forKey:@\"tabBar\"];\n    }\n    [self.tabBar insertSubview:self.backView atIndex:0];\n    [UITabBar appearance].translucent = NO;\n    self.originalTag = 1;\n    [self.tabBar setShadowImage:[UIImage new]];\n    [self.tabBar setBackgroundImage:[UIImage new]];\n}\n\n- (void)showInformationTabBadge {\n    if (self.isInformationViewDidLoad) {\n        return;\n    }\n    if (![[LJPrivacyManage shared] userPrivacyState]) {\n        [[UserDefaultsPool sharedUserDefaultsPool] setBool:YES forKey:LJShowInformationTab];\n    }\n    BOOL isShowedInformationTab = [[UserDefaultsPool sharedUserDefaultsPool] boolForKey:LJShowInformationTab];\n    if (isShowedInformationTab) {\n        return;\n    }\n    NSInteger count = self.viewControllers.count;\n    CGFloat width = SCREEN_WIDTH / count;\n    self.tabBar.badgeString = kNewInformationTabBadge;\n    self.tabBar.badgeOffset = CGPointMake(2.5 - width * 0.5, 16.5);\n    self.tabBar.badgeFont = [UIFont fontWithPingFangRegular:9.0];\n    self.tabBar.badgeBackgroundColor = HXUIColor.QHTV2RedColor;\n    self.tabBar.badgeContentEdgeInsets = UIEdgeInsetsMake(0, 3, 0, 3);\n}\n\n- (void)clearBadge {\n    self.tabBar.badgeString = nil;\n}\n\n- (void)addNotifica {\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(reLoginTransactionFailed:)\n                                                 name:HXTradeAutoLoginCurrentAccountFailedNoti\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(thsLoginFail) name:LOGIN_FAIL_REVISE_PASSWORD\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(HXLNSLogMessage:) name:@\"HXLNSLogMessage\"\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(hidenTab) name:SwitchRequestAndResolveFinish\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(logoutAndExitTrade)\n                                                 name:HXTradeLogoutAllAccountNoti\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(informationViewDidLoadNotification)\n                                                 name:LJInformationViewDidLoadNotification\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(thsLoginSuccess) name:THS_LOGIN_SUCCESS object:nil];\n\n}\n\n- (void)addTabController {\n    int index = 0;\n    self.tabArray = [NSMutableArray array];\n    self.tabBarArray = [NSMutableArray array];\n    for (LJTabbarModel *tabBarItem in self.rawTabBarArray) {\n        index += 1;\n        Class tab = NSClassFromString(tabBarItem.col);\n        UIViewController *tabCol;\n        if ([tabBarItem.col isEqualToString:NSStringFromClass([Hom","relevantFile":"","relevantFileList":[],"filePath":"MainTabbarController.mm","template":"objective-cpp","multiRes":{"hipilot":"是否已登录本地。\n    if ([[HXTradeAccountManager shareInstance] isLogin]) {\n        [[HXTradeFunctionManager shareInstance] checkIsNeedToJumpToFunctionPage];\n    }\n    \n    [self showGrayView];\n}\n","deepseek-chat-lite":"添加灰度页面","CodeQwen2.5-7B":"处理资讯灰度","copilot":"开启纪念日灰化\n    if ([LJFunctionJudge isFunctionEnableForKey:LJAppGrayThemeSwitch]) {\n        [self showGrayView];\n    }\n    \n    UILabel\n}\n\n- (void)viewDidAppear:(BOOL"}},{"prefix":"\n#import \"MainTabbarController.h\"\n#import \"HXUIFrmPool.h\"\n#import \"UserDefaultsPoolKeys.h\"\n#import \"AM_UI_VarKeyString.h\"\n#import \"MePool.h\"\n#import \"EntreyJiaoYiTabViewController.h\"\n#import \"UIView+Toast.h\"\n#import \"BuryPointWindow.h\"\n#import \"SurveyModel.h\"\n#import \"LJHQDetailController.h\"\n#import \"SwitchAccountListView.h\"\n#import \"JiaoYiLoginPool.h\"\n#import \"EQCommunicationManager.h\"\n#import \"HomeViewController.h\"\n#import \"WKHorizontalScreenWebViewController.h\"\n#import \"HXTradeOrderMaroc.h\"\n#import \"HXTradeLoginManager.h\"\n#import \"HXTradeElkLog.h\"\n#import \"HXJumpModuleManager.h\"\n#import \"HXSwiftHeader.h\"\n#import \"HangQingTabViewController.h\"\n#import \"DynamicZiXunViewController.h\"\n#import \"HXPIPManager.h\"\n#import \"LJPrivacyManage.h\"\n#import \"AppDelegate.h\"\n#import \"LJLaunchGrayScaleManager.h\"\n\n#import \"LJInformationTotalViewController.h\"\n#import <HXBaseViewController/HXViewController.h>\n#import \"LJTabbarModel.h\"\n#import <HXBaseViewController/NavigationControllerEx.h>\n#import \"YUBaseTabBar.h\"\n#import <HXTradeDevelopTool/HXTradeDevelopTool.h>\n#import <LEEAlert/LEEAlert.h>\n#import <LJAlertView/LEEAlert+LJStyle.h>\n#import <LJCategoryKit/UIViewController+LJAdd.h>\n#import <LJCommunication/AMCommunicationManager.h>\n#import <LJDeviceHelper/LJDeviceHelper.h>\n#import <LJInformationViewController/LJInformationViewController.h>\n#import <LJPopUpManager/HXPopUpManager.h>\n#import <LJTradeFunctionManager/HXTradeFunctionManager.h>\n#import <LJUIKit/LJBadgeKit.h>\n#import <LogManager/LJLogManagerMacros.h>\n#import <HXLauncher/HXLAppLifeLauncher.h>\n#import <LJGrayView/LJGrayView.h>\n\n@import GrayScaleManager;\n@import LJTradeLog;\n@import LJTradeAccountManager;\n \nstatic const NSString *kMainTabbarJson = @\"mainTabbar\";\nstatic NSString *kEntreyJiaoYiTabViewController = @\"EntreyJiaoYiTabViewController\";\n\nstatic NSString * const kSystem = @\"14.2\";\nstatic NSString *kLJInformationTotalViewController = @\"LJInformationTotalViewController\";\nstatic NSString *kNewInformationTabBadge = @\"NEW\";\nstatic NSString *kTabBar = @\"TabBar\";\n\n/// tabId\nstatic NSString *kHome = @\"home\";\nstatic NSString *kQuotes = @\"quotes\";\nstatic NSString *kTrade = @\"trade\";\nstatic NSString *kAI = @\"ai\";\nstatic NSString *kInformation = @\"information\";\n\n/// 灰度开关\nstatic NSString *const kAITabGray = @\"aiTab\";\n\n@interface MainTabbarController () <UITabBarDelegate>\n\n@property (nonatomic, strong) UIView *backView; //自定义tabbar背景\n@property (nonatomic, strong) UIView *topLine;\n@property (nonatomic, assign) NSInteger originalTag;    //获取原来显示的tab编号\n@property (nonatomic, strong) NSMutableArray *tabArray; //tab栏数组\n/// 原始数据，即配置文件中配置的\n@property (nonatomic, strong) NSArray *rawTabBarArray;\n/// 实际使用的数据\n@property (nonatomic, strong) NSMutableArray *tabBarArray;\n@property (nonatomic, strong) NSArray *shouldAutorotateArray;\n/// 资讯页面是否已经加载过了\n@property (nonatomic, assign) BOOL isInformationViewDidLoad;\n/// 是否需要显示老版本资讯\n@property (nonatomic, assign) BOOL needShowNewInformation;\n/// 是否处理启动推送消息\n@property (nonatomic, assign) BOOL isHandledLauncherPushMsg;\n/// 灰化页面\n@property (nonatomic, strong) LJGrayView *grayView;\n\n/// 是否已经更新tab\n@property (nonatomic, assign) BOOL isAlreadyUpdateTab;\n@end\n\n@implementation MainTabbarController\n\n#pragma mark - life cycle\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    /// 加载tabbar配置文件\n    [self loadTabbarJson];\n    /// 处理Tabbar\n    [self addTabBar];\n    /// 添加通知\n    [self addNotifica];\n    /// 添加tab控制器\n    [self addTabController];\n    // 添加资讯灰度监听\n    [self addInformationGrayScaleObserver];\n    /// 初始化基础参数\n    [self addUserDefaut];\n    /// 添加调试相关设置\n    [self addDebugTool];\n    self.shouldAutorotateArray = @[@\"HomeViewController\", @\"HangQingTabViewController\", @\"LJHQDetailController\", @\"LJHQLandscapeDetailController\", @\"MoviePlayViewController\", @\"WKHorizontalScreenWebViewController\", @\"WKWebViewController\", @\"HXFutures.LJLiveRoomsViewController\", @\"HXFutures.LJShortVideoListController\"];\n    \n    // 开启纪念日灰化\n    if ([LJFunctionJudge isFunctionEnableForKey:LJAppGrayThemeSwitch]) {\n        [self showGrayView];\n    }\n    \n    // 创建一个红色背景的按钮","infill":"UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];\n   ","suffix":" button.frame = CGRectMake(0, 0, 100, 100);\n    button.backgroundColor = [UIColor redColor];\n    [self.view addSubview:button];\n    \n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    if (!self.isAlreadyUpdateTab && [LJLaunchGrayScaleManager isLaunchGrayEnable] && [HXLAppLifeLauncher checkLastLaunchValid]){\n        [self updateTabController];\n        [self handleNotificationInfoMsgPush];\n    }\n\n    [self addStarePip];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n}\n\n#pragma mark - 纪念日模式\n\n- (void)showGrayView {\n    self.grayView = [[LJGrayView alloc] initWithFrame:self.tabBar.bounds];\n    [self.tabBar addSubview:self.grayView];\n    [self.tabBar bringSubviewToFront:self.grayView];\n}\n\n#pragma mark - public\n- (void)selectTradeTab {\n    [self selectedTabWith:kTrade];\n}\n\n- (void)selectQuotesTab {\n    [self selectedTabWith:kQuotes];\n}\n\n- (void)selectInformationTab {\n    [self selectedTabWith:kInformation];\n}\n\n- (NSInteger)tradeTabIndex {\n    return [self tabIndexWith:kTrade];\n}\n\n- (NSInteger)quotesTabIndex {\n    return [self tabIndexWith:kQuotes];\n}\n\n- (NSInteger)informationTabIndex {\n    return [self tabIndexWith:kInformation];\n}\n\n- (BOOL)isSelectInformationTab {\n    NSInteger index = [self tabIndexWith:kInformation];\n    if (self.selectedIndex == index) {\n        return YES;\n    }\n    return NO;\n}\n\n- (NSInteger)aiTabIndex {\n    return [self tabIndexWith:kAI];\n}\n\n- (NSInteger)tabCount {\n    return self.viewControllers.count;\n}\n\n- (void)resetAITabBar {\n    BOOL isHideTab = ![LJFunctionJudge isFunctionEnableForKey:LJZongKaiGuanSwitch];\n    BOOL isHideAITab = ![[LJGrayScaleOCManager shared] isEnableForFeatureKey:kAITabGray isDefaultEnable:NO];\n    NSInteger aiIndex = [self aiTabIndex];\n    [self resetTabBarWith:kAI atIndex:aiIndex isHide:isHideTab || isHideAITab];\n}\n\n- (void)resetTabBarWith:(NSString *)tabId atIndex:(NSInteger)index isHide:(BOOL)isHide {\n    if (isHide && index > kNoIndex && index < self.tabBarArray.count) {\n        [self.tabBarArray removeObjectAtIndex:index];\n        [self.tabArray removeObjectAtIndex:index];\n    } else if (!isHide && index == kNoIndex) {\n        int tabIndex = 0;\n        NSInteger insertIndex = kNoIndex;\n        for (LJTabbarModel *tabBarItem in self.rawTabBarArray) {\n            LJTabbarModel *currentTabBarItem = [self.tabBarArray thsObjectAtIndex:tabIndex];\n            if (![currentTabBarItem.tabId isEqualToString:tabBarItem.tabId] && insertIndex == kNoIndex) {\n                insertIndex = tabIndex;\n            }\n            tabIndex += 1;\n            if (![tabBarItem.tabId isEqualToString:tabId] || insertIndex == kNoIndex) {\n                continue;\n            }\n            Class tab = NSClassFromString(tabBarItem.col);\n            UIViewController *tabCol = [[tab alloc] init];\n            [self initTabarItem:tabCol tag:tabIndex title:tabBarItem.title image:HXUIImage(tabBarItem.normalImage) selectImage:HXUIImage(tabBarItem.selectedImage)];\n            NavigationControllerEx *tabNav = [[NavigationControllerEx alloc] initWithRootViewController:tabCol];\n            [self.tabBarArray insertObject:tabBarItem atIndex:insertIndex];\n            [self.tabArray insertObject:tabNav atIndex:insertIndex];\n        }\n    } else {\n        return;\n    }\n    self.viewControllers = self.tabArray;\n}\n\n#pragma mark - private\n- (void)selectedTabWith:(NSString *)tabId {\n    NSInteger index = [self tabIndexWith:tabId];\n    if (index == kNoIndex) {\n        Log(kTabBar, @\"\", (@{@\"msg\" : @\"当前想要跳转的tab不存在\",\n                             @\"tab\" : tabId}));\n        return;\n    }\n    self.selectedIndex = index;\n    if ([tabId isEqualToString:kTrade]) {\n        [JumpTool iOS18TabShow:self selectedTabIndex:index];\n    }\n}\n\n- (NSInteger)tabIndexWith:(NSString *)tabId {\n    __block NSInteger index = kNoIndex;\n    [self.tabBarArray enumerateObjectsUsingBlock:^(LJTabbarModel * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        if ([obj.tabId isEqualToString:tabId]) {\n            index = idx;\n            *stop = YES;\n        }\n    }];\n    if (index == kNoIndex) {\n        Log(kTabBar, @\"\", (@{@\"msg\" : @\"目标tab不存在\",\n                             @\"tab\" : tabId}));\n    }\n    return index;\n}\n\n- (void)loadTabbarJson {\n    NSString *path = [[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@\"%@\", kMainTabbarJson] ofType:@\"json\"];\n    NSString *jsonString = [[NSString alloc] initWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil];\n    self.rawTabBarArray = [NSArray lj_modelArrayWithClass:[LJTabbarModel class] json:jsonString];\n}\n\n- (void)addTabBar {\n    if (IS_IPHONEX) {\n        YUBaseTabBar *baseTabBar = [[YUBaseTabBar alloc] init];\n        baseTabBar.delegate = self;\n        [self setValue:baseTabBar forKey:@\"tabBar\"];\n    }\n    [self.tabBar insertSubview:self.backView atIndex:0];\n    [UITabBar appearance].translucent = NO;\n    self.originalTag = 1;\n    [self.tabBar setShadowImage:[UIImage new]];\n    [self.tabBar setBackgroundImage:[UIImage new]];\n}\n\n- (void)showInformationTabBadge {\n    if (self.isInformationViewDidLoad) {\n        return;\n    }\n    if (![[LJPrivacyManage shared] userPrivacyState]) {\n        [[UserDefaultsPool sharedUserDefaultsPool] setBool:YES forKey:LJShowInformationTab];\n    }\n    BOOL isShowedInformationTab = [[UserDefaultsPool sharedUserDefaultsPool] boolForKey:LJShowInformationTab];\n    if (isShowedInformationTab) {\n        return;\n    }\n    NSInteger count = self.viewControllers.count;\n    CGFloat width = SCREEN_WIDTH / count;\n    self.tabBar.badgeString = kNewInformationTabBadge;\n    self.tabBar.badgeOffset = CGPointMake(2.5 - width * 0.5, 16.5);\n    self.tabBar.badgeFont = [UIFont fontWithPingFangRegular:9.0];\n    self.tabBar.badgeBackgroundColor = HXUIColor.QHTV2RedColor;\n    self.tabBar.badgeContentEdgeInsets = UIEdgeInsetsMake(0, 3, 0, 3);\n}\n\n- (void)clearBadge {\n    self.tabBar.badgeString = nil;\n}\n\n- (void)addNotifica {\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(reLoginTransactionFailed:)\n                                                 name:HXTradeAutoLoginCurrentAccountFailedNoti\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(thsLoginFail) name:LOGIN_FAIL_REVISE_PASSWORD\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(HXLNSLogMessage:) name:@\"HXLNSLogMessage\"\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(hidenTab) name:SwitchRequestAndResolveFinish\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(logoutAndExitTrade)\n                                                 name:HXTradeLogoutAllAccountNoti\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(informationViewDidLoadNotification)\n                                                 name:LJInformationViewDidLoadNotification\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(thsLoginSuccess) name:THS_LOGIN_SUCCESS object:nil];\n\n}\n\n- (void)addTabController {\n    int index = 0;\n    self.tabArray = [NSMutableArray array];\n    self.tabBarArray = [NSMutableArray array];\n    for (LJTabbarModel *tabBarItem in self.rawTabBarArray) {\n        i","relevantFile":"","relevantFileList":[],"filePath":"MainTabbarController.mm","template":"objective-cpp","multiRes":{"hipilot":"给view添加一个subview，用来测试内存是否管理正确\n    UIButton *button = [[UIButton alloc] init];","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];\n   "}},{"prefix":"\n#import \"MainTabbarController.h\"\n#import \"HXUIFrmPool.h\"\n#import \"UserDefaultsPoolKeys.h\"\n#import \"AM_UI_VarKeyString.h\"\n#import \"MePool.h\"\n#import \"EntreyJiaoYiTabViewController.h\"\n#import \"UIView+Toast.h\"\n#import \"BuryPointWindow.h\"\n#import \"SurveyModel.h\"\n#import \"LJHQDetailController.h\"\n#import \"SwitchAccountListView.h\"\n#import \"JiaoYiLoginPool.h\"\n#import \"EQCommunicationManager.h\"\n#import \"HomeViewController.h\"\n#import \"WKHorizontalScreenWebViewController.h\"\n#import \"HXTradeOrderMaroc.h\"\n#import \"HXTradeLoginManager.h\"\n#import \"HXTradeElkLog.h\"\n#import \"HXJumpModuleManager.h\"\n#import \"HXSwiftHeader.h\"\n#import \"HangQingTabViewController.h\"\n#import \"DynamicZiXunViewController.h\"\n#import \"HXPIPManager.h\"\n#import \"LJPrivacyManage.h\"\n#import \"AppDelegate.h\"\n#import \"LJLaunchGrayScaleManager.h\"\n\n#import \"LJInformationTotalViewController.h\"\n#import <HXBaseViewController/HXViewController.h>\n#import \"LJTabbarModel.h\"\n#import <HXBaseViewController/NavigationControllerEx.h>\n#import \"YUBaseTabBar.h\"\n#import <HXTradeDevelopTool/HXTradeDevelopTool.h>\n#import <LEEAlert/LEEAlert.h>\n#import <LJAlertView/LEEAlert+LJStyle.h>\n#import <LJCategoryKit/UIViewController+LJAdd.h>\n#import <LJCommunication/AMCommunicationManager.h>\n#import <LJDeviceHelper/LJDeviceHelper.h>\n#import <LJInformationViewController/LJInformationViewController.h>\n#import <LJPopUpManager/HXPopUpManager.h>\n#import <LJTradeFunctionManager/HXTradeFunctionManager.h>\n#import <LJUIKit/LJBadgeKit.h>\n#import <LogManager/LJLogManagerMacros.h>\n#import <HXLauncher/HXLAppLifeLauncher.h>\n#import <LJGrayView/LJGrayView.h>\n\n@import GrayScaleManager;\n@import LJTradeLog;\n@import LJTradeAccountManager;\n \nstatic const NSString *kMainTabbarJson = @\"mainTabbar\";\nstatic NSString *kEntreyJiaoYiTabViewController = @\"EntreyJiaoYiTabViewController\";\n\nstatic NSString * const kSystem = @\"14.2\";\nstatic NSString *kLJInformationTotalViewController = @\"LJInformationTotalViewController\";\nstatic NSString *kNewInformationTabBadge = @\"NEW\";\nstatic NSString *kTabBar = @\"TabBar\";\n\n/// tabId\nstatic NSString *kHome = @\"home\";\nstatic NSString *kQuotes = @\"quotes\";\nstatic NSString *kTrade = @\"trade\";\nstatic NSString *kAI = @\"ai\";\nstatic NSString *kInformation = @\"information\";\n\n/// 灰度开关\nstatic NSString *const kAITabGray = @\"aiTab\";\n\n@interface MainTabbarController () <UITabBarDelegate>\n\n@property (nonatomic, strong) UIView *backView; //自定义tabbar背景\n@property (nonatomic, strong) UIView *topLine;\n@property (nonatomic, assign) NSInteger originalTag;    //获取原来显示的tab编号\n@property (nonatomic, strong) NSMutableArray *tabArray; //tab栏数组\n/// 原始数据，即配置文件中配置的\n@property (nonatomic, strong) NSArray *rawTabBarArray;\n/// 实际使用的数据\n@property (nonatomic, strong) NSMutableArray *tabBarArray;\n@property (nonatomic, strong) NSArray *shouldAutorotateArray;\n/// 资讯页面是否已经加载过了\n@property (nonatomic, assign) BOOL isInformationViewDidLoad;\n/// 是否需要显示老版本资讯\n@property (nonatomic, assign) BOOL needShowNewInformation;\n/// 是否处理启动推送消息\n@property (nonatomic, assign) BOOL isHandledLauncherPushMsg;\n/// 灰化页面\n@property (nonatomic, strong) LJGrayView *grayView;\n\n/// 是否已经更新tab\n@property (nonatomic, assign) BOOL isAlreadyUpdateTab;\n@end\n\n@implementation MainTabbarController\n\n#pragma mark - life cycle\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    /// 加载tabbar配置文件\n    [self loadTabbarJson];\n    /// 处理Tabbar\n    [self addTabBar];\n    /// 添加通知\n    [self addNotifica];\n    /// 添加tab控制器\n    [self addTabController];\n    // 添加资讯灰度监听\n    [self addInformationGrayScaleObserver];\n    /// 初始化基础参数\n    [self addUserDefaut];\n    /// 添加调试相关设置\n    [self addDebugTool];\n    self.shouldAutorotateArray = @[@\"HomeViewController\", @\"HangQingTabViewController\", @\"LJHQDetailController\", @\"LJHQLandscapeDetailController\", @\"MoviePlayViewController\", @\"WKHorizontalScreenWebViewController\", @\"WKWebViewController\", @\"HXFutures.LJLiveRoomsViewController\", @\"HXFutures.LJShortVideoListController\"];\n    \n    // 开启纪念日灰化\n    if ([LJFunctionJudge isFunctionEnableForKey:LJAppGrayThemeSwitch]) {\n        [self showGrayView];\n    }\n    \n    // 创建一个红色背景的按钮\n    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];","infill":"button.frame = CGRectMake(0, 0, 100, 100);\n   ","suffix":" button.backgroundColor = [UIColor redColor];\n    [self.view addSubview:button];\n    [button addTarget:self action:@selector(buttonClick) forControlEvents:UIControlEventTouchUpInside];\n    \n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    if (!self.isAlreadyUpdateTab && [LJLaunchGrayScaleManager isLaunchGrayEnable] && [HXLAppLifeLauncher checkLastLaunchValid]){\n        [self updateTabController];\n        [self handleNotificationInfoMsgPush];\n    }\n\n    [self addStarePip];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n}\n\n#pragma mark - 纪念日模式\n\n- (void)showGrayView {\n    self.grayView = [[LJGrayView alloc] initWithFrame:self.tabBar.bounds];\n    [self.tabBar addSubview:self.grayView];\n    [self.tabBar bringSubviewToFront:self.grayView];\n}\n\n#pragma mark - public\n- (void)selectTradeTab {\n    [self selectedTabWith:kTrade];\n}\n\n- (void)selectQuotesTab {\n    [self selectedTabWith:kQuotes];\n}\n\n- (void)selectInformationTab {\n    [self selectedTabWith:kInformation];\n}\n\n- (NSInteger)tradeTabIndex {\n    return [self tabIndexWith:kTrade];\n}\n\n- (NSInteger)quotesTabIndex {\n    return [self tabIndexWith:kQuotes];\n}\n\n- (NSInteger)informationTabIndex {\n    return [self tabIndexWith:kInformation];\n}\n\n- (BOOL)isSelectInformationTab {\n    NSInteger index = [self tabIndexWith:kInformation];\n    if (self.selectedIndex == index) {\n        return YES;\n    }\n    return NO;\n}\n\n- (NSInteger)aiTabIndex {\n    return [self tabIndexWith:kAI];\n}\n\n- (NSInteger)tabCount {\n    return self.viewControllers.count;\n}\n\n- (void)resetAITabBar {\n    BOOL isHideTab = ![LJFunctionJudge isFunctionEnableForKey:LJZongKaiGuanSwitch];\n    BOOL isHideAITab = ![[LJGrayScaleOCManager shared] isEnableForFeatureKey:kAITabGray isDefaultEnable:NO];\n    NSInteger aiIndex = [self aiTabIndex];\n    [self resetTabBarWith:kAI atIndex:aiIndex isHide:isHideTab || isHideAITab];\n}\n\n- (void)resetTabBarWith:(NSString *)tabId atIndex:(NSInteger)index isHide:(BOOL)isHide {\n    if (isHide && index > kNoIndex && index < self.tabBarArray.count) {\n        [self.tabBarArray removeObjectAtIndex:index];\n        [self.tabArray removeObjectAtIndex:index];\n    } else if (!isHide && index == kNoIndex) {\n        int tabIndex = 0;\n        NSInteger insertIndex = kNoIndex;\n        for (LJTabbarModel *tabBarItem in self.rawTabBarArray) {\n            LJTabbarModel *currentTabBarItem = [self.tabBarArray thsObjectAtIndex:tabIndex];\n            if (![currentTabBarItem.tabId isEqualToString:tabBarItem.tabId] && insertIndex == kNoIndex) {\n                insertIndex = tabIndex;\n            }\n            tabIndex += 1;\n            if (![tabBarItem.tabId isEqualToString:tabId] || insertIndex == kNoIndex) {\n                continue;\n            }\n            Class tab = NSClassFromString(tabBarItem.col);\n            UIViewController *tabCol = [[tab alloc] init];\n            [self initTabarItem:tabCol tag:tabIndex title:tabBarItem.title image:HXUIImage(tabBarItem.normalImage) selectImage:HXUIImage(tabBarItem.selectedImage)];\n            NavigationControllerEx *tabNav = [[NavigationControllerEx alloc] initWithRootViewController:tabCol];\n            [self.tabBarArray insertObject:tabBarItem atIndex:insertIndex];\n            [self.tabArray insertObject:tabNav atIndex:insertIndex];\n        }\n    } else {\n        return;\n    }\n    self.viewControllers = self.tabArray;\n}\n\n#pragma mark - private\n- (void)selectedTabWith:(NSString *)tabId {\n    NSInteger index = [self tabIndexWith:tabId];\n    if (index == kNoIndex) {\n        Log(kTabBar, @\"\", (@{@\"msg\" : @\"当前想要跳转的tab不存在\",\n                             @\"tab\" : tabId}));\n        return;\n    }\n    self.selectedIndex = index;\n    if ([tabId isEqualToString:kTrade]) {\n        [JumpTool iOS18TabShow:self selectedTabIndex:index];\n    }\n}\n\n- (NSInteger)tabIndexWith:(NSString *)tabId {\n    __block NSInteger index = kNoIndex;\n    [self.tabBarArray enumerateObjectsUsingBlock:^(LJTabbarModel * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        if ([obj.tabId isEqualToString:tabId]) {\n            index = idx;\n            *stop = YES;\n        }\n    }];\n    if (index == kNoIndex) {\n        Log(kTabBar, @\"\", (@{@\"msg\" : @\"目标tab不存在\",\n                             @\"tab\" : tabId}));\n    }\n    return index;\n}\n\n- (void)loadTabbarJson {\n    NSString *path = [[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@\"%@\", kMainTabbarJson] ofType:@\"json\"];\n    NSString *jsonString = [[NSString alloc] initWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil];\n    self.rawTabBarArray = [NSArray lj_modelArrayWithClass:[LJTabbarModel class] json:jsonString];\n}\n\n- (void)addTabBar {\n    if (IS_IPHONEX) {\n        YUBaseTabBar *baseTabBar = [[YUBaseTabBar alloc] init];\n        baseTabBar.delegate = self;\n        [self setValue:baseTabBar forKey:@\"tabBar\"];\n    }\n    [self.tabBar insertSubview:self.backView atIndex:0];\n    [UITabBar appearance].translucent = NO;\n    self.originalTag = 1;\n    [self.tabBar setShadowImage:[UIImage new]];\n    [self.tabBar setBackgroundImage:[UIImage new]];\n}\n\n- (void)showInformationTabBadge {\n    if (self.isInformationViewDidLoad) {\n        return;\n    }\n    if (![[LJPrivacyManage shared] userPrivacyState]) {\n        [[UserDefaultsPool sharedUserDefaultsPool] setBool:YES forKey:LJShowInformationTab];\n    }\n    BOOL isShowedInformationTab = [[UserDefaultsPool sharedUserDefaultsPool] boolForKey:LJShowInformationTab];\n    if (isShowedInformationTab) {\n        return;\n    }\n    NSInteger count = self.viewControllers.count;\n    CGFloat width = SCREEN_WIDTH / count;\n    self.tabBar.badgeString = kNewInformationTabBadge;\n    self.tabBar.badgeOffset = CGPointMake(2.5 - width * 0.5, 16.5);\n    self.tabBar.badgeFont = [UIFont fontWithPingFangRegular:9.0];\n    self.tabBar.badgeBackgroundColor = HXUIColor.QHTV2RedColor;\n    self.tabBar.badgeContentEdgeInsets = UIEdgeInsetsMake(0, 3, 0, 3);\n}\n\n- (void)clearBadge {\n    self.tabBar.badgeString = nil;\n}\n\n- (void)addNotifica {\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(reLoginTransactionFailed:)\n                                                 name:HXTradeAutoLoginCurrentAccountFailedNoti\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(thsLoginFail) name:LOGIN_FAIL_REVISE_PASSWORD\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(HXLNSLogMessage:) name:@\"HXLNSLogMessage\"\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(hidenTab) name:SwitchRequestAndResolveFinish\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(logoutAndExitTrade)\n                                                 name:HXTradeLogoutAllAccountNoti\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(informationViewDidLoadNotification)\n                                                 name:LJInformationViewDidLoadNotification\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(thsLoginSuccess) name:THS_LOGIN_SUCCESS object:nil];\n\n}\n\n- (void)addTabController {\n    int index = 0;\n    self.tabArray = [NSMutableArray array];\n    self.tabBarArray = [NSMutableArray array];\n    for (LJTab","relevantFile":"","relevantFileList":[],"filePath":"MainTabbarController.mm","template":"objective-cpp","multiRes":{"hipilot":";\n    button.frame = CGRectMake(10, 10, 100, 100);\n   ","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"button.frame = CGRectMake(0, 0, 100, 100);\n   "}},{"prefix":"\n#import \"MainTabbarController.h\"\n#import \"HXUIFrmPool.h\"\n#import \"UserDefaultsPoolKeys.h\"\n#import \"AM_UI_VarKeyString.h\"\n#import \"MePool.h\"\n#import \"EntreyJiaoYiTabViewController.h\"\n#import \"UIView+Toast.h\"\n#import \"BuryPointWindow.h\"\n#import \"SurveyModel.h\"\n#import \"LJHQDetailController.h\"\n#import \"SwitchAccountListView.h\"\n#import \"JiaoYiLoginPool.h\"\n#import \"EQCommunicationManager.h\"\n#import \"HomeViewController.h\"\n#import \"WKHorizontalScreenWebViewController.h\"\n#import \"HXTradeOrderMaroc.h\"\n#import \"HXTradeLoginManager.h\"\n#import \"HXTradeElkLog.h\"\n#import \"HXJumpModuleManager.h\"\n#import \"HXSwiftHeader.h\"\n#import \"HangQingTabViewController.h\"\n#import \"DynamicZiXunViewController.h\"\n#import \"HXPIPManager.h\"\n#import \"LJPrivacyManage.h\"\n#import \"AppDelegate.h\"\n#import \"LJLaunchGrayScaleManager.h\"\n\n#import \"LJInformationTotalViewController.h\"\n#import <HXBaseViewController/HXViewController.h>\n#import \"LJTabbarModel.h\"\n#import <HXBaseViewController/NavigationControllerEx.h>\n#import \"YUBaseTabBar.h\"\n#import <HXTradeDevelopTool/HXTradeDevelopTool.h>\n#import <LEEAlert/LEEAlert.h>\n#import <LJAlertView/LEEAlert+LJStyle.h>\n#import <LJCategoryKit/UIViewController+LJAdd.h>\n#import <LJCommunication/AMCommunicationManager.h>\n#import <LJDeviceHelper/LJDeviceHelper.h>\n#import <LJInformationViewController/LJInformationViewController.h>\n#import <LJPopUpManager/HXPopUpManager.h>\n#import <LJTradeFunctionManager/HXTradeFunctionManager.h>\n#import <LJUIKit/LJBadgeKit.h>\n#import <LogManager/LJLogManagerMacros.h>\n#import <HXLauncher/HXLAppLifeLauncher.h>\n#import <LJGrayView/LJGrayView.h>\n\n@import GrayScaleManager;\n@import LJTradeLog;\n@import LJTradeAccountManager;\n \nstatic const NSString *kMainTabbarJson = @\"mainTabbar\";\nstatic NSString *kEntreyJiaoYiTabViewController = @\"EntreyJiaoYiTabViewController\";\n\nstatic NSString * const kSystem = @\"14.2\";\nstatic NSString *kLJInformationTotalViewController = @\"LJInformationTotalViewController\";\nstatic NSString *kNewInformationTabBadge = @\"NEW\";\nstatic NSString *kTabBar = @\"TabBar\";\n\n/// tabId\nstatic NSString *kHome = @\"home\";\nstatic NSString *kQuotes = @\"quotes\";\nstatic NSString *kTrade = @\"trade\";\nstatic NSString *kAI = @\"ai\";\nstatic NSString *kInformation = @\"information\";\n\n/// 灰度开关\nstatic NSString *const kAITabGray = @\"aiTab\";\n\n@interface MainTabbarController () <UITabBarDelegate>\n\n@property (nonatomic, strong) UIView *backView; //自定义tabbar背景\n@property (nonatomic, strong) UIView *topLine;\n@property (nonatomic, assign) NSInteger originalTag;    //获取原来显示的tab编号\n@property (nonatomic, strong) NSMutableArray *tabArray; //tab栏数组\n/// 原始数据，即配置文件中配置的\n@property (nonatomic, strong) NSArray *rawTabBarArray;\n/// 实际使用的数据\n@property (nonatomic, strong) NSMutableArray *tabBarArray;\n@property (nonatomic, strong) NSArray *shouldAutorotateArray;\n/// 资讯页面是否已经加载过了\n@property (nonatomic, assign) BOOL isInformationViewDidLoad;\n/// 是否需要显示老版本资讯\n@property (nonatomic, assign) BOOL needShowNewInformation;\n/// 是否处理启动推送消息\n@property (nonatomic, assign) BOOL isHandledLauncherPushMsg;\n/// 灰化页面\n@property (nonatomic, strong) LJGrayView *grayView;\n\n/// 是否已经更新tab\n@property (nonatomic, assign) BOOL isAlreadyUpdateTab;\n@end\n\n@implementation MainTabbarController\n\n#pragma mark - life cycle\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    /// 加载tabbar配置文件\n    [self loadTabbarJson];\n    /// 处理Tabbar\n    [self addTabBar];\n    /// 添加通知\n    [self addNotifica];\n    /// 添加tab控制器\n    [self addTabController];\n    // 添加资讯灰度监听\n    [self addInformationGrayScaleObserver];\n    /// 初始化基础参数\n    [self addUserDefaut];\n    /// 添加调试相关设置\n    [self addDebugTool];\n    self.shouldAutorotateArray = @[@\"HomeViewController\", @\"HangQingTabViewController\", @\"LJHQDetailController\", @\"LJHQLandscapeDetailController\", @\"MoviePlayViewController\", @\"WKHorizontalScreenWebViewController\", @\"WKWebViewController\", @\"HXFutures.LJLiveRoomsViewController\", @\"HXFutures.LJShortVideoListController\"];\n    \n    // 开启纪念日灰化\n    if ([LJFunctionJudge isFunctionEnableForKey:LJAppGrayThemeSwitch]) {\n        [self showGrayView];\n    }\n    \n    // 创建一个红色背景的按钮\n    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];\n    button.frame = CGRectMake(0, 0, 100, 100);","infill":"button.backgroundColor = [UIColor redColor];\n   ","suffix":" [self.view addSubview:button];\n    [button addTarget:self action:@selector(buttonClick) forControlEvents:UIControlEventTouchUpInside];\n    \n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    if (!self.isAlreadyUpdateTab && [LJLaunchGrayScaleManager isLaunchGrayEnable] && [HXLAppLifeLauncher checkLastLaunchValid]){\n        [self updateTabController];\n        [self handleNotificationInfoMsgPush];\n    }\n\n    [self addStarePip];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n}\n\n#pragma mark - 纪念日模式\n\n- (void)showGrayView {\n    self.grayView = [[LJGrayView alloc] initWithFrame:self.tabBar.bounds];\n    [self.tabBar addSubview:self.grayView];\n    [self.tabBar bringSubviewToFront:self.grayView];\n}\n\n#pragma mark - public\n- (void)selectTradeTab {\n    [self selectedTabWith:kTrade];\n}\n\n- (void)selectQuotesTab {\n    [self selectedTabWith:kQuotes];\n}\n\n- (void)selectInformationTab {\n    [self selectedTabWith:kInformation];\n}\n\n- (NSInteger)tradeTabIndex {\n    return [self tabIndexWith:kTrade];\n}\n\n- (NSInteger)quotesTabIndex {\n    return [self tabIndexWith:kQuotes];\n}\n\n- (NSInteger)informationTabIndex {\n    return [self tabIndexWith:kInformation];\n}\n\n- (BOOL)isSelectInformationTab {\n    NSInteger index = [self tabIndexWith:kInformation];\n    if (self.selectedIndex == index) {\n        return YES;\n    }\n    return NO;\n}\n\n- (NSInteger)aiTabIndex {\n    return [self tabIndexWith:kAI];\n}\n\n- (NSInteger)tabCount {\n    return self.viewControllers.count;\n}\n\n- (void)resetAITabBar {\n    BOOL isHideTab = ![LJFunctionJudge isFunctionEnableForKey:LJZongKaiGuanSwitch];\n    BOOL isHideAITab = ![[LJGrayScaleOCManager shared] isEnableForFeatureKey:kAITabGray isDefaultEnable:NO];\n    NSInteger aiIndex = [self aiTabIndex];\n    [self resetTabBarWith:kAI atIndex:aiIndex isHide:isHideTab || isHideAITab];\n}\n\n- (void)resetTabBarWith:(NSString *)tabId atIndex:(NSInteger)index isHide:(BOOL)isHide {\n    if (isHide && index > kNoIndex && index < self.tabBarArray.count) {\n        [self.tabBarArray removeObjectAtIndex:index];\n        [self.tabArray removeObjectAtIndex:index];\n    } else if (!isHide && index == kNoIndex) {\n        int tabIndex = 0;\n        NSInteger insertIndex = kNoIndex;\n        for (LJTabbarModel *tabBarItem in self.rawTabBarArray) {\n            LJTabbarModel *currentTabBarItem = [self.tabBarArray thsObjectAtIndex:tabIndex];\n            if (![currentTabBarItem.tabId isEqualToString:tabBarItem.tabId] && insertIndex == kNoIndex) {\n                insertIndex = tabIndex;\n            }\n            tabIndex += 1;\n            if (![tabBarItem.tabId isEqualToString:tabId] || insertIndex == kNoIndex) {\n                continue;\n            }\n            Class tab = NSClassFromString(tabBarItem.col);\n            UIViewController *tabCol = [[tab alloc] init];\n            [self initTabarItem:tabCol tag:tabIndex title:tabBarItem.title image:HXUIImage(tabBarItem.normalImage) selectImage:HXUIImage(tabBarItem.selectedImage)];\n            NavigationControllerEx *tabNav = [[NavigationControllerEx alloc] initWithRootViewController:tabCol];\n            [self.tabBarArray insertObject:tabBarItem atIndex:insertIndex];\n            [self.tabArray insertObject:tabNav atIndex:insertIndex];\n        }\n    } else {\n        return;\n    }\n    self.viewControllers = self.tabArray;\n}\n\n#pragma mark - private\n- (void)selectedTabWith:(NSString *)tabId {\n    NSInteger index = [self tabIndexWith:tabId];\n    if (index == kNoIndex) {\n        Log(kTabBar, @\"\", (@{@\"msg\" : @\"当前想要跳转的tab不存在\",\n                             @\"tab\" : tabId}));\n        return;\n    }\n    self.selectedIndex = index;\n    if ([tabId isEqualToString:kTrade]) {\n        [JumpTool iOS18TabShow:self selectedTabIndex:index];\n    }\n}\n\n- (NSInteger)tabIndexWith:(NSString *)tabId {\n    __block NSInteger index = kNoIndex;\n    [self.tabBarArray enumerateObjectsUsingBlock:^(LJTabbarModel * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        if ([obj.tabId isEqualToString:tabId]) {\n            index = idx;\n            *stop = YES;\n        }\n    }];\n    if (index == kNoIndex) {\n        Log(kTabBar, @\"\", (@{@\"msg\" : @\"目标tab不存在\",\n                             @\"tab\" : tabId}));\n    }\n    return index;\n}\n\n- (void)loadTabbarJson {\n    NSString *path = [[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@\"%@\", kMainTabbarJson] ofType:@\"json\"];\n    NSString *jsonString = [[NSString alloc] initWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil];\n    self.rawTabBarArray = [NSArray lj_modelArrayWithClass:[LJTabbarModel class] json:jsonString];\n}\n\n- (void)addTabBar {\n    if (IS_IPHONEX) {\n        YUBaseTabBar *baseTabBar = [[YUBaseTabBar alloc] init];\n        baseTabBar.delegate = self;\n        [self setValue:baseTabBar forKey:@\"tabBar\"];\n    }\n    [self.tabBar insertSubview:self.backView atIndex:0];\n    [UITabBar appearance].translucent = NO;\n    self.originalTag = 1;\n    [self.tabBar setShadowImage:[UIImage new]];\n    [self.tabBar setBackgroundImage:[UIImage new]];\n}\n\n- (void)showInformationTabBadge {\n    if (self.isInformationViewDidLoad) {\n        return;\n    }\n    if (![[LJPrivacyManage shared] userPrivacyState]) {\n        [[UserDefaultsPool sharedUserDefaultsPool] setBool:YES forKey:LJShowInformationTab];\n    }\n    BOOL isShowedInformationTab = [[UserDefaultsPool sharedUserDefaultsPool] boolForKey:LJShowInformationTab];\n    if (isShowedInformationTab) {\n        return;\n    }\n    NSInteger count = self.viewControllers.count;\n    CGFloat width = SCREEN_WIDTH / count;\n    self.tabBar.badgeString = kNewInformationTabBadge;\n    self.tabBar.badgeOffset = CGPointMake(2.5 - width * 0.5, 16.5);\n    self.tabBar.badgeFont = [UIFont fontWithPingFangRegular:9.0];\n    self.tabBar.badgeBackgroundColor = HXUIColor.QHTV2RedColor;\n    self.tabBar.badgeContentEdgeInsets = UIEdgeInsetsMake(0, 3, 0, 3);\n}\n\n- (void)clearBadge {\n    self.tabBar.badgeString = nil;\n}\n\n- (void)addNotifica {\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(reLoginTransactionFailed:)\n                                                 name:HXTradeAutoLoginCurrentAccountFailedNoti\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(thsLoginFail) name:LOGIN_FAIL_REVISE_PASSWORD\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(HXLNSLogMessage:) name:@\"HXLNSLogMessage\"\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(hidenTab) name:SwitchRequestAndResolveFinish\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(logoutAndExitTrade)\n                                                 name:HXTradeLogoutAllAccountNoti\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(informationViewDidLoadNotification)\n                                                 name:LJInformationViewDidLoadNotification\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(thsLoginSuccess) name:THS_LOGIN_SUCCESS object:nil];\n\n}\n\n- (void)addTabController {\n    int index = 0;\n    self.tabArray = [NSMutableArray array];\n    self.tabBarArray = [NSMutableArray array];\n    for (LJTabbarModel *tabBarItem in self.rawTabBarArray) {\n  ","relevantFile":"","relevantFileList":[],"filePath":"MainTabbarController.mm","template":"objective-cpp","multiRes":{"hipilot":"button.backgroundColor = [UIColor redColor];\n    button.tag = 10086;\n   ","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"button.backgroundColor = [UIColor redColor];\n   "}},{"prefix":"\n#import \"MainTabbarController.h\"\n#import \"HXUIFrmPool.h\"\n#import \"UserDefaultsPoolKeys.h\"\n#import \"AM_UI_VarKeyString.h\"\n#import \"MePool.h\"\n#import \"EntreyJiaoYiTabViewController.h\"\n#import \"UIView+Toast.h\"\n#import \"BuryPointWindow.h\"\n#import \"SurveyModel.h\"\n#import \"LJHQDetailController.h\"\n#import \"SwitchAccountListView.h\"\n#import \"JiaoYiLoginPool.h\"\n#import \"EQCommunicationManager.h\"\n#import \"HomeViewController.h\"\n#import \"WKHorizontalScreenWebViewController.h\"\n#import \"HXTradeOrderMaroc.h\"\n#import \"HXTradeLoginManager.h\"\n#import \"HXTradeElkLog.h\"\n#import \"HXJumpModuleManager.h\"\n#import \"HXSwiftHeader.h\"\n#import \"HangQingTabViewController.h\"\n#import \"DynamicZiXunViewController.h\"\n#import \"HXPIPManager.h\"\n#import \"LJPrivacyManage.h\"\n#import \"AppDelegate.h\"\n#import \"LJLaunchGrayScaleManager.h\"\n\n#import \"LJInformationTotalViewController.h\"\n#import <HXBaseViewController/HXViewController.h>\n#import \"LJTabbarModel.h\"\n#import <HXBaseViewController/NavigationControllerEx.h>\n#import \"YUBaseTabBar.h\"\n#import <HXTradeDevelopTool/HXTradeDevelopTool.h>\n#import <LEEAlert/LEEAlert.h>\n#import <LJAlertView/LEEAlert+LJStyle.h>\n#import <LJCategoryKit/UIViewController+LJAdd.h>\n#import <LJCommunication/AMCommunicationManager.h>\n#import <LJDeviceHelper/LJDeviceHelper.h>\n#import <LJInformationViewController/LJInformationViewController.h>\n#import <LJPopUpManager/HXPopUpManager.h>\n#import <LJTradeFunctionManager/HXTradeFunctionManager.h>\n#import <LJUIKit/LJBadgeKit.h>\n#import <LogManager/LJLogManagerMacros.h>\n#import <HXLauncher/HXLAppLifeLauncher.h>\n#import <LJGrayView/LJGrayView.h>\n\n@import GrayScaleManager;\n@import LJTradeLog;\n@import LJTradeAccountManager;\n \nstatic const NSString *kMainTabbarJson = @\"mainTabbar\";\nstatic NSString *kEntreyJiaoYiTabViewController = @\"EntreyJiaoYiTabViewController\";\n\nstatic NSString * const kSystem = @\"14.2\";\nstatic NSString *kLJInformationTotalViewController = @\"LJInformationTotalViewController\";\nstatic NSString *kNewInformationTabBadge = @\"NEW\";\nstatic NSString *kTabBar = @\"TabBar\";\n\n/// tabId\nstatic NSString *kHome = @\"home\";\nstatic NSString *kQuotes = @\"quotes\";\nstatic NSString *kTrade = @\"trade\";\nstatic NSString *kAI = @\"ai\";\nstatic NSString *kInformation = @\"information\";\n\n/// 灰度开关\nstatic NSString *const kAITabGray = @\"aiTab\";\n\n@interface MainTabbarController () <UITabBarDelegate>\n\n@property (nonatomic, strong) UIView *backView; //自定义tabbar背景\n@property (nonatomic, strong) UIView *topLine;\n@property (nonatomic, assign) NSInteger originalTag;    //获取原来显示的tab编号\n@property (nonatomic, strong) NSMutableArray *tabArray; //tab栏数组\n/// 原始数据，即配置文件中配置的\n@property (nonatomic, strong) NSArray *rawTabBarArray;\n/// 实际使用的数据\n@property (nonatomic, strong) NSMutableArray *tabBarArray;\n@property (nonatomic, strong) NSArray *shouldAutorotateArray;\n/// 资讯页面是否已经加载过了\n@property (nonatomic, assign) BOOL isInformationViewDidLoad;\n/// 是否需要显示老版本资讯\n@property (nonatomic, assign) BOOL needShowNewInformation;\n/// 是否处理启动推送消息\n@property (nonatomic, assign) BOOL isHandledLauncherPushMsg;\n/// 灰化页面\n@property (nonatomic, strong) LJGrayView *grayView;\n\n/// 是否已经更新tab\n@property (nonatomic, assign) BOOL isAlreadyUpdateTab;\n@end\n\n@implementation MainTabbarController\n\n#pragma mark - life cycle\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    /// 加载tabbar配置文件\n    [self loadTabbarJson];\n    /// 处理Tabbar\n    [self addTabBar];\n    /// 添加通知\n    [self addNotifica];\n    /// 添加tab控制器\n    [self addTabController];\n    // 添加资讯灰度监听\n    [self addInformationGrayScaleObserver];\n    /// 初始化基础参数\n    [self addUserDefaut];\n    /// 添加调试相关设置\n    [self addDebugTool];\n    self.shouldAutorotateArray = @[@\"HomeViewController\", @\"HangQingTabViewController\", @\"LJHQDetailController\", @\"LJHQLandscapeDetailController\", @\"MoviePlayViewController\", @\"WKHorizontalScreenWebViewController\", @\"WKWebViewController\", @\"HXFutures.LJLiveRoomsViewController\", @\"HXFutures.LJShortVideoListController\"];\n    \n    // 开启纪念日灰化\n    if ([LJFunctionJudge isFunctionEnableForKey:LJAppGrayThemeSwitch]) {\n        [self showGrayView];\n    }\n    \n    // 创建一个红色背景的按钮\n    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];\n    button.frame = CGRectMake(0, 0, 100, 100);\n    button.backgroundColor = [UIColor redColor];","infill":"[self.view addSubview:button];\n   ","suffix":" [button addTarget:self action:@selector(buttonClick) forControlEvents:UIControlEventTouchUpInside];\n    \n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    if (!self.isAlreadyUpdateTab && [LJLaunchGrayScaleManager isLaunchGrayEnable] && [HXLAppLifeLauncher checkLastLaunchValid]){\n        [self updateTabController];\n        [self handleNotificationInfoMsgPush];\n    }\n\n    [self addStarePip];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n}\n\n#pragma mark - 纪念日模式\n\n- (void)showGrayView {\n    self.grayView = [[LJGrayView alloc] initWithFrame:self.tabBar.bounds];\n    [self.tabBar addSubview:self.grayView];\n    [self.tabBar bringSubviewToFront:self.grayView];\n}\n\n#pragma mark - public\n- (void)selectTradeTab {\n    [self selectedTabWith:kTrade];\n}\n\n- (void)selectQuotesTab {\n    [self selectedTabWith:kQuotes];\n}\n\n- (void)selectInformationTab {\n    [self selectedTabWith:kInformation];\n}\n\n- (NSInteger)tradeTabIndex {\n    return [self tabIndexWith:kTrade];\n}\n\n- (NSInteger)quotesTabIndex {\n    return [self tabIndexWith:kQuotes];\n}\n\n- (NSInteger)informationTabIndex {\n    return [self tabIndexWith:kInformation];\n}\n\n- (BOOL)isSelectInformationTab {\n    NSInteger index = [self tabIndexWith:kInformation];\n    if (self.selectedIndex == index) {\n        return YES;\n    }\n    return NO;\n}\n\n- (NSInteger)aiTabIndex {\n    return [self tabIndexWith:kAI];\n}\n\n- (NSInteger)tabCount {\n    return self.viewControllers.count;\n}\n\n- (void)resetAITabBar {\n    BOOL isHideTab = ![LJFunctionJudge isFunctionEnableForKey:LJZongKaiGuanSwitch];\n    BOOL isHideAITab = ![[LJGrayScaleOCManager shared] isEnableForFeatureKey:kAITabGray isDefaultEnable:NO];\n    NSInteger aiIndex = [self aiTabIndex];\n    [self resetTabBarWith:kAI atIndex:aiIndex isHide:isHideTab || isHideAITab];\n}\n\n- (void)resetTabBarWith:(NSString *)tabId atIndex:(NSInteger)index isHide:(BOOL)isHide {\n    if (isHide && index > kNoIndex && index < self.tabBarArray.count) {\n        [self.tabBarArray removeObjectAtIndex:index];\n        [self.tabArray removeObjectAtIndex:index];\n    } else if (!isHide && index == kNoIndex) {\n        int tabIndex = 0;\n        NSInteger insertIndex = kNoIndex;\n        for (LJTabbarModel *tabBarItem in self.rawTabBarArray) {\n            LJTabbarModel *currentTabBarItem = [self.tabBarArray thsObjectAtIndex:tabIndex];\n            if (![currentTabBarItem.tabId isEqualToString:tabBarItem.tabId] && insertIndex == kNoIndex) {\n                insertIndex = tabIndex;\n            }\n            tabIndex += 1;\n            if (![tabBarItem.tabId isEqualToString:tabId] || insertIndex == kNoIndex) {\n                continue;\n            }\n            Class tab = NSClassFromString(tabBarItem.col);\n            UIViewController *tabCol = [[tab alloc] init];\n            [self initTabarItem:tabCol tag:tabIndex title:tabBarItem.title image:HXUIImage(tabBarItem.normalImage) selectImage:HXUIImage(tabBarItem.selectedImage)];\n            NavigationControllerEx *tabNav = [[NavigationControllerEx alloc] initWithRootViewController:tabCol];\n            [self.tabBarArray insertObject:tabBarItem atIndex:insertIndex];\n            [self.tabArray insertObject:tabNav atIndex:insertIndex];\n        }\n    } else {\n        return;\n    }\n    self.viewControllers = self.tabArray;\n}\n\n#pragma mark - private\n- (void)selectedTabWith:(NSString *)tabId {\n    NSInteger index = [self tabIndexWith:tabId];\n    if (index == kNoIndex) {\n        Log(kTabBar, @\"\", (@{@\"msg\" : @\"当前想要跳转的tab不存在\",\n                             @\"tab\" : tabId}));\n        return;\n    }\n    self.selectedIndex = index;\n    if ([tabId isEqualToString:kTrade]) {\n        [JumpTool iOS18TabShow:self selectedTabIndex:index];\n    }\n}\n\n- (NSInteger)tabIndexWith:(NSString *)tabId {\n    __block NSInteger index = kNoIndex;\n    [self.tabBarArray enumerateObjectsUsingBlock:^(LJTabbarModel * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        if ([obj.tabId isEqualToString:tabId]) {\n            index = idx;\n            *stop = YES;\n        }\n    }];\n    if (index == kNoIndex) {\n        Log(kTabBar, @\"\", (@{@\"msg\" : @\"目标tab不存在\",\n                             @\"tab\" : tabId}));\n    }\n    return index;\n}\n\n- (void)loadTabbarJson {\n    NSString *path = [[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@\"%@\", kMainTabbarJson] ofType:@\"json\"];\n    NSString *jsonString = [[NSString alloc] initWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil];\n    self.rawTabBarArray = [NSArray lj_modelArrayWithClass:[LJTabbarModel class] json:jsonString];\n}\n\n- (void)addTabBar {\n    if (IS_IPHONEX) {\n        YUBaseTabBar *baseTabBar = [[YUBaseTabBar alloc] init];\n        baseTabBar.delegate = self;\n        [self setValue:baseTabBar forKey:@\"tabBar\"];\n    }\n    [self.tabBar insertSubview:self.backView atIndex:0];\n    [UITabBar appearance].translucent = NO;\n    self.originalTag = 1;\n    [self.tabBar setShadowImage:[UIImage new]];\n    [self.tabBar setBackgroundImage:[UIImage new]];\n}\n\n- (void)showInformationTabBadge {\n    if (self.isInformationViewDidLoad) {\n        return;\n    }\n    if (![[LJPrivacyManage shared] userPrivacyState]) {\n        [[UserDefaultsPool sharedUserDefaultsPool] setBool:YES forKey:LJShowInformationTab];\n    }\n    BOOL isShowedInformationTab = [[UserDefaultsPool sharedUserDefaultsPool] boolForKey:LJShowInformationTab];\n    if (isShowedInformationTab) {\n        return;\n    }\n    NSInteger count = self.viewControllers.count;\n    CGFloat width = SCREEN_WIDTH / count;\n    self.tabBar.badgeString = kNewInformationTabBadge;\n    self.tabBar.badgeOffset = CGPointMake(2.5 - width * 0.5, 16.5);\n    self.tabBar.badgeFont = [UIFont fontWithPingFangRegular:9.0];\n    self.tabBar.badgeBackgroundColor = HXUIColor.QHTV2RedColor;\n    self.tabBar.badgeContentEdgeInsets = UIEdgeInsetsMake(0, 3, 0, 3);\n}\n\n- (void)clearBadge {\n    self.tabBar.badgeString = nil;\n}\n\n- (void)addNotifica {\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(reLoginTransactionFailed:)\n                                                 name:HXTradeAutoLoginCurrentAccountFailedNoti\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(thsLoginFail) name:LOGIN_FAIL_REVISE_PASSWORD\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(HXLNSLogMessage:) name:@\"HXLNSLogMessage\"\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(hidenTab) name:SwitchRequestAndResolveFinish\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(logoutAndExitTrade)\n                                                 name:HXTradeLogoutAllAccountNoti\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(informationViewDidLoadNotification)\n                                                 name:LJInformationViewDidLoadNotification\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(thsLoginSuccess) name:THS_LOGIN_SUCCESS object:nil];\n\n}\n\n- (void)addTabController {\n    int index = 0;\n    self.tabArray = [NSMutableArray array];\n    self.tabBarArray = [NSMutableArray array];\n    for (LJTabbarModel *tabBarItem in self.rawTabBarArray) {\n        index += 1;\n        Class tab","relevantFile":"","relevantFileList":[],"filePath":"MainTabbarController.mm","template":"objective-cpp","multiRes":{"hipilot":"button.tag = 10086;","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"[self.view addSubview:button];\n   "}},{"prefix":"\n#import \"MainTabbarController.h\"\n#import \"HXUIFrmPool.h\"\n#import \"UserDefaultsPoolKeys.h\"\n#import \"AM_UI_VarKeyString.h\"\n#import \"MePool.h\"\n#import \"EntreyJiaoYiTabViewController.h\"\n#import \"UIView+Toast.h\"\n#import \"BuryPointWindow.h\"\n#import \"SurveyModel.h\"\n#import \"LJHQDetailController.h\"\n#import \"SwitchAccountListView.h\"\n#import \"JiaoYiLoginPool.h\"\n#import \"EQCommunicationManager.h\"\n#import \"HomeViewController.h\"\n#import \"WKHorizontalScreenWebViewController.h\"\n#import \"HXTradeOrderMaroc.h\"\n#import \"HXTradeLoginManager.h\"\n#import \"HXTradeElkLog.h\"\n#import \"HXJumpModuleManager.h\"\n#import \"HXSwiftHeader.h\"\n#import \"HangQingTabViewController.h\"\n#import \"DynamicZiXunViewController.h\"\n#import \"HXPIPManager.h\"\n#import \"LJPrivacyManage.h\"\n#import \"AppDelegate.h\"\n#import \"LJLaunchGrayScaleManager.h\"\n\n#import \"LJInformationTotalViewController.h\"\n#import <HXBaseViewController/HXViewController.h>\n#import \"LJTabbarModel.h\"\n#import <HXBaseViewController/NavigationControllerEx.h>\n#import \"YUBaseTabBar.h\"\n#import <HXTradeDevelopTool/HXTradeDevelopTool.h>\n#import <LEEAlert/LEEAlert.h>\n#import <LJAlertView/LEEAlert+LJStyle.h>\n#import <LJCategoryKit/UIViewController+LJAdd.h>\n#import <LJCommunication/AMCommunicationManager.h>\n#import <LJDeviceHelper/LJDeviceHelper.h>\n#import <LJInformationViewController/LJInformationViewController.h>\n#import <LJPopUpManager/HXPopUpManager.h>\n#import <LJTradeFunctionManager/HXTradeFunctionManager.h>\n#import <LJUIKit/LJBadgeKit.h>\n#import <LogManager/LJLogManagerMacros.h>\n#import <HXLauncher/HXLAppLifeLauncher.h>\n#import <LJGrayView/LJGrayView.h>\n\n@import GrayScaleManager;\n@import LJTradeLog;\n@import LJTradeAccountManager;\n \nstatic const NSString *kMainTabbarJson = @\"mainTabbar\";\nstatic NSString *kEntreyJiaoYiTabViewController = @\"EntreyJiaoYiTabViewController\";\n\nstatic NSString * const kSystem = @\"14.2\";\nstatic NSString *kLJInformationTotalViewController = @\"LJInformationTotalViewController\";\nstatic NSString *kNewInformationTabBadge = @\"NEW\";\nstatic NSString *kTabBar = @\"TabBar\";\n\n/// tabId\nstatic NSString *kHome = @\"home\";\nstatic NSString *kQuotes = @\"quotes\";\nstatic NSString *kTrade = @\"trade\";\nstatic NSString *kAI = @\"ai\";\nstatic NSString *kInformation = @\"information\";\n\n/// 灰度开关\nstatic NSString *const kAITabGray = @\"aiTab\";\n\n@interface MainTabbarController () <UITabBarDelegate>\n\n@property (nonatomic, strong) UIView *backView; //自定义tabbar背景\n@property (nonatomic, strong) UIView *topLine;\n@property (nonatomic, assign) NSInteger originalTag;    //获取原来显示的tab编号\n@property (nonatomic, strong) NSMutableArray *tabArray; //tab栏数组\n/// 原始数据，即配置文件中配置的\n@property (nonatomic, strong) NSArray *rawTabBarArray;\n/// 实际使用的数据\n@property (nonatomic, strong) NSMutableArray *tabBarArray;\n@property (nonatomic, strong) NSArray *shouldAutorotateArray;\n/// 资讯页面是否已经加载过了\n@property (nonatomic, assign) BOOL isInformationViewDidLoad;\n/// 是否需要显示老版本资讯\n@property (nonatomic, assign) BOOL needShowNewInformation;\n/// 是否处理启动推送消息\n@property (nonatomic, assign) BOOL isHandledLauncherPushMsg;\n/// 灰化页面\n@property (nonatomic, strong) LJGrayView *grayView;\n\n/// 是否已经更新tab\n@property (nonatomic, assign) BOOL isAlreadyUpdateTab;\n@end\n\n@implementation MainTabbarController\n\n#pragma mark - life cycle\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    /// 加载tabbar配置文件\n    [self loadTabbarJson];\n    /// 处理Tabbar\n    [self addTabBar];\n    /// 添加通知\n    [self addNotifica];\n    /// 添加tab控制器\n    [self addTabController];\n    // 添加资讯灰度监听\n    [self addInformationGrayScaleObserver];\n    /// 初始化基础参数\n    [self addUserDefaut];\n    /// 添加调试相关设置\n    [self addDebugTool];\n    self.shouldAutorotateArray = @[@\"HomeViewController\", @\"HangQingTabViewController\", @\"LJHQDetailController\", @\"LJHQLandscapeDetailController\", @\"MoviePlayViewController\", @\"WKHorizontalScreenWebViewController\", @\"WKWebViewController\", @\"HXFutures.LJLiveRoomsViewController\", @\"HXFutures.LJShortVideoListController\"];\n    \n    // 开启纪念日灰化\n    if ([LJFunctionJudge isFunctionEnableForKey:LJAppGrayThemeSwitch]) {\n        [self showGrayView];\n    }\n    \n    // 创建一个红色背景的按钮\n    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];\n    button.frame = CGRectMake(0, 0, 100, 100);\n    button.backgroundColor = [UIColor redColor];\n    [self.view addSubview:button];","infill":"[button addTarget:self action:@selector(buttonClick) forControlEvents:UIControlEventTouchUpInside];\n   ","suffix":" \n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    if (!self.isAlreadyUpdateTab && [LJLaunchGrayScaleManager isLaunchGrayEnable] && [HXLAppLifeLauncher checkLastLaunchValid]){\n        [self updateTabController];\n        [self handleNotificationInfoMsgPush];\n    }\n\n    [self addStarePip];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n}\n\n#pragma mark - 纪念日模式\n\n- (void)showGrayView {\n    self.grayView = [[LJGrayView alloc] initWithFrame:self.tabBar.bounds];\n    [self.tabBar addSubview:self.grayView];\n    [self.tabBar bringSubviewToFront:self.grayView];\n}\n\n#pragma mark - public\n- (void)selectTradeTab {\n    [self selectedTabWith:kTrade];\n}\n\n- (void)selectQuotesTab {\n    [self selectedTabWith:kQuotes];\n}\n\n- (void)selectInformationTab {\n    [self selectedTabWith:kInformation];\n}\n\n- (NSInteger)tradeTabIndex {\n    return [self tabIndexWith:kTrade];\n}\n\n- (NSInteger)quotesTabIndex {\n    return [self tabIndexWith:kQuotes];\n}\n\n- (NSInteger)informationTabIndex {\n    return [self tabIndexWith:kInformation];\n}\n\n- (BOOL)isSelectInformationTab {\n    NSInteger index = [self tabIndexWith:kInformation];\n    if (self.selectedIndex == index) {\n        return YES;\n    }\n    return NO;\n}\n\n- (NSInteger)aiTabIndex {\n    return [self tabIndexWith:kAI];\n}\n\n- (NSInteger)tabCount {\n    return self.viewControllers.count;\n}\n\n- (void)resetAITabBar {\n    BOOL isHideTab = ![LJFunctionJudge isFunctionEnableForKey:LJZongKaiGuanSwitch];\n    BOOL isHideAITab = ![[LJGrayScaleOCManager shared] isEnableForFeatureKey:kAITabGray isDefaultEnable:NO];\n    NSInteger aiIndex = [self aiTabIndex];\n    [self resetTabBarWith:kAI atIndex:aiIndex isHide:isHideTab || isHideAITab];\n}\n\n- (void)resetTabBarWith:(NSString *)tabId atIndex:(NSInteger)index isHide:(BOOL)isHide {\n    if (isHide && index > kNoIndex && index < self.tabBarArray.count) {\n        [self.tabBarArray removeObjectAtIndex:index];\n        [self.tabArray removeObjectAtIndex:index];\n    } else if (!isHide && index == kNoIndex) {\n        int tabIndex = 0;\n        NSInteger insertIndex = kNoIndex;\n        for (LJTabbarModel *tabBarItem in self.rawTabBarArray) {\n            LJTabbarModel *currentTabBarItem = [self.tabBarArray thsObjectAtIndex:tabIndex];\n            if (![currentTabBarItem.tabId isEqualToString:tabBarItem.tabId] && insertIndex == kNoIndex) {\n                insertIndex = tabIndex;\n            }\n            tabIndex += 1;\n            if (![tabBarItem.tabId isEqualToString:tabId] || insertIndex == kNoIndex) {\n                continue;\n            }\n            Class tab = NSClassFromString(tabBarItem.col);\n            UIViewController *tabCol = [[tab alloc] init];\n            [self initTabarItem:tabCol tag:tabIndex title:tabBarItem.title image:HXUIImage(tabBarItem.normalImage) selectImage:HXUIImage(tabBarItem.selectedImage)];\n            NavigationControllerEx *tabNav = [[NavigationControllerEx alloc] initWithRootViewController:tabCol];\n            [self.tabBarArray insertObject:tabBarItem atIndex:insertIndex];\n            [self.tabArray insertObject:tabNav atIndex:insertIndex];\n        }\n    } else {\n        return;\n    }\n    self.viewControllers = self.tabArray;\n}\n\n#pragma mark - private\n- (void)selectedTabWith:(NSString *)tabId {\n    NSInteger index = [self tabIndexWith:tabId];\n    if (index == kNoIndex) {\n        Log(kTabBar, @\"\", (@{@\"msg\" : @\"当前想要跳转的tab不存在\",\n                             @\"tab\" : tabId}));\n        return;\n    }\n    self.selectedIndex = index;\n    if ([tabId isEqualToString:kTrade]) {\n        [JumpTool iOS18TabShow:self selectedTabIndex:index];\n    }\n}\n\n- (NSInteger)tabIndexWith:(NSString *)tabId {\n    __block NSInteger index = kNoIndex;\n    [self.tabBarArray enumerateObjectsUsingBlock:^(LJTabbarModel * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        if ([obj.tabId isEqualToString:tabId]) {\n            index = idx;\n            *stop = YES;\n        }\n    }];\n    if (index == kNoIndex) {\n        Log(kTabBar, @\"\", (@{@\"msg\" : @\"目标tab不存在\",\n                             @\"tab\" : tabId}));\n    }\n    return index;\n}\n\n- (void)loadTabbarJson {\n    NSString *path = [[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@\"%@\", kMainTabbarJson] ofType:@\"json\"];\n    NSString *jsonString = [[NSString alloc] initWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil];\n    self.rawTabBarArray = [NSArray lj_modelArrayWithClass:[LJTabbarModel class] json:jsonString];\n}\n\n- (void)addTabBar {\n    if (IS_IPHONEX) {\n        YUBaseTabBar *baseTabBar = [[YUBaseTabBar alloc] init];\n        baseTabBar.delegate = self;\n        [self setValue:baseTabBar forKey:@\"tabBar\"];\n    }\n    [self.tabBar insertSubview:self.backView atIndex:0];\n    [UITabBar appearance].translucent = NO;\n    self.originalTag = 1;\n    [self.tabBar setShadowImage:[UIImage new]];\n    [self.tabBar setBackgroundImage:[UIImage new]];\n}\n\n- (void)showInformationTabBadge {\n    if (self.isInformationViewDidLoad) {\n        return;\n    }\n    if (![[LJPrivacyManage shared] userPrivacyState]) {\n        [[UserDefaultsPool sharedUserDefaultsPool] setBool:YES forKey:LJShowInformationTab];\n    }\n    BOOL isShowedInformationTab = [[UserDefaultsPool sharedUserDefaultsPool] boolForKey:LJShowInformationTab];\n    if (isShowedInformationTab) {\n        return;\n    }\n    NSInteger count = self.viewControllers.count;\n    CGFloat width = SCREEN_WIDTH / count;\n    self.tabBar.badgeString = kNewInformationTabBadge;\n    self.tabBar.badgeOffset = CGPointMake(2.5 - width * 0.5, 16.5);\n    self.tabBar.badgeFont = [UIFont fontWithPingFangRegular:9.0];\n    self.tabBar.badgeBackgroundColor = HXUIColor.QHTV2RedColor;\n    self.tabBar.badgeContentEdgeInsets = UIEdgeInsetsMake(0, 3, 0, 3);\n}\n\n- (void)clearBadge {\n    self.tabBar.badgeString = nil;\n}\n\n- (void)addNotifica {\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(reLoginTransactionFailed:)\n                                                 name:HXTradeAutoLoginCurrentAccountFailedNoti\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(thsLoginFail) name:LOGIN_FAIL_REVISE_PASSWORD\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(HXLNSLogMessage:) name:@\"HXLNSLogMessage\"\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(hidenTab) name:SwitchRequestAndResolveFinish\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(logoutAndExitTrade)\n                                                 name:HXTradeLogoutAllAccountNoti\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(informationViewDidLoadNotification)\n                                                 name:LJInformationViewDidLoadNotification\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(thsLoginSuccess) name:THS_LOGIN_SUCCESS object:nil];\n\n}\n\n- (void)addTabController {\n    int index = 0;\n    self.tabArray = [NSMutableArray array];\n    self.tabBarArray = [NSMutableArray array];\n    for (LJTabbarModel *tabBarItem in self.rawTabBarArray) {\n        index += 1;\n        Class tab = NSClassFromString(tabBarItem.col);\n        UIViewController *tabCol;\n        if ([tabBarItem.col isE","relevantFile":"","relevantFileList":[],"filePath":"MainTabbarController.mm","template":"objective-cpp","multiRes":{"hipilot":"button.tag = 1001;","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"[button addTarget:self action:@selector(buttonClick) forControlEvents:UIControlEventTouchUpInside];\n   "}},{"prefix":"                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)([QHTDisplayLink shareInstance].onceTime / 1000.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    typeof(weakSelf2) __strong strongSelf2 = weakSelf2;\n                    strongSelf2.isComplete = NO;\n                    [strongSelf2 setData:strongSelf2.tempWuDangData];\n                });\n            }];\n        } else {\n            [self.fenShiFetcher pause];\n            self.fenShiFetcher.request = request;\n        }\n        [self.fenShiFetcher start];\n    }\n}\n\n- (void)requestWithStockCode:(NSString *)stockCode\n                    marketId:(NSString *)marketId\n                successBlock:(void (^)(void))successBlock\n                 failedBlock:(void (^)(void))failedBlock {\n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    [self getWuDangDataWithStockCode:stockCode marketCode:marketId];\n}\n\n- (void)getAllBuySellDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VERTICAL_DETAIL_FRAMEID;\n        }\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n                               stockcode,\n                               marketCode];\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID paramsDict:requestDic pageId:(int)self.nPageID];\n        if (!_allBuySellFetcher) {\n            WEAKSELF;\n            self.allBuySellFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                weakSelf.allBuySellData = data;\n                weakSelf.isRealData = data.isRealData;\n                [weakSelf setAllBuySellData:data];\n                \n            }];\n        } else {\n            [self.allBuySellFetcher pause];\n            self.allBuySellFetcher.request = request;\n        }\n        [self.allBuySellFetcher start];\n    }\n}\n\n- (NSMutableDictionary *)refrishTextColor:(StuffBaseModel *)model {\n    if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        [_sellAry removeAllObjects];   //卖出价格数组\n        [_sellNumberAry removeAllObjects]; //卖出数量数组\n        [_buyAry removeAllObjects];    //买入价格数组\n        [_buyNumberAry removeAllObjects];  //买入数量数组\n        [_sellColorAry removeAllObjects];  //卖出价格颜色数组\n        [_sellNumberColorAry removeAllObjects];    //卖出数量颜色数组\n        [_buyColorAry removeAllObjects];   //买入价格颜色数组\n        [_buyNumberColorAry removeAllObjects]; //买入数量颜色数组\n        [_nowPriceColorArray removeAllObjects];\n        \n        // 是否需要基准价\n        BOOL isNeedStandard = ([[LJHQStandardPriceSetManager shareInstance] isSupportStandardPriceWithMarket:[NSString stringWithFormat:@\"%@\", self.lastMarketId]] && [[LJHQStandardPriceSetManager shareInstance] currentStandardPriceTypeIsCustom]);\n        NSString *standardPrice = [[LJHQStandardPriceSetManager shareInstance] getStandardPriceWithStockCode:self.lastStockCode];\n        NSMutableArray *buyTmpArr = [NSMutableArray array];\n        NSMutableArray *sellTmpArr = [NSMutableArray array];\n        \n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStrsell1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE1]];\n            NSArray *pStrsellNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT1]];\n            NSArray *pStrsell2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE2]];\n            NSArray *pStrsellNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT2]];\n            NSArray *pStrsell3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE3]];\n            NSArray *pStrsellNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT3]];\n            NSArray *pStrsell4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE4]];\n            NSArray *pStrsellNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT4]];\n            NSArray *pStrsell5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE5]];\n            NSArray *pStrsellNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT5]];\n            NSArray *pStrbuy1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE1]];\n            NSArray *pStrbuyNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT1]];\n            NSArray *pStrbuy2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE2]];\n            NSArray *pStrbuyNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT2]];\n            NSArray *pStrbuy3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE3]];\n            NSArray *pStrbuyNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT3]];\n            NSArray *pStrbuy4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE4]];\n            NSArray *pStrbuyNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT4]];\n            NSArray *pStrbuy5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE5]];\n            NSArray *pStrbuyNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT5]];\n            \n            NSArray *pStrsellNum6 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_NEWPRICE]];\n            if (pStrsellNum6) {\n                self.lastPrice = pStrsellNum6[0];\n            }else {\n                self.lastPrice = kSpaceStr;\n            }\n            \n            if (pStrbuy1) {\n                self.buyPrice =pStrbuy1[0];\n            }else {\n                self.buyPrice = kSpaceStr;\n            }\n            \n            if (pStrsell1) {\n                self.sellPrice = pStrsell1[0];\n            }else {\n                self.sellPrice = kSpaceStr;\n            }\n            \n            [self setTextData:pStrsell1 addToArray:_sellAry];\n            [self setTextData:pStrsell2 addToArray:_sellAry];\n            [self setTextData:pStrsell3 addToArray:_sellAry];\n            [self setTextData:pStrsell4 addToArray:_sellAry];\n            [self setTextData:pStrsell5 addToArray:_sellAry];\n            [self setTextData:pStrsellNum1 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum2 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum3 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum4 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum5 addToArray:_sellNumberAry];\n            [self setTextData:pStrbuy1 addToArray:_buyAry];\n            [self setTextData:pStrbuy2 addToArray:_buyAry];\n            [self setTextData:pStrbuy3 addToArray:_buyAry];\n            [self setTextData:pStrbuy4 addToArray:_buyAry];\n            [self setTextData:pStrbuy5 addToArray:_buyAry];\n            [self setTextData:pStrbuyNum1 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum2 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum3 addToArray:_buyNumberAry];\n ","infill":"清空数据\n    se","suffix":"lf.allBuyHands = kSpaceStr;\n    self.allSellHands = kSpaceStr;\n    self.avgBuyPrice = kSpaceStr;\n    self.avgSellPrice = kSpaceStr;\n    \n    if (model && ([model modelType] == StuffModelTypeText)) {\n        StuffTextModel *textModel = (StuffTextModel *)model;\n        self.contentString = textModel.text;\n        [self doneBusiness:DOBUSINESS_FAILED];\n    } else if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        \n        if (tableModel.extStringDict != nil) {\n            NSString *str = [tableModel.extStringDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_CODECODE]];\n            if(str) {\n                self.contentString = str;\n                self.stockCode = str;\n            }\n        }\n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStravgBuyPrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_AVGBUYPRICE]];\n            NSArray *pStravgSellPrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_AVGSELLPRICE]];\n            NSArray *pStrAllBuyCount = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ALLBUYCOUNT]];\n            NSArray *pStrAllSellCount = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ALLSELLCOUNT]];\n            self.allBuyHands = [pStrAllBuyCount thsStringAtIndex:0] ? : kSpaceStr;\n            self.allSellHands = [pStrAllSellCount thsStringAtIndex:0] ? : kSpaceStr;\n            self.avgBuyPrice = [pStravgBuyPrice thsStringAtIndex:0] ? : kSpaceStr;\n            self.avgSellPrice = [pStravgSellPrice thsStringAtIndex:0] ? : kSpaceStr;\n        }\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    }\n}\n\n// 设置数组数据\n- (void)setTextData:(NSArray *)pStrStockArray addToArray:(NSMutableArray *)array\n{\n    if (pStrStockArray && pStrStockArray.count >= 1)\n    {\n        NSString *sstr = [pStrStockArray firstObject];\n        if (!sstr) {\n            sstr = [NSString stringWithFormat:kSpaceStr];\n        }\n        [array addObject:sstr];\n    }\n}\n\n// 设置颜色数据\n- (void)setColorData:(NSArray *)pStockColor addToColorArray:(NSMutableArray *)colorArray\n{\n    if (pStockColor && pStockColor.count >= 1)\n    {\n        int colorValue = [[pStockColor firstObject] intValue];\n        [colorArray addObject:[Tools getLocalCorrespondColorWithServerStuffModelIntColor:colorValue]];\n    }\n}\n\n#pragma mark - 将服务端返回的数据转换成Objective_C数组\n//注销接口，不再接收数据返回\n- (void)unRegisterObjectKey {\n    self.successBlock = nil;\n    self.failedBlock = nil;\n    if (_fenShiFetcher) {\n        [self.fenShiFetcher pause];\n    }\n    \n    if (_xiaDanFetcher) {\n        [self.xiaDanFetcher pause];\n    }\n    \n    if (_allBuySellFetcher) {\n        [self.allBuySellFetcher pause];\n    }\n}\n\n- (NSMutableDictionary *)getWuDangDataToView {\n    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n    [dic thsSetObject:_sellAry forKey:@\"SellKey\"];\n    [dic thsSetObject:_sellNumberAry forKey:@\"SellNumberKey\"];\n    [dic thsSetObject:_buyAry forKey:@\"BuyKey\"];\n    [dic thsSetObject:_buyNumberAry forKey:@\"BuyNumberKey\"];\n    [dic thsSetObject:_sellColorAry forKey:@\"SellColorKey\"];\n    [dic thsSetObject:_sellNumberColorAry forKey:@\"SellNumberColorKey\"];\n    [dic thsSetObject:_buyColorAry forKey:@\"BuyColorKey\"];\n    [dic thsSetObject:_buyNumberColorAry forKey:@\"BuyNumberColorKey\"];\n    \n    return dic;\n}\n\n- (NSMutableDictionary *)getAllBuySellDataToView {\n    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n    [dic thsSetObject:_allBuyHands forKey:@\"allBuyHands\"];\n    [dic thsSetObject:_allSellHands forKey:@\"allSellHands\"];\n    [dic thsSetObject:_avgBuyPrice forKey:@\"avgBuyPrice\"];\n    [dic thsSetObject:_avgSellPrice forKey:@\"avgSellPrice\"];\n    return dic;\n}\n\n- (HXFiveRangeMarket *)convertTofiveRangeMarket {\n    UIColor *nowPriceColor = self.nowPriceColorArray.firstObject ?: HXUIColor.CharacterTwoAppColor;\n    return [[HXFiveRangeMarket alloc] initWithIsPushData:self.isRealData\n                                               stockCode:self.lastStockCode\n                                                buyPrice:self.buyPrice\n                                               sellPrice:self.sellPrice\n                                               lastPrice:self.lastPrice\n                                           nowPriceColor:nowPriceColor\n                                            limitUpPrice:self.limitUpPrice\n                                          limitDownPrice:self.limitDownPrice\n                                     yesterdayClosePrice:self.yesterdayClosePrice\n                                           fiveRangeDict:self.getWuDangDataToView];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"XiaDanWuDangData.mm","template":"objective-cpp","multiRes":{"hipilot":"[self setTextData:pStrbuyNum4 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum5 addToArray:_buyNumberAry];\n            \n            [self setColorData:pStrsell1 add","deepseek-chat-lite":"           [self setTextData:pStrbuyNum4 addToArray:_buyNumberAry];","CodeQwen2.5-7B":"           [self setTextData:pStrbuyNum4 addToArray:_buyNumberAry];","copilot":"清空数据\n    se"}},{"prefix":"                    return;\n                }\n                \n                if (strongSelf.isComplete) {\n                    return ;\n                }\n                \n                //防止过快刷新请求\n                strongSelf.isComplete = YES;\n                typeof(self) __weak weakSelf2 = strongSelf;\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)([QHTDisplayLink shareInstance].onceTime / 1000.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    typeof(weakSelf2) __strong strongSelf2 = weakSelf2;\n                    strongSelf2.isComplete = NO;\n                    [strongSelf2 setData:strongSelf2.tempWuDangData];\n                });\n            }];\n        } else {\n            [self.fenShiFetcher pause];\n            self.fenShiFetcher.request = request;\n        }\n        [self.fenShiFetcher start];\n    }\n}\n\n- (void)requestWithStockCode:(NSString *)stockCode\n                    marketId:(NSString *)marketId\n                successBlock:(void (^)(void))successBlock\n                 failedBlock:(void (^)(void))failedBlock {\n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    [self getWuDangDataWithStockCode:stockCode marketCode:marketId];\n}\n\n- (void)getAllBuySellDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VERTICAL_DETAIL_FRAMEID;\n        }\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n                               stockcode,\n                               marketCode];\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID paramsDict:requestDic pageId:(int)self.nPageID];\n        if (!_allBuySellFetcher) {\n            WEAKSELF;\n            self.allBuySellFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                weakSelf.allBuySellData = data;\n                weakSelf.isRealData = data.isRealData;\n                [weakSelf setAllBuySellData:data];\n                \n            }];\n        } else {\n            [self.allBuySellFetcher pause];\n            self.allBuySellFetcher.request = request;\n        }\n        [self.allBuySellFetcher start];\n    }\n}\n\n- (NSMutableDictionary *)refrishTextColor:(StuffBaseModel *)model {\n    if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        [_sellAry removeAllObjects];   //卖出价格数组\n        [_sellNumberAry removeAllObjects]; //卖出数量数组\n        [_buyAry removeAllObjects];    //买入价格数组\n        [_buyNumberAry removeAllObjects];  //买入数量数组\n        [_sellColorAry removeAllObjects];  //卖出价格颜色数组\n        [_sellNumberColorAry removeAllObjects];    //卖出数量颜色数组\n        [_buyColorAry removeAllObjects];   //买入价格颜色数组\n        [_buyNumberColorAry removeAllObjects]; //买入数量颜色数组\n        [_nowPriceColorArray removeAllObjects];\n        \n        // 是否需要基准价\n        BOOL isNeedStandard = ([[LJHQStandardPriceSetManager shareInstance] isSupportStandardPriceWithMarket:[NSString stringWithFormat:@\"%@\", self.lastMarketId]] && [[LJHQStandardPriceSetManager shareInstance] currentStandardPriceTypeIsCustom]);\n        NSString *standardPrice = [[LJHQStandardPriceSetManager shareInstance] getStandardPriceWithStockCode:self.lastStockCode];\n        NSMutableArray *buyTmpArr = [NSMutableArray array];\n        NSMutableArray *sellTmpArr = [NSMutableArray array];\n        \n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStrsell1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE1]];\n            NSArray *pStrsellNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT1]];\n            NSArray *pStrsell2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE2]];\n            NSArray *pStrsellNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT2]];\n            NSArray *pStrsell3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE3]];\n            NSArray *pStrsellNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT3]];\n            NSArray *pStrsell4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE4]];\n            NSArray *pStrsellNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT4]];\n            NSArray *pStrsell5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE5]];\n            NSArray *pStrsellNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT5]];\n            NSArray *pStrbuy1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE1]];\n            NSArray *pStrbuyNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT1]];\n            NSArray *pStrbuy2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE2]];\n            NSArray *pStrbuyNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT2]];\n            NSArray *pStrbuy3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE3]];\n            NSArray *pStrbuyNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT3]];\n            NSArray *pStrbuy4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE4]];\n            NSArray *pStrbuyNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT4]];\n            NSArray *pStrbuy5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE5]];\n            NSArray *pStrbuyNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT5]];\n            \n            NSArray *pStrsellNum6 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_NEWPRICE]];\n            if (pStrsellNum6) {\n                self.lastPrice = pStrsellNum6[0];\n            }else {\n                self.lastPrice = kSpaceStr;\n            }\n            \n            if (pStrbuy1) {\n                self.buyPrice =pStrbuy1[0];\n            }else {\n                self.buyPrice = kSpaceStr;\n            }\n            \n            if (pStrsell1) {\n                self.sellPrice = pStrsell1[0];\n            }else {\n                self.sellPrice = kSpaceStr;\n            }\n            \n            [self setTextData:pStrsell1 addToArray:_sellAry];\n            [self setTextData:pStrsell2 addToArray:_sellAry];\n            [self setTextData:pStrsell3 addToArray:_sellAry];\n            [self setTextData:pStrsell4 addToArray:_sellAry];\n            [self setTextData:pStrsell5 addToArray:_sellAry];\n            [self setTextData:pStrsellNum1 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum2 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum3 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum4 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum5 addToArray:_sellNumberAry];\n            [self setTextData:pStrbuy1 addToArray:_buyAry];\n            [self setTextData:pStrbuy2 addToArray:_buyAry];\n            [self setTextData:pStrbuy3 addToArray:_buyAry];\n            [self setTextData:pStrbuy4 addToArray","infill":"    StuffTextModel *textModel = (","suffix":"StuffTextModel *)model;\n        self.contentString = textModel.text;\n        [self doneBusiness:DOBUSINESS_FAILED];\n    } else if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        \n        if (tableModel.extStringDict != nil) {\n            NSString *str = [tableModel.extStringDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_CODECODE]];\n            if(str) {\n                self.contentString = str;\n                self.stockCode = str;\n            }\n        }\n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStravgBuyPrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_AVGBUYPRICE]];\n            NSArray *pStravgSellPrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_AVGSELLPRICE]];\n            NSArray *pStrAllBuyCount = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ALLBUYCOUNT]];\n            NSArray *pStrAllSellCount = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ALLSELLCOUNT]];\n            self.allBuyHands = [pStrAllBuyCount thsStringAtIndex:0] ? : kSpaceStr;\n            self.allSellHands = [pStrAllSellCount thsStringAtIndex:0] ? : kSpaceStr;\n            self.avgBuyPrice = [pStravgBuyPrice thsStringAtIndex:0] ? : kSpaceStr;\n            self.avgSellPrice = [pStravgSellPrice thsStringAtIndex:0] ? : kSpaceStr;\n        }\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    }\n}\n\n// 设置数组数据\n- (void)setTextData:(NSArray *)pStrStockArray addToArray:(NSMutableArray *)array\n{\n    if (pStrStockArray && pStrStockArray.count >= 1)\n    {\n        NSString *sstr = [pStrStockArray firstObject];\n        if (!sstr) {\n            sstr = [NSString stringWithFormat:kSpaceStr];\n        }\n        [array addObject:sstr];\n    }\n}\n\n// 设置颜色数据\n- (void)setColorData:(NSArray *)pStockColor addToColorArray:(NSMutableArray *)colorArray\n{\n    if (pStockColor && pStockColor.count >= 1)\n    {\n        int colorValue = [[pStockColor firstObject] intValue];\n        [colorArray addObject:[Tools getLocalCorrespondColorWithServerStuffModelIntColor:colorValue]];\n    }\n}\n\n#pragma mark - 将服务端返回的数据转换成Objective_C数组\n//注销接口，不再接收数据返回\n- (void)unRegisterObjectKey {\n    self.successBlock = nil;\n    self.failedBlock = nil;\n    if (_fenShiFetcher) {\n        [self.fenShiFetcher pause];\n    }\n    \n    if (_xiaDanFetcher) {\n        [self.xiaDanFetcher pause];\n    }\n    \n    if (_allBuySellFetcher) {\n        [self.allBuySellFetcher pause];\n    }\n}\n\n- (NSMutableDictionary *)getWuDangDataToView {\n    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n    [dic thsSetObject:_sellAry forKey:@\"SellKey\"];\n    [dic thsSetObject:_sellNumberAry forKey:@\"SellNumberKey\"];\n    [dic thsSetObject:_buyAry forKey:@\"BuyKey\"];\n    [dic thsSetObject:_buyNumberAry forKey:@\"BuyNumberKey\"];\n    [dic thsSetObject:_sellColorAry forKey:@\"SellColorKey\"];\n    [dic thsSetObject:_sellNumberColorAry forKey:@\"SellNumberColorKey\"];\n    [dic thsSetObject:_buyColorAry forKey:@\"BuyColorKey\"];\n    [dic thsSetObject:_buyNumberColorAry forKey:@\"BuyNumberColorKey\"];\n    \n    return dic;\n}\n\n- (NSMutableDictionary *)getAllBuySellDataToView {\n    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n    [dic thsSetObject:_allBuyHands forKey:@\"allBuyHands\"];\n    [dic thsSetObject:_allSellHands forKey:@\"allSellHands\"];\n    [dic thsSetObject:_avgBuyPrice forKey:@\"avgBuyPrice\"];\n    [dic thsSetObject:_avgSellPrice forKey:@\"avgSellPrice\"];\n    return dic;\n}\n\n- (HXFiveRangeMarket *)convertTofiveRangeMarket {\n    UIColor *nowPriceColor = self.nowPriceColorArray.firstObject ?: HXUIColor.CharacterTwoAppColor;\n    return [[HXFiveRangeMarket alloc] initWithIsPushData:self.isRealData\n                                               stockCode:self.lastStockCode\n                                                buyPrice:self.buyPrice\n                                               sellPrice:self.sellPrice\n                                               lastPrice:self.lastPrice\n                                           nowPriceColor:nowPriceColor\n                                            limitUpPrice:self.limitUpPrice\n                                          limitDownPrice:self.limitDownPrice\n                                     yesterdayClosePrice:self.yesterdayClosePrice\n                                           fiveRangeDict:self.getWuDangDataToView];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"_buyAry];\n            [self setTextData:pStrbuy5 addToArray:_buyAry];\n            [self setTextData:pStrbuyNum1 addToArray:_buyNumberAry];","deepseek-chat-lite":":_buyAry];","CodeQwen2.5-7B":":_buyAry];","copilot":"    StuffTextModel *textModel = ("}},{"prefix":"                }\n                \n                if (strongSelf.isComplete) {\n                    return ;\n                }\n                \n                //防止过快刷新请求\n                strongSelf.isComplete = YES;\n                typeof(self) __weak weakSelf2 = strongSelf;\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)([QHTDisplayLink shareInstance].onceTime / 1000.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    typeof(weakSelf2) __strong strongSelf2 = weakSelf2;\n                    strongSelf2.isComplete = NO;\n                    [strongSelf2 setData:strongSelf2.tempWuDangData];\n                });\n            }];\n        } else {\n            [self.fenShiFetcher pause];\n            self.fenShiFetcher.request = request;\n        }\n        [self.fenShiFetcher start];\n    }\n}\n\n- (void)requestWithStockCode:(NSString *)stockCode\n                    marketId:(NSString *)marketId\n                successBlock:(void (^)(void))successBlock\n                 failedBlock:(void (^)(void))failedBlock {\n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    [self getWuDangDataWithStockCode:stockCode marketCode:marketId];\n}\n\n- (void)getAllBuySellDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VERTICAL_DETAIL_FRAMEID;\n        }\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n                               stockcode,\n                               marketCode];\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID paramsDict:requestDic pageId:(int)self.nPageID];\n        if (!_allBuySellFetcher) {\n            WEAKSELF;\n            self.allBuySellFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                weakSelf.allBuySellData = data;\n                weakSelf.isRealData = data.isRealData;\n                [weakSelf setAllBuySellData:data];\n                \n            }];\n        } else {\n            [self.allBuySellFetcher pause];\n            self.allBuySellFetcher.request = request;\n        }\n        [self.allBuySellFetcher start];\n    }\n}\n\n- (NSMutableDictionary *)refrishTextColor:(StuffBaseModel *)model {\n    if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        [_sellAry removeAllObjects];   //卖出价格数组\n        [_sellNumberAry removeAllObjects]; //卖出数量数组\n        [_buyAry removeAllObjects];    //买入价格数组\n        [_buyNumberAry removeAllObjects];  //买入数量数组\n        [_sellColorAry removeAllObjects];  //卖出价格颜色数组\n        [_sellNumberColorAry removeAllObjects];    //卖出数量颜色数组\n        [_buyColorAry removeAllObjects];   //买入价格颜色数组\n        [_buyNumberColorAry removeAllObjects]; //买入数量颜色数组\n        [_nowPriceColorArray removeAllObjects];\n        \n        // 是否需要基准价\n        BOOL isNeedStandard = ([[LJHQStandardPriceSetManager shareInstance] isSupportStandardPriceWithMarket:[NSString stringWithFormat:@\"%@\", self.lastMarketId]] && [[LJHQStandardPriceSetManager shareInstance] currentStandardPriceTypeIsCustom]);\n        NSString *standardPrice = [[LJHQStandardPriceSetManager shareInstance] getStandardPriceWithStockCode:self.lastStockCode];\n        NSMutableArray *buyTmpArr = [NSMutableArray array];\n        NSMutableArray *sellTmpArr = [NSMutableArray array];\n        \n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStrsell1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE1]];\n            NSArray *pStrsellNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT1]];\n            NSArray *pStrsell2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE2]];\n            NSArray *pStrsellNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT2]];\n            NSArray *pStrsell3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE3]];\n            NSArray *pStrsellNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT3]];\n            NSArray *pStrsell4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE4]];\n            NSArray *pStrsellNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT4]];\n            NSArray *pStrsell5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE5]];\n            NSArray *pStrsellNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT5]];\n            NSArray *pStrbuy1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE1]];\n            NSArray *pStrbuyNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT1]];\n            NSArray *pStrbuy2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE2]];\n            NSArray *pStrbuyNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT2]];\n            NSArray *pStrbuy3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE3]];\n            NSArray *pStrbuyNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT3]];\n            NSArray *pStrbuy4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE4]];\n            NSArray *pStrbuyNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT4]];\n            NSArray *pStrbuy5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE5]];\n            NSArray *pStrbuyNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT5]];\n            \n            NSArray *pStrsellNum6 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_NEWPRICE]];\n            if (pStrsellNum6) {\n                self.lastPrice = pStrsellNum6[0];\n            }else {\n                self.lastPrice = kSpaceStr;\n            }\n            \n            if (pStrbuy1) {\n                self.buyPrice =pStrbuy1[0];\n            }else {\n                self.buyPrice = kSpaceStr;\n            }\n            \n            if (pStrsell1) {\n                self.sellPrice = pStrsell1[0];\n            }else {\n                self.sellPrice = kSpaceStr;\n            }\n            \n            [self setTextData:pStrsell1 addToArray:_sellAry];\n            [self setTextData:pStrsell2 addToArray:_sellAry];\n            [self setTextData:pStrsell3 addToArray:_sellAry];\n            [self setTextData:pStrsell4 addToArray:_sellAry];\n            [self setTextData:pStrsell5 addToArray:_sellAry];\n            [self setTextData:pStrsellNum1 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum2 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum3 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum4 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum5 addToArray:_sellNumberAry];\n            [self setTextData:pStrbuy1 addToArray:_buyAry];\n            [self setTextData:pStrbuy2 addToArray:_buyAry];\n            [self setTextData:pStrbuy3 addToArray:_buyAry];\n            [self setTextData:pStrbuy4 addToArray:_buyAry];\n            [self","infill":"\n    if (model && ([model modelTy","suffix":"pe] == StuffModelTypeText)) {\n        StuffTextModel *textModel = (StuffTextModel *)model;\n        self.contentString = textModel.text;\n        [self doneBusiness:DOBUSINESS_FAILED];\n    } else if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        \n        if (tableModel.extStringDict != nil) {\n            NSString *str = [tableModel.extStringDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_CODECODE]];\n            if(str) {\n                self.contentString = str;\n                self.stockCode = str;\n            }\n        }\n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStravgBuyPrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_AVGBUYPRICE]];\n            NSArray *pStravgSellPrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_AVGSELLPRICE]];\n            NSArray *pStrAllBuyCount = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ALLBUYCOUNT]];\n            NSArray *pStrAllSellCount = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ALLSELLCOUNT]];\n            self.allBuyHands = [pStrAllBuyCount thsStringAtIndex:0] ? : kSpaceStr;\n            self.allSellHands = [pStrAllSellCount thsStringAtIndex:0] ? : kSpaceStr;\n            self.avgBuyPrice = [pStravgBuyPrice thsStringAtIndex:0] ? : kSpaceStr;\n            self.avgSellPrice = [pStravgSellPrice thsStringAtIndex:0] ? : kSpaceStr;\n        }\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    }\n}\n\n// 设置数组数据\n- (void)setTextData:(NSArray *)pStrStockArray addToArray:(NSMutableArray *)array\n{\n    if (pStrStockArray && pStrStockArray.count >= 1)\n    {\n        NSString *sstr = [pStrStockArray firstObject];\n        if (!sstr) {\n            sstr = [NSString stringWithFormat:kSpaceStr];\n        }\n        [array addObject:sstr];\n    }\n}\n\n// 设置颜色数据\n- (void)setColorData:(NSArray *)pStockColor addToColorArray:(NSMutableArray *)colorArray\n{\n    if (pStockColor && pStockColor.count >= 1)\n    {\n        int colorValue = [[pStockColor firstObject] intValue];\n        [colorArray addObject:[Tools getLocalCorrespondColorWithServerStuffModelIntColor:colorValue]];\n    }\n}\n\n#pragma mark - 将服务端返回的数据转换成Objective_C数组\n//注销接口，不再接收数据返回\n- (void)unRegisterObjectKey {\n    self.successBlock = nil;\n    self.failedBlock = nil;\n    if (_fenShiFetcher) {\n        [self.fenShiFetcher pause];\n    }\n    \n    if (_xiaDanFetcher) {\n        [self.xiaDanFetcher pause];\n    }\n    \n    if (_allBuySellFetcher) {\n        [self.allBuySellFetcher pause];\n    }\n}\n\n- (NSMutableDictionary *)getWuDangDataToView {\n    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n    [dic thsSetObject:_sellAry forKey:@\"SellKey\"];\n    [dic thsSetObject:_sellNumberAry forKey:@\"SellNumberKey\"];\n    [dic thsSetObject:_buyAry forKey:@\"BuyKey\"];\n    [dic thsSetObject:_buyNumberAry forKey:@\"BuyNumberKey\"];\n    [dic thsSetObject:_sellColorAry forKey:@\"SellColorKey\"];\n    [dic thsSetObject:_sellNumberColorAry forKey:@\"SellNumberColorKey\"];\n    [dic thsSetObject:_buyColorAry forKey:@\"BuyColorKey\"];\n    [dic thsSetObject:_buyNumberColorAry forKey:@\"BuyNumberColorKey\"];\n    \n    return dic;\n}\n\n- (NSMutableDictionary *)getAllBuySellDataToView {\n    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n    [dic thsSetObject:_allBuyHands forKey:@\"allBuyHands\"];\n    [dic thsSetObject:_allSellHands forKey:@\"allSellHands\"];\n    [dic thsSetObject:_avgBuyPrice forKey:@\"avgBuyPrice\"];\n    [dic thsSetObject:_avgSellPrice forKey:@\"avgSellPrice\"];\n    return dic;\n}\n\n- (HXFiveRangeMarket *)convertTofiveRangeMarket {\n    UIColor *nowPriceColor = self.nowPriceColorArray.firstObject ?: HXUIColor.CharacterTwoAppColor;\n    return [[HXFiveRangeMarket alloc] initWithIsPushData:self.isRealData\n                                               stockCode:self.lastStockCode\n                                                buyPrice:self.buyPrice\n                                               sellPrice:self.sellPrice\n                                               lastPrice:self.lastPrice\n                                           nowPriceColor:nowPriceColor\n                                            limitUpPrice:self.limitUpPrice\n                                          limitDownPrice:self.limitDownPrice\n                                     yesterdayClosePrice:self.yesterdayClosePrice\n                                           fiveRangeDict:self.getWuDangDataToView];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"setTextData:pStrbuy5 addToArray:_buyAry];\n            [self setTextData:pStrbuyNum1 addToArray:_buyNumberAry];","deepseek-chat-lite":" setTextData:pStrbuy5 addToArray:_buyAry];","CodeQwen2.5-7B":" setTextData:pStrbuyNum1 addToArray:_buyNumberAry];","copilot":"\n    if (model && ([model modelTy"}},{"prefix":"                    return;\n                }\n                \n                if (strongSelf.isComplete) {\n                    return ;\n                }\n                \n                //防止过快刷新请求\n                strongSelf.isComplete = YES;\n                typeof(self) __weak weakSelf2 = strongSelf;\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)([QHTDisplayLink shareInstance].onceTime / 1000.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    typeof(weakSelf2) __strong strongSelf2 = weakSelf2;\n                    strongSelf2.isComplete = NO;\n                    [strongSelf2 setData:strongSelf2.tempWuDangData];\n                });\n            }];\n        } else {\n            [self.fenShiFetcher pause];\n            self.fenShiFetcher.request = request;\n        }\n        [self.fenShiFetcher start];\n    }\n}\n\n- (void)requestWithStockCode:(NSString *)stockCode\n                    marketId:(NSString *)marketId\n                successBlock:(void (^)(void))successBlock\n                 failedBlock:(void (^)(void))failedBlock {\n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    [self getWuDangDataWithStockCode:stockCode marketCode:marketId];\n}\n\n- (void)getAllBuySellDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VERTICAL_DETAIL_FRAMEID;\n        }\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n                               stockcode,\n                               marketCode];\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID paramsDict:requestDic pageId:(int)self.nPageID];\n        if (!_allBuySellFetcher) {\n            WEAKSELF;\n            self.allBuySellFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                weakSelf.allBuySellData = data;\n                weakSelf.isRealData = data.isRealData;\n                [weakSelf setAllBuySellData:data];\n                \n            }];\n        } else {\n            [self.allBuySellFetcher pause];\n            self.allBuySellFetcher.request = request;\n        }\n        [self.allBuySellFetcher start];\n    }\n}\n\n- (NSMutableDictionary *)refrishTextColor:(StuffBaseModel *)model {\n    if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        [_sellAry removeAllObjects];   //卖出价格数组\n        [_sellNumberAry removeAllObjects]; //卖出数量数组\n        [_buyAry removeAllObjects];    //买入价格数组\n        [_buyNumberAry removeAllObjects];  //买入数量数组\n        [_sellColorAry removeAllObjects];  //卖出价格颜色数组\n        [_sellNumberColorAry removeAllObjects];    //卖出数量颜色数组\n        [_buyColorAry removeAllObjects];   //买入价格颜色数组\n        [_buyNumberColorAry removeAllObjects]; //买入数量颜色数组\n        [_nowPriceColorArray removeAllObjects];\n        \n        // 是否需要基准价\n        BOOL isNeedStandard = ([[LJHQStandardPriceSetManager shareInstance] isSupportStandardPriceWithMarket:[NSString stringWithFormat:@\"%@\", self.lastMarketId]] && [[LJHQStandardPriceSetManager shareInstance] currentStandardPriceTypeIsCustom]);\n        NSString *standardPrice = [[LJHQStandardPriceSetManager shareInstance] getStandardPriceWithStockCode:self.lastStockCode];\n        NSMutableArray *buyTmpArr = [NSMutableArray array];\n        NSMutableArray *sellTmpArr = [NSMutableArray array];\n        \n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStrsell1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE1]];\n            NSArray *pStrsellNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT1]];\n            NSArray *pStrsell2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE2]];\n            NSArray *pStrsellNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT2]];\n            NSArray *pStrsell3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE3]];\n            NSArray *pStrsellNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT3]];\n            NSArray *pStrsell4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE4]];\n            NSArray *pStrsellNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT4]];\n            NSArray *pStrsell5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE5]];\n            NSArray *pStrsellNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT5]];\n            NSArray *pStrbuy1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE1]];\n            NSArray *pStrbuyNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT1]];\n            NSArray *pStrbuy2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE2]];\n            NSArray *pStrbuyNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT2]];\n            NSArray *pStrbuy3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE3]];\n            NSArray *pStrbuyNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT3]];\n            NSArray *pStrbuy4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE4]];\n            NSArray *pStrbuyNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT4]];\n            NSArray *pStrbuy5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE5]];\n            NSArray *pStrbuyNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT5]];\n            \n            NSArray *pStrsellNum6 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_NEWPRICE]];\n            if (pStrsellNum6) {\n                self.lastPrice = pStrsellNum6[0];\n            }else {\n                self.lastPrice = kSpaceStr;\n            }\n            \n            if (pStrbuy1) {\n                self.buyPrice =pStrbuy1[0];\n            }else {\n                self.buyPrice = kSpaceStr;\n            }\n            \n            if (pStrsell1) {\n                self.sellPrice = pStrsell1[0];\n            }else {\n                self.sellPrice = kSpaceStr;\n            }\n            \n            [self setTextData:pStrsell1 addToArray:_sellAry];\n            [self setTextData:pStrsell2 addToArray:_sellAry];\n            [self setTextData:pStrsell3 addToArray:_sellAry];\n            [self setTextData:pStrsell4 addToArray:_sellAry];\n            [self setTextData:pStrsell5 addToArray:_sellAry];\n            [self setTextData:pStrsellNum1 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum2 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum3 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum4 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum5 addToArray:_sellNumberAry];\n            [self setTextData:pStrbuy1 addToArray:_buyAry];\n            [self setTextData:pStrbuy2 addToArray:_buyAry];\n            [self setTextData:pStrbuy3 addToArray:_buyAry];\n            [self setTextData:pStrbuy4 addToArray","infill":"e] == StuffModelTypeText)) {\n     ","suffix":"   StuffTextModel *textModel = (StuffTextModel *)model;\n        self.contentString = textModel.text;\n        [self doneBusiness:DOBUSINESS_FAILED];\n    } else if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        \n        if (tableModel.extStringDict != nil) {\n            NSString *str = [tableModel.extStringDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_CODECODE]];\n            if(str) {\n                self.contentString = str;\n                self.stockCode = str;\n            }\n        }\n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStravgBuyPrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_AVGBUYPRICE]];\n            NSArray *pStravgSellPrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_AVGSELLPRICE]];\n            NSArray *pStrAllBuyCount = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ALLBUYCOUNT]];\n            NSArray *pStrAllSellCount = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ALLSELLCOUNT]];\n            self.allBuyHands = [pStrAllBuyCount thsStringAtIndex:0] ? : kSpaceStr;\n            self.allSellHands = [pStrAllSellCount thsStringAtIndex:0] ? : kSpaceStr;\n            self.avgBuyPrice = [pStravgBuyPrice thsStringAtIndex:0] ? : kSpaceStr;\n            self.avgSellPrice = [pStravgSellPrice thsStringAtIndex:0] ? : kSpaceStr;\n        }\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    }\n}\n\n// 设置数组数据\n- (void)setTextData:(NSArray *)pStrStockArray addToArray:(NSMutableArray *)array\n{\n    if (pStrStockArray && pStrStockArray.count >= 1)\n    {\n        NSString *sstr = [pStrStockArray firstObject];\n        if (!sstr) {\n            sstr = [NSString stringWithFormat:kSpaceStr];\n        }\n        [array addObject:sstr];\n    }\n}\n\n// 设置颜色数据\n- (void)setColorData:(NSArray *)pStockColor addToColorArray:(NSMutableArray *)colorArray\n{\n    if (pStockColor && pStockColor.count >= 1)\n    {\n        int colorValue = [[pStockColor firstObject] intValue];\n        [colorArray addObject:[Tools getLocalCorrespondColorWithServerStuffModelIntColor:colorValue]];\n    }\n}\n\n#pragma mark - 将服务端返回的数据转换成Objective_C数组\n//注销接口，不再接收数据返回\n- (void)unRegisterObjectKey {\n    self.successBlock = nil;\n    self.failedBlock = nil;\n    if (_fenShiFetcher) {\n        [self.fenShiFetcher pause];\n    }\n    \n    if (_xiaDanFetcher) {\n        [self.xiaDanFetcher pause];\n    }\n    \n    if (_allBuySellFetcher) {\n        [self.allBuySellFetcher pause];\n    }\n}\n\n- (NSMutableDictionary *)getWuDangDataToView {\n    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n    [dic thsSetObject:_sellAry forKey:@\"SellKey\"];\n    [dic thsSetObject:_sellNumberAry forKey:@\"SellNumberKey\"];\n    [dic thsSetObject:_buyAry forKey:@\"BuyKey\"];\n    [dic thsSetObject:_buyNumberAry forKey:@\"BuyNumberKey\"];\n    [dic thsSetObject:_sellColorAry forKey:@\"SellColorKey\"];\n    [dic thsSetObject:_sellNumberColorAry forKey:@\"SellNumberColorKey\"];\n    [dic thsSetObject:_buyColorAry forKey:@\"BuyColorKey\"];\n    [dic thsSetObject:_buyNumberColorAry forKey:@\"BuyNumberColorKey\"];\n    \n    return dic;\n}\n\n- (NSMutableDictionary *)getAllBuySellDataToView {\n    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n    [dic thsSetObject:_allBuyHands forKey:@\"allBuyHands\"];\n    [dic thsSetObject:_allSellHands forKey:@\"allSellHands\"];\n    [dic thsSetObject:_avgBuyPrice forKey:@\"avgBuyPrice\"];\n    [dic thsSetObject:_avgSellPrice forKey:@\"avgSellPrice\"];\n    return dic;\n}\n\n- (HXFiveRangeMarket *)convertTofiveRangeMarket {\n    UIColor *nowPriceColor = self.nowPriceColorArray.firstObject ?: HXUIColor.CharacterTwoAppColor;\n    return [[HXFiveRangeMarket alloc] initWithIsPushData:self.isRealData\n                                               stockCode:self.lastStockCode\n                                                buyPrice:self.buyPrice\n                                               sellPrice:self.sellPrice\n                                               lastPrice:self.lastPrice\n                                           nowPriceColor:nowPriceColor\n                                            limitUpPrice:self.limitUpPrice\n                                          limitDownPrice:self.limitDownPrice\n                                     yesterdayClosePrice:self.yesterdayClosePrice\n                                           fiveRangeDict:self.getWuDangDataToView];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"_buyAry];\n            [self setTextData:pStrbuy5 addToArray:_buyAry];\n            [self setTextData:pStrbuyNum1 addToArray:_buyNumberAry];","deepseek-chat-lite":":_buyAry];","CodeQwen2.5-7B":":_buyAry];","copilot":"e] == StuffModelTypeText)) {\n     "}},{"prefix":"                }\n                \n                if (strongSelf.isComplete) {\n                    return ;\n                }\n                \n                //防止过快刷新请求\n                strongSelf.isComplete = YES;\n                typeof(self) __weak weakSelf2 = strongSelf;\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)([QHTDisplayLink shareInstance].onceTime / 1000.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    typeof(weakSelf2) __strong strongSelf2 = weakSelf2;\n                    strongSelf2.isComplete = NO;\n                    [strongSelf2 setData:strongSelf2.tempWuDangData];\n                });\n            }];\n        } else {\n            [self.fenShiFetcher pause];\n            self.fenShiFetcher.request = request;\n        }\n        [self.fenShiFetcher start];\n    }\n}\n\n- (void)requestWithStockCode:(NSString *)stockCode\n                    marketId:(NSString *)marketId\n                successBlock:(void (^)(void))successBlock\n                 failedBlock:(void (^)(void))failedBlock {\n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    [self getWuDangDataWithStockCode:stockCode marketCode:marketId];\n}\n\n- (void)getAllBuySellDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VERTICAL_DETAIL_FRAMEID;\n        }\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n                               stockcode,\n                               marketCode];\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID paramsDict:requestDic pageId:(int)self.nPageID];\n        if (!_allBuySellFetcher) {\n            WEAKSELF;\n            self.allBuySellFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                weakSelf.allBuySellData = data;\n                weakSelf.isRealData = data.isRealData;\n                [weakSelf setAllBuySellData:data];\n                \n            }];\n        } else {\n            [self.allBuySellFetcher pause];\n            self.allBuySellFetcher.request = request;\n        }\n        [self.allBuySellFetcher start];\n    }\n}\n\n- (NSMutableDictionary *)refrishTextColor:(StuffBaseModel *)model {\n    if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        [_sellAry removeAllObjects];   //卖出价格数组\n        [_sellNumberAry removeAllObjects]; //卖出数量数组\n        [_buyAry removeAllObjects];    //买入价格数组\n        [_buyNumberAry removeAllObjects];  //买入数量数组\n        [_sellColorAry removeAllObjects];  //卖出价格颜色数组\n        [_sellNumberColorAry removeAllObjects];    //卖出数量颜色数组\n        [_buyColorAry removeAllObjects];   //买入价格颜色数组\n        [_buyNumberColorAry removeAllObjects]; //买入数量颜色数组\n        [_nowPriceColorArray removeAllObjects];\n        \n        // 是否需要基准价\n        BOOL isNeedStandard = ([[LJHQStandardPriceSetManager shareInstance] isSupportStandardPriceWithMarket:[NSString stringWithFormat:@\"%@\", self.lastMarketId]] && [[LJHQStandardPriceSetManager shareInstance] currentStandardPriceTypeIsCustom]);\n        NSString *standardPrice = [[LJHQStandardPriceSetManager shareInstance] getStandardPriceWithStockCode:self.lastStockCode];\n        NSMutableArray *buyTmpArr = [NSMutableArray array];\n        NSMutableArray *sellTmpArr = [NSMutableArray array];\n        \n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStrsell1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE1]];\n            NSArray *pStrsellNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT1]];\n            NSArray *pStrsell2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE2]];\n            NSArray *pStrsellNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT2]];\n            NSArray *pStrsell3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE3]];\n            NSArray *pStrsellNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT3]];\n            NSArray *pStrsell4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE4]];\n            NSArray *pStrsellNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT4]];\n            NSArray *pStrsell5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE5]];\n            NSArray *pStrsellNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT5]];\n            NSArray *pStrbuy1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE1]];\n            NSArray *pStrbuyNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT1]];\n            NSArray *pStrbuy2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE2]];\n            NSArray *pStrbuyNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT2]];\n            NSArray *pStrbuy3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE3]];\n            NSArray *pStrbuyNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT3]];\n            NSArray *pStrbuy4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE4]];\n            NSArray *pStrbuyNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT4]];\n            NSArray *pStrbuy5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE5]];\n            NSArray *pStrbuyNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT5]];\n            \n            NSArray *pStrsellNum6 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_NEWPRICE]];\n            if (pStrsellNum6) {\n                self.lastPrice = pStrsellNum6[0];\n            }else {\n                self.lastPrice = kSpaceStr;\n            }\n            \n            if (pStrbuy1) {\n                self.buyPrice =pStrbuy1[0];\n            }else {\n                self.buyPrice = kSpaceStr;\n            }\n            \n            if (pStrsell1) {\n                self.sellPrice = pStrsell1[0];\n            }else {\n                self.sellPrice = kSpaceStr;\n            }\n            \n            [self setTextData:pStrsell1 addToArray:_sellAry];\n            [self setTextData:pStrsell2 addToArray:_sellAry];\n            [self setTextData:pStrsell3 addToArray:_sellAry];\n            [self setTextData:pStrsell4 addToArray:_sellAry];\n            [self setTextData:pStrsell5 addToArray:_sellAry];\n            [self setTextData:pStrsellNum1 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum2 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum3 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum4 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum5 addToArray:_sellNumberAry];\n            [self setTextData:pStrbuy1 addToArray:_buyAry];\n            [self setTextData:pStrbuy2 addToArray:_buyAry];\n            [self setTextData:pStrbuy3 addToArray:_buyAry];\n            [self setTextData:pStrbuy4 addToArray:_buyAry];\n            [self","infill":"StuffTextModel *)model;\n        se","suffix":"lf.contentString = textModel.text;\n        [self doneBusiness:DOBUSINESS_FAILED];\n    } else if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        \n        if (tableModel.extStringDict != nil) {\n            NSString *str = [tableModel.extStringDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_CODECODE]];\n            if(str) {\n                self.contentString = str;\n                self.stockCode = str;\n            }\n        }\n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStravgBuyPrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_AVGBUYPRICE]];\n            NSArray *pStravgSellPrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_AVGSELLPRICE]];\n            NSArray *pStrAllBuyCount = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ALLBUYCOUNT]];\n            NSArray *pStrAllSellCount = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ALLSELLCOUNT]];\n            self.allBuyHands = [pStrAllBuyCount thsStringAtIndex:0] ? : kSpaceStr;\n            self.allSellHands = [pStrAllSellCount thsStringAtIndex:0] ? : kSpaceStr;\n            self.avgBuyPrice = [pStravgBuyPrice thsStringAtIndex:0] ? : kSpaceStr;\n            self.avgSellPrice = [pStravgSellPrice thsStringAtIndex:0] ? : kSpaceStr;\n        }\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    }\n}\n\n// 设置数组数据\n- (void)setTextData:(NSArray *)pStrStockArray addToArray:(NSMutableArray *)array\n{\n    if (pStrStockArray && pStrStockArray.count >= 1)\n    {\n        NSString *sstr = [pStrStockArray firstObject];\n        if (!sstr) {\n            sstr = [NSString stringWithFormat:kSpaceStr];\n        }\n        [array addObject:sstr];\n    }\n}\n\n// 设置颜色数据\n- (void)setColorData:(NSArray *)pStockColor addToColorArray:(NSMutableArray *)colorArray\n{\n    if (pStockColor && pStockColor.count >= 1)\n    {\n        int colorValue = [[pStockColor firstObject] intValue];\n        [colorArray addObject:[Tools getLocalCorrespondColorWithServerStuffModelIntColor:colorValue]];\n    }\n}\n\n#pragma mark - 将服务端返回的数据转换成Objective_C数组\n//注销接口，不再接收数据返回\n- (void)unRegisterObjectKey {\n    self.successBlock = nil;\n    self.failedBlock = nil;\n    if (_fenShiFetcher) {\n        [self.fenShiFetcher pause];\n    }\n    \n    if (_xiaDanFetcher) {\n        [self.xiaDanFetcher pause];\n    }\n    \n    if (_allBuySellFetcher) {\n        [self.allBuySellFetcher pause];\n    }\n}\n\n- (NSMutableDictionary *)getWuDangDataToView {\n    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n    [dic thsSetObject:_sellAry forKey:@\"SellKey\"];\n    [dic thsSetObject:_sellNumberAry forKey:@\"SellNumberKey\"];\n    [dic thsSetObject:_buyAry forKey:@\"BuyKey\"];\n    [dic thsSetObject:_buyNumberAry forKey:@\"BuyNumberKey\"];\n    [dic thsSetObject:_sellColorAry forKey:@\"SellColorKey\"];\n    [dic thsSetObject:_sellNumberColorAry forKey:@\"SellNumberColorKey\"];\n    [dic thsSetObject:_buyColorAry forKey:@\"BuyColorKey\"];\n    [dic thsSetObject:_buyNumberColorAry forKey:@\"BuyNumberColorKey\"];\n    \n    return dic;\n}\n\n- (NSMutableDictionary *)getAllBuySellDataToView {\n    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n    [dic thsSetObject:_allBuyHands forKey:@\"allBuyHands\"];\n    [dic thsSetObject:_allSellHands forKey:@\"allSellHands\"];\n    [dic thsSetObject:_avgBuyPrice forKey:@\"avgBuyPrice\"];\n    [dic thsSetObject:_avgSellPrice forKey:@\"avgSellPrice\"];\n    return dic;\n}\n\n- (HXFiveRangeMarket *)convertTofiveRangeMarket {\n    UIColor *nowPriceColor = self.nowPriceColorArray.firstObject ?: HXUIColor.CharacterTwoAppColor;\n    return [[HXFiveRangeMarket alloc] initWithIsPushData:self.isRealData\n                                               stockCode:self.lastStockCode\n                                                buyPrice:self.buyPrice\n                                               sellPrice:self.sellPrice\n                                               lastPrice:self.lastPrice\n                                           nowPriceColor:nowPriceColor\n                                            limitUpPrice:self.limitUpPrice\n                                          limitDownPrice:self.limitDownPrice\n                                     yesterdayClosePrice:self.yesterdayClosePrice\n                                           fiveRangeDict:self.getWuDangDataToView];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"setTextData:pStrbuy5 addToArray:_buyAry];\n            [self setTextData:pStrbuyNum1 addToArray:_buyNumberAry];","deepseek-chat-lite":" setTextData:pStrbuy5 addToArray:_buyAry];","CodeQwen2.5-7B":" setTextData:pStrbuyNum1 addToArray:_buyNumberAry];","copilot":"StuffTextModel *)model;\n        se"}},{"prefix":"\n#import \"ZiXuanMarkeyInfo.h\"\n#import <EQFoundation/EQColor.h>\n#import \"EQAppFrame.h\"\n#import \"tooles.h\"\n#import \"AM_UI_VarKeyString.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import \"SSGGroupViewModel.h\"\n#import \"SSGGroupBuryingPointer.h\"\n#import \"GroupInfoModel.h\"\n#import <EQConfigModul/EQLocalString.h>\n#import \"ZiXuanDPYDView.h\"\n#import \"SSGDynamicGroupViewModel.h\"\n#import \"HXMarketAnalysisView.h\"\n#import \"SurveyModel.h\"\n#import <Masonry/Masonry.h>\n#import \"MarketBiddingFloatingView.h\"\n#import \"PortfolioListPriceProvider.h\"\n#import \"SSGSelectStockView.h\"\n#import <HXBase/AMUITabFm.h>\n#import <HXBase/PageView.h>\n#import \"SSGStockGroupDetailHeaderView.h\"\n#import \"IHexin-Swift.h\"\n#import <HXAMFrontPage/HXCategoryAppAddDisposableObj.h>\n#import \"BackgroundView.h\"\n#import <AMIphoneBase/CustomPageControl.h>\n#import \"NewZixuanTable.h\"\n#import <HXNebula/HXNebula-Swift.h>\n#import \"ZiXuanZhiShuScrollView.h\"\n#import \"ZiXuanTopView.h\"\n#import \"ZiXuanMarkeyInfo+toolbar.h\"\n#import <HXBase/NSArray+Safety.h>\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"HXZiXuanCurveContainerView.h\"\n#import \"HXWatchListTopAdManager.h\"\n#import \"HXWatchListTopAdView.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertViewModel.h>\n#import \"HXGrayRelease+Register.h\"\n#import <HXWatchList/HXWatchList-Swift.h>\n#import <HXWatchList/HXWatchlistModelAdaptation.h>\n\n#define TOP_DIFF          8.0  // 顶部空余高度\n#define QUICKLYSLIDE      0.3  // 视为快速滑动的时间间隔\n#define QIANGRUO_HEIGHT   [EQTools getRealFloatOn6:102.0] // 强弱指数高度\n#define INDEXHEIGHT 72 // 指数条高度\n#define SELECTSTOCKVIEWHEIGHT 136 // 指数条高度\n#define STOCKDETAILVIEWHEIGHT 158 // 自选分组详情页顶部view高度\n#define kDPYDViewHeight     [EQTools getRealFloatOn6:76.0]\n#define PAGECONTROL_DOT_WIDTH   6\n#define PAGECONTROL_DOT_HEIGHT  PAGECONTROL_DOT_WIDTH\n\n#define kDaPanDongTaiYuanDian @\"DaPanDongTaiYuanDian\"\n#define FilterTabCodeAll @\"all\" // 【全部】tab对应的code\n\nNSString * const Level1TipShowKey = @\"Level1TipShowKey\";\nNSString * const Level2TipShowKey = @\"Level2TipShowKey\";\nNSMutableDictionary *kZixuanTipLevelDictionary;\n\ntypedef NS_ENUM(NSUInteger, ESlideType) {//手势滑动类型\n    ESlideType_None = 0,\n    ESlideType_Click ,              //轻触\n    ESlideType_Moving,              //正在滑动\n    ESlideType_Quickly_UpSlide,     //快速向上滑动\n    ESlideType_Quickly_DownSlide,   //快速向下滑动\n    ESlideType_Slowly_UpSlide,      //缓慢向上滑动\n    ESlideType_Slowly_DownSlide     //缓慢向下滑动\n};\n\n@interface ZiXuanMarkeyInfo()<ZiXuanFSKlineViewDelegate, NewZixuanTableDelegate,  BackgroundViewDelegate, FlashDotViewDelegate, ZiXuanZhiShuScrollViewDelegate,HXZiXuanCurveContainerViewDelegate>\n{\n    IBOutlet NewZixuanTable *_zTableView;//自选表格\n    FlashDotView *_tipView;//大盘新手引导页面\n    BackgroundView *_viewBackground; //分时展开后的背景view\n    \n    BOOL _dpClosed;  //0:大盘展示  1:大盘关闭\n    BOOL _bShowMarkeyFenShi;     //标识大盘分时当前是否处于展开状态\n    BOOL _bTouchEnd;\n    \n    CGPoint _ptBegin;\n    CGPoint _ptMoved;\n    CGPoint _ptEnd;\n    NSDate *_startTap;\n}\n/// 顶部视图\n@property (nonatomic, strong) ZiXuanTopView *topView;\n/// 强弱分析\n@property (nonatomic, strong) HXMarketAnalysisView *qrfxView;\n/// 大盘异动\n@property (nonatomic, strong) ZiXuanDPYDView *dpydView;\n/// 动态关注详情\n@property (nonatomic, strong) SSGStockGroupDetailHeaderView *stockDetailView;\n/// 动态分组上面\n@property (nonatomic, strong) SSGSelectStockView *selectStockView;\n\n@property (nonatomic, strong) NSMutableDictionary *tipLevelDictionary;\n@property (nonatomic, assign) BOOL isShowingDynamicGroup;\n@property (nonatomic, assign) BOOL isShowingStockDetail;\n@property (nonatomic, strong) NSData *currGroupId; // 当前选中的tab\n@property (nonatomic, assign) CGFloat lastHeaderHeight;\n\n@property (nonatomic, strong) HXZiXuanCurveContainerView *curveContainerView;\n\n/// 指数上部广告管理类\n@property (nonatomic, strong) HXWatchListTopAdManager *adManager;\n\n/// 顶部广告\n@property (nonatomic, strong) HXWatchListTopAdView *adView;\n\n/// 记录是否显示广告\n@property (nonatomic, assign) BOOL shouldShowAdView;\n\n/// 记录当前是否选中自选股\n@property (nonatomic, assign) BOOL isSelfStockGroup;\n\n/// 记录当前视图是否正在显示\n@property (nonatomic, assign) BOOL isAppear;\n\n@end\n\n@implementation ZiXuanMarkeyInfo\n@dynamic tipLevelDictionary;\n\n- (void)dealloc {\n    [AMMiddlePublicProxy unregisterComponentRealTimeId:[self getInstanceId]];\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)awakeFromNib {\n    [super awakeFromNib];\n    self.isSelfStockGroup = YES;\n    self.curveContainerView = [[HXZiXuanCurveContainerView alloc] init];\n    _curveContainerView.delegate = self;\n    _curveContainerView.pageId = EQLOCAL_NODE_ID_FRAME_SELFSTOCK;\n    _curveContainerView.frame = [tooles getRealSize:CGRectMake(0, INDEXHEIGHT, 280, 220)];\n    [self addSubview:_curveContainerView];\n}\n\n#pragma mark 界面展示相关\n- (void)onFinishInflate {\n    \n    // 顶部指数条\n    [self initIndexBackgroundView];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(_applicationDidEnterBackground:) name:UIApplicationDidEnterBackgroundNotification object:nil];\n    //适配iPhone6\n    CGRect selfRect = self.frame;\n    if (_curveContainerView) {\n        CGFloat selfHeight = CGRectGetMaxY(_curveContainerView.frame) + QIANGRUO_HEIGHT + kDPYDViewHeight;\n        self.frame = CGRectMake(selfRect.origin.x, INDEXHEIGHT - selfHeight, selfRect.size.width, selfHeight);\n    }\n    _isShowingDynamicGroup = NO;\n    _isShowingStockDetail = NO;\n    _bTouchEnd = YES;\n    _bShowMarkeyFenShi = NO;\n    _dpClosed = YES;\n    \n    _zTableView.delegate = self;\n    \n    //强弱分析View\n    CGFloat width = [tooles getRealFloat:self.frame.size.width];\n    _qrfxView = [[HXMarketAnalysisView alloc] initWithFrame:CGRectMake(self.frame.origin.x, self.frame.size.height - QIANGRUO_HEIGHT - kDPYDViewHeight, width, QIANGRUO_HEIGHT)];\n    [self addSubview:_qrfxView];\n    _qrfxView.selectedZhiShu = @\"hu\";\n    _qrfxView.hidden = YES;\n    \n    //大盘异动\n    _dpydView = [[ZiXuanDPYDView alloc] initWithFrame:CGRectMake(self.frame.origin.x, self.frame.size.height - kDPYDViewHeight, width, kDPYDViewHeight)];\n    __weak typeof(self) weakSelf = self;\n    _dpydView.clickAction = ^{\n        [weakSelf ziXuanDPYDViewClickAction];\n    };\n    [self addSubview:_dpydView];\n    _dpydView.hidden = YES;\n    \n    //收起时外面的工具栏\n    [self setupStockIndexToolBar];\n    \n    [_zTableView setZiXuanSelectStockView:self.selectStockView];\n    [_zTableView setZiXuanStockGroupDetailHeaderView:self.stockDetailView];\n    \n    // 可选指数相关初始化\n    [self.zhiShuScrollView refreshRightButton];\n    \n    [self.superview setBackgroundColor:BACKGROUND_COLOR_NORMAL theme:ThemeVersionNormal];\n    [self.superview setBackgroundColor:NAVI_REGULAR_COLOR_NIGHT theme:ThemeVersionNight];\n    [self.superview changeTheme];\n    [self setBackgroundColor:BG_COLOR_LEVEL2_NORMAL theme:ThemeVersionNormal];\n    [self setBackgroundColor:BG_COLOR_LEVEL2_NIGHT theme:ThemeVersionNight];\n    [self changeTheme];\n    \n    [self setFenShiPageData];\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(applicationWillEnterForeground) name:UIApplicationWillEnterForegroundNotification object:nil];\n}\n\n- (void)willAppear {","infill":"[super willAppear];\n    self.isAppear = YES;\n    [self updateAdViewWithAdInfo:[self.adManager getLastAdInfo]];\n    [self.adManager requestNewAdIfNeed];\n    [self.adManager","suffix":" sendShowAdLogIfNeeded];\n    [self setFenShiPageData];\n    // 显示选股顶部视图\n    [self showOrHideSelectStockView];\n}\n\n- (void)didAppear {\n    [super didAppear];\n    [self setNewZixuanTableHeight];\n    [self requestData:NO];\n    /**\n     * JIRA:11344\n     * 直接调用,获取到的window.frame大小不是全屏,导致全屏引导不能覆盖整个屏幕\n     * 所以用dispatch将调用延后,可以解决获取到的frame大小不对的问题.\n     */\n    dispatch_async(dispatch_get_main_queue(), ^{\n        [self showTips];\n    });\n}\n\n- (void)changeTheme {\n    [super changeTheme];\n\n    [ThemeVersionManager changeTheme:_topView];\n    [ThemeVersionManager changeTheme:_zhiShuScrollView];\n}\n\n- (UIImage *)dotImageWithColor:(UIColor *)color size:(CGSize)size inSize:(CGSize)inSize {\n    UIGraphicsBeginImageContext(CGSizeMake(inSize.width*2, inSize.height*2));\n    CGContextRef ctx = UIGraphicsGetCurrentContext();\n    CGContextSaveGState(ctx);\n    \n    [color set];\n    CGRect dotFrame = CGRectMake(inSize.width-size.width, inSize.height-size.height, size.width*2, size.height*2);\n    CGContextFillEllipseInRect(ctx, dotFrame);\n    \n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    \n    CGContextRestoreGState(ctx);\n    UIGraphicsEndImageContext();\n    \n    return [UIImage imageWithCGImage:image.CGImage scale:2 orientation:UIImageOrientationUp];\n}\n\n- (void)willDisappear {\n    [super willDisappear];\n    self.isAppear = NO;\n    [self _hideDaPanViewAtLittleScreenSize];\n    \n    [self stopRealData];\n    [AMMiddlePublicProxy unregisterComponentRealTimeId:[self getInstanceId]];\n    [_adManager resetAdStatStatus];\n}\n\n//初始化指数条背景view\n- (void)initIndexBackgroundView {\n    _topView = [[ZiXuanTopView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, INDEXHEIGHT)];\n    __weak typeof(self) weakSelf = self;\n    _topView.gotoSettingBlock = ^{\n        [weakSelf gotoSetting];\n    };\n    [self addSubview:_topView];\n    \n    [self upItemAnimation:ESlideType_Slowly_UpSlide];\n    [self layoutIfNeeded];\n}\n\n//改变圆点状态\n- (void)changePointStatus:(BOOL)bUp {\n    //modify by chenyonghong 大盘分时隐藏的时候 再向上滑动不需要处理\n    if (!_bShowMarkeyFenShi && bUp) {\n        return;\n    }\n    \n    if (bUp) {\n        _bShowMarkeyFenShi = NO;\n        \n        [UIView beginAnimations:nil context:NULL];\n        [UIView setAnimationDuration:0.5];\n        [UIView commitAnimations];\n        _zTableView.userInteractionEnabled = YES;\n        [_viewBackground removeFromSuperview];\n    } else {\n        _bShowMarkeyFenShi = YES;\n        \n        [UIView beginAnimations:nil context:NULL];\n        [UIView setAnimationDuration:0.5];\n        [UIView commitAnimations];\n        _zTableView.userInteractionEnabled = NO;\n        if (_viewBackground == nil) {\n            _viewBackground = [[BackgroundView alloc] initWithFrame:CGRectMake(0.0, 0.0, Screen_width, Screen_height)];\n            [_viewBackground setBackgroundColor:[UIColor colorWithRed:0.0 green:0.0 blue:0.0 alpha:0.5]];\n            _viewBackground.delegate = self;\n            [_viewBackground setUserInteractionEnabled:YES];\n        }\n        [_zTableView.superview addSubview:_viewBackground];\n        [_zTableView.superview bringSubviewToFront:self];\n        \n        for (UIView* v in [self.superview subviews]) {\n            if ([v isKindOfClass:MarketBiddingFloatingView.class]) {\n                [self.superview bringSubviewToFront:v];\n            }\n        }\n    }\n}\n\n- (void)setFrame:(CGRect)frame animated:(BOOL)animated {\n    CGFloat closeOriginY = (INDEXHEIGHT - self.frame.size.height);\n    if (self.adView && self.adView.hidden == NO) {// 大盘收起状态下，如果有广告则需要增加广告的高度\n        closeOriginY = closeOriginY + self.adManager.adHeight;\n    }\n    if (frame.origin.y == 0.0 - TOP_DIFF) {\n        [self changePointStatus:NO];\n    } else if(frame.origin.y == closeOriginY) {\n        [self changePointStatus:YES];\n    }\n    \n    if (animated) {\n        [UIView beginAnimations:nil context:NULL];\n        [self setFrame:frame];\n        [UIView commitAnimations];\n    } else {\n        [self setFrame:frame];\n    }\n}\n\n- (void)setIndexItemHidden:(BOOL)hidden {\n    _toolBar.hidden = hidden;\n    _dpydView.hidden = !hidden;\n    _qrfxView.hidden = !hidden;\n}\n\n- (void)showOrHideSelectStockView {\n    if (_isShowingDynamicGroup) {\n        if (_isShowingStockDetail) {\n            _selectStockView.hidden = YES;\n            _stockDetailView.hidden = NO;\n        } else {\n            _selectStockView.hidden = NO;\n            _stockDetailView.hidden = YES;\n        }\n    } else {\n        _selectStockView.hidden = YES;\n        _stockDetailView.hidden = YES;\n    }\n    \n    if (_isShowingDynamicGroup || !_dpClosed) {\n        [self setIndexItemHidden:YES];\n    } else {\n        [self setIndexItemHidden:NO];\n    }\n}\n\n- (void)resetViewHeight {\n    CGFloat heightDelta = SELECTSTOCKVIEWHEIGHT - INDEXHEIGHT;\n    CGFloat heightDetail = STOCKDETAILVIEWHEIGHT - INDEXHEIGHT;\n    \n    CGRect selfRect = self.frame;\n    selfRect.size.height -= self.lastHeaderHeight;\n    if (_isShowingDynamicGroup) {\n        if (_isShowingStockDetail) {\n            selfRect.size.height += heightDetail;\n            self.lastHeaderHeight = heightDetail;\n        } else {\n            selfRect.size.height += heightDelta;\n            self.lastHeaderHeight = heightDelta;\n        }\n    } else {\n        self.lastHeaderHeight = 0;\n    }\n    self.frame = selfRect;\n}\n\n- (void)setNewZixuanTableHeight {\n    if (_isShowingDynamicGroup) {\n        if (_isShowingStockDetail) {\n            _zTableView.frame = CGRectMake(_zTableView.frame.origin.x, STOCKDETAILVIEWHEIGHT, _zTableView.frame.size.width, ceil(Screen_height - STOCKDETAILVIEWHEIGHT - DYNAMIC_STATUSBAR_AND_NAVIGATIONBAR_HEIGHT - TABBAR_HEIGHT));\n        } else {\n            _zTableView.frame = CGRectMake(_zTableView.frame.origin.x, SELECTSTOCKVIEWHEIGHT, _zTableView.frame.size.width, ceil(Screen_height - SELECTSTOCKVIEWHEIGHT - DYNAMIC_STATUSBAR_AND_NAVIGATIONBAR_HEIGHT - TABBAR_HEIGHT));\n        }\n    } else {\n        CGFloat originY = INDEXHEIGHT;\n        if (self.adView && self.adView.hidden == NO) {\n            originY = originY + self.adManager.adHeight;\n        }\n        _zTableView.frame = CGRectMake(_zTableView.frame.origin.x, originY, _zTableView.frame.size.width, ceil(Screen_height - originY - DYNAMIC_STATUSBAR_AND_NAVIGATIONBAR_HEIGHT - TABBAR_HEIGHT));\n    }\n}\n\n- (void)upItemAnimation:(ESlideType)type {\n    CGFloat alpha = 0.0;\n    if (type == ESlideType_Slowly_DownSlide) {\n        alpha = 1.0;\n    } else if (type == ESlideType_Slowly_UpSlide) {\n        alpha = 0.0;\n    }\n    [self.topView upItemAlpha:alpha];\n}\n\n- (void)resetFrameWithHeight:(CGFloat)height slideType:(ESlideType)slideType {\n    [self.superview bringSubviewToFront:self];\n    for (UIView *view in self.superview.subviews) {\n        if ([view isKindOfClass:MarketBiddingFloatingView.class]) {\n            [self.superview bringSubviewToFront:view];\n            break;\n        }\n    }\n    \n    switch (slideType) {\n        case ESlideType_None: {\n            if ((self.frame.origin.y + self.frame.size.height / 2) >= 0) {\n                [self setDaPanClosed:NO animated:YES];\n            } else {\n                [self setDaPanClosed:YES animated:YES];\n            }\n            break;\n        }\n        case ESlideType_Click: {\n            if (self.frame.origin.y >= 0.0 - TOP_DIFF) {\n                //由展开进入关闭\n                [self setDaPanClosed:YES animated:YES];\n            } else {\n                //由关闭进入展开\n                [self setDaPanClosed:NO animated:YES];\n            }\n            break;\n        }\n        case ESlideType_Moving: {\n            CGFloat maxY = (INDEXHEIGHT - self.frame.size.height);\n            if (self.adView && self.isSelfStockGroup) {\n                maxY = maxY + self.adManager.adHeight;\n            }\n            if (self.frame.origin.y + height < 0.0 - TOP_DIFF && self.frame.origin.y + height >= maxY) {\n                [self setFrame:CGRectMake(self.frame.origin.x, self.frame.origin.y + height, self.frame.size.width, self.frame.size.height) animated:YES];\n   ","relevantFile":"","relevantFileList":[],"filePath":"ZiXuanMarkeyInfo.mm","template":"objective-cpp","multiRes":{"hipilot":"[super willAppear];\n    [AMMiddlePublicProxy registerComponentRealTimeWithId:[self getInstanceId]];\n    [self","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"[super willAppear];\n    self.isAppear = YES;\n    [self updateAdViewWithAdInfo:[self.adManager getLastAdInfo]];\n    [self.adManager requestNewAdIfNeed];\n    [self.adManager"}},{"prefix":"                    return;\n                }\n                \n                if (strongSelf.isComplete) {\n                    return ;\n                }\n                \n                //防止过快刷新请求\n                strongSelf.isComplete = YES;\n                typeof(self) __weak weakSelf2 = strongSelf;\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)([QHTDisplayLink shareInstance].onceTime / 1000.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    typeof(weakSelf2) __strong strongSelf2 = weakSelf2;\n                    strongSelf2.isComplete = NO;\n                    [strongSelf2 setData:strongSelf2.tempWuDangData];\n                });\n            }];\n        } else {\n            [self.fenShiFetcher pause];\n            self.fenShiFetcher.request = request;\n        }\n        [self.fenShiFetcher start];\n    }\n}\n\n- (void)requestWithStockCode:(NSString *)stockCode\n                    marketId:(NSString *)marketId\n                successBlock:(void (^)(void))successBlock\n                 failedBlock:(void (^)(void))failedBlock {\n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    [self getWuDangDataWithStockCode:stockCode marketCode:marketId];\n}\n\n- (void)getAllBuySellDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VERTICAL_DETAIL_FRAMEID;\n        }\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n                               stockcode,\n                               marketCode];\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID paramsDict:requestDic pageId:(int)self.nPageID];\n        if (!_allBuySellFetcher) {\n            WEAKSELF;\n            self.allBuySellFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                weakSelf.allBuySellData = data;\n                weakSelf.isRealData = data.isRealData;\n                [weakSelf setAllBuySellData:data];\n                \n            }];\n        } else {\n            [self.allBuySellFetcher pause];\n            self.allBuySellFetcher.request = request;\n        }\n        [self.allBuySellFetcher start];\n    }\n}\n\n- (NSMutableDictionary *)refrishTextColor:(StuffBaseModel *)model {\n    if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        [_sellAry removeAllObjects];   //卖出价格数组\n        [_sellNumberAry removeAllObjects]; //卖出数量数组\n        [_buyAry removeAllObjects];    //买入价格数组\n        [_buyNumberAry removeAllObjects];  //买入数量数组\n        [_sellColorAry removeAllObjects];  //卖出价格颜色数组\n        [_sellNumberColorAry removeAllObjects];    //卖出数量颜色数组\n        [_buyColorAry removeAllObjects];   //买入价格颜色数组\n        [_buyNumberColorAry removeAllObjects]; //买入数量颜色数组\n        [_nowPriceColorArray removeAllObjects];\n        \n        // 是否需要基准价\n        BOOL isNeedStandard = ([[LJHQStandardPriceSetManager shareInstance] isSupportStandardPriceWithMarket:[NSString stringWithFormat:@\"%@\", self.lastMarketId]] && [[LJHQStandardPriceSetManager shareInstance] currentStandardPriceTypeIsCustom]);\n        NSString *standardPrice = [[LJHQStandardPriceSetManager shareInstance] getStandardPriceWithStockCode:self.lastStockCode];\n        NSMutableArray *buyTmpArr = [NSMutableArray array];\n        NSMutableArray *sellTmpArr = [NSMutableArray array];\n        \n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStrsell1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE1]];\n            NSArray *pStrsellNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT1]];\n            NSArray *pStrsell2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE2]];\n            NSArray *pStrsellNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT2]];\n            NSArray *pStrsell3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE3]];\n            NSArray *pStrsellNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT3]];\n            NSArray *pStrsell4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE4]];\n            NSArray *pStrsellNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT4]];\n            NSArray *pStrsell5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE5]];\n            NSArray *pStrsellNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT5]];\n            NSArray *pStrbuy1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE1]];\n            NSArray *pStrbuyNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT1]];\n            NSArray *pStrbuy2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE2]];\n            NSArray *pStrbuyNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT2]];\n            NSArray *pStrbuy3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE3]];\n            NSArray *pStrbuyNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT3]];\n            NSArray *pStrbuy4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE4]];\n            NSArray *pStrbuyNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT4]];\n            NSArray *pStrbuy5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE5]];\n            NSArray *pStrbuyNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT5]];\n            \n            NSArray *pStrsellNum6 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_NEWPRICE]];\n            if (pStrsellNum6) {\n                self.lastPrice = pStrsellNum6[0];\n            }else {\n                self.lastPrice = kSpaceStr;\n            }\n            \n            if (pStrbuy1) {\n                self.buyPrice =pStrbuy1[0];\n            }else {\n                self.buyPrice = kSpaceStr;\n            }\n            \n            if (pStrsell1) {\n                self.sellPrice = pStrsell1[0];\n            }else {\n                self.sellPrice = kSpaceStr;\n            }\n            \n            [self setTextData:pStrsell1 addToArray:_sellAry];\n            [self setTextData:pStrsell2 addToArray:_sellAry];\n            [self setTextData:pStrsell3 addToArray:_sellAry];\n            [self setTextData:pStrsell4 addToArray:_sellAry];\n            [self setTextData:pStrsell5 addToArray:_sellAry];\n            [self setTextData:pStrsellNum1 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum2 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum3 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum4 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum5 addToArray:_sellNumberAry];\n            [self setTextData:pStrbuy1 addToArray:_buyAry];\n            [self setTextData:pStrbuy2 addToArray:_buyAry];\n            [self setTextData:pStrbuy3 addToArray:_buyAry];\n            [self setTextData:pStrbuy4 addToArray","infill":"del modelType] == StuffModelTypeText)) {\n        StuffTextModel *textModel = (StuffTextModel *)model;\n        self.contentString = textModel.text;\n        [self doneBusiness:DOBUSINESS_FAILED];\n    } else if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        \n        if (tableModel.extStringDict != nil) {\n            NSString *str = [tableModel.extStringDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_CODECODE]];\n            if(str) {\n                self.contentString = str;\n                self.stockCode = str;\n            }\n        }\n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStravgBuyPrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_AVGBUYPRICE]];\n            NSArray *pStravgSellPrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_AVGSELLPRICE]];\n            NSArray *pStrAllBuyCount = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ALLB","suffix":"UYCOUNT]];\n            NSArray *pStrAllSellCount = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ALLSELLCOUNT]];\n            self.allBuyHands = [pStrAllBuyCount thsStringAtIndex:0] ? : kSpaceStr;\n            self.allSellHands = [pStrAllSellCount thsStringAtIndex:0] ? : kSpaceStr;\n            self.avgBuyPrice = [pStravgBuyPrice thsStringAtIndex:0] ? : kSpaceStr;\n            self.avgSellPrice = [pStravgSellPrice thsStringAtIndex:0] ? : kSpaceStr;\n        }\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    }\n}\n\n// 设置数组数据\n- (void)setTextData:(NSArray *)pStrStockArray addToArray:(NSMutableArray *)array\n{\n    if (pStrStockArray && pStrStockArray.count >= 1)\n    {\n        NSString *sstr = [pStrStockArray firstObject];\n        if (!sstr) {\n            sstr = [NSString stringWithFormat:kSpaceStr];\n        }\n        [array addObject:sstr];\n    }\n}\n\n// 设置颜色数据\n- (void)setColorData:(NSArray *)pStockColor addToColorArray:(NSMutableArray *)colorArray\n{\n    if (pStockColor && pStockColor.count >= 1)\n    {\n        int colorValue = [[pStockColor firstObject] intValue];\n        [colorArray addObject:[Tools getLocalCorrespondColorWithServerStuffModelIntColor:colorValue]];\n    }\n}\n\n#pragma mark - 将服务端返回的数据转换成Objective_C数组\n//注销接口，不再接收数据返回\n- (void)unRegisterObjectKey {\n    self.successBlock = nil;\n    self.failedBlock = nil;\n    if (_fenShiFetcher) {\n        [self.fenShiFetcher pause];\n    }\n    \n    if (_xiaDanFetcher) {\n        [self.xiaDanFetcher pause];\n    }\n    \n    if (_allBuySellFetcher) {\n        [self.allBuySellFetcher pause];\n    }\n}\n\n- (NSMutableDictionary *)getWuDangDataToView {\n    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n    [dic thsSetObject:_sellAry forKey:@\"SellKey\"];\n    [dic thsSetObject:_sellNumberAry forKey:@\"SellNumberKey\"];\n    [dic thsSetObject:_buyAry forKey:@\"BuyKey\"];\n    [dic thsSetObject:_buyNumberAry forKey:@\"BuyNumberKey\"];\n    [dic thsSetObject:_sellColorAry forKey:@\"SellColorKey\"];\n    [dic thsSetObject:_sellNumberColorAry forKey:@\"SellNumberColorKey\"];\n    [dic thsSetObject:_buyColorAry forKey:@\"BuyColorKey\"];\n    [dic thsSetObject:_buyNumberColorAry forKey:@\"BuyNumberColorKey\"];\n    \n    return dic;\n}\n\n- (NSMutableDictionary *)getAllBuySellDataToView {\n    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n    [dic thsSetObject:_allBuyHands forKey:@\"allBuyHands\"];\n    [dic thsSetObject:_allSellHands forKey:@\"allSellHands\"];\n    [dic thsSetObject:_avgBuyPrice forKey:@\"avgBuyPrice\"];\n    [dic thsSetObject:_avgSellPrice forKey:@\"avgSellPrice\"];\n    return dic;\n}\n\n- (HXFiveRangeMarket *)convertTofiveRangeMarket {\n    UIColor *nowPriceColor = self.nowPriceColorArray.firstObject ?: HXUIColor.CharacterTwoAppColor;\n    return [[HXFiveRangeMarket alloc] initWithIsPushData:self.isRealData\n                                               stockCode:self.lastStockCode\n                                                buyPrice:self.buyPrice\n                                               sellPrice:self.sellPrice\n                                               lastPrice:self.lastPrice\n                                           nowPriceColor:nowPriceColor\n                                            limitUpPrice:self.limitUpPrice\n                                          limitDownPrice:self.limitDownPrice\n                                     yesterdayClosePrice:self.yesterdayClosePrice\n                                           fiveRangeDict:self.getWuDangDataToView];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"_buyAry];\n            [self setTextData:pStrbuy5 addToArray:_buyAry];\n            \n            [self setTextData:pStrbuyNum1 addToArray:_buyNumberAry];","deepseek-chat-lite":":_buyAry];","CodeQwen2.5-7B":":_buyAry];","copilot":"del modelType] == StuffModelTypeText)) {\n        StuffTextModel *textModel = (StuffTextModel *)model;\n        self.contentString = textModel.text;\n        [self doneBusiness:DOBUSINESS_FAILED];\n    } else if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        \n        if (tableModel.extStringDict != nil) {\n            NSString *str = [tableModel.extStringDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_CODECODE]];\n            if(str) {\n                self.contentString = str;\n                self.stockCode = str;\n            }\n        }\n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStravgBuyPrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_AVGBUYPRICE]];\n            NSArray *pStravgSellPrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_AVGSELLPRICE]];\n            NSArray *pStrAllBuyCount = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ALLB"}},{"prefix":"\n#import \"LJCommunicateRegister.h\"\n#import \"LJCommunicateResolveRegister.h\"\n#import <LJCommunication/AMCommunicationManager.h>\n#import <EQConfigModul/EQResourceHelper.h>\n#import <LJCommunication/EQCommunicationManager.h>\n\n#import \"HXEnvConfigManager.h\"\n#import \"EQReceiveDataProcess.h\"\n#import \"EQDataTypeDef.h\"\n#import \"HXEnvManager.h\"\n#import \"HXUIFrmPool.h\"\n\n#pragma mark - sid\n#import \"HXAddValueCheckTool.h\"\n#import \"HXLevel2PowerManager.h\"\n\n#pragma mark - UserBehavior\n#import \"Tools.h\"\n#import <EQFoundation/EQString.h>\n#import \"ActionManager.h\"\n\n#pragma mark - 委托日志\n#import \"HXNewLogManager.h\"\n#import \"HXNewLogMacro.h\"\n#import \"HXNewNetLogger.h\"\n\n#pragma mark - 新版协议\n#import \"FUCommonSwitchModel.h\"\n\n#pragma mark - mepool\n#import \"MePool.h\"\n\n#pragma mark - 打印请求日志\n#import \"BuryPointWindow.h\"\n#import \"LJRepeatRequestManager.h\"\n\n#pragma mark - 风控信息\n#import \"HXRiskControlManager+Tool.h\"\n\n#pragma mark - openHQSessionReply\n#import \"WTYYBInfoApiManager.h\"\n#import <LJNewUserLoginManager/LJNewUserLoginManager.h>\n#import <LJSelfStockManager/LJSelfStockManager.h>\n#import \"LJOptionListManager.h\"\n#import \"HXMiniDataHead.h\"\n#import \"HXLoginReplyContext.h\"\n#import \"LJHQCustomSettingManage.h\"\n#import \"LJCommonFunctionManager.h\"\n#import \"HXTradeLoginManager.h\"\n#import \"JiaoYiLoginPool.h\"\n#import \"FingerPrintManager.h\"\n#import \"AMCollectUserBehavior.h\"\n#import <HXDeviceInfo/HXNetworkInfo.h>\n#import \"HXCookieActivity.h\"\n#import \"HXUIFrmPool.h\"\n#import \"LJCommunicateResolveRegister.h\"\n#import \"NSString+AM.h\"\n#import <LJViewTrace/LJViewControllerProtocol.h>\n#import \"LJCustomizedUITools.h\"\n#import \"JumpTool.h\"\n#import <LJLoginModule/LJLoginViewController.h>\n#import <LJCategoryKit/UIViewController+LJAdd.h>\n#import \"HXTradeLoginNoti.h\"\n#import \"LJSelfStockGroupManager.h\"\n#import \"HXViewController+Protocols.h\"\n#import \"HXSwiftHeader.h\"\n#import <LJTradeFunctionManager/HXTradeFunctionManager.h>\n#import <LJDateTool/NSDateFormatter+LJDate.h>\n#import \"GetUserSessionID.h\"\n\n@import LogManager;\n@import GrayScaleManager;\n\n#define FRAME_ID_QUOTA_BEGIN    2201\n#define FRAME_ID_QUOTA_END      2599\n\nextern CEQNodeManager* EQGetNodeManager();\nextern NSString* EQGetUdid();\nextern NSString* CopyEQStringToNsString(CEQString16* pEQsrc);\n\nEQINT CActionManager::m_nSend_All_Flow = 0;\n\nextern NSString * const LJHQPageId;\nextern NSString * const LJHQClassName;\n\nstatic NSString * const kELKLogErrorMsg = @\"errorMsg\";\nstatic NSString * const kUserId = @\"userId\";\nstatic NSString * const kAppVersion = @\"appVersion\";\nstatic NSString * const kAppGroupName = @\"group.cn.com.10jqka.thsqht\";\nstatic NSString * const kLJHQLandscapeDetailController = @\"LJHQLandscapeDetailController\";\n\n@implementation LJCommunicateRegister\n\nstatic LJCommunicateRegister *_singleInstance = nil;\n+ (instancetype)sharedInstance {\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        if (_singleInstance == nil) {\n            _singleInstance = [[self alloc] init];\n        }\n    });\n    return _singleInstance;\n}\n\n- (void)registerCommunication {\n    [[LJCommunicateResolveRegister sharedInstance] registerResolve];\n\n    [AMCommunicationManager shareInstance].protocol = self;\n\n    [[AMCommunicationManager shareInstance] registerAppInternalVersion:STR_AppletVersion_default udid:EQGetUdid()];\n    \n    [AMCommunicationManager shareInstance].getUseNewProtocol = ^BOOL{\n        return [FUCommonSwitchModel sharedFUCommonSwitchModel].useNewProtocol;\n    };\n    [AMCommunicationManager shareInstance].getDowngradeGary = ^BOOL{\n        return [[LJGrayScaleOCManager shared] isEnableForFeatureKey:HQDowngradeGrayKey isDefaultEnable:YES];\n    };\n    [AMCommunicationManager shareInstance].getSessionId = ^NSString * _Nonnull{\n        return [MePool sharedMePool].sessionID;\n    };\n    [AMCommunicationManager shareInstance].getUserSessionId = ^NSString * _Nullable{\n        NSDictionary *sessionDic = [GetUserSessionID getUserSessionIDWithUserId:[LJUserInfo getUserId]];\n        BOOL isValid = [[sessionDic thsObjectForKey:Valid_Key] isEqualToString:Valid_Value];\n        NSString *sessionId;\n        if (isValid) {\n            sessionId = [sessionDic thsObjectForKey:Sessionid_Key];\n        } else {\n            GetUserSessionID *getSessionId = [[GetUserSessionID alloc] initWithUserid:[LJUserInfo getUserId]];\n            [getSessionId getUserSessionWithUserId:[LJUserInfo getUserId]];\n            LogQuotes(kSessionId, @\"-1\", L2, -1, @\"请求用户信息时获取到的sessionid失效\");\n        }\n#if (defined ADHOC) || (defined DEBUG)\n        [[UIApplication sharedApplication].keyWindow makeToast:[NSString stringWithFormat:@\"sessionid为：%@\", sessionId] duration:HXToastTimeDurationShort position:CSToastPositionBottom];\n#endif\n        return sessionId;\n    };\n    [AMCommunicationManager shareInstance].getStringForRiskControl = ^NSString * _Nullable{\n        if ([HXRiskControlManager isGrayReleaseOn]) {\n            return [HXRiskControlManager paramStringForRiskControlWithTrigger:TriggeByAutoLogin];\n        }\n        return nil;\n    };\n}\n\n#pragma mark - LJCommunicationProtocol\n\n- (void)loadUserSid:(NSString *)sid {\n    [HXLevel2PowerManager shareInstance].userSid = @\"\";\n    [HXAddValueCheckTool shareInstance].userSid = @\"\";\n    NSString *componentStr = @\";\";\n    if ([sid containsString:componentStr]) {\n        NSArray *sidAry = [sid componentsSeparatedByString:componentStr];\n        for (NSString *sidStr in sidAry) {\n            [self parserSid:sidStr];\n        }\n    } else {\n        [self parserSid:sid];\n    }\n    [[HXLevel2PowerManager shareInstance] refreshFenshiPage];\n}\n\n- (void)setUserId:(NSString *)userId {\n    [MePool sharedMePool].userID = userId;\n}\n\n- (void)sendElk:(NSString *)type business:(NSString *)business traceId:(NSString *)traceId logDict:(NSDictionary *)logDict {\n    Log(business, traceId, logDict);\n}\n\n- (void)addUserBehavior:(NSString *)connectIP\n                 domain:(NSString *)domain\n             serverType:(int)serverType\n                  nType:(int)nType {\n    time_t lCurTime;\n    time(&lCurTime); // 取当前时间\n    NSString *addresses = [Tools getAndCreateDNSServersIP];\n    CEQString8 str8;\n    if (serverType == ConnectServer_Domain && domain != nil) {\n        str8.Format(\"%d_%d_%s_%s%s_%ld\", nType, serverType, [connectIP UTF8String], [domain UTF8String], [addresses UTF8String], lCurTime);\n    } else {\n        str8.Format(\"%d_%d_%s_%ld\", nType, serverType, [connectIP UTF8String], lCurTime);\n    }\n    CEQString16 str16;\n    str8.GetString16(str16);\n    NSString *strLog = CopyEQStringToNsString(&str16);\n    [AMCollectUserBehavior collectUserBehavior:strLog behaviorType:ACTION_DNS_SERVER_IP];\n}\n\n- (void)sendBuffer:(CEQSmartBuffer *)buffer {\n    //wifi 下不统计流量\n    if (NO == [[HXNetworkInfo getNetType] isEqualToString:@\"WiFi\"]) {\n        EQINT nSendAppFlow = CActionManager::m_nSend_All_Flow;\n        CActionManager::m_nSend_All_Flow = nSendAppFlow + buffer->GetBufferLen();\n    }\n}\n\n- (void)sendRequest:(EQRequestCell *)requestCell head:(AMMini_DataHead)head {\n    if (head.m_nType == REQUEST_SEND_WTSERVER_RECORD) {\n        [[[HXNewLogManager shareInstance] getNetLogger:NetLogger] markThePidForLogInfo:head.m_lId];\n    }\n}\n\n- (void)setToAppError:(int)errorCode {\n    //设置应用错误提示\n    switch (errorCode) {\n        case 0://连接下个服务器\n        {\n            NSString *str = @\"正在尝试切换服务器\";\n            [[UIApplication sharedApplication].keyWindow makeToast:str duration:2.0 position:@\"center\"];\n            break;\n        }\n        case -1://连接所有服务器失败\n        {\n            dispatch_async(dispatch_get_main_queue(), ^{\n                [[NSNotificationCenter defaultCenter] postNotificationName:NETWORK_TYPE object:nil userInfo:@{NETWORK_TYPE:[NSNumber numberWithShort:Netw","infill":"return;\n    }\n ","suffix":"   \n    \n    \n    \n    // 交易自动登录（RPC 通道 SDK 内部会自动重新登录）\n//    if (![LJUserInfo isUserAccountRegistered]) {\n//        return;\n//    }\n//    NSString *qsId = [MePool sharedMePool].transactionQsid;\n//    if (![HXTradeLoginManager haveCurrentAccount] || qsId.length <= 0) {\n//        return;\n//    }\n//    JiaoYiLoginPool *loginPool = [JiaoYiLoginPool sharedJiaoYiLoginPool];\n//    if ([loginPool existBoundAndLoginedAccount]) {\n//        FingerPrintManager *finger = [[FingerPrintManager alloc] init];\n//        TouchIDState state = [finger canAuthenticationFingerPrint];\n//        if (state != TouchIDAvaiable || [finger isChangedAuthentication]) {\n//            [[NSNotificationCenter defaultCenter] postNotificationName:HXTradeLogoutAllAccountNoti object:nil];\n//            [loginPool removeLoginedFirmAccount];\n//        } else {\n//            HXLogAndTest(@\"[SDK_JNI_LOG][app][auto] 行情连接成功，RPC 自动登录\");\n//            [HXTradeLoginManager loginCurrentAccountWithIndicator:NO];\n//        }\n//    } else {\n//        HXLogAndTest(@\"[SDK_JNI_LOG][app][auto] 行情连接成功，RPC 自动登录\");\n//        [HXTradeLoginManager loginCurrentAccountWithIndicator:NO];\n//    }\n}\n\n- (void)hqSessionReplyForThsLogin:(AMMini_DataHead &)dataHead loginAlertTip:(NSString *)loginAlertTip {\n    //登录成功进行页面跳转\n    if (EQLOCAL_NODE_ID_FRAME_SELFSTOCK == dataHead.m_lFrameId) {\n        if ([LJUserInfo isUserAccountRegistered]) {\n            //登录成功后保存账号信息\n            NSString *userId = [LJUserInfo getUserId];\n            if (userId && userId.length) {\n                UserItemInfo *userItemInfo = [[UserItemInfo alloc] init];\n                userItemInfo.loginDate = [NSDate date];\n                [AMCommunicationManager getPassportInfoFromPassportData:userItemInfo];\n                [[MePool sharedMePool] saveAccountUserInfo:userItemInfo];\n            }\n\n            [[NSNotificationCenter defaultCenter] postNotificationName:THS_LOGIN_SUCCESS object:nil];\n            [AMCommunicationManager shareInstance].hasNotifiedTHSLoginSuccess = YES;\n            \n            NSString *isLoginView = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_TONGHUASHUN_LOGIN];\n            if ([isLoginView isEqualToString:@\"1\"]) {\n                [[NSNotificationCenter defaultCenter] postNotificationName:THS_LOGINVIEW_SUCCESS object:nil];\n                [[UserDefaultsPool sharedUserDefaultsPool] setObject:@\"0\" forKey:KEY_IS_TONGHUASHUN_LOGIN];\n            } else {\n                [[NSNotificationCenter defaultCenter] postNotificationName:LJTongHuaShunAutomaticLoginSuccess object:nil];\n            }\n            [[UserDefaultsPool sharedUserDefaultsPool] removeObjectForKey:KEY_IS_TONGHUASHUN_LOGIN];\n        } else {\n            [[NSNotificationCenter defaultCenter] postNotificationName:THS_LOGIN_SUCCESS object:nil];\n            [AMCommunicationManager shareInstance].hasNotifiedTHSLoginSuccess = YES;\n        }\n        \n        //将登录的账户的udid以及内部版本号存放在group里\n        NSUserDefaults *sharedUserDefault = [[NSUserDefaults alloc] initWithSuiteName:kAppGroupName];\n        NSString *userId = [LJUserInfo getUserId];\n        if (userId && userId.length) {\n            [sharedUserDefault setObject:userId forKey:kUserId];\n        } else {\n            [sharedUserDefault setObject:nil forKey:kUserId];\n        }\n        \n        NSString *appVersion = STR_AppletVersion_default;\n        [sharedUserDefault setObject:appVersion forKey:kAppVersion];\n        [sharedUserDefault synchronize];\n        \n    } else {\n        //同花顺没有登录(或登录失败)时执行的分支\n        NSString *userId = [LJUserInfo getUserId];\n        if (userId && userId.length) {\n            UserItemInfo *userItemInfo = [[UserItemInfo alloc] init];\n            userItemInfo.loginDate = [NSDate date];\n            //本地存储临时用户的userId和userAccount\n            [[UserDefaultsPool sharedUserDefaultsPool] setObject:userId forKey:KEY_UNLOGIN_USERID];\n            [[UserDefaultsPool sharedUserDefaultsPool] setObject:userItemInfo.userAccount forKey:KEY_UNLOGIN_USERACCOUNT];\n        }\n\n        NSString *isLoginView = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_TONGHUASHUN_LOGIN];\n        if ([isLoginView isEqualToString:@\"1\"]) {\n            HXLoginReplyContext *context = [[HXLoginReplyContext alloc] init];\n            HXMiniDataHead *miniDataHead = [[HXMiniDataHead alloc] init];\n            miniDataHead.m_nHeadLength = dataHead.m_nHeadLength;\n            miniDataHead.m_lId = dataHead.m_lId;\n            miniDataHead.m_nType = dataHead.m_nType;\n            miniDataHead.m_sPageId = dataHead.m_sPageId;\n            miniDataHead.m_lDataLength = dataHead.m_lDataLength;\n            miniDataHead.m_lFrameId = dataHead.m_lFrameId;\n            miniDataHead.m_lTextLength = dataHead.m_lTextLength;\n            miniDataHead.m_wLastAnsweredFrameId = dataHead.m_wLastAnsweredFrameId;\n            miniDataHead.m_wLastAnsweredTime = dataHead.m_wLastAnsweredTime;\n            context.dataHead = miniDataHead;\n            context.loginAlertTip = loginAlertTip;\n            [[NSNotificationCenter defaultCenter] postNotificationName:THS_LOGIN_FAIL object:context];\n            [[UserDefaultsPool sharedUserDefaultsPool] setObject:@\"0\" forKey:KEY_IS_TONGHUASHUN_LOGIN];\n        } else {\n            [[NSNotificationCenter defaultCenter] postNotificationName:LOGIN_FAIL_REVISE_PASSWORD object:nil];\n        }\n        [[UserDefaultsPool sharedUserDefaultsPool] removeObjectForKey:KEY_IS_TONGHUASHUN_LOGIN];\n    }\n}\n\n- (void)showTipDealLoginFail:(CEQString16&)str {\n    NSString *nsstr = CopyEQStringToNsString(&str);\n    if (!IsNSStringNotEmpty(nsstr)) {\n        return;\n    }\n    [LJCustomizedUITools dismissAlertController];\n    [LJCustomizedUITools alertControllerWithTitle:@\"提示\" message:nsstr cancelTitle:@\"\" OKTitle:@\"我知道了\" cancelHandler:nil OKHandler:^(UIAlertAction *action) {\n        if ([nsstr containsString:@\"密码错误\"]) {\n            [[NSNotificationCenter defaultCenter] postNotificationName:LOGIN_FAIL_REVISE_PASSWORD object:nil];\n            UIViewController *curViewController = [UIViewController getCurNavUIViewController];\n            MainTabbarController *tabBarController = (MainTabbarController *)curViewController.tabBarController;\n\n            if ([HXTradeFunctionManager isTradeEnable]) {\n                if (tabBarController.selectedIndex == [tabBarController tradeTabIndex]) {\n                    [curViewController.navigationController popToRootViewControllerAnimated:NO];\n                } else if (![curViewController isKindOfClass:[LJLoginViewController class]] && ![curViewController isKindOfClass:NSClassFromString(kLJHQLandscapeDetailController)] && ![tabBarController isSelectInformationTab]) {\n                    [curViewController.navigationController popToRootViewControllerAnimated:NO];\n                    \n                    [self jumpToTHSLogin];\n                }\n            } else {\n                if (![curViewController isKindOfClass:[LJLoginViewController class]] && ![curViewController isKindOfClass:NSClassFromString(kLJHQLandscapeDetailController)] && tabBarController.selectedIndex != [tabBarController tradeTabIndex]) {\n                    [curViewController.navigationController popToRootViewControllerAnimated:NO];\n                    \n                    [self jumpToTHSLogin];\n                }\n            }\n        }\n    } target:nil];\n}\n\n- (void)jumpToTHSLogin {\n    UIViewController *loginViewController = [[CTMediator sharedInstance] THSLogin_thsLogin:LJPopLoginVCTypeDefault formTag:1];\n    [[HXUIFrmPool getCurNavUIViewController].navigationController pushViewController:loginViewController animated:YES];\n}\n\n@end\n\n@implementation AMCommunicationManager (LJRegister)\n\n- (BOOL)hasNotifiedTHSLoginSuccess {\n    return objc_getAssociatedObject(self, @selector(hasNotifiedTHSLoginSuccess));\n}\n\n- (void)setHasNotifiedTHSLoginSuccess:(BOOL)hasNotifiedTHSLoginSuccess {\n    objc_setAssociatedObject(self, @selector(hasNotifiedTHSLoginSuccess), [NSNumber numberWithBool:hasNotifiedTHSLoginSuccess], OBJC_ASSOCIATION_ASSIGN);\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJCommunicateRegister.mm","template":"objective-cpp","multiRes":{"hipilot":"orkType_ServerFail","deepseek-chat-lite":"orkType_Error]}];","CodeQwen2.5-7B":"orkType_Wifi}];","copilot":"return;\n    }\n "}},{"prefix":"    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    BOOL isQuickCounterCondition = [WTQuickCounterServiceChannelManager isQuickCounterCondition];\n    if (isQuickCounterCondition) {\n        //快速柜台根据灰度\n        return [[HXGrayRelease shared] switchForKey:GrayReleaseQuickBatchCreateCO broker:currentAccount.yybId];\n    }\n    //自营默认支持\n    return YES;\n}\n\n+ (BOOL) isSupportBatchCreateConditionalOrder:(HXConditionalOrderType)coType {\n    // 不支持两融条件单\n    if ([self isRZRQConditionalOrder]) {\n        return NO;\n    }\n    // 概率发布判断\n    if (![self isBatchCreateConditionalOrderGrayReleaseOpen]) {\n        return NO;\n    }\n    if (coType == HXConditionalOrderTypeSJ || coType == HXConditionalOrderTypeRZDF || coType == HXConditionalOrderTypeMACD || coType == HXConditionalOrderTypeZTMR) {\n        return YES;\n    }\n    return NO;\n}","infill":"700006  查条件单\n    // ","suffix":" 700007  查监控\n    // \n    NSDictionary *params = @{@\"funcid\" : @\"700006\",\n                             @\"brokerid\" : brokerid,\n                             @\"userid\" : @(userid),\n                             @\"clientid\" : clientid,\n                             @\"flag\" : @(1),\n                             @\"extend2\" : extend2,\n                             @\"source\" : source,\n                             };\n    WeakObj(beforeRequestAccount);\n    WeakObj(self);\n    [self requestConditionalOrderDataWithPageId:PAGE_WT_TRADEFIRST_ASHARE params:params resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        WTAccountInfor *afterRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        //检测账号如果存在变动直接return\n        if ([WTAlertBindAccountTool checkAccountChangedWithBeforeRequestAccount:beforeRequestAccountWeak afterRequestAccount:afterRequestAccount alterType:WTAlertViewTypeTJDGuoZhaiSuspend]) {\n            return;\n        }\n\n#ifdef _DEBUG\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:AlertBindDebug_TJDGuoZhaiSuspend]){\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:nil accountInfo:afterRequestAccount];\n            return;\n        });\n    }\n#endif\n\n        if (responseModel.error) { //请求出现问题\n            return;\n        }\n        HXChaxunResponseResultCODataModel *result = [HXChaxunResponseResultCODataModel createInstanceWithDic:responseModel.result width:0];\n        if (!result.condition || result.condition.count <= 0) {//无数据\n            return;\n        }\n\n        for (HXChaXunBillDetailDataCOModel *chaxunModel in result.condition) {\n            if (chaxunModel.entrusttype == HXCOEntrustTypeGZ) {\n                [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:chaxunModel accountInfo:afterRequestAccount];\n            }\n        }\n    }];\n}\n\n+ (void)showGotoGuoZhaiSuspendMonitoringAlertWithModel:(HXChaXunBillDetailDataCOModel *)model accountInfo:(WTAccountInfor *)accountInfo{\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian\")  actionType:ClickAction];\n    HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:@\"条件单提醒\" message:@\"您当日有中签，建议暂停当日的逆回购条件单以保留可用资金\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:@\"去暂停\", nil];\n    alertView.clickHandler = ^(HXCustomAlertView * _Nonnull alertView, NSInteger buttonIndex) {\n        if (buttonIndex == 0) {\n            // 取消\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.cancel\")  actionType:ClickAction];\n        }else {\n            // 去暂停\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.pause\")  actionType:ClickAction];\n            [AMUIPublicProxy gotoPageWithId:PAGE_CONDITIONALORDER_MONITORING_DE params:@{@\"dataSource\" : model}];\n        }\n    };\n    [alertView setButtonInfoWithIndex:0 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n    }];\n    [alertView setButtonInfoWithIndex:1 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n        buttonBuilder.boldButton = YES;\n    }];\n\n    //绑定唯一标识\n    alertView.uniqueIdentifier = [WTAlertBindAccountTool getAlertUniqueIdentifierWithAccount:accountInfo alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    WeakObj(alertView);\n    alertView.judgeEffectiveBlock = ^BOOL{\n        //校验弹框是否属于当前账号\n        return [WTAlertBindAccountTool checkAlterBelondToCurrentAccountWithUniqueIdentifier:alertViewWeak.uniqueIdentifier alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    };\n\n    [alertView show];\n\n#ifdef _DEBUG\n    [WTAlertBindDebug delayChangeAccount];\n#endif\n\n}\n\n//创建、修改、删除、暂停条件单时重新请求过期条件单信息\n+ (void)updateExpiredConditionalOrderInfoAfterResponse:(NSDictionary *)result {\n    if ([self isSupportExpiredConditionalOrder]) {\n        NSArray *funcidArr = @[@\"700001\",@\"700002\",@\"700003\",@\"700004\"];\n        if ([funcidArr containsObject:[result thsStringForKey:@\"funcid\"]]) {\n            [self requestAndUpdateExpiredConditionalOrderInfo];\n        }\n    }\n}\n\n\n/// 判断功能后是否只能发往自营条件单后台\n/// @param funcid 请求功能号\n+ (BOOL)needSendToZiYingWith:(NSString *)funcid{\n    //一些特殊的功能号，只能发往自营条件单后台\n    if ([funcid isEqualToString:@\"700032\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (NSString *)fetchConditaionalHost:(BOOL)isNew {\n    if (isNew) {\n        return @\"ConditionalOrderNew\";\n    }\n    return @\"ConditionalOrder\";\n}\n\n+ (NSString *)fetchMethodWithFuncid:(NSString *)funcid {\n    if ([funcid isEqualToString:@\"700009\"]) {\n        return @\"smsupple\";\n    }\n    return @\"sm2\";\n}\n\n+ (NSString *)fetchUrlParamsWithUrl:(NSString *)url funcid:(NSString *)funcid isNew:(BOOL)isNew {\n    if (isNew) {\n        return [self fetchMethodWithFuncid:funcid];\n    }\n    return url;\n}\n\n/// 透传协议请求参数获取\n/// @param url 请求URL\n+ (NSDictionary *)requestDictForPassthroughProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"Url\" : [self fetchUrlParamsWithUrl:url funcid:funcid isNew:isNew],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:url forKey:@\"PostParam\"];\n    }\n\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //这边固定走 自运营条件单后台，这两个参数在该协议是没有用的。\n        [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n    }\n\n    return [tempDict copy];\n}\n\n+ (NSDictionary *)requestDictForConditionalOrderProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid isQuickCounterCondition:(BOOL)isQuickCounterCondition qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"param\" : [NSString wtSafeString:url],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:[self fetchMethodWithFuncid:funcid] forKey:@\"method\"];\n    }\n\n    //只有灰度开启的情况下，才添加相关参数\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //newprotocol 参数传1，请求使用新协议到快速柜台\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n        if ([self needSendToZiYingWith:funcid]) {\n            //该功能号只能发到自运营后台\n            [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        }else{\n            //其他的根据通道类型决定发到哪里\n            [tempDict safetySetObject:@(isQuickCounterCondition) forKey:@\"quickgw\"];\n        }\n    }\n    return [tempDict copy];\n}\n\n/// 条件单请求日志信息\n+ (void)logWithErrorType:(NSString *)errorType funcid:(NSString *)funcid protocolId:(int)protocolId quickgw:(NSString *)quickgw detailsMsg:(NSString *)detailsMsg{\n    WTAMLogError(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"%@\", detailsMsg);\n\n    //错误日志，同步到cbas\n    NSString *cbasObj = [NSString stringWithFormat:@\"t=tjdReqError^errorType=%@^funcid=%@^protocolId=%d^quickgw=%@\", errorType, funcid, protocolId, quickgw];\n    [AMUIPublicProxy collectUserBehavior:cbasObj type:ACTION_INCORRECT_BEHAVIOR_LOG];\n}\n@end\n","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"+ (void)requestAndUpdateExpiredConditionalOrderInfo {\n    WTAccountInfor *beforeRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    NSInteger userid = beforeRequestAccount.userId;","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"700006  查条件单\n    // "}},{"prefix":"        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    BOOL isQuickCounterCondition = [WTQuickCounterServiceChannelManager isQuickCounterCondition];\n    if (isQuickCounterCondition) {\n        //快速柜台根据灰度\n        return [[HXGrayRelease shared] switchForKey:GrayReleaseQuickBatchCreateCO broker:currentAccount.yybId];\n    }\n    //自营默认支持\n    return YES;\n}\n\n+ (BOOL) isSupportBatchCreateConditionalOrder:(HXConditionalOrderType)coType {\n    // 不支持两融条件单\n    if ([self isRZRQConditionalOrder]) {\n        return NO;\n    }\n    // 概率发布判断\n    if (![self isBatchCreateConditionalOrderGrayReleaseOpen]) {\n        return NO;\n    }\n    if (coType == HXConditionalOrderTypeSJ || coType == HXConditionalOrderTypeRZDF || coType == HXConditionalOrderTypeMACD || coType == HXConditionalOrderTypeZTMR) {\n        return YES;\n    }\n    return NO;\n}\n\n- (BOOL)isSeletedStock {\n    return [self getStockModelArr].count > 0;\n}\n\n- (BOOL)isSeletedMultiStock {\n    return ","infill":": 700006 \n    NSDic","suffix":"tionary *params = @{@\"funcid\" : @\"700006\",\n                             @\"brokerid\" : brokerid,\n                             @\"userid\" : @(userid),\n                             @\"clientid\" : clientid,\n                             @\"flag\" : @(1),\n                             @\"extend2\" : extend2,\n                             @\"source\" : source,\n                             };\n    WeakObj(beforeRequestAccount);\n    WeakObj(self);\n    [self requestConditionalOrderDataWithPageId:PAGE_WT_TRADEFIRST_ASHARE params:params resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        WTAccountInfor *afterRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        //检测账号如果存在变动直接return\n        if ([WTAlertBindAccountTool checkAccountChangedWithBeforeRequestAccount:beforeRequestAccountWeak afterRequestAccount:afterRequestAccount alterType:WTAlertViewTypeTJDGuoZhaiSuspend]) {\n            return;\n        }\n\n#ifdef _DEBUG\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:AlertBindDebug_TJDGuoZhaiSuspend]){\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:nil accountInfo:afterRequestAccount];\n            return;\n        });\n    }\n#endif\n\n        if (responseModel.error) { //请求出现问题\n            return;\n        }\n        HXChaxunResponseResultCODataModel *result = [HXChaxunResponseResultCODataModel createInstanceWithDic:responseModel.result width:0];\n        if (!result.condition || result.condition.count <= 0) {//无数据\n            return;\n        }\n\n        for (HXChaXunBillDetailDataCOModel *chaxunModel in result.condition) {\n            if (chaxunModel.entrusttype == HXCOEntrustTypeGZ) {\n                [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:chaxunModel accountInfo:afterRequestAccount];\n            }\n        }\n    }];\n}\n\n+ (void)showGotoGuoZhaiSuspendMonitoringAlertWithModel:(HXChaXunBillDetailDataCOModel *)model accountInfo:(WTAccountInfor *)accountInfo{\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian\")  actionType:ClickAction];\n    HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:@\"条件单提醒\" message:@\"您当日有中签，建议暂停当日的逆回购条件单以保留可用资金\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:@\"去暂停\", nil];\n    alertView.clickHandler = ^(HXCustomAlertView * _Nonnull alertView, NSInteger buttonIndex) {\n        if (buttonIndex == 0) {\n            // 取消\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.cancel\")  actionType:ClickAction];\n        }else {\n            // 去暂停\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.pause\")  actionType:ClickAction];\n            [AMUIPublicProxy gotoPageWithId:PAGE_CONDITIONALORDER_MONITORING_DE params:@{@\"dataSource\" : model}];\n        }\n    };\n    [alertView setButtonInfoWithIndex:0 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n    }];\n    [alertView setButtonInfoWithIndex:1 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n        buttonBuilder.boldButton = YES;\n    }];\n\n    //绑定唯一标识\n    alertView.uniqueIdentifier = [WTAlertBindAccountTool getAlertUniqueIdentifierWithAccount:accountInfo alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    WeakObj(alertView);\n    alertView.judgeEffectiveBlock = ^BOOL{\n        //校验弹框是否属于当前账号\n        return [WTAlertBindAccountTool checkAlterBelondToCurrentAccountWithUniqueIdentifier:alertViewWeak.uniqueIdentifier alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    };\n\n    [alertView show];\n\n#ifdef _DEBUG\n    [WTAlertBindDebug delayChangeAccount];\n#endif\n\n}\n\n//创建、修改、删除、暂停条件单时重新请求过期条件单信息\n+ (void)updateExpiredConditionalOrderInfoAfterResponse:(NSDictionary *)result {\n    if ([self isSupportExpiredConditionalOrder]) {\n        NSArray *funcidArr = @[@\"700001\",@\"700002\",@\"700003\",@\"700004\"];\n        if ([funcidArr containsObject:[result thsStringForKey:@\"funcid\"]]) {\n            [self requestAndUpdateExpiredConditionalOrderInfo];\n        }\n    }\n}\n\n\n/// 判断功能后是否只能发往自营条件单后台\n/// @param funcid 请求功能号\n+ (BOOL)needSendToZiYingWith:(NSString *)funcid{\n    //一些特殊的功能号，只能发往自营条件单后台\n    if ([funcid isEqualToString:@\"700032\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (NSString *)fetchConditaionalHost:(BOOL)isNew {\n    if (isNew) {\n        return @\"ConditionalOrderNew\";\n    }\n    return @\"ConditionalOrder\";\n}\n\n+ (NSString *)fetchMethodWithFuncid:(NSString *)funcid {\n    if ([funcid isEqualToString:@\"700009\"]) {\n        return @\"smsupple\";\n    }\n    return @\"sm2\";\n}\n\n+ (NSString *)fetchUrlParamsWithUrl:(NSString *)url funcid:(NSString *)funcid isNew:(BOOL)isNew {\n    if (isNew) {\n        return [self fetchMethodWithFuncid:funcid];\n    }\n    return url;\n}\n\n/// 透传协议请求参数获取\n/// @param url 请求URL\n+ (NSDictionary *)requestDictForPassthroughProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"Url\" : [self fetchUrlParamsWithUrl:url funcid:funcid isNew:isNew],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:url forKey:@\"PostParam\"];\n    }\n\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //这边固定走 自运营条件单后台，这两个参数在该协议是没有用的。\n        [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n    }\n\n    return [tempDict copy];\n}\n\n+ (NSDictionary *)requestDictForConditionalOrderProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid isQuickCounterCondition:(BOOL)isQuickCounterCondition qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"param\" : [NSString wtSafeString:url],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:[self fetchMethodWithFuncid:funcid] forKey:@\"method\"];\n    }\n\n    //只有灰度开启的情况下，才添加相关参数\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //newprotocol 参数传1，请求使用新协议到快速柜台\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n        if ([self needSendToZiYingWith:funcid]) {\n            //该功能号只能发到自运营后台\n            [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        }else{\n            //其他的根据通道类型决定发到哪里\n            [tempDict safetySetObject:@(isQuickCounterCondition) forKey:@\"quickgw\"];\n        }\n    }\n    return [tempDict copy];\n}\n\n/// 条件单请求日志信息\n+ (void)logWithErrorType:(NSString *)errorType funcid:(NSString *)funcid protocolId:(int)protocolId quickgw:(NSString *)quickgw detailsMsg:(NSString *)detailsMsg{\n    WTAMLogError(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"%@\", detailsMsg);\n\n    //错误日志，同步到cbas\n    NSString *cbasObj = [NSString stringWithFormat:@\"t=tjdReqError^errorType=%@^funcid=%@^protocolId=%d^quickgw=%@\", errorType, funcid, protocolId, quickgw];\n    [AMUIPublicProxy collectUserBehavior:cbasObj type:ACTION_INCORRECT_BEHAVIOR_LOG];\n}\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"HXConditionalOrderDataManager.mm","template":"objective-cpp","multiRes":{"hipilot":"[self getStockModelArr].count > 1;\n}\n\n+ (void)checkRZRQGuoZhaiSuspendMonitoringWithUserid:(NSInteger)userid brokerid:(NSInteger)brokerid clientid:(NSInteger)clientid extend2:(","deepseek-chat-lite":"[self getStockModelArr].count > 1;","CodeQwen2.5-7B":"[self getStockModelArr].count > 1;","copilot":": 700006 \n    NSDic"}},{"prefix":"        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    BOOL isQuickCounterCondition = [WTQuickCounterServiceChannelManager isQuickCounterCondition];\n    if (isQuickCounterCondition) {\n        //快速柜台根据灰度\n        return [[HXGrayRelease shared] switchForKey:GrayReleaseQuickBatchCreateCO broker:currentAccount.yybId];\n    }\n    //自营默认支持\n    return YES;\n}\n\n+ (BOOL) isSupportBatchCreateConditionalOrder:(HXConditionalOrderType)coType {\n    // 不支持两融条件单\n    if ([self isRZRQConditionalOrder]) {\n        return NO;\n    }\n    // 概率发布判断\n    if (![self isBatchCreateConditionalOrderGrayReleaseOpen]) {\n        return NO;\n    }\n    if (coType == HXConditionalOrderTypeSJ || coType == HXConditionalOrderTypeRZDF || coType == HXConditionalOrderTypeMACD || coType == HXConditionalOrderTypeZTMR) {\n        return YES;\n    }\n    return NO;\n}\n\n- (BOOL)isSeletedStock {\n    return [self getStockModelArr].count > 0;\n}\n\n- (BOOL)isSeletedMultiStock {\n    return ","infill":"onary *params = @{@\"","suffix":"funcid\" : @\"700006\",\n                             @\"brokerid\" : brokerid,\n                             @\"userid\" : @(userid),\n                             @\"clientid\" : clientid,\n                             @\"flag\" : @(1),\n                             @\"extend2\" : extend2,\n                             @\"source\" : source,\n                             };\n    WeakObj(beforeRequestAccount);\n    WeakObj(self);\n    [self requestConditionalOrderDataWithPageId:PAGE_WT_TRADEFIRST_ASHARE params:params resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        WTAccountInfor *afterRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        //检测账号如果存在变动直接return\n        if ([WTAlertBindAccountTool checkAccountChangedWithBeforeRequestAccount:beforeRequestAccountWeak afterRequestAccount:afterRequestAccount alterType:WTAlertViewTypeTJDGuoZhaiSuspend]) {\n            return;\n        }\n\n#ifdef _DEBUG\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:AlertBindDebug_TJDGuoZhaiSuspend]){\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:nil accountInfo:afterRequestAccount];\n            return;\n        });\n    }\n#endif\n\n        if (responseModel.error) { //请求出现问题\n            return;\n        }\n        HXChaxunResponseResultCODataModel *result = [HXChaxunResponseResultCODataModel createInstanceWithDic:responseModel.result width:0];\n        if (!result.condition || result.condition.count <= 0) {//无数据\n            return;\n        }\n\n        for (HXChaXunBillDetailDataCOModel *chaxunModel in result.condition) {\n            if (chaxunModel.entrusttype == HXCOEntrustTypeGZ) {\n                [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:chaxunModel accountInfo:afterRequestAccount];\n            }\n        }\n    }];\n}\n\n+ (void)showGotoGuoZhaiSuspendMonitoringAlertWithModel:(HXChaXunBillDetailDataCOModel *)model accountInfo:(WTAccountInfor *)accountInfo{\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian\")  actionType:ClickAction];\n    HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:@\"条件单提醒\" message:@\"您当日有中签，建议暂停当日的逆回购条件单以保留可用资金\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:@\"去暂停\", nil];\n    alertView.clickHandler = ^(HXCustomAlertView * _Nonnull alertView, NSInteger buttonIndex) {\n        if (buttonIndex == 0) {\n            // 取消\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.cancel\")  actionType:ClickAction];\n        }else {\n            // 去暂停\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.pause\")  actionType:ClickAction];\n            [AMUIPublicProxy gotoPageWithId:PAGE_CONDITIONALORDER_MONITORING_DE params:@{@\"dataSource\" : model}];\n        }\n    };\n    [alertView setButtonInfoWithIndex:0 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n    }];\n    [alertView setButtonInfoWithIndex:1 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n        buttonBuilder.boldButton = YES;\n    }];\n\n    //绑定唯一标识\n    alertView.uniqueIdentifier = [WTAlertBindAccountTool getAlertUniqueIdentifierWithAccount:accountInfo alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    WeakObj(alertView);\n    alertView.judgeEffectiveBlock = ^BOOL{\n        //校验弹框是否属于当前账号\n        return [WTAlertBindAccountTool checkAlterBelondToCurrentAccountWithUniqueIdentifier:alertViewWeak.uniqueIdentifier alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    };\n\n    [alertView show];\n\n#ifdef _DEBUG\n    [WTAlertBindDebug delayChangeAccount];\n#endif\n\n}\n\n//创建、修改、删除、暂停条件单时重新请求过期条件单信息\n+ (void)updateExpiredConditionalOrderInfoAfterResponse:(NSDictionary *)result {\n    if ([self isSupportExpiredConditionalOrder]) {\n        NSArray *funcidArr = @[@\"700001\",@\"700002\",@\"700003\",@\"700004\"];\n        if ([funcidArr containsObject:[result thsStringForKey:@\"funcid\"]]) {\n            [self requestAndUpdateExpiredConditionalOrderInfo];\n        }\n    }\n}\n\n\n/// 判断功能后是否只能发往自营条件单后台\n/// @param funcid 请求功能号\n+ (BOOL)needSendToZiYingWith:(NSString *)funcid{\n    //一些特殊的功能号，只能发往自营条件单后台\n    if ([funcid isEqualToString:@\"700032\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (NSString *)fetchConditaionalHost:(BOOL)isNew {\n    if (isNew) {\n        return @\"ConditionalOrderNew\";\n    }\n    return @\"ConditionalOrder\";\n}\n\n+ (NSString *)fetchMethodWithFuncid:(NSString *)funcid {\n    if ([funcid isEqualToString:@\"700009\"]) {\n        return @\"smsupple\";\n    }\n    return @\"sm2\";\n}\n\n+ (NSString *)fetchUrlParamsWithUrl:(NSString *)url funcid:(NSString *)funcid isNew:(BOOL)isNew {\n    if (isNew) {\n        return [self fetchMethodWithFuncid:funcid];\n    }\n    return url;\n}\n\n/// 透传协议请求参数获取\n/// @param url 请求URL\n+ (NSDictionary *)requestDictForPassthroughProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"Url\" : [self fetchUrlParamsWithUrl:url funcid:funcid isNew:isNew],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:url forKey:@\"PostParam\"];\n    }\n\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //这边固定走 自运营条件单后台，这两个参数在该协议是没有用的。\n        [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n    }\n\n    return [tempDict copy];\n}\n\n+ (NSDictionary *)requestDictForConditionalOrderProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid isQuickCounterCondition:(BOOL)isQuickCounterCondition qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"param\" : [NSString wtSafeString:url],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:[self fetchMethodWithFuncid:funcid] forKey:@\"method\"];\n    }\n\n    //只有灰度开启的情况下，才添加相关参数\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //newprotocol 参数传1，请求使用新协议到快速柜台\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n        if ([self needSendToZiYingWith:funcid]) {\n            //该功能号只能发到自运营后台\n            [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        }else{\n            //其他的根据通道类型决定发到哪里\n            [tempDict safetySetObject:@(isQuickCounterCondition) forKey:@\"quickgw\"];\n        }\n    }\n    return [tempDict copy];\n}\n\n/// 条件单请求日志信息\n+ (void)logWithErrorType:(NSString *)errorType funcid:(NSString *)funcid protocolId:(int)protocolId quickgw:(NSString *)quickgw detailsMsg:(NSString *)detailsMsg{\n    WTAMLogError(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"%@\", detailsMsg);\n\n    //错误日志，同步到cbas\n    NSString *cbasObj = [NSString stringWithFormat:@\"t=tjdReqError^errorType=%@^funcid=%@^protocolId=%d^quickgw=%@\", errorType, funcid, protocolId, quickgw];\n    [AMUIPublicProxy collectUserBehavior:cbasObj type:ACTION_INCORRECT_BEHAVIOR_LOG];\n}\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"HXConditionalOrderDataManager.mm","template":"objective-cpp","multiRes":{"hipilot":"[self getStockModelArr].count > 1;\n}\n\n+ (void)checkTJDGuoZhaiSuspendMonitoringWithUserid:(int64_t)userid brokerid:(int64_t)brokerid clientid:(int64","deepseek-chat-lite":"[self getStockModelArr].count > 1;","CodeQwen2.5-7B":"[self getStockModelArr].count > 1;","copilot":"onary *params = @{@\""}},{"prefix":"    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    BOOL isQuickCounterCondition = [WTQuickCounterServiceChannelManager isQuickCounterCondition];\n    if (isQuickCounterCondition) {\n        //快速柜台根据灰度\n        return [[HXGrayRelease shared] switchForKey:GrayReleaseQuickBatchCreateCO broker:currentAccount.yybId];\n    }\n    //自营默认支持\n    return YES;\n}\n\n+ (BOOL) isSupportBatchCreateConditionalOrder:(HXConditionalOrderType)coType {\n    // 不支持两融条件单\n    if ([self isRZRQConditionalOrder]) {\n        return NO;\n    }\n    // 概率发布判断\n    if (![self isBatchCreateConditionalOrderGrayReleaseOpen]) {\n        return NO;\n    }\n    if (coType == HXConditionalOrderTypeSJ || coType == HXConditionalOrderTypeRZDF || coType == HXConditionalOrderTypeMACD || coType == HXConditionalOrderTypeZTMR) {\n        return YES;\n    }\n    return NO;\n}","infill":" *params = @{@\"funcid","suffix":"\" : @\"700006\",\n                             @\"brokerid\" : brokerid,\n                             @\"userid\" : @(userid),\n                             @\"clientid\" : clientid,\n                             @\"flag\" : @(1),\n                             @\"extend2\" : extend2,\n                             @\"source\" : source,\n                             };\n    WeakObj(beforeRequestAccount);\n    WeakObj(self);\n    [self requestConditionalOrderDataWithPageId:PAGE_WT_TRADEFIRST_ASHARE params:params resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        WTAccountInfor *afterRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        //检测账号如果存在变动直接return\n        if ([WTAlertBindAccountTool checkAccountChangedWithBeforeRequestAccount:beforeRequestAccountWeak afterRequestAccount:afterRequestAccount alterType:WTAlertViewTypeTJDGuoZhaiSuspend]) {\n            return;\n        }\n\n#ifdef _DEBUG\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:AlertBindDebug_TJDGuoZhaiSuspend]){\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:nil accountInfo:afterRequestAccount];\n            return;\n        });\n    }\n#endif\n\n        if (responseModel.error) { //请求出现问题\n            return;\n        }\n        HXChaxunResponseResultCODataModel *result = [HXChaxunResponseResultCODataModel createInstanceWithDic:responseModel.result width:0];\n        if (!result.condition || result.condition.count <= 0) {//无数据\n            return;\n        }\n\n        for (HXChaXunBillDetailDataCOModel *chaxunModel in result.condition) {\n            if (chaxunModel.entrusttype == HXCOEntrustTypeGZ) {\n                [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:chaxunModel accountInfo:afterRequestAccount];\n            }\n        }\n    }];\n}\n\n+ (void)showGotoGuoZhaiSuspendMonitoringAlertWithModel:(HXChaXunBillDetailDataCOModel *)model accountInfo:(WTAccountInfor *)accountInfo{\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian\")  actionType:ClickAction];\n    HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:@\"条件单提醒\" message:@\"您当日有中签，建议暂停当日的逆回购条件单以保留可用资金\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:@\"去暂停\", nil];\n    alertView.clickHandler = ^(HXCustomAlertView * _Nonnull alertView, NSInteger buttonIndex) {\n        if (buttonIndex == 0) {\n            // 取消\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.cancel\")  actionType:ClickAction];\n        }else {\n            // 去暂停\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.pause\")  actionType:ClickAction];\n            [AMUIPublicProxy gotoPageWithId:PAGE_CONDITIONALORDER_MONITORING_DE params:@{@\"dataSource\" : model}];\n        }\n    };\n    [alertView setButtonInfoWithIndex:0 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n    }];\n    [alertView setButtonInfoWithIndex:1 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n        buttonBuilder.boldButton = YES;\n    }];\n\n    //绑定唯一标识\n    alertView.uniqueIdentifier = [WTAlertBindAccountTool getAlertUniqueIdentifierWithAccount:accountInfo alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    WeakObj(alertView);\n    alertView.judgeEffectiveBlock = ^BOOL{\n        //校验弹框是否属于当前账号\n        return [WTAlertBindAccountTool checkAlterBelondToCurrentAccountWithUniqueIdentifier:alertViewWeak.uniqueIdentifier alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    };\n\n    [alertView show];\n\n#ifdef _DEBUG\n    [WTAlertBindDebug delayChangeAccount];\n#endif\n\n}\n\n//创建、修改、删除、暂停条件单时重新请求过期条件单信息\n+ (void)updateExpiredConditionalOrderInfoAfterResponse:(NSDictionary *)result {\n    if ([self isSupportExpiredConditionalOrder]) {\n        NSArray *funcidArr = @[@\"700001\",@\"700002\",@\"700003\",@\"700004\"];\n        if ([funcidArr containsObject:[result thsStringForKey:@\"funcid\"]]) {\n            [self requestAndUpdateExpiredConditionalOrderInfo];\n        }\n    }\n}\n\n\n/// 判断功能后是否只能发往自营条件单后台\n/// @param funcid 请求功能号\n+ (BOOL)needSendToZiYingWith:(NSString *)funcid{\n    //一些特殊的功能号，只能发往自营条件单后台\n    if ([funcid isEqualToString:@\"700032\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (NSString *)fetchConditaionalHost:(BOOL)isNew {\n    if (isNew) {\n        return @\"ConditionalOrderNew\";\n    }\n    return @\"ConditionalOrder\";\n}\n\n+ (NSString *)fetchMethodWithFuncid:(NSString *)funcid {\n    if ([funcid isEqualToString:@\"700009\"]) {\n        return @\"smsupple\";\n    }\n    return @\"sm2\";\n}\n\n+ (NSString *)fetchUrlParamsWithUrl:(NSString *)url funcid:(NSString *)funcid isNew:(BOOL)isNew {\n    if (isNew) {\n        return [self fetchMethodWithFuncid:funcid];\n    }\n    return url;\n}\n\n/// 透传协议请求参数获取\n/// @param url 请求URL\n+ (NSDictionary *)requestDictForPassthroughProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"Url\" : [self fetchUrlParamsWithUrl:url funcid:funcid isNew:isNew],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:url forKey:@\"PostParam\"];\n    }\n\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //这边固定走 自运营条件单后台，这两个参数在该协议是没有用的。\n        [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n    }\n\n    return [tempDict copy];\n}\n\n+ (NSDictionary *)requestDictForConditionalOrderProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid isQuickCounterCondition:(BOOL)isQuickCounterCondition qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"param\" : [NSString wtSafeString:url],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:[self fetchMethodWithFuncid:funcid] forKey:@\"method\"];\n    }\n\n    //只有灰度开启的情况下，才添加相关参数\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //newprotocol 参数传1，请求使用新协议到快速柜台\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n        if ([self needSendToZiYingWith:funcid]) {\n            //该功能号只能发到自运营后台\n            [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        }else{\n            //其他的根据通道类型决定发到哪里\n            [tempDict safetySetObject:@(isQuickCounterCondition) forKey:@\"quickgw\"];\n        }\n    }\n    return [tempDict copy];\n}\n\n/// 条件单请求日志信息\n+ (void)logWithErrorType:(NSString *)errorType funcid:(NSString *)funcid protocolId:(int)protocolId quickgw:(NSString *)quickgw detailsMsg:(NSString *)detailsMsg{\n    WTAMLogError(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"%@\", detailsMsg);\n\n    //错误日志，同步到cbas\n    NSString *cbasObj = [NSString stringWithFormat:@\"t=tjdReqError^errorType=%@^funcid=%@^protocolId=%d^quickgw=%@\", errorType, funcid, protocolId, quickgw];\n    [AMUIPublicProxy collectUserBehavior:cbasObj type:ACTION_INCORRECT_BEHAVIOR_LOG];\n}\n@end\n","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"{","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":" *params = @{@\"funcid"}},{"prefix":"        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    BOOL isQuickCounterCondition = [WTQuickCounterServiceChannelManager isQuickCounterCondition];\n    if (isQuickCounterCondition) {\n        //快速柜台根据灰度\n        return [[HXGrayRelease shared] switchForKey:GrayReleaseQuickBatchCreateCO broker:currentAccount.yybId];\n    }\n    //自营默认支持\n    return YES;\n}\n\n+ (BOOL) isSupportBatchCreateConditionalOrder:(HXConditionalOrderType)coType {\n    // 不支持两融条件单\n    if ([self isRZRQConditionalOrder]) {\n        return NO;\n    }\n    // 概率发布判断\n    if (![self isBatchCreateConditionalOrderGrayReleaseOpen]) {\n        return NO;\n    }\n    if (coType == HXConditionalOrderTypeSJ || coType == HXConditionalOrderTypeRZDF || coType == HXConditionalOrderTypeMACD || coType == HXConditionalOrderTypeZTMR) {\n        return YES;\n    }\n    return NO;\n}\n\n- (BOOL)isSeletedStock {\n    return [self getStockModelArr].count > 0;\n}\n\n- (BOOL)isSeletedMultiStock {\n    return ","infill":"id\" : @\"700006\",\n           ","suffix":"                  @\"brokerid\" : brokerid,\n                             @\"userid\" : @(userid),\n                             @\"clientid\" : clientid,\n                             @\"flag\" : @(1),\n                             @\"extend2\" : extend2,\n                             @\"source\" : source,\n                             };\n    WeakObj(beforeRequestAccount);\n    WeakObj(self);\n    [self requestConditionalOrderDataWithPageId:PAGE_WT_TRADEFIRST_ASHARE params:params resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        WTAccountInfor *afterRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        //检测账号如果存在变动直接return\n        if ([WTAlertBindAccountTool checkAccountChangedWithBeforeRequestAccount:beforeRequestAccountWeak afterRequestAccount:afterRequestAccount alterType:WTAlertViewTypeTJDGuoZhaiSuspend]) {\n            return;\n        }\n\n#ifdef _DEBUG\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:AlertBindDebug_TJDGuoZhaiSuspend]){\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:nil accountInfo:afterRequestAccount];\n            return;\n        });\n    }\n#endif\n\n        if (responseModel.error) { //请求出现问题\n            return;\n        }\n        HXChaxunResponseResultCODataModel *result = [HXChaxunResponseResultCODataModel createInstanceWithDic:responseModel.result width:0];\n        if (!result.condition || result.condition.count <= 0) {//无数据\n            return;\n        }\n\n        for (HXChaXunBillDetailDataCOModel *chaxunModel in result.condition) {\n            if (chaxunModel.entrusttype == HXCOEntrustTypeGZ) {\n                [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:chaxunModel accountInfo:afterRequestAccount];\n            }\n        }\n    }];\n}\n\n+ (void)showGotoGuoZhaiSuspendMonitoringAlertWithModel:(HXChaXunBillDetailDataCOModel *)model accountInfo:(WTAccountInfor *)accountInfo{\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian\")  actionType:ClickAction];\n    HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:@\"条件单提醒\" message:@\"您当日有中签，建议暂停当日的逆回购条件单以保留可用资金\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:@\"去暂停\", nil];\n    alertView.clickHandler = ^(HXCustomAlertView * _Nonnull alertView, NSInteger buttonIndex) {\n        if (buttonIndex == 0) {\n            // 取消\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.cancel\")  actionType:ClickAction];\n        }else {\n            // 去暂停\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.pause\")  actionType:ClickAction];\n            [AMUIPublicProxy gotoPageWithId:PAGE_CONDITIONALORDER_MONITORING_DE params:@{@\"dataSource\" : model}];\n        }\n    };\n    [alertView setButtonInfoWithIndex:0 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n    }];\n    [alertView setButtonInfoWithIndex:1 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n        buttonBuilder.boldButton = YES;\n    }];\n\n    //绑定唯一标识\n    alertView.uniqueIdentifier = [WTAlertBindAccountTool getAlertUniqueIdentifierWithAccount:accountInfo alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    WeakObj(alertView);\n    alertView.judgeEffectiveBlock = ^BOOL{\n        //校验弹框是否属于当前账号\n        return [WTAlertBindAccountTool checkAlterBelondToCurrentAccountWithUniqueIdentifier:alertViewWeak.uniqueIdentifier alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    };\n\n    [alertView show];\n\n#ifdef _DEBUG\n    [WTAlertBindDebug delayChangeAccount];\n#endif\n\n}\n\n//创建、修改、删除、暂停条件单时重新请求过期条件单信息\n+ (void)updateExpiredConditionalOrderInfoAfterResponse:(NSDictionary *)result {\n    if ([self isSupportExpiredConditionalOrder]) {\n        NSArray *funcidArr = @[@\"700001\",@\"700002\",@\"700003\",@\"700004\"];\n        if ([funcidArr containsObject:[result thsStringForKey:@\"funcid\"]]) {\n            [self requestAndUpdateExpiredConditionalOrderInfo];\n        }\n    }\n}\n\n\n/// 判断功能后是否只能发往自营条件单后台\n/// @param funcid 请求功能号\n+ (BOOL)needSendToZiYingWith:(NSString *)funcid{\n    //一些特殊的功能号，只能发往自营条件单后台\n    if ([funcid isEqualToString:@\"700032\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (NSString *)fetchConditaionalHost:(BOOL)isNew {\n    if (isNew) {\n        return @\"ConditionalOrderNew\";\n    }\n    return @\"ConditionalOrder\";\n}\n\n+ (NSString *)fetchMethodWithFuncid:(NSString *)funcid {\n    if ([funcid isEqualToString:@\"700009\"]) {\n        return @\"smsupple\";\n    }\n    return @\"sm2\";\n}\n\n+ (NSString *)fetchUrlParamsWithUrl:(NSString *)url funcid:(NSString *)funcid isNew:(BOOL)isNew {\n    if (isNew) {\n        return [self fetchMethodWithFuncid:funcid];\n    }\n    return url;\n}\n\n/// 透传协议请求参数获取\n/// @param url 请求URL\n+ (NSDictionary *)requestDictForPassthroughProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"Url\" : [self fetchUrlParamsWithUrl:url funcid:funcid isNew:isNew],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:url forKey:@\"PostParam\"];\n    }\n\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //这边固定走 自运营条件单后台，这两个参数在该协议是没有用的。\n        [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n    }\n\n    return [tempDict copy];\n}\n\n+ (NSDictionary *)requestDictForConditionalOrderProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid isQuickCounterCondition:(BOOL)isQuickCounterCondition qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"param\" : [NSString wtSafeString:url],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:[self fetchMethodWithFuncid:funcid] forKey:@\"method\"];\n    }\n\n    //只有灰度开启的情况下，才添加相关参数\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //newprotocol 参数传1，请求使用新协议到快速柜台\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n        if ([self needSendToZiYingWith:funcid]) {\n            //该功能号只能发到自运营后台\n            [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        }else{\n            //其他的根据通道类型决定发到哪里\n            [tempDict safetySetObject:@(isQuickCounterCondition) forKey:@\"quickgw\"];\n        }\n    }\n    return [tempDict copy];\n}\n\n/// 条件单请求日志信息\n+ (void)logWithErrorType:(NSString *)errorType funcid:(NSString *)funcid protocolId:(int)protocolId quickgw:(NSString *)quickgw detailsMsg:(NSString *)detailsMsg{\n    WTAMLogError(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"%@\", detailsMsg);\n\n    //错误日志，同步到cbas\n    NSString *cbasObj = [NSString stringWithFormat:@\"t=tjdReqError^errorType=%@^funcid=%@^protocolId=%d^quickgw=%@\", errorType, funcid, protocolId, quickgw];\n    [AMUIPublicProxy collectUserBehavior:cbasObj type:ACTION_INCORRECT_BEHAVIOR_LOG];\n}\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"HXConditionalOrderDataManager.mm","template":"objective-cpp","multiRes":{"hipilot":"[self getStockModelArr].count > 1;\n}\n\n+ (void)requestAndUpdateExpiredConditionalOrderInfo {\n    [self requestExpiredConditionalOrderInfoWithCompletion:^{\n        [self requestUpdateExpiredConditionalOrderInfoWithCompletion:","deepseek-chat-lite":"[self getStockModelArr].count > 1;","CodeQwen2.5-7B":"[self getStockModelArr].count > 1;","copilot":"id\" : @\"700006\",\n           "}},{"prefix":"        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    BOOL isQuickCounterCondition = [WTQuickCounterServiceChannelManager isQuickCounterCondition];\n    if (isQuickCounterCondition) {\n        //快速柜台根据灰度\n        return [[HXGrayRelease shared] switchForKey:GrayReleaseQuickBatchCreateCO broker:currentAccount.yybId];\n    }\n    //自营默认支持\n    return YES;\n}\n\n+ (BOOL) isSupportBatchCreateConditionalOrder:(HXConditionalOrderType)coType {\n    // 不支持两融条件单\n    if ([self isRZRQConditionalOrder]) {\n        return NO;\n    }\n    // 概率发布判断\n    if (![self isBatchCreateConditionalOrderGrayReleaseOpen]) {\n        return NO;\n    }\n    if (coType == HXConditionalOrderTypeSJ || coType == HXConditionalOrderTypeRZDF || coType == HXConditionalOrderTypeMACD || coType == HXConditionalOrderTypeZTMR) {\n        return YES;\n    }\n    return NO;\n}\n\n- (BOOL)isSeletedStock {\n    return [self getStockModelArr].count > 0;\n}\n\n- (BOOL)isSeletedMultiStock {\n    return ","infill":"\",\n                ","suffix":"             @\"brokerid\" : brokerid,\n                             @\"userid\" : @(userid),\n                             @\"clientid\" : clientid,\n                             @\"flag\" : @(1),\n                             @\"extend2\" : extend2,\n                             @\"source\" : source,\n                             };\n    WeakObj(beforeRequestAccount);\n    WeakObj(self);\n    [self requestConditionalOrderDataWithPageId:PAGE_WT_TRADEFIRST_ASHARE params:params resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        WTAccountInfor *afterRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        //检测账号如果存在变动直接return\n        if ([WTAlertBindAccountTool checkAccountChangedWithBeforeRequestAccount:beforeRequestAccountWeak afterRequestAccount:afterRequestAccount alterType:WTAlertViewTypeTJDGuoZhaiSuspend]) {\n            return;\n        }\n\n#ifdef _DEBUG\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:AlertBindDebug_TJDGuoZhaiSuspend]){\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:nil accountInfo:afterRequestAccount];\n            return;\n        });\n    }\n#endif\n\n        if (responseModel.error) { //请求出现问题\n            return;\n        }\n        HXChaxunResponseResultCODataModel *result = [HXChaxunResponseResultCODataModel createInstanceWithDic:responseModel.result width:0];\n        if (!result.condition || result.condition.count <= 0) {//无数据\n            return;\n        }\n\n        for (HXChaXunBillDetailDataCOModel *chaxunModel in result.condition) {\n            if (chaxunModel.entrusttype == HXCOEntrustTypeGZ) {\n                [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:chaxunModel accountInfo:afterRequestAccount];\n            }\n        }\n    }];\n}\n\n+ (void)showGotoGuoZhaiSuspendMonitoringAlertWithModel:(HXChaXunBillDetailDataCOModel *)model accountInfo:(WTAccountInfor *)accountInfo{\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian\")  actionType:ClickAction];\n    HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:@\"条件单提醒\" message:@\"您当日有中签，建议暂停当日的逆回购条件单以保留可用资金\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:@\"去暂停\", nil];\n    alertView.clickHandler = ^(HXCustomAlertView * _Nonnull alertView, NSInteger buttonIndex) {\n        if (buttonIndex == 0) {\n            // 取消\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.cancel\")  actionType:ClickAction];\n        }else {\n            // 去暂停\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.pause\")  actionType:ClickAction];\n            [AMUIPublicProxy gotoPageWithId:PAGE_CONDITIONALORDER_MONITORING_DE params:@{@\"dataSource\" : model}];\n        }\n    };\n    [alertView setButtonInfoWithIndex:0 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n    }];\n    [alertView setButtonInfoWithIndex:1 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n        buttonBuilder.boldButton = YES;\n    }];\n\n    //绑定唯一标识\n    alertView.uniqueIdentifier = [WTAlertBindAccountTool getAlertUniqueIdentifierWithAccount:accountInfo alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    WeakObj(alertView);\n    alertView.judgeEffectiveBlock = ^BOOL{\n        //校验弹框是否属于当前账号\n        return [WTAlertBindAccountTool checkAlterBelondToCurrentAccountWithUniqueIdentifier:alertViewWeak.uniqueIdentifier alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    };\n\n    [alertView show];\n\n#ifdef _DEBUG\n    [WTAlertBindDebug delayChangeAccount];\n#endif\n\n}\n\n//创建、修改、删除、暂停条件单时重新请求过期条件单信息\n+ (void)updateExpiredConditionalOrderInfoAfterResponse:(NSDictionary *)result {\n    if ([self isSupportExpiredConditionalOrder]) {\n        NSArray *funcidArr = @[@\"700001\",@\"700002\",@\"700003\",@\"700004\"];\n        if ([funcidArr containsObject:[result thsStringForKey:@\"funcid\"]]) {\n            [self requestAndUpdateExpiredConditionalOrderInfo];\n        }\n    }\n}\n\n\n/// 判断功能后是否只能发往自营条件单后台\n/// @param funcid 请求功能号\n+ (BOOL)needSendToZiYingWith:(NSString *)funcid{\n    //一些特殊的功能号，只能发往自营条件单后台\n    if ([funcid isEqualToString:@\"700032\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (NSString *)fetchConditaionalHost:(BOOL)isNew {\n    if (isNew) {\n        return @\"ConditionalOrderNew\";\n    }\n    return @\"ConditionalOrder\";\n}\n\n+ (NSString *)fetchMethodWithFuncid:(NSString *)funcid {\n    if ([funcid isEqualToString:@\"700009\"]) {\n        return @\"smsupple\";\n    }\n    return @\"sm2\";\n}\n\n+ (NSString *)fetchUrlParamsWithUrl:(NSString *)url funcid:(NSString *)funcid isNew:(BOOL)isNew {\n    if (isNew) {\n        return [self fetchMethodWithFuncid:funcid];\n    }\n    return url;\n}\n\n/// 透传协议请求参数获取\n/// @param url 请求URL\n+ (NSDictionary *)requestDictForPassthroughProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"Url\" : [self fetchUrlParamsWithUrl:url funcid:funcid isNew:isNew],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:url forKey:@\"PostParam\"];\n    }\n\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //这边固定走 自运营条件单后台，这两个参数在该协议是没有用的。\n        [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n    }\n\n    return [tempDict copy];\n}\n\n+ (NSDictionary *)requestDictForConditionalOrderProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid isQuickCounterCondition:(BOOL)isQuickCounterCondition qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"param\" : [NSString wtSafeString:url],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:[self fetchMethodWithFuncid:funcid] forKey:@\"method\"];\n    }\n\n    //只有灰度开启的情况下，才添加相关参数\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //newprotocol 参数传1，请求使用新协议到快速柜台\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n        if ([self needSendToZiYingWith:funcid]) {\n            //该功能号只能发到自运营后台\n            [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        }else{\n            //其他的根据通道类型决定发到哪里\n            [tempDict safetySetObject:@(isQuickCounterCondition) forKey:@\"quickgw\"];\n        }\n    }\n    return [tempDict copy];\n}\n\n/// 条件单请求日志信息\n+ (void)logWithErrorType:(NSString *)errorType funcid:(NSString *)funcid protocolId:(int)protocolId quickgw:(NSString *)quickgw detailsMsg:(NSString *)detailsMsg{\n    WTAMLogError(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"%@\", detailsMsg);\n\n    //错误日志，同步到cbas\n    NSString *cbasObj = [NSString stringWithFormat:@\"t=tjdReqError^errorType=%@^funcid=%@^protocolId=%d^quickgw=%@\", errorType, funcid, protocolId, quickgw];\n    [AMUIPublicProxy collectUserBehavior:cbasObj type:ACTION_INCORRECT_BEHAVIOR_LOG];\n}\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"HXConditionalOrderDataManager.mm","template":"objective-cpp","multiRes":{"hipilot":"[self getStockModelArr].count > 1;\n}\n\n+ (void)checkTJDGuoZhaiSuspendMonitoringWithParams:(NSDictionary *)params{\n    NSString *brokerid = [params objectForKey:@\"brokerid\"];\n   ","deepseek-chat-lite":"[self getStockModelArr].count > 1;","CodeQwen2.5-7B":"[self getStockModelArr].count > 1;","copilot":"\",\n                "}},{"prefix":"        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXBillDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [","infill":"void)ifHasMonitori","suffix":"ngGuoZhaiToSuspend {\n    NSString *brokerid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].yybId ?: @\"\";\n    NSInteger userid = [[HXUserInfo getUserId] integerValue];\n    NSString *clientid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].zjzh ?: @\"\";\n    HXBillExtend2DateCOModel *extend2Model = [[HXBillExtend2DateCOModel alloc] init];\n    extend2Model.userid = [HXUserInfo getUserId];\n    extend2Model.fundaccount = clientid;\n    extend2Model.stockaccount = clientid;\n    extend2Model.sourceid = [[AMMiddlePublicProxy getQuotaIPAndPort] objectForKey:@\"IP\"];\n    extend2Model.version = AppletVersion;\n    NSString *extend2 = [extend2Model yy_modelToJSONString] ?: @\"\";\n    NSString *source = @\"2\";\n    WTAccountInfor *beforeRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (beforeRequestAccount.bSimType) {\n        source = @\"5\";\n    }\n    NSDictionary *params = @{@\"funcid\" : @\"700006\",\n                             @\"brokerid\" : brokerid,\n                             @\"userid\" : @(userid),\n                             @\"clientid\" : clientid,\n                             @\"flag\" : @(1),\n                             @\"extend2\" : extend2,\n                             @\"source\" : source,\n                             };\n    WeakObj(beforeRequestAccount);\n    WeakObj(self);\n    [self requestConditionalOrderDataWithPageId:PAGE_WT_TRADEFIRST_ASHARE params:params resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        WTAccountInfor *afterRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        //检测账号如果存在变动直接return\n        if ([WTAlertBindAccountTool checkAccountChangedWithBeforeRequestAccount:beforeRequestAccountWeak afterRequestAccount:afterRequestAccount alterType:WTAlertViewTypeTJDGuoZhaiSuspend]) {\n            return;\n        }\n\n#ifdef _DEBUG\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:AlertBindDebug_TJDGuoZhaiSuspend]){\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:nil accountInfo:afterRequestAccount];\n            return;\n        });\n    }\n#endif\n\n        if (responseModel.error) { //请求出现问题\n            return;\n        }\n        HXChaxunResponseResultCODataModel *result = [HXChaxunResponseResultCODataModel createInstanceWithDic:responseModel.result width:0];\n        if (!result.condition || result.condition.count <= 0) {//无数据\n            return;\n        }\n\n        for (HXChaXunBillDetailDataCOModel *chaxunModel in result.condition) {\n            if (chaxunModel.entrusttype == HXCOEntrustTypeGZ) {\n                [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:chaxunModel accountInfo:afterRequestAccount];\n            }\n        }\n    }];\n}\n\n+ (void)showGotoGuoZhaiSuspendMonitoringAlertWithModel:(HXChaXunBillDetailDataCOModel *)model accountInfo:(WTAccountInfor *)accountInfo{\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian\")  actionType:ClickAction];\n    HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:@\"条件单提醒\" message:@\"您当日有中签，建议暂停当日的逆回购条件单以保留可用资金\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:@\"去暂停\", nil];\n    alertView.clickHandler = ^(HXCustomAlertView * _Nonnull alertView, NSInteger buttonIndex) {\n        if (buttonIndex == 0) {\n            // 取消\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.cancel\")  actionType:ClickAction];\n        }else {\n            // 去暂停\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.pause\")  actionType:ClickAction];\n            [AMUIPublicProxy gotoPageWithId:PAGE_CONDITIONALORDER_MONITORING_DE params:@{@\"dataSource\" : model}];\n        }\n    };\n    [alertView setButtonInfoWithIndex:0 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n    }];\n    [alertView setButtonInfoWithIndex:1 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n        buttonBuilder.boldButton = YES;\n    }];\n\n    //绑定唯一标识\n    alertView.uniqueIdentifier = [WTAlertBindAccountTool getAlertUniqueIdentifierWithAccount:accountInfo alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    WeakObj(alertView);\n    alertView.judgeEffectiveBlock = ^BOOL{\n        //校验弹框是否属于当前账号\n        return [WTAlertBindAccountTool checkAlterBelondToCurrentAccountWithUniqueIdentifier:alertViewWeak.uniqueIdentifier alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    };\n\n    [alertView show];\n\n#ifdef _DEBUG\n    [WTAlertBindDebug delayChangeAccount];\n#endif\n\n}\n\n//创建、修改、删除、暂停条件单时重新请求过期条件单信息\n+ (void)updateExpiredConditionalOrderInfoAfterResponse:(NSDictionary *)result {\n    if ([self isSupportExpiredConditionalOrder]) {\n        NSArray *funcidArr = @[@\"700001\",@\"700002\",@\"700003\",@\"700004\"];\n        if ([funcidArr containsObject:[result thsStringForKey:@\"funcid\"]]) {\n            [self requestAndUpdateExpiredConditionalOrderInfo];\n        }\n    }\n}\n\n\n/// 判断功能后是否只能发往自营条件单后台\n/// @param funcid 请求功能号\n+ (BOOL)needSendToZiYingWith:(NSString *)funcid{\n    //一些特殊的功能号，只能发往自营条件单后台\n    if ([funcid isEqualToString:@\"700032\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (NSString *)fetchConditaionalHost:(BOOL)isNew {\n    if (isNew) {\n        return @\"ConditionalOrderNew\";\n    }\n    return @\"ConditionalOrder\";\n}\n\n+ (NSString *)fetchMethodWithFuncid:(NSString *)funcid {\n    if ([funcid isEqualToString:@\"700009\"]) {\n        return @\"smsupple\";\n    }\n    return @\"sm2\";\n}\n\n+ (NSString *)fetchUrlParamsWithUrl:(NSString *)url funcid:(NSString *)funcid isNew:(BOOL)isNew {\n    if (isNew) {\n        return [self fetchMethodWithFuncid:funcid];\n    }\n    return url;\n}\n\n/// 透传协议请求参数获取\n/// @param url 请求URL\n+ (NSDictionary *)requestDictForPassthroughProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"Url\" : [self fetchUrlParamsWithUrl:url funcid:funcid isNew:isNew],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:url forKey:@\"PostParam\"];\n    }\n\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //这边固定走 自运营条件单后台，这两个参数在该协议是没有用的。\n        [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n    }\n\n    return [tempDict copy];\n}\n\n+ (NSDictionary *)requestDictForConditionalOrderProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid isQuickCounterCondition:(BOOL)isQuickCounterCondition qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"param\" : [NSString wtSafeString:url],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:[self fetchMethodWithFuncid:funcid] forKey:@\"method\"];\n    }\n\n    //只有灰度开启的情况下，才添加相关参数\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //newprotocol 参数传1，请求使用新协议到快速柜台\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n        if ([self needSendToZiYingWith:funcid]) {\n            //该功能号只能发到自运营后台\n            [tempDict ","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"HXWTAccountManager sharedInstance];\n    WTAccountInfor *gyAccount = [HXWTAccountManager sharedInstance].gyAccountInfor;","deepseek-chat-lite":"[HXWTAccountManager sharedInstance] getCurAccountInfor];","CodeQwen2.5-7B":"HXWTAccountManager sharedInstance] getCurAccountInfor;","copilot":"void)ifHasMonitori"}},{"prefix":"    self.priorCOModel.billDataCOModel = [HXBillDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor","infill":"void)ifHasMonitoringGu","suffix":"oZhaiToSuspend {\n    NSString *brokerid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].yybId ?: @\"\";\n    NSInteger userid = [[HXUserInfo getUserId] integerValue];\n    NSString *clientid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].zjzh ?: @\"\";\n    HXBillExtend2DateCOModel *extend2Model = [[HXBillExtend2DateCOModel alloc] init];\n    extend2Model.userid = [HXUserInfo getUserId];\n    extend2Model.fundaccount = clientid;\n    extend2Model.stockaccount = clientid;\n    extend2Model.sourceid = [[AMMiddlePublicProxy getQuotaIPAndPort] objectForKey:@\"IP\"];\n    extend2Model.version = AppletVersion;\n    NSString *extend2 = [extend2Model yy_modelToJSONString] ?: @\"\";\n    NSString *source = @\"2\";\n    WTAccountInfor *beforeRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (beforeRequestAccount.bSimType) {\n        source = @\"5\";\n    }\n    NSDictionary *params = @{@\"funcid\" : @\"700006\",\n                             @\"brokerid\" : brokerid,\n                             @\"userid\" : @(userid),\n                             @\"clientid\" : clientid,\n                             @\"flag\" : @(1),\n                             @\"extend2\" : extend2,\n                             @\"source\" : source,\n                             };\n    WeakObj(beforeRequestAccount);\n    WeakObj(self);\n    [self requestConditionalOrderDataWithPageId:PAGE_WT_TRADEFIRST_ASHARE params:params resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        WTAccountInfor *afterRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        //检测账号如果存在变动直接return\n        if ([WTAlertBindAccountTool checkAccountChangedWithBeforeRequestAccount:beforeRequestAccountWeak afterRequestAccount:afterRequestAccount alterType:WTAlertViewTypeTJDGuoZhaiSuspend]) {\n            return;\n        }\n\n#ifdef _DEBUG\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:AlertBindDebug_TJDGuoZhaiSuspend]){\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:nil accountInfo:afterRequestAccount];\n            return;\n        });\n    }\n#endif\n\n        if (responseModel.error) { //请求出现问题\n            return;\n        }\n        HXChaxunResponseResultCODataModel *result = [HXChaxunResponseResultCODataModel createInstanceWithDic:responseModel.result width:0];\n        if (!result.condition || result.condition.count <= 0) {//无数据\n            return;\n        }\n\n        for (HXChaXunBillDetailDataCOModel *chaxunModel in result.condition) {\n            if (chaxunModel.entrusttype == HXCOEntrustTypeGZ) {\n                [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:chaxunModel accountInfo:afterRequestAccount];\n            }\n        }\n    }];\n}\n\n+ (void)showGotoGuoZhaiSuspendMonitoringAlertWithModel:(HXChaXunBillDetailDataCOModel *)model accountInfo:(WTAccountInfor *)accountInfo{\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian\")  actionType:ClickAction];\n    HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:@\"条件单提醒\" message:@\"您当日有中签，建议暂停当日的逆回购条件单以保留可用资金\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:@\"去暂停\", nil];\n    alertView.clickHandler = ^(HXCustomAlertView * _Nonnull alertView, NSInteger buttonIndex) {\n        if (buttonIndex == 0) {\n            // 取消\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.cancel\")  actionType:ClickAction];\n        }else {\n            // 去暂停\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.pause\")  actionType:ClickAction];\n            [AMUIPublicProxy gotoPageWithId:PAGE_CONDITIONALORDER_MONITORING_DE params:@{@\"dataSource\" : model}];\n        }\n    };\n    [alertView setButtonInfoWithIndex:0 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n    }];\n    [alertView setButtonInfoWithIndex:1 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n        buttonBuilder.boldButton = YES;\n    }];\n\n    //绑定唯一标识\n    alertView.uniqueIdentifier = [WTAlertBindAccountTool getAlertUniqueIdentifierWithAccount:accountInfo alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    WeakObj(alertView);\n    alertView.judgeEffectiveBlock = ^BOOL{\n        //校验弹框是否属于当前账号\n        return [WTAlertBindAccountTool checkAlterBelondToCurrentAccountWithUniqueIdentifier:alertViewWeak.uniqueIdentifier alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    };\n\n    [alertView show];\n\n#ifdef _DEBUG\n    [WTAlertBindDebug delayChangeAccount];\n#endif\n\n}\n\n//创建、修改、删除、暂停条件单时重新请求过期条件单信息\n+ (void)updateExpiredConditionalOrderInfoAfterResponse:(NSDictionary *)result {\n    if ([self isSupportExpiredConditionalOrder]) {\n        NSArray *funcidArr = @[@\"700001\",@\"700002\",@\"700003\",@\"700004\"];\n        if ([funcidArr containsObject:[result thsStringForKey:@\"funcid\"]]) {\n            [self requestAndUpdateExpiredConditionalOrderInfo];\n        }\n    }\n}\n\n\n/// 判断功能后是否只能发往自营条件单后台\n/// @param funcid 请求功能号\n+ (BOOL)needSendToZiYingWith:(NSString *)funcid{\n    //一些特殊的功能号，只能发往自营条件单后台\n    if ([funcid isEqualToString:@\"700032\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (NSString *)fetchConditaionalHost:(BOOL)isNew {\n    if (isNew) {\n        return @\"ConditionalOrderNew\";\n    }\n    return @\"ConditionalOrder\";\n}\n\n+ (NSString *)fetchMethodWithFuncid:(NSString *)funcid {\n    if ([funcid isEqualToString:@\"700009\"]) {\n        return @\"smsupple\";\n    }\n    return @\"sm2\";\n}\n\n+ (NSString *)fetchUrlParamsWithUrl:(NSString *)url funcid:(NSString *)funcid isNew:(BOOL)isNew {\n    if (isNew) {\n        return [self fetchMethodWithFuncid:funcid];\n    }\n    return url;\n}\n\n/// 透传协议请求参数获取\n/// @param url 请求URL\n+ (NSDictionary *)requestDictForPassthroughProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"Url\" : [self fetchUrlParamsWithUrl:url funcid:funcid isNew:isNew],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:url forKey:@\"PostParam\"];\n    }\n\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //这边固定走 自运营条件单后台，这两个参数在该协议是没有用的。\n        [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n    }\n\n    return [tempDict copy];\n}\n\n+ (NSDictionary *)requestDictForConditionalOrderProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid isQuickCounterCondition:(BOOL)isQuickCounterCondition qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"param\" : [NSString wtSafeString:url],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:[self fetchMethodWithFuncid:funcid] forKey:@\"method\"];\n    }\n\n    //只有灰度开启的情况下，才添加相关参数\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //newprotocol 参数传1，请求使用新协议到快速柜台\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n        if ([self needSendToZiYingWith:funcid]) {\n            //该功能号只能发到自运营后台\n            [tempDict safe","relevantFile":"","relevantFileList":[],"filePath":"HXConditionalOrderDataManager.mm","template":"objective-cpp","multiRes":{"hipilot":"];\n    if (currentAccount.isRZRQ) { // 融资融券\n        return NO;\n    }\n    \n    BOOL isOpen = [[HXGrayRelease shared] switchForKey:GrayReleaseBatchCreateCO];\n    return isOpen;\n}","deepseek-chat-lite":"];","CodeQwen2.5-7B":"];","copilot":"void)ifHasMonitoringGu"}},{"prefix":"    self.priorCOModel.billDataCOModel = [HXBillDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    BOOL isQuickCounterCondition = [WTQ","infill":"oZhaiToSuspend {\n    NSS","suffix":"tring *brokerid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].yybId ?: @\"\";\n    NSInteger userid = [[HXUserInfo getUserId] integerValue];\n    NSString *clientid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].zjzh ?: @\"\";\n    HXBillExtend2DateCOModel *extend2Model = [[HXBillExtend2DateCOModel alloc] init];\n    extend2Model.userid = [HXUserInfo getUserId];\n    extend2Model.fundaccount = clientid;\n    extend2Model.stockaccount = clientid;\n    extend2Model.sourceid = [[AMMiddlePublicProxy getQuotaIPAndPort] objectForKey:@\"IP\"];\n    extend2Model.version = AppletVersion;\n    NSString *extend2 = [extend2Model yy_modelToJSONString] ?: @\"\";\n    NSString *source = @\"2\";\n    WTAccountInfor *beforeRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (beforeRequestAccount.bSimType) {\n        source = @\"5\";\n    }\n    NSDictionary *params = @{@\"funcid\" : @\"700006\",\n                             @\"brokerid\" : brokerid,\n                             @\"userid\" : @(userid),\n                             @\"clientid\" : clientid,\n                             @\"flag\" : @(1),\n                             @\"extend2\" : extend2,\n                             @\"source\" : source,\n                             };\n    WeakObj(beforeRequestAccount);\n    WeakObj(self);\n    [self requestConditionalOrderDataWithPageId:PAGE_WT_TRADEFIRST_ASHARE params:params resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        WTAccountInfor *afterRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        //检测账号如果存在变动直接return\n        if ([WTAlertBindAccountTool checkAccountChangedWithBeforeRequestAccount:beforeRequestAccountWeak afterRequestAccount:afterRequestAccount alterType:WTAlertViewTypeTJDGuoZhaiSuspend]) {\n            return;\n        }\n\n#ifdef _DEBUG\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:AlertBindDebug_TJDGuoZhaiSuspend]){\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:nil accountInfo:afterRequestAccount];\n            return;\n        });\n    }\n#endif\n\n        if (responseModel.error) { //请求出现问题\n            return;\n        }\n        HXChaxunResponseResultCODataModel *result = [HXChaxunResponseResultCODataModel createInstanceWithDic:responseModel.result width:0];\n        if (!result.condition || result.condition.count <= 0) {//无数据\n            return;\n        }\n\n        for (HXChaXunBillDetailDataCOModel *chaxunModel in result.condition) {\n            if (chaxunModel.entrusttype == HXCOEntrustTypeGZ) {\n                [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:chaxunModel accountInfo:afterRequestAccount];\n            }\n        }\n    }];\n}\n\n+ (void)showGotoGuoZhaiSuspendMonitoringAlertWithModel:(HXChaXunBillDetailDataCOModel *)model accountInfo:(WTAccountInfor *)accountInfo{\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian\")  actionType:ClickAction];\n    HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:@\"条件单提醒\" message:@\"您当日有中签，建议暂停当日的逆回购条件单以保留可用资金\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:@\"去暂停\", nil];\n    alertView.clickHandler = ^(HXCustomAlertView * _Nonnull alertView, NSInteger buttonIndex) {\n        if (buttonIndex == 0) {\n            // 取消\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.cancel\")  actionType:ClickAction];\n        }else {\n            // 去暂停\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.pause\")  actionType:ClickAction];\n            [AMUIPublicProxy gotoPageWithId:PAGE_CONDITIONALORDER_MONITORING_DE params:@{@\"dataSource\" : model}];\n        }\n    };\n    [alertView setButtonInfoWithIndex:0 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n    }];\n    [alertView setButtonInfoWithIndex:1 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n        buttonBuilder.boldButton = YES;\n    }];\n\n    //绑定唯一标识\n    alertView.uniqueIdentifier = [WTAlertBindAccountTool getAlertUniqueIdentifierWithAccount:accountInfo alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    WeakObj(alertView);\n    alertView.judgeEffectiveBlock = ^BOOL{\n        //校验弹框是否属于当前账号\n        return [WTAlertBindAccountTool checkAlterBelondToCurrentAccountWithUniqueIdentifier:alertViewWeak.uniqueIdentifier alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    };\n\n    [alertView show];\n\n#ifdef _DEBUG\n    [WTAlertBindDebug delayChangeAccount];\n#endif\n\n}\n\n//创建、修改、删除、暂停条件单时重新请求过期条件单信息\n+ (void)updateExpiredConditionalOrderInfoAfterResponse:(NSDictionary *)result {\n    if ([self isSupportExpiredConditionalOrder]) {\n        NSArray *funcidArr = @[@\"700001\",@\"700002\",@\"700003\",@\"700004\"];\n        if ([funcidArr containsObject:[result thsStringForKey:@\"funcid\"]]) {\n            [self requestAndUpdateExpiredConditionalOrderInfo];\n        }\n    }\n}\n\n\n/// 判断功能后是否只能发往自营条件单后台\n/// @param funcid 请求功能号\n+ (BOOL)needSendToZiYingWith:(NSString *)funcid{\n    //一些特殊的功能号，只能发往自营条件单后台\n    if ([funcid isEqualToString:@\"700032\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (NSString *)fetchConditaionalHost:(BOOL)isNew {\n    if (isNew) {\n        return @\"ConditionalOrderNew\";\n    }\n    return @\"ConditionalOrder\";\n}\n\n+ (NSString *)fetchMethodWithFuncid:(NSString *)funcid {\n    if ([funcid isEqualToString:@\"700009\"]) {\n        return @\"smsupple\";\n    }\n    return @\"sm2\";\n}\n\n+ (NSString *)fetchUrlParamsWithUrl:(NSString *)url funcid:(NSString *)funcid isNew:(BOOL)isNew {\n    if (isNew) {\n        return [self fetchMethodWithFuncid:funcid];\n    }\n    return url;\n}\n\n/// 透传协议请求参数获取\n/// @param url 请求URL\n+ (NSDictionary *)requestDictForPassthroughProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"Url\" : [self fetchUrlParamsWithUrl:url funcid:funcid isNew:isNew],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:url forKey:@\"PostParam\"];\n    }\n\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //这边固定走 自运营条件单后台，这两个参数在该协议是没有用的。\n        [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n    }\n\n    return [tempDict copy];\n}\n\n+ (NSDictionary *)requestDictForConditionalOrderProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid isQuickCounterCondition:(BOOL)isQuickCounterCondition qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"param\" : [NSString wtSafeString:url],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:[self fetchMethodWithFuncid:funcid] forKey:@\"method\"];\n    }\n\n    //只有灰度开启的情况下，才添加相关参数\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //newprotocol 参数传1，请求使用新协议到快速柜台\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n        if ([self needSendToZiYingWith:funcid]) {\n            //该功能号只能发到自运营后台\n            [tempDict safetySetObject:@(0) forKey:@","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"uickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize];","deepseek-chat-lite":"uickCounterServiceChannelManager sharedManager].isSupportWTQuickCounterConditionalOrderOptimize;","CodeQwen2.5-7B":"uickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize;","copilot":"oZhaiToSuspend {\n    NSS"}},{"prefix":"    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    BOOL isQuickCounterCondition = [WTQuickCounterServiceChannelManager isQuickCounterCondition];\n    if (isQuick","infill":"ring *brokerid = [[HXWTAccountManager sharedI","suffix":"nstance] getCurAccountInfor].yybId ?: @\"\";\n    NSInteger userid = [[HXUserInfo getUserId] integerValue];\n    NSString *clientid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].zjzh ?: @\"\";\n    HXBillExtend2DateCOModel *extend2Model = [[HXBillExtend2DateCOModel alloc] init];\n    extend2Model.userid = [HXUserInfo getUserId];\n    extend2Model.fundaccount = clientid;\n    extend2Model.stockaccount = clientid;\n    extend2Model.sourceid = [[AMMiddlePublicProxy getQuotaIPAndPort] objectForKey:@\"IP\"];\n    extend2Model.version = AppletVersion;\n    NSString *extend2 = [extend2Model yy_modelToJSONString] ?: @\"\";\n    NSString *source = @\"2\";\n    WTAccountInfor *beforeRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (beforeRequestAccount.bSimType) {\n        source = @\"5\";\n    }\n    NSDictionary *params = @{@\"funcid\" : @\"700006\",\n                             @\"brokerid\" : brokerid,\n                             @\"userid\" : @(userid),\n                             @\"clientid\" : clientid,\n                             @\"flag\" : @(1),\n                             @\"extend2\" : extend2,\n                             @\"source\" : source,\n                             };\n    WeakObj(beforeRequestAccount);\n    WeakObj(self);\n    [self requestConditionalOrderDataWithPageId:PAGE_WT_TRADEFIRST_ASHARE params:params resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        WTAccountInfor *afterRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        //检测账号如果存在变动直接return\n        if ([WTAlertBindAccountTool checkAccountChangedWithBeforeRequestAccount:beforeRequestAccountWeak afterRequestAccount:afterRequestAccount alterType:WTAlertViewTypeTJDGuoZhaiSuspend]) {\n            return;\n        }\n\n#ifdef _DEBUG\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:AlertBindDebug_TJDGuoZhaiSuspend]){\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:nil accountInfo:afterRequestAccount];\n            return;\n        });\n    }\n#endif\n\n        if (responseModel.error) { //请求出现问题\n            return;\n        }\n        HXChaxunResponseResultCODataModel *result = [HXChaxunResponseResultCODataModel createInstanceWithDic:responseModel.result width:0];\n        if (!result.condition || result.condition.count <= 0) {//无数据\n            return;\n        }\n\n        for (HXChaXunBillDetailDataCOModel *chaxunModel in result.condition) {\n            if (chaxunModel.entrusttype == HXCOEntrustTypeGZ) {\n                [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:chaxunModel accountInfo:afterRequestAccount];\n            }\n        }\n    }];\n}\n\n+ (void)showGotoGuoZhaiSuspendMonitoringAlertWithModel:(HXChaXunBillDetailDataCOModel *)model accountInfo:(WTAccountInfor *)accountInfo{\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian\")  actionType:ClickAction];\n    HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:@\"条件单提醒\" message:@\"您当日有中签，建议暂停当日的逆回购条件单以保留可用资金\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:@\"去暂停\", nil];\n    alertView.clickHandler = ^(HXCustomAlertView * _Nonnull alertView, NSInteger buttonIndex) {\n        if (buttonIndex == 0) {\n            // 取消\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.cancel\")  actionType:ClickAction];\n        }else {\n            // 去暂停\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.pause\")  actionType:ClickAction];\n            [AMUIPublicProxy gotoPageWithId:PAGE_CONDITIONALORDER_MONITORING_DE params:@{@\"dataSource\" : model}];\n        }\n    };\n    [alertView setButtonInfoWithIndex:0 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n    }];\n    [alertView setButtonInfoWithIndex:1 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n        buttonBuilder.boldButton = YES;\n    }];\n\n    //绑定唯一标识\n    alertView.uniqueIdentifier = [WTAlertBindAccountTool getAlertUniqueIdentifierWithAccount:accountInfo alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    WeakObj(alertView);\n    alertView.judgeEffectiveBlock = ^BOOL{\n        //校验弹框是否属于当前账号\n        return [WTAlertBindAccountTool checkAlterBelondToCurrentAccountWithUniqueIdentifier:alertViewWeak.uniqueIdentifier alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    };\n\n    [alertView show];\n\n#ifdef _DEBUG\n    [WTAlertBindDebug delayChangeAccount];\n#endif\n\n}\n\n//创建、修改、删除、暂停条件单时重新请求过期条件单信息\n+ (void)updateExpiredConditionalOrderInfoAfterResponse:(NSDictionary *)result {\n    if ([self isSupportExpiredConditionalOrder]) {\n        NSArray *funcidArr = @[@\"700001\",@\"700002\",@\"700003\",@\"700004\"];\n        if ([funcidArr containsObject:[result thsStringForKey:@\"funcid\"]]) {\n            [self requestAndUpdateExpiredConditionalOrderInfo];\n        }\n    }\n}\n\n\n/// 判断功能后是否只能发往自营条件单后台\n/// @param funcid 请求功能号\n+ (BOOL)needSendToZiYingWith:(NSString *)funcid{\n    //一些特殊的功能号，只能发往自营条件单后台\n    if ([funcid isEqualToString:@\"700032\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (NSString *)fetchConditaionalHost:(BOOL)isNew {\n    if (isNew) {\n        return @\"ConditionalOrderNew\";\n    }\n    return @\"ConditionalOrder\";\n}\n\n+ (NSString *)fetchMethodWithFuncid:(NSString *)funcid {\n    if ([funcid isEqualToString:@\"700009\"]) {\n        return @\"smsupple\";\n    }\n    return @\"sm2\";\n}\n\n+ (NSString *)fetchUrlParamsWithUrl:(NSString *)url funcid:(NSString *)funcid isNew:(BOOL)isNew {\n    if (isNew) {\n        return [self fetchMethodWithFuncid:funcid];\n    }\n    return url;\n}\n\n/// 透传协议请求参数获取\n/// @param url 请求URL\n+ (NSDictionary *)requestDictForPassthroughProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"Url\" : [self fetchUrlParamsWithUrl:url funcid:funcid isNew:isNew],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:url forKey:@\"PostParam\"];\n    }\n\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //这边固定走 自运营条件单后台，这两个参数在该协议是没有用的。\n        [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n    }\n\n    return [tempDict copy];\n}\n\n+ (NSDictionary *)requestDictForConditionalOrderProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid isQuickCounterCondition:(BOOL)isQuickCounterCondition qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"param\" : [NSString wtSafeString:url],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:[self fetchMethodWithFuncid:funcid] forKey:@\"method\"];\n    }\n\n    //只有灰度开启的情况下，才添加相关参数\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //newprotocol 参数传1，请求使用新协议到快速柜台\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n        if ([self needSendToZiYingWith:funcid]) {\n            //该功能号只能发到自运营后台\n            [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        }else{\n            //其","relevantFile":"","relevantFileList":[],"filePath":"HXConditionalOrderDataManager.mm","template":"objective-cpp","multiRes":{"hipilot":"CounterCondition) {\n        return YES;\n    }\n    return  [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderBatchCreate];\n}\n\n+ (void)requestAndUpdateExpiredConditionalOrderInfo {\n    NSString *bro","deepseek-chat-lite":"CounterCondition) {","CodeQwen2.5-7B":"CounterCondition) {","copilot":"ring *brokerid = [[HXWTAccountManager sharedI"}},{"prefix":"    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    BOOL isQuickCounterCondition = [WTQuickCounterServiceChannelManager isQuickCounterCondition];\n    if (isQuick","infill":"redInstance] getCurAccou","suffix":"ntInfor].yybId ?: @\"\";\n    NSInteger userid = [[HXUserInfo getUserId] integerValue];\n    NSString *clientid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].zjzh ?: @\"\";\n    HXBillExtend2DateCOModel *extend2Model = [[HXBillExtend2DateCOModel alloc] init];\n    extend2Model.userid = [HXUserInfo getUserId];\n    extend2Model.fundaccount = clientid;\n    extend2Model.stockaccount = clientid;\n    extend2Model.sourceid = [[AMMiddlePublicProxy getQuotaIPAndPort] objectForKey:@\"IP\"];\n    extend2Model.version = AppletVersion;\n    NSString *extend2 = [extend2Model yy_modelToJSONString] ?: @\"\";\n    NSString *source = @\"2\";\n    WTAccountInfor *beforeRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (beforeRequestAccount.bSimType) {\n        source = @\"5\";\n    }\n    NSDictionary *params = @{@\"funcid\" : @\"700006\",\n                             @\"brokerid\" : brokerid,\n                             @\"userid\" : @(userid),\n                             @\"clientid\" : clientid,\n                             @\"flag\" : @(1),\n                             @\"extend2\" : extend2,\n                             @\"source\" : source,\n                             };\n    WeakObj(beforeRequestAccount);\n    WeakObj(self);\n    [self requestConditionalOrderDataWithPageId:PAGE_WT_TRADEFIRST_ASHARE params:params resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        WTAccountInfor *afterRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        //检测账号如果存在变动直接return\n        if ([WTAlertBindAccountTool checkAccountChangedWithBeforeRequestAccount:beforeRequestAccountWeak afterRequestAccount:afterRequestAccount alterType:WTAlertViewTypeTJDGuoZhaiSuspend]) {\n            return;\n        }\n\n#ifdef _DEBUG\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:AlertBindDebug_TJDGuoZhaiSuspend]){\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:nil accountInfo:afterRequestAccount];\n            return;\n        });\n    }\n#endif\n\n        if (responseModel.error) { //请求出现问题\n            return;\n        }\n        HXChaxunResponseResultCODataModel *result = [HXChaxunResponseResultCODataModel createInstanceWithDic:responseModel.result width:0];\n        if (!result.condition || result.condition.count <= 0) {//无数据\n            return;\n        }\n\n        for (HXChaXunBillDetailDataCOModel *chaxunModel in result.condition) {\n            if (chaxunModel.entrusttype == HXCOEntrustTypeGZ) {\n                [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:chaxunModel accountInfo:afterRequestAccount];\n            }\n        }\n    }];\n}\n\n+ (void)showGotoGuoZhaiSuspendMonitoringAlertWithModel:(HXChaXunBillDetailDataCOModel *)model accountInfo:(WTAccountInfor *)accountInfo{\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian\")  actionType:ClickAction];\n    HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:@\"条件单提醒\" message:@\"您当日有中签，建议暂停当日的逆回购条件单以保留可用资金\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:@\"去暂停\", nil];\n    alertView.clickHandler = ^(HXCustomAlertView * _Nonnull alertView, NSInteger buttonIndex) {\n        if (buttonIndex == 0) {\n            // 取消\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.cancel\")  actionType:ClickAction];\n        }else {\n            // 去暂停\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.pause\")  actionType:ClickAction];\n            [AMUIPublicProxy gotoPageWithId:PAGE_CONDITIONALORDER_MONITORING_DE params:@{@\"dataSource\" : model}];\n        }\n    };\n    [alertView setButtonInfoWithIndex:0 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n    }];\n    [alertView setButtonInfoWithIndex:1 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n        buttonBuilder.boldButton = YES;\n    }];\n\n    //绑定唯一标识\n    alertView.uniqueIdentifier = [WTAlertBindAccountTool getAlertUniqueIdentifierWithAccount:accountInfo alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    WeakObj(alertView);\n    alertView.judgeEffectiveBlock = ^BOOL{\n        //校验弹框是否属于当前账号\n        return [WTAlertBindAccountTool checkAlterBelondToCurrentAccountWithUniqueIdentifier:alertViewWeak.uniqueIdentifier alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    };\n\n    [alertView show];\n\n#ifdef _DEBUG\n    [WTAlertBindDebug delayChangeAccount];\n#endif\n\n}\n\n//创建、修改、删除、暂停条件单时重新请求过期条件单信息\n+ (void)updateExpiredConditionalOrderInfoAfterResponse:(NSDictionary *)result {\n    if ([self isSupportExpiredConditionalOrder]) {\n        NSArray *funcidArr = @[@\"700001\",@\"700002\",@\"700003\",@\"700004\"];\n        if ([funcidArr containsObject:[result thsStringForKey:@\"funcid\"]]) {\n            [self requestAndUpdateExpiredConditionalOrderInfo];\n        }\n    }\n}\n\n\n/// 判断功能后是否只能发往自营条件单后台\n/// @param funcid 请求功能号\n+ (BOOL)needSendToZiYingWith:(NSString *)funcid{\n    //一些特殊的功能号，只能发往自营条件单后台\n    if ([funcid isEqualToString:@\"700032\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (NSString *)fetchConditaionalHost:(BOOL)isNew {\n    if (isNew) {\n        return @\"ConditionalOrderNew\";\n    }\n    return @\"ConditionalOrder\";\n}\n\n+ (NSString *)fetchMethodWithFuncid:(NSString *)funcid {\n    if ([funcid isEqualToString:@\"700009\"]) {\n        return @\"smsupple\";\n    }\n    return @\"sm2\";\n}\n\n+ (NSString *)fetchUrlParamsWithUrl:(NSString *)url funcid:(NSString *)funcid isNew:(BOOL)isNew {\n    if (isNew) {\n        return [self fetchMethodWithFuncid:funcid];\n    }\n    return url;\n}\n\n/// 透传协议请求参数获取\n/// @param url 请求URL\n+ (NSDictionary *)requestDictForPassthroughProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"Url\" : [self fetchUrlParamsWithUrl:url funcid:funcid isNew:isNew],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:url forKey:@\"PostParam\"];\n    }\n\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //这边固定走 自运营条件单后台，这两个参数在该协议是没有用的。\n        [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n    }\n\n    return [tempDict copy];\n}\n\n+ (NSDictionary *)requestDictForConditionalOrderProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid isQuickCounterCondition:(BOOL)isQuickCounterCondition qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"param\" : [NSString wtSafeString:url],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:[self fetchMethodWithFuncid:funcid] forKey:@\"method\"];\n    }\n\n    //只有灰度开启的情况下，才添加相关参数\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //newprotocol 参数传1，请求使用新协议到快速柜台\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n        if ([self needSendToZiYingWith:funcid]) {\n            //该功能号只能发到自运营后台\n            [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        }else{\n            //其他的根据通道类型决定发到哪里\n    ","relevantFile":"","relevantFileList":[],"filePath":"HXConditionalOrderDataManager.mm","template":"objective-cpp","multiRes":{"hipilot":"CounterCondition) {\n        return YES;\n    }\n    \n    // 灰度判断\n    NSInteger yybId = [[HXWTAccountManager sharedInstance] getCurAccou","deepseek-chat-lite":"CounterCondition) {","CodeQwen2.5-7B":"CounterCondition) {","copilot":"redInstance] getCurAccou"}},{"prefix":"    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXBillDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedI","infill":"oringGuoZhaiToS","suffix":"uspend {\n    NSString *brokerid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].yybId ?: @\"\";\n    NSInteger userid = [[HXUserInfo getUserId] integerValue];\n    NSString *clientid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].zjzh ?: @\"\";\n    HXBillExtend2DateCOModel *extend2Model = [[HXBillExtend2DateCOModel alloc] init];\n    extend2Model.userid = [HXUserInfo getUserId];\n    extend2Model.fundaccount = clientid;\n    extend2Model.stockaccount = clientid;\n    extend2Model.sourceid = [[AMMiddlePublicProxy getQuotaIPAndPort] objectForKey:@\"IP\"];\n    extend2Model.version = AppletVersion;\n    NSString *extend2 = [extend2Model yy_modelToJSONString] ?: @\"\";\n    NSString *source = @\"2\";\n    WTAccountInfor *beforeRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (beforeRequestAccount.bSimType) {\n        source = @\"5\";\n    }\n    NSDictionary *params = @{@\"funcid\" : @\"700006\",\n                             @\"brokerid\" : brokerid,\n                             @\"userid\" : @(userid),\n                             @\"clientid\" : clientid,\n                             @\"flag\" : @(1),\n                             @\"extend2\" : extend2,\n                             @\"source\" : source,\n                             };\n    WeakObj(beforeRequestAccount);\n    WeakObj(self);\n    [self requestConditionalOrderDataWithPageId:PAGE_WT_TRADEFIRST_ASHARE params:params resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        WTAccountInfor *afterRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        //检测账号如果存在变动直接return\n        if ([WTAlertBindAccountTool checkAccountChangedWithBeforeRequestAccount:beforeRequestAccountWeak afterRequestAccount:afterRequestAccount alterType:WTAlertViewTypeTJDGuoZhaiSuspend]) {\n            return;\n        }\n\n#ifdef _DEBUG\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:AlertBindDebug_TJDGuoZhaiSuspend]){\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:nil accountInfo:afterRequestAccount];\n            return;\n        });\n    }\n#endif\n\n        if (responseModel.error) { //请求出现问题\n            return;\n        }\n        HXChaxunResponseResultCODataModel *result = [HXChaxunResponseResultCODataModel createInstanceWithDic:responseModel.result width:0];\n        if (!result.condition || result.condition.count <= 0) {//无数据\n            return;\n        }\n\n        for (HXChaXunBillDetailDataCOModel *chaxunModel in result.condition) {\n            if (chaxunModel.entrusttype == HXCOEntrustTypeGZ) {\n                [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:chaxunModel accountInfo:afterRequestAccount];\n            }\n        }\n    }];\n}\n\n+ (void)showGotoGuoZhaiSuspendMonitoringAlertWithModel:(HXChaXunBillDetailDataCOModel *)model accountInfo:(WTAccountInfor *)accountInfo{\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian\")  actionType:ClickAction];\n    HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:@\"条件单提醒\" message:@\"您当日有中签，建议暂停当日的逆回购条件单以保留可用资金\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:@\"去暂停\", nil];\n    alertView.clickHandler = ^(HXCustomAlertView * _Nonnull alertView, NSInteger buttonIndex) {\n        if (buttonIndex == 0) {\n            // 取消\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.cancel\")  actionType:ClickAction];\n        }else {\n            // 去暂停\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.pause\")  actionType:ClickAction];\n            [AMUIPublicProxy gotoPageWithId:PAGE_CONDITIONALORDER_MONITORING_DE params:@{@\"dataSource\" : model}];\n        }\n    };\n    [alertView setButtonInfoWithIndex:0 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n    }];\n    [alertView setButtonInfoWithIndex:1 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n        buttonBuilder.boldButton = YES;\n    }];\n\n    //绑定唯一标识\n    alertView.uniqueIdentifier = [WTAlertBindAccountTool getAlertUniqueIdentifierWithAccount:accountInfo alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    WeakObj(alertView);\n    alertView.judgeEffectiveBlock = ^BOOL{\n        //校验弹框是否属于当前账号\n        return [WTAlertBindAccountTool checkAlterBelondToCurrentAccountWithUniqueIdentifier:alertViewWeak.uniqueIdentifier alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    };\n\n    [alertView show];\n\n#ifdef _DEBUG\n    [WTAlertBindDebug delayChangeAccount];\n#endif\n\n}\n\n//创建、修改、删除、暂停条件单时重新请求过期条件单信息\n+ (void)updateExpiredConditionalOrderInfoAfterResponse:(NSDictionary *)result {\n    if ([self isSupportExpiredConditionalOrder]) {\n        NSArray *funcidArr = @[@\"700001\",@\"700002\",@\"700003\",@\"700004\"];\n        if ([funcidArr containsObject:[result thsStringForKey:@\"funcid\"]]) {\n            [self requestAndUpdateExpiredConditionalOrderInfo];\n        }\n    }\n}\n\n\n/// 判断功能后是否只能发往自营条件单后台\n/// @param funcid 请求功能号\n+ (BOOL)needSendToZiYingWith:(NSString *)funcid{\n    //一些特殊的功能号，只能发往自营条件单后台\n    if ([funcid isEqualToString:@\"700032\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (NSString *)fetchConditaionalHost:(BOOL)isNew {\n    if (isNew) {\n        return @\"ConditionalOrderNew\";\n    }\n    return @\"ConditionalOrder\";\n}\n\n+ (NSString *)fetchMethodWithFuncid:(NSString *)funcid {\n    if ([funcid isEqualToString:@\"700009\"]) {\n        return @\"smsupple\";\n    }\n    return @\"sm2\";\n}\n\n+ (NSString *)fetchUrlParamsWithUrl:(NSString *)url funcid:(NSString *)funcid isNew:(BOOL)isNew {\n    if (isNew) {\n        return [self fetchMethodWithFuncid:funcid];\n    }\n    return url;\n}\n\n/// 透传协议请求参数获取\n/// @param url 请求URL\n+ (NSDictionary *)requestDictForPassthroughProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"Url\" : [self fetchUrlParamsWithUrl:url funcid:funcid isNew:isNew],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:url forKey:@\"PostParam\"];\n    }\n\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //这边固定走 自运营条件单后台，这两个参数在该协议是没有用的。\n        [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n    }\n\n    return [tempDict copy];\n}\n\n+ (NSDictionary *)requestDictForConditionalOrderProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid isQuickCounterCondition:(BOOL)isQuickCounterCondition qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"param\" : [NSString wtSafeString:url],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:[self fetchMethodWithFuncid:funcid] forKey:@\"method\"];\n    }\n\n    //只有灰度开启的情况下，才添加相关参数\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //newprotocol 参数传1，请求使用新协议到快速柜台\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n        if ([self needSendToZiYingWith:funcid]) {\n            //该功能号只能发到自运营后台\n            [tempDict safetySetObj","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"nstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        return [[HXGrayRelease shared] switchForKey:GrayReleaseBatchCreateConditionalOrderRZRQ];\n    } else {","deepseek-chat-lite":"nstance] getCurAccountInfor];","CodeQwen2.5-7B":"nstance] getCurAccountInfor];","copilot":"oringGuoZhaiToS"}},{"prefix":"    self.priorCOModel.billDataCOModel = [HXBillDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor","infill":"oSuspend {\n    ","suffix":"NSString *brokerid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].yybId ?: @\"\";\n    NSInteger userid = [[HXUserInfo getUserId] integerValue];\n    NSString *clientid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].zjzh ?: @\"\";\n    HXBillExtend2DateCOModel *extend2Model = [[HXBillExtend2DateCOModel alloc] init];\n    extend2Model.userid = [HXUserInfo getUserId];\n    extend2Model.fundaccount = clientid;\n    extend2Model.stockaccount = clientid;\n    extend2Model.sourceid = [[AMMiddlePublicProxy getQuotaIPAndPort] objectForKey:@\"IP\"];\n    extend2Model.version = AppletVersion;\n    NSString *extend2 = [extend2Model yy_modelToJSONString] ?: @\"\";\n    NSString *source = @\"2\";\n    WTAccountInfor *beforeRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (beforeRequestAccount.bSimType) {\n        source = @\"5\";\n    }\n    NSDictionary *params = @{@\"funcid\" : @\"700006\",\n                             @\"brokerid\" : brokerid,\n                             @\"userid\" : @(userid),\n                             @\"clientid\" : clientid,\n                             @\"flag\" : @(1),\n                             @\"extend2\" : extend2,\n                             @\"source\" : source,\n                             };\n    WeakObj(beforeRequestAccount);\n    WeakObj(self);\n    [self requestConditionalOrderDataWithPageId:PAGE_WT_TRADEFIRST_ASHARE params:params resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        WTAccountInfor *afterRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        //检测账号如果存在变动直接return\n        if ([WTAlertBindAccountTool checkAccountChangedWithBeforeRequestAccount:beforeRequestAccountWeak afterRequestAccount:afterRequestAccount alterType:WTAlertViewTypeTJDGuoZhaiSuspend]) {\n            return;\n        }\n\n#ifdef _DEBUG\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:AlertBindDebug_TJDGuoZhaiSuspend]){\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:nil accountInfo:afterRequestAccount];\n            return;\n        });\n    }\n#endif\n\n        if (responseModel.error) { //请求出现问题\n            return;\n        }\n        HXChaxunResponseResultCODataModel *result = [HXChaxunResponseResultCODataModel createInstanceWithDic:responseModel.result width:0];\n        if (!result.condition || result.condition.count <= 0) {//无数据\n            return;\n        }\n\n        for (HXChaXunBillDetailDataCOModel *chaxunModel in result.condition) {\n            if (chaxunModel.entrusttype == HXCOEntrustTypeGZ) {\n                [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:chaxunModel accountInfo:afterRequestAccount];\n            }\n        }\n    }];\n}\n\n+ (void)showGotoGuoZhaiSuspendMonitoringAlertWithModel:(HXChaXunBillDetailDataCOModel *)model accountInfo:(WTAccountInfor *)accountInfo{\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian\")  actionType:ClickAction];\n    HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:@\"条件单提醒\" message:@\"您当日有中签，建议暂停当日的逆回购条件单以保留可用资金\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:@\"去暂停\", nil];\n    alertView.clickHandler = ^(HXCustomAlertView * _Nonnull alertView, NSInteger buttonIndex) {\n        if (buttonIndex == 0) {\n            // 取消\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.cancel\")  actionType:ClickAction];\n        }else {\n            // 去暂停\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.pause\")  actionType:ClickAction];\n            [AMUIPublicProxy gotoPageWithId:PAGE_CONDITIONALORDER_MONITORING_DE params:@{@\"dataSource\" : model}];\n        }\n    };\n    [alertView setButtonInfoWithIndex:0 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n    }];\n    [alertView setButtonInfoWithIndex:1 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n        buttonBuilder.boldButton = YES;\n    }];\n\n    //绑定唯一标识\n    alertView.uniqueIdentifier = [WTAlertBindAccountTool getAlertUniqueIdentifierWithAccount:accountInfo alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    WeakObj(alertView);\n    alertView.judgeEffectiveBlock = ^BOOL{\n        //校验弹框是否属于当前账号\n        return [WTAlertBindAccountTool checkAlterBelondToCurrentAccountWithUniqueIdentifier:alertViewWeak.uniqueIdentifier alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    };\n\n    [alertView show];\n\n#ifdef _DEBUG\n    [WTAlertBindDebug delayChangeAccount];\n#endif\n\n}\n\n//创建、修改、删除、暂停条件单时重新请求过期条件单信息\n+ (void)updateExpiredConditionalOrderInfoAfterResponse:(NSDictionary *)result {\n    if ([self isSupportExpiredConditionalOrder]) {\n        NSArray *funcidArr = @[@\"700001\",@\"700002\",@\"700003\",@\"700004\"];\n        if ([funcidArr containsObject:[result thsStringForKey:@\"funcid\"]]) {\n            [self requestAndUpdateExpiredConditionalOrderInfo];\n        }\n    }\n}\n\n\n/// 判断功能后是否只能发往自营条件单后台\n/// @param funcid 请求功能号\n+ (BOOL)needSendToZiYingWith:(NSString *)funcid{\n    //一些特殊的功能号，只能发往自营条件单后台\n    if ([funcid isEqualToString:@\"700032\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (NSString *)fetchConditaionalHost:(BOOL)isNew {\n    if (isNew) {\n        return @\"ConditionalOrderNew\";\n    }\n    return @\"ConditionalOrder\";\n}\n\n+ (NSString *)fetchMethodWithFuncid:(NSString *)funcid {\n    if ([funcid isEqualToString:@\"700009\"]) {\n        return @\"smsupple\";\n    }\n    return @\"sm2\";\n}\n\n+ (NSString *)fetchUrlParamsWithUrl:(NSString *)url funcid:(NSString *)funcid isNew:(BOOL)isNew {\n    if (isNew) {\n        return [self fetchMethodWithFuncid:funcid];\n    }\n    return url;\n}\n\n/// 透传协议请求参数获取\n/// @param url 请求URL\n+ (NSDictionary *)requestDictForPassthroughProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"Url\" : [self fetchUrlParamsWithUrl:url funcid:funcid isNew:isNew],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:url forKey:@\"PostParam\"];\n    }\n\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //这边固定走 自运营条件单后台，这两个参数在该协议是没有用的。\n        [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n    }\n\n    return [tempDict copy];\n}\n\n+ (NSDictionary *)requestDictForConditionalOrderProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid isQuickCounterCondition:(BOOL)isQuickCounterCondition qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"param\" : [NSString wtSafeString:url],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:[self fetchMethodWithFuncid:funcid] forKey:@\"method\"];\n    }\n\n    //只有灰度开启的情况下，才添加相关参数\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //newprotocol 参数传1，请求使用新协议到快速柜台\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n        if ([self needSendToZiYingWith:funcid]) {\n            //该功能号只能发到自运营后台\n            [tempDict safetySetObject:@(0) forKe","relevantFile":"","relevantFileList":[],"filePath":"HXConditionalOrderDataManager.mm","template":"objective-cpp","multiRes":{"hipilot":"];\n    if (currentAccount.isRZRQ) {\n        return  NO;\n    }\n    \n    if (currentAccount.isCJRQ) {\n        return  NO;\n    }\n    \n    return  YES;\n}\n\n+ (","deepseek-chat-lite":"];","CodeQwen2.5-7B":"];","copilot":"oSuspend {\n    "}},{"prefix":"    self.priorCOModel.billDataCOModel = [HXBillDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor","infill":"SString *broker","suffix":"id = [[HXWTAccountManager sharedInstance] getCurAccountInfor].yybId ?: @\"\";\n    NSInteger userid = [[HXUserInfo getUserId] integerValue];\n    NSString *clientid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].zjzh ?: @\"\";\n    HXBillExtend2DateCOModel *extend2Model = [[HXBillExtend2DateCOModel alloc] init];\n    extend2Model.userid = [HXUserInfo getUserId];\n    extend2Model.fundaccount = clientid;\n    extend2Model.stockaccount = clientid;\n    extend2Model.sourceid = [[AMMiddlePublicProxy getQuotaIPAndPort] objectForKey:@\"IP\"];\n    extend2Model.version = AppletVersion;\n    NSString *extend2 = [extend2Model yy_modelToJSONString] ?: @\"\";\n    NSString *source = @\"2\";\n    WTAccountInfor *beforeRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (beforeRequestAccount.bSimType) {\n        source = @\"5\";\n    }\n    NSDictionary *params = @{@\"funcid\" : @\"700006\",\n                             @\"brokerid\" : brokerid,\n                             @\"userid\" : @(userid),\n                             @\"clientid\" : clientid,\n                             @\"flag\" : @(1),\n                             @\"extend2\" : extend2,\n                             @\"source\" : source,\n                             };\n    WeakObj(beforeRequestAccount);\n    WeakObj(self);\n    [self requestConditionalOrderDataWithPageId:PAGE_WT_TRADEFIRST_ASHARE params:params resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        WTAccountInfor *afterRequestAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        //检测账号如果存在变动直接return\n        if ([WTAlertBindAccountTool checkAccountChangedWithBeforeRequestAccount:beforeRequestAccountWeak afterRequestAccount:afterRequestAccount alterType:WTAlertViewTypeTJDGuoZhaiSuspend]) {\n            return;\n        }\n\n#ifdef _DEBUG\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:AlertBindDebug_TJDGuoZhaiSuspend]){\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:nil accountInfo:afterRequestAccount];\n            return;\n        });\n    }\n#endif\n\n        if (responseModel.error) { //请求出现问题\n            return;\n        }\n        HXChaxunResponseResultCODataModel *result = [HXChaxunResponseResultCODataModel createInstanceWithDic:responseModel.result width:0];\n        if (!result.condition || result.condition.count <= 0) {//无数据\n            return;\n        }\n\n        for (HXChaXunBillDetailDataCOModel *chaxunModel in result.condition) {\n            if (chaxunModel.entrusttype == HXCOEntrustTypeGZ) {\n                [selfWeak showGotoGuoZhaiSuspendMonitoringAlertWithModel:chaxunModel accountInfo:afterRequestAccount];\n            }\n        }\n    }];\n}\n\n+ (void)showGotoGuoZhaiSuspendMonitoringAlertWithModel:(HXChaXunBillDetailDataCOModel *)model accountInfo:(WTAccountInfor *)accountInfo{\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian\")  actionType:ClickAction];\n    HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:@\"条件单提醒\" message:@\"您当日有中签，建议暂停当日的逆回购条件单以保留可用资金\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:@\"去暂停\", nil];\n    alertView.clickHandler = ^(HXCustomAlertView * _Nonnull alertView, NSInteger buttonIndex) {\n        if (buttonIndex == 0) {\n            // 取消\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.cancel\")  actionType:ClickAction];\n        }else {\n            // 去暂停\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_MONITORING_DETAIL, @\"nihuigou.zhongqian.pause\")  actionType:ClickAction];\n            [AMUIPublicProxy gotoPageWithId:PAGE_CONDITIONALORDER_MONITORING_DE params:@{@\"dataSource\" : model}];\n        }\n    };\n    [alertView setButtonInfoWithIndex:0 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n    }];\n    [alertView setButtonInfoWithIndex:1 blcok:^(HXAlertViewButtonBuilder * _Nonnull buttonBuilder) {\n        buttonBuilder.buttoncolor = TEXT_COLOR_HOME_PAGE;\n        buttonBuilder.nightButtonColor = TEXT_COLOR_HOME_PAGE_NIGHT;\n        buttonBuilder.boldButton = YES;\n    }];\n\n    //绑定唯一标识\n    alertView.uniqueIdentifier = [WTAlertBindAccountTool getAlertUniqueIdentifierWithAccount:accountInfo alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    WeakObj(alertView);\n    alertView.judgeEffectiveBlock = ^BOOL{\n        //校验弹框是否属于当前账号\n        return [WTAlertBindAccountTool checkAlterBelondToCurrentAccountWithUniqueIdentifier:alertViewWeak.uniqueIdentifier alterType:WTAlertViewTypeTJDGuoZhaiSuspend];\n    };\n\n    [alertView show];\n\n#ifdef _DEBUG\n    [WTAlertBindDebug delayChangeAccount];\n#endif\n\n}\n\n//创建、修改、删除、暂停条件单时重新请求过期条件单信息\n+ (void)updateExpiredConditionalOrderInfoAfterResponse:(NSDictionary *)result {\n    if ([self isSupportExpiredConditionalOrder]) {\n        NSArray *funcidArr = @[@\"700001\",@\"700002\",@\"700003\",@\"700004\"];\n        if ([funcidArr containsObject:[result thsStringForKey:@\"funcid\"]]) {\n            [self requestAndUpdateExpiredConditionalOrderInfo];\n        }\n    }\n}\n\n\n/// 判断功能后是否只能发往自营条件单后台\n/// @param funcid 请求功能号\n+ (BOOL)needSendToZiYingWith:(NSString *)funcid{\n    //一些特殊的功能号，只能发往自营条件单后台\n    if ([funcid isEqualToString:@\"700032\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (NSString *)fetchConditaionalHost:(BOOL)isNew {\n    if (isNew) {\n        return @\"ConditionalOrderNew\";\n    }\n    return @\"ConditionalOrder\";\n}\n\n+ (NSString *)fetchMethodWithFuncid:(NSString *)funcid {\n    if ([funcid isEqualToString:@\"700009\"]) {\n        return @\"smsupple\";\n    }\n    return @\"sm2\";\n}\n\n+ (NSString *)fetchUrlParamsWithUrl:(NSString *)url funcid:(NSString *)funcid isNew:(BOOL)isNew {\n    if (isNew) {\n        return [self fetchMethodWithFuncid:funcid];\n    }\n    return url;\n}\n\n/// 透传协议请求参数获取\n/// @param url 请求URL\n+ (NSDictionary *)requestDictForPassthroughProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"Url\" : [self fetchUrlParamsWithUrl:url funcid:funcid isNew:isNew],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:url forKey:@\"PostParam\"];\n    }\n\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //这边固定走 自运营条件单后台，这两个参数在该协议是没有用的。\n        [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n    }\n\n    return [tempDict copy];\n}\n\n+ (NSDictionary *)requestDictForConditionalOrderProtocolWithUrl:(NSString *)url funcid:(NSString *)funcid isQuickCounterCondition:(BOOL)isQuickCounterCondition qsid:(NSString *)qsid {\n    BOOL isNew = [[HXGrayRelease shared] switchForKey:GrayReleaseWTConditionalOrderNew];\n    NSMutableDictionary *tempDict = [NSMutableDictionary dictionaryWithDictionary:@{\n        @\"host\" : [self fetchConditaionalHost:isNew],\n        @\"flag\" : @\"post\",\n        @\"param\" : [NSString wtSafeString:url],\n    }];\n    if (isNew) {\n        [tempDict safetySetObject:[self fetchMethodWithFuncid:funcid] forKey:@\"method\"];\n    }\n\n    //只有灰度开启的情况下，才添加相关参数\n    if ([[WTQuickCounterServiceChannelManager sharedManager] isSupportWTQuickCounterConditionalOrderOptimize]) {\n        //newprotocol 参数传1，请求使用新协议到快速柜台\n        [tempDict safetySetObject:@(1) forKey:@\"newprotocol\"];\n        if ([self needSendToZiYingWith:funcid]) {\n            //该功能号只能发到自运营后台\n            [tempDict safetySetObject:@(0) forKey:@\"quickgw\"];","relevantFile":"","relevantFileList":[],"filePath":"HXConditionalOrderDataManager.mm","template":"objective-cpp","multiRes":{"hipilot":"];\n    NSString *broker","deepseek-chat-lite":"];","CodeQwen2.5-7B":"];","copilot":"SString *broker"}},{"prefix":"+ (NSDictionary<NSString *,id> *)modelCustomPropertyMapper {\n    return @{@\"identifier\" : @\"id\"};\n}\n\n@end\n\n@interface HXConditionalOrderDataManager ()\n@property (nonatomic, strong) HXPriorConditionalOrderModel *priorCOModel;\n@property (nonatomic, strong) HXConditionOrderStockPresenter *stockPresenter;\n\n@end\n\n@implementation HXConditionalOrderDataManager\n\n+ (instancetype)shareManager {\n    static id instance_ = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance_ = [[HXConditionalOrderDataManager alloc] init];\n    });\n    return instance_;\n}\n\n- (void)beginMakingConditionalOrderWithPriorCOModel:(HXPriorConditionalOrderModel *)priorCOModel {\n    self.priorCOModel = priorCOModel;\n    [self.priorCOModel resetStateToDefault];\n}\n\n- (BOOL)modifyConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXChaXunBillDetailDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeModify;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持修改\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGJJX ||\n        billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGrid ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCJQD\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (BOOL)restartConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXBillDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOr","infill":" 0;\n        \n    }","suffix":"\n}\n\n+ (void)sendConditionalOrderRequestWithRequest:(HXSocketRequest *)request funcid:(NSString *)funcid reqProtocolId:(int)reqProtocolId quickgw:(NSString *)quickgw conditionType:(NSInteger)conditionType encode:(NSStringEncoding)encode params:(NSDictionary *)params resultBlock:(void(^)(HXResponseCOModel * __nonnull responseModel))resultBlcok {\n    [HXSocketFetcher requestWithRequest:request callback:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        if (error) {\n            [self logWithErrorType:@\"-1001\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, [WTAMLogTool getLogMessageWithError:error]]];\n            HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1001 errorMessage:HX_LOAD_TIPS(@\"请求超时\")];\n            HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n            resultBlcok(responseModel);\n        }\n        else {\n            ///将返回值转换成HXResponseCOMoodel\n            if (data.modelType == StuffModelTypeXml || data.modelType == StuffModelTypeJSON) {\n                NSData *xmlData = ((StuffXmlModel *)data).data;\n                NSString *textString = [[NSString alloc] initWithData:xmlData encoding:encode];\n                if (!textString) {\n                    textString = [[NSString alloc] initWithData:xmlData encoding:NSUTF8StringEncoding];\n                }\n                if (textString) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                    [textString stringByReplacingPercentEscapesUsingEncoding:encode];\n#pragma clang diagnostic pop\n                }\n                textString = [textString stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n                textString = [textString stringByReplacingOccurrencesOfString:@\"\\0\" withString:@\"\"];\n                WTAMLogDebug(WT_LOG_MODULE_PUBLIC, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"\\n==== 条件单请求应答 ====\\n%@\\n==== END ====\\n\", textString);\n                id responseData = [textString JSONValue];\n                if ([responseData isKindOfClass:[NSDictionary class]]) {\n                    HXResponseCOModel *responseModel = [HXResponseCOModel yy_modelWithDictionary:responseData];\n                    if (responseModel.error || responseModel.result) {\n                        WTAMLogInfo(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"请求返回，请求成功，funcid=%@,conditionType=%ld,error=%@,code=%ld\", funcid, conditionType, responseModel.error.message, responseModel.error.code);\n                        [self updateExpiredConditionalOrderInfoAfterResponse:responseModel.result];\n                        //条件单标识数据处理(只对查监控的中处理)\n                        [[WTConditionOrderMarkManager sharedInstance] updateCODrawLineData:responseModel requesrParams:params];\n                        resultBlcok(responseModel);\n                    }\n                    else {\n                        [self logWithErrorType:@\"-1003\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据异常\"]];\n                        HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1003 errorMessage:@\"数据异常\"];\n                        HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                        resultBlcok(responseModel);\n                    }\n                }\n                else {\n                    [self logWithErrorType:@\"-1002\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据类型错误\"]];\n                    HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1002 errorMessage:@\"数据类型错误\"];\n                    HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                    resultBlcok(responseModel);\n                }\n            }\n            else if (data.modelType == StuffModelTypeText){\n                StuffTextModel *textModel = (StuffTextModel *)data;\n                [self logWithErrorType:@\"-1004\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, textModel.text]];\n                HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1004 errorMessage:@\"请求失败\"];\n                HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                resultBlcok(responseModel);\n            }\n            else {\n                [self logWithErrorType:@\"-1002\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据类型错误\"]];\n                HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1002 errorMessage:@\"数据类型错误\"];\n                HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                resultBlcok(responseModel);\n            }\n        }\n    }];\n}\n\n+ (void)quickConditionalRequestCheckWithParams:(NSString *)paramsurl encode:(NSStringEncoding)encode funcid:(NSString *)funcid sendRequestHandle:(SendRequestHandle)sendRequestHandle{\n    //新建和修改条件单需要进行校验拦截\n    if (![self needCheckRequestWithFuncId:funcid]) {\n        if (sendRequestHandle) {\n            sendRequestHandle(YES, @\"\");\n        }\n        return;\n    }\n    NSDictionary *dict = @{\n        @\"host\":@\"ConditionalOrderNew\",\n        @\"Url\":@\"condition/check/v1/check_cloud_order\",\n        @\"flag\" : @\"post\",\n        @\"PostParam\":paramsurl\n    };\n\n    [HXSocketFetcher requestWithProtocolID:kZYProtocolId pageID:kZYPageId params:dict callback:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        //默认允许进行请求，只有后台返回明确的错误代码（code < 0）的情况需要进行拦截\n        BOOL needSendRequest = YES;\n        NSString *errorMsg = @\"\";\n        if (data.modelType == StuffModelTypeXml || data.modelType == StuffModelTypeJSON) {\n            NSData *xmlData = ((StuffXmlModel *)data).data;\n            NSString *textString = [[NSString alloc] initWithData:xmlData encoding:encode];\n            if (textString) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                [textString stringByReplacingPercentEscapesUsingEncoding:encode];\n#pragma clang diagnostic pop\n            }\n            textString = [textString stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n            textString = [textString stringByReplacingOccurrencesOfString:@\"\\0\" withString:@\"\"];\n            id responseData = [textString JSONValue];\n            if ([responseData isKindOfClass:[NSDictionary class]]) {\n                NSNumber *statusCode = [responseData thsNumberForKey:@\"status_code\"];\n                //请求code小于0 需要进行拦截\n                if (statusCode.integerValue < 0) {\n                    errorMsg = [responseData thsStringForKey:@\"status_msg\"];\n                    needSendRequest = NO;\n                }\n            }\n        }\n        if (sendRequestHandle) {\n            sendRequestHandle(needSendRequest, errorMsg);\n        }\n    }];\n}\n\n+ (BOOL)needCheckRequestWithFuncId:(NSString *)funcid {\n    NSArray *funcArr = @[\n        @(HXPriorConditionalOrderTypeNew),\n        @(HXPriorConditionalOrderTypeModify)\n    ];\n    return [funcArr containsObject:@([funcid integerValue])];\n}\n\n+ (void)ifHasMonitoringGuoZhaiToSuspend {\n    NSString *brokerid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].yybId ?: @\"\";\\","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"derType:self.priorCOModel.coType];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"条件单类型错误\")];\n        return NO;\n    }","deepseek-chat-lite":"der];","CodeQwen2.5-7B":"derWithStockCode:stockCode];","copilot":" 0;\n        \n    }"}},{"prefix":"    return @{@\"identifier\" : @\"id\"};\n}\n\n@end\n\n@interface HXConditionalOrderDataManager ()\n@property (nonatomic, strong) HXPriorConditionalOrderModel *priorCOModel;\n@property (nonatomic, strong) HXConditionOrderStockPresenter *stockPresenter;\n\n@end\n\n@implementation HXConditionalOrderDataManager\n\n+ (instancetype)shareManager {\n    static id instance_ = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance_ = [[HXConditionalOrderDataManager alloc] init];\n    });\n    return instance_;\n}\n\n- (void)beginMakingConditionalOrderWithPriorCOModel:(HXPriorConditionalOrderModel *)priorCOModel {\n    self.priorCOModel = priorCOModel;\n    [self.priorCOModel resetStateToDefault];\n}\n\n- (BOOL)modifyConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXChaXunBillDetailDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeModify;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持修改\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGJJX ||\n        billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGrid ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCJQD\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (BOOL)restartConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXBillDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                        ","infill":");\n        //创建一个红色的view","suffix":"\n        \n    }\n}\n\n+ (void)sendConditionalOrderRequestWithRequest:(HXSocketRequest *)request funcid:(NSString *)funcid reqProtocolId:(int)reqProtocolId quickgw:(NSString *)quickgw conditionType:(NSInteger)conditionType encode:(NSStringEncoding)encode params:(NSDictionary *)params resultBlock:(void(^)(HXResponseCOModel * __nonnull responseModel))resultBlcok {\n    [HXSocketFetcher requestWithRequest:request callback:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        if (error) {\n            [self logWithErrorType:@\"-1001\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, [WTAMLogTool getLogMessageWithError:error]]];\n            HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1001 errorMessage:HX_LOAD_TIPS(@\"请求超时\")];\n            HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n            resultBlcok(responseModel);\n        }\n        else {\n            ///将返回值转换成HXResponseCOMoodel\n            if (data.modelType == StuffModelTypeXml || data.modelType == StuffModelTypeJSON) {\n                NSData *xmlData = ((StuffXmlModel *)data).data;\n                NSString *textString = [[NSString alloc] initWithData:xmlData encoding:encode];\n                if (!textString) {\n                    textString = [[NSString alloc] initWithData:xmlData encoding:NSUTF8StringEncoding];\n                }\n                if (textString) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                    [textString stringByReplacingPercentEscapesUsingEncoding:encode];\n#pragma clang diagnostic pop\n                }\n                textString = [textString stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n                textString = [textString stringByReplacingOccurrencesOfString:@\"\\0\" withString:@\"\"];\n                WTAMLogDebug(WT_LOG_MODULE_PUBLIC, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"\\n==== 条件单请求应答 ====\\n%@\\n==== END ====\\n\", textString);\n                id responseData = [textString JSONValue];\n                if ([responseData isKindOfClass:[NSDictionary class]]) {\n                    HXResponseCOModel *responseModel = [HXResponseCOModel yy_modelWithDictionary:responseData];\n                    if (responseModel.error || responseModel.result) {\n                        WTAMLogInfo(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"请求返回，请求成功，funcid=%@,conditionType=%ld,error=%@,code=%ld\", funcid, conditionType, responseModel.error.message, responseModel.error.code);\n                        [self updateExpiredConditionalOrderInfoAfterResponse:responseModel.result];\n                        //条件单标识数据处理(只对查监控的中处理)\n                        [[WTConditionOrderMarkManager sharedInstance] updateCODrawLineData:responseModel requesrParams:params];\n                        resultBlcok(responseModel);\n                    }\n                    else {\n                        [self logWithErrorType:@\"-1003\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据异常\"]];\n                        HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1003 errorMessage:@\"数据异常\"];\n                        HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                        resultBlcok(responseModel);\n                    }\n                }\n                else {\n                    [self logWithErrorType:@\"-1002\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据类型错误\"]];\n                    HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1002 errorMessage:@\"数据类型错误\"];\n                    HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                    resultBlcok(responseModel);\n                }\n            }\n            else if (data.modelType == StuffModelTypeText){\n                StuffTextModel *textModel = (StuffTextModel *)data;\n                [self logWithErrorType:@\"-1004\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, textModel.text]];\n                HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1004 errorMessage:@\"请求失败\"];\n                HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                resultBlcok(responseModel);\n            }\n            else {\n                [self logWithErrorType:@\"-1002\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据类型错误\"]];\n                HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1002 errorMessage:@\"数据类型错误\"];\n                HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                resultBlcok(responseModel);\n            }\n        }\n    }];\n}\n\n+ (void)quickConditionalRequestCheckWithParams:(NSString *)paramsurl encode:(NSStringEncoding)encode funcid:(NSString *)funcid sendRequestHandle:(SendRequestHandle)sendRequestHandle{\n    //新建和修改条件单需要进行校验拦截\n    if (![self needCheckRequestWithFuncId:funcid]) {\n        if (sendRequestHandle) {\n            sendRequestHandle(YES, @\"\");\n        }\n        return;\n    }\n    NSDictionary *dict = @{\n        @\"host\":@\"ConditionalOrderNew\",\n        @\"Url\":@\"condition/check/v1/check_cloud_order\",\n        @\"flag\" : @\"post\",\n        @\"PostParam\":paramsurl\n    };\n\n    [HXSocketFetcher requestWithProtocolID:kZYProtocolId pageID:kZYPageId params:dict callback:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        //默认允许进行请求，只有后台返回明确的错误代码（code < 0）的情况需要进行拦截\n        BOOL needSendRequest = YES;\n        NSString *errorMsg = @\"\";\n        if (data.modelType == StuffModelTypeXml || data.modelType == StuffModelTypeJSON) {\n            NSData *xmlData = ((StuffXmlModel *)data).data;\n            NSString *textString = [[NSString alloc] initWithData:xmlData encoding:encode];\n            if (textString) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                [textString stringByReplacingPercentEscapesUsingEncoding:encode];\n#pragma clang diagnostic pop\n            }\n            textString = [textString stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n            textString = [textString stringByReplacingOccurrencesOfString:@\"\\0\" withString:@\"\"];\n            id responseData = [textString JSONValue];\n            if ([responseData isKindOfClass:[NSDictionary class]]) {\n                NSNumber *statusCode = [responseData thsNumberForKey:@\"status_code\"];\n                //请求code小于0 需要进行拦截\n                if (statusCode.integerValue < 0) {\n                    errorMsg = [responseData thsStringForKey:@\"status_msg\"];\n                    needSendRequest = NO;\n                }\n            }\n        }\n        if (sendRequestHandle) {\n            sendRequestHandle(needSendRequest, errorMsg);\n        }\n    }];\n}\n\n+ (BOOL)needCheckRequestWithFuncId:(NSString *)funcid {\n    NSArray *funcArr = @[\n        @(HXPriorConditionalOrderTypeNew),\n        @(HXPriorConditionalOrderTypeModify)\n    ];\n    return [funcArr containsObject:@([funcid integerValue])];\n}\n\n+ (void)ifHasMonitoringGuoZhaiToSuspend {\n    NSString *brokerid = [[HXWTAccountManager sharedInstance] getCurAccountInfor]","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"withStockMarket:stockMarket\n                         withConditionalType:self.priorCOModel.coType];\n    if (!isSupportTiaoJianDan) {","deepseek-chat-lite":"                                                                  broker:self.priorCOModel.billDataCOModel.broker];","CodeQwen2.5-7B":"                      stockMarket:stockMarket];","copilot":");\n        //创建一个红色的view"}},{"prefix":"}\n\n@end\n\n@interface HXConditionalOrderDataManager ()\n@property (nonatomic, strong) HXPriorConditionalOrderModel *priorCOModel;\n@property (nonatomic, strong) HXConditionOrderStockPresenter *stockPresenter;\n\n@end\n\n@implementation HXConditionalOrderDataManager\n\n+ (instancetype)shareManager {\n    static id instance_ = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance_ = [[HXConditionalOrderDataManager alloc] init];\n    });\n    return instance_;\n}\n\n- (void)beginMakingConditionalOrderWithPriorCOModel:(HXPriorConditionalOrderModel *)priorCOModel {\n    self.priorCOModel = priorCOModel;\n    [self.priorCOModel resetStateToDefault];\n}\n\n- (BOOL)modifyConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXChaXunBillDetailDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeModify;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持修改\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGJJX ||\n        billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGrid ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCJQD\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (BOOL)restartConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXBillDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                  ","infill":"View.backgroundColor = [UIColor redColor];\n     ","suffix":"   redView.frame = CGRectMake(100, 100, 100, 100);\n        [[UIApplication sharedApplication].keyWindow addSubview:redView];\n        \n    }\n}\n\n+ (void)sendConditionalOrderRequestWithRequest:(HXSocketRequest *)request funcid:(NSString *)funcid reqProtocolId:(int)reqProtocolId quickgw:(NSString *)quickgw conditionType:(NSInteger)conditionType encode:(NSStringEncoding)encode params:(NSDictionary *)params resultBlock:(void(^)(HXResponseCOModel * __nonnull responseModel))resultBlcok {\n    [HXSocketFetcher requestWithRequest:request callback:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        if (error) {\n            [self logWithErrorType:@\"-1001\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, [WTAMLogTool getLogMessageWithError:error]]];\n            HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1001 errorMessage:HX_LOAD_TIPS(@\"请求超时\")];\n            HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n            resultBlcok(responseModel);\n        }\n        else {\n            ///将返回值转换成HXResponseCOMoodel\n            if (data.modelType == StuffModelTypeXml || data.modelType == StuffModelTypeJSON) {\n                NSData *xmlData = ((StuffXmlModel *)data).data;\n                NSString *textString = [[NSString alloc] initWithData:xmlData encoding:encode];\n                if (!textString) {\n                    textString = [[NSString alloc] initWithData:xmlData encoding:NSUTF8StringEncoding];\n                }\n                if (textString) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                    [textString stringByReplacingPercentEscapesUsingEncoding:encode];\n#pragma clang diagnostic pop\n                }\n                textString = [textString stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n                textString = [textString stringByReplacingOccurrencesOfString:@\"\\0\" withString:@\"\"];\n                WTAMLogDebug(WT_LOG_MODULE_PUBLIC, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"\\n==== 条件单请求应答 ====\\n%@\\n==== END ====\\n\", textString);\n                id responseData = [textString JSONValue];\n                if ([responseData isKindOfClass:[NSDictionary class]]) {\n                    HXResponseCOModel *responseModel = [HXResponseCOModel yy_modelWithDictionary:responseData];\n                    if (responseModel.error || responseModel.result) {\n                        WTAMLogInfo(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"请求返回，请求成功，funcid=%@,conditionType=%ld,error=%@,code=%ld\", funcid, conditionType, responseModel.error.message, responseModel.error.code);\n                        [self updateExpiredConditionalOrderInfoAfterResponse:responseModel.result];\n                        //条件单标识数据处理(只对查监控的中处理)\n                        [[WTConditionOrderMarkManager sharedInstance] updateCODrawLineData:responseModel requesrParams:params];\n                        resultBlcok(responseModel);\n                    }\n                    else {\n                        [self logWithErrorType:@\"-1003\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据异常\"]];\n                        HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1003 errorMessage:@\"数据异常\"];\n                        HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                        resultBlcok(responseModel);\n                    }\n                }\n                else {\n                    [self logWithErrorType:@\"-1002\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据类型错误\"]];\n                    HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1002 errorMessage:@\"数据类型错误\"];\n                    HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                    resultBlcok(responseModel);\n                }\n            }\n            else if (data.modelType == StuffModelTypeText){\n                StuffTextModel *textModel = (StuffTextModel *)data;\n                [self logWithErrorType:@\"-1004\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, textModel.text]];\n                HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1004 errorMessage:@\"请求失败\"];\n                HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                resultBlcok(responseModel);\n            }\n            else {\n                [self logWithErrorType:@\"-1002\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据类型错误\"]];\n                HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1002 errorMessage:@\"数据类型错误\"];\n                HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                resultBlcok(responseModel);\n            }\n        }\n    }];\n}\n\n+ (void)quickConditionalRequestCheckWithParams:(NSString *)paramsurl encode:(NSStringEncoding)encode funcid:(NSString *)funcid sendRequestHandle:(SendRequestHandle)sendRequestHandle{\n    //新建和修改条件单需要进行校验拦截\n    if (![self needCheckRequestWithFuncId:funcid]) {\n        if (sendRequestHandle) {\n            sendRequestHandle(YES, @\"\");\n        }\n        return;\n    }\n    NSDictionary *dict = @{\n        @\"host\":@\"ConditionalOrderNew\",\n        @\"Url\":@\"condition/check/v1/check_cloud_order\",\n        @\"flag\" : @\"post\",\n        @\"PostParam\":paramsurl\n    };\n\n    [HXSocketFetcher requestWithProtocolID:kZYProtocolId pageID:kZYPageId params:dict callback:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        //默认允许进行请求，只有后台返回明确的错误代码（code < 0）的情况需要进行拦截\n        BOOL needSendRequest = YES;\n        NSString *errorMsg = @\"\";\n        if (data.modelType == StuffModelTypeXml || data.modelType == StuffModelTypeJSON) {\n            NSData *xmlData = ((StuffXmlModel *)data).data;\n            NSString *textString = [[NSString alloc] initWithData:xmlData encoding:encode];\n            if (textString) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                [textString stringByReplacingPercentEscapesUsingEncoding:encode];\n#pragma clang diagnostic pop\n            }\n            textString = [textString stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n            textString = [textString stringByReplacingOccurrencesOfString:@\"\\0\" withString:@\"\"];\n            id responseData = [textString JSONValue];\n            if ([responseData isKindOfClass:[NSDictionary class]]) {\n                NSNumber *statusCode = [responseData thsNumberForKey:@\"status_code\"];\n                //请求code小于0 需要进行拦截\n                if (statusCode.integerValue < 0) {\n                    errorMsg = [responseData thsStringForKey:@\"status_msg\"];\n                    needSendRequest = NO;\n                }\n            }\n        }\n        if (sendRequestHandle) {\n            sendRequestHandle(needSendRequest, errorMsg);\n        }\n    }];\n}\n\n+ (BOOL)needCheckRequestWithFuncId:(NSString *)funcid {\n    NSArray *funcArr = @[\n        @(HXPriorConditionalOrderTypeNew),\n        @(HXPriorConditionalOrderTypeModify)\n    ];\n    return [funcArr containsObject:@([funcid integerValue])];\n}\n\\","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"stockMarket:stockMarket];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"该股票不适用\")];\n        return NO;\n    }","deepseek-chat-lite":"                   withStockMarket:stockMarket];","CodeQwen2.5-7B":"  stockMarket:stockMarket];","copilot":"View.backgroundColor = [UIColor redColor];\n     "}},{"prefix":"@property (nonatomic, strong) HXPriorConditionalOrderModel *priorCOModel;\n@property (nonatomic, strong) HXConditionOrderStockPresenter *stockPresenter;\n\n@end\n\n@implementation HXConditionalOrderDataManager\n\n+ (instancetype)shareManager {\n    static id instance_ = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance_ = [[HXConditionalOrderDataManager alloc] init];\n    });\n    return instance_;\n}\n\n- (void)beginMakingConditionalOrderWithPriorCOModel:(HXPriorConditionalOrderModel *)priorCOModel {\n    self.priorCOModel = priorCOModel;\n    [self.priorCOModel resetStateToDefault];\n}\n\n- (BOOL)modifyConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXChaXunBillDetailDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeModify;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持修改\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGJJX ||\n        billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGrid ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCJQD\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (BOOL)restartConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXBillDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                  ","infill":"  redView.frame = CGRectMake(100, 100, 100, 100);\n   ","suffix":"     [[UIApplication sharedApplication].keyWindow addSubview:redView];\n        \n    }\n}\n\n+ (void)sendConditionalOrderRequestWithRequest:(HXSocketRequest *)request funcid:(NSString *)funcid reqProtocolId:(int)reqProtocolId quickgw:(NSString *)quickgw conditionType:(NSInteger)conditionType encode:(NSStringEncoding)encode params:(NSDictionary *)params resultBlock:(void(^)(HXResponseCOModel * __nonnull responseModel))resultBlcok {\n    [HXSocketFetcher requestWithRequest:request callback:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        if (error) {\n            [self logWithErrorType:@\"-1001\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, [WTAMLogTool getLogMessageWithError:error]]];\n            HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1001 errorMessage:HX_LOAD_TIPS(@\"请求超时\")];\n            HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n            resultBlcok(responseModel);\n        }\n        else {\n            ///将返回值转换成HXResponseCOMoodel\n            if (data.modelType == StuffModelTypeXml || data.modelType == StuffModelTypeJSON) {\n                NSData *xmlData = ((StuffXmlModel *)data).data;\n                NSString *textString = [[NSString alloc] initWithData:xmlData encoding:encode];\n                if (!textString) {\n                    textString = [[NSString alloc] initWithData:xmlData encoding:NSUTF8StringEncoding];\n                }\n                if (textString) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                    [textString stringByReplacingPercentEscapesUsingEncoding:encode];\n#pragma clang diagnostic pop\n                }\n                textString = [textString stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n                textString = [textString stringByReplacingOccurrencesOfString:@\"\\0\" withString:@\"\"];\n                WTAMLogDebug(WT_LOG_MODULE_PUBLIC, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"\\n==== 条件单请求应答 ====\\n%@\\n==== END ====\\n\", textString);\n                id responseData = [textString JSONValue];\n                if ([responseData isKindOfClass:[NSDictionary class]]) {\n                    HXResponseCOModel *responseModel = [HXResponseCOModel yy_modelWithDictionary:responseData];\n                    if (responseModel.error || responseModel.result) {\n                        WTAMLogInfo(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"请求返回，请求成功，funcid=%@,conditionType=%ld,error=%@,code=%ld\", funcid, conditionType, responseModel.error.message, responseModel.error.code);\n                        [self updateExpiredConditionalOrderInfoAfterResponse:responseModel.result];\n                        //条件单标识数据处理(只对查监控的中处理)\n                        [[WTConditionOrderMarkManager sharedInstance] updateCODrawLineData:responseModel requesrParams:params];\n                        resultBlcok(responseModel);\n                    }\n                    else {\n                        [self logWithErrorType:@\"-1003\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据异常\"]];\n                        HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1003 errorMessage:@\"数据异常\"];\n                        HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                        resultBlcok(responseModel);\n                    }\n                }\n                else {\n                    [self logWithErrorType:@\"-1002\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据类型错误\"]];\n                    HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1002 errorMessage:@\"数据类型错误\"];\n                    HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                    resultBlcok(responseModel);\n                }\n            }\n            else if (data.modelType == StuffModelTypeText){\n                StuffTextModel *textModel = (StuffTextModel *)data;\n                [self logWithErrorType:@\"-1004\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, textModel.text]];\n                HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1004 errorMessage:@\"请求失败\"];\n                HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                resultBlcok(responseModel);\n            }\n            else {\n                [self logWithErrorType:@\"-1002\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据类型错误\"]];\n                HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1002 errorMessage:@\"数据类型错误\"];\n                HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                resultBlcok(responseModel);\n            }\n        }\n    }];\n}\n\n+ (void)quickConditionalRequestCheckWithParams:(NSString *)paramsurl encode:(NSStringEncoding)encode funcid:(NSString *)funcid sendRequestHandle:(SendRequestHandle)sendRequestHandle{\n    //新建和修改条件单需要进行校验拦截\n    if (![self needCheckRequestWithFuncId:funcid]) {\n        if (sendRequestHandle) {\n            sendRequestHandle(YES, @\"\");\n        }\n        return;\n    }\n    NSDictionary *dict = @{\n        @\"host\":@\"ConditionalOrderNew\",\n        @\"Url\":@\"condition/check/v1/check_cloud_order\",\n        @\"flag\" : @\"post\",\n        @\"PostParam\":paramsurl\n    };\n\n    [HXSocketFetcher requestWithProtocolID:kZYProtocolId pageID:kZYPageId params:dict callback:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        //默认允许进行请求，只有后台返回明确的错误代码（code < 0）的情况需要进行拦截\n        BOOL needSendRequest = YES;\n        NSString *errorMsg = @\"\";\n        if (data.modelType == StuffModelTypeXml || data.modelType == StuffModelTypeJSON) {\n            NSData *xmlData = ((StuffXmlModel *)data).data;\n            NSString *textString = [[NSString alloc] initWithData:xmlData encoding:encode];\n            if (textString) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                [textString stringByReplacingPercentEscapesUsingEncoding:encode];\n#pragma clang diagnostic pop\n            }\n            textString = [textString stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n            textString = [textString stringByReplacingOccurrencesOfString:@\"\\0\" withString:@\"\"];\n            id responseData = [textString JSONValue];\n            if ([responseData isKindOfClass:[NSDictionary class]]) {\n                NSNumber *statusCode = [responseData thsNumberForKey:@\"status_code\"];\n                //请求code小于0 需要进行拦截\n                if (statusCode.integerValue < 0) {\n                    errorMsg = [responseData thsStringForKey:@\"status_msg\"];\n                    needSendRequest = NO;\n                }\n            }\n        }\n        if (sendRequestHandle) {\n            sendRequestHandle(needSendRequest, errorMsg);\n        }\n    }];\n}\n\n+ (BOOL)needCheckRequestWithFuncId:(NSString *)funcid {\n    NSArray *funcArr = @[\n        @(HXPriorConditionalOrderTypeNew),\n        @(HXPriorConditionalOrderTypeModify)\n    ];\n    return [funcArr containsObject:@([funcid integerValue])];\n}\n\n+ (void)ifHasMonitoringGuoZhaiToSuspend {\n    NSStrin","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"                                                    stockCode:stockCode\n                                                                                    stockName:stockName];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"该股票不支持此类条件单\")];","deepseek-chat-lite":"                                                                   stockCode:stockCode];","CodeQwen2.5-7B":"                                                                  stockCode:stockCode];","copilot":"  redView.frame = CGRectMake(100, 100, 100, 100);\n   "}},{"prefix":"@property (nonatomic, strong) HXConditionOrderStockPresenter *stockPresenter;\n\n@end\n\n@implementation HXConditionalOrderDataManager\n\n+ (instancetype)shareManager {\n    static id instance_ = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance_ = [[HXConditionalOrderDataManager alloc] init];\n    });\n    return instance_;\n}\n\n- (void)beginMakingConditionalOrderWithPriorCOModel:(HXPriorConditionalOrderModel *)priorCOModel {\n    self.priorCOModel = priorCOModel;\n    [self.priorCOModel resetStateToDefault];\n}\n\n- (BOOL)modifyConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXChaXunBillDetailDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeModify;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持修改\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGJJX ||\n        billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGrid ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCJQD\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (BOOL)restartConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXBillDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:","infill":"    [[UIApplication sharedApplication].keyWindow addSubview:redView];\n        \n    }\n}\n\n+ (void)sendConditionalOrderRequestWithRe","suffix":"quest:(HXSocketRequest *)request funcid:(NSString *)funcid reqProtocolId:(int)reqProtocolId quickgw:(NSString *)quickgw conditionType:(NSInteger)conditionType encode:(NSStringEncoding)encode params:(NSDictionary *)params resultBlock:(void(^)(HXResponseCOModel * __nonnull responseModel))resultBlcok {\n    [HXSocketFetcher requestWithRequest:request callback:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        if (error) {\n            [self logWithErrorType:@\"-1001\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, [WTAMLogTool getLogMessageWithError:error]]];\n            HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1001 errorMessage:HX_LOAD_TIPS(@\"请求超时\")];\n            HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n            resultBlcok(responseModel);\n        }\n        else {\n            ///将返回值转换成HXResponseCOMoodel\n            if (data.modelType == StuffModelTypeXml || data.modelType == StuffModelTypeJSON) {\n                NSData *xmlData = ((StuffXmlModel *)data).data;\n                NSString *textString = [[NSString alloc] initWithData:xmlData encoding:encode];\n                if (!textString) {\n                    textString = [[NSString alloc] initWithData:xmlData encoding:NSUTF8StringEncoding];\n                }\n                if (textString) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                    [textString stringByReplacingPercentEscapesUsingEncoding:encode];\n#pragma clang diagnostic pop\n                }\n                textString = [textString stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n                textString = [textString stringByReplacingOccurrencesOfString:@\"\\0\" withString:@\"\"];\n                WTAMLogDebug(WT_LOG_MODULE_PUBLIC, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"\\n==== 条件单请求应答 ====\\n%@\\n==== END ====\\n\", textString);\n                id responseData = [textString JSONValue];\n                if ([responseData isKindOfClass:[NSDictionary class]]) {\n                    HXResponseCOModel *responseModel = [HXResponseCOModel yy_modelWithDictionary:responseData];\n                    if (responseModel.error || responseModel.result) {\n                        WTAMLogInfo(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"请求返回，请求成功，funcid=%@,conditionType=%ld,error=%@,code=%ld\", funcid, conditionType, responseModel.error.message, responseModel.error.code);\n                        [self updateExpiredConditionalOrderInfoAfterResponse:responseModel.result];\n                        //条件单标识数据处理(只对查监控的中处理)\n                        [[WTConditionOrderMarkManager sharedInstance] updateCODrawLineData:responseModel requesrParams:params];\n                        resultBlcok(responseModel);\n                    }\n                    else {\n                        [self logWithErrorType:@\"-1003\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据异常\"]];\n                        HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1003 errorMessage:@\"数据异常\"];\n                        HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                        resultBlcok(responseModel);\n                    }\n                }\n                else {\n                    [self logWithErrorType:@\"-1002\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据类型错误\"]];\n                    HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1002 errorMessage:@\"数据类型错误\"];\n                    HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                    resultBlcok(responseModel);\n                }\n            }\n            else if (data.modelType == StuffModelTypeText){\n                StuffTextModel *textModel = (StuffTextModel *)data;\n                [self logWithErrorType:@\"-1004\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, textModel.text]];\n                HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1004 errorMessage:@\"请求失败\"];\n                HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                resultBlcok(responseModel);\n            }\n            else {\n                [self logWithErrorType:@\"-1002\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据类型错误\"]];\n                HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1002 errorMessage:@\"数据类型错误\"];\n                HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                resultBlcok(responseModel);\n            }\n        }\n    }];\n}\n\n+ (void)quickConditionalRequestCheckWithParams:(NSString *)paramsurl encode:(NSStringEncoding)encode funcid:(NSString *)funcid sendRequestHandle:(SendRequestHandle)sendRequestHandle{\n    //新建和修改条件单需要进行校验拦截\n    if (![self needCheckRequestWithFuncId:funcid]) {\n        if (sendRequestHandle) {\n            sendRequestHandle(YES, @\"\");\n        }\n        return;\n    }\n    NSDictionary *dict = @{\n        @\"host\":@\"ConditionalOrderNew\",\n        @\"Url\":@\"condition/check/v1/check_cloud_order\",\n        @\"flag\" : @\"post\",\n        @\"PostParam\":paramsurl\n    };\n\n    [HXSocketFetcher requestWithProtocolID:kZYProtocolId pageID:kZYPageId params:dict callback:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        //默认允许进行请求，只有后台返回明确的错误代码（code < 0）的情况需要进行拦截\n        BOOL needSendRequest = YES;\n        NSString *errorMsg = @\"\";\n        if (data.modelType == StuffModelTypeXml || data.modelType == StuffModelTypeJSON) {\n            NSData *xmlData = ((StuffXmlModel *)data).data;\n            NSString *textString = [[NSString alloc] initWithData:xmlData encoding:encode];\n            if (textString) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                [textString stringByReplacingPercentEscapesUsingEncoding:encode];\n#pragma clang diagnostic pop\n            }\n            textString = [textString stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n            textString = [textString stringByReplacingOccurrencesOfString:@\"\\0\" withString:@\"\"];\n            id responseData = [textString JSONValue];\n            if ([responseData isKindOfClass:[NSDictionary class]]) {\n                NSNumber *statusCode = [responseData thsNumberForKey:@\"status_code\"];\n                //请求code小于0 需要进行拦截\n                if (statusCode.integerValue < 0) {\n                    errorMsg = [responseData thsStringForKey:@\"status_msg\"];\n                    needSendRequest = NO;\n                }\n            }\n        }\n        if (sendRequestHandle) {\n            sendRequestHandle(needSendRequest, errorMsg);\n        }\n    }];\n}\n\n+ (BOOL)needCheckRequestWithFuncId:(NSString *)funcid {\n    NSArray *funcArr = @[\n        @(HXPriorConditionalOrderTypeNew),\n        @(HXPriorConditionalOrderTypeModify)\n    ];\n    return [funcArr containsObject:@([funcid integerValue])];\n}\n\n+ (void)ifHasMonitoringGuoZhaiToSuspend {\n    NSString *brokerid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].yybId ?: @\"\";\n    NSInteger userid = [[HXUserInfo getUserId] ","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"stockName];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"该股票不适用\")];\n        return NO;\n    }","deepseek-chat-lite":"stockName];","CodeQwen2.5-7B":"stockName];","copilot":"    [[UIApplication sharedApplication].keyWindow addSubview:redView];\n        \n    }\n}\n\n+ (void)sendConditionalOrderRequestWithRe"}},{"prefix":"+ (NSDictionary<NSString *,id> *)modelCustomPropertyMapper {\n    return @{@\"identifier\" : @\"id\"};\n}\n\n@end\n\n@interface HXConditionalOrderDataManager ()\n@property (nonatomic, strong) HXPriorConditionalOrderModel *priorCOModel;\n@property (nonatomic, strong) HXConditionOrderStockPresenter *stockPresenter;\n\n@end\n\n@implementation HXConditionalOrderDataManager\n\n+ (instancetype)shareManager {\n    static id instance_ = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance_ = [[HXConditionalOrderDataManager alloc] init];\n    });\n    return instance_;\n}\n\n- (void)beginMakingConditionalOrderWithPriorCOModel:(HXPriorConditionalOrderModel *)priorCOModel {\n    self.priorCOModel = priorCOModel;\n    [self.priorCOModel resetStateToDefault];\n}\n\n- (BOOL)modifyConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXChaXunBillDetailDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeModify;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持修改\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGJJX ||\n        billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGrid ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCJQD\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (BOOL)restartConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXBillDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOr","infill":"\n    ","suffix":"    //创建一个红色的view\n        UIView *redView = [[UIView alloc] init];\n        redView.backgroundColor = [UIColor redColor];\n        redView.frame = CGRectMake(100, 100, 100, 100);\n        [[UIApplication sharedApplication].keyWindow addSubview:redView];\n        \n    }\n}\n\n+ (void)sendConditionalOrderRequestWithRequest:(HXSocketRequest *)request funcid:(NSString *)funcid reqProtocolId:(int)reqProtocolId quickgw:(NSString *)quickgw conditionType:(NSInteger)conditionType encode:(NSStringEncoding)encode params:(NSDictionary *)params resultBlock:(void(^)(HXResponseCOModel * __nonnull responseModel))resultBlcok {\n    [HXSocketFetcher requestWithRequest:request callback:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        if (error) {\n            [self logWithErrorType:@\"-1001\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, [WTAMLogTool getLogMessageWithError:error]]];\n            HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1001 errorMessage:HX_LOAD_TIPS(@\"请求超时\")];\n            HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n            resultBlcok(responseModel);\n        }\n        else {\n            ///将返回值转换成HXResponseCOMoodel\n            if (data.modelType == StuffModelTypeXml || data.modelType == StuffModelTypeJSON) {\n                NSData *xmlData = ((StuffXmlModel *)data).data;\n                NSString *textString = [[NSString alloc] initWithData:xmlData encoding:encode];\n                if (!textString) {\n                    textString = [[NSString alloc] initWithData:xmlData encoding:NSUTF8StringEncoding];\n                }\n                if (textString) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                    [textString stringByReplacingPercentEscapesUsingEncoding:encode];\n#pragma clang diagnostic pop\n                }\n                textString = [textString stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n                textString = [textString stringByReplacingOccurrencesOfString:@\"\\0\" withString:@\"\"];\n                WTAMLogDebug(WT_LOG_MODULE_PUBLIC, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"\\n==== 条件单请求应答 ====\\n%@\\n==== END ====\\n\", textString);\n                id responseData = [textString JSONValue];\n                if ([responseData isKindOfClass:[NSDictionary class]]) {\n                    HXResponseCOModel *responseModel = [HXResponseCOModel yy_modelWithDictionary:responseData];\n                    if (responseModel.error || responseModel.result) {\n                        WTAMLogInfo(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"请求返回，请求成功，funcid=%@,conditionType=%ld,error=%@,code=%ld\", funcid, conditionType, responseModel.error.message, responseModel.error.code);\n                        [self updateExpiredConditionalOrderInfoAfterResponse:responseModel.result];\n                        //条件单标识数据处理(只对查监控的中处理)\n                        [[WTConditionOrderMarkManager sharedInstance] updateCODrawLineData:responseModel requesrParams:params];\n                        resultBlcok(responseModel);\n                    }\n                    else {\n                        [self logWithErrorType:@\"-1003\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据异常\"]];\n                        HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1003 errorMessage:@\"数据异常\"];\n                        HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                        resultBlcok(responseModel);\n                    }\n                }\n                else {\n                    [self logWithErrorType:@\"-1002\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据类型错误\"]];\n                    HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1002 errorMessage:@\"数据类型错误\"];\n                    HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                    resultBlcok(responseModel);\n                }\n            }\n            else if (data.modelType == StuffModelTypeText){\n                StuffTextModel *textModel = (StuffTextModel *)data;\n                [self logWithErrorType:@\"-1004\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, textModel.text]];\n                HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1004 errorMessage:@\"请求失败\"];\n                HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                resultBlcok(responseModel);\n            }\n            else {\n                [self logWithErrorType:@\"-1002\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据类型错误\"]];\n                HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1002 errorMessage:@\"数据类型错误\"];\n                HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                resultBlcok(responseModel);\n            }\n        }\n    }];\n}\n\n+ (void)quickConditionalRequestCheckWithParams:(NSString *)paramsurl encode:(NSStringEncoding)encode funcid:(NSString *)funcid sendRequestHandle:(SendRequestHandle)sendRequestHandle{\n    //新建和修改条件单需要进行校验拦截\n    if (![self needCheckRequestWithFuncId:funcid]) {\n        if (sendRequestHandle) {\n            sendRequestHandle(YES, @\"\");\n        }\n        return;\n    }\n    NSDictionary *dict = @{\n        @\"host\":@\"ConditionalOrderNew\",\n        @\"Url\":@\"condition/check/v1/check_cloud_order\",\n        @\"flag\" : @\"post\",\n        @\"PostParam\":paramsurl\n    };\n\n    [HXSocketFetcher requestWithProtocolID:kZYProtocolId pageID:kZYPageId params:dict callback:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        //默认允许进行请求，只有后台返回明确的错误代码（code < 0）的情况需要进行拦截\n        BOOL needSendRequest = YES;\n        NSString *errorMsg = @\"\";\n        if (data.modelType == StuffModelTypeXml || data.modelType == StuffModelTypeJSON) {\n            NSData *xmlData = ((StuffXmlModel *)data).data;\n            NSString *textString = [[NSString alloc] initWithData:xmlData encoding:encode];\n            if (textString) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                [textString stringByReplacingPercentEscapesUsingEncoding:encode];\n#pragma clang diagnostic pop\n            }\n            textString = [textString stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n            textString = [textString stringByReplacingOccurrencesOfString:@\"\\0\" withString:@\"\"];\n            id responseData = [textString JSONValue];\n            if ([responseData isKindOfClass:[NSDictionary class]]) {\n                NSNumber *statusCode = [responseData thsNumberForKey:@\"status_code\"];\n                //请求code小于0 需要进行拦截\n                if (statusCode.integerValue < 0) {\n                    errorMsg = [responseData thsStringForKey:@\"status_msg\"];\n                    needSendRequest = NO;\n                }\n            }\n        }\n        if (sendRequestHandle) {\n            sendRequestHandle(needSendRequest, errorMsg);\n        }\n    }];\n}\n\n+ (BOOL)needCheckRequestWithFuncId:(NSString *)funcid {\n    NSArray *funcArr = @[\n        @(HXPriorConditionalOrderTyp","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"derType:self.priorCOModel.coType];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"该条件单类型不支持\")];\n        return NO;\n    }","deepseek-chat-lite":"der];","CodeQwen2.5-7B":"derWithStockCode:stockCode];","copilot":"\n    "}},{"prefix":"    return @{@\"identifier\" : @\"id\"};\n}\n\n@end\n\n@interface HXConditionalOrderDataManager ()\n@property (nonatomic, strong) HXPriorConditionalOrderModel *priorCOModel;\n@property (nonatomic, strong) HXConditionOrderStockPresenter *stockPresenter;\n\n@end\n\n@implementation HXConditionalOrderDataManager\n\n+ (instancetype)shareManager {\n    static id instance_ = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance_ = [[HXConditionalOrderDataManager alloc] init];\n    });\n    return instance_;\n}\n\n- (void)beginMakingConditionalOrderWithPriorCOModel:(HXPriorConditionalOrderModel *)priorCOModel {\n    self.priorCOModel = priorCOModel;\n    [self.priorCOModel resetStateToDefault];\n}\n\n- (BOOL)modifyConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXChaXunBillDetailDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeModify;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持修改\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGJJX ||\n        billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGrid ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCJQD\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (BOOL)restartConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXBillDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (void)endMakingConditionalOrder {\n    [self.priorCOModel resetStateToDefault];\n    self.priorCOModel = nil;\n    [self.stockPresenter pauseHqRequest];\n}\n\n- (HXPriorConditionalOrderModel *)priorConditionalOrderModel {\n    return self.priorCOModel;\n}\n\n#pragma mark - 获取股票信息\n- (void)updateChicangIfNeed {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (currentAccount.isRZRQ) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.pr","infill":" = 1;\n        ","suffix":"\n        //写一个红色的view\n        \n        \n        \n        \n    }\n}\n\n+ (void)sendConditionalOrderRequestWithRequest:(HXSocketRequest *)request funcid:(NSString *)funcid reqProtocolId:(int)reqProtocolId quickgw:(NSString *)quickgw conditionType:(NSInteger)conditionType encode:(NSStringEncoding)encode params:(NSDictionary *)params resultBlock:(void(^)(HXResponseCOModel * __nonnull responseModel))resultBlcok {\n    [HXSocketFetcher requestWithRequest:request callback:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        if (error) {\n            [self logWithErrorType:@\"-1001\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, [WTAMLogTool getLogMessageWithError:error]]];\n            HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1001 errorMessage:HX_LOAD_TIPS(@\"请求超时\")];\n            HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n            resultBlcok(responseModel);\n        }\n        else {\n            ///将返回值转换成HXResponseCOMoodel\n            if (data.modelType == StuffModelTypeXml || data.modelType == StuffModelTypeJSON) {\n                NSData *xmlData = ((StuffXmlModel *)data).data;\n                NSString *textString = [[NSString alloc] initWithData:xmlData encoding:encode];\n                if (!textString) {\n                    textString = [[NSString alloc] initWithData:xmlData encoding:NSUTF8StringEncoding];\n                }\n                if (textString) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                    [textString stringByReplacingPercentEscapesUsingEncoding:encode];\n#pragma clang diagnostic pop\n                }\n                textString = [textString stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n                textString = [textString stringByReplacingOccurrencesOfString:@\"\\0\" withString:@\"\"];\n                WTAMLogDebug(WT_LOG_MODULE_PUBLIC, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"\\n==== 条件单请求应答 ====\\n%@\\n==== END ====\\n\", textString);\n                id responseData = [textString JSONValue];\n                if ([responseData isKindOfClass:[NSDictionary class]]) {\n                    HXResponseCOModel *responseModel = [HXResponseCOModel yy_modelWithDictionary:responseData];\n                    if (responseModel.error || responseModel.result) {\n                        WTAMLogInfo(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_CONDITIONALORDER, @\"请求返回，请求成功，funcid=%@,conditionType=%ld,error=%@,code=%ld\", funcid, conditionType, responseModel.error.message, responseModel.error.code);\n                        [self updateExpiredConditionalOrderInfoAfterResponse:responseModel.result];\n                        //条件单标识数据处理(只对查监控的中处理)\n                        [[WTConditionOrderMarkManager sharedInstance] updateCODrawLineData:responseModel requesrParams:params];\n                        resultBlcok(responseModel);\n                    }\n                    else {\n                        [self logWithErrorType:@\"-1003\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据异常\"]];\n                        HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1003 errorMessage:@\"数据异常\"];\n                        HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                        resultBlcok(responseModel);\n                    }\n                }\n                else {\n                    [self logWithErrorType:@\"-1002\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据类型错误\"]];\n                    HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1002 errorMessage:@\"数据类型错误\"];\n                    HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                    resultBlcok(responseModel);\n                }\n            }\n            else if (data.modelType == StuffModelTypeText){\n                StuffTextModel *textModel = (StuffTextModel *)data;\n                [self logWithErrorType:@\"-1004\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, textModel.text]];\n                HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1004 errorMessage:@\"请求失败\"];\n                HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                resultBlcok(responseModel);\n            }\n            else {\n                [self logWithErrorType:@\"-1002\" funcid:funcid protocolId:reqProtocolId quickgw:quickgw detailsMsg:[NSString stringWithFormat:@\"请求返回，funcid=%@,conditionType=%ld,error=%@\", funcid, conditionType, @\"数据类型错误\"]];\n                HXErrorCOModel *errorModel = [[HXErrorCOModel alloc] initWithErrorCode:-1002 errorMessage:@\"数据类型错误\"];\n                HXResponseCOModel *responseModel = [[HXResponseCOModel alloc] initWithIdentifier:coIdentifier result:nil error:errorModel];\n                resultBlcok(responseModel);\n            }\n        }\n    }];\n}\n\n+ (void)quickConditionalRequestCheckWithParams:(NSString *)paramsurl encode:(NSStringEncoding)encode funcid:(NSString *)funcid sendRequestHandle:(SendRequestHandle)sendRequestHandle{\n    //新建和修改条件单需要进行校验拦截\n    if (![self needCheckRequestWithFuncId:funcid]) {\n        if (sendRequestHandle) {\n            sendRequestHandle(YES, @\"\");\n        }\n        return;\n    }\n    NSDictionary *dict = @{\n        @\"host\":@\"ConditionalOrderNew\",\n        @\"Url\":@\"condition/check/v1/check_cloud_order\",\n        @\"flag\" : @\"post\",\n        @\"PostParam\":paramsurl\n    };\n\n    [HXSocketFetcher requestWithProtocolID:kZYProtocolId pageID:kZYPageId params:dict callback:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        //默认允许进行请求，只有后台返回明确的错误代码（code < 0）的情况需要进行拦截\n        BOOL needSendRequest = YES;\n        NSString *errorMsg = @\"\";\n        if (data.modelType == StuffModelTypeXml || data.modelType == StuffModelTypeJSON) {\n            NSData *xmlData = ((StuffXmlModel *)data).data;\n            NSString *textString = [[NSString alloc] initWithData:xmlData encoding:encode];\n            if (textString) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                [textString stringByReplacingPercentEscapesUsingEncoding:encode];\n#pragma clang diagnostic pop\n            }\n            textString = [textString stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n            textString = [textString stringByReplacingOccurrencesOfString:@\"\\0\" withString:@\"\"];\n            id responseData = [textString JSONValue];\n            if ([responseData isKindOfClass:[NSDictionary class]]) {\n                NSNumber *statusCode = [responseData thsNumberForKey:@\"status_code\"];\n                //请求code小于0 需要进行拦截\n                if (statusCode.integerValue < 0) {\n                    errorMsg = [responseData thsStringForKey:@\"status_msg\"];\n                    needSendRequest = NO;\n                }\n            }\n        }\n        if (sendRequestHandle) {\n            sendRequestHandle(needSendRequest, errorMsg);\n        }\n    }];\n}\n\n+ (BOOL)needCheckRequestWithFuncId:(NSString *)funcid {\n    NSArray *funcArr = @[\n        @(HXPriorConditionalOrderTypeNew),\n        @(HXPriorConditionalOrderTypeModify)\n    ];\n    return [funcArr containsObject:@([funcid integerValue])];\n}\n\n+ (void)ifHasMonitoringGuoZhaiToSuspend {\n    NSString *brokerid = [[HX","relevantFile":"","relevantFileList":[],"filePath":"HXConditionalOrderDataManager.mm","template":"objective-cpp","multiRes":{"hipilot":"iorCOModel.coType];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"该条件单类型不适用于当前交易时间\")];\n        return NO;\n    } else","deepseek-chat-lite":"iorCOModel.coType];","CodeQwen2.5-7B":"iorCOModel.coType];","copilot":" = 1;\n        "}},{"prefix":"            [[[ToastView alloc] initWithText:@\"添加成功，已同步至您电脑上的自选股!\"] show];\n        }\n    } else {\n        // 自选分组页面 的 编辑股票页面 的 添加股票页面\n        if (![[SSGGroupViewModel shareInstance] hasGroupAuthority]) {\n            [[[ToastView alloc] initWithText:@\"已添加至“自选股”\"] show];\n        } else {\n            [[[ToastView alloc] initWithText:@\"添加成功，已同步至您电脑上的自选股!\"] show];\n        }\n    }\n}\n\n- (void)deleteStockCodeResult:(HXUGCSelfStockModel *)model {\n    [_tableView reloadData]; // 必须要刷新一次\n    if (!model) {\n        // 说明不是从当前search页面发出的删除命令 得到的通知\n        return;\n    }\n    // 删除自选成功\n    [[[ToastView alloc] initWithText:@\"已移出“自选股”\"] show];\n}\n\n- (UIView *)viewForMessageCallBackView {\n    UIViewController *mainController = (UIViewController *) [((AMUITabFm *) [AMUIFrameWork shareingUIFramework]) getCurStackController];\n    return mainController.view;\n}\n\n- (id<UIKeyInput>)inputSubviewInView:(UIView *)view\n{\n    if ([view conformsToProtocol:@protocol(UIKeyInput)]) {\n        return (id<UIKeyInput>)view;\n    }\n    for (UIView *subview in view.subviews) {\n        id<UIKeyInput> inputView = [self inputSubviewInView:subview];\n        if (inputView) {\n            return inputView;\n        }\n    }\n    return nil;\n}\n\n//解析设置构件属性\n- (void)onFinishInflate\n{\n    _searchBar.donotChangeSelfTheme = YES;\n    _searchBar.donotChangeSubviewTheme = YES;\n    _searchBar.autocorrectionType = UITextAutocorrectionTypeYes;\n    _searchBar.autocapitalizationType = UITextAutocapitalizationTypeNone;\n\n    self.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    \n    memset(&userFlag, 0, sizeof( struct interfaceFlag));\n   \n    _sqlQueryData = NULL;\n   \n    searchSQL = [[SearchEngine alloc] initWithSupporUSAStock:true limit:20];\n    searchSQL.delegate = self ;\n    \n    self.lastSearchText = nil;\n    self.selfSelectStock = nil;\n\t\n    userFlag.finishSearch |= 1;\n    userFlag.firstLoad |= 1;\n    userFlag.supportUsaSearch |= 1;\n\n    self.buryPoint = [[SearchStockBuryPoint alloc] init];\n\n\n    [self prepareHelpView];\n\t\n    _keyBoardType = KeyBoard_Normal;\n    \n    dataLimit = 20;\n    \n    [_tableView setBackgroundColor:FOREGROUND_COLOR_NORMAL];\n    if([ThemeVersionManager currentThemeVersion] == ThemeVersionNight){\n        [_searchBar setBarTintColor:BACKGROUND_COLOR_NIGHT];\n    }else{\n        UINavigationBar *bar = [UINavigationBar appearance];\n        [_searchBar setBarTintColor: bar.barTintColor];\n        self.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    }\n    [self changeTheme];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradWillShow:) name:UIKeyboardWillShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradDidShow:) name:UIKeyboardDidShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradWillHide:) name:UIKeyboardWillHideNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didBecomeActive:) name:UIApplicationDidBecomeActiveNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(inputModeDidChange:) name:UITextInputCurrentInputModeDidChangeNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(themeVersionChange) name:ThemeVersionNotification object:nil];\n\n}\n\n/**\n * 将列表的形式修改至初始化的状态\n * 1.自选股编辑页面和搜索页面           设置为历史列表\n * 2.其他分组编辑页面                  设置为搜索结果\n */\n- (void)changeListTypeToOriginal {\n    if ((self.pageCaller & SearchStockPageCallerDefaultZixuanGroup) ||\n        (self.pageCaller & SearchStockPageCallerOthers) ||\n        (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection)) {\n        self.buryPoint.listType = SearchStockListTypeHistory;  // 初始化列表类型 历史\n    } else if (self.pageCaller & SearchStockPageCallerCustomZiXuanGroup) {\n        self.buryPoint.listType = SearchStockListTypeSelfStock;\n    }\n}\n\n- (void) prepareHelpView {\n    if (nil == _helpView)\n    {\n        _helpView = [[UIView alloc] initWithFrame:self.frame];\n        UIImage* img = [UIImage imageNamed:@\"keyboard_helptext.png\"];\n        UIImageView* v = [[UIImageView alloc] initWithImage:img];\n        int nBorder =  fabs((_helpView.frame.size.width -  v.frame.size.width)/2);\n        v.frame = CGRectMake(nBorder, nBorder/2, v.frame.size.width, v.frame.size.height);\n        \n        _helpView.backgroundColor = [UIColor grayColor];\n        _helpView.alpha = 0.0;\n        _helpView.tag = 99; // 特殊的tag值，提供行为收集使用\n        \n        [_helpView addSubview:v];\n        \n        \n        [self addSubview:_helpView];\n    }\n}\n\n- (void)closeSearchPage\n{\n    [_pageData removeObjectForKey:@\"SearchModel\"];\n    \n    //新埋点\n   [ClientUserBehaviorLog sendLogWithLogobject:[_currentPageStr stringByAppendingString:@\".guanbi\"] actionType:ClickAction toPageid:EQLOCAL_NODE_ID_FRAME_SELFSTOCK];\n    [ViewBackward shareViewBackward].specialBack = AppearBackwardInButton;\n    AM_UI_Public_Proxy::ClosePopPages();\n}\n\n#pragma mark - Custom Accessor\n- (SearchStockPageCaller)pageCaller {\n    NSString *flag = _pageData[@\"back_pageid\"];\n\n    // 当前视图控制器是否为自选股分组页面2201调用弹出\n    if ([flag isEqualToString:@\"2402\"] || [flag isEqualToString:@\"2403\"]) {\n        return SearchStockPageCallerMorphologicalStockSelection;\n    } else if ([flag isEqualToString:@\"2891\"] ) {\n        return SearchStockPageCallerStockValuation;\n    } else if ([flag isEqualToString:@\"2560\"] ) {\n        return SearchStockPageCallerAMTZSYC;\n    } else if ([flag isEqualToString:@\"2561\"] ) {\n        return SearchStockPageCallerAMTXTXG;\n    } else if ([flag isEqualToString:@\"2562\"] ) {\n        return SearchStockPageCallerAMTGPGZ;\n    } else if ([flag isEqualToString:@\"2563\"] ) {\n        return SearchStockPageCallerAMTLSHK;\n    }  else if (!flag || ![flag isEqualToString:@\"2201\"] ) {\n        return SearchStockPageCallerOthers;\n    }\n\n    // 标识为自选股页面弹出 开始判断是否由默认自选股分组\n    // TODO: 缺少判断是否从DefaultGroup呈现\n    \n    BOOL isSelectedPlateGroup = [[SSGGroupViewModel shareInstance] isSelectedPlateGroup];\n    NSData *currentGroupID = _pageData[@\"currentGroupID\"];\n    if (currentGroupID != nil) {\n        isSelectedPlateGroup = ![[[SSGGroupViewModel shareInstance] groupInfoWithGroupID:currentGroupID] isSelfStockGroup];\n    }\n    \n    if (!isSelectedPlateGroup) {\n        return SearchStockPageCallerDefaultZixuanGroup;\n    }\n\n    return SearchStockPageCallerCustomZiXuanGroup;\n}\n\n\n\n//请求格式\n//[frame]\n//id=2201\n//pageList=0\n//reqctrl=1401\n//stockcode=399005\n- (void)requestData:(BOOL)wait\n{\n    \n\tif(self.selfSelectStock != nil)\n\t{\n\t\tint strLength = (int)[_selfSelectStock length];\n\t\tunichar* buf = new unichar[strLength];\n\t\tmemset(buf, 0, strLength*2);\n\t\tint nInstanceId = [self getInstanceId];\n\t\t[_selfSelectStock getCharacters: buf];\n\t\t\t\t\n\t\tAM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_ChangedSelfStock, 1);//代表自选股已改变\n\t\t\n\t\tif(wait)\n\t\t{\n\t\t\tAM_Middle_Public_Proxy::RequestWithWaitMode(0, 0, EQLOCAL_NODE_ID_FRAME_ADD_STOCK, nInstanceId, buf, strLength);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tAM_Middle_Public_Proxy::RequestWithImmediate(0, 0, EQLOCAL_NODE_ID_FRAME_ADD_STOCK, nInstanceId, buf, strLength);\n\t\t}\n        \n\t\tdelete[] buf;\n        self.selfSelectStock = nil;\n\t}\n}\n\n#pragma mark - UIScrollView delegate\n//modify by chenyonghong  20120619 在scrollViewDidScroll中隐藏键盘 只要滚动没停止 点输入框就会出现键盘弹出又消失\n//modify be hellen.zhouy   2014.531 关闭键盘\n- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView\n{\n    [self searchStockResignFirstResponder];\n}\n\n//设置tableviewcell中的 图片和\n- (void)setSearchStockCellImageAndRemark:(SearchStockCell*)cell selfStock:(CEQString8&)str8\n                              selfMarket:(CEQString8&)strMarket {\n\n    // 有些业务不需要添加自选按钮，搜索股票应该做成公用模块\n    if (_pageData[HXHiddenZiXuanSwitchKey] && [_pageData[HXHiddenZiXuanSwitchKey] boolValue]) {\n        cell._ssgAddedInfoLabel.hidden = YES;\n        cell._butt","infill":"          [groupModel addSecurities:@[] complete:^(NSError * _Nullable error","suffix":") {\r\n                        \r\n                    }];\r\n                    \r\n                    SSGGroupViewModel *viewModel = [SSGGroupViewModel shareInstance];\r\n                    if (currentGroupID && [viewModel addStockToTopUseLocalListAtGroupID:currentGroupID stockCode:stockCode marketID:marketID]) {\r\n                        [self displayAddStockIntoCustomGroupCallBackView];\r\n                    } else if ([viewModel addStockToTopUseLocalListAtSelectedIndexWithStockCode:stockCode marketID:marketID]) {\r\n                        [self displayAddStockIntoCustomGroupCallBackView];\r\n                    }\r\n\r\n                    [self ssg_setSearchStockCell:cell stockCode:stockCode marketID:marketID];\r\n                }\r\n            }\r\n        }\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif(_sqlQueryData != NULL\r\n       && indexPath.row <= ([_sqlQueryData.queryDataArr count] + userFlag.needGuide + userFlag.clearHistroy - 1)\r\n       && 3 <= [_sqlQueryData.fieldNameArr count])\r\n\t{\r\n        NSString* stockCode = nil;\r\n        NSString *stockName = nil;\r\n        NSString *stockMarket = nil;\r\n        \r\n        int currentIndex = (int)indexPath.row - userFlag.needGuide;\r\n        if ([_sqlQueryData getCellWithRow:currentIndex col:1] && [_sqlQueryData getCellWithRow:currentIndex col:0]) {\r\n            stockCode = [_sqlQueryData getCellWithRow:currentIndex col:1];\r\n            stockName = [_sqlQueryData getCellWithRow:currentIndex col:0];\r\n        }else{\r\n            return;\r\n        }\r\n        \r\n        if ([stockName length] < 1  || [stockCode length] < 1 )\r\n        {\r\n            return;\r\n        }\r\n        \r\n        if (4 <= [_sqlQueryData.fieldNameArr count])\r\n        {\r\n            if ( [_sqlQueryData getCellWithRow:currentIndex col:3])\r\n            {\r\n                stockMarket =  [_sqlQueryData getCellWithRow:currentIndex col:3];\r\n            }\r\n        }\r\n        \r\n        // 更新本地数据库\r\n        NSArray *stocksData = [_sqlQueryData getQueryData];\r\n        if (currentIndex < stocksData.count) {\r\n            [searchSQL updateStock:stocksData[currentIndex]];\r\n        }\r\n        \r\n        //把 股票 加入历史搜索股表\r\n        //  hellen.zhou   2014 . 5.30\r\n\t\t{\r\n            //名称\r\n            NSString *strName = [_sqlQueryData getCellWithRow:currentIndex col:0];\r\n            \r\n            //简拼,并对strPinyin判断是否为空，\r\n            NSString *strPinyin = [_sqlQueryData getCellWithRow:currentIndex col:2];\r\n            \r\n            NSString *strMaket = [_sqlQueryData getCellWithRow:currentIndex col:3];\r\n            \r\n            //对简拼和名称判断是否为空，不为空时才写入历史搜索中\r\n            if (strName != NULL && [strName length] > 0 && strPinyin != NULL && [strPinyin length] > 0) {\r\n                HXSearchStockInfo *searchInfo = [[HXSearchStockInfo alloc] init];\r\n                searchInfo.stockName = strName;\r\n                searchInfo.stockSimpleSpell = strPinyin;\r\n                searchInfo.stockMarket = strMaket;\r\n                searchInfo.stockCode = stockCode;\r\n                dispatch_async(dispatch_get_global_queue(0, 0), ^{\r\n                    [[HXDBOperationManager sharedInstance] insertHistoryInfo:searchInfo];\r\n                });\r\n            }\r\n\t\t}\r\n        \r\n        \r\n        if (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection ||\r\n            self.pageCaller & SearchStockPageCallerAMTXTXG) {\r\n            \r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            NSString *flag = _pageData[@\"back_pageid\"]; // 2402 or 2403 跳转方式不一样\r\n            \r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            \r\n            if (![@[SHANGHAI_A_MARKET_17, SHENZHENG_A_MARKET_33] containsObject:cell.market]) {\r\n                [AMUIPublicProxy showTipAutoClose:@\"仅支持沪深A股\"];\r\n                return;\r\n            }\r\n            \r\n            NSString *stockCode = cell._labelCode.text;\r\n            NSString *marketID = [NSString stringWithFormat:@\"%@\", cell.market];\r\n            NSString *stockName = cell._labelName.text;\r\n            NSDictionary *params = @{@\"stockcode\":stockCode ?:@\"\",\r\n                                     @\"stockmarket\":marketID ?:@\"\",\r\n                                     @\"stockname\":stockName ?:@\"\",\r\n                                     @\"back_pageid\":flag?:@\"2403\"\r\n                                     };\r\n            \r\n            [ClientUserBehaviorLog sendLogWithLogobject:[self clickedSearchObject:indexPath.row] actionType:ClickAction toPageid:[flag integerValue] toStockCode:stockCode];\r\n            \r\n            if ([flag isEqualToString:@\"2402\"]) {\r\n                [AMUIPublicProxy gotoPageWithIdAndParamsAndDonotDelete:PAGE_KLINE_SHAPE_STOCK_SELECTION_ID\r\n                                                                params:params];\r\n            } else {\r\n                [AMUIPublicProxy gotoPageWithId:PAGE_KLINE_SHAPE_STOCK_SELECTION_ID\r\n                                         params:params];\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // 搜索框跳转到股票估值页面\r\n        if (self.pageCaller & SearchStockPageCallerStockValuation) {\r\n            \r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            NSString *flag = _pageData[@\"back_pageid\"];\r\n            \r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            \r\n            if (![@[SHANGHAI_A_MARKET_17, SHENZHENG_A_MARKET_33] containsObject:cell.market]) {\r\n                [AMUIPublicProxy showTipAutoClose:@\"仅支持沪深A股\"];\r\n                return;\r\n            }\r\n            \r\n            NSString *stockCode = cell._labelCode.text;\r\n            NSString *marketID = [NSString stringWithFormat:@\"%@\", cell.market];\r\n            NSString *stockName = cell._labelName.text;\r\n\r\n            [ClientUserBehaviorLog sendLogWithLogobject:[self clickedSearchObject:indexPath.row] actionType:ClickAction toPageid:[flag integerValue] toStockCode:stockCode];\r\n\r\n            NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithCapacity:0];\r\n            if (_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] && [_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] boolValue]) {\r\n                [dic addEntriesFromDictionary:_pageData];\r\n            }\r\n            if (stockCode != nil) {\r\n                [dic setValue:stockCode forKey:STR_UI_FRAMEWORK_STOCK_CODE];\r\n            }\r\n\r\n            [dic setValue:[NSNumber numberWithInt:1] forKey:KEY_BAOJIA_SELECTEDINDEX];\r\n            \r\n            if([stockName isKindOfClass:[NSString class]])\r\n            {\r\n                [dic setValue:stockName forKey:STR_UI_FRAMEWORK_STOCK_NAME];\r\n            }\r\n            if([marketID isKindOfClass:[NSString class]])\r\n            {\r\n                [dic setValue:marketID forKey:STR_UI_FRAMEWORK_STOCK_MARKET];\r\n            }\r\n            NSMutableArray *stockCodes = [NSMutableArray array];\r\n            NSMutableArray *stockNames = [NSMutableArray array];\r\n            NSMutableArray *stockMarketList = [NSMutableArray array];     // 新增股票市场列表 用于查询时做进一步确认\r\n\r\n            for (int i = 0; i < [_sqlQueryData.queryDataArr count]; i++) {\r\n                if ([_sqlQueryData getCellWithRow:i col:1] && [_sqlQueryData getCellWithRow:i col:0] &&[_sqlQueryData getCellWithRow:i col:3]) {\r\n                    [stockCodes addObject:[_sqlQueryData getCellWithRow:i col:1]];\r\n                    [stockNames addObject:[_sqlQueryData getCellWithRow:i col:0]];\r\n                    [stockMarketList addObject:[_sqlQueryData getCellWithRow:i col:3]];\r\n                    \r\n                }else{\r\n                    return;\r\n                }\r\n                \r\n            }\r\n            [dic setObject:stockCodes forKey:STR_UI_FRAMEWORK_STOCK_CODEAS];\r\n            [dic setObject:stockNames forKey:STR_UI_FRAMEWORK_STOCK_NAMEAS];\r\n            [dic setObject:stockMarketList forKey:","relevantFile":"","relevantFileList":[],"filePath":"SearchStock.mm","template":"objective-cpp","multiRes":{"hipilot":"onClick:^{\n            //不允许点击添加\n        }];\n        \n        cell.backgroundColor = [UIColor colorWithRed:0 green:0 blue:0 alpha:0.3];\n        return;\n    } else {\n        cell._ssgAddedInfo","deepseek-chat-lite":"onAddStock.hidden = YES;","CodeQwen2.5-7B":"onAddStock.hidden = YES;\r","copilot":"          [groupModel addSecurities:@[] complete:^(NSError * _Nullable error"}},{"prefix":"            [[[ToastView alloc] initWithText:@\"添加成功，已同步至您电脑上的自选股!\"] show];\n        }\n    } else {\n        // 自选分组页面 的 编辑股票页面 的 添加股票页面\n        if (![[SSGGroupViewModel shareInstance] hasGroupAuthority]) {\n            [[[ToastView alloc] initWithText:@\"已添加至“自选股”\"] show];\n        } else {\n            [[[ToastView alloc] initWithText:@\"添加成功，已同步至您电脑上的自选股!\"] show];\n        }\n    }\n}\n\n- (void)deleteStockCodeResult:(HXUGCSelfStockModel *)model {\n    [_tableView reloadData]; // 必须要刷新一次\n    if (!model) {\n        // 说明不是从当前search页面发出的删除命令 得到的通知\n        return;\n    }\n    // 删除自选成功\n    [[[ToastView alloc] initWithText:@\"已移出“自选股”\"] show];\n}\n\n- (UIView *)viewForMessageCallBackView {\n    UIViewController *mainController = (UIViewController *) [((AMUITabFm *) [AMUIFrameWork shareingUIFramework]) getCurStackController];\n    return mainController.view;\n}\n\n- (id<UIKeyInput>)inputSubviewInView:(UIView *)view\n{\n    if ([view conformsToProtocol:@protocol(UIKeyInput)]) {\n        return (id<UIKeyInput>)view;\n    }\n    for (UIView *subview in view.subviews) {\n        id<UIKeyInput> inputView = [self inputSubviewInView:subview];\n        if (inputView) {\n            return inputView;\n        }\n    }\n    return nil;\n}\n\n//解析设置构件属性\n- (void)onFinishInflate\n{\n    _searchBar.donotChangeSelfTheme = YES;\n    _searchBar.donotChangeSubviewTheme = YES;\n    _searchBar.autocorrectionType = UITextAutocorrectionTypeYes;\n    _searchBar.autocapitalizationType = UITextAutocapitalizationTypeNone;\n\n    self.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    \n    memset(&userFlag, 0, sizeof( struct interfaceFlag));\n   \n    _sqlQueryData = NULL;\n   \n    searchSQL = [[SearchEngine alloc] initWithSupporUSAStock:true limit:20];\n    searchSQL.delegate = self ;\n    \n    self.lastSearchText = nil;\n    self.selfSelectStock = nil;\n\t\n    userFlag.finishSearch |= 1;\n    userFlag.firstLoad |= 1;\n    userFlag.supportUsaSearch |= 1;\n\n    self.buryPoint = [[SearchStockBuryPoint alloc] init];\n\n\n    [self prepareHelpView];\n\t\n    _keyBoardType = KeyBoard_Normal;\n    \n    dataLimit = 20;\n    \n    [_tableView setBackgroundColor:FOREGROUND_COLOR_NORMAL];\n    if([ThemeVersionManager currentThemeVersion] == ThemeVersionNight){\n        [_searchBar setBarTintColor:BACKGROUND_COLOR_NIGHT];\n    }else{\n        UINavigationBar *bar = [UINavigationBar appearance];\n        [_searchBar setBarTintColor: bar.barTintColor];\n        self.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    }\n    [self changeTheme];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradWillShow:) name:UIKeyboardWillShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradDidShow:) name:UIKeyboardDidShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradWillHide:) name:UIKeyboardWillHideNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didBecomeActive:) name:UIApplicationDidBecomeActiveNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(inputModeDidChange:) name:UITextInputCurrentInputModeDidChangeNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(themeVersionChange) name:ThemeVersionNotification object:nil];\n\n}\n\n/**\n * 将列表的形式修改至初始化的状态\n * 1.自选股编辑页面和搜索页面           设置为历史列表\n * 2.其他分组编辑页面                  设置为搜索结果\n */\n- (void)changeListTypeToOriginal {\n    if ((self.pageCaller & SearchStockPageCallerDefaultZixuanGroup) ||\n        (self.pageCaller & SearchStockPageCallerOthers) ||\n        (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection)) {\n        self.buryPoint.listType = SearchStockListTypeHistory;  // 初始化列表类型 历史\n    } else if (self.pageCaller & SearchStockPageCallerCustomZiXuanGroup) {\n        self.buryPoint.listType = SearchStockListTypeSelfStock;\n    }\n}\n\n- (void) prepareHelpView {\n    if (nil == _helpView)\n    {\n        _helpView = [[UIView alloc] initWithFrame:self.frame];\n        UIImage* img = [UIImage imageNamed:@\"keyboard_helptext.png\"];\n        UIImageView* v = [[UIImageView alloc] initWithImage:img];\n        int nBorder =  fabs((_helpView.frame.size.width -  v.frame.size.width)/2);\n        v.frame = CGRectMake(nBorder, nBorder/2, v.frame.size.width, v.frame.size.height);\n        \n        _helpView.backgroundColor = [UIColor grayColor];\n        _helpView.alpha = 0.0;\n        _helpView.tag = 99; // 特殊的tag值，提供行为收集使用\n        \n        [_helpView addSubview:v];\n        \n        \n        [self addSubview:_helpView];\n    }\n}\n\n- (void)closeSearchPage\n{\n    [_pageData removeObjectForKey:@\"SearchModel\"];\n    \n    //新埋点\n   [ClientUserBehaviorLog sendLogWithLogobject:[_currentPageStr stringByAppendingString:@\".guanbi\"] actionType:ClickAction toPageid:EQLOCAL_NODE_ID_FRAME_SELFSTOCK];\n    [ViewBackward shareViewBackward].specialBack = AppearBackwardInButton;\n    AM_UI_Public_Proxy::ClosePopPages();\n}\n\n#pragma mark - Custom Accessor\n- (SearchStockPageCaller)pageCaller {\n    NSString *flag = _pageData[@\"back_pageid\"];\n\n    // 当前视图控制器是否为自选股分组页面2201调用弹出\n    if ([flag isEqualToString:@\"2402\"] || [flag isEqualToString:@\"2403\"]) {\n        return SearchStockPageCallerMorphologicalStockSelection;\n    } else if ([flag isEqualToString:@\"2891\"] ) {\n        return SearchStockPageCallerStockValuation;\n    } else if ([flag isEqualToString:@\"2560\"] ) {\n        return SearchStockPageCallerAMTZSYC;\n    } else if ([flag isEqualToString:@\"2561\"] ) {\n        return SearchStockPageCallerAMTXTXG;\n    } else if ([flag isEqualToString:@\"2562\"] ) {\n        return SearchStockPageCallerAMTGPGZ;\n    } else if ([flag isEqualToString:@\"2563\"] ) {\n        return SearchStockPageCallerAMTLSHK;\n    }  else if (!flag || ![flag isEqualToString:@\"2201\"] ) {\n        return SearchStockPageCallerOthers;\n    }\n\n    // 标识为自选股页面弹出 开始判断是否由默认自选股分组\n    // TODO: 缺少判断是否从DefaultGroup呈现\n    \n    BOOL isSelectedPlateGroup = [[SSGGroupViewModel shareInstance] isSelectedPlateGroup];\n    NSData *currentGroupID = _pageData[@\"currentGroupID\"];\n    if (currentGroupID != nil) {\n        isSelectedPlateGroup = ![[[SSGGroupViewModel shareInstance] groupInfoWithGroupID:currentGroupID] isSelfStockGroup];\n    }\n    \n    if (!isSelectedPlateGroup) {\n        return SearchStockPageCallerDefaultZixuanGroup;\n    }\n\n    return SearchStockPageCallerCustomZiXuanGroup;\n}\n\n\n\n//请求格式\n//[frame]\n//id=2201\n//pageList=0\n//reqctrl=1401\n//stockcode=399005\n- (void)requestData:(BOOL)wait\n{\n    \n\tif(self.selfSelectStock != nil)\n\t{\n\t\tint strLength = (int)[_selfSelectStock length];\n\t\tunichar* buf = new unichar[strLength];\n\t\tmemset(buf, 0, strLength*2);\n\t\tint nInstanceId = [self getInstanceId];\n\t\t[_selfSelectStock getCharacters: buf];\n\t\t\t\t\n\t\tAM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_ChangedSelfStock, 1);//代表自选股已改变\n\t\t\n\t\tif(wait)\n\t\t{\n\t\t\tAM_Middle_Public_Proxy::RequestWithWaitMode(0, 0, EQLOCAL_NODE_ID_FRAME_ADD_STOCK, nInstanceId, buf, strLength);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tAM_Middle_Public_Proxy::RequestWithImmediate(0, 0, EQLOCAL_NODE_ID_FRAME_ADD_STOCK, nInstanceId, buf, strLength);\n\t\t}\n        \n\t\tdelete[] buf;\n        self.selfSelectStock = nil;\n\t}\n}\n\n#pragma mark - UIScrollView delegate\n//modify by chenyonghong  20120619 在scrollViewDidScroll中隐藏键盘 只要滚动没停止 点输入框就会出现键盘弹出又消失\n//modify be hellen.zhouy   2014.531 关闭键盘\n- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView\n{\n    [self searchStockResignFirstResponder];\n}\n\n//设置tableviewcell中的 图片和\n- (void)setSearchStockCellImageAndRemark:(SearchStockCell*)cell selfStock:(CEQString8&)str8\n                              selfMarket:(CEQString8&)strMarket {\n\n    // 有些业务不需要添加自选按钮，搜索股票应该做成公用模块\n    if (_pageData[HXHiddenZiXuanSwitchKey] && [_pageData[HXHiddenZiXuanSwitchKey] boolValue]) {\n        cell._ssgAddedInfoLabel.hidden = YES;\n        cell._butt","infill":"if (groupModel == nil) {\r\n                        return;\r\n                    }\r\n                ","suffix":"    HXUGCSelfStockModel *stockModel = [[HXUGCSelfStockModel alloc] initWithStockCode:stockCode marketId:n];\r\n                    [groupModel addSecurities:@[] complete:^(NSError * _Nullable error) {\r\n                        \r\n                    }];\r\n                    \r\n                    SSGGroupViewModel *viewModel = [SSGGroupViewModel shareInstance];\r\n                    if (currentGroupID && [viewModel addStockToTopUseLocalListAtGroupID:currentGroupID stockCode:stockCode marketID:marketID]) {\r\n                        [self displayAddStockIntoCustomGroupCallBackView];\r\n                    } else if ([viewModel addStockToTopUseLocalListAtSelectedIndexWithStockCode:stockCode marketID:marketID]) {\r\n                        [self displayAddStockIntoCustomGroupCallBackView];\r\n                    }\r\n\r\n                    [self ssg_setSearchStockCell:cell stockCode:stockCode marketID:marketID];\r\n                }\r\n            }\r\n        }\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif(_sqlQueryData != NULL\r\n       && indexPath.row <= ([_sqlQueryData.queryDataArr count] + userFlag.needGuide + userFlag.clearHistroy - 1)\r\n       && 3 <= [_sqlQueryData.fieldNameArr count])\r\n\t{\r\n        NSString* stockCode = nil;\r\n        NSString *stockName = nil;\r\n        NSString *stockMarket = nil;\r\n        \r\n        int currentIndex = (int)indexPath.row - userFlag.needGuide;\r\n        if ([_sqlQueryData getCellWithRow:currentIndex col:1] && [_sqlQueryData getCellWithRow:currentIndex col:0]) {\r\n            stockCode = [_sqlQueryData getCellWithRow:currentIndex col:1];\r\n            stockName = [_sqlQueryData getCellWithRow:currentIndex col:0];\r\n        }else{\r\n            return;\r\n        }\r\n        \r\n        if ([stockName length] < 1  || [stockCode length] < 1 )\r\n        {\r\n            return;\r\n        }\r\n        \r\n        if (4 <= [_sqlQueryData.fieldNameArr count])\r\n        {\r\n            if ( [_sqlQueryData getCellWithRow:currentIndex col:3])\r\n            {\r\n                stockMarket =  [_sqlQueryData getCellWithRow:currentIndex col:3];\r\n            }\r\n        }\r\n        \r\n        // 更新本地数据库\r\n        NSArray *stocksData = [_sqlQueryData getQueryData];\r\n        if (currentIndex < stocksData.count) {\r\n            [searchSQL updateStock:stocksData[currentIndex]];\r\n        }\r\n        \r\n        //把 股票 加入历史搜索股表\r\n        //  hellen.zhou   2014 . 5.30\r\n\t\t{\r\n            //名称\r\n            NSString *strName = [_sqlQueryData getCellWithRow:currentIndex col:0];\r\n            \r\n            //简拼,并对strPinyin判断是否为空，\r\n            NSString *strPinyin = [_sqlQueryData getCellWithRow:currentIndex col:2];\r\n            \r\n            NSString *strMaket = [_sqlQueryData getCellWithRow:currentIndex col:3];\r\n            \r\n            //对简拼和名称判断是否为空，不为空时才写入历史搜索中\r\n            if (strName != NULL && [strName length] > 0 && strPinyin != NULL && [strPinyin length] > 0) {\r\n                HXSearchStockInfo *searchInfo = [[HXSearchStockInfo alloc] init];\r\n                searchInfo.stockName = strName;\r\n                searchInfo.stockSimpleSpell = strPinyin;\r\n                searchInfo.stockMarket = strMaket;\r\n                searchInfo.stockCode = stockCode;\r\n                dispatch_async(dispatch_get_global_queue(0, 0), ^{\r\n                    [[HXDBOperationManager sharedInstance] insertHistoryInfo:searchInfo];\r\n                });\r\n            }\r\n\t\t}\r\n        \r\n        \r\n        if (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection ||\r\n            self.pageCaller & SearchStockPageCallerAMTXTXG) {\r\n            \r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            NSString *flag = _pageData[@\"back_pageid\"]; // 2402 or 2403 跳转方式不一样\r\n            \r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            \r\n            if (![@[SHANGHAI_A_MARKET_17, SHENZHENG_A_MARKET_33] containsObject:cell.market]) {\r\n                [AMUIPublicProxy showTipAutoClose:@\"仅支持沪深A股\"];\r\n                return;\r\n            }\r\n            \r\n            NSString *stockCode = cell._labelCode.text;\r\n            NSString *marketID = [NSString stringWithFormat:@\"%@\", cell.market];\r\n            NSString *stockName = cell._labelName.text;\r\n            NSDictionary *params = @{@\"stockcode\":stockCode ?:@\"\",\r\n                                     @\"stockmarket\":marketID ?:@\"\",\r\n                                     @\"stockname\":stockName ?:@\"\",\r\n                                     @\"back_pageid\":flag?:@\"2403\"\r\n                                     };\r\n            \r\n            [ClientUserBehaviorLog sendLogWithLogobject:[self clickedSearchObject:indexPath.row] actionType:ClickAction toPageid:[flag integerValue] toStockCode:stockCode];\r\n            \r\n            if ([flag isEqualToString:@\"2402\"]) {\r\n                [AMUIPublicProxy gotoPageWithIdAndParamsAndDonotDelete:PAGE_KLINE_SHAPE_STOCK_SELECTION_ID\r\n                                                                params:params];\r\n            } else {\r\n                [AMUIPublicProxy gotoPageWithId:PAGE_KLINE_SHAPE_STOCK_SELECTION_ID\r\n                                         params:params];\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // 搜索框跳转到股票估值页面\r\n        if (self.pageCaller & SearchStockPageCallerStockValuation) {\r\n            \r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            NSString *flag = _pageData[@\"back_pageid\"];\r\n            \r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            \r\n            if (![@[SHANGHAI_A_MARKET_17, SHENZHENG_A_MARKET_33] containsObject:cell.market]) {\r\n                [AMUIPublicProxy showTipAutoClose:@\"仅支持沪深A股\"];\r\n                return;\r\n            }\r\n            \r\n            NSString *stockCode = cell._labelCode.text;\r\n            NSString *marketID = [NSString stringWithFormat:@\"%@\", cell.market];\r\n            NSString *stockName = cell._labelName.text;\r\n\r\n            [ClientUserBehaviorLog sendLogWithLogobject:[self clickedSearchObject:indexPath.row] actionType:ClickAction toPageid:[flag integerValue] toStockCode:stockCode];\r\n\r\n            NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithCapacity:0];\r\n            if (_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] && [_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] boolValue]) {\r\n                [dic addEntriesFromDictionary:_pageData];\r\n            }\r\n            if (stockCode != nil) {\r\n                [dic setValue:stockCode forKey:STR_UI_FRAMEWORK_STOCK_CODE];\r\n            }\r\n\r\n            [dic setValue:[NSNumber numberWithInt:1] forKey:KEY_BAOJIA_SELECTEDINDEX];\r\n            \r\n            if([stockName isKindOfClass:[NSString class]])\r\n            {\r\n                [dic setValue:stockName forKey:STR_UI_FRAMEWORK_STOCK_NAME];\r\n            }\r\n            if([marketID isKindOfClass:[NSString class]])\r\n            {\r\n                [dic setValue:marketID forKey:STR_UI_FRAMEWORK_STOCK_MARKET];\r\n            }\r\n            NSMutableArray *stockCodes = [NSMutableArray array];\r\n            NSMutableArray *stockNames = [NSMutableArray array];\r\n            NSMutableArray *stockMarketList = [NSMutableArray array];     // 新增股票市场列表 用于查询时做进一步确认\r\n\r\n            for (int i = 0; i < [_sqlQueryData.queryDataArr count]; i++) {\r\n                if ([_sqlQueryData getCellWithRow:i col:1] && [_sqlQueryData getCellWithRow:i col:0] &&[_sqlQueryData getCellWithRow:i col:3]) {\r\n                    [stockCodes addObject:[_sqlQueryData getCellWithRow:i col:1]];\r\n                    [stockNames addObject:[_sqlQueryData getCellWithRow:i col:0]];\r\n                    [stockMarketList addObject:[_sqlQueryData getCellWithRow:i col:3]];\r\n                    \r\n                }else{\r\n                    return;\r\n                }\r\n                \r\n            }\r\n            [","relevantFile":"","relevantFileList":[],"filePath":"SearchStock.mm","template":"objective-cpp","multiRes":{"hipilot":"onClicked","deepseek-chat-lite":"onAddStock.hidden = YES;","CodeQwen2.5-7B":"onAddStock.hidden = YES;\r","copilot":"if (groupModel == nil) {\r\n                        return;\r\n                    }\r\n                "}},{"prefix":"        }\n    } else {\n        // 自选分组页面 的 编辑股票页面 的 添加股票页面\n        if (![[SSGGroupViewModel shareInstance] hasGroupAuthority]) {\n            [[[ToastView alloc] initWithText:@\"已添加至“自选股”\"] show];\n        } else {\n            [[[ToastView alloc] initWithText:@\"添加成功，已同步至您电脑上的自选股!\"] show];\n        }\n    }\n}\n\n- (void)deleteStockCodeResult:(HXUGCSelfStockModel *)model {\n    [_tableView reloadData]; // 必须要刷新一次\n    if (!model) {\n        // 说明不是从当前search页面发出的删除命令 得到的通知\n        return;\n    }\n    // 删除自选成功\n    [[[ToastView alloc] initWithText:@\"已移出“自选股”\"] show];\n}\n\n- (UIView *)viewForMessageCallBackView {\n    UIViewController *mainController = (UIViewController *) [((AMUITabFm *) [AMUIFrameWork shareingUIFramework]) getCurStackController];\n    return mainController.view;\n}\n\n- (id<UIKeyInput>)inputSubviewInView:(UIView *)view\n{\n    if ([view conformsToProtocol:@protocol(UIKeyInput)]) {\n        return (id<UIKeyInput>)view;\n    }\n    for (UIView *subview in view.subviews) {\n        id<UIKeyInput> inputView = [self inputSubviewInView:subview];\n        if (inputView) {\n            return inputView;\n        }\n    }\n    return nil;\n}\n\n//解析设置构件属性\n- (void)onFinishInflate\n{\n    _searchBar.donotChangeSelfTheme = YES;\n    _searchBar.donotChangeSubviewTheme = YES;\n    _searchBar.autocorrectionType = UITextAutocorrectionTypeYes;\n    _searchBar.autocapitalizationType = UITextAutocapitalizationTypeNone;\n\n    self.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    \n    memset(&userFlag, 0, sizeof( struct interfaceFlag));\n   \n    _sqlQueryData = NULL;\n   \n    searchSQL = [[SearchEngine alloc] initWithSupporUSAStock:true limit:20];\n    searchSQL.delegate = self ;\n    \n    self.lastSearchText = nil;\n    self.selfSelectStock = nil;\n\t\n    userFlag.finishSearch |= 1;\n    userFlag.firstLoad |= 1;\n    userFlag.supportUsaSearch |= 1;\n\n    self.buryPoint = [[SearchStockBuryPoint alloc] init];\n\n\n    [self prepareHelpView];\n\t\n    _keyBoardType = KeyBoard_Normal;\n    \n    dataLimit = 20;\n    \n    [_tableView setBackgroundColor:FOREGROUND_COLOR_NORMAL];\n    if([ThemeVersionManager currentThemeVersion] == ThemeVersionNight){\n        [_searchBar setBarTintColor:BACKGROUND_COLOR_NIGHT];\n    }else{\n        UINavigationBar *bar = [UINavigationBar appearance];\n        [_searchBar setBarTintColor: bar.barTintColor];\n        self.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    }\n    [self changeTheme];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradWillShow:) name:UIKeyboardWillShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradDidShow:) name:UIKeyboardDidShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradWillHide:) name:UIKeyboardWillHideNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didBecomeActive:) name:UIApplicationDidBecomeActiveNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(inputModeDidChange:) name:UITextInputCurrentInputModeDidChangeNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(themeVersionChange) name:ThemeVersionNotification object:nil];\n\n}\n\n/**\n * 将列表的形式修改至初始化的状态\n * 1.自选股编辑页面和搜索页面           设置为历史列表\n * 2.其他分组编辑页面                  设置为搜索结果\n */\n- (void)changeListTypeToOriginal {\n    if ((self.pageCaller & SearchStockPageCallerDefaultZixuanGroup) ||\n        (self.pageCaller & SearchStockPageCallerOthers) ||\n        (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection)) {\n        self.buryPoint.listType = SearchStockListTypeHistory;  // 初始化列表类型 历史\n    } else if (self.pageCaller & SearchStockPageCallerCustomZiXuanGroup) {\n        self.buryPoint.listType = SearchStockListTypeSelfStock;\n    }\n}\n\n- (void) prepareHelpView {\n    if (nil == _helpView)\n    {\n        _helpView = [[UIView alloc] initWithFrame:self.frame];\n        UIImage* img = [UIImage imageNamed:@\"keyboard_helptext.png\"];\n        UIImageView* v = [[UIImageView alloc] initWithImage:img];\n        int nBorder =  fabs((_helpView.frame.size.width -  v.frame.size.width)/2);\n        v.frame = CGRectMake(nBorder, nBorder/2, v.frame.size.width, v.frame.size.height);\n        \n        _helpView.backgroundColor = [UIColor grayColor];\n        _helpView.alpha = 0.0;\n        _helpView.tag = 99; // 特殊的tag值，提供行为收集使用\n        \n        [_helpView addSubview:v];\n        \n        \n        [self addSubview:_helpView];\n    }\n}\n\n- (void)closeSearchPage\n{\n    [_pageData removeObjectForKey:@\"SearchModel\"];\n    \n    //新埋点\n   [ClientUserBehaviorLog sendLogWithLogobject:[_currentPageStr stringByAppendingString:@\".guanbi\"] actionType:ClickAction toPageid:EQLOCAL_NODE_ID_FRAME_SELFSTOCK];\n    [ViewBackward shareViewBackward].specialBack = AppearBackwardInButton;\n    AM_UI_Public_Proxy::ClosePopPages();\n}\n\n#pragma mark - Custom Accessor\n- (SearchStockPageCaller)pageCaller {\n    NSString *flag = _pageData[@\"back_pageid\"];\n\n    // 当前视图控制器是否为自选股分组页面2201调用弹出\n    if ([flag isEqualToString:@\"2402\"] || [flag isEqualToString:@\"2403\"]) {\n        return SearchStockPageCallerMorphologicalStockSelection;\n    } else if ([flag isEqualToString:@\"2891\"] ) {\n        return SearchStockPageCallerStockValuation;\n    } else if ([flag isEqualToString:@\"2560\"] ) {\n        return SearchStockPageCallerAMTZSYC;\n    } else if ([flag isEqualToString:@\"2561\"] ) {\n        return SearchStockPageCallerAMTXTXG;\n    } else if ([flag isEqualToString:@\"2562\"] ) {\n        return SearchStockPageCallerAMTGPGZ;\n    } else if ([flag isEqualToString:@\"2563\"] ) {\n        return SearchStockPageCallerAMTLSHK;\n    }  else if (!flag || ![flag isEqualToString:@\"2201\"] ) {\n        return SearchStockPageCallerOthers;\n    }\n\n    // 标识为自选股页面弹出 开始判断是否由默认自选股分组\n    // TODO: 缺少判断是否从DefaultGroup呈现\n    \n    BOOL isSelectedPlateGroup = [[SSGGroupViewModel shareInstance] isSelectedPlateGroup];\n    NSData *currentGroupID = _pageData[@\"currentGroupID\"];\n    if (currentGroupID != nil) {\n        isSelectedPlateGroup = ![[[SSGGroupViewModel shareInstance] groupInfoWithGroupID:currentGroupID] isSelfStockGroup];\n    }\n    \n    if (!isSelectedPlateGroup) {\n        return SearchStockPageCallerDefaultZixuanGroup;\n    }\n\n    return SearchStockPageCallerCustomZiXuanGroup;\n}\n\n\n\n//请求格式\n//[frame]\n//id=2201\n//pageList=0\n//reqctrl=1401\n//stockcode=399005\n- (void)requestData:(BOOL)wait\n{\n    \n\tif(self.selfSelectStock != nil)\n\t{\n\t\tint strLength = (int)[_selfSelectStock length];\n\t\tunichar* buf = new unichar[strLength];\n\t\tmemset(buf, 0, strLength*2);\n\t\tint nInstanceId = [self getInstanceId];\n\t\t[_selfSelectStock getCharacters: buf];\n\t\t\t\t\n\t\tAM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_ChangedSelfStock, 1);//代表自选股已改变\n\t\t\n\t\tif(wait)\n\t\t{\n\t\t\tAM_Middle_Public_Proxy::RequestWithWaitMode(0, 0, EQLOCAL_NODE_ID_FRAME_ADD_STOCK, nInstanceId, buf, strLength);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tAM_Middle_Public_Proxy::RequestWithImmediate(0, 0, EQLOCAL_NODE_ID_FRAME_ADD_STOCK, nInstanceId, buf, strLength);\n\t\t}\n        \n\t\tdelete[] buf;\n        self.selfSelectStock = nil;\n\t}\n}\n\n#pragma mark - UIScrollView delegate\n//modify by chenyonghong  20120619 在scrollViewDidScroll中隐藏键盘 只要滚动没停止 点输入框就会出现键盘弹出又消失\n//modify be hellen.zhouy   2014.531 关闭键盘\n- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView\n{\n    [self searchStockResignFirstResponder];\n}\n\n//设置tableviewcell中的 图片和\n- (void)setSearchStockCellImageAndRemark:(SearchStockCell*)cell selfStock:(CEQString8&)str8\n                              selfMarket:(CEQString8&)strMarket {\n\n    // 有些业务不需要添加自选按钮，搜索股票应该做成公用模块\n    if (_pageData[HXHiddenZiXuanSwitchKey] && [_pageData[HXHiddenZiXuanSwitchKey] boolValue]) {\n        cell._ssgAddedInfoLabel.hidden = YES;\n        cell._buttonImage.hidden = YES;\n        return;\n    }\n    else {\n        cell._ssgAd","infill":"stockModel = [[HXUGCSelfStockModel alloc] initWithStockCode:stockCode marketId:marketID];","suffix":"\r\n                    // [groupModel addSecurities:@[stockModel] complete:^(NSError * _Nullable error) {\r\n                    [groupModel addSecurities:@[stockModel\r\n                        \r\n                    }];\r\n                    \r\n                    SSGGroupViewModel *viewModel = [SSGGroupViewModel shareInstance];\r\n                    if (currentGroupID && [viewModel addStockToTopUseLocalListAtGroupID:currentGroupID stockCode:stockCode marketID:marketID]) {\r\n                        [self displayAddStockIntoCustomGroupCallBackView];\r\n                    } else if ([viewModel addStockToTopUseLocalListAtSelectedIndexWithStockCode:stockCode marketID:marketID]) {\r\n                        [self displayAddStockIntoCustomGroupCallBackView];\r\n                    }\r\n\r\n                    [self ssg_setSearchStockCell:cell stockCode:stockCode marketID:marketID];\r\n                }\r\n            }\r\n        }\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif(_sqlQueryData != NULL\r\n       && indexPath.row <= ([_sqlQueryData.queryDataArr count] + userFlag.needGuide + userFlag.clearHistroy - 1)\r\n       && 3 <= [_sqlQueryData.fieldNameArr count])\r\n\t{\r\n        NSString* stockCode = nil;\r\n        NSString *stockName = nil;\r\n        NSString *stockMarket = nil;\r\n        \r\n        int currentIndex = (int)indexPath.row - userFlag.needGuide;\r\n        if ([_sqlQueryData getCellWithRow:currentIndex col:1] && [_sqlQueryData getCellWithRow:currentIndex col:0]) {\r\n            stockCode = [_sqlQueryData getCellWithRow:currentIndex col:1];\r\n            stockName = [_sqlQueryData getCellWithRow:currentIndex col:0];\r\n        }else{\r\n            return;\r\n        }\r\n        \r\n        if ([stockName length] < 1  || [stockCode length] < 1 )\r\n        {\r\n            return;\r\n        }\r\n        \r\n        if (4 <= [_sqlQueryData.fieldNameArr count])\r\n        {\r\n            if ( [_sqlQueryData getCellWithRow:currentIndex col:3])\r\n            {\r\n                stockMarket =  [_sqlQueryData getCellWithRow:currentIndex col:3];\r\n            }\r\n        }\r\n        \r\n        // 更新本地数据库\r\n        NSArray *stocksData = [_sqlQueryData getQueryData];\r\n        if (currentIndex < stocksData.count) {\r\n            [searchSQL updateStock:stocksData[currentIndex]];\r\n        }\r\n        \r\n        //把 股票 加入历史搜索股表\r\n        //  hellen.zhou   2014 . 5.30\r\n\t\t{\r\n            //名称\r\n            NSString *strName = [_sqlQueryData getCellWithRow:currentIndex col:0];\r\n            \r\n            //简拼,并对strPinyin判断是否为空，\r\n            NSString *strPinyin = [_sqlQueryData getCellWithRow:currentIndex col:2];\r\n            \r\n            NSString *strMaket = [_sqlQueryData getCellWithRow:currentIndex col:3];\r\n            \r\n            //对简拼和名称判断是否为空，不为空时才写入历史搜索中\r\n            if (strName != NULL && [strName length] > 0 && strPinyin != NULL && [strPinyin length] > 0) {\r\n                HXSearchStockInfo *searchInfo = [[HXSearchStockInfo alloc] init];\r\n                searchInfo.stockName = strName;\r\n                searchInfo.stockSimpleSpell = strPinyin;\r\n                searchInfo.stockMarket = strMaket;\r\n                searchInfo.stockCode = stockCode;\r\n                dispatch_async(dispatch_get_global_queue(0, 0), ^{\r\n                    [[HXDBOperationManager sharedInstance] insertHistoryInfo:searchInfo];\r\n                });\r\n            }\r\n\t\t}\r\n        \r\n        \r\n        if (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection ||\r\n            self.pageCaller & SearchStockPageCallerAMTXTXG) {\r\n            \r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            NSString *flag = _pageData[@\"back_pageid\"]; // 2402 or 2403 跳转方式不一样\r\n            \r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            \r\n            if (![@[SHANGHAI_A_MARKET_17, SHENZHENG_A_MARKET_33] containsObject:cell.market]) {\r\n                [AMUIPublicProxy showTipAutoClose:@\"仅支持沪深A股\"];\r\n                return;\r\n            }\r\n            \r\n            NSString *stockCode = cell._labelCode.text;\r\n            NSString *marketID = [NSString stringWithFormat:@\"%@\", cell.market];\r\n            NSString *stockName = cell._labelName.text;\r\n            NSDictionary *params = @{@\"stockcode\":stockCode ?:@\"\",\r\n                                     @\"stockmarket\":marketID ?:@\"\",\r\n                                     @\"stockname\":stockName ?:@\"\",\r\n                                     @\"back_pageid\":flag?:@\"2403\"\r\n                                     };\r\n            \r\n            [ClientUserBehaviorLog sendLogWithLogobject:[self clickedSearchObject:indexPath.row] actionType:ClickAction toPageid:[flag integerValue] toStockCode:stockCode];\r\n            \r\n            if ([flag isEqualToString:@\"2402\"]) {\r\n                [AMUIPublicProxy gotoPageWithIdAndParamsAndDonotDelete:PAGE_KLINE_SHAPE_STOCK_SELECTION_ID\r\n                                                                params:params];\r\n            } else {\r\n                [AMUIPublicProxy gotoPageWithId:PAGE_KLINE_SHAPE_STOCK_SELECTION_ID\r\n                                         params:params];\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // 搜索框跳转到股票估值页面\r\n        if (self.pageCaller & SearchStockPageCallerStockValuation) {\r\n            \r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            NSString *flag = _pageData[@\"back_pageid\"];\r\n            \r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            \r\n            if (![@[SHANGHAI_A_MARKET_17, SHENZHENG_A_MARKET_33] containsObject:cell.market]) {\r\n                [AMUIPublicProxy showTipAutoClose:@\"仅支持沪深A股\"];\r\n                return;\r\n            }\r\n            \r\n            NSString *stockCode = cell._labelCode.text;\r\n            NSString *marketID = [NSString stringWithFormat:@\"%@\", cell.market];\r\n            NSString *stockName = cell._labelName.text;\r\n\r\n            [ClientUserBehaviorLog sendLogWithLogobject:[self clickedSearchObject:indexPath.row] actionType:ClickAction toPageid:[flag integerValue] toStockCode:stockCode];\r\n\r\n            NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithCapacity:0];\r\n            if (_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] && [_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] boolValue]) {\r\n                [dic addEntriesFromDictionary:_pageData];\r\n            }\r\n            if (stockCode != nil) {\r\n                [dic setValue:stockCode forKey:STR_UI_FRAMEWORK_STOCK_CODE];\r\n            }\r\n\r\n            [dic setValue:[NSNumber numberWithInt:1] forKey:KEY_BAOJIA_SELECTEDINDEX];\r\n            \r\n            if([stockName isKindOfClass:[NSString class]])\r\n            {\r\n                [dic setValue:stockName forKey:STR_UI_FRAMEWORK_STOCK_NAME];\r\n            }\r\n            if([marketID isKindOfClass:[NSString class]])\r\n            {\r\n                [dic setValue:marketID forKey:STR_UI_FRAMEWORK_STOCK_MARKET];\r\n            }\r\n            NSMutableArray *stockCodes = [NSMutableArray array];\r\n            NSMutableArray *stockNames = [NSMutableArray array];\r\n            NSMutableArray *stockMarketList = [NSMutableArray array];     // 新增股票市场列表 用于查询时做进一步确认\r\n\r\n            for (int i = 0; i < [_sqlQueryData.queryDataArr count]; i++) {\r\n                if ([_sqlQueryData getCellWithRow:i col:1] && [_sqlQueryData getCellWithRow:i col:0] &&[_sqlQueryData getCellWithRow:i col:3]) {\r\n                    [stockCodes addObject:[_sqlQueryData getCellWithRow:i col:1]];\r\n                    [stockNames addObject:[_sqlQueryData getCellWithRow:i col:0]];\r\n                    [stockMarketList addObject:[_sqlQueryData getCellWithRow:i col:3]];\r\n                    \r\n                }else{\r\n                    return;\r\n                }\r\n                \r\n            }\r\n            [dic setObject:stockCodes forKey:","relevantFile":"","relevantFileList":[],"filePath":"SearchStock.mm","template":"objective-cpp","multiRes":{"hipilot":"dInfoLabel.hidden = NO;\n        cell._buttonImage.hidden = NO;","deepseek-chat-lite":"dedInfoLabel.hidden = NO;","CodeQwen2.5-7B":"dedInfoLabel.hidden = NO;\r","copilot":"stockModel = [[HXUGCSelfStockModel alloc] initWithStockCode:stockCode marketId:marketID];"}},{"prefix":"        if (![[SSGGroupViewModel shareInstance] hasGroupAuthority]) {\n            [[[ToastView alloc] initWithText:@\"已添加至“自选股”\"] show];\n        } else {\n            [[[ToastView alloc] initWithText:@\"添加成功，已同步至您电脑上的自选股!\"] show];\n        }\n    }\n}\n\n- (void)deleteStockCodeResult:(HXUGCSelfStockModel *)model {\n    [_tableView reloadData]; // 必须要刷新一次\n    if (!model) {\n        // 说明不是从当前search页面发出的删除命令 得到的通知\n        return;\n    }\n    // 删除自选成功\n    [[[ToastView alloc] initWithText:@\"已移出“自选股”\"] show];\n}\n\n- (UIView *)viewForMessageCallBackView {\n    UIViewController *mainController = (UIViewController *) [((AMUITabFm *) [AMUIFrameWork shareingUIFramework]) getCurStackController];\n    return mainController.view;\n}\n\n- (id<UIKeyInput>)inputSubviewInView:(UIView *)view\n{\n    if ([view conformsToProtocol:@protocol(UIKeyInput)]) {\n        return (id<UIKeyInput>)view;\n    }\n    for (UIView *subview in view.subviews) {\n        id<UIKeyInput> inputView = [self inputSubviewInView:subview];\n        if (inputView) {\n            return inputView;\n        }\n    }\n    return nil;\n}\n\n//解析设置构件属性\n- (void)onFinishInflate\n{\n    _searchBar.donotChangeSelfTheme = YES;\n    _searchBar.donotChangeSubviewTheme = YES;\n    _searchBar.autocorrectionType = UITextAutocorrectionTypeYes;\n    _searchBar.autocapitalizationType = UITextAutocapitalizationTypeNone;\n\n    self.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    \n    memset(&userFlag, 0, sizeof( struct interfaceFlag));\n   \n    _sqlQueryData = NULL;\n   \n    searchSQL = [[SearchEngine alloc] initWithSupporUSAStock:true limit:20];\n    searchSQL.delegate = self ;\n    \n    self.lastSearchText = nil;\n    self.selfSelectStock = nil;\n\t\n    userFlag.finishSearch |= 1;\n    userFlag.firstLoad |= 1;\n    userFlag.supportUsaSearch |= 1;\n\n    self.buryPoint = [[SearchStockBuryPoint alloc] init];\n\n\n    [self prepareHelpView];\n\t\n    _keyBoardType = KeyBoard_Normal;\n    \n    dataLimit = 20;\n    \n    [_tableView setBackgroundColor:FOREGROUND_COLOR_NORMAL];\n    if([ThemeVersionManager currentThemeVersion] == ThemeVersionNight){\n        [_searchBar setBarTintColor:BACKGROUND_COLOR_NIGHT];\n    }else{\n        UINavigationBar *bar = [UINavigationBar appearance];\n        [_searchBar setBarTintColor: bar.barTintColor];\n        self.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    }\n    [self changeTheme];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradWillShow:) name:UIKeyboardWillShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradDidShow:) name:UIKeyboardDidShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradWillHide:) name:UIKeyboardWillHideNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didBecomeActive:) name:UIApplicationDidBecomeActiveNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(inputModeDidChange:) name:UITextInputCurrentInputModeDidChangeNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(themeVersionChange) name:ThemeVersionNotification object:nil];\n\n}\n\n/**\n * 将列表的形式修改至初始化的状态\n * 1.自选股编辑页面和搜索页面           设置为历史列表\n * 2.其他分组编辑页面                  设置为搜索结果\n */\n- (void)changeListTypeToOriginal {\n    if ((self.pageCaller & SearchStockPageCallerDefaultZixuanGroup) ||\n        (self.pageCaller & SearchStockPageCallerOthers) ||\n        (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection)) {\n        self.buryPoint.listType = SearchStockListTypeHistory;  // 初始化列表类型 历史\n    } else if (self.pageCaller & SearchStockPageCallerCustomZiXuanGroup) {\n        self.buryPoint.listType = SearchStockListTypeSelfStock;\n    }\n}\n\n- (void) prepareHelpView {\n    if (nil == _helpView)\n    {\n        _helpView = [[UIView alloc] initWithFrame:self.frame];\n        UIImage* img = [UIImage imageNamed:@\"keyboard_helptext.png\"];\n        UIImageView* v = [[UIImageView alloc] initWithImage:img];\n        int nBorder =  fabs((_helpView.frame.size.width -  v.frame.size.width)/2);\n        v.frame = CGRectMake(nBorder, nBorder/2, v.frame.size.width, v.frame.size.height);\n        \n        _helpView.backgroundColor = [UIColor grayColor];\n        _helpView.alpha = 0.0;\n        _helpView.tag = 99; // 特殊的tag值，提供行为收集使用\n        \n        [_helpView addSubview:v];\n        \n        \n        [self addSubview:_helpView];\n    }\n}\n\n- (void)closeSearchPage\n{\n    [_pageData removeObjectForKey:@\"SearchModel\"];\n    \n    //新埋点\n   [ClientUserBehaviorLog sendLogWithLogobject:[_currentPageStr stringByAppendingString:@\".guanbi\"] actionType:ClickAction toPageid:EQLOCAL_NODE_ID_FRAME_SELFSTOCK];\n    [ViewBackward shareViewBackward].specialBack = AppearBackwardInButton;\n    AM_UI_Public_Proxy::ClosePopPages();\n}\n\n#pragma mark - Custom Accessor\n- (SearchStockPageCaller)pageCaller {\n    NSString *flag = _pageData[@\"back_pageid\"];\n\n    // 当前视图控制器是否为自选股分组页面2201调用弹出\n    if ([flag isEqualToString:@\"2402\"] || [flag isEqualToString:@\"2403\"]) {\n        return SearchStockPageCallerMorphologicalStockSelection;\n    } else if ([flag isEqualToString:@\"2891\"] ) {\n        return SearchStockPageCallerStockValuation;\n    } else if ([flag isEqualToString:@\"2560\"] ) {\n        return SearchStockPageCallerAMTZSYC;\n    } else if ([flag isEqualToString:@\"2561\"] ) {\n        return SearchStockPageCallerAMTXTXG;\n    } else if ([flag isEqualToString:@\"2562\"] ) {\n        return SearchStockPageCallerAMTGPGZ;\n    } else if ([flag isEqualToString:@\"2563\"] ) {\n        return SearchStockPageCallerAMTLSHK;\n    }  else if (!flag || ![flag isEqualToString:@\"2201\"] ) {\n        return SearchStockPageCallerOthers;\n    }\n\n    // 标识为自选股页面弹出 开始判断是否由默认自选股分组\n    // TODO: 缺少判断是否从DefaultGroup呈现\n    \n    BOOL isSelectedPlateGroup = [[SSGGroupViewModel shareInstance] isSelectedPlateGroup];\n    NSData *currentGroupID = _pageData[@\"currentGroupID\"];\n    if (currentGroupID != nil) {\n        isSelectedPlateGroup = ![[[SSGGroupViewModel shareInstance] groupInfoWithGroupID:currentGroupID] isSelfStockGroup];\n    }\n    \n    if (!isSelectedPlateGroup) {\n        return SearchStockPageCallerDefaultZixuanGroup;\n    }\n\n    return SearchStockPageCallerCustomZiXuanGroup;\n}\n\n\n\n//请求格式\n//[frame]\n//id=2201\n//pageList=0\n//reqctrl=1401\n//stockcode=399005\n- (void)requestData:(BOOL)wait\n{\n    \n\tif(self.selfSelectStock != nil)\n\t{\n\t\tint strLength = (int)[_selfSelectStock length];\n\t\tunichar* buf = new unichar[strLength];\n\t\tmemset(buf, 0, strLength*2);\n\t\tint nInstanceId = [self getInstanceId];\n\t\t[_selfSelectStock getCharacters: buf];\n\t\t\t\t\n\t\tAM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_ChangedSelfStock, 1);//代表自选股已改变\n\t\t\n\t\tif(wait)\n\t\t{\n\t\t\tAM_Middle_Public_Proxy::RequestWithWaitMode(0, 0, EQLOCAL_NODE_ID_FRAME_ADD_STOCK, nInstanceId, buf, strLength);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tAM_Middle_Public_Proxy::RequestWithImmediate(0, 0, EQLOCAL_NODE_ID_FRAME_ADD_STOCK, nInstanceId, buf, strLength);\n\t\t}\n        \n\t\tdelete[] buf;\n        self.selfSelectStock = nil;\n\t}\n}\n\n#pragma mark - UIScrollView delegate\n//modify by chenyonghong  20120619 在scrollViewDidScroll中隐藏键盘 只要滚动没停止 点输入框就会出现键盘弹出又消失\n//modify be hellen.zhouy   2014.531 关闭键盘\n- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView\n{\n    [self searchStockResignFirstResponder];\n}\n\n//设置tableviewcell中的 图片和\n- (void)setSearchStockCellImageAndRemark:(SearchStockCell*)cell selfStock:(CEQString8&)str8\n                              selfMarket:(CEQString8&)strMarket {\n\n    // 有些业务不需要添加自选按钮，搜索股票应该做成公用模块\n    if (_pageData[HXHiddenZiXuanSwitchKey] && [_pageData[HXHiddenZiXuanSwitchKey] boolValue]) {\n        cell._ssgAddedInfoLabel.hidden = YES;\n        cell._buttonImage.hidden = YES;\n        return;\n    }\n    else {\n        cell._ssgAddedInfoLabel.hidden = NO;\n        cell._buttonImage.hidden = ","infill":"weak typeof(self) weakSelf = self;\r\n                    ","suffix":"[groupModel addSecurities:@[stockModel] complete:^(NSError * _Nullable error) {\r\n                        [weakSelf displayAddStockIntoCustomGroupCallBackView];\r\n                    }];\r\n                    \r\n                    SSGGroupViewModel *viewModel = [SSGGroupViewModel shareInstance];\r\n                    if (currentGroupID && [viewModel addStockToTopUseLocalListAtGroupID:currentGroupID stockCode:stockCode marketID:marketID]) {\r\n                        [self displayAddStockIntoCustomGroupCallBackView];\r\n                    } else if ([viewModel addStockToTopUseLocalListAtSelectedIndexWithStockCode:stockCode marketID:marketID]) {\r\n                        [self displayAddStockIntoCustomGroupCallBackView];\r\n                    }\r\n\r\n                    [self ssg_setSearchStockCell:cell stockCode:stockCode marketID:marketID];\r\n                }\r\n            }\r\n        }\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif(_sqlQueryData != NULL\r\n       && indexPath.row <= ([_sqlQueryData.queryDataArr count] + userFlag.needGuide + userFlag.clearHistroy - 1)\r\n       && 3 <= [_sqlQueryData.fieldNameArr count])\r\n\t{\r\n        NSString* stockCode = nil;\r\n        NSString *stockName = nil;\r\n        NSString *stockMarket = nil;\r\n        \r\n        int currentIndex = (int)indexPath.row - userFlag.needGuide;\r\n        if ([_sqlQueryData getCellWithRow:currentIndex col:1] && [_sqlQueryData getCellWithRow:currentIndex col:0]) {\r\n            stockCode = [_sqlQueryData getCellWithRow:currentIndex col:1];\r\n            stockName = [_sqlQueryData getCellWithRow:currentIndex col:0];\r\n        }else{\r\n            return;\r\n        }\r\n        \r\n        if ([stockName length] < 1  || [stockCode length] < 1 )\r\n        {\r\n            return;\r\n        }\r\n        \r\n        if (4 <= [_sqlQueryData.fieldNameArr count])\r\n        {\r\n            if ( [_sqlQueryData getCellWithRow:currentIndex col:3])\r\n            {\r\n                stockMarket =  [_sqlQueryData getCellWithRow:currentIndex col:3];\r\n            }\r\n        }\r\n        \r\n        // 更新本地数据库\r\n        NSArray *stocksData = [_sqlQueryData getQueryData];\r\n        if (currentIndex < stocksData.count) {\r\n            [searchSQL updateStock:stocksData[currentIndex]];\r\n        }\r\n        \r\n        //把 股票 加入历史搜索股表\r\n        //  hellen.zhou   2014 . 5.30\r\n\t\t{\r\n            //名称\r\n            NSString *strName = [_sqlQueryData getCellWithRow:currentIndex col:0];\r\n            \r\n            //简拼,并对strPinyin判断是否为空，\r\n            NSString *strPinyin = [_sqlQueryData getCellWithRow:currentIndex col:2];\r\n            \r\n            NSString *strMaket = [_sqlQueryData getCellWithRow:currentIndex col:3];\r\n            \r\n            //对简拼和名称判断是否为空，不为空时才写入历史搜索中\r\n            if (strName != NULL && [strName length] > 0 && strPinyin != NULL && [strPinyin length] > 0) {\r\n                HXSearchStockInfo *searchInfo = [[HXSearchStockInfo alloc] init];\r\n                searchInfo.stockName = strName;\r\n                searchInfo.stockSimpleSpell = strPinyin;\r\n                searchInfo.stockMarket = strMaket;\r\n                searchInfo.stockCode = stockCode;\r\n                dispatch_async(dispatch_get_global_queue(0, 0), ^{\r\n                    [[HXDBOperationManager sharedInstance] insertHistoryInfo:searchInfo];\r\n                });\r\n            }\r\n\t\t}\r\n        \r\n        \r\n        if (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection ||\r\n            self.pageCaller & SearchStockPageCallerAMTXTXG) {\r\n            \r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            NSString *flag = _pageData[@\"back_pageid\"]; // 2402 or 2403 跳转方式不一样\r\n            \r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            \r\n            if (![@[SHANGHAI_A_MARKET_17, SHENZHENG_A_MARKET_33] containsObject:cell.market]) {\r\n                [AMUIPublicProxy showTipAutoClose:@\"仅支持沪深A股\"];\r\n                return;\r\n            }\r\n            \r\n            NSString *stockCode = cell._labelCode.text;\r\n            NSString *marketID = [NSString stringWithFormat:@\"%@\", cell.market];\r\n            NSString *stockName = cell._labelName.text;\r\n            NSDictionary *params = @{@\"stockcode\":stockCode ?:@\"\",\r\n                                     @\"stockmarket\":marketID ?:@\"\",\r\n                                     @\"stockname\":stockName ?:@\"\",\r\n                                     @\"back_pageid\":flag?:@\"2403\"\r\n                                     };\r\n            \r\n            [ClientUserBehaviorLog sendLogWithLogobject:[self clickedSearchObject:indexPath.row] actionType:ClickAction toPageid:[flag integerValue] toStockCode:stockCode];\r\n            \r\n            if ([flag isEqualToString:@\"2402\"]) {\r\n                [AMUIPublicProxy gotoPageWithIdAndParamsAndDonotDelete:PAGE_KLINE_SHAPE_STOCK_SELECTION_ID\r\n                                                                params:params];\r\n            } else {\r\n                [AMUIPublicProxy gotoPageWithId:PAGE_KLINE_SHAPE_STOCK_SELECTION_ID\r\n                                         params:params];\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // 搜索框跳转到股票估值页面\r\n        if (self.pageCaller & SearchStockPageCallerStockValuation) {\r\n            \r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            NSString *flag = _pageData[@\"back_pageid\"];\r\n            \r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            \r\n            if (![@[SHANGHAI_A_MARKET_17, SHENZHENG_A_MARKET_33] containsObject:cell.market]) {\r\n                [AMUIPublicProxy showTipAutoClose:@\"仅支持沪深A股\"];\r\n                return;\r\n            }\r\n            \r\n            NSString *stockCode = cell._labelCode.text;\r\n            NSString *marketID = [NSString stringWithFormat:@\"%@\", cell.market];\r\n            NSString *stockName = cell._labelName.text;\r\n\r\n            [ClientUserBehaviorLog sendLogWithLogobject:[self clickedSearchObject:indexPath.row] actionType:ClickAction toPageid:[flag integerValue] toStockCode:stockCode];\r\n\r\n            NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithCapacity:0];\r\n            if (_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] && [_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] boolValue]) {\r\n                [dic addEntriesFromDictionary:_pageData];\r\n            }\r\n            if (stockCode != nil) {\r\n                [dic setValue:stockCode forKey:STR_UI_FRAMEWORK_STOCK_CODE];\r\n            }\r\n\r\n            [dic setValue:[NSNumber numberWithInt:1] forKey:KEY_BAOJIA_SELECTEDINDEX];\r\n            \r\n            if([stockName isKindOfClass:[NSString class]])\r\n            {\r\n                [dic setValue:stockName forKey:STR_UI_FRAMEWORK_STOCK_NAME];\r\n            }\r\n            if([marketID isKindOfClass:[NSString class]])\r\n            {\r\n                [dic setValue:marketID forKey:STR_UI_FRAMEWORK_STOCK_MARKET];\r\n            }\r\n            NSMutableArray *stockCodes = [NSMutableArray array];\r\n            NSMutableArray *stockNames = [NSMutableArray array];\r\n            NSMutableArray *stockMarketList = [NSMutableArray array];     // 新增股票市场列表 用于查询时做进一步确认\r\n\r\n            for (int i = 0; i < [_sqlQueryData.queryDataArr count]; i++) {\r\n                if ([_sqlQueryData getCellWithRow:i col:1] && [_sqlQueryData getCellWithRow:i col:0] &&[_sqlQueryData getCellWithRow:i col:3]) {\r\n                    [stockCodes addObject:[_sqlQueryData getCellWithRow:i col:1]];\r\n                    [stockNames addObject:[_sqlQueryData getCellWithRow:i col:0]];\r\n                    [stockMarketList addObject:[_sqlQueryData getCellWithRow:i col:3]];\r\n                    \r\n                }else{\r\n                    return;\r\n                }\r\n                \r\n            }\r\n            [dic setObject:stockCodes forKey:STR_UI_FRAMEWORK_STOCK_CODEAS];\r\n","relevantFile":"","relevantFileList":[],"filePath":"SearchStock.mm","template":"objective-cpp","multiRes":{"hipilot":"NO;\n\n        cell._buttonImage.addTarget(self,\n                                  action:@selector(ssg_addStockIntoGroup:),\n                                  forControlEvents:UIControlEventTouchUpInside);\n        \n        [self ssg_setSearchStockCell:cell stockCode","deepseek-chat-lite":"NO;","CodeQwen2.5-7B":"NO;\r","copilot":"weak typeof(self) weakSelf = self;\r\n                    "}},{"prefix":"        } else {\n            [[[ToastView alloc] initWithText:@\"添加成功，已同步至您电脑上的自选股!\"] show];\n        }\n    }\n}\n\n- (void)deleteStockCodeResult:(HXUGCSelfStockModel *)model {\n    [_tableView reloadData]; // 必须要刷新一次\n    if (!model) {\n        // 说明不是从当前search页面发出的删除命令 得到的通知\n        return;\n    }\n    // 删除自选成功\n    [[[ToastView alloc] initWithText:@\"已移出“自选股”\"] show];\n}\n\n- (UIView *)viewForMessageCallBackView {\n    UIViewController *mainController = (UIViewController *) [((AMUITabFm *) [AMUIFrameWork shareingUIFramework]) getCurStackController];\n    return mainController.view;\n}\n\n- (id<UIKeyInput>)inputSubviewInView:(UIView *)view\n{\n    if ([view conformsToProtocol:@protocol(UIKeyInput)]) {\n        return (id<UIKeyInput>)view;\n    }\n    for (UIView *subview in view.subviews) {\n        id<UIKeyInput> inputView = [self inputSubviewInView:subview];\n        if (inputView) {\n            return inputView;\n        }\n    }\n    return nil;\n}\n\n//解析设置构件属性\n- (void)onFinishInflate\n{\n    _searchBar.donotChangeSelfTheme = YES;\n    _searchBar.donotChangeSubviewTheme = YES;\n    _searchBar.autocorrectionType = UITextAutocorrectionTypeYes;\n    _searchBar.autocapitalizationType = UITextAutocapitalizationTypeNone;\n\n    self.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    \n    memset(&userFlag, 0, sizeof( struct interfaceFlag));\n   \n    _sqlQueryData = NULL;\n   \n    searchSQL = [[SearchEngine alloc] initWithSupporUSAStock:true limit:20];\n    searchSQL.delegate = self ;\n    \n    self.lastSearchText = nil;\n    self.selfSelectStock = nil;\n\t\n    userFlag.finishSearch |= 1;\n    userFlag.firstLoad |= 1;\n    userFlag.supportUsaSearch |= 1;\n\n    self.buryPoint = [[SearchStockBuryPoint alloc] init];\n\n\n    [self prepareHelpView];\n\t\n    _keyBoardType = KeyBoard_Normal;\n    \n    dataLimit = 20;\n    \n    [_tableView setBackgroundColor:FOREGROUND_COLOR_NORMAL];\n    if([ThemeVersionManager currentThemeVersion] == ThemeVersionNight){\n        [_searchBar setBarTintColor:BACKGROUND_COLOR_NIGHT];\n    }else{\n        UINavigationBar *bar = [UINavigationBar appearance];\n        [_searchBar setBarTintColor: bar.barTintColor];\n        self.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    }\n    [self changeTheme];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradWillShow:) name:UIKeyboardWillShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradDidShow:) name:UIKeyboardDidShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradWillHide:) name:UIKeyboardWillHideNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didBecomeActive:) name:UIApplicationDidBecomeActiveNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(inputModeDidChange:) name:UITextInputCurrentInputModeDidChangeNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(themeVersionChange) name:ThemeVersionNotification object:nil];\n\n}\n\n/**\n * 将列表的形式修改至初始化的状态\n * 1.自选股编辑页面和搜索页面           设置为历史列表\n * 2.其他分组编辑页面                  设置为搜索结果\n */\n- (void)changeListTypeToOriginal {\n    if ((self.pageCaller & SearchStockPageCallerDefaultZixuanGroup) ||\n        (self.pageCaller & SearchStockPageCallerOthers) ||\n        (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection)) {\n        self.buryPoint.listType = SearchStockListTypeHistory;  // 初始化列表类型 历史\n    } else if (self.pageCaller & SearchStockPageCallerCustomZiXuanGroup) {\n        self.buryPoint.listType = SearchStockListTypeSelfStock;\n    }\n}\n\n- (void) prepareHelpView {\n    if (nil == _helpView)\n    {\n        _helpView = [[UIView alloc] initWithFrame:self.frame];\n        UIImage* img = [UIImage imageNamed:@\"keyboard_helptext.png\"];\n        UIImageView* v = [[UIImageView alloc] initWithImage:img];\n        int nBorder =  fabs((_helpView.frame.size.width -  v.frame.size.width)/2);\n        v.frame = CGRectMake(nBorder, nBorder/2, v.frame.size.width, v.frame.size.height);\n        \n        _helpView.backgroundColor = [UIColor grayColor];\n        _helpView.alpha = 0.0;\n        _helpView.tag = 99; // 特殊的tag值，提供行为收集使用\n        \n        [_helpView addSubview:v];\n        \n        \n        [self addSubview:_helpView];\n    }\n}\n\n- (void)closeSearchPage\n{\n    [_pageData removeObjectForKey:@\"SearchModel\"];\n    \n    //新埋点\n   [ClientUserBehaviorLog sendLogWithLogobject:[_currentPageStr stringByAppendingString:@\".guanbi\"] actionType:ClickAction toPageid:EQLOCAL_NODE_ID_FRAME_SELFSTOCK];\n    [ViewBackward shareViewBackward].specialBack = AppearBackwardInButton;\n    AM_UI_Public_Proxy::ClosePopPages();\n}\n\n#pragma mark - Custom Accessor\n- (SearchStockPageCaller)pageCaller {\n    NSString *flag = _pageData[@\"back_pageid\"];\n\n    // 当前视图控制器是否为自选股分组页面2201调用弹出\n    if ([flag isEqualToString:@\"2402\"] || [flag isEqualToString:@\"2403\"]) {\n        return SearchStockPageCallerMorphologicalStockSelection;\n    } else if ([flag isEqualToString:@\"2891\"] ) {\n        return SearchStockPageCallerStockValuation;\n    } else if ([flag isEqualToString:@\"2560\"] ) {\n        return SearchStockPageCallerAMTZSYC;\n    } else if ([flag isEqualToString:@\"2561\"] ) {\n        return SearchStockPageCallerAMTXTXG;\n    } else if ([flag isEqualToString:@\"2562\"] ) {\n        return SearchStockPageCallerAMTGPGZ;\n    } else if ([flag isEqualToString:@\"2563\"] ) {\n        return SearchStockPageCallerAMTLSHK;\n    }  else if (!flag || ![flag isEqualToString:@\"2201\"] ) {\n        return SearchStockPageCallerOthers;\n    }\n\n    // 标识为自选股页面弹出 开始判断是否由默认自选股分组\n    // TODO: 缺少判断是否从DefaultGroup呈现\n    \n    BOOL isSelectedPlateGroup = [[SSGGroupViewModel shareInstance] isSelectedPlateGroup];\n    NSData *currentGroupID = _pageData[@\"currentGroupID\"];\n    if (currentGroupID != nil) {\n        isSelectedPlateGroup = ![[[SSGGroupViewModel shareInstance] groupInfoWithGroupID:currentGroupID] isSelfStockGroup];\n    }\n    \n    if (!isSelectedPlateGroup) {\n        return SearchStockPageCallerDefaultZixuanGroup;\n    }\n\n    return SearchStockPageCallerCustomZiXuanGroup;\n}\n\n\n\n//请求格式\n//[frame]\n//id=2201\n//pageList=0\n//reqctrl=1401\n//stockcode=399005\n- (void)requestData:(BOOL)wait\n{\n    \n\tif(self.selfSelectStock != nil)\n\t{\n\t\tint strLength = (int)[_selfSelectStock length];\n\t\tunichar* buf = new unichar[strLength];\n\t\tmemset(buf, 0, strLength*2);\n\t\tint nInstanceId = [self getInstanceId];\n\t\t[_selfSelectStock getCharacters: buf];\n\t\t\t\t\n\t\tAM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_ChangedSelfStock, 1);//代表自选股已改变\n\t\t\n\t\tif(wait)\n\t\t{\n\t\t\tAM_Middle_Public_Proxy::RequestWithWaitMode(0, 0, EQLOCAL_NODE_ID_FRAME_ADD_STOCK, nInstanceId, buf, strLength);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tAM_Middle_Public_Proxy::RequestWithImmediate(0, 0, EQLOCAL_NODE_ID_FRAME_ADD_STOCK, nInstanceId, buf, strLength);\n\t\t}\n        \n\t\tdelete[] buf;\n        self.selfSelectStock = nil;\n\t}\n}\n\n#pragma mark - UIScrollView delegate\n//modify by chenyonghong  20120619 在scrollViewDidScroll中隐藏键盘 只要滚动没停止 点输入框就会出现键盘弹出又消失\n//modify be hellen.zhouy   2014.531 关闭键盘\n- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView\n{\n    [self searchStockResignFirstResponder];\n}\n\n//设置tableviewcell中的 图片和\n- (void)setSearchStockCellImageAndRemark:(SearchStockCell*)cell selfStock:(CEQString8&)str8\n                              selfMarket:(CEQString8&)strMarket {\n\n    // 有些业务不需要添加自选按钮，搜索股票应该做成公用模块\n    if (_pageData[HXHiddenZiXuanSwitchKey] && [_pageData[HXHiddenZiXuanSwitchKey] boolValue]) {\n        cell._ssgAddedInfoLabel.hidden = YES;\n        cell._buttonImage.hidden = YES;\n        return;\n    }\n    else {\n        cell._ssgAddedInfoLabel.hidden = NO;\n        cell._buttonImage.hidden = NO;\n    }\n\n    // 添加自选界面 添加股票按钮 用于UI自动化 author:wangminghai\n    [cell._buttonImage setIsAccessibilityElement:YES];\n    [cell._buttonImag","infill":"displayAddStockIntoCustomGroupCallBackView];\r\n                    }];\r\n","suffix":"\r\n                    [self ssg_setSearchStockCell:cell stockCode:stockCode marketID:marketID];\r\n                }\r\n            }\r\n        }\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif(_sqlQueryData != NULL\r\n       && indexPath.row <= ([_sqlQueryData.queryDataArr count] + userFlag.needGuide + userFlag.clearHistroy - 1)\r\n       && 3 <= [_sqlQueryData.fieldNameArr count])\r\n\t{\r\n        NSString* stockCode = nil;\r\n        NSString *stockName = nil;\r\n        NSString *stockMarket = nil;\r\n        \r\n        int currentIndex = (int)indexPath.row - userFlag.needGuide;\r\n        if ([_sqlQueryData getCellWithRow:currentIndex col:1] && [_sqlQueryData getCellWithRow:currentIndex col:0]) {\r\n            stockCode = [_sqlQueryData getCellWithRow:currentIndex col:1];\r\n            stockName = [_sqlQueryData getCellWithRow:currentIndex col:0];\r\n        }else{\r\n            return;\r\n        }\r\n        \r\n        if ([stockName length] < 1  || [stockCode length] < 1 )\r\n        {\r\n            return;\r\n        }\r\n        \r\n        if (4 <= [_sqlQueryData.fieldNameArr count])\r\n        {\r\n            if ( [_sqlQueryData getCellWithRow:currentIndex col:3])\r\n            {\r\n                stockMarket =  [_sqlQueryData getCellWithRow:currentIndex col:3];\r\n            }\r\n        }\r\n        \r\n        // 更新本地数据库\r\n        NSArray *stocksData = [_sqlQueryData getQueryData];\r\n        if (currentIndex < stocksData.count) {\r\n            [searchSQL updateStock:stocksData[currentIndex]];\r\n        }\r\n        \r\n        //把 股票 加入历史搜索股表\r\n        //  hellen.zhou   2014 . 5.30\r\n\t\t{\r\n            //名称\r\n            NSString *strName = [_sqlQueryData getCellWithRow:currentIndex col:0];\r\n            \r\n            //简拼,并对strPinyin判断是否为空，\r\n            NSString *strPinyin = [_sqlQueryData getCellWithRow:currentIndex col:2];\r\n            \r\n            NSString *strMaket = [_sqlQueryData getCellWithRow:currentIndex col:3];\r\n            \r\n            //对简拼和名称判断是否为空，不为空时才写入历史搜索中\r\n            if (strName != NULL && [strName length] > 0 && strPinyin != NULL && [strPinyin length] > 0) {\r\n                HXSearchStockInfo *searchInfo = [[HXSearchStockInfo alloc] init];\r\n                searchInfo.stockName = strName;\r\n                searchInfo.stockSimpleSpell = strPinyin;\r\n                searchInfo.stockMarket = strMaket;\r\n                searchInfo.stockCode = stockCode;\r\n                dispatch_async(dispatch_get_global_queue(0, 0), ^{\r\n                    [[HXDBOperationManager sharedInstance] insertHistoryInfo:searchInfo];\r\n                });\r\n            }\r\n\t\t}\r\n        \r\n        \r\n        if (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection ||\r\n            self.pageCaller & SearchStockPageCallerAMTXTXG) {\r\n            \r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            NSString *flag = _pageData[@\"back_pageid\"]; // 2402 or 2403 跳转方式不一样\r\n            \r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            \r\n            if (![@[SHANGHAI_A_MARKET_17, SHENZHENG_A_MARKET_33] containsObject:cell.market]) {\r\n                [AMUIPublicProxy showTipAutoClose:@\"仅支持沪深A股\"];\r\n                return;\r\n            }\r\n            \r\n            NSString *stockCode = cell._labelCode.text;\r\n            NSString *marketID = [NSString stringWithFormat:@\"%@\", cell.market];\r\n            NSString *stockName = cell._labelName.text;\r\n            NSDictionary *params = @{@\"stockcode\":stockCode ?:@\"\",\r\n                                     @\"stockmarket\":marketID ?:@\"\",\r\n                                     @\"stockname\":stockName ?:@\"\",\r\n                                     @\"back_pageid\":flag?:@\"2403\"\r\n                                     };\r\n            \r\n            [ClientUserBehaviorLog sendLogWithLogobject:[self clickedSearchObject:indexPath.row] actionType:ClickAction toPageid:[flag integerValue] toStockCode:stockCode];\r\n            \r\n            if ([flag isEqualToString:@\"2402\"]) {\r\n                [AMUIPublicProxy gotoPageWithIdAndParamsAndDonotDelete:PAGE_KLINE_SHAPE_STOCK_SELECTION_ID\r\n                                                                params:params];\r\n            } else {\r\n                [AMUIPublicProxy gotoPageWithId:PAGE_KLINE_SHAPE_STOCK_SELECTION_ID\r\n                                         params:params];\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // 搜索框跳转到股票估值页面\r\n        if (self.pageCaller & SearchStockPageCallerStockValuation) {\r\n            \r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            NSString *flag = _pageData[@\"back_pageid\"];\r\n            \r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            \r\n            if (![@[SHANGHAI_A_MARKET_17, SHENZHENG_A_MARKET_33] containsObject:cell.market]) {\r\n                [AMUIPublicProxy showTipAutoClose:@\"仅支持沪深A股\"];\r\n                return;\r\n            }\r\n            \r\n            NSString *stockCode = cell._labelCode.text;\r\n            NSString *marketID = [NSString stringWithFormat:@\"%@\", cell.market];\r\n            NSString *stockName = cell._labelName.text;\r\n\r\n            [ClientUserBehaviorLog sendLogWithLogobject:[self clickedSearchObject:indexPath.row] actionType:ClickAction toPageid:[flag integerValue] toStockCode:stockCode];\r\n\r\n            NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithCapacity:0];\r\n            if (_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] && [_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] boolValue]) {\r\n                [dic addEntriesFromDictionary:_pageData];\r\n            }\r\n            if (stockCode != nil) {\r\n                [dic setValue:stockCode forKey:STR_UI_FRAMEWORK_STOCK_CODE];\r\n            }\r\n\r\n            [dic setValue:[NSNumber numberWithInt:1] forKey:KEY_BAOJIA_SELECTEDINDEX];\r\n            \r\n            if([stockName isKindOfClass:[NSString class]])\r\n            {\r\n                [dic setValue:stockName forKey:STR_UI_FRAMEWORK_STOCK_NAME];\r\n            }\r\n            if([marketID isKindOfClass:[NSString class]])\r\n            {\r\n                [dic setValue:marketID forKey:STR_UI_FRAMEWORK_STOCK_MARKET];\r\n            }\r\n            NSMutableArray *stockCodes = [NSMutableArray array];\r\n            NSMutableArray *stockNames = [NSMutableArray array];\r\n            NSMutableArray *stockMarketList = [NSMutableArray array];     // 新增股票市场列表 用于查询时做进一步确认\r\n\r\n            for (int i = 0; i < [_sqlQueryData.queryDataArr count]; i++) {\r\n                if ([_sqlQueryData getCellWithRow:i col:1] && [_sqlQueryData getCellWithRow:i col:0] &&[_sqlQueryData getCellWithRow:i col:3]) {\r\n                    [stockCodes addObject:[_sqlQueryData getCellWithRow:i col:1]];\r\n                    [stockNames addObject:[_sqlQueryData getCellWithRow:i col:0]];\r\n                    [stockMarketList addObject:[_sqlQueryData getCellWithRow:i col:3]];\r\n                    \r\n                }else{\r\n                    return;\r\n                }\r\n                \r\n            }\r\n            [dic setObject:stockCodes forKey:STR_UI_FRAMEWORK_STOCK_CODEAS];\r\n            [dic setObject:stockNames forKey:STR_UI_FRAMEWORK_STOCK_NAMEAS];\r\n            [dic setObject:stockMarketList forKey:STR_UI_FRAMEWORK_STOCK_MARKETAS];\r\n            \r\n            [_pageData removeObjectForKey:@\"SearchModel\"];\r\n            \r\n            [dic setObject:@\"1\" forKey:@\"StockValueDataChange\"];\r\n            AM_UI_Public_Proxy::GogoPageWithIdAndParamsAndDonotDelete(PAGE_STOCK_VALUATION, dic);\r\n            return;\r\n        }\r\n        // 从应用中间页(2550)present出来的搜索页\r\n        if (self.pageCaller & SearchStockPageCallerAMTGPGZ) {\r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            if (![@[SHANGH","relevantFile":"","relevantFileList":[],"filePath":"SearchStock.mm","template":"objective-cpp","multiRes":{"hipilot":"e sendAction:SSGActions","deepseek-chat-lite":"e setAccessibilityLabel:@\"添加自选\"];","CodeQwen2.5-7B":"e setAccessibilityLabel:@\"添加自选\"];\r","copilot":"displayAddStockIntoCustomGroupCallBackView];\r\n                    }];\r\n"}},{"prefix":"                config.eventModule = @\"sousuo\";\n                [self.groupManager showStockEditGroupVCInViewController:weakSelf.viewController config:config];\n            }] show];\n            \n        } else if (![[SSGGroupViewModel shareInstance] hasGroupAuthority]) {\n            [[[ToastView alloc] initWithText:@\"已添加至“自选股”\"] show];\n        } else {\n            [[[ToastView alloc] initWithText:@\"添加成功，已同步至您电脑上的自选股!\"] show];\n        }\n    } else {\n        // 自选分组页面 的 编辑股票页面 的 添加股票页面\n        if (![[SSGGroupViewModel shareInstance] hasGroupAuthority]) {\n            [[[ToastView alloc] initWithText:@\"已添加至“自选股”\"] show];\n        } else {\n            [[[ToastView alloc] initWithText:@\"添加成功，已同步至您电脑上的自选股!\"] show];\n        }\n    }\n}\n\n- (void)deleteStockCodeResult:(HXUGCSelfStockModel *)model {\n    [_tableView reloadData]; // 必须要刷新一次\n    if (!model) {\n        // 说明不是从当前search页面发出的删除命令 得到的通知\n        return;\n    }\n    // 删除自选成功\n    [[[ToastView alloc] initWithText:@\"已移出“自选股”\"] show];\n}\n\n- (UIView *)viewForMessageCallBackView {\n    UIViewController *mainController = (UIViewController *) [((AMUITabFm *) [AMUIFrameWork shareingUIFramework]) getCurStackController];\n    return mainController.view;\n}\n\n- (id<UIKeyInput>)inputSubviewInView:(UIView *)view\n{\n    if ([view conformsToProtocol:@protocol(UIKeyInput)]) {\n        return (id<UIKeyInput>)view;\n    }\n    for (UIView *subview in view.subviews) {\n        id<UIKeyInput> inputView = [self inputSubviewInView:subview];\n        if (inputView) {\n            return inputView;\n        }\n    }\n    return nil;\n}\n\n//解析设置构件属性\n- (void)onFinishInflate\n{\n    _searchBar.donotChangeSelfTheme = YES;\n    _searchBar.donotChangeSubviewTheme = YES;\n    _searchBar.autocorrectionType = UITextAutocorrectionTypeYes;\n    _searchBar.autocapitalizationType = UITextAutocapitalizationTypeNone;\n\n    self.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    \n    memset(&userFlag, 0, sizeof( struct interfaceFlag));\n   \n    _sqlQueryData = NULL;\n   \n    searchSQL = [[SearchEngine alloc] initWithSupporUSAStock:true limit:20];\n    searchSQL.delegate = self ;\n    \n    self.lastSearchText = nil;\n    self.selfSelectStock = nil;\n\t\n    userFlag.finishSearch |= 1;\n    userFlag.firstLoad |= 1;\n    userFlag.supportUsaSearch |= 1;\n\n    self.buryPoint = [[SearchStockBuryPoint alloc] init];\n\n\n    [self prepareHelpView];\n\t\n    _keyBoardType = KeyBoard_Normal;\n    \n    dataLimit = 20;\n    \n    [_tableView setBackgroundColor:FOREGROUND_COLOR_NORMAL];\n    if([ThemeVersionManager currentThemeVersion] == ThemeVersionNight){\n        [_searchBar setBarTintColor:BACKGROUND_COLOR_NIGHT];\n    }else{\n        UINavigationBar *bar = [UINavigationBar appearance];\n        [_searchBar setBarTintColor: bar.barTintColor];\n        self.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    }\n    [self changeTheme];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradWillShow:) name:UIKeyboardWillShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradDidShow:) name:UIKeyboardDidShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradWillHide:) name:UIKeyboardWillHideNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didBecomeActive:) name:UIApplicationDidBecomeActiveNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(inputModeDidChange:) name:UITextInputCurrentInputModeDidChangeNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(themeVersionChange) name:ThemeVersionNotification object:nil];\n\n}\n\n/**\n * 将列表的形式修改至初始化的状态\n * 1.自选股编辑页面和搜索页面           设置为历史列表\n * 2.其他分组编辑页面                  设置为搜索结果\n */\n- (void)changeListTypeToOriginal {\n    if ((self.pageCaller & SearchStockPageCallerDefaultZixuanGroup) ||\n        (self.pageCaller & SearchStockPageCallerOthers) ||\n        (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection)) {\n        self.buryPoint.listType = SearchStockListTypeHistory;  // 初始化列表类型 历史\n    } else if (self.pageCaller & SearchStockPageCallerCustomZiXuanGroup) {\n        self.buryPoint.listType = SearchStockListTypeSelfStock;\n    }\n}\n\n- (void) prepareHelpView {\n    if (nil == _helpView)\n    {\n        _helpView = [[UIView alloc] initWithFrame:self.frame];\n        UIImage* img = [UIImage imageNamed:@\"keyboard_helptext.png\"];\n        UIImageView* v = [[UIImageView alloc] initWithImage:img];\n        int nBorder =  fabs((_helpView.frame.size.width -  v.frame.size.width)/2);\n        v.frame = CGRectMake(nBorder, nBorder/2, v.frame.size.width, v.frame.size.height);\n        \n        _helpView.backgroundColor = [UIColor grayColor];\n        _helpView.alpha = 0.0;\n        _helpView.tag = 99; // 特殊的tag值，提供行为收集使用\n        \n        [_helpView addSubview:v];\n        \n        \n        [self addSubview:_helpView];\n    }\n}\n\n- (void)closeSearchPage\n{\n    [_pageData removeObjectForKey:@\"SearchModel\"];\n    \n    //新埋点\n   [ClientUserBehaviorLog sendLogWithLogobject:[_currentPageStr stringByAppendingString:@\".guanbi\"] actionType:ClickAction toPageid:EQLOCAL_NODE_ID_FRAME_SELFSTOCK];\n    [ViewBackward shareViewBackward].specialBack = AppearBackwardInButton;\n    AM_UI_Public_Proxy::ClosePopPages();\n}\n\n#pragma mark - Custom Accessor\n- (SearchStockPageCaller)pageCaller {\n    NSString *flag = _pageData[@\"back_pageid\"];\n\n    // 当前视图控制器是否为自选股分组页面2201调用弹出\n    if ([flag isEqualToString:@\"2402\"] || [flag isEqualToString:@\"2403\"]) {\n        return SearchStockPageCallerMorphologicalStockSelection;\n    } else if ([flag isEqualToString:@\"2891\"] ) {\n        return SearchStockPageCallerStockValuation;\n    } else if ([flag isEqualToString:@\"2560\"] ) {\n        return SearchStockPageCallerAMTZSYC;\n    } else if ([flag isEqualToString:@\"2561\"] ) {\n        return SearchStockPageCallerAMTXTXG;\n    } else if ([flag isEqualToString:@\"2562\"] ) {\n        return SearchStockPageCallerAMTGPGZ;\n    } else if ([flag isEqualToString:@\"2563\"] ) {\n        return SearchStockPageCallerAMTLSHK;\n    }  else if (!flag || ![flag isEqualToString:@\"2201\"] ) {\n        return SearchStockPageCallerOthers;\n    }\n\n    // 标识为自选股页面弹出 开始判断是否由默认自选股分组\n    // TODO: 缺少判断是否从DefaultGroup呈现\n    \n    BOOL isSelectedPlateGroup = [[SSGGroupViewModel shareInstance] isSelectedPlateGroup];\n    NSData *currentGroupID = _pageData[@\"currentGroupID\"];\n    if (currentGroupID != nil) {\n        isSelectedPlateGroup = ![[[SSGGroupViewModel shareInstance] groupInfoWithGroupID:currentGroupID] isSelfStockGroup];\n    }\n    \n    if (!isSelectedPlateGroup) {\n        return SearchStockPageCallerDefaultZixuanGroup;\n    }\n\n    return SearchStockPageCallerCustomZiXuanGroup;\n}\n\n\n\n//请求格式\n//[frame]\n//id=2201\n//pageList=0\n//reqctrl=1401\n//stockcode=399005\n- (void)requestData:(BOOL)wait\n{\n    \n\tif(self.selfSelectStock != nil)\n\t{\n\t\tint strLength = (int)[_selfSelectStock length];\n\t\tunichar* buf = new unichar[strLength];\n\t\tmemset(buf, 0, strLength*2);\n\t\tint nInstanceId = [self getInstanceId];\n\t\t[_selfSelectStock getCharacters: buf];\n\t\t\t\t\n\t\tAM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_ChangedSelfStock, 1);//代表自选股已改变\n\t\t\n\t\tif(wait)\n\t\t{\n\t\t\tAM_Middle_Public_Proxy::RequestWithWaitMode(0, 0, EQLOCAL_NODE_ID_FRAME_ADD_STOCK, nInstanceId, buf, strLength);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tAM_Middle_Public_Proxy::RequestWithImmediate(0, 0, EQLOCAL_NODE_ID_FRAME_ADD_STOCK, nInstanceId, buf, strLength);\n\t\t}\n        \n\t\tdelete[] buf;\n        self.selfSelectStock = nil;\n\t}\n}\n\n#pragma mark - UIScrollView delegate\n//modify by chenyonghong  20120619 在scrollViewDidScroll中隐藏键盘 只要滚动没停止 点输入框就会出现键盘弹出又消失\n//modify be hellen.zhouy   2014.531 关闭键盘\n- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView\n{\n    [self searchStockResignFirstResponder];\n}\n\n//设置tableviewcell中","infill":"p]\r\n                    if (currentGroupID == nil) {\r\n                        return;\r\n                    }\r\n                    NSString *groupId =","suffix":" [HXWatchlistModelAdaptation convertToCustomGroupIdStringWithData:currentGroupID];\r\n                    if (groupId.length == 0) {\r\n                        return;\r\n                    }\r\n                    HXMutableWatchlistGroupModel *groupModel = [[HXWatchlistGroupsDataService.shared findCustomGroupProvider] getWatchlistGroupWithId:groupId];\r\n                    if (groupModel == nil) {\r\n                        return;\r\n                    }\r\n                    HXUGCSelfStockModel *stockModel = [[HXUGCSelfStockModel alloc] initWithStockCode:stockCode marketId:marketID];\r\n                    __weak typeof(self) weakSelf = self;\r\n                    [groupModel addSecurities:@[stockModel] complete:^(NSError * _Nullable error) {\r\n                        [weakSelf displayAddStockIntoCustomGroupCallBackView];\r\n                        [weakSelf ssg_setSearchStockCell:cell stockCode:stockCode marketID:marketID];\r\n                    }];\r\n\r\n                }\r\n            }\r\n        }\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif(_sqlQueryData != NULL\r\n       && indexPath.row <= ([_sqlQueryData.queryDataArr count] + userFlag.needGuide + userFlag.clearHistroy - 1)\r\n       && 3 <= [_sqlQueryData.fieldNameArr count])\r\n\t{\r\n        NSString* stockCode = nil;\r\n        NSString *stockName = nil;\r\n        NSString *stockMarket = nil;\r\n        \r\n        int currentIndex = (int)indexPath.row - userFlag.needGuide;\r\n        if ([_sqlQueryData getCellWithRow:currentIndex col:1] && [_sqlQueryData getCellWithRow:currentIndex col:0]) {\r\n            stockCode = [_sqlQueryData getCellWithRow:currentIndex col:1];\r\n            stockName = [_sqlQueryData getCellWithRow:currentIndex col:0];\r\n        }else{\r\n            return;\r\n        }\r\n        \r\n        if ([stockName length] < 1  || [stockCode length] < 1 )\r\n        {\r\n            return;\r\n        }\r\n        \r\n        if (4 <= [_sqlQueryData.fieldNameArr count])\r\n        {\r\n            if ( [_sqlQueryData getCellWithRow:currentIndex col:3])\r\n            {\r\n                stockMarket =  [_sqlQueryData getCellWithRow:currentIndex col:3];\r\n            }\r\n        }\r\n        \r\n        // 更新本地数据库\r\n        NSArray *stocksData = [_sqlQueryData getQueryData];\r\n        if (currentIndex < stocksData.count) {\r\n            [searchSQL updateStock:stocksData[currentIndex]];\r\n        }\r\n        \r\n        //把 股票 加入历史搜索股表\r\n        //  hellen.zhou   2014 . 5.30\r\n\t\t{\r\n            //名称\r\n            NSString *strName = [_sqlQueryData getCellWithRow:currentIndex col:0];\r\n            \r\n            //简拼,并对strPinyin判断是否为空，\r\n            NSString *strPinyin = [_sqlQueryData getCellWithRow:currentIndex col:2];\r\n            \r\n            NSString *strMaket = [_sqlQueryData getCellWithRow:currentIndex col:3];\r\n            \r\n            //对简拼和名称判断是否为空，不为空时才写入历史搜索中\r\n            if (strName != NULL && [strName length] > 0 && strPinyin != NULL && [strPinyin length] > 0) {\r\n                HXSearchStockInfo *searchInfo = [[HXSearchStockInfo alloc] init];\r\n                searchInfo.stockName = strName;\r\n                searchInfo.stockSimpleSpell = strPinyin;\r\n                searchInfo.stockMarket = strMaket;\r\n                searchInfo.stockCode = stockCode;\r\n                dispatch_async(dispatch_get_global_queue(0, 0), ^{\r\n                    [[HXDBOperationManager sharedInstance] insertHistoryInfo:searchInfo];\r\n                });\r\n            }\r\n\t\t}\r\n        \r\n        \r\n        if (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection ||\r\n            self.pageCaller & SearchStockPageCallerAMTXTXG) {\r\n            \r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            NSString *flag = _pageData[@\"back_pageid\"]; // 2402 or 2403 跳转方式不一样\r\n            \r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            \r\n            if (![@[SHANGHAI_A_MARKET_17, SHENZHENG_A_MARKET_33] containsObject:cell.market]) {\r\n                [AMUIPublicProxy showTipAutoClose:@\"仅支持沪深A股\"];\r\n                return;\r\n            }\r\n            \r\n            NSString *stockCode = cell._labelCode.text;\r\n            NSString *marketID = [NSString stringWithFormat:@\"%@\", cell.market];\r\n            NSString *stockName = cell._labelName.text;\r\n            NSDictionary *params = @{@\"stockcode\":stockCode ?:@\"\",\r\n                                     @\"stockmarket\":marketID ?:@\"\",\r\n                                     @\"stockname\":stockName ?:@\"\",\r\n                                     @\"back_pageid\":flag?:@\"2403\"\r\n                                     };\r\n            \r\n            [ClientUserBehaviorLog sendLogWithLogobject:[self clickedSearchObject:indexPath.row] actionType:ClickAction toPageid:[flag integerValue] toStockCode:stockCode];\r\n            \r\n            if ([flag isEqualToString:@\"2402\"]) {\r\n                [AMUIPublicProxy gotoPageWithIdAndParamsAndDonotDelete:PAGE_KLINE_SHAPE_STOCK_SELECTION_ID\r\n                                                                params:params];\r\n            } else {\r\n                [AMUIPublicProxy gotoPageWithId:PAGE_KLINE_SHAPE_STOCK_SELECTION_ID\r\n                                         params:params];\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // 搜索框跳转到股票估值页面\r\n        if (self.pageCaller & SearchStockPageCallerStockValuation) {\r\n            \r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            NSString *flag = _pageData[@\"back_pageid\"];\r\n            \r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            \r\n            if (![@[SHANGHAI_A_MARKET_17, SHENZHENG_A_MARKET_33] containsObject:cell.market]) {\r\n                [AMUIPublicProxy showTipAutoClose:@\"仅支持沪深A股\"];\r\n                return;\r\n            }\r\n            \r\n            NSString *stockCode = cell._labelCode.text;\r\n            NSString *marketID = [NSString stringWithFormat:@\"%@\", cell.market];\r\n            NSString *stockName = cell._labelName.text;\r\n\r\n            [ClientUserBehaviorLog sendLogWithLogobject:[self clickedSearchObject:indexPath.row] actionType:ClickAction toPageid:[flag integerValue] toStockCode:stockCode];\r\n\r\n            NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithCapacity:0];\r\n            if (_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] && [_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] boolValue]) {\r\n                [dic addEntriesFromDictionary:_pageData];\r\n            }\r\n            if (stockCode != nil) {\r\n                [dic setValue:stockCode forKey:STR_UI_FRAMEWORK_STOCK_CODE];\r\n            }\r\n\r\n            [dic setValue:[NSNumber numberWithInt:1] forKey:KEY_BAOJIA_SELECTEDINDEX];\r\n            \r\n            if([stockName isKindOfClass:[NSString class]])\r\n            {\r\n                [dic setValue:stockName forKey:STR_UI_FRAMEWORK_STOCK_NAME];\r\n            }\r\n            if([marketID isKindOfClass:[NSString class]])\r\n            {\r\n                [dic setValue:marketID forKey:STR_UI_FRAMEWORK_STOCK_MARKET];\r\n            }\r\n            NSMutableArray *stockCodes = [NSMutableArray array];\r\n            NSMutableArray *stockNames = [NSMutableArray array];\r\n            NSMutableArray *stockMarketList = [NSMutableArray array];     // 新增股票市场列表 用于查询时做进一步确认\r\n\r\n            for (int i = 0; i < [_sqlQueryData.queryDataArr count]; i++) {\r\n                if ([_sqlQueryData getCellWithRow:i col:1] && [_sqlQueryData getCellWithRow:i col:0] &&[_sqlQueryData getCellWithRow:i col:3]) {\r\n                    [stockCodes addObject:[_sqlQueryData getCellWithRow:i col:1]];\r\n                    [stockNames addObject:[_sqlQueryData getCellWithRow:i col:0]];\r\n                    [stockMarketList addObject:[_sqlQueryData getCellWithRow:i col:3]];\r\n                    \r\n                }else{\r\n                    return;\r\n                }\r\n ","relevantFile":"","relevantFileList":[],"filePath":"SearchStock.mm","template":"objective-cpp","multiRes":{"hipilot":"对应的cell，并且跳转到对应的页面\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    SearchStockCell *cell = [tableView cellForRowAtIndexPath:index","deepseek-chat-lite":"的textfield失去第一响应者","CodeQwen2.5-7B":"的股票代码和名称","copilot":"p]\r\n                    if (currentGroupID == nil) {\r\n                        return;\r\n                    }\r\n                    NSString *groupId ="}},{"prefix":"                config.eventModule = @\"sousuo\";\n                [self.groupManager showStockEditGroupVCInViewController:weakSelf.viewController config:config];\n            }] show];\n            \n        } else if (![[SSGGroupViewModel shareInstance] hasGroupAuthority]) {\n            [[[ToastView alloc] initWithText:@\"已添加至“自选股”\"] show];\n        } else {\n            [[[ToastView alloc] initWithText:@\"添加成功，已同步至您电脑上的自选股!\"] show];\n        }\n    } else {\n        // 自选分组页面 的 编辑股票页面 的 添加股票页面\n        if (![[SSGGroupViewModel shareInstance] hasGroupAuthority]) {\n            [[[ToastView alloc] initWithText:@\"已添加至“自选股”\"] show];\n        } else {\n            [[[ToastView alloc] initWithText:@\"添加成功，已同步至您电脑上的自选股!\"] show];\n        }\n    }\n}\n\n- (void)deleteStockCodeResult:(HXUGCSelfStockModel *)model {\n    [_tableView reloadData]; // 必须要刷新一次\n    if (!model) {\n        // 说明不是从当前search页面发出的删除命令 得到的通知\n        return;\n    }\n    // 删除自选成功\n    [[[ToastView alloc] initWithText:@\"已移出“自选股”\"] show];\n}\n\n- (UIView *)viewForMessageCallBackView {\n    UIViewController *mainController = (UIViewController *) [((AMUITabFm *) [AMUIFrameWork shareingUIFramework]) getCurStackController];\n    return mainController.view;\n}\n\n- (id<UIKeyInput>)inputSubviewInView:(UIView *)view\n{\n    if ([view conformsToProtocol:@protocol(UIKeyInput)]) {\n        return (id<UIKeyInput>)view;\n    }\n    for (UIView *subview in view.subviews) {\n        id<UIKeyInput> inputView = [self inputSubviewInView:subview];\n        if (inputView) {\n            return inputView;\n        }\n    }\n    return nil;\n}\n\n//解析设置构件属性\n- (void)onFinishInflate\n{\n    _searchBar.donotChangeSelfTheme = YES;\n    _searchBar.donotChangeSubviewTheme = YES;\n    _searchBar.autocorrectionType = UITextAutocorrectionTypeYes;\n    _searchBar.autocapitalizationType = UITextAutocapitalizationTypeNone;\n\n    self.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    \n    memset(&userFlag, 0, sizeof( struct interfaceFlag));\n   \n    _sqlQueryData = NULL;\n   \n    searchSQL = [[SearchEngine alloc] initWithSupporUSAStock:true limit:20];\n    searchSQL.delegate = self ;\n    \n    self.lastSearchText = nil;\n    self.selfSelectStock = nil;\n\t\n    userFlag.finishSearch |= 1;\n    userFlag.firstLoad |= 1;\n    userFlag.supportUsaSearch |= 1;\n\n    self.buryPoint = [[SearchStockBuryPoint alloc] init];\n\n\n    [self prepareHelpView];\n\t\n    _keyBoardType = KeyBoard_Normal;\n    \n    dataLimit = 20;\n    \n    [_tableView setBackgroundColor:FOREGROUND_COLOR_NORMAL];\n    if([ThemeVersionManager currentThemeVersion] == ThemeVersionNight){\n        [_searchBar setBarTintColor:BACKGROUND_COLOR_NIGHT];\n    }else{\n        UINavigationBar *bar = [UINavigationBar appearance];\n        [_searchBar setBarTintColor: bar.barTintColor];\n        self.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    }\n    [self changeTheme];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradWillShow:) name:UIKeyboardWillShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradDidShow:) name:UIKeyboardDidShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoradWillHide:) name:UIKeyboardWillHideNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didBecomeActive:) name:UIApplicationDidBecomeActiveNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(inputModeDidChange:) name:UITextInputCurrentInputModeDidChangeNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(themeVersionChange) name:ThemeVersionNotification object:nil];\n\n}\n\n/**\n * 将列表的形式修改至初始化的状态\n * 1.自选股编辑页面和搜索页面           设置为历史列表\n * 2.其他分组编辑页面                  设置为搜索结果\n */\n- (void)changeListTypeToOriginal {\n    if ((self.pageCaller & SearchStockPageCallerDefaultZixuanGroup) ||\n        (self.pageCaller & SearchStockPageCallerOthers) ||\n        (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection)) {\n        self.buryPoint.listType = SearchStockListTypeHistory;  // 初始化列表类型 历史\n    } else if (self.pageCaller & SearchStockPageCallerCustomZiXuanGroup) {\n        self.buryPoint.listType = SearchStockListTypeSelfStock;\n    }\n}\n\n- (void) prepareHelpView {\n    if (nil == _helpView)\n    {\n        _helpView = [[UIView alloc] initWithFrame:self.frame];\n        UIImage* img = [UIImage imageNamed:@\"keyboard_helptext.png\"];\n        UIImageView* v = [[UIImageView alloc] initWithImage:img];\n        int nBorder =  fabs((_helpView.frame.size.width -  v.frame.size.width)/2);\n        v.frame = CGRectMake(nBorder, nBorder/2, v.frame.size.width, v.frame.size.height);\n        \n        _helpView.backgroundColor = [UIColor grayColor];\n        _helpView.alpha = 0.0;\n        _helpView.tag = 99; // 特殊的tag值，提供行为收集使用\n        \n        [_helpView addSubview:v];\n        \n        \n        [self addSubview:_helpView];\n    }\n}\n\n- (void)closeSearchPage\n{\n    [_pageData removeObjectForKey:@\"SearchModel\"];\n    \n    //新埋点\n   [ClientUserBehaviorLog sendLogWithLogobject:[_currentPageStr stringByAppendingString:@\".guanbi\"] actionType:ClickAction toPageid:EQLOCAL_NODE_ID_FRAME_SELFSTOCK];\n    [ViewBackward shareViewBackward].specialBack = AppearBackwardInButton;\n    AM_UI_Public_Proxy::ClosePopPages();\n}\n\n#pragma mark - Custom Accessor\n- (SearchStockPageCaller)pageCaller {\n    NSString *flag = _pageData[@\"back_pageid\"];\n\n    // 当前视图控制器是否为自选股分组页面2201调用弹出\n    if ([flag isEqualToString:@\"2402\"] || [flag isEqualToString:@\"2403\"]) {\n        return SearchStockPageCallerMorphologicalStockSelection;\n    } else if ([flag isEqualToString:@\"2891\"] ) {\n        return SearchStockPageCallerStockValuation;\n    } else if ([flag isEqualToString:@\"2560\"] ) {\n        return SearchStockPageCallerAMTZSYC;\n    } else if ([flag isEqualToString:@\"2561\"] ) {\n        return SearchStockPageCallerAMTXTXG;\n    } else if ([flag isEqualToString:@\"2562\"] ) {\n        return SearchStockPageCallerAMTGPGZ;\n    } else if ([flag isEqualToString:@\"2563\"] ) {\n        return SearchStockPageCallerAMTLSHK;\n    }  else if (!flag || ![flag isEqualToString:@\"2201\"] ) {\n        return SearchStockPageCallerOthers;\n    }\n\n    // 标识为自选股页面弹出 开始判断是否由默认自选股分组\n    // TODO: 缺少判断是否从DefaultGroup呈现\n    \n    BOOL isSelectedPlateGroup = [[SSGGroupViewModel shareInstance] isSelectedPlateGroup];\n    NSData *currentGroupID = _pageData[@\"currentGroupID\"];\n    if (currentGroupID != nil) {\n        isSelectedPlateGroup = ![[[SSGGroupViewModel shareInstance] groupInfoWithGroupID:currentGroupID] isSelfStockGroup];\n    }\n    \n    if (!isSelectedPlateGroup) {\n        return SearchStockPageCallerDefaultZixuanGroup;\n    }\n\n    return SearchStockPageCallerCustomZiXuanGroup;\n}\n\n\n\n//请求格式\n//[frame]\n//id=2201\n//pageList=0\n//reqctrl=1401\n//stockcode=399005\n- (void)requestData:(BOOL)wait\n{\n    \n\tif(self.selfSelectStock != nil)\n\t{\n\t\tint strLength = (int)[_selfSelectStock length];\n\t\tunichar* buf = new unichar[strLength];\n\t\tmemset(buf, 0, strLength*2);\n\t\tint nInstanceId = [self getInstanceId];\n\t\t[_selfSelectStock getCharacters: buf];\n\t\t\t\t\n\t\tAM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_ChangedSelfStock, 1);//代表自选股已改变\n\t\t\n\t\tif(wait)\n\t\t{\n\t\t\tAM_Middle_Public_Proxy::RequestWithWaitMode(0, 0, EQLOCAL_NODE_ID_FRAME_ADD_STOCK, nInstanceId, buf, strLength);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tAM_Middle_Public_Proxy::RequestWithImmediate(0, 0, EQLOCAL_NODE_ID_FRAME_ADD_STOCK, nInstanceId, buf, strLength);\n\t\t}\n        \n\t\tdelete[] buf;\n        self.selfSelectStock = nil;\n\t}\n}\n\n#pragma mark - UIScrollView delegate\n//modify by chenyonghong  20120619 在scrollViewDidScroll中隐藏键盘 只要滚动没停止 点输入框就会出现键盘弹出又消失\n//modify be hellen.zhouy   2014.531 关闭键盘\n- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView\n{\n    [self searchStockResignFirstResponder];\n}\n\n//设置tableviewcell中","infill":"GroupID:currentGroupID stockCode:stockCode marketID:marketID];\r\n                    if (currentGroupID == nil) {\r\n                        re","suffix":"turn;\r\n                    }\r\n                    NSString *groupId = [HXWatchlistModelAdaptation convertToCustomGroupIdStringWithData:currentGroupID];\r\n                    if (groupId.length == 0) {\r\n                        return;\r\n                    }\r\n                    HXMutableWatchlistGroupModel *groupModel = [[HXWatchlistGroupsDataService.shared findCustomGroupProvider] getWatchlistGroupWithId:groupId];\r\n                    if (groupModel == nil) {\r\n                        return;\r\n                    }\r\n                    HXUGCSelfStockModel *stockModel = [[HXUGCSelfStockModel alloc] initWithStockCode:stockCode marketId:marketID];\r\n                    __weak typeof(self) weakSelf = self;\r\n                    [groupModel addSecurities:@[stockModel] complete:^(NSError * _Nullable error) {\r\n                        [weakSelf displayAddStockIntoCustomGroupCallBackView];\r\n                        [weakSelf ssg_setSearchStockCell:cell stockCode:stockCode marketID:marketID];\r\n                    }];\r\n\r\n                }\r\n            }\r\n        }\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif(_sqlQueryData != NULL\r\n       && indexPath.row <= ([_sqlQueryData.queryDataArr count] + userFlag.needGuide + userFlag.clearHistroy - 1)\r\n       && 3 <= [_sqlQueryData.fieldNameArr count])\r\n\t{\r\n        NSString* stockCode = nil;\r\n        NSString *stockName = nil;\r\n        NSString *stockMarket = nil;\r\n        \r\n        int currentIndex = (int)indexPath.row - userFlag.needGuide;\r\n        if ([_sqlQueryData getCellWithRow:currentIndex col:1] && [_sqlQueryData getCellWithRow:currentIndex col:0]) {\r\n            stockCode = [_sqlQueryData getCellWithRow:currentIndex col:1];\r\n            stockName = [_sqlQueryData getCellWithRow:currentIndex col:0];\r\n        }else{\r\n            return;\r\n        }\r\n        \r\n        if ([stockName length] < 1  || [stockCode length] < 1 )\r\n        {\r\n            return;\r\n        }\r\n        \r\n        if (4 <= [_sqlQueryData.fieldNameArr count])\r\n        {\r\n            if ( [_sqlQueryData getCellWithRow:currentIndex col:3])\r\n            {\r\n                stockMarket =  [_sqlQueryData getCellWithRow:currentIndex col:3];\r\n            }\r\n        }\r\n        \r\n        // 更新本地数据库\r\n        NSArray *stocksData = [_sqlQueryData getQueryData];\r\n        if (currentIndex < stocksData.count) {\r\n            [searchSQL updateStock:stocksData[currentIndex]];\r\n        }\r\n        \r\n        //把 股票 加入历史搜索股表\r\n        //  hellen.zhou   2014 . 5.30\r\n\t\t{\r\n            //名称\r\n            NSString *strName = [_sqlQueryData getCellWithRow:currentIndex col:0];\r\n            \r\n            //简拼,并对strPinyin判断是否为空，\r\n            NSString *strPinyin = [_sqlQueryData getCellWithRow:currentIndex col:2];\r\n            \r\n            NSString *strMaket = [_sqlQueryData getCellWithRow:currentIndex col:3];\r\n            \r\n            //对简拼和名称判断是否为空，不为空时才写入历史搜索中\r\n            if (strName != NULL && [strName length] > 0 && strPinyin != NULL && [strPinyin length] > 0) {\r\n                HXSearchStockInfo *searchInfo = [[HXSearchStockInfo alloc] init];\r\n                searchInfo.stockName = strName;\r\n                searchInfo.stockSimpleSpell = strPinyin;\r\n                searchInfo.stockMarket = strMaket;\r\n                searchInfo.stockCode = stockCode;\r\n                dispatch_async(dispatch_get_global_queue(0, 0), ^{\r\n                    [[HXDBOperationManager sharedInstance] insertHistoryInfo:searchInfo];\r\n                });\r\n            }\r\n\t\t}\r\n        \r\n        \r\n        if (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection ||\r\n            self.pageCaller & SearchStockPageCallerAMTXTXG) {\r\n            \r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            NSString *flag = _pageData[@\"back_pageid\"]; // 2402 or 2403 跳转方式不一样\r\n            \r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            \r\n            if (![@[SHANGHAI_A_MARKET_17, SHENZHENG_A_MARKET_33] containsObject:cell.market]) {\r\n                [AMUIPublicProxy showTipAutoClose:@\"仅支持沪深A股\"];\r\n                return;\r\n            }\r\n            \r\n            NSString *stockCode = cell._labelCode.text;\r\n            NSString *marketID = [NSString stringWithFormat:@\"%@\", cell.market];\r\n            NSString *stockName = cell._labelName.text;\r\n            NSDictionary *params = @{@\"stockcode\":stockCode ?:@\"\",\r\n                                     @\"stockmarket\":marketID ?:@\"\",\r\n                                     @\"stockname\":stockName ?:@\"\",\r\n                                     @\"back_pageid\":flag?:@\"2403\"\r\n                                     };\r\n            \r\n            [ClientUserBehaviorLog sendLogWithLogobject:[self clickedSearchObject:indexPath.row] actionType:ClickAction toPageid:[flag integerValue] toStockCode:stockCode];\r\n            \r\n            if ([flag isEqualToString:@\"2402\"]) {\r\n                [AMUIPublicProxy gotoPageWithIdAndParamsAndDonotDelete:PAGE_KLINE_SHAPE_STOCK_SELECTION_ID\r\n                                                                params:params];\r\n            } else {\r\n                [AMUIPublicProxy gotoPageWithId:PAGE_KLINE_SHAPE_STOCK_SELECTION_ID\r\n                                         params:params];\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // 搜索框跳转到股票估值页面\r\n        if (self.pageCaller & SearchStockPageCallerStockValuation) {\r\n            \r\n            SearchStockCell *cell = [tableView cellForRowAtIndexPath:indexPath];\r\n            NSString *flag = _pageData[@\"back_pageid\"];\r\n            \r\n            if (![cell isKindOfClass:[SearchStockCell class]]) { return; }\r\n            \r\n            if (![@[SHANGHAI_A_MARKET_17, SHENZHENG_A_MARKET_33] containsObject:cell.market]) {\r\n                [AMUIPublicProxy showTipAutoClose:@\"仅支持沪深A股\"];\r\n                return;\r\n            }\r\n            \r\n            NSString *stockCode = cell._labelCode.text;\r\n            NSString *marketID = [NSString stringWithFormat:@\"%@\", cell.market];\r\n            NSString *stockName = cell._labelName.text;\r\n\r\n            [ClientUserBehaviorLog sendLogWithLogobject:[self clickedSearchObject:indexPath.row] actionType:ClickAction toPageid:[flag integerValue] toStockCode:stockCode];\r\n\r\n            NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithCapacity:0];\r\n            if (_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] && [_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] boolValue]) {\r\n                [dic addEntriesFromDictionary:_pageData];\r\n            }\r\n            if (stockCode != nil) {\r\n                [dic setValue:stockCode forKey:STR_UI_FRAMEWORK_STOCK_CODE];\r\n            }\r\n\r\n            [dic setValue:[NSNumber numberWithInt:1] forKey:KEY_BAOJIA_SELECTEDINDEX];\r\n            \r\n            if([stockName isKindOfClass:[NSString class]])\r\n            {\r\n                [dic setValue:stockName forKey:STR_UI_FRAMEWORK_STOCK_NAME];\r\n            }\r\n            if([marketID isKindOfClass:[NSString class]])\r\n            {\r\n                [dic setValue:marketID forKey:STR_UI_FRAMEWORK_STOCK_MARKET];\r\n            }\r\n            NSMutableArray *stockCodes = [NSMutableArray array];\r\n            NSMutableArray *stockNames = [NSMutableArray array];\r\n            NSMutableArray *stockMarketList = [NSMutableArray array];     // 新增股票市场列表 用于查询时做进一步确认\r\n\r\n            for (int i = 0; i < [_sqlQueryData.queryDataArr count]; i++) {\r\n                if ([_sqlQueryData getCellWithRow:i col:1] && [_sqlQueryData getCellWithRow:i col:0] &&[_sqlQueryData getCellWithRow:i col:3]) {\r\n                    [stockCodes addObject:[_sqlQueryData getCellWithRow:i col:1]];\r\n                    [stockNames addObject:[_sqlQueryData getCellWithRow:i col:0]];\r\n                    [stockMarketList addObject:[_sqlQueryData getCellWithRow:i col:3]];\r\n                    \r\n      ","relevantFile":"","relevantFileList":[],"filePath":"SearchStock.mm","template":"objective-cpp","multiRes":{"hipilot":"的数据   第三个cell 加入自选股  第4个cell 删除自选股\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    \n    if (self.pageCall","deepseek-chat-lite":"的textfield失去第一响应者","CodeQwen2.5-7B":"的股票代码和名称","copilot":"GroupID:currentGroupID stockCode:stockCode marketID:marketID];\r\n                    if (currentGroupID == nil) {\r\n                        re"}},{"prefix":"            [self.resultProxy respondsToSelector:@selector(finishSearchWithStockCode:stockName:marketCode:)]) {\n            [self.resultProxy finishSearchWithStockCode:stockCode stockName:stockName marketCode:stockMarket];\n        }\n        else {\n            [self gotoPageWithId:toPageId stockCode:stockCode stockName:stockName market:stockMarket];// 跳转到选择股票的对应页面\n        }\n    }\n}\n\n- (NSIndexPath *)tableView:(UITableView *)tableView targetIndexPathForMoveFromRowAtIndexPath:(NSIndexPath *)sourceIndexPath toProposedIndexPath:(NSIndexPath *)proposedDestinationIndexPath\n{\n#ifdef DEBUG_SEARCH_LOG\n\tAMNSLog(@\"%@\",proposedDestinationIndexPath.row);\n#endif\n\treturn 0;\n}\n\n- (void) setTableViewVisible:(BOOL) visible {\n    if (visible != _tableViewVisible)\n    {\n        _tableView.hidden = (!visible);\n        _tipLabel.hidden = visible;\n        _tipImage.hidden = visible;\n        _tableViewVisible = visible;\n    }\n}\n\n#pragma mark - search stock\n- (void)queryStockFromLocal:(NSTimer*)timer\n{\n    id  info = [timer userInfo];\n    NSString *text = info;\n    \n    [self searchTextDidChange:text];\n\t\n}\n\n- (void) searchTextDidChange:(NSString*)text\n{\n    userFlag.finishSearch &= 0;\n    self.lastSearchText = text;\n    \n    CEQString16 strCode16;\n    if([text length] == 0)\n    {\n        searchSQL.responseType = SearchResponseType_Direct;\n        // 修改列表状态\n        [self changeListTypeToOriginal];\n        //TODO: 其他页面或者自选股默认分组 显示的为历史数据 自定义分组显示自选股分组的前50个股票\n        if ((self.pageCaller & SearchStockPageCallerOthers) ||\n            (self.pageCaller & SearchStockPageCallerDefaultZixuanGroup) ||\n            (self.pageCaller & SearchStockPageCallerMorphologicalStockSelection)) {\n            [searchSQL searchHistroy];\n        } else {\n            [self showSelfStockLimit50];\n        }\n    }\n    else if(CopyNSStringToEQString(text, strCode16))\n    {\n        // JIRA:9090 调试菜单优化 输入 myhexin 弹出调试菜单(内部团队自用,不对用户开放)\n        if (strCode16.IsEqual(_EQ(\"myhexin\")) || strCode16.IsEqual(_EQ(\"MYHEXIN\"))) {\n\t\t\tif(!_debugMenu) {\n\t\t\t\t_debugMenu = [[DebugMenu alloc] init];\n\t\t\t}\n            \n\t\t\t[_debugMenu openMenuInView:self];\n            userFlag.finishSearch |= 1;\n            [self searchStockResignFirstResponder];\n            userFlag.canAddCustomView &= 0;\n            return;\n\t\t}\n        \n        if ([text isEqualToString:@\"debug\"] && [[HXDebugSwitchServerManager sharedInstance] checkNeedShowDebugSwitchView]) {\n            if(!_debugSwitchMenu) {\n                _debugSwitchMenu = [[HXDebugSwitchMenu alloc] init];\n            }\n            [_debugSwitchMenu openDebugSwitchMenuInView:self];\n            \n            userFlag.finishSearch |= 1;\n            [self searchStockResignFirstResponder];\n            userFlag.canAddCustomView &= 0;\n            return;\n        }\n        \n#ifdef _DEBUG\n        // JIRA10554 自动化测试专属 请勿人为操作\n        if (strCode16.IsEqual(_EQ(\"cbasstart\")) && ![HXCBASDebugger sharedInstance].isEnableRecording) {\n            [[HXCBASDebugger sharedInstance] startRecording]; // 开始记录用户日志\n            return;\n        }\n        \n        if (strCode16.IsEqual(_EQ(\"cbasend\")) && [HXCBASDebugger sharedInstance].isEnableRecording) {\n            [[HXCBASDebugger sharedInstance] endRecordingWithSuccess:nil failure:nil]; // 结束记录并上传\n            return;\n        }\n#endif\n\n        // JIRA:9090 调试菜单优化 输入 10jqka 弹出调试菜单\n        if(strCode16.IsEqual(_EQ(\"10jqka\")) ||strCode16.IsEqual(_EQ(\"HEXIN\"))) {\n            if (!_DevDebugMenu) {\n                _DevDebugMenu = [[DevDebugMenu alloc] init];\n            }\n            [_DevDebugMenu openDevDebugMenuInView:self];\n            \n            userFlag.finishSearch |= 1;\n            [self searchStockResignFirstResponder];\n            userFlag.canAddCustomView &= 0;\n            return;\n        }\n\n        text = [text stringByTrimmingWhitespace]; //去除两端的空格\n        text = [text stringTransformFullwidthtoHalfwidth];//全角转半角\n        //输入过滤特殊字符\n        if (text.length == 0 || ![self isSearchTextValid:text]) {\n            [_tableView reloadData];\n\n            self.keyBoardCanSearch = NO;\n            self.tableViewVisible = NO;\n            self.backgroundColor = BACKGROUND_COLOR_NORMAL;\n            [self changeTheme];\n\n            userFlag.lastdata = 0;\n            userFlag.finishSearch |= 1;\n\n            return;\n        }\n\n        [self setParentViewWaitViewActivity:YES];\n        // 手动搜索，智能联想搜索\n        [searchSQL findStocksByWords:text triggerType:TriggerCloudSearchType_Manual isIntelligentAssociate:YES];\n\t}\n}\n\n#pragma mark- SearchEngineDelegate\n- (void)didFinishedQueryHistroyWithResult:(HXSqlData *)resultData\n\n{\n    self.buryPoint.targid = nil;    //搜索历史记录结果不带targetId\n    [self changeListTypeToOriginal];\n    self.tableViewVisible = YES;\n    //_searchBar.text在中文输入法中会得到待选输入的字符，这里需要把待选的都去掉才能获得正确的已输入字符\n    NSString *searBarText = [self getSearchBarTextWithoutSelectedWords];\n\n\tif(resultData != NULL)\n\t{\n        if (_sqlQueryData == nil)\n        {\n            _sqlQueryData = [[HXSqlData alloc] init];\n            \n        }\n        \n        [_sqlQueryData copyFromResourceData:resultData];\n        \n    }\n    else\n    {\n        if (_sqlQueryData != nil)\n        {\n            _sqlQueryData = nil;\n        }\n    }\n   \n    if(_sqlQueryData != nil && [_sqlQueryData.queryDataArr count] == 0 && searBarText.length == 0)\n    {\n        self.tableViewVisible = YES;\n    }\n    \n    userFlag.clearHistroy = YES;\n    if(userFlag.firstLoad)  // 视图第一次显示时候\n    {\n        userFlag.finishSearch |= 1;\n        userFlag.firstLoad &= 0;\n        \n        [_tableView reloadData];\n        self.keyBoardCanSearch = NO;\n        \n        return;\n    }\n    \n    if(_lastSearchText!= nil && ![_lastSearchText isEqualToString:searBarText])  // 不是用户最终要的结果\n    {\n        userFlag.finishSearch |= 1;\n        self.tableViewVisible = YES;\n        [self searchTextDidChange:searBarText];\n        \n        return;\n    }\n    \n    CEQString16 strCode16;\n    if(_sqlQueryData != NULL && CopyNSStringToEQString(searBarText, strCode16))\n    {\n        int nLength = (int)[searBarText length];\n        if(nLength== 6 && ![tooles checkChineseCharacterInStr:searBarText] && _labelType == nil && ![add_ziXuan_StockCode isEqualToString:@\"2201\"])\n        {\n            CEQString8 strCode8;\n            if (KeyBoard_StockWarning == _keyBoardType)//股价预警\n            {\n                //                    NSMutableDictionary* dicParams = [NSMutableDictionary dictionaryWithCapacity:1];\n                //                    if (str != nil)\n                //                    {\n                //                        [dicParams setObject:str forKey:@\"stockCode\"];\n                //                    }\n                //                    AM_UI_Public_Proxy::GogoPageWithIdAndParams(PAGE_ADDWARNING, dicParams);\n                int nIndex = 0;\n                if(_sqlQueryData != NULL\n                   && nIndex < [_sqlQueryData.queryDataArr count]\n                   && 3 <= [_sqlQueryData.fieldNameArr count])\n                {//有搜出结果\n                    //取第一条纪录中对应的代码去请求（后台股票搜索区分大小写，所以要从本地数据库搜索结果中取代码）\n                    NSString* strNs = [_sqlQueryData getCellWithRow:nIndex col:1];\n                    CEQString16 *str16 = CopyNSStringToNewEQString(strNs);\n                    //添加频率\n                    if(str16 != NULL)\n                    {\n                        str16->GetString8(strCode8);\n                    }\n                    NSMutableDictionary* dicParams = [NSMutableDictionary dictionaryWithCapacity:1];\n                    if (strNs != nil)\n                    {\n                        [dicParams setObject:strNs forKey:@\"stockCode\"];\n                    }\n//                    AM_UI_Public_Proxy::ClosePopPagesWithAnimation(NO);\n                    AM_UI_Public_Proxy::GogoPageWithIdAndParams(PAGE_ADDWARNING, dicParams);\n                    \n                    //                        [self gotoPageWithStockCode:strNs];// 跳转到选择股票的对应页面","infill":"pID:(NSDate *)currentGroupID stockCode:(NSString *)stockCode stockName:(NSString *)stockName marketID:(NSString *)marketID {\r\n- (void)addSelectedStockIntoCustomGroupWithCurrentGroupID:(NSDate\r\n    \r\n}\r\n\r\n- (void)ssg_setSearchStockCell:(SearchStockCell *)sender stockCode:(NSString *)stockCode marketID:(NSString *)marketID {\r\n    CEQString16 str16Code;\r\n    CEQString16 str16Market;\r\n    if (CopyNSStringToEQString(stockCode, str16Code) && CopyNSStringToEQString(marketID, str16Market)) {\r\n        CEQString8 str8Code;\r\n        CEQString8 str8Market;\r\n        str16Code.GetString8(str8Code);\r\n        str16Market.GetString8(str8Market);\r\n        [self setSearchStockCellImageAndRemark:sender selfStock:str8Code selfMarket:str8Market];\r\n    }\r\n}\r\n\r\n/// 将选中的股票从自选股分组移除\r\n- (void)deleteSelectedStockFromDefaultGroup:(SearchStockCell *)sender {\r\n    // 处理未联网状态下情况\r\n    if (!(AM_Middle_Public_Proxy::IsHasNetWork() && EQGetAppFrame() != NULL &&\r\n          EQGetAppFrame()->IsConnectToServer())) {\r\n        AM_UI_Public_Proxy::ShowTipAutoCloseNs(@\"未连接网络，操作失败\");\r\n        return;\r\n    }\r\n    \r\n    NSString *stockcode = sender._labelCode.text;\r\n    NSString *marketId = [NSString stringWithFormat:@\"%@\", sender.market];\r\n\r\n    CEQString16 str16Code;\r\n    CEQString16 str16Market;\r\n\r\n    if(CopyNSStringToEQString(stockcode, str16Code) && CopyNSStringToEQString(marketId, str16Market)) {\r\n        CEQString8 str8Code;\r\n        CEQString8 str8Market;\r\n        str16Code.GetString8(str8Code);\r\n        str16Market.GetString8(str8Market);\r\n\r\n        // 确保已经存在数据库中 那么执行删除操作\r\n        if(AM_Sql_Public_Proxy::IsSelfStock(str8Code,str8Market)) {\r\n            __weak typeof(self) weakself = self;\r\n            [AMMiddlePublicProxy deleteSelfStockWithStockCode:stockcode marketID:marketId complete:^(HXUGCSelfStockModel *model, NSError *error) {\r\n                if (mo","suffix":"del && !error) {\r\n                    [weakself deleteStockCodeResult:model];\r\n                }\r\n            }];\r\n            \r\n            [self setSearchStockCellImageAndRemark:sender selfStock:str8Code selfMarket:str8Market];\r\n        }\r\n    }\r\n}\r\n\r\n- (void)pressSearchStockCellImage:(SearchStockCell*)sender {\r\n\r\n    if (!sender) {\r\n        return;\r\n    }\r\n\r\n    //个人持仓自行组合添加\r\n    if (_labelType != nil && [_labelType.text isEqualToString:@\"chicang\"]) {\r\n        [_pageData removeObjectForKey:@\"SearchModel\"];\r\n        return ;\r\n    }\r\n    NSString *state = sender._labelRemark.text; // 获取当前股票是否已加入自选股\r\n    NSIndexPath *indexPath = [_tableView indexPathForCell:sender];\r\n    \r\n    if (IS_IPHONE4) {\r\n        [_searchBar resignFirstResponder]; // 收起键盘 防止提示语被遮盖\r\n    }\r\n    \r\n    if ([state isEqualToString:@\"已加自选\"]) {\r\n        {\r\n            /// 埋点\r\n            [self.buryPoint cbasLoggingSearchStockPageDeleteStockWithIndexPath:indexPath needGuide:(BOOL) userFlag.needGuide];\r\n        }\r\n\r\n        [self deleteSelectedStockFromDefaultGroup:sender];\r\n    } else {\r\n        {\r\n            /// 埋点\r\n            [self.buryPoint cbasLoggingSearchStockPageAddStockWithIndexPath:indexPath needGuide:(BOOL) userFlag.needGuide];\r\n        }\r\n        [self addSelectedStockIntoDefaultGroup:sender];\r\n    }\r\n\r\n    \r\n}\r\n\r\n- (int)getToPageId {\r\n    EQINT nPage = PAGE_GeGuBaoJia_ID;\r\n    NavigationControllEx*  pCurStack = (NavigationControllEx*)[((AMUITabFm*)g_uiframeWork).mainTabBar selectedViewController];\r\n    UIViewController* pv = pCurStack.topViewController;\r\n    if ([pv conformsToProtocol:@protocol(HXStockDetailContainerPublicProtocol)] &&\r\n        [(id<HXStockDetailContainerPublicProtocol>)pv isKLineViewPage]) {\r\n        nPage =  PAGE_GeguKLine_V_ID;\r\n    }\r\n    return nPage;\r\n}\r\n\r\n\r\n// 跳转到选择股票的对应页面\r\n- (void)gotoPageWithStockCode:(NSString *)strNs stockName:(NSString *)strName market:(NSString *)strMarket\r\n{\r\n    int pageId = [self getToPageId];\r\n    [self gotoPageWithId:pageId stockCode:strNs stockName:strName market:strMarket];\r\n}\r\n\r\n- (void)gotoPageWithId:(int)pageId\r\n             stockCode:(NSString *)strNs\r\n             stockName:(NSString *)strName\r\n                market:(NSString *)strMarket {\r\n    \r\n    //自选编辑页面添加股票不需要进入其他页面\r\n    if([_labelMark.text isEqualToString:@\"can't select\"])\r\n    {\r\n        return;\r\n    }\r\n    \r\n    EQINT nPage = pageId;\r\n    \r\n    if ([self.add_ziXuan_StockCode isEqualToString:@\"2201\"])\r\n    {\r\n        //AM_UI_Public_Proxy::GogoPageWithId(2201,nil);\r\n    }\r\n    else\r\n    {\r\n        NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithCapacity:0];\r\n        if (_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] && [_pageData[PAGEDATA_IS_SYNCHRONIZEDATA] boolValue]) {\r\n            [dic addEntriesFromDictionary:_pageData];\r\n        }\r\n        if (strNs != nil) {\r\n            [dic setValue:strNs forKey:STR_UI_FRAMEWORK_STOCK_CODE];\r\n        }\r\n        if (nPage == PAGE_GeGuBaoJia_ID) {\r\n            [dic setValue:[NSNumber numberWithInt:1] forKey:KEY_BAOJIA_SELECTEDINDEX];\r\n        }\r\n        \r\n        if([strName isKindOfClass:[NSString class]])\r\n        {\r\n            [dic setValue:strName forKey:STR_UI_FRAMEWORK_STOCK_NAME];\r\n        }\r\n        if([strMarket isKindOfClass:[NSString class]])\r\n        {\r\n            [dic setValue:strMarket forKey:STR_UI_FRAMEWORK_STOCK_MARKET];\r\n        }\r\n        NSMutableArray *stockCodes = [NSMutableArray array];\r\n        NSMutableArray *stockNames = [NSMutableArray array];\r\n        NSMutableArray *stockMarketList = [NSMutableArray array];     // 新增股票市场列表 用于查询时做进一步确认\r\n        for (int i = 0; i < [_sqlQueryData.queryDataArr count]; i++) {\r\n            CEQString16 str16Code;\r\n            CEQString16 str16Name;\r\n            CEQString16 str16Market;\r\n           \r\n            if ([_sqlQueryData getCellWithRow:i col:1] && [_sqlQueryData getCellWithRow:i col:0] && [_sqlQueryData getCellWithRow:i col:3]) {\r\n                [stockCodes addObject:[_sqlQueryData getCellWithRow:i col:1]];\r\n                [stockNames addObject:[_sqlQueryData getCellWithRow:i col:0]];\r\n                [stockMarketList addObject:[_sqlQueryData getCellWithRow:i col:3]];\r\n            }else{\r\n                return;\r\n            }\r\n\r\n        }\r\n        [dic setObject:stockCodes forKey:STR_UI_FRAMEWORK_STOCK_CODEAS];\r\n        [dic setObject:stockNames forKey:STR_UI_FRAMEWORK_STOCK_NAMEAS];\r\n        [dic setObject:stockMarketList forKey:STR_UI_FRAMEWORK_STOCK_MARKETAS];\r\n        \r\n        [_pageData removeObjectForKey:@\"SearchModel\"];\r\n        \r\n        //        AM_UI_Public_Proxy::ClosePopPagesWithAnimation(NO);\r\n        /*\r\n         在iOS7上调用ClosePopPagesWithAnimation关闭弹出框，在弹框消失之前就会调用tabbarcontrollerex的viewwillappear，会刷新被替换的页面导致刷新错误，出现新闻空白。\r\n         修改方法：将ClosePopPagesWithAnimation的处理置于GogoPageWithIdAndParamsAndDonotDelete中，保证在替换页面后再调用tabbarcontrollerex的viewwillappear\r\n         */\r\n        AM_UI_Public_Proxy::GogoPageWithIdAndParamsAndDonotDelete(nPage, dic);\r\n    }\r\n}\r\n\r\n- (NSString *)getSearchBarTextWithoutSelectedWords {\r\n    NSString *searBarText = _searchBar.text;\r\n    UITextRange *textRange =[_customKey.textView markedTextRange];\r\n\r\n    if (textRange) {\r\n        UITextPosition *beginning = [_customKey.textView beginningOfDocument];\r\n        UITextPosition *start = textRange.start;\r\n        UITextPosition *end = textRange.end;\r\n\r\n        NSInteger location = [_customKey.textView offsetFromPosition:beginning toPosition:start];\r\n        NSInteger length = [_customKey.textView offsetFromPosition:start toPosition:end];\r\n\r\n        if (searBarText.length <= location + length) {\r\n            searBarText = [searBarText stringByReplacingCharactersInRange:NSMakeRange(location, length) withString:@\"\"];\r\n        }\r\n\r\n    }\r\n\r\n    return searBarText;\r\n}\r\n\r\n- (void)sendKeyboardTypeLogBeforeGotoPage {\r\n    NSString *searchText = [self getSearchBarTextWithoutSelectedWords];\r\n    if (searchText.length == 0) {\r\n        return;\r\n    }\r\n\r\n    if (_customKey.keyBoardStyle == KeyBoardStyle_system) {\r\n        if ([self isStringIncludeChinses:searchText]) {\r\n            [AMUIPublicProxy collectUserBehavior:@\"sousuo_click_keyboard.system.chn\" type:ACTION_CLICK];\r\n            return;\r\n        }\r\n\r\n        if ([self isStringIncludeEnglishWord:searchText]) {\r\n            [AMUIPublicProxy collectUserBehavior:@\"sousuo_click_keyboard.system.eng\" type:ACTION_CLICK];\r\n            return;\r\n        }\r\n\r\n        if ([self isStringIncludeNumber:searchText]) {\r\n            [AMUIPublicProxy collectUserBehavior:@\"sousuo_click_keyboard.system.num\" type:ACTION_CLICK];\r\n            return;\r\n        }\r\n\r\n    } else if (_customKey.keyBoardStyle == KeyBoardStyle_custom) {\r\n        if ([self isStringIncludeEnglishWord:searchText]) {\r\n            [AMUIPublicProxy collectUserBehavior:@\"sousuo_click_keyboard.classic.eng\" type:ACTION_CLICK];\r\n            return;\r\n        }\r\n\r\n        if ([self isStringIncludeNumber:searchText]) {\r\n            [AMUIPublicProxy collectUserBehavior:@\"sousuo_click_keyboard.classic.num\" type:ACTION_CLICK];\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\n- (BOOL)isSearchTextValid:(NSString *)text {\r\n    NSString *regex = @\"^[@A-Za-z0-9\\u4e00-\\u9fa5\\\\s\\\\.]+$\"; //只允许搜索@，字母，数字，汉字，空格\r\n    NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", regex];\r\n    return [predicate evaluateWithObject:text];\r\n}\r\n\r\n- (BOOL)isStringIncludeChinses:(NSString *)string {\r\n    NSString *regex=@\"[\\u4e00-\\u9fa5]+\";\r\n    NSRegularExpression *regexExpression = [NSRegularExpression regularExpressionWithPattern:regex options:NSRegularExpressionCaseInsensitive error:nil];\r\n    NSInteger number = [regexExpression numberOfMatchesInString:string options:NSMatchingReportProgress range:NSMakeRange(0, [string length])];\r\n    if","relevantFile":"","relevantFileList":[],"filePath":"SearchStock.mm","template":"objective-cpp","multiRes":{"hipilot":"；","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"pID:(NSDate *)currentGroupID stockCode:(NSString *)stockCode stockName:(NSString *)stockName marketID:(NSString *)marketID {\r\n- (void)addSelectedStockIntoCustomGroupWithCurrentGroupID:(NSDate\r\n    \r\n}\r\n\r\n- (void)ssg_setSearchStockCell:(SearchStockCell *)sender stockCode:(NSString *)stockCode marketID:(NSString *)marketID {\r\n    CEQString16 str16Code;\r\n    CEQString16 str16Market;\r\n    if (CopyNSStringToEQString(stockCode, str16Code) && CopyNSStringToEQString(marketID, str16Market)) {\r\n        CEQString8 str8Code;\r\n        CEQString8 str8Market;\r\n        str16Code.GetString8(str8Code);\r\n        str16Market.GetString8(str8Market);\r\n        [self setSearchStockCellImageAndRemark:sender selfStock:str8Code selfMarket:str8Market];\r\n    }\r\n}\r\n\r\n/// 将选中的股票从自选股分组移除\r\n- (void)deleteSelectedStockFromDefaultGroup:(SearchStockCell *)sender {\r\n    // 处理未联网状态下情况\r\n    if (!(AM_Middle_Public_Proxy::IsHasNetWork() && EQGetAppFrame() != NULL &&\r\n          EQGetAppFrame()->IsConnectToServer())) {\r\n        AM_UI_Public_Proxy::ShowTipAutoCloseNs(@\"未连接网络，操作失败\");\r\n        return;\r\n    }\r\n    \r\n    NSString *stockcode = sender._labelCode.text;\r\n    NSString *marketId = [NSString stringWithFormat:@\"%@\", sender.market];\r\n\r\n    CEQString16 str16Code;\r\n    CEQString16 str16Market;\r\n\r\n    if(CopyNSStringToEQString(stockcode, str16Code) && CopyNSStringToEQString(marketId, str16Market)) {\r\n        CEQString8 str8Code;\r\n        CEQString8 str8Market;\r\n        str16Code.GetString8(str8Code);\r\n        str16Market.GetString8(str8Market);\r\n\r\n        // 确保已经存在数据库中 那么执行删除操作\r\n        if(AM_Sql_Public_Proxy::IsSelfStock(str8Code,str8Market)) {\r\n            __weak typeof(self) weakself = self;\r\n            [AMMiddlePublicProxy deleteSelfStockWithStockCode:stockcode marketID:marketId complete:^(HXUGCSelfStockModel *model, NSError *error) {\r\n                if (mo"}},{"prefix":"\n#import \"SearchStock.h\"\n#import <HXBase/EQUIWindow.h>\n#import \"EQLocaIdDef.h\"\n#include <AMIphoneBase/EQThreadManager.h>\n#import \"DebugMenu.h\"\n#include \"EQAppFrame.h\"\n\n#ifdef _COLLECT_USER_BEHAVIOR\n#endif\n\n#import <HXBase/PageView.h>\n#include \"AM_UI_VarKeyString.h\"\n#import <HXBase/AMUITabFm.h>\n#import <HXBase/NavigationControllEx.h>\n#import <HXBase/ViewControllerEx.h>\n#import \"tooles.h\"\n#import \"HXStockDetailContainerPublicProtocol.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import <HXTool/UIView+Extent.h>\n#import <HXBase/TabBarControllerEx.h>\n#import \"SnackBarView.h\"\n#import \"SSGInputValidator.h\"\n#import \"SSGGroupViewModel+DataSynchronization.h\"\n#import \"SSGGroupViewModel+Information.h\"\n#import \"SSGItemProtocol.h\"\n#import \"SSGStockInfoModel.h\"\n#import <HXBase/UIColor+Colours.h>\n#import \"GroupInfoModel.h\"\n#import \"AMMiddlePublicProxy+SelfStockEdit.h\"\n#import \"SearchStockBuryPoint.h\"\n#import \"SSGShowEditPanelBuryPointer.h\"\n#import \"NSString+AM.h\"\n#import <HXTool/NSString+Chinese.h>\n#import <HXTool/NSString+EmptyAndWhitespace.h>\n#import \"AMSQLPublicProxy.h\"\n#import \"HXVoiceAssistantManager.h\"\n#import \"IntelligentSearchStockHeaderView.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import <HXTool/UIView+RelativeLayout.h>\n#import \"HXSearchStockPublicDefine.h\"\n#import <HXShowTipComponent/ToastView.h>\n#import \"HXDBOperationManager.h\"\n#import \"HXSearchStockManager.h\"\n#import <LocalURLConfig/LocalURLConfig.h>\n#import \"HXDebugSwitchServerManager.h\"\n#import \"HXSelfStockDetailManager.h\"\n#import <Masonry/Masonry.h>\n#import \"HXWatchListEditGroupManager.h\"\n#import <HXWatchList/HXWatchlistModelAdaptation.h>\n#import <HXWatchlistGroupsDataProvider/HXWatchlistGroupsDataService.h>\n\n#ifdef _DEBUG\n#import <AMIphoneDebug/HXCBASDebugger.h>\n#endif\n\nNSString *const HXSearchStockResultProxyKey = @\"HXSearchStockResultProxyKey\";\nNSString *const HXHiddenZiXuanSwitchKey = @\"HXZiXuanSwitchKey\";\n\nstatic NSString * const kCustomGroupSearchStockHeaderViewIdentifier = @\"kCustomGroupSearchStockHeaderViewIdentifier\";\nstatic CGFloat const kHeightOfCustomGroupSearchStockHeaderView = 30.f;\nstatic NSString * const kIntelligentSearchStockHeaderViewIdentifier = @\"IntelligentSearchStockHeaderViewIdentifier\";\nstatic CGFloat const kHeightOfIntelligentSearchStockHeaderView = 44.0f;\nextern CEQAppFrame* EQGetAppFrame();\nextern EQBOOL CopyNSStringToEQString(NSString* pNsStr,CEQString16& pEQStringSave );\nextern NSString* CopyEQStringToNsString(CEQString16* pEQsrc);\nextern EQUIWindow* g_eqWindow;\nextern EQThreadManager* g_ThreadManager;\nextern CEQString16* CopyNSStringToNewEQString(NSString* pNsStr);\nextern CEQAppFrame* EQGetAppFrame();\nextern AMUIFrameWork* g_uiframeWork;\n\ntypedef NS_ENUM(NSInteger, StockCellIdentifier)\n{\n    kSearchGuide = 0,\n    kSearchStockNO = 1,\n    kSearchStockYes = 2,\n    kSearchClear = 3,\n    kSearchUnknow = 4\n};\n\n@interface SearchStock() <SearchEngineDelegate> {\n    UIView             * _helpView;\n    DebugMenu          *_debugMenu;\n    DevDebugMenu       *_DevDebugMenu;\n    HXDebugSwitchMenu  *_debugSwitchMenu;\n    UISearchBar        *_searchBar;\n    KeyBoardType       _keyBoardType;       // 键盘类型\n    CustomKeyboard     *_customKey;         // 自定义键盘20140814\n    SearchCoverView    *_leftConverView;\n    SearchCoverView    *_rightConverView;\n    FullScreenTipView  *_tipView;\n}\n\n@property (nonatomic, strong) NSString *selfSelectStock;\n@property (nonatomic, strong) NSTimer *timer;\n@property (nonatomic, assign,setter = setTableViewVisible:) BOOL tableViewVisible;\n@property (nonatomic, strong) NSString *currentPageStr; // 用于搜索页发送埋点\n@property (nonatomic,copy,readwrite) NSString *lastSearchText;//最新键盘输入的文本\n@property (nonatomic, assign, readonly) SearchStockPageCaller pageCaller;   /*! 页面调用者 */\n@property (nonatomic, strong) UIButton *pictureButton;\n\n@property (nonatomic, strong) HXWatchListEditGroupManager *groupManager;\n\n- (void)searchTextDidChange:(NSString*) text;\n//本地数据库搜索\n- (void)queryStockFromLocal:(NSTimer*)timer;\n// 跳转到选择股票的对应页面\n- (void)gotoPageWithStockCode:(NSString *)strNs stockName:(NSString *)strName market:(NSString *)strMarket;\n// 添加到自选\n- (void)setUITableViewCell:(SearchStockCell*) cell setIndex:(int) nIndex;\n- (void)openStockChart:(id) sender;\n- (UITableViewCell *)tableViewCellWithIdentifier:(StockCellIdentifier) cellIdentifier\n                                   formTableView:(UITableView *)tableView;\n\n-(void)prepareHelpView;\n@end\n\n//搜索次数\n#define kExpectFrequency 3\n@implementation SearchStock\n@synthesize _sqlQueryData = _sqlQueryData;\n@synthesize _tableView;\n@synthesize _labelMark;\n@synthesize _labelType;\n@synthesize tipImage = _tipImage;\n@synthesize tipLabel = _tipLabel;\n@synthesize searchBar = _searchBar;\n@synthesize add_ziXuan_StockCode;\n@synthesize lastSearchText = _lastSearchText;\n@synthesize selfSelectStock = _selfSelectStock;\n@synthesize timer = _timer;\n@synthesize tableViewVisible = _tableViewVisible;\n\n\n- (void)dealloc\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    [_timer invalidate];\n\t_timer = nil;\n    searchSQL.delegate = nil;\n\n    self._tableView = nil;\n    [_searchBar setDelegate:nil];\n\t_debugMenu = nil;\n    self.searchBar = nil;\n\n    self.tipLabel = nil;\n    self.tipImage = nil;\n}\n\n\n- (void)showSelfStockLimit50 {\n    __block SearchStock *weakSelf = self;\n    [[SSGGroupViewModel shareInstance] selfStockInfosWithComplete:^(NSArray<SSGStockInfoModel *> *stockInfos) {\n        [weakSelf reloadTableWithSelfStockInfos:stockInfos];\n    }];\n\n}\n- (void)reloadTableWithSelfStockInfos:(NSArray<SSGStockInfoModel *> *)stockInfos {\n    _sqlQueryData = [[HXSqlData alloc] init];\n\n    [_sqlQueryData.fieldNameArr addObject:@\"name\"];\n    [_sqlQueryData.fieldNameArr addObject:@\"code\"];\n    [_sqlQueryData.fieldNameArr addObject:@\"pinyin\"];\n    [_sqlQueryData.fieldNameArr addObject:@\"market\"];\n    \n    \n    [stockInfos enumerateObjectsUsingBlock:^(SSGStockInfoModel *stockInfo, NSUInteger idx, BOOL *stop) {\n        NSArray *dataArr = @[stockInfo.stockName?:@\"\",\n                             stockInfo.stockID?:@\"\",\n                             @\" \",\n                             stockInfo.marketID?:@\"\"\n                             ];\n        [_sqlQueryData.queryDataArr addObject:dataArr];\n    }];\n    self.tableViewVisible = YES;\n    [_tableView reloadData];\n    \n}\n\n\n- (void)changeToCustomKeyboard\n{\n    [self searchStockKeyBoardShow];\n}\n\n//用户打开搜索界面次数\n- (bool) reachFrequency:(NSInteger) expect {\n    NSInteger num = 0;\n    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];\n    NSNumber *number = [userDefaults valueForKeyPath:@\"ReachFrequencyKey\"];\n    if (number != nil)\n    {\n        num = [number integerValue];\n        if (num >= expect)\n        {\n            return true;\n        }\n    }\n    \n    num += 1;\n    \n    [userDefaults setValue:[NSNumber numberWithInteger:num] forKey:@\"ReachFrequencyKey\"];\n    [userDefaults synchronize];\n    \n    return false;\n}\n\n-(void)processTextData:(CEQStuffTextStruct*)textData\n{\n    if(textData != nil)\n    {\n        CEQString16* strTip = textData->GetStrText();\n        NSString* str = CopyEQStringToNsString(strTip);\n        \n        _tipLabel.text = str;\n        \n        self.tableViewVisible = NO;\n    }\n}\n\n-(void)setData:(CEQStuffBaseStruct *)stuffData\n{\n    [self setParentViewWaitViewActivity:NO];\n    if(stuffData != NULL && stuffData->IsComplexTextData())\n\t{\n        \n        [self processTextData:(CEQStuffTextStruct*)stuffData];\n        \n\t}\n\telse if(stuffData != NULL &&stuffData->IsTableData())\n    {\n        CEQStuffTableStruct *tableData = (CEQStuffTableStruct*)stuffData;\n        _sqlQueryData = [[HXSqlData alloc] init];\n        CEQHashTable< CEQArrayPtr<CEQString16> > *pHas","infill":"[HXWatchlistcon]\r\n\r\n            [[HXWatchlistGroupsDataService.shared findCustomGroupPr","suffix":"ovider] getWatchlistGroupWithId:<#(nonnull NSString *)#>]\r\n            \r\n            SSGStockInfoModel *stockInfo = [SSGStockInfoModel modelWithStockID:stockCode marketID:marketID stockName:stockName];\r\n            GroupInfoModel *groupInfo;\r\n            if (currentGroupID) {\r\n                groupInfo = [viewModel groupInfoWithGroupID:currentGroupID];\r\n            } else {\r\n                groupInfo = [viewModel groupInfoAtSelectedIndex];\r\n            }\r\n            BOOL isInclude = [groupInfo includedStock:stockInfo];\r\n            if (isInclude) {\r\n                [cell._ssgAddedInfoLabel setText:@\"已在该组\"];\r\n                [cell._ssgAddedInfoLabel setTextColor:[UIColor hx_colorFromHexString:@\"979797\"]];\r\n            } else {\r\n                [cell._ssgAddedInfoLabel setText:@\"添加\"];\r\n                [cell._ssgAddedInfoLabel setTextColor:[UIColor hx_colorFromHexString:@\"f00019\"]];\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n- (void)setUITableViewCell:(SearchStockCell*) cell  setIndex:(int) nIndex\r\n{\r\n    if(cell != nil\r\n\t   &&_sqlQueryData != NULL\r\n       && nIndex < [_sqlQueryData.queryDataArr count]\r\n       && 3 <= [_sqlQueryData.fieldNameArr count])\r\n\t{\r\n\t\t//名称\r\n        NSString *str = [_sqlQueryData getCellWithRow:nIndex col:0];\r\n        if (str != NULL && [str length] > 0 ) {\r\n            cell._labelName.text = str;\r\n            [cell._labelName setTextColor:TEXT_COLOR_HOME_PAGE];\r\n            [cell._labelName changeTheme];\r\n        }\r\n        \r\n\t\t//代码\r\n        str = [_sqlQueryData getCellWithRow:nIndex col:1];\r\n        if (str != NULL && [str length] > 0) {\r\n            cell._labelCode.text = str;\r\n            cell._labelCode.textColor = TEXT_COLOR_HOME_PAGE;\r\n            [cell._labelCode changeTheme];\r\n        }\r\n        \r\n\t\t//图标\r\n        if(str != NULL && [str length] > 0)\r\n\t\t{\r\n            CEQString8 str8;\r\n            CEQString16 *str16 = CopyNSStringToNewEQString(str);\r\n            str16->GetString8(str8);\r\n            str = [_sqlQueryData getCellWithRow:nIndex col:3];\r\n            CEQString16 *market = CopyNSStringToNewEQString(str);\r\n            CEQString8 market8;\r\n            if(market != NULL && market->GetLength() > 0){\r\n                market->GetString8(market8);\r\n                [self setSearchStockCellImageAndRemark:cell selfStock:str8 selfMarket:market8];\r\n            }\r\n\t\t}\r\n\t\t//简拼\r\n        str = [_sqlQueryData getCellWithRow:nIndex col:2];\r\n        if (str != NULL && [str length] > 0 ) {\r\n            cell._labelSmall.text = str;\r\n            [cell._labelSmall setTextColor:TEXT_COLOR_HOME_PAGE];\r\n            [cell._labelSmall changeTheme];\r\n        }\r\n        \r\n        // market id\r\n        NSString *market = [_sqlQueryData getCellWithRow:nIndex col:3];\r\n        if (market) {\r\n            cell.market = market;\r\n        }\r\n        else {\r\n            cell.market = @\"0\";\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n#pragma mark - tableview\r\n// hellen.zhou   2014 5. 28  modify\r\n- (UITableViewCell *) tableViewCellWithIdentifier:(StockCellIdentifier) cellIdentifier\r\n                                    formTableView:(UITableView *)tableView\r\n{\r\n    UITableViewCell * cell = nil;\r\n    switch (cellIdentifier)\r\n    {\r\n        case kSearchStockNO:\r\n        {\r\n            static NSString *kSearchStockNoCellIdentifier = @\"SearchStockNoCell\";\r\n            cell = [tableView dequeueReusableCellWithIdentifier:kSearchStockNoCellIdentifier];\r\n            \r\n            if(cell == nil)\r\n            {\r\n                NSArray* nibViews = [[NSBundle mainBundle]loadNibNamed:kSearchStockNoCellIdentifier owner:nil options:nil];\r\n                if([nibViews count] > 0)\r\n                {\r\n                    cell = [nibViews objectAtIndex:0];\r\n                }\r\n            }\r\n            \r\n        }\r\n            break;\r\n            \r\n        case kSearchGuide:\r\n        {\r\n            static NSString *kSearchGuideCellIdentifie = @\"SearchGuideCell\";\r\n            cell = [tableView dequeueReusableCellWithIdentifier:kSearchGuideCellIdentifie];\r\n            if(cell == nil)\r\n            {\r\n                NSArray* nibViews = [[NSBundle mainBundle]loadNibNamed:kSearchGuideCellIdentifie owner:nil options:nil];\r\n                if([nibViews count] > 0)\r\n                {\r\n                    cell = [nibViews objectAtIndex:0];\r\n                }\r\n                [ThemeVersionManager changeTheme:cell];\r\n            }\r\n            \r\n        }\r\n            break;\r\n        case kSearchStockYes:\r\n        {\r\n            static NSString *kSearchStockCellIdentifier = @\"SearchStockCell\";\r\n            cell =  [tableView dequeueReusableCellWithIdentifier:kSearchStockCellIdentifier];\r\n            if(cell == nil)\r\n            {\r\n                NSArray* nibViews = [[NSBundle mainBundle]loadNibNamed:kSearchStockCellIdentifier owner:nil options:nil];\r\n                if([nibViews count] > 0)\r\n                {\r\n                    cell = [nibViews objectAtIndex:0];\r\n                    if (cell)\r\n                    {\r\n                        [((SearchStockCell *) cell)   setSearchStockCellDelegate:self];\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            \r\n        }\r\n            break;\r\n        case kSearchClear:\r\n        {\r\n            static NSString *clearCellIdentifier = @\"ClearCellIdentifier\";\r\n            cell = [tableView dequeueReusableCellWithIdentifier:clearCellIdentifier];\r\n            \r\n            if(cell == nil)\r\n            {\r\n                cell = [[UITableViewCell alloc] initWithStyle:(UITableViewCellStyleDefault)\r\n                                               reuseIdentifier:clearCellIdentifier];\r\n            }\r\n            \r\n            cell.textLabel.text = @\"清除搜索记录\";\r\n            cell.textLabel.font = [UIFont systemFontOfSize:16.0f];\r\n            cell.textLabel.textAlignment = NSTextAlignmentCenter;\r\n            [cell.textLabel setTextColor:TEXT_COLOR_HOME_PAGE];\r\n            [cell.textLabel changeTheme];\r\n        }\r\n            break;\r\n        case kSearchUnknow:\r\n        {\r\n            static NSString *clearCellIdentifier = @\"ClearCellIdentifier\";\r\n            cell = [tableView dequeueReusableCellWithIdentifier:clearCellIdentifier];\r\n            \r\n            if(cell == nil)\r\n            {\r\n                cell = [[UITableViewCell alloc] initWithStyle:(UITableViewCellStyleDefault)\r\n                                               reuseIdentifier:clearCellIdentifier];\r\n            }\r\n            \r\n            cell.textLabel.text = nil;\r\n            cell.textLabel.textAlignment = NSTextAlignmentCenter;\r\n        }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    \r\n    return cell;\r\n    \r\n}\r\n\r\n#pragma mark - UITableViewDataSource\r\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\r\n{\r\n    if (_sqlQueryData == NULL)\r\n    {\r\n        if (userFlag.needGuide)  //是否要显示引导提示\r\n        {\r\n            return 1;\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n    else\r\n    {\r\n        if([_sqlQueryData.queryDataArr count] == 0 )\r\n        {\r\n            return userFlag.needGuide;\r\n        }\r\n        else\r\n        {\r\n            //显示搜索历史记录时，行数加一，用于显示按钮\r\n            int count =  (int)[_sqlQueryData.queryDataArr count] + userFlag.needGuide + userFlag.clearHistroy;\r\n            return count;\r\n        }\r\n        \r\n    }\r\n    \r\n    return 0;\r\n    \r\n}\r\n\r\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\r\n{\r\n    UITableViewCell *cell = nil;\r\n\r\n    if (indexPath.row == 0) // 第一行\r\n    {\r\n       if (userFlag.needGuide)   // 是否要显示用户引导界面\r\n        {\r\n            cell = [self tableViewCellWithIdentifier:kSearchGuide formTableView:tableView];\r\n        }\r\n        els","relevantFile":"","relevantFileList":[],"filePath":"SearchStock.mm","template":"objective-cpp","multiRes":{"hipilot":"table = tableData->GetTable();\n        \n        if (pHasTable)\n        {\n            _sqlQueryData->queryDataArr = [pHasTable objectForKey:@\"rowdata\"];\n            _sqlQueryData->fieldNameArr = [pHasTable","deepseek-chat-lite":"hTable = tableData->GetTableData();","CodeQwen2.5-7B":"hTable = tableData->GetTableData();\r","copilot":"[HXWatchlistcon]\r\n\r\n            [[HXWatchlistGroupsDataService.shared findCustomGroupPr"}},{"prefix":"\n#import \"SearchStock.h\"\n#import <HXBase/EQUIWindow.h>\n#import \"EQLocaIdDef.h\"\n#include <AMIphoneBase/EQThreadManager.h>\n#import \"DebugMenu.h\"\n#include \"EQAppFrame.h\"\n\n#ifdef _COLLECT_USER_BEHAVIOR\n#endif\n\n#import <HXBase/PageView.h>\n#include \"AM_UI_VarKeyString.h\"\n#import <HXBase/AMUITabFm.h>\n#import <HXBase/NavigationControllEx.h>\n#import <HXBase/ViewControllerEx.h>\n#import \"tooles.h\"\n#import \"HXStockDetailContainerPublicProtocol.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import <HXTool/UIView+Extent.h>\n#import <HXBase/TabBarControllerEx.h>\n#import \"SnackBarView.h\"\n#import \"SSGInputValidator.h\"\n#import \"SSGGroupViewModel+DataSynchronization.h\"\n#import \"SSGGroupViewModel+Information.h\"\n#import \"SSGItemProtocol.h\"\n#import \"SSGStockInfoModel.h\"\n#import <HXBase/UIColor+Colours.h>\n#import \"GroupInfoModel.h\"\n#import \"AMMiddlePublicProxy+SelfStockEdit.h\"\n#import \"SearchStockBuryPoint.h\"\n#import \"SSGShowEditPanelBuryPointer.h\"\n#import \"NSString+AM.h\"\n#import <HXTool/NSString+Chinese.h>\n#import <HXTool/NSString+EmptyAndWhitespace.h>\n#import \"AMSQLPublicProxy.h\"\n#import \"HXVoiceAssistantManager.h\"\n#import \"IntelligentSearchStockHeaderView.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import <HXTool/UIView+RelativeLayout.h>\n#import \"HXSearchStockPublicDefine.h\"\n#import <HXShowTipComponent/ToastView.h>\n#import \"HXDBOperationManager.h\"\n#import \"HXSearchStockManager.h\"\n#import <LocalURLConfig/LocalURLConfig.h>\n#import \"HXDebugSwitchServerManager.h\"\n#import \"HXSelfStockDetailManager.h\"\n#import <Masonry/Masonry.h>\n#import \"HXWatchListEditGroupManager.h\"\n#import <HXWatchList/HXWatchlistModelAdaptation.h>\n#import <HXWatchlistGroupsDataProvider/HXWatchlistGroupsDataService.h>\n\n#ifdef _DEBUG\n#import <AMIphoneDebug/HXCBASDebugger.h>\n#endif\n\nNSString *const HXSearchStockResultProxyKey = @\"HXSearchStockResultProxyKey\";\nNSString *const HXHiddenZiXuanSwitchKey = @\"HXZiXuanSwitchKey\";\n\nstatic NSString * const kCustomGroupSearchStockHeaderViewIdentifier = @\"kCustomGroupSearchStockHeaderViewIdentifier\";\nstatic CGFloat const kHeightOfCustomGroupSearchStockHeaderView = 30.f;\nstatic NSString * const kIntelligentSearchStockHeaderViewIdentifier = @\"IntelligentSearchStockHeaderViewIdentifier\";\nstatic CGFloat const kHeightOfIntelligentSearchStockHeaderView = 44.0f;\nextern CEQAppFrame* EQGetAppFrame();\nextern EQBOOL CopyNSStringToEQString(NSString* pNsStr,CEQString16& pEQStringSave );\nextern NSString* CopyEQStringToNsString(CEQString16* pEQsrc);\nextern EQUIWindow* g_eqWindow;\nextern EQThreadManager* g_ThreadManager;\nextern CEQString16* CopyNSStringToNewEQString(NSString* pNsStr);\nextern CEQAppFrame* EQGetAppFrame();\nextern AMUIFrameWork* g_uiframeWork;\n\ntypedef NS_ENUM(NSInteger, StockCellIdentifier)\n{\n    kSearchGuide = 0,\n    kSearchStockNO = 1,\n    kSearchStockYes = 2,\n    kSearchClear = 3,\n    kSearchUnknow = 4\n};\n\n@interface SearchStock() <SearchEngineDelegate> {\n    UIView             * _helpView;\n    DebugMenu          *_debugMenu;\n    DevDebugMenu       *_DevDebugMenu;\n    HXDebugSwitchMenu  *_debugSwitchMenu;\n    UISearchBar        *_searchBar;\n    KeyBoardType       _keyBoardType;       // 键盘类型\n    CustomKeyboard     *_customKey;         // 自定义键盘20140814\n    SearchCoverView    *_leftConverView;\n    SearchCoverView    *_rightConverView;\n    FullScreenTipView  *_tipView;\n}\n\n@property (nonatomic, strong) NSString *selfSelectStock;\n@property (nonatomic, strong) NSTimer *timer;\n@property (nonatomic, assign,setter = setTableViewVisible:) BOOL tableViewVisible;\n@property (nonatomic, strong) NSString *currentPageStr; // 用于搜索页发送埋点\n@property (nonatomic,copy,readwrite) NSString *lastSearchText;//最新键盘输入的文本\n@property (nonatomic, assign, readonly) SearchStockPageCaller pageCaller;   /*! 页面调用者 */\n@property (nonatomic, strong) UIButton *pictureButton;\n\n@property (nonatomic, strong) HXWatchListEditGroupManager *groupManager;\n\n- (void)searchTextDidChange:(NSString*) text;\n//本地数据库搜索\n- (void)queryStockFromLocal:(NSTimer*)timer;\n// 跳转到选择股票的对应页面\n- (void)gotoPageWithStockCode:(NSString *)strNs stockName:(NSString *)strName market:(NSString *)strMarket;\n// 添加到自选\n- (void)setUITableViewCell:(SearchStockCell*) cell setIndex:(int) nIndex;\n- (void)openStockChart:(id) sender;\n- (UITableViewCell *)tableViewCellWithIdentifier:(StockCellIdentifier) cellIdentifier\n                                   formTableView:(UITableView *)tableView;\n\n-(void)prepareHelpView;\n@end\n\n//搜索次数\n#define kExpectFrequency 3\n@implementation SearchStock\n@synthesize _sqlQueryData = _sqlQueryData;\n@synthesize _tableView;\n@synthesize _labelMark;\n@synthesize _labelType;\n@synthesize tipImage = _tipImage;\n@synthesize tipLabel = _tipLabel;\n@synthesize searchBar = _searchBar;\n@synthesize add_ziXuan_StockCode;\n@synthesize lastSearchText = _lastSearchText;\n@synthesize selfSelectStock = _selfSelectStock;\n@synthesize timer = _timer;\n@synthesize tableViewVisible = _tableViewVisible;\n\n\n- (void)dealloc\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    [_timer invalidate];\n\t_timer = nil;\n    searchSQL.delegate = nil;\n\n    self._tableView = nil;\n    [_searchBar setDelegate:nil];\n\t_debugMenu = nil;\n    self.searchBar = nil;\n\n    self.tipLabel = nil;\n    self.tipImage = nil;\n}\n\n\n- (void)showSelfStockLimit50 {\n    __block SearchStock *weakSelf = self;\n    [[SSGGroupViewModel shareInstance] selfStockInfosWithComplete:^(NSArray<SSGStockInfoModel *> *stockInfos) {\n        [weakSelf reloadTableWithSelfStockInfos:stockInfos];\n    }];\n\n}\n- (void)reloadTableWithSelfStockInfos:(NSArray<SSGStockInfoModel *> *)stockInfos {\n    _sqlQueryData = [[HXSqlData alloc] init];\n\n    [_sqlQueryData.fieldNameArr addObject:@\"name\"];\n    [_sqlQueryData.fieldNameArr addObject:@\"code\"];\n    [_sqlQueryData.fieldNameArr addObject:@\"pinyin\"];\n    [_sqlQueryData.fieldNameArr addObject:@\"market\"];\n    \n    \n    [stockInfos enumerateObjectsUsingBlock:^(SSGStockInfoModel *stockInfo, NSUInteger idx, BOOL *stop) {\n        NSArray *dataArr = @[stockInfo.stockName?:@\"\",\n                             stockInfo.stockID?:@\"\",\n                             @\" \",\n                             stockInfo.marketID?:@\"\"\n                             ];\n        [_sqlQueryData.queryDataArr addObject:dataArr];\n    }];\n    self.tableViewVisible = YES;\n    [_tableView reloadData];\n    \n}\n\n\n- (void)changeToCustomKeyboard\n{\n    [self searchStockKeyBoardShow];\n}\n\n//用户打开搜索界面次数\n- (bool) reachFrequency:(NSInteger) expect {\n    NSInteger num = 0;\n    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];\n    NSNumber *number = [userDefaults valueForKeyPath:@\"ReachFrequencyKey\"];\n    if (number != nil)\n    {\n        num = [number integerValue];\n        if (num >= expect)\n        {\n            return true;\n        }\n    }\n    \n    num += 1;\n    \n    [userDefaults setValue:[NSNumber numberWithInteger:num] forKey:@\"ReachFrequencyKey\"];\n    [userDefaults synchronize];\n    \n    return false;\n}\n\n-(void)processTextData:(CEQStuffTextStruct*)textData\n{\n    if(textData != nil)\n    {\n        CEQString16* strTip = textData->GetStrText();\n        NSString* str = CopyEQStringToNsString(strTip);\n        \n        _tipLabel.text = str;\n        \n        self.tableViewVisible = NO;\n    }\n}\n\n-(void)setData:(CEQStuffBaseStruct *)stuffData\n{\n    [self setParentViewWaitViewActivity:NO];\n    if(stuffData != NULL && stuffData->IsComplexTextData())\n\t{\n        \n        [self processTextData:(CEQStuffTextStruct*)stuffData];\n        \n\t}\n\telse if(stuffData != NULL &&stuffData->IsTableData())\n    {\n        CEQStuffTableStruct *tableData = (CEQStuffTableStruct*)stuffData;\n        _sqlQueryData = [[HXSqlData alloc] init];\n        CEQHashTable< CEQArrayPtr<CEQString16> > *pHas","infill":"Model.getAllGroupSecurities containsObject:];\r\n            \r\n           ","suffix":" if (currentGroupID) {\r\n                groupInfo = [viewModel groupInfoWithGroupID:currentGroupID];\r\n            } else {\r\n                groupInfo = [viewModel groupInfoAtSelectedIndex];\r\n            }\r\n            BOOL isInclude = [groupInfo includedStock:stockInfo];\r\n            if (isInclude) {\r\n                [cell._ssgAddedInfoLabel setText:@\"已在该组\"];\r\n                [cell._ssgAddedInfoLabel setTextColor:[UIColor hx_colorFromHexString:@\"979797\"]];\r\n            } else {\r\n                [cell._ssgAddedInfoLabel setText:@\"添加\"];\r\n                [cell._ssgAddedInfoLabel setTextColor:[UIColor hx_colorFromHexString:@\"f00019\"]];\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n- (void)setUITableViewCell:(SearchStockCell*) cell  setIndex:(int) nIndex\r\n{\r\n    if(cell != nil\r\n\t   &&_sqlQueryData != NULL\r\n       && nIndex < [_sqlQueryData.queryDataArr count]\r\n       && 3 <= [_sqlQueryData.fieldNameArr count])\r\n\t{\r\n\t\t//名称\r\n        NSString *str = [_sqlQueryData getCellWithRow:nIndex col:0];\r\n        if (str != NULL && [str length] > 0 ) {\r\n            cell._labelName.text = str;\r\n            [cell._labelName setTextColor:TEXT_COLOR_HOME_PAGE];\r\n            [cell._labelName changeTheme];\r\n        }\r\n        \r\n\t\t//代码\r\n        str = [_sqlQueryData getCellWithRow:nIndex col:1];\r\n        if (str != NULL && [str length] > 0) {\r\n            cell._labelCode.text = str;\r\n            cell._labelCode.textColor = TEXT_COLOR_HOME_PAGE;\r\n            [cell._labelCode changeTheme];\r\n        }\r\n        \r\n\t\t//图标\r\n        if(str != NULL && [str length] > 0)\r\n\t\t{\r\n            CEQString8 str8;\r\n            CEQString16 *str16 = CopyNSStringToNewEQString(str);\r\n            str16->GetString8(str8);\r\n            str = [_sqlQueryData getCellWithRow:nIndex col:3];\r\n            CEQString16 *market = CopyNSStringToNewEQString(str);\r\n            CEQString8 market8;\r\n            if(market != NULL && market->GetLength() > 0){\r\n                market->GetString8(market8);\r\n                [self setSearchStockCellImageAndRemark:cell selfStock:str8 selfMarket:market8];\r\n            }\r\n\t\t}\r\n\t\t//简拼\r\n        str = [_sqlQueryData getCellWithRow:nIndex col:2];\r\n        if (str != NULL && [str length] > 0 ) {\r\n            cell._labelSmall.text = str;\r\n            [cell._labelSmall setTextColor:TEXT_COLOR_HOME_PAGE];\r\n            [cell._labelSmall changeTheme];\r\n        }\r\n        \r\n        // market id\r\n        NSString *market = [_sqlQueryData getCellWithRow:nIndex col:3];\r\n        if (market) {\r\n            cell.market = market;\r\n        }\r\n        else {\r\n            cell.market = @\"0\";\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n#pragma mark - tableview\r\n// hellen.zhou   2014 5. 28  modify\r\n- (UITableViewCell *) tableViewCellWithIdentifier:(StockCellIdentifier) cellIdentifier\r\n                                    formTableView:(UITableView *)tableView\r\n{\r\n    UITableViewCell * cell = nil;\r\n    switch (cellIdentifier)\r\n    {\r\n        case kSearchStockNO:\r\n        {\r\n            static NSString *kSearchStockNoCellIdentifier = @\"SearchStockNoCell\";\r\n            cell = [tableView dequeueReusableCellWithIdentifier:kSearchStockNoCellIdentifier];\r\n            \r\n            if(cell == nil)\r\n            {\r\n                NSArray* nibViews = [[NSBundle mainBundle]loadNibNamed:kSearchStockNoCellIdentifier owner:nil options:nil];\r\n                if([nibViews count] > 0)\r\n                {\r\n                    cell = [nibViews objectAtIndex:0];\r\n                }\r\n            }\r\n            \r\n        }\r\n            break;\r\n            \r\n        case kSearchGuide:\r\n        {\r\n            static NSString *kSearchGuideCellIdentifie = @\"SearchGuideCell\";\r\n            cell = [tableView dequeueReusableCellWithIdentifier:kSearchGuideCellIdentifie];\r\n            if(cell == nil)\r\n            {\r\n                NSArray* nibViews = [[NSBundle mainBundle]loadNibNamed:kSearchGuideCellIdentifie owner:nil options:nil];\r\n                if([nibViews count] > 0)\r\n                {\r\n                    cell = [nibViews objectAtIndex:0];\r\n                }\r\n                [ThemeVersionManager changeTheme:cell];\r\n            }\r\n            \r\n        }\r\n            break;\r\n        case kSearchStockYes:\r\n        {\r\n            static NSString *kSearchStockCellIdentifier = @\"SearchStockCell\";\r\n            cell =  [tableView dequeueReusableCellWithIdentifier:kSearchStockCellIdentifier];\r\n            if(cell == nil)\r\n            {\r\n                NSArray* nibViews = [[NSBundle mainBundle]loadNibNamed:kSearchStockCellIdentifier owner:nil options:nil];\r\n                if([nibViews count] > 0)\r\n                {\r\n                    cell = [nibViews objectAtIndex:0];\r\n                    if (cell)\r\n                    {\r\n                        [((SearchStockCell *) cell)   setSearchStockCellDelegate:self];\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            \r\n        }\r\n            break;\r\n        case kSearchClear:\r\n        {\r\n            static NSString *clearCellIdentifier = @\"ClearCellIdentifier\";\r\n            cell = [tableView dequeueReusableCellWithIdentifier:clearCellIdentifier];\r\n            \r\n            if(cell == nil)\r\n            {\r\n                cell = [[UITableViewCell alloc] initWithStyle:(UITableViewCellStyleDefault)\r\n                                               reuseIdentifier:clearCellIdentifier];\r\n            }\r\n            \r\n            cell.textLabel.text = @\"清除搜索记录\";\r\n            cell.textLabel.font = [UIFont systemFontOfSize:16.0f];\r\n            cell.textLabel.textAlignment = NSTextAlignmentCenter;\r\n            [cell.textLabel setTextColor:TEXT_COLOR_HOME_PAGE];\r\n            [cell.textLabel changeTheme];\r\n        }\r\n            break;\r\n        case kSearchUnknow:\r\n        {\r\n            static NSString *clearCellIdentifier = @\"ClearCellIdentifier\";\r\n            cell = [tableView dequeueReusableCellWithIdentifier:clearCellIdentifier];\r\n            \r\n            if(cell == nil)\r\n            {\r\n                cell = [[UITableViewCell alloc] initWithStyle:(UITableViewCellStyleDefault)\r\n                                               reuseIdentifier:clearCellIdentifier];\r\n            }\r\n            \r\n            cell.textLabel.text = nil;\r\n            cell.textLabel.textAlignment = NSTextAlignmentCenter;\r\n        }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    \r\n    return cell;\r\n    \r\n}\r\n\r\n#pragma mark - UITableViewDataSource\r\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\r\n{\r\n    if (_sqlQueryData == NULL)\r\n    {\r\n        if (userFlag.needGuide)  //是否要显示引导提示\r\n        {\r\n            return 1;\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n    else\r\n    {\r\n        if([_sqlQueryData.queryDataArr count] == 0 )\r\n        {\r\n            return userFlag.needGuide;\r\n        }\r\n        else\r\n        {\r\n            //显示搜索历史记录时，行数加一，用于显示按钮\r\n            int count =  (int)[_sqlQueryData.queryDataArr count] + userFlag.needGuide + userFlag.clearHistroy;\r\n            return count;\r\n        }\r\n        \r\n    }\r\n    \r\n    return 0;\r\n    \r\n}\r\n\r\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\r\n{\r\n    UITableViewCell *cell = nil;\r\n\r\n    if (indexPath.row == 0) // 第一行\r\n    {\r\n       if (userFlag.needGuide)   // 是否要显示用户引导界面\r\n        {\r\n            cell = [self tableViewCellWithIdentifier:kSearchGuide formTableView:tableView];\r\n        }\r\n        else if (_sqlQueryData != NULL && [_sqlQueryData.queryDataArr count] > 0)  //不用显示并有记录 绑定数据\r\n        {\r\n            cell =  [self tableViewCellWithIdentifier:kSearchStockYes formTableView:tableView];\r\n            [self setUITableViewCell:(SearchStockCell*)cell","relevantFile":"","relevantFileList":[],"filePath":"SearchStock.mm","template":"objective-cpp","multiRes":{"hipilot":"tPinyin = tableData->GetHashTable(\"pinyin\");\n        if(pPinyin != NULL)\n        {\n            [self processTextData:(CEQStuffTextStruct*)pPinyin];\n        }","deepseek-chat-lite":"hTable = tableData->GetHashTable();","CodeQwen2.5-7B":"hTable = tableData->GetTableData();\r","copilot":"Model.getAllGroupSecurities containsObject:];\r\n            \r\n           "}},{"prefix":"\n#import \"SearchStock.h\"\n#import <HXBase/EQUIWindow.h>\n#import \"EQLocaIdDef.h\"\n#include <AMIphoneBase/EQThreadManager.h>\n#import \"DebugMenu.h\"\n#include \"EQAppFrame.h\"\n\n#ifdef _COLLECT_USER_BEHAVIOR\n#endif\n\n#import <HXBase/PageView.h>\n#include \"AM_UI_VarKeyString.h\"\n#import <HXBase/AMUITabFm.h>\n#import <HXBase/NavigationControllEx.h>\n#import <HXBase/ViewControllerEx.h>\n#import \"tooles.h\"\n#import \"HXStockDetailContainerPublicProtocol.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import <HXTool/UIView+Extent.h>\n#import <HXBase/TabBarControllerEx.h>\n#import \"SnackBarView.h\"\n#import \"SSGInputValidator.h\"\n#import \"SSGGroupViewModel+DataSynchronization.h\"\n#import \"SSGGroupViewModel+Information.h\"\n#import \"SSGItemProtocol.h\"\n#import \"SSGStockInfoModel.h\"\n#import <HXBase/UIColor+Colours.h>\n#import \"GroupInfoModel.h\"\n#import \"AMMiddlePublicProxy+SelfStockEdit.h\"\n#import \"SearchStockBuryPoint.h\"\n#import \"SSGShowEditPanelBuryPointer.h\"\n#import \"NSString+AM.h\"\n#import <HXTool/NSString+Chinese.h>\n#import <HXTool/NSString+EmptyAndWhitespace.h>\n#import \"AMSQLPublicProxy.h\"\n#import \"HXVoiceAssistantManager.h\"\n#import \"IntelligentSearchStockHeaderView.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import <HXTool/UIView+RelativeLayout.h>\n#import \"HXSearchStockPublicDefine.h\"\n#import <HXShowTipComponent/ToastView.h>\n#import \"HXDBOperationManager.h\"\n#import \"HXSearchStockManager.h\"\n#import <LocalURLConfig/LocalURLConfig.h>\n#import \"HXDebugSwitchServerManager.h\"\n#import \"HXSelfStockDetailManager.h\"\n#import <Masonry/Masonry.h>\n#import \"HXWatchListEditGroupManager.h\"\n#import <HXWatchList/HXWatchlistModelAdaptation.h>\n#import <HXWatchlistGroupsDataProvider/HXWatchlistGroupsDataService.h>\n\n#ifdef _DEBUG\n#import <AMIphoneDebug/HXCBASDebugger.h>\n#endif\n\nNSString *const HXSearchStockResultProxyKey = @\"HXSearchStockResultProxyKey\";\nNSString *const HXHiddenZiXuanSwitchKey = @\"HXZiXuanSwitchKey\";\n\nstatic NSString * const kCustomGroupSearchStockHeaderViewIdentifier = @\"kCustomGroupSearchStockHeaderViewIdentifier\";\nstatic CGFloat const kHeightOfCustomGroupSearchStockHeaderView = 30.f;\nstatic NSString * const kIntelligentSearchStockHeaderViewIdentifier = @\"IntelligentSearchStockHeaderViewIdentifier\";\nstatic CGFloat const kHeightOfIntelligentSearchStockHeaderView = 44.0f;\nextern CEQAppFrame* EQGetAppFrame();\nextern EQBOOL CopyNSStringToEQString(NSString* pNsStr,CEQString16& pEQStringSave );\nextern NSString* CopyEQStringToNsString(CEQString16* pEQsrc);\nextern EQUIWindow* g_eqWindow;\nextern EQThreadManager* g_ThreadManager;\nextern CEQString16* CopyNSStringToNewEQString(NSString* pNsStr);\nextern CEQAppFrame* EQGetAppFrame();\nextern AMUIFrameWork* g_uiframeWork;\n\ntypedef NS_ENUM(NSInteger, StockCellIdentifier)\n{\n    kSearchGuide = 0,\n    kSearchStockNO = 1,\n    kSearchStockYes = 2,\n    kSearchClear = 3,\n    kSearchUnknow = 4\n};\n\n@interface SearchStock() <SearchEngineDelegate> {\n    UIView             * _helpView;\n    DebugMenu          *_debugMenu;\n    DevDebugMenu       *_DevDebugMenu;\n    HXDebugSwitchMenu  *_debugSwitchMenu;\n    UISearchBar        *_searchBar;\n    KeyBoardType       _keyBoardType;       // 键盘类型\n    CustomKeyboard     *_customKey;         // 自定义键盘20140814\n    SearchCoverView    *_leftConverView;\n    SearchCoverView    *_rightConverView;\n    FullScreenTipView  *_tipView;\n}\n\n@property (nonatomic, strong) NSString *selfSelectStock;\n@property (nonatomic, strong) NSTimer *timer;\n@property (nonatomic, assign,setter = setTableViewVisible:) BOOL tableViewVisible;\n@property (nonatomic, strong) NSString *currentPageStr; // 用于搜索页发送埋点\n@property (nonatomic,copy,readwrite) NSString *lastSearchText;//最新键盘输入的文本\n@property (nonatomic, assign, readonly) SearchStockPageCaller pageCaller;   /*! 页面调用者 */\n@property (nonatomic, strong) UIButton *pictureButton;\n\n@property (nonatomic, strong) HXWatchListEditGroupManager *groupManager;\n\n- (void)searchTextDidChange:(NSString*) text;\n//本地数据库搜索\n- (void)queryStockFromLocal:(NSTimer*)timer;\n// 跳转到选择股票的对应页面\n- (void)gotoPageWithStockCode:(NSString *)strNs stockName:(NSString *)strName market:(NSString *)strMarket;\n// 添加到自选\n- (void)setUITableViewCell:(SearchStockCell*) cell setIndex:(int) nIndex;\n- (void)openStockChart:(id) sender;\n- (UITableViewCell *)tableViewCellWithIdentifier:(StockCellIdentifier) cellIdentifier\n                                   formTableView:(UITableView *)tableView;\n\n-(void)prepareHelpView;\n@end\n\n//搜索次数\n#define kExpectFrequency 3\n@implementation SearchStock\n@synthesize _sqlQueryData = _sqlQueryData;\n@synthesize _tableView;\n@synthesize _labelMark;\n@synthesize _labelType;\n@synthesize tipImage = _tipImage;\n@synthesize tipLabel = _tipLabel;\n@synthesize searchBar = _searchBar;\n@synthesize add_ziXuan_StockCode;\n@synthesize lastSearchText = _lastSearchText;\n@synthesize selfSelectStock = _selfSelectStock;\n@synthesize timer = _timer;\n@synthesize tableViewVisible = _tableViewVisible;\n\n\n- (void)dealloc\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    [_timer invalidate];\n\t_timer = nil;\n    searchSQL.delegate = nil;\n\n    self._tableView = nil;\n    [_searchBar setDelegate:nil];\n\t_debugMenu = nil;\n    self.searchBar = nil;\n\n    self.tipLabel = nil;\n    self.tipImage = nil;\n}\n\n\n- (void)showSelfStockLimit50 {\n    __block SearchStock *weakSelf = self;\n    [[SSGGroupViewModel shareInstance] selfStockInfosWithComplete:^(NSArray<SSGStockInfoModel *> *stockInfos) {\n        [weakSelf reloadTableWithSelfStockInfos:stockInfos];\n    }];\n\n}\n- (void)reloadTableWithSelfStockInfos:(NSArray<SSGStockInfoModel *> *)stockInfos {\n    _sqlQueryData = [[HXSqlData alloc] init];\n\n    [_sqlQueryData.fieldNameArr addObject:@\"name\"];\n    [_sqlQueryData.fieldNameArr addObject:@\"code\"];\n    [_sqlQueryData.fieldNameArr addObject:@\"pinyin\"];\n    [_sqlQueryData.fieldNameArr addObject:@\"market\"];\n    \n    \n    [stockInfos enumerateObjectsUsingBlock:^(SSGStockInfoModel *stockInfo, NSUInteger idx, BOOL *stop) {\n        NSArray *dataArr = @[stockInfo.stockName?:@\"\",\n                             stockInfo.stockID?:@\"\",\n                             @\" \",\n                             stockInfo.marketID?:@\"\"\n                             ];\n        [_sqlQueryData.queryDataArr addObject:dataArr];\n    }];\n    self.tableViewVisible = YES;\n    [_tableView reloadData];\n    \n}\n\n\n- (void)changeToCustomKeyboard\n{\n    [self searchStockKeyBoardShow];\n}\n\n//用户打开搜索界面次数\n- (bool) reachFrequency:(NSInteger) expect {\n    NSInteger num = 0;\n    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];\n    NSNumber *number = [userDefaults valueForKeyPath:@\"ReachFrequencyKey\"];\n    if (number != nil)\n    {\n        num = [number integerValue];\n        if (num >= expect)\n        {\n            return true;\n        }\n    }\n    \n    num += 1;\n    \n    [userDefaults setValue:[NSNumber numberWithInteger:num] forKey:@\"ReachFrequencyKey\"];\n    [userDefaults synchronize];\n    \n    return false;\n}\n\n-(void)processTextData:(CEQStuffTextStruct*)textData\n{\n    if(textData != nil)\n    {\n        CEQString16* strTip = textData->GetStrText();\n        NSString* str = CopyEQStringToNsString(strTip);\n        \n        _tipLabel.text = str;\n        \n        self.tableViewVisible = NO;\n    }\n}\n\n-(void)setData:(CEQStuffBaseStruct *)stuffData\n{\n    [self setParentViewWaitViewActivity:NO];\n    if(stuffData != NULL && stuffData->IsComplexTextData())\n\t{\n        \n        [self processTextData:(CEQStuffTextStruct*)stuffData];\n        \n\t}\n\telse if(stuffData != NULL &&stuffData->IsTableData())\n    {\n        CEQStuffTableStruct *tableData = (CEQStuffTableStruct*)stuffData;\n        _sqlQueryData = [[HXSqlData alloc] init];\n        CEQHashTable< CEQArrayPtr<CEQString16> > *pHas","infill":"[[HXUGCSelfStockModel alloc] initWithStockCode:stockCode marketId:marketID];\r\n            BOOL isInclude = [groupModel.getAllGroupSecu","suffix":"rities containsObject:stockModel];\r\n            if (isInclude) {\r\n                [cell._ssgAddedInfoLabel setText:@\"已在该组\"];\r\n                [cell._ssgAddedInfoLabel setTextColor:[UIColor hx_colorFromHexString:@\"979797\"]];\r\n            } else {\r\n                [cell._ssgAddedInfoLabel setText:@\"添加\"];\r\n                [cell._ssgAddedInfoLabel setTextColor:[UIColor hx_colorFromHexString:@\"f00019\"]];\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n- (void)setUITableViewCell:(SearchStockCell*) cell  setIndex:(int) nIndex\r\n{\r\n    if(cell != nil\r\n\t   &&_sqlQueryData != NULL\r\n       && nIndex < [_sqlQueryData.queryDataArr count]\r\n       && 3 <= [_sqlQueryData.fieldNameArr count])\r\n\t{\r\n\t\t//名称\r\n        NSString *str = [_sqlQueryData getCellWithRow:nIndex col:0];\r\n        if (str != NULL && [str length] > 0 ) {\r\n            cell._labelName.text = str;\r\n            [cell._labelName setTextColor:TEXT_COLOR_HOME_PAGE];\r\n            [cell._labelName changeTheme];\r\n        }\r\n        \r\n\t\t//代码\r\n        str = [_sqlQueryData getCellWithRow:nIndex col:1];\r\n        if (str != NULL && [str length] > 0) {\r\n            cell._labelCode.text = str;\r\n            cell._labelCode.textColor = TEXT_COLOR_HOME_PAGE;\r\n            [cell._labelCode changeTheme];\r\n        }\r\n        \r\n\t\t//图标\r\n        if(str != NULL && [str length] > 0)\r\n\t\t{\r\n            CEQString8 str8;\r\n            CEQString16 *str16 = CopyNSStringToNewEQString(str);\r\n            str16->GetString8(str8);\r\n            str = [_sqlQueryData getCellWithRow:nIndex col:3];\r\n            CEQString16 *market = CopyNSStringToNewEQString(str);\r\n            CEQString8 market8;\r\n            if(market != NULL && market->GetLength() > 0){\r\n                market->GetString8(market8);\r\n                [self setSearchStockCellImageAndRemark:cell selfStock:str8 selfMarket:market8];\r\n            }\r\n\t\t}\r\n\t\t//简拼\r\n        str = [_sqlQueryData getCellWithRow:nIndex col:2];\r\n        if (str != NULL && [str length] > 0 ) {\r\n            cell._labelSmall.text = str;\r\n            [cell._labelSmall setTextColor:TEXT_COLOR_HOME_PAGE];\r\n            [cell._labelSmall changeTheme];\r\n        }\r\n        \r\n        // market id\r\n        NSString *market = [_sqlQueryData getCellWithRow:nIndex col:3];\r\n        if (market) {\r\n            cell.market = market;\r\n        }\r\n        else {\r\n            cell.market = @\"0\";\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n#pragma mark - tableview\r\n// hellen.zhou   2014 5. 28  modify\r\n- (UITableViewCell *) tableViewCellWithIdentifier:(StockCellIdentifier) cellIdentifier\r\n                                    formTableView:(UITableView *)tableView\r\n{\r\n    UITableViewCell * cell = nil;\r\n    switch (cellIdentifier)\r\n    {\r\n        case kSearchStockNO:\r\n        {\r\n            static NSString *kSearchStockNoCellIdentifier = @\"SearchStockNoCell\";\r\n            cell = [tableView dequeueReusableCellWithIdentifier:kSearchStockNoCellIdentifier];\r\n            \r\n            if(cell == nil)\r\n            {\r\n                NSArray* nibViews = [[NSBundle mainBundle]loadNibNamed:kSearchStockNoCellIdentifier owner:nil options:nil];\r\n                if([nibViews count] > 0)\r\n                {\r\n                    cell = [nibViews objectAtIndex:0];\r\n                }\r\n            }\r\n            \r\n        }\r\n            break;\r\n            \r\n        case kSearchGuide:\r\n        {\r\n            static NSString *kSearchGuideCellIdentifie = @\"SearchGuideCell\";\r\n            cell = [tableView dequeueReusableCellWithIdentifier:kSearchGuideCellIdentifie];\r\n            if(cell == nil)\r\n            {\r\n                NSArray* nibViews = [[NSBundle mainBundle]loadNibNamed:kSearchGuideCellIdentifie owner:nil options:nil];\r\n                if([nibViews count] > 0)\r\n                {\r\n                    cell = [nibViews objectAtIndex:0];\r\n                }\r\n                [ThemeVersionManager changeTheme:cell];\r\n            }\r\n            \r\n        }\r\n            break;\r\n        case kSearchStockYes:\r\n        {\r\n            static NSString *kSearchStockCellIdentifier = @\"SearchStockCell\";\r\n            cell =  [tableView dequeueReusableCellWithIdentifier:kSearchStockCellIdentifier];\r\n            if(cell == nil)\r\n            {\r\n                NSArray* nibViews = [[NSBundle mainBundle]loadNibNamed:kSearchStockCellIdentifier owner:nil options:nil];\r\n                if([nibViews count] > 0)\r\n                {\r\n                    cell = [nibViews objectAtIndex:0];\r\n                    if (cell)\r\n                    {\r\n                        [((SearchStockCell *) cell)   setSearchStockCellDelegate:self];\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            \r\n        }\r\n            break;\r\n        case kSearchClear:\r\n        {\r\n            static NSString *clearCellIdentifier = @\"ClearCellIdentifier\";\r\n            cell = [tableView dequeueReusableCellWithIdentifier:clearCellIdentifier];\r\n            \r\n            if(cell == nil)\r\n            {\r\n                cell = [[UITableViewCell alloc] initWithStyle:(UITableViewCellStyleDefault)\r\n                                               reuseIdentifier:clearCellIdentifier];\r\n            }\r\n            \r\n            cell.textLabel.text = @\"清除搜索记录\";\r\n            cell.textLabel.font = [UIFont systemFontOfSize:16.0f];\r\n            cell.textLabel.textAlignment = NSTextAlignmentCenter;\r\n            [cell.textLabel setTextColor:TEXT_COLOR_HOME_PAGE];\r\n            [cell.textLabel changeTheme];\r\n        }\r\n            break;\r\n        case kSearchUnknow:\r\n        {\r\n            static NSString *clearCellIdentifier = @\"ClearCellIdentifier\";\r\n            cell = [tableView dequeueReusableCellWithIdentifier:clearCellIdentifier];\r\n            \r\n            if(cell == nil)\r\n            {\r\n                cell = [[UITableViewCell alloc] initWithStyle:(UITableViewCellStyleDefault)\r\n                                               reuseIdentifier:clearCellIdentifier];\r\n            }\r\n            \r\n            cell.textLabel.text = nil;\r\n            cell.textLabel.textAlignment = NSTextAlignmentCenter;\r\n        }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    \r\n    return cell;\r\n    \r\n}\r\n\r\n#pragma mark - UITableViewDataSource\r\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\r\n{\r\n    if (_sqlQueryData == NULL)\r\n    {\r\n        if (userFlag.needGuide)  //是否要显示引导提示\r\n        {\r\n            return 1;\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n    else\r\n    {\r\n        if([_sqlQueryData.queryDataArr count] == 0 )\r\n        {\r\n            return userFlag.needGuide;\r\n        }\r\n        else\r\n        {\r\n            //显示搜索历史记录时，行数加一，用于显示按钮\r\n            int count =  (int)[_sqlQueryData.queryDataArr count] + userFlag.needGuide + userFlag.clearHistroy;\r\n            return count;\r\n        }\r\n        \r\n    }\r\n    \r\n    return 0;\r\n    \r\n}\r\n\r\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\r\n{\r\n    UITableViewCell *cell = nil;\r\n\r\n    if (indexPath.row == 0) // 第一行\r\n    {\r\n       if (userFlag.needGuide)   // 是否要显示用户引导界面\r\n        {\r\n            cell = [self tableViewCellWithIdentifier:kSearchGuide formTableView:tableView];\r\n        }\r\n        else if (_sqlQueryData != NULL && [_sqlQueryData.queryDataArr count] > 0)  //不用显示并有记录 绑定数据\r\n        {\r\n            cell =  [self tableViewCellWithIdentifier:kSearchStockYes formTableView:tableView];\r\n            [self setUITableViewCell:(SearchStockCell*)cell setIndex:(int)indexPath.row];\r\n        }\r\n        else        //找不到相关股票\r\n        {\r\n            cell =  [self tableViewCellWithIdentifier:kSearchStockNO formTableView:tableView];\r\n        }\r\n        \r\n        [cell setDefaultBackgro","relevantFile":"","relevantFileList":[],"filePath":"SearchStock.mm","template":"objective-cpp","multiRes":{"hipilot":"hTable = tableData->GetHashTable();\n        _sqlQueryData->queryDataArr = hTable->GetData();\n        \n        SearchStockCell *cell = (SearchStockCell *)[self tableView:self.tableView cellForRowAtIndexPath:[","deepseek-chat-lite":"hTable = tableData->GetTable();","CodeQwen2.5-7B":"hTable = tableData->GetTableData();\r","copilot":"[[HXUGCSelfStockModel alloc] initWithStockCode:stockCode marketId:marketID];\r\n            BOOL isInclude = [groupModel.getAllGroupSecu"}},{"prefix":"        backImage = [UIImage imageNamed:@\"xiadan_riseOrStop\"];\n        clickImage = [UIImage imageNamed:@\"xiadan_riseOrStop_clicked\"];\n    } else {\n        backImage = [UIImage imageNamed:@\"xiadan_riseOrStop_night\"];\n        clickImage = [UIImage imageNamed:@\"xiadan_riseOrStop_clicked_night.png\"];\n    }\n    \n    [button setBackgroundImage:backImage forState:UIControlStateNormal];\n    [button setBackgroundImage:clickImage forState:UIControlStateHighlighted];\n}\n//闪电下单在个股情况下，需要新增返回按钮，头部tip，因为这里的布局大部分都是frame写死，考虑了各种实现方案，只能对直接加在self中的subview，进行frame修改\n- (void)updateOtherViewsFrameByTopTip {\n    self.wtExchangeAccountView.frame = CGRectMake(39, 0, 200, 48.0f);\n    [self.quickTopView addSubview:self.backBtn];\n    [self.backBtn mas_makeConstraints:^(MASConstraintMaker *make) {\n       make.left.equalTo(self.quickTopView).offset(8);\n       make.centerY.equalTo(self.wtExchangeAccountView);\n       make.size.mas_equalTo(CGSizeMake(31, 36));\n    }];\n\n    self.topTipHeigt = 13;\n    self.frame = CGRectMake(self.frame.origin.x, self.frame.origin.y + self.topTipHeigt, self.frame.size.width, self.frame.size.height);\n    CGRect quickTopViewFrame = self.quickTopView.frame;\n    self.quickTopView.frame = CGRectMake(quickTopViewFrame.origin.x, quickTopViewFrame.origin.y + self.topTipHeigt , quickTopViewFrame.size.width, quickTopViewFrame.size.height);\n    self.buyOrSellButton.frame = CGRectMake(self.buyOrSellButton.frame.origin.x, self.buyOrSellButton.frame.origin.y + self.topTipHeigt, self.buyOrSellButton.frame.size.width, self.buyOrSellButton.frame.size.height);\n    self.sepView.frame = CGRectMake(self.sepView.frame.origin.x, self.sepView.frame.origin.y + self.topTipHeigt, self.sepView.frame.size.width, self.sepView.frame.size.height);\n    self.sepImgView.frame = CGRectMake(self.sepImgView.frame.origin.x, self.sepImgView.frame.origin.y + self.topTipHeigt, self.sepImgView.frame.size.width, self.sepImgView.frame.size.height);\n    self.nowAccountLabel.frame = CGRectMake(self.nowAccountLabel.frame.origin.x, self.nowAccountLabel.frame.origin.y + self.topTipHeigt, self.nowAccountLabel.frame.size.width, self.nowAccountLabel.frame.size.height);\n    self.cancelButton.frame = CGRectMake(self.cancelButton.frame.origin.x, self.cancelButton.frame.origin.y + self.topTipHeigt, self.cancelButton.frame.size.width, self.cancelButton.frame.size.height);\n    self.wtExchangeAccountView.frame = CGRectMake(39, 0, 200, 48.0f);\n    [self addSubview:self.scrollUpTipView];\n    \n    [self.scrollUpTipView mas_makeConstraints:^(MASConstraintMaker *make) {\n       make.centerX.equalTo(self);\n       make.top.mas_equalTo(8);\n       make.size.mas_equalTo(CGSizeMake(24, 4));\n    }];\n}\n\n- (void)updateGGTBackBtn {\n    CGRect frame = self.wtExchangeAccountView.frame;\n    frame.origin.x = 39;\n    self.wtExchangeAccountView.frame = frame;\n    [self.quickTopView addSubview:self.backBtn];\n    [self.backBtn mas_makeConstraints:^(MASConstraintMaker *make) {\n       make.left.equalTo(self.quickTopView).offset(8);\n       make.centerY.equalTo(self.wtExchangeAccountView);\n       make.size.mas_equalTo(CGSizeMake(31, 36));\n    }];\n}\n\n- (void)createViews{\n    [self addSubview:self.quickTopView];\n    [self addSubview:self.moneyBtn];\n\n    CGRect exchangeViewFrame = CGRectMake(8, 0, 200, 48.0f);\n    self.wtExchangeAccountView = [[WTExchangeAccountView alloc] initWithFrame:exchangeViewFrame];\n    [self.quickTopView addSubview:self.wtExchangeAccountView];\n    self.wtExchangeAccountView.delegate = self;\n    \n    self.sepView.backgroundColor = [UIColor colorWithString:@\"e1e1e1\"];\n    self.sepView.hidden = YES;\n    \n    _tomorrowLabel = [[UILabel alloc] initWithFrame:CGRectMake(_priceBackgroundImageView.origin.x,_fallStopButton.origin.y , 28, _fallStopButton.size.height)];\n    _tomorrowLabel.font = [UIFont systemFontOfSize:11];\n    _tomorrowLabel.textAlignment = NSTextAlignmentCenter;\n    _tomorrowLabel.text = @\"明日\";\n    _tomorrowLabel.layer.cornerRadius = 2;\n    _tomorrowLabel.layer.masksToBounds = YES;\n    [_tomorrowLabel setTextColor:TEXT_COLOR_HOME_PAGE];\n    [_tomorrowLabel setTextColor:TEXT_COLOR_HOME_PAGE theme:ThemeVersionNormal];\n    [_tomorrowLabel setTextColor:TEXT_COLOR_HOME_PAGE_NIGHT theme:ThemeVersionNight];\n    [_tomorrowLabel setBackgroundColor:SWITCH_COLOR_NORMAL];\n    [_tomorrowLabel setBackgroundColor:SWITCH_COLOR_NORMAL theme:ThemeVersionNormal];\n    [_tomorrowLabel setBackgroundColor:GREY_NIGHT theme:ThemeVersionNight];\n    _tomorrowLabel.hidden = YES;\n    [self addSubview:_tomorrowLabel];\n    \n    self.riseNumberLabel = [[UILabel alloc] initWithFrame:CGRectMake(27, 0, 42, self.riseStopButton.frame.size.height)];\n    self.riseNumberLabel.text = @\"--\";\n    self.riseNumberLabel.font = [UIFont systemFontOfSize:12.0f];\n    self.riseNumberLabel.textColor = [UIColor redColor];\n    self.fallNumberLabel = [[UILabel alloc] initWithFrame:CGRectMake(27, 0, 42, self.fallStopButton.frame.size.height)];\n    self.fallNumberLabel.text = @\"--\";\n    self.fallNumberLabel.font = [UIFont systemFontOfSize:12.0f];\n    self.fallNumberLabel.textColor = [UIColor greenColor];\n    \n    [self.riseStopButton addSubview:self.riseNumberLabel];\n    [self.fallStopButton addSubview:self.fallNumberLabel];\n    \n    self.riseStopButton.accessibilityValue = self.riseNumberLabel.text;\n    self.fallStopButton.accessibilityValue = self.fallNumberLabel.text;\n    \n    [self.priceTextField setFont:[UIFont systemFontOfSize:17.0f]];\n    [self.amountTextField setFont:[UIFont systemFontOfSize:17.0f]];\n    self.priceTextField.delegate = self;\n    self.amountTextField.delegate = self;\n    self.priceTextField.borderStyle = UITextBorderStyleNone;\n    self.priceTextField.layer.borderColor = [UIColor clearColor].CGColor;\n    self.amountTextField.borderStyle = UITextBorderStyleNone;\n    self.amountTextField.layer.borderColor = [UIColor clearColor].CGColor;\n    self.amountTextField.adjustsFontSizeToFitWidth = YES;\n    self.amountTextField.minimumFontSize = 0.1;\n    \n    UIColor *cangColor = TEXT_COLOR_HOME_PAGE;\n    \n    self.buyOrSellButton.enabled = NO;\n    [self setBuyOrSellButtonBackGroundColor];\n    \n    [self.cancelButton setTitleColor:cangColor forState:UIControlStateNormal];\n    self.cancelButton.layer.borderColor = [cangColor CGColor];\n    self.cancelButton.layer.borderWidth = 0.7f;\n    self.cancelButton.hidden = YES;\n    \n    self.buyOrSellButton.layer.cornerRadius = 4;\n    self.buyOrSellButton.layer.masksToBounds = YES;\n    \n    self.amountView.isAccessibilityElement = YES;\n    \n    [self.fallNameLabel removeFromSuperview];\n    [self.fallNumberLabel removeFromSuperview];\n    [self.fallStopButton addSubview:self.fallNameLabel];\n    [self.fallStopButton addSubview:self.fallNumberLabel];\n    \n    [self.riseNameLabel removeFromSuperview];\n    [self.riseNumberLabel removeFromSuperview];\n    [self.riseStopButton addSubview:self.riseNameLabel];\n    [self.riseStopButton addSubview:self.riseNumberLabel];\n    \n    self.kcbPriceInfoBtn = [[UIButton alloc] init];\n    UIImage *image = [UIImage imageNamed:@\"kcb_pricelimit_info\"];\n    image.imageName = @\"kcb_pricelimit_info\";\n    [self.kcbPriceInfoBtn setImage:image forState:UIControlStateNormal];\n    [self.kcbPriceInfoBtn addTarget:self action:@selector(didClickKCBPriceInfoBtn) forControlEvents:UIControlEventTouchUpInside];\n    self.kcbPriceInfoBtn.hidden = YES;\n    [self addSubview:self.kcbPriceInfoBtn];\n    \n    [self addMasonryConstraints];\n \n}\n\n- (void)addMasonryConstraints\n{\n    [self updateRiseOrFallConstraintsWithTomorrowLimitMoveOpen:NO isPriceLimit:NO];\n    \n    [self.fallNameLabel mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.equalTo(self.fallStopButton.mas_left).offset(4);\n        make.top.height.equalTo(self.fallStopButton);\n        make.width.mas_equalTo(@25);\n    }];\n    \n    self.fallNumberLabel.minimumScaleFactor = 0.1;\n    self.fallNumberLabel.adjustsFontSizeToFitWidth = YES;\n    [self.fallNumberLabel mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.equalTo(self.fallNameLabel.","infill":"ME) {\n            textDisableColor = TITTLE_TEXT_DISABL","suffix":"ED_NIGHT;\n        } else {\n            textDisableColor = TITTLE_TEXT_DISABLED_NORMAL;\n        }\n        [MNCGMarkTools changeBtnUI:self.buyOrSellButton RealTitle:@\"卖 出\" SimOrReal:isAllSimAccount simFontSize:14 color:FOREGROUND_COLOR_NORMAL disableColor:textDisableColor];\n    } else if (JiaoYiTypeNoAccount == self.jiaoyiType) {\n        UIImage * image = [UIImage imageNamed:@\"xiadan_buy_field.png\"];\n        self.priceBackgroundImageView.image = image;\n        self.amountBackgroundImageView.image = image;\n        \n        self.priceTextField.placeholder = @\"买入价\";\n        self.amountTextField.placeholder = @\"买入数量\";\n        [self.buyOrSellButton setAttributedTitle:nil forState:UIControlStateNormal];\n        [self.buyOrSellButton setAttributedTitle:nil forState:UIControlStateDisabled];\n        [self.buyOrSellButton setTitle:@\"添加交易账户\" forState:UIControlStateNormal];\n        [self.buyOrSellButton setTitle:@\"添加交易账户\" forState:UIControlStateDisabled];\n    }\n    \n    if (!self.isGGT) {\n        [self setBuyOrSellButtonBackGroundColor];\n    }\n    \n    [self changeButtonLabelIfNeeded:self.buyOrSellButton];\n}\n\n- (void)changeButtonLabelIfNeeded:(UIButton *)button {\n    // 没开免二次，不需要做任何事\n    if (![WTSkipSecondConfirmTool isCurAccountOpenSkipSecondConfirm:WTTradeSkipSecondConfirmType_BuyOrSell]) {\n        return;\n    }\n    NSString *currentTitle = button.currentTitle;\n    if (![currentTitle hasSuffix:HXSkipConfirmSuffixText]) {\n        [button setTitle:[NSString stringWithFormat:@\"%@%@\", currentTitle, HXSkipConfirmSuffixText] forState:UIControlStateNormal];\n        [button setTitle:[NSString stringWithFormat:@\"%@%@\", currentTitle, HXSkipConfirmSuffixText] forState:UIControlStateDisabled];\n    }\n}\n\n\n- (NSString *)getCurrentAccount{\n    WTAccountInfor *accountInfo = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    \n    NSString *yyb = [accountInfo getNoBracketsYYB];\n    NSString *zjzh = [accountInfo getHideAccountFourLength];\n    \n    NSString *nowAccount = [NSString stringWithFormat:@\"%@ %@\", yyb, zjzh];\n    return nowAccount;\n}\n\n- (NSString *)getNoBracketsYYBWithStr:(NSString *)str{\n    if (str.length <= 0) {\n        return @\"\";\n    }\n    \n    NSInteger leftIndex = -1;\n    NSRange range1 = [str rangeOfString:@\"(\"];\n    NSRange range2 = [str rangeOfString:@\"（\"];\n    if (range1.length > 0 && range2.length > 0) {\n        leftIndex = MIN(range1.location, range2.location);\n    } else if (range1.length > 0 && range2.length <= 0) {\n        leftIndex = range1.location;\n    } else if (range2.length > 0 && range1.length <= 0) {\n        leftIndex = range2.location;\n    } else {\n        return str;\n    }\n    \n    if (leftIndex < str.length) {\n        NSString *finalStr = [str substringToIndex:leftIndex];\n        return finalStr;\n    }\n    \n    return @\"\";\n}\n\n- (NSInteger)getIndexWithTotalStr:(NSString *)totalStr rangeStr:(NSString *)rangeStr{\n    if (totalStr.length <= 0 || rangeStr.length <= 0) {\n        return -1;\n    }\n    \n    NSRange aRange = [totalStr rangeOfString:rangeStr];\n    if (aRange.length > 0) {\n        return aRange.location;\n    }\n    \n    return -1;\n}\n\n- (HXDropdownMenu *)ggtSubmitTradeMenu{\n    if (!_ggtSubmitTradeMenu) {\n        _ggtSubmitTradeMenu = [[HXDropdownMenu alloc] initWithFrame:self.buyOrSellButton.frame menuType:HXDropdowmMenuTypeBuy locationType:HXDropdowmMenuLocationTypeUp menuTitles:@\"沪港通买入\", @\"深港通买入\", nil];\n        _ggtSubmitTradeMenu.delegate = self;\n        _ggtSubmitTradeMenu.hidden = YES;\n        [self.bgView addSubview:_ggtSubmitTradeMenu];\n    }\n    \n    return _ggtSubmitTradeMenu;\n}\n\n- (UILabel *)exchangeLabel{\n    if (!_exchangeLabel) {\n        _exchangeLabel = [[UILabel alloc] init];\n        _exchangeLabel.textAlignment = NSTextAlignmentLeft;\n        _exchangeLabel.textColor = [UIColor lightGrayColor];\n        _exchangeLabel.font = [UIFont systemFontOfSize:12.0f];\n        [self.quickTopView addSubview:_exchangeLabel];\n    }\n    \n    return _exchangeLabel;\n}\n\n#pragma mark - Default Trade Set\n\n// 普通买入价格\n- (NSString *)getNormalTradeSetBuyPrice {\n    \n    WTTradeSetNormalModel *normalModel = [WTTradeSetArchiverManager shareManager].normalModel;\n    //涨停买入适配上下限规则\n    if (normalModel.buyPrice == WTTradeSetNormalBuyPriceZTPrice) {\n        NSString *buyLimitPrice = [self getNormalTradeSetLimitPrice];;\n        if(![NSString wtIsBlankString:buyLimitPrice]){\n            return buyLimitPrice;\n        }\n    }\n    NSArray *array = @[\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell1]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell2]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell3]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell4]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell5]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceNewPrice]),\n        SafeString(self.quickNetworkModal.riseStopPrice),\n        SafeString(self.quickNetworkModal.fallStopPrice),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice1]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice2]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice3]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice4]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice5]),\n        SafeString(nil)];\n    return [self safetyPriceAtIndex:normalModel.buyPrice withArry:array];\n}\n\n// 普通卖出价格\n- (NSString *)getNormalTradeSetSellPrice {\n    WTTradeSetNormalModel *normalModel = [WTTradeSetArchiverManager shareManager].normalModel;\n    //跌停卖出适配上下限规则\n    if (normalModel.sellPrice == WTTradeSetNormalSellPriceDTPrice) {\n        NSString *sellLimitPrice = [self getNormalTradeSetLimitPrice];\n        if(![NSString wtIsBlankString:sellLimitPrice]){\n            return sellLimitPrice;\n        }\n    }\n    NSArray *array = @[\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice1]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice2]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice3]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice4]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice5]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceNewPrice]),\n        SafeString(self.quickNetworkModal.riseStopPrice),\n        SafeString(self.quickNetworkModal.fallStopPrice),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell5]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell4]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell3]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell2]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell1]),\n        SafeString(nil)];\n    return [self safetyPriceAtIndex:normalModel.sellPrice withArry:array];\n}\n\n// 基金买入价格\n- (NSString *)getFundTradeSetBuyPrice {\n    WTTradeSetFundModel *fundModel = [WTTradeSetArchiverManager shareManager].fundModel;\n    NSArray *array = @[\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell1]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell2]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell3]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell4]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell5]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceNewPrice]),\n        SafeString(self.quickNetworkModal.riseStopPrice),\n        SafeString(self.quickNetworkModal.fallStopPrice),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice1]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice2]),\n        SafeString([self tradeSetPriceWithType:WTTradePric","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"mas_right).offset(-4);\n        make.top.height.equalTo(self.fallStopButton);\n        make.width.mas_equalTo(@25);\n    }];\n}","deepseek-chat-lite":"mas_right).offset(2);","CodeQwen2.5-7B":"mas_left).offset(4);","copilot":"ME) {\n            textDisableColor = TITTLE_TEXT_DISABL"}},{"prefix":"\n#import \"HXWTMMPanCommon.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import \"HXEasyBaseTableView.h\"\n#import \"HXEasyBaseTableGroupDelegate.h\"\n#import <ThirdBase/Masonry.h>\n#import \"HXSocketFetcher.h\"\n#import \"AMLocalIdDef.h\"\n#include \"EQAppFrame.h\"\n#import \"FullSpeedManager.h\"\n#import \"Id_refrence.h\"\n#import \"HXWTMMPanModel.h\"\n#import <HXBase/NSArray+Safety.h>\n#import \"FullSpeedDataModel.h\"\n#import \"HXWTMMPanCommonCell.h\"\n#import \"UpAndDownPercentageModel.h\"\n#import <HXDataTypeConvertor/NSArray+HXDataTypeConvertor.h>\n#import \"WTPriceLimitManager.h\"\n#import \"TJiaoYiRiSearchModel.h\"\n#import \"WTOrderManager.h\"\n#import \"WTOrderModel.h\"\n#import \"AMSQLPublicProxy.h\"\n#import \"CBASDefines.h\"\n#import \"WTTradePostionManager.h\"\n#import \"HXTradeHandicapManager.h\"\n\n#define KProtocalID_Five       1211 //五档\n#define KProtocalID_Ten        1275 //十档\n#define KProtocalID2           1267\n#define FullSpeedProtocolId 4016\n#define ORDERMARK_RADIUS 4\n#define ORDERMARK_SPACING -2\n#define ORDERMARK_BUYLOG @\".buyshow\"\n#define ORDERMARK_SELLLOG @\".saleshow\"\n\n#define MAXPRICELABELWIDTH       (52 * Screen_Scale_IPHONE6)//价格label最大宽度\n#define NUMBERLABELWIDTH         40//数量label宽度\n#define TITLELABELWIDTH          25//标题label宽度\n#define JIANJUWIDTH              5//各个label间距\n#define BASEORIGINX              35//基础价格originX位置\n#define MAIMAIPANWIDTH           (138 * Screen_Scale_IPHONE6)//兜底自身宽度\n#define MaxOneNumberWidth        7//单个数字最大宽度\n\nextern CEQAppFrame*  EQGetAppFrame();\n\n@interface HXWTMMPanCommon ()<WTOrderMarkDelegate>\n@property (strong,nonatomic) HXEasyBaseTableView *tableView;\n@property (strong,nonatomic) HXEasyBaseTableGroupDelegate *tableDelegate;\n@property (strong,nonatomic) NSMutableArray *infoArr;\n@property (strong,nonatomic) NSMutableArray *buyArr;\n@property (strong,nonatomic) NSMutableArray *sellArr;\n@property (strong,nonatomic) NSMutableArray<NSString *> *priceArr;\n@property (strong,nonatomic) UIView *topOrderMark;\n@property (strong,nonatomic) UIView *bottomOrderMark;\n@property (strong,nonatomic) UIImageView *segLine;\n@property (nonatomic, strong) HXSocketFetcher *fetcher;\n@property (nonatomic, strong) HXSocketFetcher *pricefetcher;\n@property (nonatomic, strong) HXSocketFetcher *fullSpeedFetcher;\n@property (nonatomic,copy) NSString   *curCodeRequest; //已请求的股票名称\n@property (nonatomic, strong) FullSpeedData *fullSpeedData;\n@property (nonatomic, assign)BOOL isSendBuyLog;\n@property (nonatomic, assign)BOOL isSendSellLog;\n@property (nonatomic, copy) NSString *oldStockCode;\n@property (nonatomic, copy) NSString *oldStockMarket;\n@property (nonatomic, assign) float labelOriginX;//价格label的origin.x\n@property (nonatomic, assign) float priceMaxWidth;\n@property (nonatomic, assign) float numberMaxWidth;\n@property (nonatomic, assign) float faultToleranceWidth;//容错宽度\n@property (nonatomic, assign) BOOL isSameStock;\n@property (nonatomic, strong) HXTradeHandicapManager *handicapManager;\n@property (nonatomic, assign) BOOL isPriceLabelHasValue;//价格label是否有值\n@property (nonatomic, assign) int nMMPanCount;//买卖盘的档数，五档为5，十档为10\n@end\n\n@implementation HXWTMMPanCommon\n#pragma mark - Life Cycle\n- (void)dealloc\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:ThemeVersionNotification object:nil];\n    if ([WTOrderManager isSupportOrderMark]) {\n        [WTOrderManager sharedInstance].markDelegate = nil;\n    }\n    \n}\n\n- (instancetype)initWithMMPanTen:(BOOL)isMMPanTen\n{\n    if (self = [super init]) {\n        [self setIsMMPanTen:isMMPanTen];  \n        [self creatUI];\n        [self makeConstraints];\n        \n        if ([WTOrderManager isSupportOrderMark]) {\n            [self initTopBottomOrderMark];\n        }\n        _isSendBuyLog = NO;\n        _isSendSellLog = NO;\n    }\n    return self;\n}\n\n- (void)onFinishInflate{\n    self.priceArr = [NSMutableArray array];\n    if ([WTOrderManager isSupportOrderMark]) {\n        [WTOrderManager sharedInstance].markDelegate = self;\n    }\n}\n\n- (void)willAppear{\n}\n\n- (void)didAppear{\n}\n\n- (void)willDisappear{\n    if (_fullSpeedFetcher) {\n        [_fullSpeedFetcher pause];\n        _fullSpeedFetcher = nil;\n    }\n    if (_fetcher) {\n        [_fetcher pause];\n        _fetcher  = nil;\n    }\n    if (_pricefetcher) {\n        [_pricefetcher pause];\n        _pricefetcher = nil;\n    }\n    \n    [_handicapManager unregisterWTSDKHqData];\n}\n\n- (void)didDisappear{\n    \n}\n\n#pragma mark - Private\n- (void)creatUI{\n    self.layer.borderWidth = 0.5f;\n    [self addSubview:self.tableView];\n    [self.tableDelegate handleTableViewDataSourceAndDelegate:self.tableView];\n    [self updateImageTheme];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(updateImageTheme) name:ThemeVersionNotification object:nil];\n}\n- (void)makeConstraints{\n    [self.tableView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.edges.mas_equalTo(self);\n    }];\n}\n\n- (void)updateImageTheme {\n    if (IS_NIGHT_THEME && !self.donotChangeSelfTheme) {\n        self.layer.borderColor = GREY_NIGHT.CGColor;\n        _segLine.image = [UIImage imageNamed:@\"buyCutLine_night\"];\n    } else {\n        self.layer.borderColor = ColorWithHexRGBA(0xEEEEEE, 1).CGColor;\n        _segLine.image = [UIImage imageNamed:@\"buyCutLine\"];\n    }\n}\n\n#pragma mark-public\n//设置买卖盘是否为十档\n- (void) setIsMMPanTen:(BOOL)isMMPanTen\n{\n    _isMMPanTen = isMMPanTen;\n    if (_isMMPanTen)\n    {\n        _nMMPanCount = 10;\n    }\n    else\n    {\n        _nMMPanCount = 5;\n    }\n}\n\n\n- (void)requestData:(BOOL)wait{\n    if (_fullSpeedFetcher) {\n        [_fullSpeedFetcher pause];\n        _fullSpeedFetcher = nil;\n    }\n    int pageId = AM_PAGE_HANGQING_PAGE_ID;\n    int componentProtocolId = KProtocalID_Five;\n    if (_isMMPanTen)\n    {\n        componentProtocolId = KProtocalID_Ten;\n    }\n    \n    if(self.curCode == nil || [_curCode isEqualToString:@\"\"])\n    {\n        if (_fetcher) {\n            [_fetcher pause];\n        }\n        if (_fullSpeedFetcher) {\n            [_fullSpeedFetcher pause];\n        }\n        if (_pricefetcher) {\n            [_pricefetcher pause];\n        }\n        [self clearAllLabelDate];\n        return;\n    }\n    if([_curCodeRequest rangeOfString:self.curCode].length == 0)\n    {\n        [self clearAllLabelDate];\n    }\n    self.curCodeRequest = self.curCode;\n    if ([HXTradeHandicapManager isNeedUseHandicapData]) {\n        WeakObj(self);\n        [self.handicapManager registerWTSDKHqDataWithStockCode:self.curCode withCompleted:^(StuffTableModel * _Nonnull model) {\n            [selfWeak tableRequestDataFinished:model];\n        }];\n        return;\n    } else {\n        [_handicapManager unregisterWTSDKHqData];\n    }\n    if (_curMarket == nil) {\n        _curMarket = @\"-1\";\n    }\n    NSMutableDictionary *params = [@{@\"stockcode\" : self.curCode, @\"marketcode\" : self.curMarket} mutableCopy];\n    //获取硬件信息\n    NSString* deviceInfo = @\"\";\n    CEQAppFrame* pFrame = EQGetAppFrame();\n    if (pFrame != NULL && pFrame->GetDeviceManager() != NULL) {\n        deviceInfo = [pFrame->GetDeviceManager() getDeviceInfoWithoutKey];\n        deviceInfo = [deviceInfo substringWithRange:NSMakeRange(0, deviceInfo.length - 2)];  //去掉\\r\\n\n    }\n    [params setObject:deviceInfo forKey:@\"HDInfo\"];\n    \n    if (self.isGGTStock) {\n        [params setObject:@\"1\" forKey:@\"skiphkpushlimit\"];\n    }\n     if (!_fetcher) {\n            HXSocketRequest *request = [[HXSocketRequest alloc] initWithProtocolId:componentProtocolId paramsDict:params pageId:pageId];\n            WeakObj(self);\n            _fetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                if (error) {\n                    return;\n                }\n                /","infill":"/如果是全速数据if (data == nil) ","suffix":"{\n                    return;\n                //第一次请求数据\n                [selfWeak setDataForNormalStockDate:data];\n                //\n                if ([data modelType] == StuffModelTypeTable) {\n                    if ([FullSpeedManager shouldSubscribeFullSpeedForMarketNowTime:selfWeak.curMarket]) {\n                        [selfWeak setDataForFullSpeedWith:data];\n\n                        if (selfWeak.fullSpeedFetcher == nil) {\n                            [selfWeak requestFullSpeedData];\n                        }\n                        [selfWeak dealFullSpeedReloadDate];\n                        return;\n                    }\n                    if (selfWeak.fullSpeedFetcher != nil) {\n                        [selfWeak.fullSpeedFetcher pause];\n                        selfWeak.fullSpeedFetcher = nil;\n                    }\n                    [selfWeak tableRequestDataFinished:(StuffTableModel *)data];\n                }\n            }];\n            [_fetcher start];\n        }else {\n            [_fetcher pause];\n            _fetcher.request.paramsDict = params;\n            [_fetcher resume];\n        }\n}\n- (void)requestFullSpeedData {\n    if (_curCode == nil || _curMarket == nil) {\n        return;\n    }\n    if ([HXTradeHandicapManager isNeedUseHandicapData]) {\n        WeakObj(self);\n        [self.handicapManager registerWTSDKHqDataWithStockCode:self.curCode withCompleted:^(StuffTableModel * _Nonnull model) {\n            [selfWeak tableRequestDataFinished:model];\n        }];\n        return;\n    } else {\n        [_handicapManager unregisterWTSDKHqData];\n    }\n    if (_fullSpeedFetcher == nil) {\n        HXSocketRequest *request = [[HXSocketRequest alloc] initWithProtocolId:FullSpeedProtocolId paramsDict:@{@\"stockcode\":_curCode,@\"marketcode\":_curMarket} pageId:AM_PAGE_HANGQING_PAGE_ID];\n        request.wait = NO;\n        WeakObj(self);\n        _fullSpeedFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n            if (!error) {\n                if (data && [data modelType] == StuffModelTypeTable) {\n                    StuffTableModel *tableData = (StuffTableModel *)data;\n                    [selfWeak setFullSpeedDataWith:tableData];\n                    [selfWeak dealFullSpeedReloadDate];\n                }\n            }\n            \n        }];\n    } else {\n           _fullSpeedFetcher.request.paramsDict =@{@\"stockcode\":_curCode,@\"marketcode\":_curMarket};\n           [_fullSpeedFetcher pause];\n    }\n    [_fullSpeedFetcher start];\n}\n\n#pragma mark -- dealWith Handicap model\n//处理买卖盘口数据\n- (void)dealWithHandicapModelWithModel:(StuffTableModel *)tableModel {\n    [self.buyArr removeAllObjects];\n    [self.sellArr removeAllObjects];\n    [self.infoArr removeAllObjects];\n    //买入\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE1 andAmountKey:SM_HQ_BUYCOUNT1 tradeType:TradeType_buy];\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE2 andAmountKey:SM_HQ_BUYCOUNT2 tradeType:TradeType_buy];\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE3 andAmountKey:SM_HQ_BUYCOUNT3 tradeType:TradeType_buy];\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE4 andAmountKey:SM_HQ_BUYCOUNT4 tradeType:TradeType_buy];\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE5 andAmountKey:SM_HQ_BUYCOUNT5 tradeType:TradeType_buy];\n    \n    if (_isMMPanTen)\n    {\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE6 andAmountKey:SM_HQ_BUYCOUNT6 tradeType:TradeType_buy];\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE7 andAmountKey:SM_HQ_BUYCOUNT7 tradeType:TradeType_buy];\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE8 andAmountKey:SM_HQ_BUYCOUNT8 tradeType:TradeType_buy];\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE9 andAmountKey:SM_HQ_BUYCOUNT9 tradeType:TradeType_buy];\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE10 andAmountKey:SM_HQ_BUYCOUNT10 tradeType:TradeType_buy];\n    }\n    \n    //卖出\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE1 andAmountKey:SM_HQ_SELLCOUNT1 tradeType:TradeType_sell];\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE2 andAmountKey:SM_HQ_SELLCOUNT2 tradeType:TradeType_sell];\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE3 andAmountKey:SM_HQ_SELLCOUNT3 tradeType:TradeType_sell];\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE4 andAmountKey:SM_HQ_SELLCOUNT4 tradeType:TradeType_sell];\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE5 andAmountKey:SM_HQ_SELLCOUNT5 tradeType:TradeType_sell];\n    \n    if (_isMMPanTen)\n    {\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE6 andAmountKey:SM_HQ_SELLCOUNT6 tradeType:TradeType_sell];\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE7 andAmountKey:SM_HQ_SELLCOUNT7 tradeType:TradeType_sell];\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE8 andAmountKey:SM_HQ_SELLCOUNT8 tradeType:TradeType_sell];\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE9 andAmountKey:SM_HQ_SELLCOUNT9 tradeType:TradeType_sell];\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE10 andAmountKey:SM_HQ_SELLCOUNT10 tradeType:TradeType_sell];\n    }\n    \n    self.isPriceLabelHasValue = NO;\n    for (int i = 0; i < _nMMPanCount; i++) {\n        HXWTMMPanModel *itemBuy = [self.buyArr safetyObjectAtIndex:i];\n        itemBuy.titleStr = [NSString stringWithFormat:@\"买%d\",i+1];\n        itemBuy.stockCode = self.curCode;\n        itemBuy.stockMarket = self.curMarket;\n        if (itemBuy.amount == nil ) {\n            itemBuy.amount = [[TableModelColorString alloc] init];\n            itemBuy.amount.string = @\"0\";\n        }\n        HXWTMMPanModel *itemSell = [self.sellArr safetyObjectAtIndex:i];\n        itemSell.titleStr = [NSString stringWithFormat:@\"卖%d\",i+1];\n        if (itemSell.amount == nil ) {\n            itemSell.amount = [[TableModelColorString alloc] init];\n            itemSell.amount.string = @\"0\";\n        }\n        itemSell.stockCode = self.curCode;\n\n        itemSell.stockMarket = self.curMarket;\n        if (!self.isSameStock) {\n            [self setLayoutParameter:itemBuy sellItem:itemSell];\n        }\n    }\n    if (!self.isSameStock) {\n        [self setneedRemoveValue];\n    }\n    [self.infoArr addObject:[[self.sellArr reverseObjectEnumerator] allObjects]];\n    [self.infoArr addObject:self.buyArr];\n\n    [self.tableDelegate setItems:self.infoArr];\n    [self.tableView reloadData];\n}\n\n- (void)setLayoutParameter:(HXWTMMPanModel *)itemBuy sellItem:(HXWTMMPanModel *)itemSell {\n    float buyPriceWidth = [self getNumnberTotalLength:itemBuy.price.string isNumber:NO];\n    float sellPriceWidth = [self getNumnberTotalLength:itemSell.price.string isNumber:NO];\n    float buyOrSellPriceMaxWidth = MAX(buyPriceWidth, sellPriceWidth);\n    self.priceMaxWidth = MAX(self.priceMaxWidth, buyOrSellPriceMaxWidth);\n    float buyNumberWidth = [self getNumnberTotalLength:itemBuy.amount.string isNumber:YES];\n    float sellNumberWidth = [self getNumnberTotalLength:itemSell.amount.string isNumber:YES];\n    float buyOrSellNumberMaxWidth = MAX(buyNumberWidth, sellNumberWidth);\n    self.numberMaxWidth = MAX(self.numberMaxWidth, buyOrSellNumberMaxWidth);\n}\n\n- (BOOL)isSameStockCode {\n    if ([self.oldStockCode isEqualToString:_curCode] && [self.oldStockMarket isEqualToString:_curMarket]) {\n        return YES;\n    }\n    self.faultToleranceWidth = MaxOneNumberWidth;\n    self.numberMaxWidth = 0;\n    self.priceMaxWidth = 0;\n    self.labelOriginX = BASEORIGINX;\n    self.oldSt","relevantFile":"","relevantFileList":[],"filePath":"HXWTMMPanCommon.mm","template":"objective-cpp","multiRes":{"hipilot":"/第一次请求数据 和 数据刷新请求 的回调","deepseek-chat-lite":"/第一次请求数据","CodeQwen2.5-7B":"/第一次请求数据","copilot":"/如果是全速数据if (data == nil) "}},{"prefix":"\n#import \"HXWTMMPanCommon.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import \"HXEasyBaseTableView.h\"\n#import \"HXEasyBaseTableGroupDelegate.h\"\n#import <ThirdBase/Masonry.h>\n#import \"HXSocketFetcher.h\"\n#import \"AMLocalIdDef.h\"\n#include \"EQAppFrame.h\"\n#import \"FullSpeedManager.h\"\n#import \"Id_refrence.h\"\n#import \"HXWTMMPanModel.h\"\n#import <HXBase/NSArray+Safety.h>\n#import \"FullSpeedDataModel.h\"\n#import \"HXWTMMPanCommonCell.h\"\n#import \"UpAndDownPercentageModel.h\"\n#import <HXDataTypeConvertor/NSArray+HXDataTypeConvertor.h>\n#import \"WTPriceLimitManager.h\"\n#import \"TJiaoYiRiSearchModel.h\"\n#import \"WTOrderManager.h\"\n#import \"WTOrderModel.h\"\n#import \"AMSQLPublicProxy.h\"\n#import \"CBASDefines.h\"\n#import \"WTTradePostionManager.h\"\n#import \"HXTradeHandicapManager.h\"\n\n#define KProtocalID_Five       1211 //五档\n#define KProtocalID_Ten        1275 //十档\n#define KProtocalID2           1267\n#define FullSpeedProtocolId 4016\n#define ORDERMARK_RADIUS 4\n#define ORDERMARK_SPACING -2\n#define ORDERMARK_BUYLOG @\".buyshow\"\n#define ORDERMARK_SELLLOG @\".saleshow\"\n\n#define MAXPRICELABELWIDTH       (52 * Screen_Scale_IPHONE6)//价格label最大宽度\n#define NUMBERLABELWIDTH         40//数量label宽度\n#define TITLELABELWIDTH          25//标题label宽度\n#define JIANJUWIDTH              5//各个label间距\n#define BASEORIGINX              35//基础价格originX位置\n#define MAIMAIPANWIDTH           (138 * Screen_Scale_IPHONE6)//兜底自身宽度\n#define MaxOneNumberWidth        7//单个数字最大宽度\n\nextern CEQAppFrame*  EQGetAppFrame();\n\n@interface HXWTMMPanCommon ()<WTOrderMarkDelegate>\n@property (strong,nonatomic) HXEasyBaseTableView *tableView;\n@property (strong,nonatomic) HXEasyBaseTableGroupDelegate *tableDelegate;\n@property (strong,nonatomic) NSMutableArray *infoArr;\n@property (strong,nonatomic) NSMutableArray *buyArr;\n@property (strong,nonatomic) NSMutableArray *sellArr;\n@property (strong,nonatomic) NSMutableArray<NSString *> *priceArr;\n@property (strong,nonatomic) UIView *topOrderMark;\n@property (strong,nonatomic) UIView *bottomOrderMark;\n@property (strong,nonatomic) UIImageView *segLine;\n@property (nonatomic, strong) HXSocketFetcher *fetcher;\n@property (nonatomic, strong) HXSocketFetcher *pricefetcher;\n@property (nonatomic, strong) HXSocketFetcher *fullSpeedFetcher;\n@property (nonatomic,copy) NSString   *curCodeRequest; //已请求的股票名称\n@property (nonatomic, strong) FullSpeedData *fullSpeedData;\n@property (nonatomic, assign)BOOL isSendBuyLog;\n@property (nonatomic, assign)BOOL isSendSellLog;\n@property (nonatomic, copy) NSString *oldStockCode;\n@property (nonatomic, copy) NSString *oldStockMarket;\n@property (nonatomic, assign) float labelOriginX;//价格label的origin.x\n@property (nonatomic, assign) float priceMaxWidth;\n@property (nonatomic, assign) float numberMaxWidth;\n@property (nonatomic, assign) float faultToleranceWidth;//容错宽度\n@property (nonatomic, assign) BOOL isSameStock;\n@property (nonatomic, strong) HXTradeHandicapManager *handicapManager;\n@property (nonatomic, assign) BOOL isPriceLabelHasValue;//价格label是否有值\n@property (nonatomic, assign) int nMMPanCount;//买卖盘的档数，五档为5，十档为10\n@end\n\n@implementation HXWTMMPanCommon\n#pragma mark - Life Cycle\n- (void)dealloc\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:ThemeVersionNotification object:nil];\n    if ([WTOrderManager isSupportOrderMark]) {\n        [WTOrderManager sharedInstance].markDelegate = nil;\n    }\n    \n}\n\n- (instancetype)initWithMMPanTen:(BOOL)isMMPanTen\n{\n    if (self = [super init]) {\n        [self setIsMMPanTen:isMMPanTen];  \n        [self creatUI];\n        [self makeConstraints];\n        \n        if ([WTOrderManager isSupportOrderMark]) {\n            [self initTopBottomOrderMark];\n        }\n        _isSendBuyLog = NO;\n        _isSendSellLog = NO;\n    }\n    return self;\n}\n\n- (void)onFinishInflate{\n    self.priceArr = [NSMutableArray array];\n    if ([WTOrderManager isSupportOrderMark]) {\n        [WTOrderManager sharedInstance].markDelegate = self;\n    }\n}\n\n- (void)willAppear{\n}\n\n- (void)didAppear{\n}\n\n- (void)willDisappear{\n    if (_fullSpeedFetcher) {\n        [_fullSpeedFetcher pause];\n        _fullSpeedFetcher = nil;\n    }\n    if (_fetcher) {\n        [_fetcher pause];\n        _fetcher  = nil;\n    }\n    if (_pricefetcher) {\n        [_pricefetcher pause];\n        _pricefetcher = nil;\n    }\n    \n    [_handicapManager unregisterWTSDKHqData];\n}\n\n- (void)didDisappear{\n    \n}\n\n#pragma mark - Private\n- (void)creatUI{\n    self.layer.borderWidth = 0.5f;\n    [self addSubview:self.tableView];\n    [self.tableDelegate handleTableViewDataSourceAndDelegate:self.tableView];\n    [self updateImageTheme];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(updateImageTheme) name:ThemeVersionNotification object:nil];\n}\n- (void)makeConstraints{\n    [self.tableView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.edges.mas_equalTo(self);\n    }];\n}\n\n- (void)updateImageTheme {\n    if (IS_NIGHT_THEME && !self.donotChangeSelfTheme) {\n        self.layer.borderColor = GREY_NIGHT.CGColor;\n        _segLine.image = [UIImage imageNamed:@\"buyCutLine_night\"];\n    } else {\n        self.layer.borderColor = ColorWithHexRGBA(0xEEEEEE, 1).CGColor;\n        _segLine.image = [UIImage imageNamed:@\"buyCutLine\"];\n    }\n}\n\n#pragma mark-public\n//设置买卖盘是否为十档\n- (void) setIsMMPanTen:(BOOL)isMMPanTen\n{\n    _isMMPanTen = isMMPanTen;\n    if (_isMMPanTen)\n    {\n        _nMMPanCount = 10;\n    }\n    else\n    {\n        _nMMPanCount = 5;\n    }\n}\n\n\n- (void)requestData:(BOOL)wait{\n    if (_fullSpeedFetcher) {\n        [_fullSpeedFetcher pause];\n        _fullSpeedFetcher = nil;\n    }\n    int pageId = AM_PAGE_HANGQING_PAGE_ID;\n    int componentProtocolId = KProtocalID_Five;\n    if (_isMMPanTen)\n    {\n        componentProtocolId = KProtocalID_Ten;\n    }\n    \n    if(self.curCode == nil || [_curCode isEqualToString:@\"\"])\n    {\n        if (_fetcher) {\n            [_fetcher pause];\n        }\n        if (_fullSpeedFetcher) {\n            [_fullSpeedFetcher pause];\n        }\n        if (_pricefetcher) {\n            [_pricefetcher pause];\n        }\n        [self clearAllLabelDate];\n        return;\n    }\n    if([_curCodeRequest rangeOfString:self.curCode].length == 0)\n    {\n        [self clearAllLabelDate];\n    }\n    self.curCodeRequest = self.curCode;\n    if ([HXTradeHandicapManager isNeedUseHandicapData]) {\n        WeakObj(self);\n        [self.handicapManager registerWTSDKHqDataWithStockCode:self.curCode withCompleted:^(StuffTableModel * _Nonnull model) {\n            [selfWeak tableRequestDataFinished:model];\n        }];\n        return;\n    } else {\n        [_handicapManager unregisterWTSDKHqData];\n    }\n    if (_curMarket == nil) {\n        _curMarket = @\"-1\";\n    }\n    NSMutableDictionary *params = [@{@\"stockcode\" : self.curCode, @\"marketcode\" : self.curMarket} mutableCopy];\n    //获取硬件信息\n    NSString* deviceInfo = @\"\";\n    CEQAppFrame* pFrame = EQGetAppFrame();\n    if (pFrame != NULL && pFrame->GetDeviceManager() != NULL) {\n        deviceInfo = [pFrame->GetDeviceManager() getDeviceInfoWithoutKey];\n        deviceInfo = [deviceInfo substringWithRange:NSMakeRange(0, deviceInfo.length - 2)];  //去掉\\r\\n\n    }\n    [params setObject:deviceInfo forKey:@\"HDInfo\"];\n    \n    if (self.isGGTStock) {\n        [params setObject:@\"1\" forKey:@\"skiphkpushlimit\"];\n    }\n     if (!_fetcher) {\n            HXSocketRequest *request = [[HXSocketRequest alloc] initWithProtocolId:componentProtocolId paramsDict:params pageId:pageId];\n            WeakObj(self);\n            _fetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                if (error) {\n                    return;\n                }\n                //如果是全速数据if (data == nil) {\n                    ","infill":"如果是全速数据\n                \n","suffix":"                if ([data modelType] == StuffModelTypeTable) {\n                    if ([FullSpeedManager shouldSubscribeFullSpeedForMarketNowTime:selfWeak.curMarket]) {\n                        [selfWeak setDataForFullSpeedWith:data];\n\n                        if (selfWeak.fullSpeedFetcher == nil) {\n                            [selfWeak requestFullSpeedData];\n                        }\n                        [selfWeak dealFullSpeedReloadDate];\n                        return;\n                    }\n                    if (selfWeak.fullSpeedFetcher != nil) {\n                        [selfWeak.fullSpeedFetcher pause];\n                        selfWeak.fullSpeedFetcher = nil;\n                    }\n                    [selfWeak tableRequestDataFinished:(StuffTableModel *)data];\n                }\n            }];\n            [_fetcher start];\n        }else {\n            [_fetcher pause];\n            _fetcher.request.paramsDict = params;\n            [_fetcher resume];\n        }\n}\n- (void)requestFullSpeedData {\n    if (_curCode == nil || _curMarket == nil) {\n        return;\n    }\n    if ([HXTradeHandicapManager isNeedUseHandicapData]) {\n        WeakObj(self);\n        [self.handicapManager registerWTSDKHqDataWithStockCode:self.curCode withCompleted:^(StuffTableModel * _Nonnull model) {\n            [selfWeak tableRequestDataFinished:model];\n        }];\n        return;\n    } else {\n        [_handicapManager unregisterWTSDKHqData];\n    }\n    if (_fullSpeedFetcher == nil) {\n        HXSocketRequest *request = [[HXSocketRequest alloc] initWithProtocolId:FullSpeedProtocolId paramsDict:@{@\"stockcode\":_curCode,@\"marketcode\":_curMarket} pageId:AM_PAGE_HANGQING_PAGE_ID];\n        request.wait = NO;\n        WeakObj(self);\n        _fullSpeedFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n            if (!error) {\n                if (data && [data modelType] == StuffModelTypeTable) {\n                    StuffTableModel *tableData = (StuffTableModel *)data;\n                    [selfWeak setFullSpeedDataWith:tableData];\n                    [selfWeak dealFullSpeedReloadDate];\n                }\n            }\n            \n        }];\n    } else {\n           _fullSpeedFetcher.request.paramsDict =@{@\"stockcode\":_curCode,@\"marketcode\":_curMarket};\n           [_fullSpeedFetcher pause];\n    }\n    [_fullSpeedFetcher start];\n}\n\n#pragma mark -- dealWith Handicap model\n//处理买卖盘口数据\n- (void)dealWithHandicapModelWithModel:(StuffTableModel *)tableModel {\n    [self.buyArr removeAllObjects];\n    [self.sellArr removeAllObjects];\n    [self.infoArr removeAllObjects];\n    //买入\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE1 andAmountKey:SM_HQ_BUYCOUNT1 tradeType:TradeType_buy];\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE2 andAmountKey:SM_HQ_BUYCOUNT2 tradeType:TradeType_buy];\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE3 andAmountKey:SM_HQ_BUYCOUNT3 tradeType:TradeType_buy];\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE4 andAmountKey:SM_HQ_BUYCOUNT4 tradeType:TradeType_buy];\n    [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE5 andAmountKey:SM_HQ_BUYCOUNT5 tradeType:TradeType_buy];\n    \n    if (_isMMPanTen)\n    {\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE6 andAmountKey:SM_HQ_BUYCOUNT6 tradeType:TradeType_buy];\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE7 andAmountKey:SM_HQ_BUYCOUNT7 tradeType:TradeType_buy];\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE8 andAmountKey:SM_HQ_BUYCOUNT8 tradeType:TradeType_buy];\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE9 andAmountKey:SM_HQ_BUYCOUNT9 tradeType:TradeType_buy];\n        [self addDataToArray:self.buyArr from:tableModel forPriceKey:SM_HQ_BUYPRICE10 andAmountKey:SM_HQ_BUYCOUNT10 tradeType:TradeType_buy];\n    }\n    \n    //卖出\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE1 andAmountKey:SM_HQ_SELLCOUNT1 tradeType:TradeType_sell];\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE2 andAmountKey:SM_HQ_SELLCOUNT2 tradeType:TradeType_sell];\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE3 andAmountKey:SM_HQ_SELLCOUNT3 tradeType:TradeType_sell];\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE4 andAmountKey:SM_HQ_SELLCOUNT4 tradeType:TradeType_sell];\n    [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE5 andAmountKey:SM_HQ_SELLCOUNT5 tradeType:TradeType_sell];\n    \n    if (_isMMPanTen)\n    {\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE6 andAmountKey:SM_HQ_SELLCOUNT6 tradeType:TradeType_sell];\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE7 andAmountKey:SM_HQ_SELLCOUNT7 tradeType:TradeType_sell];\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE8 andAmountKey:SM_HQ_SELLCOUNT8 tradeType:TradeType_sell];\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE9 andAmountKey:SM_HQ_SELLCOUNT9 tradeType:TradeType_sell];\n        [self addDataToArray:self.sellArr from:tableModel forPriceKey:SM_HQ_SELLPRICE10 andAmountKey:SM_HQ_SELLCOUNT10 tradeType:TradeType_sell];\n    }\n    \n    self.isPriceLabelHasValue = NO;\n    for (int i = 0; i < _nMMPanCount; i++) {\n        HXWTMMPanModel *itemBuy = [self.buyArr safetyObjectAtIndex:i];\n        itemBuy.titleStr = [NSString stringWithFormat:@\"买%d\",i+1];\n        itemBuy.stockCode = self.curCode;\n        itemBuy.stockMarket = self.curMarket;\n        if (itemBuy.amount == nil ) {\n            itemBuy.amount = [[TableModelColorString alloc] init];\n            itemBuy.amount.string = @\"0\";\n        }\n        HXWTMMPanModel *itemSell = [self.sellArr safetyObjectAtIndex:i];\n        itemSell.titleStr = [NSString stringWithFormat:@\"卖%d\",i+1];\n        if (itemSell.amount == nil ) {\n            itemSell.amount = [[TableModelColorString alloc] init];\n            itemSell.amount.string = @\"0\";\n        }\n        itemSell.stockCode = self.curCode;\n\n        itemSell.stockMarket = self.curMarket;\n        if (!self.isSameStock) {\n            [self setLayoutParameter:itemBuy sellItem:itemSell];\n        }\n    }\n    if (!self.isSameStock) {\n        [self setneedRemoveValue];\n    }\n    [self.infoArr addObject:[[self.sellArr reverseObjectEnumerator] allObjects]];\n    [self.infoArr addObject:self.buyArr];\n\n    [self.tableDelegate setItems:self.infoArr];\n    [self.tableView reloadData];\n}\n\n- (void)setLayoutParameter:(HXWTMMPanModel *)itemBuy sellItem:(HXWTMMPanModel *)itemSell {\n    float buyPriceWidth = [self getNumnberTotalLength:itemBuy.price.string isNumber:NO];\n    float sellPriceWidth = [self getNumnberTotalLength:itemSell.price.string isNumber:NO];\n    float buyOrSellPriceMaxWidth = MAX(buyPriceWidth, sellPriceWidth);\n    self.priceMaxWidth = MAX(self.priceMaxWidth, buyOrSellPriceMaxWidth);\n    float buyNumberWidth = [self getNumnberTotalLength:itemBuy.amount.string isNumber:YES];\n    float sellNumberWidth = [self getNumnberTotalLength:itemSell.amount.string isNumber:YES];\n    float buyOrSellNumberMaxWidth = MAX(buyNumberWidth, sellNumberWidth);\n    self.numberMaxWidth = MAX(self.numberMaxWidth, buyOrSellNumberMaxWidth);\n}\n\n- (BOOL)isSameStockCode {\n    if ([self.oldStockCode isEqualToString:_curCode] && [self.oldStockMarket isEqualToString:_curMarket]) {\n        return YES;\n    }\n    self.faultToleranceWidth = MaxOneNumberWidth;\n    self.numberMaxWidth = 0;\n    self.priceMaxWidth = 0;\n    self.labelOriginX = BASEORIGINX;\n    self.oldStockCode = _curCode;\n    self.oldStockMarket = _curMarket;\n    return NO;\n}\n\n//设置数量label宽度(不同股票时累加,想通股票时清空原有累计数据)\n- (float)getNumnberT","relevantFile":"","relevantFileList":[],"filePath":"HXWTMMPanCommon.mm","template":"objective-cpp","multiRes":{"hipilot":"if (selfWeak.fullSpeedFetcher == nil) {\n                        [selfWeak requestFullSpeedData];\n                    }\n                    return;\n                }","deepseek-chat-lite":"_fetcher = nil;","CodeQwen2.5-7B":"if (selfWeak.fullSpeedFetcher == nil) {","copilot":"如果是全速数据\n                \n"}},{"prefix":"\n#import \"XiaDanWuDangData.h\"\n#import \"EQColor.h\"\n#import \"Tools.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"QHTDisplayLink.h\"\n#import \"LJHQStandardPriceSetManager.h\"\n#import \"HXLevel2PowerManager.h\"\n#import \"HXSwiftHeader.h\"\n#import \"LJSystemGeneralContent.h\"\n\n@import LJNumberTool;\n\nstatic NSString *const kSpaceStr = @\"--\";\n\n@interface XiaDanWuDangData ()\n\n@property (strong, nonatomic) HXSocketFetcher *xiaDanFetcher;\n\n@property (strong, nonatomic) HXSocketFetcher *fenShiFetcher;\n@property (strong, nonatomic) HXSocketFetcher *allBuySellFetcher;\n/// 用于控制数据刷新频率，临时接收数据\n@property (strong, nonatomic) StuffTableModel *tempXiaDanData;\n@property (strong, nonatomic) StuffTableModel *tempWuDangData;\n\n/// 当前内存中的五档数据\n@property (nonatomic, strong) StuffBaseModel *wudangData;\n/// 当前内存中的(level2)五档数据\n@property (nonatomic, strong) StuffBaseModel *allBuySellData;\n\n@property (nonatomic, assign) BOOL isComplete;\n\n@end\n\n@implementation XiaDanWuDangData\n\n- (void)dealloc {\n    [self unRegisterObjectKey];\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    NSLog(@\"[dealloc] %s\", __func__);\n}\n\n- (instancetype)init {\n    if(self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 1211;\n        self.businessType = BUSINESS_XIADAN_WUDANG_DATA;\n        _sellAry = [[NSMutableArray alloc] init];   //卖出价格数组\n        _sellNumberAry = [[NSMutableArray alloc] init]; //卖出数量数组\n        _buyAry = [[NSMutableArray alloc] init];    //买入价格数组\n        _buyNumberAry = [[NSMutableArray alloc] init];  //买入数量数组\n        _sellColorAry = [[NSMutableArray alloc] init];  //卖出价格颜色数组\n        _sellNumberColorAry = [[NSMutableArray alloc] init];    //卖出数量颜色数组\n        _buyColorAry = [[NSMutableArray alloc] init];   //买入价格颜色数组\n        _buyNumberColorAry = [[NSMutableArray alloc] init]; //买入数量颜色数组\n        _nowPriceColorArray = [[NSMutableArray alloc] init];\n    }\n    return self;\n}\n\n- (void)reloadWuDang {\n    if (self.wudangData) {\n        [self setData:self.wudangData];\n    }\n    if (self.allBuySellData) {\n        [self setAllBuySellData:self.allBuySellData];\n    }\n}\n\n- (void)getWuDangDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    \n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        self.tempWuDangData = nil;\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VERTICAL_DETAIL_FRAMEID;\n        }\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n                               stockcode,\n                               marketCode];\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID paramsDict:requestDic pageId:(int)self.nPageID];\n        if (!self.fenShiFetcher) {\n            WEAKSELF;\n            self.fenShiFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                STRONGSELF\n                strongSelf.isRealData = data.isRealData;\n                strongSelf.wudangData = data;\n                if (!data.isRealData) {\n                    [strongSelf setData:data];\n                    return;\n                }\n                \n                strongSelf.tempWuDangData = data;\n                //非实时推送的数据直接返回，用于后续进行isRealData判断\n                if (!data.isRealData) {\n                    strongSelf.isComplete = NO;\n                    [strongSelf setData:strongSelf.tempWuDangData];\n                    return;\n                }\n                \n                if (strongSelf.isComplete) {\n                    return ;\n                }\n                \n                //防止过快刷新请求\n                strongSelf.isComplete = YES;\n                typeof(self) __weak weakSelf2 = strongSelf;\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)([QHTDisplayLink shareInstance].onceTime / 1000.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    typeof(weakSelf2) __strong strongSelf2 = weakSelf2;\n                    strongSelf2.isComplete = NO;\n                    [strongSelf2 setData:strongSelf2.tempWuDangData];\n                });\n            }];\n        } else {\n            [self.fenShiFetcher pause];\n            self.fenShiFetcher.request = request;\n        }\n        [self.fenShiFetcher start];\n    }\n}\n\n- (void)requestWithStockCode:(NSString *)stockCode\n                    marketId:(NSString *)marketId\n                successBlock:(void (^)(void))successBlock\n                 failedBlock:(void (^)(void))failedBlock {\n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    [self getWuDangDataWithStockCode:stockCode marketCode:marketId];\n}\n\n- (void)getAllBuySellDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSyst","infill":"清空数据\n    //","suffix":" 清空sell a\n    [_sellAry removeAllObjects];   //卖出价格数组\n    [_sellNumberAry removeAllObjects]; //卖出数量数组\n    [_buyAry removeAllObjects];    //买入价格数组\n    [_buyNumberAry removeAllObjects];  //买入数量数组\n    [_sellColorAry removeAllObjects];  //卖出价格颜色数组\n    [_sellNumberColorAry removeAllObjects];    //卖出数量颜色数组\n    [_buyColorAry removeAllObjects];   //买入价格颜色数组\n    [_buyNumberColorAry removeAllObjects]; //买入数量颜色数组\n    [_nowPriceColorArray removeAllObjects];\n}\n\n- (void)changeColorWithStandardPrice:(NSMutableArray *)buyTmpArr standardPrice:(NSString *)standardPrice buyOrSellArr:(NSMutableArray *)array {\n    for (int i = 0; i < array.count; ++i) {\n        NSString *buyStr = [buyTmpArr thsStringAtIndex:i];\n        if (![LJNumericStringUtils isNumber:buyStr] || ![LJNumericStringUtils isNumber:standardPrice]) {\n            [array thsReplaceObjectAtIndex:i withObject:HXUIColor.commonColor];\n        } else {\n            if ([buyStr doubleValue] > [standardPrice doubleValue]) {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.riseColor];\n            } else if ([buyStr doubleValue] < [standardPrice doubleValue]) {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.fallColor];\n            } else {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.commonColor];\n            }\n        }\n    }\n}\n\n- (void)setData:(StuffBaseModel *)model {\n    [self clearAllData];\n    if (model && ([model modelType] == StuffModelTypeText)) {\n        StuffTextModel *textModel = (StuffTextModel *)model;\n        self.contentString = textModel.text;\n        [self doneBusiness:DOBUSINESS_FAILED];\n    } else if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        \n        if (tableModel.extStringDict != nil) {\n            NSString *str = [tableModel.extStringDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_CODECODE]];\n            if(str) {\n                self.contentString = str;\n                self.stockCode = str;\n            }\n        }\n        \n        // 是否需要基准价\n        BOOL isNeedStandard = ([[LJHQStandardPriceSetManager shareInstance] isSupportStandardPriceWithMarket:[NSString stringWithFormat:@\"%@\", self.lastMarketId]] && [[LJHQStandardPriceSetManager shareInstance] currentStandardPriceTypeIsCustom]);\n        NSString *standardPrice = [[LJHQStandardPriceSetManager shareInstance] getStandardPriceWithStockCode:self.lastStockCode];\n        NSMutableArray *buyTmpArr = [NSMutableArray array];\n        NSMutableArray *sellTmpArr = [NSMutableArray array];\n        \n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStrsell1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE1]];\n            NSArray *pStrsellNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT1]];\n            NSArray *pStrsell2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE2]];\n            NSArray *pStrsellNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT2]];\n            NSArray *pStrsell3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE3]];\n            NSArray *pStrsellNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT3]];\n            NSArray *pStrsell4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE4]];\n            NSArray *pStrsellNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT4]];\n            NSArray *pStrsell5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE5]];\n            NSArray *pStrsellNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT5]];\n            NSArray *pStrbuy1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE1]];\n            NSArray *pStrbuyNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT1]];\n            NSArray *pStrbuy2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE2]];\n            NSArray *pStrbuyNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT2]];\n            NSArray *pStrbuy3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE3]];\n            NSArray *pStrbuyNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT3]];\n            NSArray *pStrbuy4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE4]];\n            NSArray *pStrbuyNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT4]];\n            NSArray *pStrbuy5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE5]];\n            NSArray *pStrbuyNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT5]];\n            NSArray *pStrsellNum6 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_NEWPRICE]];\n            NSArray *yesterdayClosePrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\", SM_HQ_PREVCLOSE]];\n            \n            if (pStrsellNum6) {\n                self.lastPrice = pStrsellNum6[0];\n            }else {\n                self.lastPrice = kSpaceStr;\n            }\n            \n            if (pStrbuy1) {\n                self.buyPrice =pStrbuy1[0];\n            }else {\n                self.buyPrice = kSpaceStr;\n            }\n            \n            if (pStrsell1) {\n                self.sellPrice = pStrsell1[0];\n            }else {\n                self.sellPrice = kSpaceStr;\n            }\n            \n            NSArray *zhangTing = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ZHANGTING]];\n            NSArray *dieTing = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_DIETING]];\n            NSString *zhangStr = [zhangTing thsStringAtIndex:0];\n            NSString *dieStr = [dieTing thsStringAtIndex:0];\n            self.limitUpPrice = zhangStr ? :kSpaceStr;\n            self.limitDownPrice = dieStr ? :kSpaceStr;\n            \n            self.yesterdayClosePrice = yesterdayClosePrice.firstObject ? :kSpaceStr;\n            \n            [self setTextData:pStrsell1 addToArray:_sellAry];\n            [self setTextData:pStrsell2 addToArray:_sellAry];\n            [self setTextData:pStrsell3 addToArray:_sellAry];\n            [self setTextData:pStrsell4 addToArray:_sellAry];\n            [self setTextData:pStrsell5 addToArray:_sellAry];\n            [self setTextData:pStrsellNum1 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum2 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum3 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum4 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum5 addToArray:_sellNumberAry];\n            [self setTextData:pStrbuy1 addToArray:_buyAry];\n            [self setTextData:pStrbuy2 addToArray:_buyAry];\n            [self setTextData:pStrbuy3 addToArray:_buyAry];\n            [self setTextData:pStrbuy4 addToArray:_buyAry];\n            [self setTextData:pStrbuy5 addToArray:_buyAry];\n            [self setTextData:pStrbuyNum1 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum2 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum3 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum4 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum5 addToArray:_buyNumberAry];\n            \n            if (isNeedStandard) {\n                buyTmpArr = [_buyAry copy];\n                sellTmpArr = [_sellAry copy];\n            }\n        }\n        \n        if(tableModel.bodyT","relevantFile":"<file_path>HXEnvManager.mm\n}\n\n+ (CDataBaseService *)getDataBaseService {\n    if (m_databaseService == NULL) {\n        [self shareInstance];\n    }\n    return m_databaseService;\n}\n\n+ (CSettingVariablesMgr *)getSettingVarMgr {\n    if (m_settingVarMgr == NULL) {\n        [self shareInstance];\n    }\n    return m_settingVarMgr;\n}\n\n#pragma mark - Private Methods\n- (void)initConfig {\n    self.appWindow = [[[EQUIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds] initEQWindow];\n    self.appWindow.backgroundColor = [UIColor blackColor];\n    self.curveSettingManager = [[CurveSettingManager alloc] init];\n    // 注册系统通知事件\n    [self.appWindow signNotify:YES];\n    g_bUpdateVersion = NO;\n    [self initGlobalConfig];\n    [HXEnvConfigManager shareInstance];\n    [self idleTimerDisabled];\n    [[LJDeviceManager tempInstance] updateDeviceInfo];\n    [HXOsInfo sharedInstance].didGetNetWorkState = ^(int isHasNetWork) {\n        g_bIsHasNetWork = isHasNetWork;\n    };\n    if (g_bUpdateVersion) {\n        g_bUpdateVersion = NO;\n    }\n\n    m_databaseService = new CDataBaseService();\n    m_settingVarMgr = new CSettingVariablesMgr();\n}\n\n- (void)initGlobalConfig {\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *version = [[[NSBundle mainBundle] infoDictionary] objectForKey:kCFBundleShortVersionString];\n    if (version) {\n        NSString *strOldVer = [[NSUserDefaults standardUserDefaults] objectForKey:kHXFuturesVersionKey]; // 取出之前的版本号\n        // 新安装、卸载安装、覆盖安装\n        if (!strOldVer || ![strOldVer isEqualToString:version]) {\n            g_bUpdateVersion = YES; // 覆盖或者更新版本了\n            [[NSUserDefaults standardUserDefaults] setObject:version forKey:kHXFuturesVersionKey];\n        }\n    }\n\n    if (g_strDocumentPath == nil) {\n        NSFileManager *fileManager = [NSFileManager defaultManager];\n        BOOL idDir = YES;\n        NSString *dirName = [NSString stringWithFormat:@\"%@/%@\", documentsDirectory, kEQHeXin];\n        if ([fileManager fileExistsAtPath:dirName isDirectory:&idDir]) {\n            g_strDocumentPath = dirName;\n        } else {\n            // 创建一个\n\n XiaDanWuDangData.m\n HXFutures\n\n Created by qianlei on 16/6/14.\n Copyright © 2016年 hexin. All rights reserved.","relevantFileList":[],"filePath":"XiaDanWuDangData.mm","template":"objective-cpp","multiRes":{"hipilot":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        self.tempXiaDanData = nil;\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n","deepseek-chat-lite":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求","CodeQwen2.5-7B":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求","copilot":"清空数据\n    //"}},{"prefix":"\n#import \"XiaDanWuDangData.h\"\n#import \"EQColor.h\"\n#import \"Tools.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"QHTDisplayLink.h\"\n#import \"LJHQStandardPriceSetManager.h\"\n#import \"HXLevel2PowerManager.h\"\n#import \"HXSwiftHeader.h\"\n#import \"LJSystemGeneralContent.h\"\n\n@import LJNumberTool;\n\nstatic NSString *const kSpaceStr = @\"--\";\n\n@interface XiaDanWuDangData ()\n\n@property (strong, nonatomic) HXSocketFetcher *xiaDanFetcher;\n\n@property (strong, nonatomic) HXSocketFetcher *fenShiFetcher;\n@property (strong, nonatomic) HXSocketFetcher *allBuySellFetcher;\n/// 用于控制数据刷新频率，临时接收数据\n@property (strong, nonatomic) StuffTableModel *tempXiaDanData;\n@property (strong, nonatomic) StuffTableModel *tempWuDangData;\n\n/// 当前内存中的五档数据\n@property (nonatomic, strong) StuffBaseModel *wudangData;\n/// 当前内存中的(level2)五档数据\n@property (nonatomic, strong) StuffBaseModel *allBuySellData;\n\n@property (nonatomic, assign) BOOL isComplete;\n\n@end\n\n@implementation XiaDanWuDangData\n\n- (void)dealloc {\n    [self unRegisterObjectKey];\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    NSLog(@\"[dealloc] %s\", __func__);\n}\n\n- (instancetype)init {\n    if(self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 1211;\n        self.businessType = BUSINESS_XIADAN_WUDANG_DATA;\n        _sellAry = [[NSMutableArray alloc] init];   //卖出价格数组\n        _sellNumberAry = [[NSMutableArray alloc] init]; //卖出数量数组\n        _buyAry = [[NSMutableArray alloc] init];    //买入价格数组\n        _buyNumberAry = [[NSMutableArray alloc] init];  //买入数量数组\n        _sellColorAry = [[NSMutableArray alloc] init];  //卖出价格颜色数组\n        _sellNumberColorAry = [[NSMutableArray alloc] init];    //卖出数量颜色数组\n        _buyColorAry = [[NSMutableArray alloc] init];   //买入价格颜色数组\n        _buyNumberColorAry = [[NSMutableArray alloc] init]; //买入数量颜色数组\n        _nowPriceColorArray = [[NSMutableArray alloc] init];\n    }\n    return self;\n}\n\n- (void)reloadWuDang {\n    if (self.wudangData) {\n        [self setData:self.wudangData];\n    }\n    if (self.allBuySellData) {\n        [self setAllBuySellData:self.allBuySellData];\n    }\n}\n\n- (void)getWuDangDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    \n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        self.tempWuDangData = nil;\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VERTICAL_DETAIL_FRAMEID;\n        }\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n                               stockcode,\n                               marketCode];\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID paramsDict:requestDic pageId:(int)self.nPageID];\n        if (!self.fenShiFetcher) {\n            WEAKSELF;\n            self.fenShiFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                STRONGSELF\n                strongSelf.isRealData = data.isRealData;\n                strongSelf.wudangData = data;\n                if (!data.isRealData) {\n                    [strongSelf setData:data];\n                    return;\n                }\n                \n                strongSelf.tempWuDangData = data;\n                //非实时推送的数据直接返回，用于后续进行isRealData判断\n                if (!data.isRealData) {\n                    strongSelf.isComplete = NO;\n                    [strongSelf setData:strongSelf.tempWuDangData];\n                    return;\n                }\n                \n                if (strongSelf.isComplete) {\n                    return ;\n                }\n                \n                //防止过快刷新请求\n                strongSelf.isComplete = YES;\n                typeof(self) __weak weakSelf2 = strongSelf;\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)([QHTDisplayLink shareInstance].onceTime / 1000.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    typeof(weakSelf2) __strong strongSelf2 = weakSelf2;\n                    strongSelf2.isComplete = NO;\n                    [strongSelf2 setData:strongSelf2.tempWuDangData];\n                });\n            }];\n        } else {\n            [self.fenShiFetcher pause];\n            self.fenShiFetcher.request = request;\n        }\n        [self.fenShiFetcher start];\n    }\n}\n\n- (void)requestWithStockCode:(NSString *)stockCode\n                    marketId:(NSString *)marketId\n                successBlock:(void (^)(void))successBlock\n                 failedBlock:(void (^)(void))failedBlock {\n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    [self getWuDangDataWithStockCode:stockCode marketCode:marketId];\n}\n\n- (void)getAllBuySellDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VERTICAL_DETAIL_FRAMEID;\n        }\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n                               stockcode,\n                               marketCode];\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID paramsDict:requestDic pageId:(int)self.nPageID];\n        if (!_allBuySellFetcher) {\n            WEAKSELF;\n            self.allBuySellFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                weakSelf.allBuySellData = data;\n                weakSelf.isRealData = data.isRealData;\n                [weakSelf setAllBuySellData:data];\n                \n            }];\n        } else {\n            [self.allBuySellFetcher pause];\n            self.allBuySellFetcher.request = request;\n        }\n        [self.allBuySellFetcher start];\n    }\n}\n\n- (NSMutableDictionary *)refrishTextColor:(StuffBaseModel *)model {\n    if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        [_sellAry removeAllObjects];   //卖出价格数组\n        [_sellNumberAry removeAllObjects]; //卖出数量数组\n        [_buyAry removeAllObjects];    //买入价格数组\n        [_buyNumberAry removeAllObjects];  //买入数量数组\n        [_sellColorAry removeAllObjects];  //卖出价格颜色数组\n        [_sellNumberColorAry removeAllObjects];    //卖出数量颜色数组\n        [_buyColorAry removeAllObjects];   //买入价格颜色数组\n        [_buyNumberColorAry removeAllObjects]; //买入数量颜色数组\n        [_nowPriceColorArray removeAllObjects];\n        \n        // 是否需要基准价\n        BOOL isNeedStandard = ([[LJHQStandardPriceSetManager shareInstance] isSupportStandardPriceWithMarket:[NSString stringWithFormat:@\"%@\", self.lastMarketId]] && [[LJHQStandardPriceSetManager shareInstance] currentStandardPriceTypeIsCustom]);\n        NSString *standardPrice = [[LJHQStandardPriceSetManager shareInstance] getStandardPriceWithStockCode:self.lastStockCode];\n        NSMutableArray *buyTmpArr = [NSMutableArray array];\n        NSMutableArray *sellTmpArr = [NSMutableArray array];\n        \n        if (tableModel.bodyTextDict !","infill":"eturn [self","suffix":" getWuDangDataToView];\n}\n\n- (void)clearAllData {\n    [_sellAry removeAllObjects];   //卖出价格数组\n    [_sellNumberAry removeAllObjects]; //卖出数量数组\n    [_buyAry removeAllObjects];    //买入价格数组\n    [_buyNumberAry removeAllObjects];  //买入数量数组\n    [_sellColorAry removeAllObjects];  //卖出价格颜色数组\n    [_sellNumberColorAry removeAllObjects];    //卖出数量颜色数组\n    [_buyColorAry removeAllObjects];   //买入价格颜色数组\n    [_buyNumberColorAry removeAllObjects]; //买入数量颜色数组\n    [_nowPriceColorArray removeAllObjects];\n}\n\n- (void)changeColorWithStandardPrice:(NSMutableArray *)buyTmpArr standardPrice:(NSString *)standardPrice buyOrSellArr:(NSMutableArray *)array {\n    for (int i = 0; i < array.count; ++i) {\n        NSString *buyStr = [buyTmpArr thsStringAtIndex:i];\n        if (![LJNumericStringUtils isNumber:buyStr] || ![LJNumericStringUtils isNumber:standardPrice]) {\n            [array thsReplaceObjectAtIndex:i withObject:HXUIColor.commonColor];\n        } else {\n            if ([buyStr doubleValue] > [standardPrice doubleValue]) {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.riseColor];\n            } else if ([buyStr doubleValue] < [standardPrice doubleValue]) {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.fallColor];\n            } else {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.commonColor];\n            }\n        }\n    }\n}\n\n- (void)setData:(StuffBaseModel *)model {\n    [self clearAllData];\n    if (model && ([model modelType] == StuffModelTypeText)) {\n        StuffTextModel *textModel = (StuffTextModel *)model;\n        self.contentString = textModel.text;\n        [self doneBusiness:DOBUSINESS_FAILED];\n    } else if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        \n        if (tableModel.extStringDict != nil) {\n            NSString *str = [tableModel.extStringDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_CODECODE]];\n            if(str) {\n                self.contentString = str;\n                self.stockCode = str;\n            }\n        }\n        \n        // 是否需要基准价\n        BOOL isNeedStandard = ([[LJHQStandardPriceSetManager shareInstance] isSupportStandardPriceWithMarket:[NSString stringWithFormat:@\"%@\", self.lastMarketId]] && [[LJHQStandardPriceSetManager shareInstance] currentStandardPriceTypeIsCustom]);\n        NSString *standardPrice = [[LJHQStandardPriceSetManager shareInstance] getStandardPriceWithStockCode:self.lastStockCode];\n        NSMutableArray *buyTmpArr = [NSMutableArray array];\n        NSMutableArray *sellTmpArr = [NSMutableArray array];\n        \n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStrsell1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE1]];\n            NSArray *pStrsellNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT1]];\n            NSArray *pStrsell2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE2]];\n            NSArray *pStrsellNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT2]];\n            NSArray *pStrsell3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE3]];\n            NSArray *pStrsellNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT3]];\n            NSArray *pStrsell4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE4]];\n            NSArray *pStrsellNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT4]];\n            NSArray *pStrsell5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE5]];\n            NSArray *pStrsellNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT5]];\n            NSArray *pStrbuy1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE1]];\n            NSArray *pStrbuyNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT1]];\n            NSArray *pStrbuy2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE2]];\n            NSArray *pStrbuyNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT2]];\n            NSArray *pStrbuy3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE3]];\n            NSArray *pStrbuyNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT3]];\n            NSArray *pStrbuy4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE4]];\n            NSArray *pStrbuyNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT4]];\n            NSArray *pStrbuy5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE5]];\n            NSArray *pStrbuyNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT5]];\n            NSArray *pStrsellNum6 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_NEWPRICE]];\n            NSArray *yesterdayClosePrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\", SM_HQ_PREVCLOSE]];\n            \n            if (pStrsellNum6) {\n                self.lastPrice = pStrsellNum6[0];\n            }else {\n                self.lastPrice = kSpaceStr;\n            }\n            \n            if (pStrbuy1) {\n                self.buyPrice =pStrbuy1[0];\n            }else {\n                self.buyPrice = kSpaceStr;\n            }\n            \n            if (pStrsell1) {\n                self.sellPrice = pStrsell1[0];\n            }else {\n                self.sellPrice = kSpaceStr;\n            }\n            \n            NSArray *zhangTing = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ZHANGTING]];\n            NSArray *dieTing = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_DIETING]];\n            NSString *zhangStr = [zhangTing thsStringAtIndex:0];\n            NSString *dieStr = [dieTing thsStringAtIndex:0];\n            self.limitUpPrice = zhangStr ? :kSpaceStr;\n            self.limitDownPrice = dieStr ? :kSpaceStr;\n            \n            self.yesterdayClosePrice = yesterdayClosePrice.firstObject ? :kSpaceStr;\n            \n            [self setTextData:pStrsell1 addToArray:_sellAry];\n            [self setTextData:pStrsell2 addToArray:_sellAry];\n            [self setTextData:pStrsell3 addToArray:_sellAry];\n            [self setTextData:pStrsell4 addToArray:_sellAry];\n            [self setTextData:pStrsell5 addToArray:_sellAry];\n            [self setTextData:pStrsellNum1 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum2 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum3 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum4 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum5 addToArray:_sellNumberAry];\n            [self setTextData:pStrbuy1 addToArray:_buyAry];\n            [self setTextData:pStrbuy2 addToArray:_buyAry];\n            [self setTextData:pStrbuy3 addToArray:_buyAry];\n            [self setTextData:pStrbuy4 addToArray:_buyAry];\n            [self setTextData:pStrbuy5 addToArray:_buyAry];\n            [self setTextData:pStrbuyNum1 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum2 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum3 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum4 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum5 addToArray:_buyNumberAry];\n            \n            if (isNeedStandard) {\n                buyTmpArr = [_buyAry copy];\n                sellTmpArr = [_sellAry copy];\n            }\n      ","relevantFile":"","relevantFileList":[],"filePath":"XiaDanWuDangData.mm","template":"objective-cpp","multiRes":{"hipilot":"NULL","deepseek-chat-lite":"= NULL) {","CodeQwen2.5-7B":"= NULL) {","copilot":"eturn [self"}},{"prefix":"\n#import \"XiaDanWuDangData.h\"\n#import \"EQColor.h\"\n#import \"Tools.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"QHTDisplayLink.h\"\n#import \"LJHQStandardPriceSetManager.h\"\n#import \"HXLevel2PowerManager.h\"\n#import \"HXSwiftHeader.h\"\n#import \"LJSystemGeneralContent.h\"\n\n@import LJNumberTool;\n\nstatic NSString *const kSpaceStr = @\"--\";\n\n@interface XiaDanWuDangData ()\n\n@property (strong, nonatomic) HXSocketFetcher *xiaDanFetcher;\n\n@property (strong, nonatomic) HXSocketFetcher *fenShiFetcher;\n@property (strong, nonatomic) HXSocketFetcher *allBuySellFetcher;\n/// 用于控制数据刷新频率，临时接收数据\n@property (strong, nonatomic) StuffTableModel *tempXiaDanData;\n@property (strong, nonatomic) StuffTableModel *tempWuDangData;\n\n/// 当前内存中的五档数据\n@property (nonatomic, strong) StuffBaseModel *wudangData;\n/// 当前内存中的(level2)五档数据\n@property (nonatomic, strong) StuffBaseModel *allBuySellData;\n\n@property (nonatomic, assign) BOOL isComplete;\n\n@end\n\n@implementation XiaDanWuDangData\n\n- (void)dealloc {\n    [self unRegisterObjectKey];\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    NSLog(@\"[dealloc] %s\", __func__);\n}\n\n- (instancetype)init {\n    if(self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 1211;\n        self.businessType = BUSINESS_XIADAN_WUDANG_DATA;\n        _sellAry = [[NSMutableArray alloc] init];   //卖出价格数组\n        _sellNumberAry = [[NSMutableArray alloc] init]; //卖出数量数组\n        _buyAry = [[NSMutableArray alloc] init];    //买入价格数组\n        _buyNumberAry = [[NSMutableArray alloc] init];  //买入数量数组\n        _sellColorAry = [[NSMutableArray alloc] init];  //卖出价格颜色数组\n        _sellNumberColorAry = [[NSMutableArray alloc] init];    //卖出数量颜色数组\n        _buyColorAry = [[NSMutableArray alloc] init];   //买入价格颜色数组\n        _buyNumberColorAry = [[NSMutableArray alloc] init]; //买入数量颜色数组\n        _nowPriceColorArray = [[NSMutableArray alloc] init];\n    }\n    return self;\n}\n\n- (void)reloadWuDang {\n    if (self.wudangData) {\n        [self setData:self.wudangData];\n    }\n    if (self.allBuySellData) {\n        [self setAllBuySellData:self.allBuySellData];\n    }\n}\n\n- (void)getWuDangDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    \n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        self.tempWuDangData = nil;\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VERTICAL_DETAIL_FRAMEID;\n        }\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n                               stockcode,\n                               marketCode];\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID paramsDict:requestDic pageId:(int)self.nPageID];\n        if (!self.fenShiFetcher) {\n            WEAKSELF;\n            self.fenShiFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                STRONGSELF\n                strongSelf.isRealData = data.isRealData;\n                strongSelf.wudangData = data;\n                if (!data.isRealData) {\n                    [strongSelf setData:data];\n                    return;\n                }\n                \n                strongSelf.tempWuDangData = data;\n                //非实时推送的数据直接返回，用于后续进行isRealData判断\n                if (!data.isRealData) {\n                    strongSelf.isComplete = NO;\n                    [strongSelf setData:strongSelf.tempWuDangData];\n                    return;\n                }\n                \n                if (strongSelf.isComplete) {\n                    return ;\n                }\n                \n                //防止过快刷新请求\n                strongSelf.isComplete = YES;\n                typeof(self) __weak weakSelf2 = strongSelf;\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)([QHTDisplayLink shareInstance].onceTime / 1000.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    typeof(weakSelf2) __strong strongSelf2 = weakSelf2;\n                    strongSelf2.isComplete = NO;\n                    [strongSelf2 setData:strongSelf2.tempWuDangData];\n                });\n            }];\n        } else {\n            [self.fenShiFetcher pause];\n            self.fenShiFetcher.request = request;\n        }\n        [self.fenShiFetcher start];\n    }\n}\n\n- (void)requestWithStockCode:(NSString *)stockCode\n                    marketId:(NSString *)marketId\n                successBlock:(void (^)(void))successBlock\n                 failedBlock:(void (^)(void))failedBlock {\n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    [self getWuDangDataWithStockCode:stockCode marketCode:marketId];\n}\n\n- (void)getAllBuySellDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSyst","infill":"返回数据\n    NS","suffix":"MutableDictionary *dic = [[NSMutableDictionary alloc] init];\n    [dic setObject:_sellAry forKey:@\"sellAry\"];\n    return [self getWuDangDataToView];\n}\n\n- (void)clearAllData {\n    [_sellAry removeAllObjects];   //卖出价格数组\n    [_sellNumberAry removeAllObjects]; //卖出数量数组\n    [_buyAry removeAllObjects];    //买入价格数组\n    [_buyNumberAry removeAllObjects];  //买入数量数组\n    [_sellColorAry removeAllObjects];  //卖出价格颜色数组\n    [_sellNumberColorAry removeAllObjects];    //卖出数量颜色数组\n    [_buyColorAry removeAllObjects];   //买入价格颜色数组\n    [_buyNumberColorAry removeAllObjects]; //买入数量颜色数组\n    [_nowPriceColorArray removeAllObjects];\n}\n\n- (void)changeColorWithStandardPrice:(NSMutableArray *)buyTmpArr standardPrice:(NSString *)standardPrice buyOrSellArr:(NSMutableArray *)array {\n    for (int i = 0; i < array.count; ++i) {\n        NSString *buyStr = [buyTmpArr thsStringAtIndex:i];\n        if (![LJNumericStringUtils isNumber:buyStr] || ![LJNumericStringUtils isNumber:standardPrice]) {\n            [array thsReplaceObjectAtIndex:i withObject:HXUIColor.commonColor];\n        } else {\n            if ([buyStr doubleValue] > [standardPrice doubleValue]) {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.riseColor];\n            } else if ([buyStr doubleValue] < [standardPrice doubleValue]) {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.fallColor];\n            } else {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.commonColor];\n            }\n        }\n    }\n}\n\n- (void)setData:(StuffBaseModel *)model {\n    [self clearAllData];\n    if (model && ([model modelType] == StuffModelTypeText)) {\n        StuffTextModel *textModel = (StuffTextModel *)model;\n        self.contentString = textModel.text;\n        [self doneBusiness:DOBUSINESS_FAILED];\n    } else if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        \n        if (tableModel.extStringDict != nil) {\n            NSString *str = [tableModel.extStringDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_CODECODE]];\n            if(str) {\n                self.contentString = str;\n                self.stockCode = str;\n            }\n        }\n        \n        // 是否需要基准价\n        BOOL isNeedStandard = ([[LJHQStandardPriceSetManager shareInstance] isSupportStandardPriceWithMarket:[NSString stringWithFormat:@\"%@\", self.lastMarketId]] && [[LJHQStandardPriceSetManager shareInstance] currentStandardPriceTypeIsCustom]);\n        NSString *standardPrice = [[LJHQStandardPriceSetManager shareInstance] getStandardPriceWithStockCode:self.lastStockCode];\n        NSMutableArray *buyTmpArr = [NSMutableArray array];\n        NSMutableArray *sellTmpArr = [NSMutableArray array];\n        \n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStrsell1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE1]];\n            NSArray *pStrsellNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT1]];\n            NSArray *pStrsell2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE2]];\n            NSArray *pStrsellNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT2]];\n            NSArray *pStrsell3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE3]];\n            NSArray *pStrsellNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT3]];\n            NSArray *pStrsell4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE4]];\n            NSArray *pStrsellNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT4]];\n            NSArray *pStrsell5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE5]];\n            NSArray *pStrsellNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT5]];\n            NSArray *pStrbuy1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE1]];\n            NSArray *pStrbuyNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT1]];\n            NSArray *pStrbuy2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE2]];\n            NSArray *pStrbuyNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT2]];\n            NSArray *pStrbuy3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE3]];\n            NSArray *pStrbuyNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT3]];\n            NSArray *pStrbuy4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE4]];\n            NSArray *pStrbuyNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT4]];\n            NSArray *pStrbuy5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE5]];\n            NSArray *pStrbuyNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT5]];\n            NSArray *pStrsellNum6 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_NEWPRICE]];\n            NSArray *yesterdayClosePrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\", SM_HQ_PREVCLOSE]];\n            \n            if (pStrsellNum6) {\n                self.lastPrice = pStrsellNum6[0];\n            }else {\n                self.lastPrice = kSpaceStr;\n            }\n            \n            if (pStrbuy1) {\n                self.buyPrice =pStrbuy1[0];\n            }else {\n                self.buyPrice = kSpaceStr;\n            }\n            \n            if (pStrsell1) {\n                self.sellPrice = pStrsell1[0];\n            }else {\n                self.sellPrice = kSpaceStr;\n            }\n            \n            NSArray *zhangTing = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ZHANGTING]];\n            NSArray *dieTing = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_DIETING]];\n            NSString *zhangStr = [zhangTing thsStringAtIndex:0];\n            NSString *dieStr = [dieTing thsStringAtIndex:0];\n            self.limitUpPrice = zhangStr ? :kSpaceStr;\n            self.limitDownPrice = dieStr ? :kSpaceStr;\n            \n            self.yesterdayClosePrice = yesterdayClosePrice.firstObject ? :kSpaceStr;\n            \n            [self setTextData:pStrsell1 addToArray:_sellAry];\n            [self setTextData:pStrsell2 addToArray:_sellAry];\n            [self setTextData:pStrsell3 addToArray:_sellAry];\n            [self setTextData:pStrsell4 addToArray:_sellAry];\n            [self setTextData:pStrsell5 addToArray:_sellAry];\n            [self setTextData:pStrsellNum1 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum2 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum3 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum4 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum5 addToArray:_sellNumberAry];\n            [self setTextData:pStrbuy1 addToArray:_buyAry];\n            [self setTextData:pStrbuy2 addToArray:_buyAry];\n            [self setTextData:pStrbuy3 addToArray:_buyAry];\n            [self setTextData:pStrbuy4 addToArray:_buyAry];\n            [self setTextData:pStrbuy5 addToArray:_buyAry];\n            [self setTextData:pStrbuyNum1 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum2 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum3 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum4 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum5 addToArray:_buyNumberAry];\n            \n            if (isN","relevantFile":"<file_path>HXEnvManager.mm\n}\n\n+ (CDataBaseService *)getDataBaseService {\n    if (m_databaseService == NULL) {\n        [self shareInstance];\n    }\n    return m_databaseService;\n}\n\n+ (CSettingVariablesMgr *)getSettingVarMgr {\n    if (m_settingVarMgr == NULL) {\n        [self shareInstance];\n    }\n    return m_settingVarMgr;\n}\n\n#pragma mark - Private Methods\n- (void)initConfig {\n    self.appWindow = [[[EQUIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds] initEQWindow];\n    self.appWindow.backgroundColor = [UIColor blackColor];\n    self.curveSettingManager = [[CurveSettingManager alloc] init];\n    // 注册系统通知事件\n    [self.appWindow signNotify:YES];\n    g_bUpdateVersion = NO;\n    [self initGlobalConfig];\n    [HXEnvConfigManager shareInstance];\n    [self idleTimerDisabled];\n    [[LJDeviceManager tempInstance] updateDeviceInfo];\n    [HXOsInfo sharedInstance].didGetNetWorkState = ^(int isHasNetWork) {\n        g_bIsHasNetWork = isHasNetWork;\n    };\n    if (g_bUpdateVersion) {\n        g_bUpdateVersion = NO;\n    }\n\n    m_databaseService = new CDataBaseService();\n    m_settingVarMgr = new CSettingVariablesMgr();\n}\n\n- (void)initGlobalConfig {\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *version = [[[NSBundle mainBundle] infoDictionary] objectForKey:kCFBundleShortVersionString];\n    if (version) {\n        NSString *strOldVer = [[NSUserDefaults standardUserDefaults] objectForKey:kHXFuturesVersionKey]; // 取出之前的版本号\n        // 新安装、卸载安装、覆盖安装\n        if (!strOldVer || ![strOldVer isEqualToString:version]) {\n            g_bUpdateVersion = YES; // 覆盖或者更新版本了\n            [[NSUserDefaults standardUserDefaults] setObject:version forKey:kHXFuturesVersionKey];\n        }\n    }\n\n    if (g_strDocumentPath == nil) {\n        NSFileManager *fileManager = [NSFileManager defaultManager];\n        BOOL idDir = YES;\n        NSString *dirName = [NSString stringWithFormat:@\"%@/%@\", documentsDirectory, kEQHeXin];\n        if ([fileManager fileExistsAtPath:dirName isDirectory:&idDir]) {\n            g_strDocumentPath = dirName;\n        } else {\n            // 创建一个\n\n XiaDanWuDangData.m\n HXFutures\n\n Created by qianlei on 16/6/14.\n Copyright © 2016年 hexin. All rights reserved.","relevantFileList":[],"filePath":"XiaDanWuDangData.mm","template":"objective-cpp","multiRes":{"hipilot":"emGeneralContent isConnectionAvailable]) {\n        self.tempXiaDanData = nil;\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:stockcode + \"\\r\\n\" + marketcode + \"\\r\\n\"};\n        HXSocket","deepseek-chat-lite":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求","CodeQwen2.5-7B":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求","copilot":"返回数据\n    NS"}},{"prefix":"\n#import \"XiaDanWuDangData.h\"\n#import \"EQColor.h\"\n#import \"Tools.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"QHTDisplayLink.h\"\n#import \"LJHQStandardPriceSetManager.h\"\n#import \"HXLevel2PowerManager.h\"\n#import \"HXSwiftHeader.h\"\n#import \"LJSystemGeneralContent.h\"\n\n@import LJNumberTool;\n\nstatic NSString *const kSpaceStr = @\"--\";\n\n@interface XiaDanWuDangData ()\n\n@property (strong, nonatomic) HXSocketFetcher *xiaDanFetcher;\n\n@property (strong, nonatomic) HXSocketFetcher *fenShiFetcher;\n@property (strong, nonatomic) HXSocketFetcher *allBuySellFetcher;\n/// 用于控制数据刷新频率，临时接收数据\n@property (strong, nonatomic) StuffTableModel *tempXiaDanData;\n@property (strong, nonatomic) StuffTableModel *tempWuDangData;\n\n/// 当前内存中的五档数据\n@property (nonatomic, strong) StuffBaseModel *wudangData;\n/// 当前内存中的(level2)五档数据\n@property (nonatomic, strong) StuffBaseModel *allBuySellData;\n\n@property (nonatomic, assign) BOOL isComplete;\n\n@end\n\n@implementation XiaDanWuDangData\n\n- (void)dealloc {\n    [self unRegisterObjectKey];\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    NSLog(@\"[dealloc] %s\", __func__);\n}\n\n- (instancetype)init {\n    if(self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 1211;\n        self.businessType = BUSINESS_XIADAN_WUDANG_DATA;\n        _sellAry = [[NSMutableArray alloc] init];   //卖出价格数组\n        _sellNumberAry = [[NSMutableArray alloc] init]; //卖出数量数组\n        _buyAry = [[NSMutableArray alloc] init];    //买入价格数组\n        _buyNumberAry = [[NSMutableArray alloc] init];  //买入数量数组\n        _sellColorAry = [[NSMutableArray alloc] init];  //卖出价格颜色数组\n        _sellNumberColorAry = [[NSMutableArray alloc] init];    //卖出数量颜色数组\n        _buyColorAry = [[NSMutableArray alloc] init];   //买入价格颜色数组\n        _buyNumberColorAry = [[NSMutableArray alloc] init]; //买入数量颜色数组\n        _nowPriceColorArray = [[NSMutableArray alloc] init];\n    }\n    return self;\n}\n\n- (void)reloadWuDang {\n    if (self.wudangData) {\n        [self setData:self.wudangData];\n    }\n    if (self.allBuySellData) {\n        [self setAllBuySellData:self.allBuySellData];\n    }\n}\n\n- (void)getWuDangDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    \n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        self.tempWuDangData = nil;\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VERTICAL_DETAIL_FRAMEID;\n        }\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n                               stockcode,\n                               marketCode];\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID paramsDict:requestDic pageId:(int)self.nPageID];\n        if (!self.fenShiFetcher) {\n            WEAKSELF;\n            self.fenShiFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                STRONGSELF\n                strongSelf.isRealData = data.isRealData;\n                strongSelf.wudangData = data;\n                if (!data.isRealData) {\n                    [strongSelf setData:data];\n                    return;\n                }\n                \n                strongSelf.tempWuDangData = data;\n                //非实时推送的数据直接返回，用于后续进行isRealData判断\n                if (!data.isRealData) {\n                    strongSelf.isComplete = NO;\n                    [strongSelf setData:strongSelf.tempWuDangData];\n                    return;\n                }\n                \n                if (strongSelf.isComplete) {\n                    return ;\n                }\n                \n                //防止过快刷新请求\n                strongSelf.isComplete = YES;\n                typeof(self) __weak weakSelf2 = strongSelf;\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)([QHTDisplayLink shareInstance].onceTime / 1000.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    typeof(weakSelf2) __strong strongSelf2 = weakSelf2;\n                    strongSelf2.isComplete = NO;\n                    [strongSelf2 setData:strongSelf2.tempWuDangData];\n                });\n            }];\n        } else {\n            [self.fenShiFetcher pause];\n            self.fenShiFetcher.request = request;\n        }\n        [self.fenShiFetcher start];\n    }\n}\n\n- (void)requestWithStockCode:(NSString *)stockCode\n                    marketId:(NSString *)marketId\n                successBlock:(void (^)(void))successBlock\n                 failedBlock:(void (^)(void))failedBlock {\n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    [self getWuDangDataWithStockCode:stockCode marketCode:marketId];\n}\n\n- (void)getAllBuySellDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSyst","infill":"NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n   ","suffix":" [dic setObject:_sellAry forKey:@\"sellAry\"];\n    return [self getWuDangDataToView];\n}\n\n- (void)clearAllData {\n    [_sellAry removeAllObjects];   //卖出价格数组\n    [_sellNumberAry removeAllObjects]; //卖出数量数组\n    [_buyAry removeAllObjects];    //买入价格数组\n    [_buyNumberAry removeAllObjects];  //买入数量数组\n    [_sellColorAry removeAllObjects];  //卖出价格颜色数组\n    [_sellNumberColorAry removeAllObjects];    //卖出数量颜色数组\n    [_buyColorAry removeAllObjects];   //买入价格颜色数组\n    [_buyNumberColorAry removeAllObjects]; //买入数量颜色数组\n    [_nowPriceColorArray removeAllObjects];\n}\n\n- (void)changeColorWithStandardPrice:(NSMutableArray *)buyTmpArr standardPrice:(NSString *)standardPrice buyOrSellArr:(NSMutableArray *)array {\n    for (int i = 0; i < array.count; ++i) {\n        NSString *buyStr = [buyTmpArr thsStringAtIndex:i];\n        if (![LJNumericStringUtils isNumber:buyStr] || ![LJNumericStringUtils isNumber:standardPrice]) {\n            [array thsReplaceObjectAtIndex:i withObject:HXUIColor.commonColor];\n        } else {\n            if ([buyStr doubleValue] > [standardPrice doubleValue]) {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.riseColor];\n            } else if ([buyStr doubleValue] < [standardPrice doubleValue]) {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.fallColor];\n            } else {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.commonColor];\n            }\n        }\n    }\n}\n\n- (void)setData:(StuffBaseModel *)model {\n    [self clearAllData];\n    if (model && ([model modelType] == StuffModelTypeText)) {\n        StuffTextModel *textModel = (StuffTextModel *)model;\n        self.contentString = textModel.text;\n        [self doneBusiness:DOBUSINESS_FAILED];\n    } else if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        \n        if (tableModel.extStringDict != nil) {\n            NSString *str = [tableModel.extStringDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_CODECODE]];\n            if(str) {\n                self.contentString = str;\n                self.stockCode = str;\n            }\n        }\n        \n        // 是否需要基准价\n        BOOL isNeedStandard = ([[LJHQStandardPriceSetManager shareInstance] isSupportStandardPriceWithMarket:[NSString stringWithFormat:@\"%@\", self.lastMarketId]] && [[LJHQStandardPriceSetManager shareInstance] currentStandardPriceTypeIsCustom]);\n        NSString *standardPrice = [[LJHQStandardPriceSetManager shareInstance] getStandardPriceWithStockCode:self.lastStockCode];\n        NSMutableArray *buyTmpArr = [NSMutableArray array];\n        NSMutableArray *sellTmpArr = [NSMutableArray array];\n        \n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStrsell1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE1]];\n            NSArray *pStrsellNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT1]];\n            NSArray *pStrsell2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE2]];\n            NSArray *pStrsellNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT2]];\n            NSArray *pStrsell3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE3]];\n            NSArray *pStrsellNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT3]];\n            NSArray *pStrsell4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE4]];\n            NSArray *pStrsellNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT4]];\n            NSArray *pStrsell5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE5]];\n            NSArray *pStrsellNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT5]];\n            NSArray *pStrbuy1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE1]];\n            NSArray *pStrbuyNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT1]];\n            NSArray *pStrbuy2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE2]];\n            NSArray *pStrbuyNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT2]];\n            NSArray *pStrbuy3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE3]];\n            NSArray *pStrbuyNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT3]];\n            NSArray *pStrbuy4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE4]];\n            NSArray *pStrbuyNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT4]];\n            NSArray *pStrbuy5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE5]];\n            NSArray *pStrbuyNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT5]];\n            NSArray *pStrsellNum6 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_NEWPRICE]];\n            NSArray *yesterdayClosePrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\", SM_HQ_PREVCLOSE]];\n            \n            if (pStrsellNum6) {\n                self.lastPrice = pStrsellNum6[0];\n            }else {\n                self.lastPrice = kSpaceStr;\n            }\n            \n            if (pStrbuy1) {\n                self.buyPrice =pStrbuy1[0];\n            }else {\n                self.buyPrice = kSpaceStr;\n            }\n            \n            if (pStrsell1) {\n                self.sellPrice = pStrsell1[0];\n            }else {\n                self.sellPrice = kSpaceStr;\n            }\n            \n            NSArray *zhangTing = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ZHANGTING]];\n            NSArray *dieTing = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_DIETING]];\n            NSString *zhangStr = [zhangTing thsStringAtIndex:0];\n            NSString *dieStr = [dieTing thsStringAtIndex:0];\n            self.limitUpPrice = zhangStr ? :kSpaceStr;\n            self.limitDownPrice = dieStr ? :kSpaceStr;\n            \n            self.yesterdayClosePrice = yesterdayClosePrice.firstObject ? :kSpaceStr;\n            \n            [self setTextData:pStrsell1 addToArray:_sellAry];\n            [self setTextData:pStrsell2 addToArray:_sellAry];\n            [self setTextData:pStrsell3 addToArray:_sellAry];\n            [self setTextData:pStrsell4 addToArray:_sellAry];\n            [self setTextData:pStrsell5 addToArray:_sellAry];\n            [self setTextData:pStrsellNum1 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum2 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum3 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum4 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum5 addToArray:_sellNumberAry];\n            [self setTextData:pStrbuy1 addToArray:_buyAry];\n            [self setTextData:pStrbuy2 addToArray:_buyAry];\n            [self setTextData:pStrbuy3 addToArray:_buyAry];\n            [self setTextData:pStrbuy4 addToArray:_buyAry];\n            [self setTextData:pStrbuy5 addToArray:_buyAry];\n            [self setTextData:pStrbuyNum1 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum2 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum3 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum4 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum5 addToArray:_buyNumberAry];\n            \n            if (isNeedStandard) {\n                buyTmpArr = [_buyAry copy];\n    ","relevantFile":"<file_path>HXEnvManager.mm\n}\n\n+ (CDataBaseService *)getDataBaseService {\n    if (m_databaseService == NULL) {\n        [self shareInstance];\n    }\n    return m_databaseService;\n}\n\n+ (CSettingVariablesMgr *)getSettingVarMgr {\n    if (m_settingVarMgr == NULL) {\n        [self shareInstance];\n    }\n    return m_settingVarMgr;\n}\n\n#pragma mark - Private Methods\n- (void)initConfig {\n    self.appWindow = [[[EQUIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds] initEQWindow];\n    self.appWindow.backgroundColor = [UIColor blackColor];\n    self.curveSettingManager = [[CurveSettingManager alloc] init];\n    // 注册系统通知事件\n    [self.appWindow signNotify:YES];\n    g_bUpdateVersion = NO;\n    [self initGlobalConfig];\n    [HXEnvConfigManager shareInstance];\n    [self idleTimerDisabled];\n    [[LJDeviceManager tempInstance] updateDeviceInfo];\n    [HXOsInfo sharedInstance].didGetNetWorkState = ^(int isHasNetWork) {\n        g_bIsHasNetWork = isHasNetWork;\n    };\n    if (g_bUpdateVersion) {\n        g_bUpdateVersion = NO;\n    }\n\n    m_databaseService = new CDataBaseService();\n    m_settingVarMgr = new CSettingVariablesMgr();\n}\n\n- (void)initGlobalConfig {\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *version = [[[NSBundle mainBundle] infoDictionary] objectForKey:kCFBundleShortVersionString];\n    if (version) {\n        NSString *strOldVer = [[NSUserDefaults standardUserDefaults] objectForKey:kHXFuturesVersionKey]; // 取出之前的版本号\n        // 新安装、卸载安装、覆盖安装\n        if (!strOldVer || ![strOldVer isEqualToString:version]) {\n            g_bUpdateVersion = YES; // 覆盖或者更新版本了\n            [[NSUserDefaults standardUserDefaults] setObject:version forKey:kHXFuturesVersionKey];\n        }\n    }\n\n    if (g_strDocumentPath == nil) {\n        NSFileManager *fileManager = [NSFileManager defaultManager];\n        BOOL idDir = YES;\n        NSString *dirName = [NSString stringWithFormat:@\"%@/%@\", documentsDirectory, kEQHeXin];\n        if ([fileManager fileExistsAtPath:dirName isDirectory:&idDir]) {\n            g_strDocumentPath = dirName;\n        } else {\n            // 创建一个\n\n XiaDanWuDangData.m\n HXFutures\n\n Created by qianlei on 16/6/14.\n Copyright © 2016年 hexin. All rights reserved.","relevantFileList":[],"filePath":"XiaDanWuDangData.mm","template":"objective-cpp","multiRes":{"hipilot":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        NSDictionary *dic =[NSDictionary dictionaryWithObject:_buyAry forKey:@\"buyAry\"];\n       ","deepseek-chat-lite":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求","CodeQwen2.5-7B":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求","copilot":"NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n   "}},{"prefix":"\n#import \"XiaDanWuDangData.h\"\n#import \"EQColor.h\"\n#import \"Tools.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"QHTDisplayLink.h\"\n#import \"LJHQStandardPriceSetManager.h\"\n#import \"HXLevel2PowerManager.h\"\n#import \"HXSwiftHeader.h\"\n#import \"LJSystemGeneralContent.h\"\n\n@import LJNumberTool;\n\nstatic NSString *const kSpaceStr = @\"--\";\n\n@interface XiaDanWuDangData ()\n\n@property (strong, nonatomic) HXSocketFetcher *xiaDanFetcher;\n\n@property (strong, nonatomic) HXSocketFetcher *fenShiFetcher;\n@property (strong, nonatomic) HXSocketFetcher *allBuySellFetcher;\n/// 用于控制数据刷新频率，临时接收数据\n@property (strong, nonatomic) StuffTableModel *tempXiaDanData;\n@property (strong, nonatomic) StuffTableModel *tempWuDangData;\n\n/// 当前内存中的五档数据\n@property (nonatomic, strong) StuffBaseModel *wudangData;\n/// 当前内存中的(level2)五档数据\n@property (nonatomic, strong) StuffBaseModel *allBuySellData;\n\n@property (nonatomic, assign) BOOL isComplete;\n\n@end\n\n@implementation XiaDanWuDangData\n\n- (void)dealloc {\n    [self unRegisterObjectKey];\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    NSLog(@\"[dealloc] %s\", __func__);\n}\n\n- (instancetype)init {\n    if(self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 1211;\n        self.businessType = BUSINESS_XIADAN_WUDANG_DATA;\n        _sellAry = [[NSMutableArray alloc] init];   //卖出价格数组\n        _sellNumberAry = [[NSMutableArray alloc] init]; //卖出数量数组\n        _buyAry = [[NSMutableArray alloc] init];    //买入价格数组\n        _buyNumberAry = [[NSMutableArray alloc] init];  //买入数量数组\n        _sellColorAry = [[NSMutableArray alloc] init];  //卖出价格颜色数组\n        _sellNumberColorAry = [[NSMutableArray alloc] init];    //卖出数量颜色数组\n        _buyColorAry = [[NSMutableArray alloc] init];   //买入价格颜色数组\n        _buyNumberColorAry = [[NSMutableArray alloc] init]; //买入数量颜色数组\n        _nowPriceColorArray = [[NSMutableArray alloc] init];\n    }\n    return self;\n}\n\n- (void)reloadWuDang {\n    if (self.wudangData) {\n        [self setData:self.wudangData];\n    }\n    if (self.allBuySellData) {\n        [self setAllBuySellData:self.allBuySellData];\n    }\n}\n\n- (void)getWuDangDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    \n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        self.tempWuDangData = nil;\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VERTICAL_DETAIL_FRAMEID;\n        }\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n                               stockcode,\n                               marketCode];\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID paramsDict:requestDic pageId:(int)self.nPageID];\n        if (!self.fenShiFetcher) {\n            WEAKSELF;\n            self.fenShiFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                STRONGSELF\n                strongSelf.isRealData = data.isRealData;\n                strongSelf.wudangData = data;\n                if (!data.isRealData) {\n                    [strongSelf setData:data];\n                    return;\n                }\n                \n                strongSelf.tempWuDangData = data;\n                //非实时推送的数据直接返回，用于后续进行isRealData判断\n                if (!data.isRealData) {\n                    strongSelf.isComplete = NO;\n                    [strongSelf setData:strongSelf.tempWuDangData];\n                    return;\n                }\n                \n                if (strongSelf.isComplete) {\n                    return ;\n                }\n                \n                //防止过快刷新请求\n                strongSelf.isComplete = YES;\n                typeof(self) __weak weakSelf2 = strongSelf;\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)([QHTDisplayLink shareInstance].onceTime / 1000.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    typeof(weakSelf2) __strong strongSelf2 = weakSelf2;\n                    strongSelf2.isComplete = NO;\n                    [strongSelf2 setData:strongSelf2.tempWuDangData];\n                });\n            }];\n        } else {\n            [self.fenShiFetcher pause];\n            self.fenShiFetcher.request = request;\n        }\n        [self.fenShiFetcher start];\n    }\n}\n\n- (void)requestWithStockCode:(NSString *)stockCode\n                    marketId:(NSString *)marketId\n                successBlock:(void (^)(void))successBlock\n                 failedBlock:(void (^)(void))failedBlock {\n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    [self getWuDangDataWithStockCode:stockCode marketCode:marketId];\n}\n\n- (void)getAllBuySellDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSyst","infill":"[dic setObject:_sellAry forKey:@\"sellAry\"];\n   ","suffix":" return [self getWuDangDataToView];\n}\n\n- (void)clearAllData {\n    [_sellAry removeAllObjects];   //卖出价格数组\n    [_sellNumberAry removeAllObjects]; //卖出数量数组\n    [_buyAry removeAllObjects];    //买入价格数组\n    [_buyNumberAry removeAllObjects];  //买入数量数组\n    [_sellColorAry removeAllObjects];  //卖出价格颜色数组\n    [_sellNumberColorAry removeAllObjects];    //卖出数量颜色数组\n    [_buyColorAry removeAllObjects];   //买入价格颜色数组\n    [_buyNumberColorAry removeAllObjects]; //买入数量颜色数组\n    [_nowPriceColorArray removeAllObjects];\n}\n\n- (void)changeColorWithStandardPrice:(NSMutableArray *)buyTmpArr standardPrice:(NSString *)standardPrice buyOrSellArr:(NSMutableArray *)array {\n    for (int i = 0; i < array.count; ++i) {\n        NSString *buyStr = [buyTmpArr thsStringAtIndex:i];\n        if (![LJNumericStringUtils isNumber:buyStr] || ![LJNumericStringUtils isNumber:standardPrice]) {\n            [array thsReplaceObjectAtIndex:i withObject:HXUIColor.commonColor];\n        } else {\n            if ([buyStr doubleValue] > [standardPrice doubleValue]) {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.riseColor];\n            } else if ([buyStr doubleValue] < [standardPrice doubleValue]) {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.fallColor];\n            } else {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.commonColor];\n            }\n        }\n    }\n}\n\n- (void)setData:(StuffBaseModel *)model {\n    [self clearAllData];\n    if (model && ([model modelType] == StuffModelTypeText)) {\n        StuffTextModel *textModel = (StuffTextModel *)model;\n        self.contentString = textModel.text;\n        [self doneBusiness:DOBUSINESS_FAILED];\n    } else if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        \n        if (tableModel.extStringDict != nil) {\n            NSString *str = [tableModel.extStringDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_CODECODE]];\n            if(str) {\n                self.contentString = str;\n                self.stockCode = str;\n            }\n        }\n        \n        // 是否需要基准价\n        BOOL isNeedStandard = ([[LJHQStandardPriceSetManager shareInstance] isSupportStandardPriceWithMarket:[NSString stringWithFormat:@\"%@\", self.lastMarketId]] && [[LJHQStandardPriceSetManager shareInstance] currentStandardPriceTypeIsCustom]);\n        NSString *standardPrice = [[LJHQStandardPriceSetManager shareInstance] getStandardPriceWithStockCode:self.lastStockCode];\n        NSMutableArray *buyTmpArr = [NSMutableArray array];\n        NSMutableArray *sellTmpArr = [NSMutableArray array];\n        \n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStrsell1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE1]];\n            NSArray *pStrsellNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT1]];\n            NSArray *pStrsell2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE2]];\n            NSArray *pStrsellNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT2]];\n            NSArray *pStrsell3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE3]];\n            NSArray *pStrsellNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT3]];\n            NSArray *pStrsell4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE4]];\n            NSArray *pStrsellNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT4]];\n            NSArray *pStrsell5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE5]];\n            NSArray *pStrsellNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT5]];\n            NSArray *pStrbuy1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE1]];\n            NSArray *pStrbuyNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT1]];\n            NSArray *pStrbuy2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE2]];\n            NSArray *pStrbuyNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT2]];\n            NSArray *pStrbuy3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE3]];\n            NSArray *pStrbuyNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT3]];\n            NSArray *pStrbuy4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE4]];\n            NSArray *pStrbuyNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT4]];\n            NSArray *pStrbuy5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE5]];\n            NSArray *pStrbuyNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT5]];\n            NSArray *pStrsellNum6 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_NEWPRICE]];\n            NSArray *yesterdayClosePrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\", SM_HQ_PREVCLOSE]];\n            \n            if (pStrsellNum6) {\n                self.lastPrice = pStrsellNum6[0];\n            }else {\n                self.lastPrice = kSpaceStr;\n            }\n            \n            if (pStrbuy1) {\n                self.buyPrice =pStrbuy1[0];\n            }else {\n                self.buyPrice = kSpaceStr;\n            }\n            \n            if (pStrsell1) {\n                self.sellPrice = pStrsell1[0];\n            }else {\n                self.sellPrice = kSpaceStr;\n            }\n            \n            NSArray *zhangTing = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ZHANGTING]];\n            NSArray *dieTing = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_DIETING]];\n            NSString *zhangStr = [zhangTing thsStringAtIndex:0];\n            NSString *dieStr = [dieTing thsStringAtIndex:0];\n            self.limitUpPrice = zhangStr ? :kSpaceStr;\n            self.limitDownPrice = dieStr ? :kSpaceStr;\n            \n            self.yesterdayClosePrice = yesterdayClosePrice.firstObject ? :kSpaceStr;\n            \n            [self setTextData:pStrsell1 addToArray:_sellAry];\n            [self setTextData:pStrsell2 addToArray:_sellAry];\n            [self setTextData:pStrsell3 addToArray:_sellAry];\n            [self setTextData:pStrsell4 addToArray:_sellAry];\n            [self setTextData:pStrsell5 addToArray:_sellAry];\n            [self setTextData:pStrsellNum1 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum2 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum3 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum4 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum5 addToArray:_sellNumberAry];\n            [self setTextData:pStrbuy1 addToArray:_buyAry];\n            [self setTextData:pStrbuy2 addToArray:_buyAry];\n            [self setTextData:pStrbuy3 addToArray:_buyAry];\n            [self setTextData:pStrbuy4 addToArray:_buyAry];\n            [self setTextData:pStrbuy5 addToArray:_buyAry];\n            [self setTextData:pStrbuyNum1 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum2 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum3 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum4 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum5 addToArray:_buyNumberAry];\n            \n            if (isNeedStandard) {\n                buyTmpArr = [_buyAry copy];\n                sellTmpArr = [_sellAry copy];\n        ","relevantFile":"<file_path>HXEnvManager.mm\n}\n\n+ (CDataBaseService *)getDataBaseService {\n    if (m_databaseService == NULL) {\n        [self shareInstance];\n    }\n    return m_databaseService;\n}\n\n+ (CSettingVariablesMgr *)getSettingVarMgr {\n    if (m_settingVarMgr == NULL) {\n        [self shareInstance];\n    }\n    return m_settingVarMgr;\n}\n\n#pragma mark - Private Methods\n- (void)initConfig {\n    self.appWindow = [[[EQUIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds] initEQWindow];\n    self.appWindow.backgroundColor = [UIColor blackColor];\n    self.curveSettingManager = [[CurveSettingManager alloc] init];\n    // 注册系统通知事件\n    [self.appWindow signNotify:YES];\n    g_bUpdateVersion = NO;\n    [self initGlobalConfig];\n    [HXEnvConfigManager shareInstance];\n    [self idleTimerDisabled];\n    [[LJDeviceManager tempInstance] updateDeviceInfo];\n    [HXOsInfo sharedInstance].didGetNetWorkState = ^(int isHasNetWork) {\n        g_bIsHasNetWork = isHasNetWork;\n    };\n    if (g_bUpdateVersion) {\n        g_bUpdateVersion = NO;\n    }\n\n    m_databaseService = new CDataBaseService();\n    m_settingVarMgr = new CSettingVariablesMgr();\n}\n\n- (void)initGlobalConfig {\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *version = [[[NSBundle mainBundle] infoDictionary] objectForKey:kCFBundleShortVersionString];\n    if (version) {\n        NSString *strOldVer = [[NSUserDefaults standardUserDefaults] objectForKey:kHXFuturesVersionKey]; // 取出之前的版本号\n        // 新安装、卸载安装、覆盖安装\n        if (!strOldVer || ![strOldVer isEqualToString:version]) {\n            g_bUpdateVersion = YES; // 覆盖或者更新版本了\n            [[NSUserDefaults standardUserDefaults] setObject:version forKey:kHXFuturesVersionKey];\n        }\n    }\n\n    if (g_strDocumentPath == nil) {\n        NSFileManager *fileManager = [NSFileManager defaultManager];\n        BOOL idDir = YES;\n        NSString *dirName = [NSString stringWithFormat:@\"%@/%@\", documentsDirectory, kEQHeXin];\n        if ([fileManager fileExistsAtPath:dirName isDirectory:&idDir]) {\n            g_strDocumentPath = dirName;\n        } else {\n            // 创建一个\n\n XiaDanWuDangData.m\n HXFutures\n\n Created by qianlei on 16/6/14.\n Copyright © 2016年 hexin. All rights reserved.","relevantFileList":[],"filePath":"XiaDanWuDangData.mm","template":"objective-cpp","multiRes":{"hipilot":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        [self getWuDangDataWithStockCode:stockcode marketCode:marketCode];\n    } else {\n        self.isRealData = YES;\n        self.isComplete = NO;\n","deepseek-chat-lite":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求","CodeQwen2.5-7B":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求","copilot":"[dic setObject:_sellAry forKey:@\"sellAry\"];\n   "}},{"prefix":"\n#import \"XiaDanWuDangData.h\"\n#import \"EQColor.h\"\n#import \"Tools.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"QHTDisplayLink.h\"\n#import \"LJHQStandardPriceSetManager.h\"\n#import \"HXLevel2PowerManager.h\"\n#import \"HXSwiftHeader.h\"\n#import \"LJSystemGeneralContent.h\"\n\n@import LJNumberTool;\n\nstatic NSString *const kSpaceStr = @\"--\";\n\n@interface XiaDanWuDangData ()\n\n@property (strong, nonatomic) HXSocketFetcher *xiaDanFetcher;\n\n@property (strong, nonatomic) HXSocketFetcher *fenShiFetcher;\n@property (strong, nonatomic) HXSocketFetcher *allBuySellFetcher;\n/// 用于控制数据刷新频率，临时接收数据\n@property (strong, nonatomic) StuffTableModel *tempXiaDanData;\n@property (strong, nonatomic) StuffTableModel *tempWuDangData;\n\n/// 当前内存中的五档数据\n@property (nonatomic, strong) StuffBaseModel *wudangData;\n/// 当前内存中的(level2)五档数据\n@property (nonatomic, strong) StuffBaseModel *allBuySellData;\n\n@property (nonatomic, assign) BOOL isComplete;\n\n@end\n\n@implementation XiaDanWuDangData\n\n- (void)dealloc {\n    [self unRegisterObjectKey];\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    NSLog(@\"[dealloc] %s\", __func__);\n}\n\n- (instancetype)init {\n    if(self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 1211;\n        self.businessType = BUSINESS_XIADAN_WUDANG_DATA;\n        _sellAry = [[NSMutableArray alloc] init];   //卖出价格数组\n        _sellNumberAry = [[NSMutableArray alloc] init]; //卖出数量数组\n        _buyAry = [[NSMutableArray alloc] init];    //买入价格数组\n        _buyNumberAry = [[NSMutableArray alloc] init];  //买入数量数组\n        _sellColorAry = [[NSMutableArray alloc] init];  //卖出价格颜色数组\n        _sellNumberColorAry = [[NSMutableArray alloc] init];    //卖出数量颜色数组\n        _buyColorAry = [[NSMutableArray alloc] init];   //买入价格颜色数组\n        _buyNumberColorAry = [[NSMutableArray alloc] init]; //买入数量颜色数组\n        _nowPriceColorArray = [[NSMutableArray alloc] init];\n    }\n    return self;\n}\n\n- (void)reloadWuDang {\n    if (self.wudangData) {\n        [self setData:self.wudangData];\n    }\n    if (self.allBuySellData) {\n        [self setAllBuySellData:self.allBuySellData];\n    }\n}\n\n- (void)getWuDangDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    \n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        self.tempWuDangData = nil;\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VERTICAL_DETAIL_FRAMEID;\n        }\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n                               stockcode,\n                               marketCode];\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID paramsDict:requestDic pageId:(int)self.nPageID];\n        if (!self.fenShiFetcher) {\n            WEAKSELF;\n            self.fenShiFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                STRONGSELF\n                strongSelf.isRealData = data.isRealData;\n                strongSelf.wudangData = data;\n                if (!data.isRealData) {\n                    [strongSelf setData:data];\n                    return;\n                }\n                \n                strongSelf.tempWuDangData = data;\n                //非实时推送的数据直接返回，用于后续进行isRealData判断\n                if (!data.isRealData) {\n                    strongSelf.isComplete = NO;\n                    [strongSelf setData:strongSelf.tempWuDangData];\n                    return;\n                }\n                \n                if (strongSelf.isComplete) {\n                    return ;\n                }\n                \n                //防止过快刷新请求\n                strongSelf.isComplete = YES;\n                typeof(self) __weak weakSelf2 = strongSelf;\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)([QHTDisplayLink shareInstance].onceTime / 1000.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    typeof(weakSelf2) __strong strongSelf2 = weakSelf2;\n                    strongSelf2.isComplete = NO;\n                    [strongSelf2 setData:strongSelf2.tempWuDangData];\n                });\n            }];\n        } else {\n            [self.fenShiFetcher pause];\n            self.fenShiFetcher.request = request;\n        }\n        [self.fenShiFetcher start];\n    }\n}\n\n- (void)requestWithStockCode:(NSString *)stockCode\n                    marketId:(NSString *)marketId\n                successBlock:(void (^)(void))successBlock\n                 failedBlock:(void (^)(void))failedBlock {\n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    [self getWuDangDataWithStockCode:stockCode marketCode:marketId];\n}\n\n- (void)getAllBuySellDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSyst","infill":"_sellNumberAry removeAllObjects]; //卖出数量数组\n    [_buyAry rem","suffix":"oveAllObjects];    //买入价格数组\n    [_buyNumberAry removeAllObjects];  //买入数量数组\n    [_sellColorAry removeAllObjects];  //卖出价格颜色数组\n    [_sellNumberColorAry removeAllObjects];    //卖出数量颜色数组\n    [_buyColorAry removeAllObjects];   //买入价格颜色数组\n    [_buyNumberColorAry removeAllObjects]; //买入数量颜色数组\n    [_nowPriceColorArray removeAllObjects];\n}\n\n- (void)changeColorWithStandardPrice:(NSMutableArray *)buyTmpArr standardPrice:(NSString *)standardPrice buyOrSellArr:(NSMutableArray *)array {\n    for (int i = 0; i < array.count; ++i) {\n        NSString *buyStr = [buyTmpArr thsStringAtIndex:i];\n        if (![LJNumericStringUtils isNumber:buyStr] || ![LJNumericStringUtils isNumber:standardPrice]) {\n            [array thsReplaceObjectAtIndex:i withObject:HXUIColor.commonColor];\n        } else {\n            if ([buyStr doubleValue] > [standardPrice doubleValue]) {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.riseColor];\n            } else if ([buyStr doubleValue] < [standardPrice doubleValue]) {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.fallColor];\n            } else {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.commonColor];\n            }\n        }\n    }\n}\n\n- (void)setData:(StuffBaseModel *)model {\n    [self clearAllData];\n    if (model && ([model modelType] == StuffModelTypeText)) {\n        StuffTextModel *textModel = (StuffTextModel *)model;\n        self.contentString = textModel.text;\n        [self doneBusiness:DOBUSINESS_FAILED];\n    } else if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        \n        if (tableModel.extStringDict != nil) {\n            NSString *str = [tableModel.extStringDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_CODECODE]];\n            if(str) {\n                self.contentString = str;\n                self.stockCode = str;\n            }\n        }\n        \n        // 是否需要基准价\n        BOOL isNeedStandard = ([[LJHQStandardPriceSetManager shareInstance] isSupportStandardPriceWithMarket:[NSString stringWithFormat:@\"%@\", self.lastMarketId]] && [[LJHQStandardPriceSetManager shareInstance] currentStandardPriceTypeIsCustom]);\n        NSString *standardPrice = [[LJHQStandardPriceSetManager shareInstance] getStandardPriceWithStockCode:self.lastStockCode];\n        NSMutableArray *buyTmpArr = [NSMutableArray array];\n        NSMutableArray *sellTmpArr = [NSMutableArray array];\n        \n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStrsell1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE1]];\n            NSArray *pStrsellNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT1]];\n            NSArray *pStrsell2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE2]];\n            NSArray *pStrsellNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT2]];\n            NSArray *pStrsell3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE3]];\n            NSArray *pStrsellNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT3]];\n            NSArray *pStrsell4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE4]];\n            NSArray *pStrsellNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT4]];\n            NSArray *pStrsell5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE5]];\n            NSArray *pStrsellNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT5]];\n            NSArray *pStrbuy1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE1]];\n            NSArray *pStrbuyNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT1]];\n            NSArray *pStrbuy2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE2]];\n            NSArray *pStrbuyNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT2]];\n            NSArray *pStrbuy3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE3]];\n            NSArray *pStrbuyNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT3]];\n            NSArray *pStrbuy4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE4]];\n            NSArray *pStrbuyNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT4]];\n            NSArray *pStrbuy5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE5]];\n            NSArray *pStrbuyNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT5]];\n            NSArray *pStrsellNum6 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_NEWPRICE]];\n            NSArray *yesterdayClosePrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\", SM_HQ_PREVCLOSE]];\n            \n            if (pStrsellNum6) {\n                self.lastPrice = pStrsellNum6[0];\n            }else {\n                self.lastPrice = kSpaceStr;\n            }\n            \n            if (pStrbuy1) {\n                self.buyPrice =pStrbuy1[0];\n            }else {\n                self.buyPrice = kSpaceStr;\n            }\n            \n            if (pStrsell1) {\n                self.sellPrice = pStrsell1[0];\n            }else {\n                self.sellPrice = kSpaceStr;\n            }\n            \n            NSArray *zhangTing = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ZHANGTING]];\n            NSArray *dieTing = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_DIETING]];\n            NSString *zhangStr = [zhangTing thsStringAtIndex:0];\n            NSString *dieStr = [dieTing thsStringAtIndex:0];\n            self.limitUpPrice = zhangStr ? :kSpaceStr;\n            self.limitDownPrice = dieStr ? :kSpaceStr;\n            \n            self.yesterdayClosePrice = yesterdayClosePrice.firstObject ? :kSpaceStr;\n            \n            [self setTextData:pStrsell1 addToArray:_sellAry];\n            [self setTextData:pStrsell2 addToArray:_sellAry];\n            [self setTextData:pStrsell3 addToArray:_sellAry];\n            [self setTextData:pStrsell4 addToArray:_sellAry];\n            [self setTextData:pStrsell5 addToArray:_sellAry];\n            [self setTextData:pStrsellNum1 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum2 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum3 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum4 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum5 addToArray:_sellNumberAry];\n            [self setTextData:pStrbuy1 addToArray:_buyAry];\n            [self setTextData:pStrbuy2 addToArray:_buyAry];\n            [self setTextData:pStrbuy3 addToArray:_buyAry];\n            [self setTextData:pStrbuy4 addToArray:_buyAry];\n            [self setTextData:pStrbuy5 addToArray:_buyAry];\n            [self setTextData:pStrbuyNum1 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum2 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum3 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum4 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum5 addToArray:_buyNumberAry];\n            \n            if (isNeedStandard) {\n                buyTmpArr = [_buyAry copy];\n                sellTmpArr = [_sellAry copy];\n            }\n        }\n        \n        if(tableModel.bodyTextClrDict != nil)\n        {\n            NSArray *pColsell1 = [tableModel.bodyTextClrDict objectForKey:[NSString string","relevantFile":"<file_path>HXEnvManager.mm\n}\n\n+ (CDataBaseService *)getDataBaseService {\n    if (m_databaseService == NULL) {\n        [self shareInstance];\n    }\n    return m_databaseService;\n}\n\n+ (CSettingVariablesMgr *)getSettingVarMgr {\n    if (m_settingVarMgr == NULL) {\n        [self shareInstance];\n    }\n    return m_settingVarMgr;\n}\n\n#pragma mark - Private Methods\n- (void)initConfig {\n    self.appWindow = [[[EQUIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds] initEQWindow];\n    self.appWindow.backgroundColor = [UIColor blackColor];\n    self.curveSettingManager = [[CurveSettingManager alloc] init];\n    // 注册系统通知事件\n    [self.appWindow signNotify:YES];\n    g_bUpdateVersion = NO;\n    [self initGlobalConfig];\n    [HXEnvConfigManager shareInstance];\n    [self idleTimerDisabled];\n    [[LJDeviceManager tempInstance] updateDeviceInfo];\n    [HXOsInfo sharedInstance].didGetNetWorkState = ^(int isHasNetWork) {\n        g_bIsHasNetWork = isHasNetWork;\n    };\n    if (g_bUpdateVersion) {\n        g_bUpdateVersion = NO;\n    }\n\n    m_databaseService = new CDataBaseService();\n    m_settingVarMgr = new CSettingVariablesMgr();\n}\n\n- (void)initGlobalConfig {\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *version = [[[NSBundle mainBundle] infoDictionary] objectForKey:kCFBundleShortVersionString];\n    if (version) {\n        NSString *strOldVer = [[NSUserDefaults standardUserDefaults] objectForKey:kHXFuturesVersionKey]; // 取出之前的版本号\n        // 新安装、卸载安装、覆盖安装\n        if (!strOldVer || ![strOldVer isEqualToString:version]) {\n            g_bUpdateVersion = YES; // 覆盖或者更新版本了\n            [[NSUserDefaults standardUserDefaults] setObject:version forKey:kHXFuturesVersionKey];\n        }\n    }\n\n    if (g_strDocumentPath == nil) {\n        NSFileManager *fileManager = [NSFileManager defaultManager];\n        BOOL idDir = YES;\n        NSString *dirName = [NSString stringWithFormat:@\"%@/%@\", documentsDirectory, kEQHeXin];\n        if ([fileManager fileExistsAtPath:dirName isDirectory:&idDir]) {\n            g_strDocumentPath = dirName;\n        } else {\n            // 创建一个\n\n XiaDanWuDangData.m\n HXFutures\n\n Created by qianlei on 16/6/14.\n Copyright © 2016年 hexin. All rights reserved.","relevantFileList":[],"filePath":"XiaDanWuDangData.mm","template":"objective-cpp","multiRes":{"hipilot":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        self.tempXiaDanData = nil;\n        self.allBuySellData = nil;\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VER","deepseek-chat-lite":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求","CodeQwen2.5-7B":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求","copilot":"_sellNumberAry removeAllObjects]; //卖出数量数组\n    [_buyAry rem"}},{"prefix":"\n#import \"XiaDanWuDangData.h\"\n#import \"EQColor.h\"\n#import \"Tools.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"QHTDisplayLink.h\"\n#import \"LJHQStandardPriceSetManager.h\"\n#import \"HXLevel2PowerManager.h\"\n#import \"HXSwiftHeader.h\"\n#import \"LJSystemGeneralContent.h\"\n\n@import LJNumberTool;\n\nstatic NSString *const kSpaceStr = @\"--\";\n\n@interface XiaDanWuDangData ()\n\n@property (strong, nonatomic) HXSocketFetcher *xiaDanFetcher;\n\n@property (strong, nonatomic) HXSocketFetcher *fenShiFetcher;\n@property (strong, nonatomic) HXSocketFetcher *allBuySellFetcher;\n/// 用于控制数据刷新频率，临时接收数据\n@property (strong, nonatomic) StuffTableModel *tempXiaDanData;\n@property (strong, nonatomic) StuffTableModel *tempWuDangData;\n\n/// 当前内存中的五档数据\n@property (nonatomic, strong) StuffBaseModel *wudangData;\n/// 当前内存中的(level2)五档数据\n@property (nonatomic, strong) StuffBaseModel *allBuySellData;\n\n@property (nonatomic, assign) BOOL isComplete;\n\n@end\n\n@implementation XiaDanWuDangData\n\n- (void)dealloc {\n    [self unRegisterObjectKey];\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    NSLog(@\"[dealloc] %s\", __func__);\n}\n\n- (instancetype)init {\n    if(self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 1211;\n        self.businessType = BUSINESS_XIADAN_WUDANG_DATA;\n        _sellAry = [[NSMutableArray alloc] init];   //卖出价格数组\n        _sellNumberAry = [[NSMutableArray alloc] init]; //卖出数量数组\n        _buyAry = [[NSMutableArray alloc] init];    //买入价格数组\n        _buyNumberAry = [[NSMutableArray alloc] init];  //买入数量数组\n        _sellColorAry = [[NSMutableArray alloc] init];  //卖出价格颜色数组\n        _sellNumberColorAry = [[NSMutableArray alloc] init];    //卖出数量颜色数组\n        _buyColorAry = [[NSMutableArray alloc] init];   //买入价格颜色数组\n        _buyNumberColorAry = [[NSMutableArray alloc] init]; //买入数量颜色数组\n        _nowPriceColorArray = [[NSMutableArray alloc] init];\n    }\n    return self;\n}\n\n- (void)reloadWuDang {\n    if (self.wudangData) {\n        [self setData:self.wudangData];\n    }\n    if (self.allBuySellData) {\n        [self setAllBuySellData:self.allBuySellData];\n    }\n}\n\n- (void)getWuDangDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    \n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        self.tempWuDangData = nil;\n        if (self.nPageID <= 0) {\n            self.nPageID = HQ_VERTICAL_DETAIL_FRAMEID;\n        }\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n                               stockcode,\n                               marketCode];\n        NSDictionary *requestDic =  @{[HXWTSocketRequest reservedKey]:paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID paramsDict:requestDic pageId:(int)self.nPageID];\n        if (!self.fenShiFetcher) {\n            WEAKSELF;\n            self.fenShiFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                STRONGSELF\n                strongSelf.isRealData = data.isRealData;\n                strongSelf.wudangData = data;\n                if (!data.isRealData) {\n                    [strongSelf setData:data];\n                    return;\n                }\n                \n                strongSelf.tempWuDangData = data;\n                //非实时推送的数据直接返回，用于后续进行isRealData判断\n                if (!data.isRealData) {\n                    strongSelf.isComplete = NO;\n                    [strongSelf setData:strongSelf.tempWuDangData];\n                    return;\n                }\n                \n                if (strongSelf.isComplete) {\n                    return ;\n                }\n                \n                //防止过快刷新请求\n                strongSelf.isComplete = YES;\n                typeof(self) __weak weakSelf2 = strongSelf;\n                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)([QHTDisplayLink shareInstance].onceTime / 1000.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                    typeof(weakSelf2) __strong strongSelf2 = weakSelf2;\n                    strongSelf2.isComplete = NO;\n                    [strongSelf2 setData:strongSelf2.tempWuDangData];\n                });\n            }];\n        } else {\n            [self.fenShiFetcher pause];\n            self.fenShiFetcher.request = request;\n        }\n        [self.fenShiFetcher start];\n    }\n}\n\n- (void)requestWithStockCode:(NSString *)stockCode\n                    marketId:(NSString *)marketId\n                successBlock:(void (^)(void))successBlock\n                 failedBlock:(void (^)(void))failedBlock {\n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    [self getWuDangDataWithStockCode:stockCode marketCode:marketId];\n}\n\n- (void)getAllBuySellDataWithStockCode:(NSString *)stockcode marketCode:(NSString *)marketCode {\n    if (stockcode == nil || [stockcode isEqualToString:@\"\"] || [stockcode isEqualToString:kSpaceStr]) {\n        return;\n    }\n    // 存储请求信息 用于基准价用\n    self.lastStockCode = stockcode;\n    self.lastMarketId = marketCode;\n    \n    if ([LJSyst","infill":"veAllObjects];    //买入价格数组\n    [_buyNumberAry","suffix":" removeAllObjects];  //买入数量数组\n    [_sellColorAry removeAllObjects];  //卖出价格颜色数组\n    [_sellNumberColorAry removeAllObjects];    //卖出数量颜色数组\n    [_buyColorAry removeAllObjects];   //买入价格颜色数组\n    [_buyNumberColorAry removeAllObjects]; //买入数量颜色数组\n    [_nowPriceColorArray removeAllObjects];\n}\n\n- (void)changeColorWithStandardPrice:(NSMutableArray *)buyTmpArr standardPrice:(NSString *)standardPrice buyOrSellArr:(NSMutableArray *)array {\n    for (int i = 0; i < array.count; ++i) {\n        NSString *buyStr = [buyTmpArr thsStringAtIndex:i];\n        if (![LJNumericStringUtils isNumber:buyStr] || ![LJNumericStringUtils isNumber:standardPrice]) {\n            [array thsReplaceObjectAtIndex:i withObject:HXUIColor.commonColor];\n        } else {\n            if ([buyStr doubleValue] > [standardPrice doubleValue]) {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.riseColor];\n            } else if ([buyStr doubleValue] < [standardPrice doubleValue]) {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.fallColor];\n            } else {\n                [array thsReplaceObjectAtIndex:i withObject:HXUIColor.commonColor];\n            }\n        }\n    }\n}\n\n- (void)setData:(StuffBaseModel *)model {\n    [self clearAllData];\n    if (model && ([model modelType] == StuffModelTypeText)) {\n        StuffTextModel *textModel = (StuffTextModel *)model;\n        self.contentString = textModel.text;\n        [self doneBusiness:DOBUSINESS_FAILED];\n    } else if (model && ([model modelType] == StuffModelTypeTable)) {\n        StuffTableModel *tableModel = (StuffTableModel *)model;\n        \n        if (tableModel.extStringDict != nil) {\n            NSString *str = [tableModel.extStringDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_CODECODE]];\n            if(str) {\n                self.contentString = str;\n                self.stockCode = str;\n            }\n        }\n        \n        // 是否需要基准价\n        BOOL isNeedStandard = ([[LJHQStandardPriceSetManager shareInstance] isSupportStandardPriceWithMarket:[NSString stringWithFormat:@\"%@\", self.lastMarketId]] && [[LJHQStandardPriceSetManager shareInstance] currentStandardPriceTypeIsCustom]);\n        NSString *standardPrice = [[LJHQStandardPriceSetManager shareInstance] getStandardPriceWithStockCode:self.lastStockCode];\n        NSMutableArray *buyTmpArr = [NSMutableArray array];\n        NSMutableArray *sellTmpArr = [NSMutableArray array];\n        \n        if (tableModel.bodyTextDict != NULL) {\n            NSArray *pStrsell1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE1]];\n            NSArray *pStrsellNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT1]];\n            NSArray *pStrsell2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE2]];\n            NSArray *pStrsellNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT2]];\n            NSArray *pStrsell3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE3]];\n            NSArray *pStrsellNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT3]];\n            NSArray *pStrsell4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE4]];\n            NSArray *pStrsellNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT4]];\n            NSArray *pStrsell5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE5]];\n            NSArray *pStrsellNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLCOUNT5]];\n            NSArray *pStrbuy1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE1]];\n            NSArray *pStrbuyNum1 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT1]];\n            NSArray *pStrbuy2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE2]];\n            NSArray *pStrbuyNum2 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT2]];\n            NSArray *pStrbuy3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE3]];\n            NSArray *pStrbuyNum3 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT3]];\n            NSArray *pStrbuy4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE4]];\n            NSArray *pStrbuyNum4 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT4]];\n            NSArray *pStrbuy5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYPRICE5]];\n            NSArray *pStrbuyNum5 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_BUYCOUNT5]];\n            NSArray *pStrsellNum6 = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_NEWPRICE]];\n            NSArray *yesterdayClosePrice = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\", SM_HQ_PREVCLOSE]];\n            \n            if (pStrsellNum6) {\n                self.lastPrice = pStrsellNum6[0];\n            }else {\n                self.lastPrice = kSpaceStr;\n            }\n            \n            if (pStrbuy1) {\n                self.buyPrice =pStrbuy1[0];\n            }else {\n                self.buyPrice = kSpaceStr;\n            }\n            \n            if (pStrsell1) {\n                self.sellPrice = pStrsell1[0];\n            }else {\n                self.sellPrice = kSpaceStr;\n            }\n            \n            NSArray *zhangTing = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_ZHANGTING]];\n            NSArray *dieTing = [tableModel.bodyTextDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_DIETING]];\n            NSString *zhangStr = [zhangTing thsStringAtIndex:0];\n            NSString *dieStr = [dieTing thsStringAtIndex:0];\n            self.limitUpPrice = zhangStr ? :kSpaceStr;\n            self.limitDownPrice = dieStr ? :kSpaceStr;\n            \n            self.yesterdayClosePrice = yesterdayClosePrice.firstObject ? :kSpaceStr;\n            \n            [self setTextData:pStrsell1 addToArray:_sellAry];\n            [self setTextData:pStrsell2 addToArray:_sellAry];\n            [self setTextData:pStrsell3 addToArray:_sellAry];\n            [self setTextData:pStrsell4 addToArray:_sellAry];\n            [self setTextData:pStrsell5 addToArray:_sellAry];\n            [self setTextData:pStrsellNum1 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum2 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum3 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum4 addToArray:_sellNumberAry];\n            [self setTextData:pStrsellNum5 addToArray:_sellNumberAry];\n            [self setTextData:pStrbuy1 addToArray:_buyAry];\n            [self setTextData:pStrbuy2 addToArray:_buyAry];\n            [self setTextData:pStrbuy3 addToArray:_buyAry];\n            [self setTextData:pStrbuy4 addToArray:_buyAry];\n            [self setTextData:pStrbuy5 addToArray:_buyAry];\n            [self setTextData:pStrbuyNum1 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum2 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum3 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum4 addToArray:_buyNumberAry];\n            [self setTextData:pStrbuyNum5 addToArray:_buyNumberAry];\n            \n            if (isNeedStandard) {\n                buyTmpArr = [_buyAry copy];\n                sellTmpArr = [_sellAry copy];\n            }\n        }\n        \n        if(tableModel.bodyTextClrDict != nil)\n        {\n            NSArray *pColsell1 = [tableModel.bodyTextClrDict objectForKey:[NSString stringWithFormat:@\"%d\",SM_HQ_SELLPRICE1]];\n       ","relevantFile":"<file_path>HXEnvManager.mm\n}\n\n+ (CDataBaseService *)getDataBaseService {\n    if (m_databaseService == NULL) {\n        [self shareInstance];\n    }\n    return m_databaseService;\n}\n\n+ (CSettingVariablesMgr *)getSettingVarMgr {\n    if (m_settingVarMgr == NULL) {\n        [self shareInstance];\n    }\n    return m_settingVarMgr;\n}\n\n#pragma mark - Private Methods\n- (void)initConfig {\n    self.appWindow = [[[EQUIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds] initEQWindow];\n    self.appWindow.backgroundColor = [UIColor blackColor];\n    self.curveSettingManager = [[CurveSettingManager alloc] init];\n    // 注册系统通知事件\n    [self.appWindow signNotify:YES];\n    g_bUpdateVersion = NO;\n    [self initGlobalConfig];\n    [HXEnvConfigManager shareInstance];\n    [self idleTimerDisabled];\n    [[LJDeviceManager tempInstance] updateDeviceInfo];\n    [HXOsInfo sharedInstance].didGetNetWorkState = ^(int isHasNetWork) {\n        g_bIsHasNetWork = isHasNetWork;\n    };\n    if (g_bUpdateVersion) {\n        g_bUpdateVersion = NO;\n    }\n\n    m_databaseService = new CDataBaseService();\n    m_settingVarMgr = new CSettingVariablesMgr();\n}\n\n- (void)initGlobalConfig {\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *version = [[[NSBundle mainBundle] infoDictionary] objectForKey:kCFBundleShortVersionString];\n    if (version) {\n        NSString *strOldVer = [[NSUserDefaults standardUserDefaults] objectForKey:kHXFuturesVersionKey]; // 取出之前的版本号\n        // 新安装、卸载安装、覆盖安装\n        if (!strOldVer || ![strOldVer isEqualToString:version]) {\n            g_bUpdateVersion = YES; // 覆盖或者更新版本了\n            [[NSUserDefaults standardUserDefaults] setObject:version forKey:kHXFuturesVersionKey];\n        }\n    }\n\n    if (g_strDocumentPath == nil) {\n        NSFileManager *fileManager = [NSFileManager defaultManager];\n        BOOL idDir = YES;\n        NSString *dirName = [NSString stringWithFormat:@\"%@/%@\", documentsDirectory, kEQHeXin];\n        if ([fileManager fileExistsAtPath:dirName isDirectory:&idDir]) {\n            g_strDocumentPath = dirName;\n        } else {\n            // 创建一个\n\n XiaDanWuDangData.m\n HXFutures\n\n Created by qianlei on 16/6/14.\n Copyright © 2016年 hexin. All rights reserved.","relevantFileList":[],"filePath":"XiaDanWuDangData.mm","template":"objective-cpp","multiRes":{"hipilot":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求\n        self.tempXiaDanData = nil;\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"stockcode=%@\\r\\nmarketcode=%@\\r\\n\",\n","deepseek-chat-lite":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求","CodeQwen2.5-7B":"emGeneralContent isConnectionAvailable]) {    //有网络时发出请求","copilot":"veAllObjects];    //买入价格数组\n    [_buyNumberAry"}},{"prefix":"\n#import \"WTFastOrderHandler.h\"\n#import \"WTFastOrderLocalSetManager.h\"\n#import \"HXWTAccountManager.h\"\n#import \"HXAccountTypeSwitchManager.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"WTDoubleWayOrderDataTool.h\"\n#import \"HXSnatchRequestModal.h\"\n#import \"WTFastOrderCheDanHandler.h\"\n#import \"QuickBuyOrSellModal.h\"\n#import \"ClientUserBehaviorLog+WTBehaviorLog.h\"\n#import <HXBase/NSArray+Safety.h>\n#import <HXBase/NSDictionary+Safety.h>\n#import \"CCChiCangViewData.h\"\n#import \"NSString+WTTradeSafety.h\"\n#import \"WTCangWeiTool.h\"\n#import \"WTChaiDanManager.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXTool/NSObject+JSON.h>\n#import <HXStuffDataModel/StuffTextModel.h>\n#import \"WTChaiDanStockInfoModel.h\"\n#import \"WTChaiDanRequestManager.h\"\n#import \"WTStockPriceMonitoringManager.h\"\n#import \"WTTradeFKManager.h\"\n#import \"TradeConfirm.h\"\n#import \"WTSjwtHandler.h\"\n#import \"WTFastOrderManager.h\"\n#define PAGE_BUYREQUEST_ID          2604\n#define PAGE_SELLREQUEST_ID         2626\n\n@interface WTFastOrderHandler()<HXSnatchRequestModalDelegate>\n\n@property (nonatomic, copy) NSString *stockCode; //股票代码\n@property (nonatomic, copy) NSString *stockMarket; //股票市场\n@property (nonatomic, copy) NSString *stockName; //股票名称\n@property (nonatomic, strong) CCChiCangViewData *chicangViewData;//持仓请求管理\n@property (nonatomic, strong) CCChiCangViewData *zijinRequestViewData;//资金请求\n@property (nonatomic, strong) HXSnatchRequestModal *buyRequestModel;//买入请求\n@property (nonatomic, strong) HXSnatchRequestModal *sellRequestModel;//卖出请求\n@property (nonatomic, strong) WTFastOrderCheDanHandler *cheDanHandler;//撤单类型处理\n@property (nonatomic, strong) WTDoubleWayDataModel *currentModel;//当前正在进行的model;\n\n@property (nonatomic, strong) TradeActionRequest *buyInfoRequest; //可买信息请求\n@property (nonatomic, strong) TradeActionRequest *sellInfoRequest; //可卖信息请求\n@property (nonatomic, strong) WTChaiDanManager *chaiDanManager;//拆单处理类\n\n@property (nonatomic, strong) QuickBuyOrSellModal *quickModel;\n@property (nonatomic, strong) TradeBuyOrSellViewModel *hqModel;//查行情应答model\n@property (nonatomic, assign) BOOL isSkipFirstConfirmReq;//是否走免一次委托请求\n@property (nonatomic, assign) BOOL isSupportSJWT;//是市价委托请求\n@property (nonatomic, assign) BOOL isSupportProtectPrice;//是否支持保护限价\n@end\n\n@implementation WTFastOrderHandler\n\n- (void)dealloc{\n    [_buyRequestModel unregisterRequest];\n    [_sellRequestModel unregisterRequest];\n}\n\n- (void)refreshZiJinAndChiCang:(void (^)())completeBlock{\n    if (completeBlock) {\n        self.chicangViewData.zijinAndChiCangFinishedBlock = ^{\n            completeBlock();\n        };\n    }else{\n        self.chicangViewData.zijinAndChiCangFinishedBlock = nil;\n    }\n    [self.chicangViewData updateZijinAndChicang];\n}\n\n//设置提示用toast提示\n- (void)setIsWTTipToastShow:(BOOL)isWTTipToastShow{\n    _isWTTipToastShow = isWTTipToastShow;\n    self.buyRequestModel.isTipToastShow = isWTTipToastShow;\n    self.sellRequestModel.isTipToastShow = isWTTipToastShow;\n}\n\n- (void)handleFastOrderWithModel:(WTDoubleWayDataModel *)model stockCode:(NSString *)stockCode stockMarket:(NSString *)stockMarket stockName:(NSString *)stockName{\n    self.quickModel = nil;\n    self.stockCode = stockCode;\n    self.stockName = stockName;\n    self.stockMarket = stockMarket;\n    self.currentModel = model;\n    self.isSupportSJWT = [self.currentModel isModelSupportSJWT];\n    self.isSupportProtectPrice = self.isSupportSJWT && [WTSjwtHandler isSupportProtectPriceWithStockCode:self.stockCode stockMarket:self.stockMarket];\n    [self handleNormalFastOrderWithModel:model];\n}\n\n//请求股票信息,行情和可买，可卖\n- (void)requestStockInfo:(NSString *)stockCode stockMarket:(NSString *)stockMarket isBuy:(BOOL)isBuy callback:(nonnull void (^)(TradeBuyOrSellViewModel *))callback{\n    TradeActionRequest *request = isBuy?self.buyInfoRequest:self.sellInfoRequest;\n    [request requestStockInfo:stockCode?:@\"\" tradeMarket:nil stockMarket:stockMarket callBack:^(StuffBaseModel *data, NSError *error) {\n        if (error) {\n            if (callback) {\n                callback(nil);\n            }\n            return;\n        }\n        if ([data modelType] == StuffModelTypeText) {\n            StuffTextModel *model = (StuffTextModel *)data;\n            NSString *trimStringText = [model.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n            WTAMLogInfo(WT_LOG_MODULE_FASTORDER, WT_LOG_KEYWORDS_WTFASTORDER, @\"普通买卖行情报错--%@\",trimStringText);\n            if (callback) {\n                callback(nil);\n            }\n        }else if ([data modelType] == StuffModelTypeCtrl) {\n            StuffCtrlModel *ctrlModel = (StuffCtrlModel *)data;\n            TradeBuyOrSellViewModel *model = [TradeBuyOrSellViewModel modelWithCtrlModel:ctrlModel];\n            if (callback) {\n                callback(model);\n            }\n        }\n    }];\n}\n\n//获取可买数量信息\n- (void)requestEnableMoneyWithPrice:(NSString *)price tradeMarket:(NSString *)tradeMarket showErrorTip:(BOOL)showErrorTip\n    otherParam:(NSDictionary *)param\n    callback:(void(^)(NSString *ableAmountStr))callback{\n    if(callback == nil){\n        return;\n    }\n    [self.buyInfoRequest requestEnableAmountWithPrice:price?:@\"\" tradeMarket:tradeMarket otherParam:param callBack:^(StuffBaseModel *data, NSError *error) {\n        if (error) {\n            callback(nil);\n            return;\n        }\n        if ([data modelType] == StuffModelTypeText) {\n            StuffTextModel *model = (StuffTextModel *)data;\n            NSString *trimStringText = [model.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n            if (showErrorTip) {\n                [AMUIPublicProxy showTipAutoClose:trimStringText];\n            }\n            WTAMLogInfo(WT_LOG_MODULE_FASTORDER, WT_LOG_KEYWORDS_WTFASTORDER, @\"普通查可买请求报错--%@\",trimStringText);\n            callback(nil);\n        }else if ([data modelType] == StuffModelTypeCtrl) {\n            StuffCtrlModel *ctrlModel = (StuffCtrlModel *)data;\n            TradeBuyOrSellViewModel *model = [TradeBuyOrSellViewModel modelWithCtrlModel:ctrlModel];\n            callback(model.abelAmount);\n        }\n    }];\n}\n\n//处理普通类型的快捷下单\n- (void)handleNormalFastOrderWithModel:(WTDoubleWayDataModel *)model{\n    if (model.mmcButtonType == WTDoubleWayDataBuy){\n        //前置价格和数量校验\n        if(![self preCheckPriceAndAmountIsValid:model]){\n            return;\n        }\n        //请求买行情,买入针对仓位类型需要先做预处理\n        [self handleBeforeRequestBuyStockInfo:model];\n    }else if (model.mmcButtonType == WTDoubleWayDataSell){\n        //前置价格和数量校验\n        if(![self preCheckPriceAndAmountIsValid:model]){\n            return;\n        }\n        //请求卖行情\n        [self.sellRequestModel requestStockDataWithStock:self.stockCode market:self.stockMarket isGoTrade:NO];\n    }else if (model.mmcButtonType == WTDoubleWayDataChe){\n        //撤单类型\n        if([WTFastOrderLocalSetManager isDefaultCheDanModel:model] || model.cheDanType == WTDoubleWayChaKeCheType){\n            if ([self.delegate respondsToSelector:@selector(gotoQuickCheDan)]) {\n                [self.delegate gotoQuickCheDan];\n            }\n        }else{\n            //处理其他撤单类型\n            self.cheDanHandler.skipSecondConfirm = [WTFastOrderLocalSetManager isSkipConfirm];\n            [self.cheDanHandler handleCheDanWithModel:model stockCode:self.stockCode stockName:self.stockName stockMarket:self.stockMarket];\n        }\n    }\n}\n\n//处理请求买行情前的逻辑\n- (void)handleBeforeRequestBuyStockInfo:(WTDoubleWayDataModel *)model{\n    if ([model getTempAmountNumberVeidoo] == WTDoubleWayDataVeidooTotalSpace || model.numberButtonType ==  WTDoubleWayDataVeidooTotalSpace) {\n        //当是总资产仓位时，先获取实时的资产信息\n        WeakObj(self);\n        self.zijinRequestViewData.zijinAndChiCangFinishedBlock = ^{\n            [selfWeak.buyRequestModel requestStockDataWithStock:selfWeak.stockCode market:selfWeak.stockMarket i","infill":"TradePriceLevel priceLevel = [WTSjwtHandler transProtectPriceLevelToTradePriceLevel:selfWeak.currentModel.protec","suffix":"tPriceLevel isSell:isSell];\n            if(selfWeak.isSupportProtectPrice && [selfWeak.delegate respondsToSelector:@selector(getPriceWithDoubleWayPriceType:)]){\n                NSString *protectPrice = [selfWeak.delegate getPriceWithDoubleWayPriceType:priceLevel];\n                if(![WTDoubleWayOrderDataTool isValidPrice:protectPrice]){\n                    [AMUIPublicProxy showTipAutoClose:@\"未获取到保护限价\"];\n                    return;\n                }\n                selfWeak.currentModel.protectPriceStr = protectPrice;\n            }\n            //获取委托数量\n            [selfWeak handleGetWTAmountWithPrice:priceStr sjwtStragety:sjwtStragety quickModal:quickModal reqType:reqtype];\n        }];\n        return;\n    }else if (self.currentModel.priceButtonType == WTDoubleWayDataVeidooPrice) {\n        //固定价格\n        priceStr = self.currentModel.priceStr;\n    }else{\n        //档位价格或者最新价进的价格\n        priceStr = [self getDoubleWayPriceyWithType:self.currentModel.priceLevel dwDataModel:self.currentModel quickModel:quickModal];\n    }\n    \n    [self handleGetWTAmountWithPrice:priceStr sjwtStragety:nil quickModal:quickModal reqType:reqtype];\n}\n\n//根据委托价格获取委托数量及后续下单流程\n- (void)handleGetWTAmountWithPrice:(NSString *)priceStr sjwtStragety:(NSString *)sjwtStragety quickModal:(TradeBuyOrSellViewModel *)quickModal\n                                                        reqType:(TradeActionReqType)reqtype{\n    if (!self.isSupportSJWT && ![WTDoubleWayOrderDataTool isValidPrice:priceStr]) {\n        NSString *errorInfo = [NSString stringWithFormat:@\"t=fastpriceError^price=%@^tmpprice=%@\", priceStr,self.currentModel.tempPriceStr?:@\"none\"];\n        [AMUIPublicProxy collectUserBehavior:errorInfo type:ACTION_INCORRECT_BEHAVIOR_LOG];\n        [AMUIPublicProxy showTipAutoClose:@\"未获取到对应委托价格\"];\n        return;\n    }\n    //手动输入有值的先转换成新的model\n    WTDoubleWayDataModel *model = [self.currentModel transferTempAmountToNumberType];\n    if (model.mmcButtonType == WTDoubleWayDataBuy && model.numberButtonType ==  WTDoubleWayDataVeidooAbleSpace) {\n        //当买入时如果设置的是可用仓位,先根据价格获取可买值再计算出数量;\n        NSDictionary *param = sjwtStragety ? @{TradeActionReq_SJCL_Key:sjwtStragety} : nil;\n        WeakObj(self);\n        [self requestEnableMoneyWithPrice:priceStr tradeMarket:nil showErrorTip:YES otherParam:param callback:^(NSString *ableAmountStr) {\n            if ([NSString wtIsBlankString:ableAmountStr]) {\n                return;\n            }\n            NSString *distance = [WTDoubleWayOrderDataTool getDistance:selfWeak.stockMarket stockCode:selfWeak.stockCode step:quickModal.ggtAmountStep];\n            __block NSString *buyNum;\n            WTCangWeiCalInfoModel *infoModel = [[WTCangWeiCalInfoModel alloc] init];\n            infoModel.calType = WTCangWeiCalType_buy;\n            infoModel.ableBuyAmount = ableAmountStr;\n            infoModel.stockCode = selfWeak.stockCode;\n            infoModel.stockMarket = selfWeak.stockMarket;\n            infoModel.distance = [distance intValue];\n            infoModel.cangWeiCalDealModel.compareAbleAmount = NO;\n            infoModel.cangWeiCalDealModel.ischeckDataAndTip = NO;\n            infoModel.cangWeiType = HXQuickTradeCangTypeCang;\n            NSString *cangWei = model.positions;\n            buyNum = [WTCangWeiTool calWithCangWei:cangWei infoModel:infoModel].buyCalResult;\n            if([buyNum doubleValue] <= 0){\n                WTAMLogInfo(WT_LOG_MODULE_FASTORDER, WT_LOG_KEYWORDS_WTFASTORDER,@\"AmountErrorWith:%@,canBuy:%@,cangStr:%@\",priceStr,ableAmountStr,model.positions);\n            }\n            //请求买一次\n            [selfWeak requestFirstSubmitWithPrice:priceStr amount:buyNum reqType:reqtype hqQuickModel:quickModal];\n        }];\n    }else{\n        //自定义数量计算\n        NSString *distance = [WTDoubleWayOrderDataTool getDistance:self.stockMarket stockCode:self.stockCode step:quickModal.ggtAmountStep];\n        NSString *amount = [WTDoubleWayOrderDataTool getValidBuyOrSellNumber:model priceStr:priceStr sellNumber:quickModal.abelAmount distance:distance stockCode:self.stockCode stockMarket:self.stockMarket];\n        if([amount doubleValue] <= 0){\n            WTAMLogInfo(WT_LOG_MODULE_FASTORDER, WT_LOG_KEYWORDS_WTFASTORDER,@\"Amount ErrorWith:%@，ableAmount:%@\",model.positions,quickModal.abelAmount);\n        }\n        [self requestFirstSubmitWithPrice:priceStr amount:amount reqType:reqtype hqQuickModel:quickModal];\n    }\n}\n\n- (void)requestFirstSubmitWithPrice:(NSString *)priceStr amount:(NSString *)amount reqType:(TradeActionReqType)reqtype hqQuickModel:(TradeBuyOrSellViewModel *)quickModal{\n    //数量校验\n    if([amount doubleValue] <= 0){\n        [AMUIPublicProxy collectUserBehavior:@\"t=fastAmountError\" type:ACTION_INCORRECT_BEHAVIOR_LOG];\n        [AMUIPublicProxy showTipAutoClose:@\"委托数量不足\"];\n        return;\n    }\n    self.hqModel = quickModal;//保存查行情模型\n    NSString *newPrice = nil;\n    if ([self.delegate respondsToSelector:@selector(getNewestPrice)]) {\n        newPrice = [self.delegate getNewestPrice];\n    }\n    WeakObj(self);\n    [WTTradeFKManager checkIsFkInterceptWithStockCode:self.stockCode wtPrice:priceStr wtNumber:amount newPrice:newPrice market:self.stockMarket stockName:self.stockName isBuy:(reqtype == TradeActionReqType_Buy) isQuickTrade:YES checkResultBlock:^(BOOL isTriggerFK) {\n        if(!isTriggerFK){//未触发风控，继续走委托\n            [selfWeak checkIsTriggerChaiDanWithPrice:priceStr amount:amount reqType:reqtype hqQuickModel:quickModal];\n        }\n    } fkChooseResultBlock:^(BOOL isContinueOrder) {\n        if(isContinueOrder){//风控选择继续委托\n            [selfWeak checkIsTriggerChaiDanWithPrice:priceStr amount:amount reqType:reqtype hqQuickModel:quickModal];\n        }\n    }];\n}\n\n//是否触发拆单判断\n- (void)checkIsTriggerChaiDanWithPrice:(NSString *)priceStr amount:(NSString *)amount reqType:(TradeActionReqType)reqtype hqQuickModel:(TradeBuyOrSellViewModel *)quickModal{\n    //市价委托流程不走拆单逻辑\n    if (self.isSupportSJWT) {\n        [self dealFirstSubmitWithReqType:reqtype priceStr:priceStr amount:amount];\n        return;\n    }\n    //如果满足拆单条件，则走拆单逻辑;\n    WeakObj(self);\n    WTChaiDanStockInfoModel *chaiDanStockInfoModel = [self fetchChaiDanStockInfoWithStockCode:self.stockCode dealPrice:priceStr wtAmount:amount hqQuickModel:quickModal];\n    WTChaiDanSupportModel *supporModel = [self fetchSupportModelWithStockCode:self.stockCode dealPrice:priceStr wtAmount:amount withChaiDanModel:chaiDanStockInfoModel hqQuickModel:quickModal buyType:reqtype];\n    [[WTChaiDanRequestManager shareManager] isSupportChaidanForFirstClickWithSupportModel:supporModel customCheckPrice:nil checkFinishBlock:^(BOOL isSupportChaiDan) {\n        if(isSupportChaiDan) {\n            [selfWeak dealWithChaiDanWithStrAmount:amount strStockCode:selfWeak.stockCode price:priceStr hqQuickModel:quickModal reqType:reqtype];\n            WTChaiDanTradeType tradeType = (reqtype == TradeActionReqType_Buy) ? WTChaiDanTradeTypeBuy : WTChaiDanTradeTypeSell;\n            [WTChaiDanManager sendChaiDanLogWithSourceType:WTChaiDanRequestSourceTypeFast tradeType:tradeType];\n        } else {\n            [selfWeak dealFirstSubmitWithReqType:reqtype priceStr:priceStr amount:amount];\n        }\n    }];\n}\n\n- (void)dealFirstSubmitWithReqType:(TradeActionReqType)reqtype priceStr:(NSString *)priceStr amount:(NSString *)amount{\n    self.isSkipFirstConfirmReq = [TradeActionRequest isSupportSkipFirstConfirmRequest];\n    //市价委托策略只走免二次请求\n    if(self.isSkipFirstConfirmReq || self.isSupportSJWT){\n        NSString *confirmText = [TradeConfirm buildConfirmTextStringWithStockCode:self.stockCode stockMarket:self.stockMarket stockName:self.stockName wtPrice:priceStr wtAmount:amount];\n        QuickBuyOrSellModal *quickModal = [[QuickBuyOrSellModal alloc] initQuickModalWithString:confirmText andJYType:(reqtype == TradeActionReqType_Buy)?JiaoYiTypeBuy:JiaoYiTypeSell];\n        if(self.isSupportSJWT){\n            quickModal.jyPrice = nil;\n            quickModal.sjwtStragety = [WTSjwtHandler getSjwtStragetyName:self.currentModel.sjwtStrategy];\n            if(self.isSupportProtectPrice){\n                quickModal.protectPrice","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"sShowHint:YES","deepseek-chat-lite":"sGoTrade:NO];","CodeQwen2.5-7B":"sGoTrade:NO];","copilot":"TradePriceLevel priceLevel = [WTSjwtHandler transProtectPriceLevelToTradePriceLevel:selfWeak.currentModel.protec"}},{"prefix":"    NSString *zjzh = [accountInfo getHideAccountFourLength];\n    \n    NSString *nowAccount = [NSString stringWithFormat:@\"%@ %@\", yyb, zjzh];\n    return nowAccount;\n}\n\n- (NSString *)getNoBracketsYYBWithStr:(NSString *)str{\n    if (str.length <= 0) {\n        return @\"\";\n    }\n    \n    NSInteger leftIndex = -1;\n    NSRange range1 = [str rangeOfString:@\"(\"];\n    NSRange range2 = [str rangeOfString:@\"（\"];\n    if (range1.length > 0 && range2.length > 0) {\n        leftIndex = MIN(range1.location, range2.location);\n    } else if (range1.length > 0 && range2.length <= 0) {\n        leftIndex = range1.location;\n    } else if (range2.length > 0 && range1.length <= 0) {\n        leftIndex = range2.location;\n    } else {\n        return str;\n    }\n    \n    if (leftIndex < str.length) {\n        NSString *finalStr = [str substringToIndex:leftIndex];\n        return finalStr;\n    }\n    \n    return @\"\";\n}\n\n- (NSInteger)getIndexWithTotalStr:(NSString *)totalStr rangeStr:(NSString *)rangeStr{\n    if (totalStr.length <= 0 || rangeStr.length <= 0) {\n        return -1;\n    }\n    \n    NSRange aRange = [totalStr rangeOfString:rangeStr];\n    if (aRange.length > 0) {\n        return aRange.location;\n    }\n    \n    return -1;\n}\n\n- (HXDropdownMenu *)ggtSubmitTradeMenu{\n    if (!_ggtSubmitTradeMenu) {\n        _ggtSubmitTradeMenu = [[HXDropdownMenu alloc] initWithFrame:self.buyOrSellButton.frame menuType:HXDropdowmMenuTypeBuy locationType:HXDropdowmMenuLocationTypeUp menuTitles:@\"沪港通买入\", @\"深港通买入\", nil];\n        _ggtSubmitTradeMenu.delegate = self;\n        _ggtSubmitTradeMenu.hidden = YES;\n        [self.bgView addSubview:_ggtSubmitTradeMenu];\n    }\n    \n    return _ggtSubmitTradeMenu;\n}\n\n- (UILabel *)exchangeLabel{\n    if (!_exchangeLabel) {\n        _exchangeLabel = [[UILabel alloc] init];\n        _exchangeLabel.textAlignment = NSTextAlignmentLeft;\n        _exchangeLabel.textColor = [UIColor lightGrayColor];\n        _exchangeLabel.font = [UIFont systemFontOfSize:12.0f];\n        [self.quickTopView addSubview:_exchangeLabel];\n    }\n    \n    return _exchangeLabel;\n}\n\n#pragma mark - Default Trade Set\n\n// 普通买入价格\n- (NSString *)getNormalTradeSetBuyPrice {\n    \n    WTTradeSetNormalModel *normalModel = [WTTradeSetArchiverManager shareManager].normalModel;\n    //涨停买入适配上下限规则\n    if (normalModel.buyPrice == WTTradeSetNormalBuyPriceZTPrice) {\n        NSString *buyLimitPrice = [self getNormalTradeSetLimitPrice];;\n        if(![NSString wtIsBlankString:buyLimitPrice]){\n            return buyLimitPrice;\n        }\n    }\n    NSArray *array = @[\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell1]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell2]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell3]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell4]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell5]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceNewPrice]),\n        SafeString(self.quickNetworkModal.riseStopPrice),\n        SafeString(self.quickNetworkModal.fallStopPrice),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice1]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice2]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice3]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice4]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice5]),\n        SafeString(nil)];\n    return [self safetyPriceAtIndex:normalModel.buyPrice withArry:array];\n}\n\n// 普通卖出价格\n- (NSString *)getNormalTradeSetSellPrice {\n    WTTradeSetNormalModel *normalModel = [WTTradeSetArchiverManager shareManager].normalModel;\n    //跌停卖出适配上下限规则\n    if (normalModel.sellPrice == WTTradeSetNormalSellPriceDTPrice) {\n        NSString *sellLimitPrice = [self getNormalTradeSetLimitPrice];\n        if(![NSString wtIsBlankString:sellLimitPrice]){\n            return sellLimitPrice;\n        }\n    }\n    NSArray *array = @[\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice1]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice2]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice3]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice4]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice5]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceNewPrice]),\n        SafeString(self.quickNetworkModal.riseStopPrice),\n        SafeString(self.quickNetworkModal.fallStopPrice),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell5]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell4]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell3]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell2]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell1]),\n        SafeString(nil)];\n    return [self safetyPriceAtIndex:normalModel.sellPrice withArry:array];\n}\n\n// 基金买入价格\n- (NSString *)getFundTradeSetBuyPrice {\n    WTTradeSetFundModel *fundModel = [WTTradeSetArchiverManager shareManager].fundModel;\n    NSArray *array = @[\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell1]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell2]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell3]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell4]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell5]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceNewPrice]),\n        SafeString(self.quickNetworkModal.riseStopPrice),\n        SafeString(self.quickNetworkModal.fallStopPrice),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice1]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice2]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice3]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice4]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice5]),\n        SafeString(nil)];\n    return [self safetyPriceAtIndex:fundModel.buyPrice withArry:array];\n}\n\n// 基金卖出价格\n- (NSString *)getFundTradeSetSellPrice {\n    WTTradeSetFundModel *fundModel = [WTTradeSetArchiverManager shareManager].fundModel;\n    NSArray *array = @[\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice1]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice2]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice3]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice4]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelBuyPrice5]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceNewPrice]),\n        SafeString(self.quickNetworkModal.riseStopPrice),\n        SafeString(self.quickNetworkModal.fallStopPrice),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell5]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell4]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell3]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell2]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell1]),\n        SafeString(nil)];\n    return [self safetyPriceAtIndex:fundModel.sellPrice withArry:array];\n}\n\n// 可转债买入价格\n- (NSString *)getBondTradeSetBuyPrice {\n    WTTradeSetBondModel *bondModel = [WTTradeSetArchiverManager shareManager].bondModel;\n    NSArray *array = @[\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell1]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell2]),\n        SafeString([self tradeSetPriceWithType:WTTr","infill":"checkDistance];\n\n    //重置小数位精度\n    [se","suffix":"lf SetPlusAndMinusDecimalCount];\n    \n    if ([self ggtIsOK]) {//港股通\n        self.riseStopButton.hidden = YES;\n        self.fallStopButton.hidden = YES;\n        self.kcbPriceInfoBtn.hidden = YES;\n        self.exchangeLabel.hidden = NO;\n    } else {\n        self.riseNameLabel.text = @\"涨停\";\n        self.fallNameLabel.text = @\"跌停\";\n        self.riseNameLabel.hidden = NO;\n        self.fallNameLabel.hidden = NO;\n        self.riseStopButton.hidden = NO;\n        self.fallStopButton.hidden = NO;\n        self.kcbPriceInfoBtn.hidden = YES;\n        _exchangeLabel.hidden = YES;\n    }\n    BOOL isSupportMarket = [[WTChicangFlagInfo sharedInfo] isSupportJinEInput:self.stockMarket];\n    if (self.jiaoyiType == JiaoYiTypeBuy&&isSupportMarket) {\n        self.moneyBtn.hidden = NO;\n    }else{\n        self.moneyBtn.hidden = YES;\n    }\n    self.nowAccountLabel.textColor = TEXT_COLOR_HOME_PAGE;\n//    self.nowAccountLabel.text = nowAccount;\n    self.nowAccountLabel.hidden = YES;\n    self.sepImgView.hidden = YES;\n    [self setRiseAndFallBtnAndAmountViewFrame];//⚠️这个需要在handleUpdatePriceLimit前需先调用,内部会重新设置涨跌停的布局;\n    BOOL isSupportShowLimitPrice = [WTPriceLimitManager isSupportLimitPriceWithStockCode:self.stockCode withMarketId:self.stockMarket] && [WTPriceLimitManager isOpenShowPriceLimitWithHSMarketId:self.stockMarket];\n    [WTPriceLimitManager sharedManager].priceSubject = nil;\n    self.riseNumberLabel.text = self.quickNetworkModal.riseStopPrice;\n    self.fallNumberLabel.text = self.quickNetworkModal.fallStopPrice;\n    if (isSupportShowLimitPrice && ![self isTomorrowMoveOpen]) {\n        [[WTPriceLimitManager sharedManager] setStockCode:self.stockCode];\n        [[WTPriceLimitManager sharedManager] setNowPrice:self.quickNetworkModal.price];\n        [[WTPriceLimitManager sharedManager] setRiseStopPrice:self.quickNetworkModal.riseStopPrice];\n        [[WTPriceLimitManager sharedManager] setFallStopPrice:self.quickNetworkModal.fallStopPrice];\n        [self handleUpdatePriceLimit];\n        //订阅最新价更新信号\n        RACSubject *subject = [[RACSubject alloc] init];\n        WeakObj(self);\n        [subject subscribeNext:^(id x) {\n            [selfWeak handleUpdatePriceLimit];\n        }];\n        [WTPriceLimitManager sharedManager].priceSubject = subject;\n    }else{\n        _kcbPriceInfoBtn.hidden = YES;\n        [_riseStopButton mas_updateConstraints:^(MASConstraintMaker *make) {\n            make.right.equalTo(self.priceBackgroundImageView.mas_right);\n        }];\n    }\n    //发送自定义上下限埋点\n    NSString *customLimitCBASStr = [WTPriceLimitManager getBuyOrSellCustomPriceLimitSetCBASStr];\n    if(customLimitCBASStr){\n        [self sendLogWithLogobject:CLIENT_APPEND([self clientObject],customLimitCBASStr) actionType:NoneAction];\n    }\n    self.riseStopButton.accessibilityValue = self.riseNumberLabel.text;\n    self.fallStopButton.accessibilityValue = self.fallNumberLabel.text;\n    \n    if (IS_NIGHT_THEME) {\n        [self.riseNumberLabel setTextColor:SERVER_RED_NIGHT];\n        [self.fallNumberLabel setTextColor:SERVER_GREEN_NIGHT];\n    } else {\n        [self.riseNumberLabel setTextColor:self.quickNetworkModal.riseLabelColor];\n        [self.fallNumberLabel setTextColor:self.quickNetworkModal.fallLabelColor];\n    }\n  \n\n    //处理跳转进入自动赋值价格\n    [self handleJumpAutoSetPrice];\n    \n    if (!hasAutoSetNumer && self.jiaoyiType == JiaoYiTypeSell) {\n        [self tradeSetDefaultAmount];\n    }\n}\n\n-(void)setRiseAndFallBtnAndAmountViewFrame {\n    \n    BOOL isTomorrowLimitMoveOpen = [self isTomorrowMoveOpen];\n    [self.tomorrowLabel setHidden:!isTomorrowLimitMoveOpen];\n    \n    [self updateRiseOrFallConstraintsWithTomorrowLimitMoveOpen:isTomorrowLimitMoveOpen isPriceLimit:NO];\n    \n    [self.amountView setHeight:self.riseStopButton.height];\n    [self.amountView setTop:self.riseStopButton.top];\n    \n    if (_exchangeLabel && !_exchangeLabel.hidden) {\n        if (self.exchangeRate.length <= 0) {\n            _exchangeLabel.hidden = YES;\n        } else {\n            self.exchangeLabel.text = [NSString stringWithFormat:@\"参考汇率 1HK$=%@¥\", self.exchangeRate];\n            [self.exchangeLabel setFrame:CGRectMake(self.priceBackgroundImageView.left, 0, self.priceBackgroundImageView.width, self.riseStopButton.height)];\n            [self.exchangeLabel setCenterY:self.amountView.centerY];\n            [self.exchangeLabel changeTheme];\n        }\n    }\n    [self ableAmountFrame:self.quickNetworkModal.couldAmount isTomorrowLimitOpen:isTomorrowLimitMoveOpen];\n    \n    [self changeAmountButton];\n}\n\n//是否显示明日涨跌停\n- (BOOL)isTomorrowMoveOpen{\n    return self.riseNameLabelText.length >2 && self.fallNameLabelText.length >2;\n}\n\n- (void)changeAmountButton{\n    if ([self ggtIsOK]) {\n        [self.addAmountBtn setTitle:self.distance forState:UIControlStateNormal];\n        [self.subAmountBtn setTitle:self.distance forState:UIControlStateNormal];\n        \n        if (self.jiaoyiType == JiaoYiTypeBuy || self.jiaoyiType == JiaoYiTypeNoAccount) {\n            [self.addAmountBtn setTitleColor:TEXT_COLOR_RED_NORMAL forState:UIControlStateNormal];\n            [self.subAmountBtn setTitleColor:TEXT_COLOR_RED_NORMAL forState:UIControlStateNormal];\n        } else {\n            [self.addAmountBtn setTitleColor:BLUE_NORMAL forState:UIControlStateNormal];\n            [self.subAmountBtn setTitleColor:BLUE_NORMAL forState:UIControlStateNormal];\n        }\n        \n        [self.addAmountBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateHighlighted];\n        [self.subAmountBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateHighlighted];\n        [self.addAmountBtn.titleLabel changeTheme];\n        [self.subAmountBtn.titleLabel changeTheme];\n    }\n}\n\n- (void)clearAmountDistance{\n    if ([self ggtIsOK]) {\n        self.distance = @\"\";\n        [self.addAmountBtn setTitle:@\"\" forState:UIControlStateNormal];\n        [self.subAmountBtn setTitle:@\"\" forState:UIControlStateNormal];\n    }\n}\n//点击tab菜单栏下单按钮，弹出的3个大的圆的按钮，点击触发\n- (void)changeSubmitButton{\n    switch ([[HXWTAccountManager sharedInstance] getCurAccountInfor].ggtPermissionType) {\n        case HXGGTPermissionTypeNone:\n        {\n            [self showASubmitButton];\n        }\n            break;\n        case HXGGTPermissionTypeHGT:\n        {\n            if (self.stockGGTType & HXStockGGTTypeHGT) {\n                [self showHGTSubmitButton];\n            } else {\n                [self showASubmitButton];\n            }\n        }\n            break;\n        case HXGGTPermissionTypeSGT:\n        {\n            if (self.stockGGTType & HXStockGGTTypeSGT) {\n                [self showSGTSubmitButton];\n            } else {\n                [self showASubmitButton];\n            }\n        }\n            break;\n        case HXGGTPermissionTypeALl:\n        {\n            if ((self.stockGGTType & HXStockGGTTypeSGT) && (self.stockGGTType & HXStockGGTTypeHGT)) {\n                [self showSGTAndHGTSubmitButton];\n            } else if (self.stockGGTType & HXStockGGTTypeHGT) {\n                [self showHGTSubmitButton];\n            } else if (self.stockGGTType & HXStockGGTTypeSGT) {\n                [self showSGTSubmitButton];\n            } else {\n                [self showASubmitButton];\n            }\n        }\n            break;\n        default:\n            [self showASubmitButton];\n            break;\n    }\n}\n\n- (void)showASubmitButton{\n    _ggtSubmitTradeMenu.hidden = YES;\n    self.buyOrSellButton.hidden = NO;\n    \n    CGFloat buyOrSellButtonX = self.buyOrSellButton.frame.origin.x;\n    CGFloat buyOrSellButtonWidth = Screen_width - 2 * buyOrSellButtonX;\n    [self.buyOrSellButton setWidth:buyOrSellButtonWidth];\n    \n    [self normalLayoutPriceButton];\n}\n\n- (void)showGGTSubmitButtonAndFrame{\n    self.ggtSubmitTradeMenu.hidden = NO;\n    self.buyOrSellButton.hidden = YES;\n    \n    CGFloat buyOrSellButtonX = self.ggtSubmitTradeMenu.frame.origin.x;\n    CGFloat buyOrSellButtonWidth = Screen_width - 2 * buyOrSellButtonX;\n    [self.ggtSubmitTradeMenu setWidth:buyOrSellButtonWidth];\n    \n    [self GGTLayoutPriceButton];","relevantFile":"","relevantFileList":[],"filePath":"QuickBuyOrSellView.mm","template":"objective-cpp","multiRes":{"hipilot":"TradePriceLevelPriceSell3]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell4]),\n        SafeString([self tradeSetPriceWithType:WTTradePriceLevelPriceSell5]),\n        SafeString([self","deepseek-chat-lite":"adePriceLevelPriceSell3]),","CodeQwen2.5-7B":"adePriceLevelPriceSell4]),","copilot":"checkDistance];\n\n    //重置小数位精度\n    [se"}},{"prefix":"\n#import \"HXChiCangStockLabelViewController.h\"\n#import \"HXChiCangStockLabelManager.h\"\n#import \"HXChiCangStockLabelDataManager.h\"\n#import \"HXChiCangStockLabelCollectionViewCell.h\"\n#import <ThirdBase/Masonry.h>\n#import <HXTool/NSDictionary+SafetyOperation.h>\n#import <HXBase/NSArray+Safety.h>\n#import <HXTool/NSArray+SafetyOperation.h>\n#import <HXDataTypeConvertor/NSArray+HXDataTypeConvertor.h>\n#import \"UIFont+HXFont.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXUIKit/HXInputAlertView.h>\n#import \"HXChiCangStockLabelInputValidator.h\"\n#import \"AMPublicInterface.h\"\n#import \"AMLocalIdDef.h\"\n#import <LocalURLConfig/LocalURLConfig.h>\n#import \"GetFenxiData.h\"\n#import \"HXWTAccountManager.h\"\n#import \"WTXCSBusinessManager.h\"\n#import \"WTChiCangStockFilterCacheManager.h\"\n#import \"HXChiCangStockLabelCacheManager.h\"\n#import <HXCategoryTool/UIView+HXEventBlock.h>\n#import <HXCategoryTool/NSMutableArray+HXSafety.h>\n#import <HXCategoryTool/UIColor+HXQuickCreate.h>\n#import <HXThemeVersion/ThemeVersionManager.h>\n\nstatic NSString *cellID = @\"HXChiCangStockLabelCollectionCellID\";\nstatic NSString *headerID = @\"HXChiCangStockLabelCollectionViewHeaderID\";\nstatic NSString *footerID = @\"HXChiCangStockLabelCollectionViewFooterID\";\n\n@interface HXChiCangStockLabelViewController ()<UICollectionViewDelegate,UICollectionViewDataSource,HXChiCangStockLabelCellTypeDelegate>\n@property (nonatomic, strong) UILabel *titleLabel;\n@property (nonatomic, strong) UICollectionView *collectionView;\n@property (nonatomic, strong) UILabel *tipLabel;\n@property (nonatomic, strong) HXChiCangStockLabelDataManager *chiCangStockLabelDataManager;\n@property (nonatomic, copy) NSDictionary *params;\n@property (nonatomic, copy) NSString *stockLabel;\n@property (nonatomic, assign) NSInteger selectedIndex;\n\n@end\n\n@implementation HXChiCangStockLabelViewController\n\n- (instancetype)init {\n    if (self = [super init]) {\n        [HXChiCangStockLabelManager sharedInstance].chiCangStockLabelListArr = [NSArray array];\n        [self setupView];\n        [self initConstraints];\n        self.chiCangStockLabelDataManager = [[HXChiCangStockLabelDataManager alloc] init];\n        self.selectedIndex = -1;\n    }\n    return self;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.navigationItem.title = @\"标签编辑\";\n}\n\n- (void)setupView {\n    [self.view addSubview:self.collectionView];\n    [self.collectionView changeTheme];\n}\n\n- (void)initConstraints {\n    [self.collectionView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.edges.equalTo(self.view);\n    }];\n}\n\n- (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n    WeakObj(self);\n    [_chiCangStockLabelDataManager requestStockLabelListWithCallBack:^(BOOL success, NSArray *stockLabelList, NSString *errorMessage) {\n        if (stockLabelList.count > 0) {\n            [selfWeak.collectionView reloadData];\n            NSString *selectedLabel = selfWeak.stockLabel;\n            for (NSString *label in [HXChiCangStockLabelManager sharedInstance].chiCangStockLabelListArr) {\n                if ([selectedLabel isEqualToString:label]) {\n                    selfWeak.selectedIndex = [[HXChiCangStockLabelManager sharedInstance].chiCangStockLabelListArr indexOfObject:label] + 1;\n                }\n            }\n        } else if (!IsStringNilOrEmpty(errorMessage)) {\n            [AMUIPublicProxy showTipAutoClose:errorMessage];\n        }\n    }];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [super viewWillDisappear:animated];\n\n    //缓存列表数据\n    [[HXChiCangStockLabelCacheManager shared] saveStockLabelList:[HXChiCangStockLabelManager sharedInstance].chiCangStockLabelListArr isCoverSave:YES];\n}\n\n- (void)setParams:(NSDictionary *)params {\n    _params = params;\n    NSString *stockCode = [_params thsObjectForKey:@\"stockCode\"];\n    NSString *tradeMarket = [_params thsObjectForKey:@\"tradeMarket\"];\n    _stockLabel = [self.chiCangStockLabelDataManager getStockLabelWithStockCode:stockCode tradeMarket:tradeMarket];\n\n    //直接进入编辑状态\n    [self changAllCellType:HXChiCangStockLabelCellTypeDelete];\n    \n    UILongPressGestureRecognizer *longPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longPressed:)];\n    longPress.minimumPressDuration = 0.5;\n    [self.collectionView addGestureRecognizer:longPress];\n}\n\n- (void)changAllCellType:(HXChiCangStockLabelCellType)type {\n    for (int i = 1; i < [HXChiCangStockLabelManager sharedInstance].chiCangStockLabelListArr.count + 1; i ++) {\n        NSIndexPath *indexPath = [NSIndexPath indexPathForRow:i inSection:0];\n        HXChiCangStockLabelCollectionViewCell *cell = (HXChiCangStockLabelCollectionViewCell *)[_collectionView cellForItemAtIndexPath:indexPath];\n        [cell changCellType:type];\n    }\n}\n\n#pragma mark - UICollectionViewDataSource && UICollectionViewDelegate\n- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {\n    return [HXChiCangStockLabelManager sharedInstance].chiCangStockLabelListArr.count + 1;\n}\n\n- (__kindof UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {\n    HXChiCangStockLabelCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:cellID forIndexPath:indexPath];\n    cell.delegate = self;\n    if (indexPath.row == 0) {\n        [cell changCellType:HXChiCangStockLabelCellTypeAdd];\n        [cell.titleLabel changeTheme];\n    } else {\n        cell.titleLabel.text = [[HXChiCangStockLabelManager sharedInstance].chiCangStockLabelListArr thsStringAtIndex:indexPath.row - 1];\n        [cell changCellType:HXChiCangStockLabelCellTypeDelete];\n    }\n    return cell;\n}\n\n- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {\n    HXChiCangStockLabelCollectionViewCell *cell = (HXChiCangStockLabelCollectionViewCell *)[_collectionView cellForItemAtIndexPath:indexPath];\n    switch (cell.type) {\n        case HXChiCangStockLabelCellTypeAdd:\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(JIAOYI_STOCKLABEL, @\"newtabadd.click\")];\n            if ([HXChiCangStockLabelManager sharedInstance].chiCangStockLabelListArr.count >= 20) {\n                [AMUIPublicProxy showTipAutoClose:@\"标签创建数量已达上限\"];\n                return;\n            }\n            [self showAddLabelAlert];\n            break;\n        case HXChiCangStockLabelCellTypeDelete:\n            [self deleteBtnClick:cell.titleLabel.text];\n            break;\n        default:\n            break;\n    }\n}\n\n-(UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath{\n    if ([kind isEqualToString:UICollectionElementKindSectionFooter]) {\n        UICollectionReusableView *footerView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionFooter withReuseIdentifier:footerID forIndexPath:indexPath];\n        for (UIView *subView in footerView.subviews) {\n            [subView removeFromSuperview];\n        }\n        [footerView addSubview:self.tipLabel];\n        [self.tipLabel mas_makeConstraints:^(MASConstraintMaker *make) {\n            make.top.equalTo(footerView).offset(16);\n            make.left.equalTo(footerView).offset(16);\n        }];\n        return footerView;\n    }\n    UICollectionReusableView *headerView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:headerID forIndexPath:indexPath];\n    for (UIView *subView in headerView.subviews) {\n        [subView removeFromSuperview];\n    }\n    [headerView addSubview:self.titleLabel];\n    [self.titleLabel mas_makeConstraints:^(MASCo","infill":"itemWidth = ceilf((Screen_width - 56) / 3.0);\n        // flow","suffix":"Layout.itemSize = CGSizeMake(itemWidth, 36);\n        flowLayout.itemSize = CGSizeMake(itemWidth\n        _collectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flowLayout];\n        [_collectionView setBackgroundColor:FOREGROUND_COLOR_NORMAL theme:ThemeVersionNormal];\n        [_collectionView setBackgroundColor:FOREGROUND_COLOR_NIGHT theme:ThemeVersionNight];\n        _collectionView.delegate = self;\n        _collectionView.dataSource = self;\n        _collectionView.showsVerticalScrollIndicator = NO;\n        [_collectionView registerClass:[HXChiCangStockLabelCollectionViewCell class] forCellWithReuseIdentifier:cellID];\n        [_collectionView registerClass:[UICollectionReusableView class] forSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:headerID];\n         [_collectionView registerClass:[UICollectionReusableView class] forSupplementaryViewOfKind:UICollectionElementKindSectionFooter withReuseIdentifier:footerID];\n    }\n    return _collectionView;\n}\n\n- (UILabel *)titleLabel {\n    if (!_titleLabel) {\n        _titleLabel = [[UILabel alloc] init];\n        _titleLabel.text = @\"我的标签\";\n        _titleLabel.font = [UIFont hxf_pfscMedium:17];\n        [_titleLabel setTextColor:[UIColor hxct_colorWithHexString:@\"000000\" alpha:0.84] theme:ThemeVersionNormal];\n        [_titleLabel setTextColor:[UIColor hxct_colorWithHexString:@\"ffffff\" alpha:0.84] theme:ThemeVersionNight];\n    }\n    return _titleLabel;\n}\n\n- (UILabel *)tipLabel {\n    if (!_tipLabel) {\n        _tipLabel = [[UILabel alloc] init];\n        _tipLabel.text = HX_LOAD_TIPS(@\"设置标签页提醒\");\n        _tipLabel.numberOfLines = 0;\n        _tipLabel.font = [UIFont hxf_pfscRegular:12];\n        [_tipLabel setTextColor:[UIColor hxct_colorWithHexString:@\"000000\" alpha:0.4] theme:ThemeVersionNormal];\n        [_tipLabel setTextColor:[UIColor hxct_colorWithHexString:@\"ffffff\" alpha:0.4] theme:ThemeVersionNight];\n        [_tipLabel changeTheme];\n    }\n    return _tipLabel;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"HXChiCangStockLabelViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"nstraintMaker *make) {\n        make.top.equalTo(headerView).offset(16);\n        make.left.equalTo(headerView).offset(16);\n    }];\n    return headerView;\n}\n\n#pragma mark - Public\n-","deepseek-chat-lite":"nstraintMaker *make) {","CodeQwen2.5-7B":"nstraintMaker *make) {","copilot":"itemWidth = ceilf((Screen_width - 56) / 3.0);\n        // flow"}},{"prefix":"\n#import \"SearchStock.h\"\n#import <HXBase/EQUIWindow.h>\n#import \"EQLocaIdDef.h\"\n#include <AMIphoneBase/EQThreadManager.h>\n#import \"DebugMenu.h\"\n#include \"EQAppFrame.h\"\n\n#ifdef _COLLECT_USER_BEHAVIOR\n#endif\n\n#import <HXBase/PageView.h>\n#include \"AM_UI_VarKeyString.h\"\n#import <HXBase/AMUITabFm.h>\n#import <HXBase/NavigationControllEx.h>\n#import <HXBase/ViewControllerEx.h>\n#import \"tooles.h\"\n#import \"HXStockDetailContainerPublicProtocol.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import <HXTool/UIView+Extent.h>\n#import <HXBase/TabBarControllerEx.h>\n#import \"SnackBarView.h\"\n#import \"SSGGroupViewModel+DataSynchronization.h\"\n#import \"SSGGroupViewModel+Information.h\"\n#import \"SSGItemProtocol.h\"\n#import \"SSGStockInfoModel.h\"\n#import <HXBase/UIColor+Colours.h>\n#import \"AMMiddlePublicProxy+SelfStockEdit.h\"\n#import \"SearchStockBuryPoint.h\"\n#import \"NSString+AM.h\"\n#import <HXTool/NSString+Chinese.h>\n#import <HXTool/NSString+EmptyAndWhitespace.h>\n#import \"AMSQLPublicProxy.h\"\n#import \"HXVoiceAssistantManager.h\"\n#import \"IntelligentSearchStockHeaderView.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import <HXTool/UIView+RelativeLayout.h>\n#import \"HXSearchStockPublicDefine.h\"\n#import <HXShowTipComponent/ToastView.h>\n#import \"HXDBOperationManager.h\"\n#import \"HXSearchStockManager.h\"\n#import <LocalURLConfig/LocalURLConfig.h>\n#import \"HXDebugSwitchServerManager.h\"\n#import \"HXSelfStockDetailManager.h\"\n#import <Masonry/Masonry.h>\n#import \"HXWatchListEditGroupManager.h\"\n#import <HXWatchList/HXWatchlistModelAdaptation.h>\n#import <HXWatchlistGroupsDataProvider/HXWatchlistGroupsDataService.h>\n#import <HXWatchList/HXWatchList-Swift.h>\n#import <HXWatchlistGroupsDataProvider/HXWatch","infill":"listGroupsUGCTool.h>\r\n\r\n#ifdef _DEBUG\r\n#import <","suffix":"AMIphoneDebug/HXCBASDebugger.h>\r\n#endif\r\n\r\nNSString *const HXSearchStockResultProxyKey = @\"HXSearchStockResultProxyKey\";\r\nNSString *const HXHiddenZiXuanSwitchKey = @\"HXZiXuanSwitchKey\";\r\n\r\nstatic NSString * const kCustomGroupSearchStockHeaderViewIdentifier = @\"kCustomGroupSearchStockHeaderViewIdentifier\";\r\nstatic CGFloat const kHeightOfCustomGroupSearchStockHeaderView = 30.f;\r\nstatic NSString * const kIntelligentSearchStockHeaderViewIdentifier = @\"IntelligentSearchStockHeaderViewIdentifier\";\r\nstatic CGFloat const kHeightOfIntelligentSearchStockHeaderView = 44.0f;\r\nextern CEQAppFrame* EQGetAppFrame();\r\nextern EQBOOL CopyNSStringToEQString(NSString* pNsStr,CEQString16& pEQStringSave );\r\nextern NSString* CopyEQStringToNsString(CEQString16* pEQsrc);\r\nextern EQUIWindow* g_eqWindow;\r\nextern EQThreadManager* g_ThreadManager;\r\nextern CEQString16* CopyNSStringToNewEQString(NSString* pNsStr);\r\nextern CEQAppFrame* EQGetAppFrame();\r\nextern AMUIFrameWork* g_uiframeWork;\r\n\r\ntypedef NS_ENUM(NSInteger, StockCellIdentifier)\r\n{\r\n    kSearchGuide = 0,\r\n    kSearchStockNO = 1,\r\n    kSearchStockYes = 2,\r\n    kSearchClear = 3,\r\n    kSearchUnknow = 4\r\n};\r\n\r\n@interface SearchStock() <SearchEngineDelegate> {\r\n    UIView             * _helpView;\r\n    DebugMenu          *_debugMenu;\r\n    DevDebugMenu       *_DevDebugMenu;\r\n    HXDebugSwitchMenu  *_debugSwitchMenu;\r\n    UISearchBar        *_searchBar;\r\n    KeyBoardType       _keyBoardType;       // 键盘类型\r\n    CustomKeyboard     *_customKey;         // 自定义键盘20140814\r\n    SearchCoverView    *_leftConverView;\r\n    SearchCoverView    *_rightConverView;\r\n    FullScreenTipView  *_tipView;\r\n}\r\n\r\n@property (nonatomic, strong) NSString *selfSelectStock;\r\n@property (nonatomic, strong) NSTimer *timer;\r\n@property (nonatomic, assign,setter = setTableViewVisible:) BOOL tableViewVisible;\r\n@property (nonatomic, strong) NSString *currentPageStr; // 用于搜索页发送埋点\r\n@property (nonatomic,copy,readwrite) NSString *lastSearchText;//最新键盘输入的文本\r\n@property (nonatomic, assign, readonly) SearchStockPageCaller pageCaller;   /*! 页面调用者 */\r\n@property (nonatomic, strong) UIButton *pictureButton;\r\n\r\n@property (nonatomic, strong) HXWatchListEditGroupManager *groupManager;\r\n\r\n- (void)searchTextDidChange:(NSString*) text;\r\n//本地数据库搜索\r\n- (void)queryStockFromLocal:(NSTimer*)timer;\r\n// 跳转到选择股票的对应页面\r\n- (void)gotoPageWithStockCode:(NSString *)strNs stockName:(NSString *)strName market:(NSString *)strMarket;\r\n// 添加到自选\r\n- (void)setUITableViewCell:(SearchStockCell*) cell setIndex:(int) nIndex;\r\n- (void)openStockChart:(id) sender;\r\n- (UITableViewCell *)tableViewCellWithIdentifier:(StockCellIdentifier) cellIdentifier\r\n                                   formTableView:(UITableView *)tableView;\r\n\r\n-(void)prepareHelpView;\r\n@end\r\n\r\n//搜索次数\r\n#define kExpectFrequency 3\r\n@implementation SearchStock\r\n@synthesize _sqlQueryData = _sqlQueryData;\r\n@synthesize _tableView;\r\n@synthesize _labelMark;\r\n@synthesize _labelType;\r\n@synthesize tipImage = _tipImage;\r\n@synthesize tipLabel = _tipLabel;\r\n@synthesize searchBar = _searchBar;\r\n@synthesize add_ziXuan_StockCode;\r\n@synthesize lastSearchText = _lastSearchText;\r\n@synthesize selfSelectStock = _selfSelectStock;\r\n@synthesize timer = _timer;\r\n@synthesize tableViewVisible = _tableViewVisible;\r\n\r\n\r\n- (void)dealloc\r\n{\r\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\r\n    [_timer invalidate];\r\n\t_timer = nil;\r\n    searchSQL.delegate = nil;\r\n\r\n    self._tableView = nil;\r\n    [_searchBar setDelegate:nil];\r\n\t_debugMenu = nil;\r\n    self.searchBar = nil;\r\n\r\n    self.tipLabel = nil;\r\n    self.tipImage = nil;\r\n}\r\n\r\n\r\n- (void)showSelfStockLimit50 {\r\n    __block SearchStock *weakSelf = self;\r\n    [[SSGGroupViewModel shareInstance] selfStockInfosWithComplete:^(NSArray<SSGStockInfoModel *> *stockInfos) {\r\n        [weakSelf reloadTableWithSelfStockInfos:stockInfos];\r\n    }];\r\n\r\n}\r\n- (void)reloadTableWithSelfStockInfos:(NSArray<SSGStockInfoModel *> *)stockInfos {\r\n    _sqlQueryData = [[HXSqlData alloc] init];\r\n\r\n    [_sqlQueryData.fieldNameArr addObject:@\"name\"];\r\n    [_sqlQueryData.fieldNameArr addObject:@\"code\"];\r\n    [_sqlQueryData.fieldNameArr addObject:@\"pinyin\"];\r\n    [_sqlQueryData.fieldNameArr addObject:@\"market\"];\r\n    \r\n    \r\n    [stockInfos enumerateObjectsUsingBlock:^(SSGStockInfoModel *stockInfo, NSUInteger idx, BOOL *stop) {\r\n        NSArray *dataArr = @[stockInfo.stockName?:@\"\",\r\n                             stockInfo.stockID?:@\"\",\r\n                             @\" \",\r\n                             stockInfo.marketID?:@\"\"\r\n                             ];\r\n        [_sqlQueryData.queryDataArr addObject:dataArr];\r\n    }];\r\n    self.tableViewVisible = YES;\r\n    [_tableView reloadData];\r\n    \r\n}\r\n\r\n\r\n- (void)changeToCustomKeyboard\r\n{\r\n    [self searchStockKeyBoardShow];\r\n}\r\n\r\n//用户打开搜索界面次数\r\n- (bool) reachFrequency:(NSInteger) expect {\r\n    NSInteger num = 0;\r\n    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];\r\n    NSNumber *number = [userDefaults valueForKeyPath:@\"ReachFrequencyKey\"];\r\n    if (number != nil)\r\n    {\r\n        num = [number integerValue];\r\n        if (num >= expect)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    num += 1;\r\n    \r\n    [userDefaults setValue:[NSNumber numberWithInteger:num] forKey:@\"ReachFrequencyKey\"];\r\n    [userDefaults synchronize];\r\n    \r\n    return false;\r\n}\r\n\r\n-(void)processTextData:(CEQStuffTextStruct*)textData\r\n{\r\n    if(textData != nil)\r\n    {\r\n        CEQString16* strTip = textData->GetStrText();\r\n        NSString* str = CopyEQStringToNsString(strTip);\r\n        \r\n        _tipLabel.text = str;\r\n        \r\n        self.tableViewVisible = NO;\r\n    }\r\n}\r\n\r\n-(void)setData:(CEQStuffBaseStruct *)stuffData\r\n{\r\n    [self setParentViewWaitViewActivity:NO];\r\n    if(stuffData != NULL && stuffData->IsComplexTextData())\r\n\t{\r\n        \r\n        [self processTextData:(CEQStuffTextStruct*)stuffData];\r\n        \r\n\t}\r\n\telse if(stuffData != NULL &&stuffData->IsTableData())\r\n    {\r\n        CEQStuffTableStruct *tableData = (CEQStuffTableStruct*)stuffData;\r\n        _sqlQueryData = [[HXSqlData alloc] init];\r\n        CEQHashTable< CEQArrayPtr<CEQString16> > *pHashTableText = tableData->GetBodyText();\r\n        if (pHashTableText != NULL)\r\n        {\r\n            CEQArrayPtr<CEQString16> *pStrStockNameArray = pHashTableText->FindObj(SM_HQ_CODENAME);\r\n            CEQArrayPtr<CEQString16> *pStrStockCodeArray = pHashTableText->FindObj(SM_HQ_CODE);\r\n            CEQArrayPtr<CEQString16> *pStrMarketArray = pHashTableText->FindObj(SM_HQ_STOCK_MARKET_NEW);\r\n            if (pStrMarketArray == NULL || pStrMarketArray->GetSize() == 0) { // 4位市场适配：没有新值使用旧值兜底\r\n                pStrMarketArray = pHashTableText->FindObj(SM_HQ_STOCK_MARKET);\r\n            }\r\n            if(pStrStockNameArray !=NULL&& pStrStockCodeArray != NULL)\r\n            {\r\n                self.keyBoardCanSearch =  YES;\r\n                \r\n                //如果只有一条数据（非自选编辑），直接跳转\r\n                if(pStrStockCodeArray->GetSize() == 1&&![_labelMark.text isEqualToString:@\"can't select\"]&&![add_ziXuan_StockCode isEqualToString:@\"2201\"])\r\n                {\r\n                    CEQString16 *strCode = pStrStockCodeArray->GetAt(0);\r\n                    NSString *strText = CopyEQStringToNsString(strCode);\r\n                    CEQString16 *str16Name = pStrStockNameArray->GetAt(0);\r\n                    NSString *strName = CopyEQStringToNsString(str16Name);\r\n                    CEQString16 *str16Market = pStrMarketArray->GetAt(0);\r\n                    NSString *strMarket = CopyEQStringToNsString(str16Market);\r\n                    if (_keyBoardType == KeyBoard_StockWarning) {\r\n                        NSMutableDictionary* dicParams = [NSMutableDictionary dictionaryWithCapacity:1];\r\n                        if (","relevantFile":"","relevantFileList":[],"filePath":"SearchStock.mm","template":"objective-cpp","multiRes":{"hipilot":"WatchlistGroupsDataService.h>\n\n#ifdef DEBUG\n#import <HX","deepseek-chat-lite":"listGroupsDataProvider-Swift.h>","CodeQwen2.5-7B":"listGroupsDataProvider.h>","copilot":"listGroupsUGCTool.h>\r\n\r\n#ifdef _DEBUG\r\n#import <"}},{"prefix":"    }\n    \n    [_dataSource addObject:_detailModel];\n    self.refreshBlock = params[@\"refreshBlock\"];\n}\n\n- (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n    //设置下方的cell需要使用那种cellModel\n    [self setTheDownCellModelWith:_detailModel];\n    if ([WTNoteExtendJournalTool isSupportConditionalJournal]) {\n        [self searchCOJournalIfNeed];\n    }\n    //调整SubViews位置大小\n    [self updateSubViewsFrame];\n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    [ClientUserBehaviorLog initializeViewLogAttributes:self.view marketId:nil];\n    [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:WT_CBAS_OBJ_TIAOJIANDAN_TRIGGERED_DETAIL]];\n}\n\n- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n}\n\n- (void)viewDidDisappear:(BOOL)animated {\n    [super viewDidDisappear:animated];\n    [_todayWTFetcher pause];\n    [_historyWTFetcher pause];\n    [_rzrqTodayWTFetcher pause];\n    [_rzrqHistoryWTFetcher pause];\n    [_rzrqXCSHistoryWTFetcher pause];\n}\n\n- (void)initDataSource{\n    self.dataSource = [[NSMutableArray alloc] init];\n}\n\n- (void)initSubViews {\n    [self.view addSubview:self.stretchView];\n\n    [self.view addSubview:self.tableView];\n}\n\n- (void)updateSubViewsFrame {\n    BOOL hasReboot = (_detailModel.billDetailDataCOModel.conditiontype != HXCOConditionTypeSJ && _detailModel.billDetailDataCOModel.entrusttype != HXCOEntrustTypeShares &&\n        _detailModel.billDetailDataCOModel.conditiontype != HXCOConditionTypeSubGZNHG && _detailModel.billDetailDataCOModel.conditiontype != HXCOConditionTypeSubETFDT && _detailModel.billDetailDataCOModel.conditiontype != HXCOConditionTypeTypeCGHLZD && _detailModel.billDetailDataCOModel.conditiontype != HXCOConditionTypeGridSub && _detailModel.billDetailDataCOModel.conditiontype != HXCOConditionTypeCJQDSub);\n    _rebootBttomView = [[HXMyCODetailBottomView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, KBottomViewHeight + SAFEAREA_BOTTOM_MARGIM_V) hasReboot:hasReboot];\n    _rebootBttomView.delegate = self;\n    [self.view addSubview:_rebootBttomView];\n    [_rebootBttomView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.right.equalTo(self.view);\n        make.height.mas_equalTo(KBottomViewHeight + SAFEAREA_BOTTOM_MARGIM_V);\n        make.bottom.equalTo(self.view);\n    }];\n    [_tableView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.right.top.equalTo(self.view);\n        make.bottom.equalTo(_rebootBttomView.mas_top);\n    }];\n}\n\n- (UIView *)footViewForTableView {\n    if (self.detailModel.billDetailDataCOModel.conditiontype == HXCOConditionTypeCJQDSub) {\n        HXConditionTipFooterView *footerView = [[HXConditionTipFooterView alloc] initWithType:HXCOConditionTypeCJQD];\n        [footerView setTipLabelTop:8.f];\n        return footerView;\n    }\n    UIView *footView = [[UIView alloc] initWithFrame:CGRectMake(0.f, 0.f, Screen_width, KFooterViewHeight)];\n    footView.backgroundColor = [UIColor clearColor];\n    \n    return footView;\n}\n\n#pragma mark - Private Method\n\n- (void)setTheDownCellModelWith:(HXDetailInfoModel *)model {\n    //根据信息判断该笔条件单处于何种状态  (当日未确认，历史未确认，当日已确认，历史已确认，未同意资产分析协议)\n    HXTriggerDetailCOType type = [self getTriggerDetailCOType:model.billDetailDataCOModel];\n    \n    self.canNotRequestWT = (model.billDetailDataCOModel.entrustmode == HXCOEntrustModeFullAuto) && ([_detailModel.billDetailDataCOModel.execinfo.entrust_status isEqualToString:@\"4\"] || [_detailModel.billDetailDataCOModel.execinfo.entrust_status isEqualToString:@\"15\"]);\n    \n    if (!_downCellModel) {\n        _downCellModel = [[HXTriggerDetailCOCellModel alloc] initWithType:type andConditionType:model.billDetailDataCOModel.conditiontype];\n        _downCellModel.entrustmode = model.billDetailDataCOModel.entrustmode;\n    } else {\n        _downCellModel.triggerCOType = type;\n        _downCellModel.conditionType = model.billDetailDataCOModel.conditiontype;\n        _downCellModel.entrustmode = model.billDetailDataCOModel.entrustmode;\n    }\n\n    _downCellModel.isQuickAccount = [WTQuickCounterServiceChannelManager isQuickCounterCondition];\n    \n    if (!_failedCellModel) {\n        _failedCellModel = [[HXFailedDetailCOCellModel alloc] init];\n        _failedCellModel.billDetailDataCOModel = self.detailModel.billDetailDataCOModel;\n    } else {\n        _failedCellModel.billDetailDataCOModel = self.detailModel.billDetailDataCOModel;\n    }\n\n    BOOL isQuickCounterCondition = [WTQuickCounterServiceChannelManager isQuickCounterCondition];\n    if (type == HXTriggerDetailCOTypeCJQD) {\n        [self cjqdRequetWtDeal];\n    } else if (type == HXTriggerDetailCOTypeTodayConfirm) {\n        if (isQuickCounterCondition) {\n            [self requestTodayWTDataFromQuickCounter];\n        } else {\n            WTAMLogDebug(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_QUICK_COUNTER_DEMOTION, @\"requestTodayWTData\");\n            if ([HXConditionalOrderDataManager isRZRQConditionalOrder]) {\n                [self requestRZRQTodayWTData];\n            } else {\n                [self requestTodayWTData];\n            }\n        }\n        [self fetchAutoFailedAndUnConfirmDataIsQuickAccount:[WTQuickCounterServiceChannelManager isQuickCounterCondition]];\n    } else if (type == HXTriggerDetailCOTypeHistoryConfirm) {\n        if (isQuickCounterCondition) {\n            [self requestHistoryWTDataFromQuickCounter];\n        } else {\n            WTAMLogDebug(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_QUICK_COUNTER_DEMOTION, @\"requestHistoryWTData\");\n            //两融小财神接口未做\n            if ([HXConditionalOrderDataManager isRZRQConditionalOrder]) {\n                [self showNoWtDataCellWithType:HXTriggerDetailCOTypeNone];\n            } else {\n                [self requestHistoryWTData];\n            }\n        }\n        [self fetchAutoFailedAndUnConfirmDataIsQuickAccount:[WTQuickCounterServiceChannelManager isQuickCounterCondition]];\n    } else if (type == HXTriggerDetailCOTypeTodayNoConfirm) {\n        [self showNoWtDataCellWithType:HXTriggerDetailCOTypeTodayNoConfirm];\n    } else if (type == HXTriggerDetailCOTypeHistoryNoConfirm) {\n        [self showNoWtDataCellWithType:HXTriggerDetailCOTypeHistoryNoConfirm];\n    } else if (type == HXTriggerDetailCOTypeNoAgreeProtocol) {\n        [self showNoWtDataCellWithType:HXTriggerDetailCOTypeNoAgreeProtocol];\n    } else if (type == HXTriggerDetailCOTypeHistoryNoResult) {\n        //两融小财神接口未做，不需job轮询\n        if ([HXConditionalOrderDataManager isRZRQConditionalOrder]) {\n            [self showNoWtDataCellWithType:HXTriggerDetailCOTypeNone];\n        } else {\n            [self sendDownloadRequest];\n            [self showNoWtDataCellWithType:HXTriggerDetailCOTypeHistoryNoResult];\n        }\n    } else {\n        [self fetchAutoFailedAndUnConfirmDataIsQuickAccount:[WTQuickCounterServiceChannelManager isQuickCounterCondition]];\n    }\n}\n\n- (void)cjqdRequetWtDeal {\n    if ([WTQuickCounterServiceChannelManager isQuickCounterCondition]) {\n        WeakObj(self);\n        [self.cjqdViewModel requestCJQDWTDetail:self.dataSource dataModel:_detailModel.billDetailDataCOModel success:^(NSArray * _Nonnull arr) {\n            selfWeak.dataSource = [NSMutableArray arrayWithArray:arr];\n            [selfWeak.tableView reloadData];\n        } failed:^(NSArray * _Nonnull arr) {\n            selfWeak.dataSource = [NSMutableArray arrayWithArray:arr];\n            [selfWeak.tableView reloadData];\n        }];\n    }\n}\n\n- (void)fetchAutoFailedAndUnConfirmDataIsQuickAccount:(BOOL)isQucikAccount {\n    if ([_detailModel.billDetailDataCOModel.execinfo.entrust_status isEqualToString:@\"15\"] && _detailModel.billDetailDataCOModel.entrustmode == HXCOEntrustModeFullAuto) {\n        [self fillSeparateCOModel];\n    }\n}\n\n- (HXTriggerDetailCOType)getTriggerDetailCOType:(HXChaXunBillDetailDataCOModel *)model {\n    if (model.conditiontype == HXCOConditionTypeCJQDSub) {\n        return HXTriggerDetailCOTypeCJQD;\n    }\n    if ([model.execinfo.confirm_flag isEqualToString:@\"0\"]) {\n        if (model","infill":"eData = (StuffTableModel *)data;\n                    tableData.\n         ","suffix":"       }\n                if ([data modelType] == StuffModelTypeTable) {\n                    [selfWeak receiveTodayRequestTableData:(StuffBaseModel *)data];\n                } else {\n                    if ([TJiaoYiRiSearchModel isNowDateAfter1500]) {\n                        //请求历史委托中的当日数据\n                        [selfWeak requestRZRQTodayHistoryWTData];\n                    } else {\n                        [selfWeak showNoWtDataCellWithType:HXTriggerDetailCOTypeTodayConfirm];\n                        if ([data modelType] == StuffModelTypeText) {\n                            StuffTextModel *textData = (StuffTextModel *)data;\n                            [AMUIPublicProxy showTipAutoClose:textData.text];\n                        } else {\n                            [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"返回数据类型错误，无法解析\")];\n                        }\n                    }\n                }\n            } else {\n                [selfWeak showNoWtDataCellWithType:HXTriggerDetailCOTypeTodayConfirm];\n                if ([error.userInfo thsStringForKey:@\"errorMessageKey\"].length > 0) {\n                    [AMUIPublicProxy showTipAutoClose:[error.userInfo thsStringForKey:@\"errorMessageKey\"]];\n                } else {\n                    [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"请求出现未知错误\")];\n                }\n                [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_TRIGGERED_DETAIL, @\"error.tod\")] actionType:NoneAction];\n            }\n        }];\n        [_rzrqTodayWTFetcher start];\n    } else {\n        _rzrqTodayWTFetcher.request.paramsDict = paramDic;\n        [_rzrqTodayWTFetcher pause];\n        [_rzrqTodayWTFetcher resume];\n    }\n    \n}\n\n//查询两融当日的历史委托数据，用于显示券商清算后的当日委托数据\n- (void)requestRZRQTodayHistoryWTData {\n    if (![self checkNetWorkAble:HXTriggerDetailCOTypeTodayConfirm]) {\n        return;\n    }\n\n    NSString *beginAndEndDate = _detailModel.billDetailDataCOModel.execinfo.entrust_date;\n    NSDictionary *paramDic = @{@\"ctrlcount\": @\"2\",@\"ctrlid_0\": @\"36633\", @\"ctrlvalue_0\": beginAndEndDate, @\"ctrlid_1\": @\"36634\", @\"ctrlvalue_1\": beginAndEndDate, @\"reqctrl\": @\"2026\"};\n    if (!_rzrqHistoryWTFetcher) {\n        HXWTSocketRequest *request = [[HXWTSocketRequest alloc] initWithProtocolId:KProtocalID_RZRQ_Today_Weituo paramsDict:paramDic pageId:PAGE_RZRQ_WT_HISTORY_QUERY];\n        request.timeoutInterval = 10.0f;\n        WeakObj(self);\n        _rzrqHistoryWTFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n            if (!error && data) {\n                if ([data modelType] == StuffModelTypeTable) {\n                    [selfWeak receiveRZRQHistoryRequestTableData:(StuffBaseModel *)data];\n                } else {\n                    [selfWeak showNoWtDataCellWithType:HXTriggerDetailCOTypeTodayConfirm];\n                    if ([data modelType] == StuffModelTypeText) {\n                        StuffTextModel *textData = (StuffTextModel *)data;\n                        [AMUIPublicProxy showTipAutoClose:textData.text];\n                    } else {\n                        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"返回数据类型错误，无法解析\")];\n                    }\n                }\n            } else {\n                [selfWeak showNoWtDataCellWithType:HXTriggerDetailCOTypeTodayConfirm];\n                if ([error.userInfo thsStringForKey:@\"errorMessageKey\"].length > 0) {\n                    [AMUIPublicProxy showTipAutoClose:[error.userInfo thsStringForKey:@\"errorMessageKey\"]];\n                } else {\n                    [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"请求出现未知错误\")];\n                }\n                [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(WT_CBAS_OBJ_TIAOJIANDAN_TRIGGERED_DETAIL, @\"error.tod\")] actionType:NoneAction];\n            }\n        }];\n        [_rzrqHistoryWTFetcher start];\n    } else {\n        _rzrqHistoryWTFetcher.request.paramsDict = paramDic;\n        [_rzrqHistoryWTFetcher pause];\n        [_rzrqHistoryWTFetcher resume];\n    }\n\n}\n\n- (void)receiveRZRQHistoryRequestTableData:(StuffBaseModel *)data {\n    if (data.structType != StuffModelTypeTable) {\n        return;\n    }\n    _chaXunWTModel = [self.presenter transferRZRQTodayHistoryWTDataToModel:(StuffTableModel *)data coDetailModel:_detailModel.billDetailDataCOModel];\n    _downCellModel.chaXunWTCOModel = _chaXunWTModel;\n    [self fillSeparateCOModel];\n    if (self.stockRefreshBlock) {\n        self.stockRefreshBlock();\n    }\n    [self reloadData];\n}\n\n#pragma mark - QuickCounter Request and Receive Method\n- (void)requestTodayWTDataFromQuickCounter {\n    WTAMLogDebug(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_QUICK_COUNTER_DEMOTION, @\"requestTodayWTDataFromQuickCounter\");\n    if (![self checkNetWorkAble:HXTriggerDetailCOTypeTodayConfirm]) {\n        return;\n    }\n    WeakObj(self);\n    [HXConditionalOrderDataManager requestConditionalOrderDataWithPageId:PAGE_CONDITIONALORDER_TRIGGERED_DE params:[self generateWTDataFromQuickCountRequestParams] resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        if (responseModel.error) {\n            [selfWeak showNoWtDataCellWithType:HXTriggerDetailCOTypeTodayConfirm];\n            [AMUIPublicProxy showTipAutoClose:responseModel.error.message];\n        } else {\n            [selfWeak receiveTodayWTDataFromQuickCounter:responseModel.result];\n        }\n    }];\n}\n\n- (void)receiveTodayWTDataFromQuickCounter:(NSDictionary *)receiveData {\n    if (receiveData && [receiveData isKindOfClass:[NSDictionary class]]) {\n        \n        _chaXunWTModel = [self.presenter transferWTDataFromQuickCounterToModel:receiveData coDetailModel:_detailModel.billDetailDataCOModel];\n        _downCellModel.chaXunWTCOModel = _chaXunWTModel;\n        [self fillSeparateCOModel];\n        if (self.stockRefreshBlock) {\n            self.stockRefreshBlock();\n        }\n        \n        [self reloadData];\n    } else {\n        [self showNoWtDataCellWithType:HXTriggerDetailCOTypeTodayConfirm];\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"返回数据类型错误，无法解析\")];\n    }\n}\n\n- (void)requestHistoryWTDataFromQuickCounter {\n    WTAMLogDebug(WT_LOG_MODULE_SERVER, WT_LOG_KEYWORDS_QUICK_COUNTER_DEMOTION, @\"requestHistoryWTDataFromQuickCounter\");\n    if (![self checkNetWorkAble:HXTriggerDetailCOTypeHistoryConfirm]) {\n        return;\n    }\n    \n    WeakObj(self);\n    [HXConditionalOrderDataManager requestConditionalOrderDataWithPageId:PAGE_CONDITIONALORDER_TRIGGERED_DE params:[self generateWTDataFromQuickCountRequestParams] resultBlock:^(HXResponseCOModel * _Nonnull responseModel) {\n        if (responseModel.error) {\n            [selfWeak showNoWtDataCellWithType:HXTriggerDetailCOTypeHistoryConfirm];\n            [AMUIPublicProxy showTipAutoClose:responseModel.error.message];\n        } else {\n            [selfWeak receiveHistoryWTDataFromQuickCounter:responseModel.result];\n        }\n    }];\n}\n\n- (void)receiveHistoryWTDataFromQuickCounter:(NSDictionary *)receiveData {\n    if (receiveData && [receiveData isKindOfClass:[NSDictionary class]]) {\n        _chaXunWTModel = [self.presenter transferWTDataFromQuickCounterToModel:receiveData coDetailModel:_detailModel.billDetailDataCOModel];\n        _downCellModel.chaXunWTCOModel = _chaXunWTModel;\n        [self fillSeparateCOModel];\n        [self reloadData];\n    } else {\n        [self showNoWtDataCellWithType:HXTriggerDetailCOTypeHistoryConfirm];\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"返回数据类型错误，无法解析\")];\n    }\n}\n\n- (NSDictionary *)generateWTDataFromQuickCountRequestParams {\n    NSString *brokerid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].yybId ?: @\"\";\n    NSString *clientid = [[HXWTAccountManager sharedInstance] getCurAccountInfor].zjzh ?: @\"\";\n    NSString *conditionno = _detailModel.billDetailDataCOModel.conditionno ? : @\"\";\n    NSInteger triggerDate = _detailModel.","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":".execinfo.entrust_status.integerValue == 1) {\n            return HXTriggerDetailCOTypeHistoryConfirm;\n        } else {\n            return HXTriggerDetailCOTypeTodayNoConfirm;\n        }\n    } else {","deepseek-chat-lite":".execinfo.entrust_date.length > 0) {","CodeQwen2.5-7B":".execinfo.entrust_status == @\"15\") {","copilot":"eData = (StuffTableModel *)data;\n                    tableData.\n         "}},{"prefix":"\n#import \"SearchStock.h\"\n#import <HXBase/EQUIWindow.h>\n#import \"EQLocaIdDef.h\"\n#include <AMIphoneBase/EQThreadManager.h>\n#import \"DebugMenu.h\"\n#include \"EQAppFrame.h\"\n\n#ifdef _COLLECT_USER_BEHAVIOR\n#endif\n\n#import <HXBase/PageView.h>\n#include \"AM_UI_VarKeyString.h\"\n#import <HXBase/AMUITabFm.h>\n#import <HXBase/NavigationControllEx.h>\n#import <HXBase/ViewControllerEx.h>\n#import \"tooles.h\"\n#import \"HXStockDetailContainerPublicProtocol.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import <HXTool/UIView+Extent.h>\n#import <HXBase/TabBarControllerEx.h>\n#import \"SnackBarView.h\"\n#import <HXBase/UIColor+Colours.h>\n#import \"AMMiddlePublicProxy+SelfStockEdit.h\"\n#import \"SearchStockBuryPoint.h\"\n#import \"NSString+AM.h\"\n#import <HXTool/NSString+Chinese.h>\n#import <HXTool/NSString+EmptyAndWhitespace.h>\n#import \"AMSQLPublicProxy.h\"\n#import \"HXVoiceAssistantManager.h\"\n#import \"IntelligentSearchStockHeaderView.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import <HXTool/UIView+RelativeLayout.h>\n#import \"HXSearchStockPublicDefine.h\"\n#import <HXShowTipComponent/ToastView.h>\n#import \"HXDBOperationManager.h\"\n#import \"HXSearchStockManager.h\"\n#import <LocalURLConfig/LocalURLConfig.h>\n#import \"HXDebugSwitchServerManager.h\"\n#import \"HXSelfStockDetailManager.h\"\n#import <Masonry/Masonry.h>\n#import \"HXWatchListEditGroupManager.h\"\n#import <HXWatchlistGroupsDataProvider/HXWatchlistGroupsDataService.h>\n#import <HXWatchlistGroupsDataProvider/HXDefaultWatchlistGroupModel.h>\n#import <HXWatchlistGroupsDataProvider/HXWatchlistGroupsUGCTool.h>\n#import <HXWatchlistGroupsDataProvider/HXWatchlistModelAdaptation.h>\n#import <HXClotho/HXClotho.h>\n#import \"HXSimplifyRequest.h\"\n\n#ifdef _DEBUG\n#import <AMIphoneDebug/HXCBASDebugger.h>\n#endif\n\nNSString *const HXSearchStockResultProxyKey = @\"HXSearchStockResultProxyKey\";\nNSString *const HXHiddenZiXuanSwitchKey = @\"HXZiXuanSwitchKey\";\n\nstatic NSString * const kCustomGroupSearchStockHeaderViewIdentifier = @\"kCustomGroupSearchStockHeaderViewIdentifier\";\nstatic CGFloat const kHeightOfCustomGroupSearchStockHeaderView = 30.f;\nstatic NSString * const kIntelligentSearchStockHeaderViewIdentifier = @\"IntelligentSearchStockHeaderViewIdentifier\";\nstatic CGFloat const kHeightOfIntelligentSearchStockHeaderView = 44.0f;\nextern CEQAppFrame* EQGetAppFrame();\nextern EQBOOL CopyNSStringToEQString(NSString* pNsStr,CEQString16& pEQStringSave );\nextern NSString* CopyEQStringToNsString(CEQString16* pEQsrc);\nextern CEQString16* CopyNSStringToNewEQString(NSString* pNsStr);\nextern AMUIFrameWork* g_uiframeWork;\n\ntypedef NS_ENUM(NSInteger, StockCellIdentifier)\n{\n    kSearchGuide = 0,\n    kSearchStockNO = 1,\n    kSearchStockYes = 2,\n    kSearchClear = 3,\n    kSearchUnknow = 4\n};\n\n@interface SearchStock() <SearchEngineDelegate> {\n    UIView             * _helpView;\n    DebugMenu          *_debugMenu;\n    DevDebugMenu       *_DevDebugMenu;\n    HXDebugSwitchMenu  *_debugSwitchMenu;\n    UISearchBar        *_searchBar;\n    KeyBoardType       _keyBoardType;       // 键盘类型\n    CustomKeyboard     *_customKey;         // 自定义键盘20140814\n    SearchCoverView    *_leftConverView;\n    SearchCoverView    *_rightConverView;\n    FullScreenTipView  *_tipView;\n}\n\n@property (nonatomic, strong) NSString *selfSelectStock;\n@property (nonatomic, strong) NSTimer *timer;\n@property (nonatomic, assign,setter = setTableViewVisible:) BOOL tableViewVisible;\n@property (nonatomic, strong) NSString *currentPageStr; // 用于搜索页发送埋点\n@property (nonatomic,copy,readwrite) NSString *lastSearchText;//最新键盘输入的文本\n@property (nonatomic, assign, readonly) SearchStockPageCaller pageCaller;   /*! 页面调用者 */\n@property (nonatomic, strong) UIButton *pictureButton;\n@property (nonatomic, strong) HXWatchListEditGroupManager *groupManager;\n@property (nonatomic, strong) HXSimplifyRequest *simplifyRequest;\n\n- (void)searchTextDidChange:(NSString*) text;\n//本地数据库搜索\n- (void)queryStockFromLocal:(NSTimer*)timer;\n// 跳转到选择股票的对应页面\n- (void)gotoPageWithStockCode:(NSString *)strNs stockName:(NSString *)strName market:(NSString *)strMarket;\n// 添加到自选\n- (void)setUITableViewCell:(SearchStockCell*) cell setIndex:(int) nIndex;\n- (void)openStockChart:(id) sender;\n- (UITableViewCell *)tableViewCellWithIdentifier:(StockCellIdentifier) cellIdentifier\n                                   formTableView:(UITableView *)tableView;\n\n-(void)prepareHelpView;\n@end\n\n//搜索次数\n#define kExpectFrequency 3\n@implementation SearchStock\n@synthesize _sqlQueryData = _sqlQueryData;\n@synthesize _tableView;\n@synthesize _labelMark;\n@synthesize _labelType;\n@synthesize tipImage = _tipImage;\n@synthesize tipLabel = _tipLabel;\n@synthesize searchBar = _searchBar;\n@synthesize add_ziXuan_StockCode;\n@synthesize lastSearchText = _lastSearchText;\n@synthesize selfSelectStock = _selfSelectStock;\n@synthesize timer = _timer;\n@synthesize tableViewVisible = _tableViewVisible;\n\n\n- (void)dealloc\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    [_timer invalidate];\n\t_timer = nil;\n    searchSQL.delegate = nil;\n\n    self._tableView = nil;\n    [_searchBar setDelegate:nil];\n\t_debugMenu = nil;\n    self.searchBar = nil;\n\n    self.tipLabel = nil;\n    self.tipImage = nil;\n}\n\n- (void)showSelfStockLimit50 {\n    HXDefaultWatchlistGroupModel *groupModel = [[HXWatchlistGroupsDataService.shared findDefaultWatchlistGroupProvider] getWatchlistGroupWithId:HXWatchlistGroupsUGCTool.selfCodeGroupId];\n    NSArray<HXUGCSelfStockModel *>*securities = groupModel.getAllGroupSecurities;\n    if (securities.count > 50) {\n        securities = [securities subarrayWithRange:NSMakeRange(0, 50)];\n    }\n    int pageID = self.pageId == 0 ? EQLOCAL_NODE_ID_FRAME_ADD_STOCK : self.pageId;\n    _simplifyRequest = [[HXSimplifyRequest alloc] initWithTarget:self selector:@selector(reloadTableWithSelfStockInfos:)];\n    [_simplifyRequest stockGroupRequestSimplifyStocksPageId:pageID\n                                                        Protocol:1264   /// 精简请求protocolID\n                                                          sortId:-1     /// 无排序类型\n                                                       sortOrder:1      /// 无排序顺序\n                                                        startRow:0      /// 从第一列开始获取\n                                                       // stockList:[HXWatchlistModelAdaptation stoc","infill":"kListTextWithSecurities:securities]\r\n                                                       stockList:[HXWatchlistModelAdaptation stoc","suffix":"kListTextWithSecurities\r\n                                                      marketList:[GroupInfoModel marketListTextWithStockInfos:stockInfoArray]];\r\n}\r\n\r\n- (void)reloadTableWithSelfStockInfos:(NSDictionary *)stockInfoDictionary {\r\n    // 每次请求后清空请求 等下次请求时重新创建 更新instanceId 存在问题：超时若其他原因不进当前处理闭包，会导致获取的数据为缓存数据\r\n    _simplifyRequest = nil;\r\n    NSArray *stockCodeArr = stockInfoDictionary[@\"code\"];\r\n    NSArray *stockNameArr = stockInfoDictionary[@\"name\"];\r\n    NSArray *stockMarketArr = stockInfoDictionary[@\"market\"];\r\n\r\n    NSMutableArray<SSGStockInfoModel *> *stockInfos = [@[] mutableCopy];\r\n    if (stockCodeArr.count < stockNameArr.count || stockCodeArr.count < stockMarketArr.count) {\r\n        return;\r\n    }\r\n    _sqlQueryData = [[HXSqlData alloc] init];\r\n\r\n    [_sqlQueryData.fieldNameArr addObject:@\"name\"];\r\n    [_sqlQueryData.fieldNameArr addObject:@\"code\"];\r\n    [_sqlQueryData.fieldNameArr addObject:@\"pinyin\"];\r\n    [_sqlQueryData.fieldNameArr addObject:@\"market\"];\r\n    [stockCodeArr enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {\r\n        NSString *stockName = stockNameArr[idx];\r\n        NSString *stockCode = stockCodeArr[idx];\r\n        NSString *marketId = stockMarketArr[idx];\r\n        NSArray *dataArr = @[stockName?:@\"\",\r\n                             stockCode?:@\"\",\r\n                             @\" \",\r\n                             marketId?:@\"\"\r\n                             ];\r\n        [_sqlQueryData.queryDataArr addObject:dataArr];\r\n    }];\r\n    self.tableViewVisible = YES;\r\n    [_tableView reloadData];\r\n}\r\n\r\n- (void)changeToCustomKeyboard\r\n{\r\n    [self searchStockKeyBoardShow];\r\n}\r\n\r\n//用户打开搜索界面次数\r\n- (bool) reachFrequency:(NSInteger) expect {\r\n    NSInteger num = 0;\r\n    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];\r\n    NSNumber *number = [userDefaults valueForKeyPath:@\"ReachFrequencyKey\"];\r\n    if (number != nil)\r\n    {\r\n        num = [number integerValue];\r\n        if (num >= expect)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    num += 1;\r\n    \r\n    [userDefaults setValue:[NSNumber numberWithInteger:num] forKey:@\"ReachFrequencyKey\"];\r\n    [userDefaults synchronize];\r\n    \r\n    return false;\r\n}\r\n\r\n-(void)processTextData:(CEQStuffTextStruct*)textData\r\n{\r\n    if(textData != nil)\r\n    {\r\n        CEQString16* strTip = textData->GetStrText();\r\n        NSString* str = CopyEQStringToNsString(strTip);\r\n        \r\n        _tipLabel.text = str;\r\n        \r\n        self.tableViewVisible = NO;\r\n    }\r\n}\r\n\r\n-(void)setData:(CEQStuffBaseStruct *)stuffData\r\n{\r\n    [self setParentViewWaitViewActivity:NO];\r\n    if(stuffData != NULL && stuffData->IsComplexTextData())\r\n\t{\r\n        \r\n        [self processTextData:(CEQStuffTextStruct*)stuffData];\r\n        \r\n\t}\r\n\telse if(stuffData != NULL &&stuffData->IsTableData())\r\n    {\r\n        CEQStuffTableStruct *tableData = (CEQStuffTableStruct*)stuffData;\r\n        _sqlQueryData = [[HXSqlData alloc] init];\r\n        CEQHashTable< CEQArrayPtr<CEQString16> > *pHashTableText = tableData->GetBodyText();\r\n        if (pHashTableText != NULL)\r\n        {\r\n            CEQArrayPtr<CEQString16> *pStrStockNameArray = pHashTableText->FindObj(SM_HQ_CODENAME);\r\n            CEQArrayPtr<CEQString16> *pStrStockCodeArray = pHashTableText->FindObj(SM_HQ_CODE);\r\n            CEQArrayPtr<CEQString16> *pStrMarketArray = pHashTableText->FindObj(SM_HQ_STOCK_MARKET_NEW);\r\n            if (pStrMarketArray == NULL || pStrMarketArray->GetSize() == 0) { // 4位市场适配：没有新值使用旧值兜底\r\n                pStrMarketArray = pHashTableText->FindObj(SM_HQ_STOCK_MARKET);\r\n            }\r\n            if(pStrStockNameArray !=NULL&& pStrStockCodeArray != NULL)\r\n            {\r\n                self.keyBoardCanSearch =  YES;\r\n                \r\n                //如果只有一条数据（非自选编辑），直接跳转\r\n                if(pStrStockCodeArray->GetSize() == 1&&![_labelMark.text isEqualToString:@\"can't select\"]&&![add_ziXuan_StockCode isEqualToString:@\"2201\"])\r\n                {\r\n                    CEQString16 *strCode = pStrStockCodeArray->GetAt(0);\r\n                    NSString *strText = CopyEQStringToNsString(strCode);\r\n                    CEQString16 *str16Name = pStrStockNameArray->GetAt(0);\r\n                    NSString *strName = CopyEQStringToNsString(str16Name);\r\n                    CEQString16 *str16Market = pStrMarketArray->GetAt(0);\r\n                    NSString *strMarket = CopyEQStringToNsString(str16Market);\r\n                    if (_keyBoardType == KeyBoard_StockWarning) {\r\n                        NSMutableDictionary* dicParams = [NSMutableDictionary dictionaryWithCapacity:1];\r\n                        if (strText != nil)\r\n                        {\r\n                            [dicParams setObject:strText forKey:@\"stockCode\"];\r\n                        }\r\n                        \r\n                        [_pageData removeObjectForKey:@\"SearchModel\"];\r\n                        AM_UI_Public_Proxy::GogoPageWithIdAndParams(PAGE_ADDWARNING, dicParams);\r\n                    }\r\n                    else\r\n                    {\r\n                        if(strText)\r\n                        {\r\n                            //AM_UI_Public_Proxy::ClosePopPagesWithAnimation(NO);\r\n                            [self gotoPageWithStockCode:strText stockName:strName market:strMarket];// 跳转到选择股票的对应页面\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    [_sqlQueryData.fieldNameArr addObject:@\"name\"];\r\n                    [_sqlQueryData.fieldNameArr addObject:@\"code\"];\r\n                    [_sqlQueryData.fieldNameArr addObject:@\"pinyin\"];\r\n                    \r\n                    \r\n                    for(int i=0; i < pStrStockNameArray->GetSize()&& i < pStrStockCodeArray->GetSize(); i++)\r\n                    {\r\n                        CEQString16 *strName = new CEQString16(*(pStrStockNameArray->GetAt(i)));\r\n                        CEQString16 *strCode = new CEQString16(*(pStrStockCodeArray->GetAt(i)));\r\n                        \r\n                        CEQString16 *strPinyin = new CEQString16();\r\n                        *strPinyin = \" \";\r\n                        NSString *name = CopyEQStringToNsString(strName);\r\n                        NSString *code = CopyEQStringToNsString(strCode);\r\n                        NSString *pinYin = CopyEQStringToNsString(strPinyin);\r\n                        NSArray *data = @[name?:@\"\",code?:@\"\",pinYin?:@\"\"];\r\n                        [_sqlQueryData.queryDataArr addObject:data];\r\n                        \r\n                    }\r\n                    \r\n                    [_tableView reloadData];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n- (void) openStockChart: (id) sender {\r\n    if(self.keyBoardCanSearch)\r\n    {\r\n        NSIndexPath *index =  [NSIndexPath indexPathForRow:userFlag.needGuide + 0 inSection:0];\r\n        [self tableView:_tableView didSelectRowAtIndexPath: index];\r\n    }\r\n}\r\n\r\n- (void)addStockCodeResult:(HXUGCSelfStockModel *)model {\r\n    // 添加自选成功\r\n    [_tableView reloadData];\r\n\r\n    if (self.pageCaller & SearchStockPageCallerOthers) {\r\n        BOOL isHasPlateGroups = [HXWatchlistGroupsDataService.shared findCustomGroupProvider].getAllWatchlistGroups.count > 0;\r\n        if (isHasPlateGroups && model) { // 用户有多个分组 且能取到model\r\n            __block typeof(self) weakSelf = self;\r\n            [[[SnackBarView alloc] initWithText:@\"已添加至“自选股”\" synTipTitle:@\"已同步至电脑端\" actionTitle:@\"编辑所属分组\" clickAction:^(UIButton *btn) {\r\n                \r\n                HXWatchListEditGroupConfig *config = [[HXWatchListEditGroupConfig alloc] init];\r\n                config.type = HXWatchListEditGroupTypeDefault;\r\n                HXWatchListEditGroupStockModel *stockModel = [HXWatchListEditGroupStockModel initWithStockCode:model.st","relevantFile":"","relevantFileList":[],"filePath":"SearchStock.mm","template":"objective-cpp","multiRes":{"hipilot":"kInfoArray:securities]\n                                                      stockList:[GroupInfoModel stockListTextWithStockInfos:securities]\n                                                     groupList:GroupInfoModel.grouoListTextWithStockInfos:securities\n                                               securityList:GroupInfoModel.","deepseek-chat-lite":"kListTextWithSecurities:securities marketList:[GroupInfoModel marketListTextWithStockInfos:securities]];\r","CodeQwen2.5-7B":"kCodeList:securities]  /// 股票列表\r","copilot":"kListTextWithSecurities:securities]\r\n                                                       stockList:[HXWatchlistModelAdaptation stoc"}},{"prefix":"\n#import \"HXHQMutibleStockListSelfStockAdapter.h\"\n#import \"HXKLineTechDelegate.h\"\n#import \"HXSimpleQuotationModuleDelegate.h\"\n#import \"HXKLineModuleDelegate.h\"\n#import \"HXTableHeaderAdapter.h\"\n#import \"CTHBaseModel.h\"\n#import <HXTableHeader/CTHLiterals.h>\n#import \"HXSelfStockDetailManager.h\"\n#import \"CTHIWCDataManager.h\"\n#import \"HXFuyaoDataManager.h\"\n#import \"HXIWCDataManager.h\"\n#import \"HXFuyaoHeaderOutput.h\"\n#import <HXTableHeader/HXSelfALLHeaderList.h>\n#import <HXCommunicateMiddleware/HXSocketFetcher.h>\n#import \"SSGChiCangQueryModel.h\"\n#import <HXBase/HXMarketMacros.h>\n#import <WTTradeModule/HXStockMarketManager.h>\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"AMSQLPublicProxy.h\"\n#import <HXBase/HXBaseMarketTools.h>\n#import <HXCore/EQCurveObj.h>\n#import <HXDataTypeConvertor/NSArray+HXDataTypeConvertor.h>\n#import <HXOverlappingPageView/HXSegmentMenuCellModel.h>\n#import <HXBase/HXDropDownPopView.h>\n#import <HXChartIndicatorManager/HXIndicatorManager.h>\n#import <HXSecuritiesTableCard/HXSecuritiesTableCardStockModel.h>\n#import <HXWatchlistGroupsDataProvider/HXWatchlistGroupsDataService.h>\n#import <HXWatchList/HXWatchList-Swift.h>\n#import <HXSelfStockDataProvider/HXSelfStockAPI.h>\n\n#import \"HXBuySellPlugin.h\"\n#import \"HXMagic9Plugin.h\"\n#import \"HXAIDDPlugin.h\"\n#import \"HXSelfStockDayPlugin.h\"\n#import \"HXKlineMagic9Plugin.h\"\n#import \"HXKlineBuySellPlugin.h\"\n#import \"HXKlineGapMarkPlugin.h\"\n#import \"HXKlineDKTrendPlugin.h\"\n#import \"HXKlineAIBandRandarPlugin.h\"\n#import \"HXStrategySignalPlugin.h\"\n#import \"HXWTAccountStockInfoManager.h\"\n#import \"WTTradeChiCangBuySellPointManager.h\"\n#import \"HXHQMutibleStockBuySellPlugin.h\"\n\n#import \"HXKlineIndicatorOperater.h\"\n#import \"HXIndicatorFeeGrayRelease.h\"\n#import \"AMUIPublicProxy+CurveLine.h\"\n\n#define kProtocolID        1264\n\n@interface HXHQMutibleStockListSelfStockAdapter ()\n\n/// 自选分组对应的分组名称数组,和显示的tab分组区分开。主要是因为显示时自选股、持仓股在前面。而分组数据中持仓股有可能在后面\n@property (nonatomic, strong) NSMutableArray *groupNamesArray;\n\n/// 分组tab对应的数组\n@property (nonatomic, copy) NSArray <NSString *> *groupTabNamesArray;\n\n/// 所有行情表头ID\n@property (nonatomic, strong) NSMutableArray *allHQHeadIDs;\n\n/// 所有问财表头ID\n@property (nonatomic, strong) NSMutableArray *allIWenCaiHeadIDs;\n\n/// 所有问财表头\n@property (nonatomic, strong) NSMutableArray *allIWenCaiHeadObjects;\n\n/// 所有扶摇表头ID\n@property (nonatomic, strong) NSMutableArray *allFuyaoHeadIDs;\n\n/// 所有扶摇表头\n@property (nonatomic, strong) NSMutableArray *allFuyaoHeadObjects;\n\n@property (nonatomic, strong) HXSocketFetcher *fetcher;\n\n/// 自选股选择功能（市场筛选）,和自选分组保持一致\n@property (nonatomic, copy) HXSSFilterTabCloudStoreModel *filterTabModel;\n\n/// 自选股选择器当前选中的市场类型\n@property (nonatomic, assign) NSInteger currentFilterTabModelIndex;\n\n@end\n\n@implementation HXHQMutibleStockListSelfStockAdapter\n\n#pragma mark - Lifecycle\n\n- (instancetype)init {\n    if (self = [super init]) {\n        [[WTTradeChiCangBuySellPointManager shareInstance] clearMultiStockBSDict];\n        [self initHeadIDs];\n    }\n    return self;\n}\n\n#pragma mark - HXHQMutibleStockListDelegate\n\n- (void)registerKlineDelegate {\n    // 提前注册分时K线相关协议\n    HXKLineTechDelegate *delegate = [[HXKLineTechDelegate alloc] init];\n    HXSimpleQuotationModuleDelegate *quotationDelegate = [[HXSimpleQuotationModuleDelegate alloc] init];\n    HXKLineModuleDelegate *klineDelegate = [[HXKLineModuleDelegate alloc] init];\n    NSDictionary *dic = @{\n        @\"HXTechDelegate\" : delegate,\n        @\"HXSimpleQuotationDelegate\": quotationDelegate,\n        @\"HXKLineDelegate\": klineDelegate,\n    };\n    [HXKLine registerKLineDelegates:dic];\n    [self multibleStockListLog:@\"注册分时K线公有协议\"];\n}\n\n- (void)requestBuySellData {\n    [[HXWTAccountStockInfoManager sharedInstance] getBSPointWithStockCode:@\"\" andStockMarketId:@\"\" isNeedAllData:YES andStartToDrawBSBlock:^(NSDictionary *bsInfo) {\n        [[WTTradeChiCangBuySellPointManager shareInstance] saveMultiStockBSDict:bsInfo];\n        [[NSNotificationCenter defaultCenter] postNotificationName:WTMutibleStockBuySellPluginBS object:nil];\n    }];\n}\n\n- (ChartIndicator *)createMainChartIndicatorWithStockCode:(NSString *)stockCode\n                                                 marketId:(NSString *)marketId {\n    HXKlineViewContext *context = [[HXKlineViewContext alloc] init];\n    context.marketCode = marketId;\n    context.stockCode = stockCode;\n    return [self mainChartIndicatorWithParams:context];;\n}\n\n- (ChartIndicator *)mainChartIndicatorWithParams:(HXKlineViewContext *)params {\n    HXIndicatorType originalType = [self klineMainGraphTypeWithParams:params];\n    ChartIndicator *mainChartIndicator = [ChartIndicator chartIndicatorWithType:originalType section:ChartMainSection];\n    mainChartIndicator.plugins = @{\n        @\"KlineMagic9Plugin\": HXKlineMagic9Plugin.class,\n        @\"KlineBuySellPlugin\": HXKlineBuySellPlugin.class,\n        @\"KlineGapMarkPlugin\": HXKlineGapMarkPlugin.class,\n        @\"KlineDKTrendPlugin\": HXKlineDKTrendPlugin.class,\n        @\"KlineAIBandRandarPlugin\" : HXKlineAIBandRandarPlugin.class,\n        @\"StrategySignalPlugin\" : HXStrategySignalPlugin.class,\n        @\"SelfStockDayPlugin\": HXSelfStockDayPlugin.class\n    };\n    NSMutableArray *combinedIndicators = [NSMutableArray array];\n    HXIndicatorType type = [MultiIndicatorManager selectedKlineMainIndicatorTypeWithMarketId:params.marketCode];\n    if (![[HXIndicatorFeeGrayRelease sharedManager] isNeedShowAINXX_GSCLAI_AIJGYT] && type == ECurveTechType_AINXX) {\n        type = ECurveTechType_AVERAGE;\n    }\n    ChartIndicator *combinedIndicator = [ChartIndicator chartIndicatorWithType:type section:ChartMainSection];\n    [combinedIndicators addObject:combinedIndicator];\n    if ([AMUIPublicProxy cfxfBuyAndSellSettingState] && [AMUIPublicProxy cfxfZYZSSettingState] && [HXBaseMarketTools supportFXJSBKHSAWithMarketId:params.marketCode]) {\n        // 止盈止损\n        [combinedIndicators addObject:[ChartIndicator chartIndicatorWithType:ECurveTechType_KLine_ZYZS section:ChartMainSection]];\n    }\n    mainChartIndicator.combinedIndicators = combinedIndicators;\n    [HXKlinePublicProxy SetShowJunXianState:combinedIndicator.indicatorType == ECurveTechType_AVERAGE ? 0 : 1];\n    return mainChartIndicator;\n}\n\n/// 主图k线类型 开启主图\n- (HXIndicatorType)klineMainGraphTypeWithParams:(HXKlineViewContext *)params {\n    if ([[HXIndicatorFeeGrayRelease sharedManager] isNeedShowAINXX_GSCLAI_AIJGYT]) {\n        id<IIndicatorItem> item = [_Builtin_GSCLAI_IndicatorItem new];\n        if (![item displayLogic:@{@\"marketId\": params.marketCode ?: @\"\"}] && [AMUIPublicProxy gsclaiSettingState]) {\n            [AMUIPublicProxy setGSCLAISettingState:NO];\n            [HXKlinePublicProxy setCommonKlineSettingState:YES];\n        }\n        if ([AMUIPublicProxy gsclaiSettingState] && [self isHuShenAorBeijingStockMarket:params.marketCode]) {\n            // GS策略AI版\n            return ECurveTechType_GSCLAI;\n        }\n        item = [_Builtin_AIJGYT_IndicatorItem new];\n        if (![item displayLogic:@{@\"marketId\": params.marketCode ?: @\"\"}] && [AMUIPublicProxy aijgytSettingState]) {\n            [AMUIPublicProxy setAIJGYTSettingState:NO];\n            [HXKlinePublicProxy setCommonKlineSettingState:YES];\n        }\n        if ([AMUIPublicProxy aijgytSettingState] && [self isHuShenAorBeijingStockMarket:params.marketCode]) {\n            // AI机构意图\n            return ECurveTechType_AIJGYT;\n        }\n    }\n    return ECurveTechType_KLINE;\n}\n\n- (BOOL)isHuShenAorBeijingStockMarket:(NSString *)market {\n    return [HXBaseMarketTools isHuShenAMarket:market] || [HXBaseMarketTools isBeijingStockMarket:market];\n}\n\n- (NSDictionary<NSString *,id<HXFenshiPluginsProtocol>> *)curvePlugins {\n    return @{\n        @\"BuySellPlugin\": HXHQMutibleStockBuySellPlugin.class,\n        @\"Magic9Plugin\": H","infill":"me isEqualToString:@\"自选股\"]) {\n        HXSelfStockAPI\n        return;\n    }\n    \n    tempArray = [[SSGGroupViewModel shareInstance] getStockInfoWithGroupIndex:[self getIndexWithTabName:tabName]];\n    completion([self d","suffix":"eleteUOFJWithArray:tempArray]);\n}\n\n#pragma mark - Request\n\n/// 通过原始列表和排序表头ID，获取新的列表\n/// - Parameters:\n///   - array: 原始列表\n///   - completion: 回调\n- (void)resortStockInfoIfNeededWithStockArray:(NSArray <HXUGCSelfStockModel *> *)array completion:(void (^)(NSArray<HXUGCSelfStockModel *> *))completion {\n    \n    // 分组关注详情页进多股同列需过滤场外基金\n    NSArray <HXUGCSelfStockModel *>* filteredArray = [self deleteUOFJWithArray:array];\n    if ([self.from isEqualToString:@\"gzfz\"]) {\n        filteredArray = [self deleteUOFJWithArray:array];\n    } else {\n        filteredArray = array;\n    }\n    \n    if ([self.sortID isEqualToString:@\"-1\"]) {\n        [self multibleStockListLog:@\"无需重新排序\"];\n        completion(filteredArray);\n        return;\n    }\n    \n    if ([self.allHQHeadIDs containsObject:self.sortID]) {\n        [self multibleStockListLog:[NSString stringWithFormat:@\"行情表头:%@, 开始排序\", self.sortID]];\n        [self requestWithStockInfos:filteredArray completion:completion];\n    } else if ([self.allIWenCaiHeadIDs containsObject:self.sortID]) {\n        [self multibleStockListLog:[NSString stringWithFormat:@\"问财表头:%@, 开始排序\", self.sortID]];\n        [self requestIWebCaiWithStockInfos:filteredArray completion:completion];\n    } else if ([self.allFuyaoHeadIDs containsObject:self.sortID]) {\n        [self multibleStockListLog:[NSString stringWithFormat:@\"扶摇表头:%@, 开始排序\", self.sortID]];\n        [self requestFuYaoWithStockInfos:filteredArray completion:completion];\n    } else {\n        [self multibleStockListLog:[NSString stringWithFormat:@\"未找到ID：%@对应的表头项,不做排序处理\", self.sortID]];\n        completion(filteredArray);\n    }\n}\n\n/// 行情表头排序\n/// 全量请求，因为仅需要返回股票代码、市场、名字，不需要像自选股一样返回所有行情表头数据，请求数据量不大，不需要分页、降低复杂度\n/// - Parameters:\n///   - stockInfoArray: 股票原始列表\n///   - completion: 回调\n- (void)requestWithStockInfos:(NSArray<HXUGCSelfStockModel *> *)stockInfoArray completion:(void (^)(NSArray <HXUGCSelfStockModel *> *stockArray))completion {\n    NSMutableDictionary *params = [@{\n            @\"startrow\": @(0), /// 开始行\n            @\"rowcount\": @(stockInfoArray.count),  /// 行数\n            @\"columnorder\": @\"34338|55|4\", /// 表头数据列顺序\n            @\"sortid\": @(self.sortID.integerValue), /// 排序ID\n            @\"sortorder\": @(self.sortOrder), /// 排序顺序 (升序 降序)\n            @\"selfstockcustom\": @(1),\n            @\"update\":@(0),\n            @\"newrealtime\":@(0),\n    } mutableCopy];\n    \n    NSArray *hqArray = [self getHQStringWithArray:stockInfoArray];\n    params[@\"stocklist\"] = hqArray.firstObject;\n    params[@\"marketlist\"] = hqArray.lastObject;\n    WeakObj(self);\n    [self.fetcher pause];\n    self.fetcher.request = [[HXMutableSocketRequest alloc] initWithProtocolId:kProtocolID\n                                                                   paramsDict:params\n                                                                       pageId:PAGE_DuoGuTongLie_ID\n                                                                         wait:NO];\n    [self.fetcher setCallBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data1, NSError *error1) {\n        if ([data1 modelType] == StuffModelTypeTable) {\n            CEQStuffTableStruct *stuffTable = new CEQStuffTableStruct(data1);\n            completion([selfWeak getStockArrayWithData:stuffTable]);\n            delete stuffTable;\n        } else {\n            completion(@[]);\n            [AMUIPublicProxy showTipAutoClose:@\"行情获取失败\"];\n        }\n        [selfWeak.fetcher pause];\n    }];\n    [self.fetcher start];\n}\n\n/// 问财表头排序\n/// 全量请求，仅返回股票列表和排序表头数据\n/// - Parameters:\n///   - stockInfoArray: 原始列表\n///   - completion: 回调\n- (void)requestIWebCaiWithStockInfos:(NSArray<HXUGCSelfStockModel *> *)stockInfoArray completion:(void (^)(NSArray <HXUGCSelfStockModel *> *stockArray))completion {\n    NSInteger index = [self.allIWenCaiHeadIDs indexOfObject:self.sortID];\n    NSMutableArray *codeArray = [NSMutableArray array];\n    NSMutableArray *marketArray = [NSMutableArray array];\n    for (HXUGCSelfStockModel *stockInfo in stockInfoArray) {\n        [codeArray addObject:stockInfo.stockCode];\n        [marketArray addObject:stockInfo.marketId];\n    }\n    if ([HXTableHeaderAdapter shareInstance].openFuyaoHeader) {\n        //新老版本问财的数据模型不同，新的HXSelfHeader\n        [HXIWCDataManager requestIWenCaiDataWithHeads:@[self.allIWenCaiHeadObjects[index]]\n                                           stockCodes:codeArray\n                                              markets:marketArray\n                                               sortID:0\n                                            sortOrder:1 - self.sortOrder\n                                             complete:^(NSDictionary *data, NSError *error) {\n            if (data && !error) {\n                NSArray *codeList = data[kCTH_IWC_CODE_ITEMS];\n                completion([self getNewStockArrayWithStockArray:stockInfoArray codeList:codeList]);\n            } else {\n                completion(stockInfoArray);\n            }\n        }];\n        return;\n    }\n    //新老版本问财的数据模型不同，老的CTHIWCHeadModel\n    [CTHIWCDataManager requestIWenCaiHQDataWithHeads:@[self.allIWenCaiHeadObjects[index]]\n                                          stockCodes:codeArray\n                                             markets:marketArray\n                                              sortID:0\n                                           sortOrder:1 - self.sortOrder\n                                            complete:^(NSDictionary *data, NSError *error) {\n                                                if (data && !error) {\n                                                    NSArray *codeList = data[kCTH_IWC_CODE_ITEMS];\n                                                    completion([self getNewStockArrayWithStockArray:stockInfoArray codeList:codeList]);\n                                                 } else {\n                                                    completion(stockInfoArray);\n                                                 }\n     }];\n }\n\n/// 扶摇表头排序\n/// 全量请求，仅返回股票列表和排序表头数据\n/// - Parameters:\n///   - stockInfoArray: 原始列表\n///   - completion: 回调\n- (void)requestFuYaoWithStockInfos:(NSArray<HXUGCSelfStockModel *> *)stockInfoArray completion:(void (^)(NSArray <HXUGCSelfStockModel *> *stockArray))completion {\n    NSInteger index = [self.allFuyaoHeadIDs indexOfObject:self.sortID];\n    NSMutableArray *codeArray = [NSMutableArray array];\n    NSMutableArray *marketArray = [NSMutableArray array];\n    for (HXUGCSelfStockModel *stockInfo in stockInfoArray) {\n        [codeArray addObject:stockInfo.stockCode];\n        [marketArray addObject:stockInfo.marketId];\n    }\n    [HXFuyaoDataManager requestFuyaoDataWithHeads:@[self.allFuyaoHeadObjects[index]]\n                                       stockCodes:codeArray\n                                     stockMarkets:marketArray\n                                           sortID:self.sortID\n                                        sortOrder:1-self.sortOrder\n                                        pageBegin:0\n                                         pageSize:0 //扶摇接口要求，如果全量请求pageSize=0；多股列表只需要请求一个表头，所以全量请求，不分页（参考多股同列，行情排序）\n                                         complete:^(NSDictionary * _Nonnull data, NSError * _Nonnull error) {\n        if (data && !error) {\n            NSArray *codeList = data[kCTH_IWC_CODE_ITEMS];\n            NSMutableArray *stockList = [NSMutableArray new];\n            [codeList enumerateObjectsUsingBlock:^(HXFuyaoHeaderOutputCodeValue *obj, NSUInteger idx, BOOL *stop) {\n                [stockList addObject:obj.code];\n            }];\n            completion([self getNewStockArrayWithStockArray:stockInfoArray codeList:stockList]);\n         } else {\n            completion(stockInfoArray);\n         }\n    }];\n }\n\n#pragma mark - Respond\n\n- (NSArray <HXUGCSelfStockModel *> *)getStockArrayWithData:(CEQStuffTableStruct *)tableData {\n    //取正文数据（代码）\n    CEQHashTable< CEQArrayPtr<CEQString16> > *pHashTableText = tableData->GetBodyText();\n    if (pHashTableText == NULL) {\n        [self multibleStockListLog:@\"返回数据BodyText错误\"];\n        r","relevantFile":"","relevantFileList":[],"filePath":"HXHQMutibleStockListSelfStockAdapter.mm","template":"objective-cpp","multiRes":{"hipilot":"HXMagic9Plugin.class,\n        @\"AIDDPlugin\": HXAIDDPlugin.class,\n        @\"SelfStockDayPlugin\": HXSelfStockDayPlugin.class,\n    };\n}\n\n- (NSArray<HXUGCSelfSt","deepseek-chat-lite":"XMagic9Plugin.class,","CodeQwen2.5-7B":"XMagic9Plugin.class,","copilot":"me isEqualToString:@\"自选股\"]) {\n        HXSelfStockAPI\n        return;\n    }\n    \n    tempArray = [[SSGGroupViewModel shareInstance] getStockInfoWithGroupIndex:[self getIndexWithTabName:tabName]];\n    completion([self d"}},{"prefix":"\n#import \"HXHQMutibleStockListSelfStockAdapter.h\"\n#import \"HXKLineTechDelegate.h\"\n#import \"HXSimpleQuotationModuleDelegate.h\"\n#import \"HXKLineModuleDelegate.h\"\n#import \"HXTableHeaderAdapter.h\"\n#import \"CTHBaseModel.h\"\n#import <HXTableHeader/CTHLiterals.h>\n#import \"HXSelfStockDetailManager.h\"\n#import \"CTHIWCDataManager.h\"\n#import \"HXFuyaoDataManager.h\"\n#import \"HXIWCDataManager.h\"\n#import \"HXFuyaoHeaderOutput.h\"\n#import <HXTableHeader/HXSelfALLHeaderList.h>\n#import <HXCommunicateMiddleware/HXSocketFetcher.h>\n#import \"SSGChiCangQueryModel.h\"\n#import <HXBase/HXMarketMacros.h>\n#import <WTTradeModule/HXStockMarketManager.h>\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"AMSQLPublicProxy.h\"\n#import <HXBase/HXBaseMarketTools.h>\n#import <HXCore/EQCurveObj.h>\n#import <HXDataTypeConvertor/NSArray+HXDataTypeConvertor.h>\n#import <HXOverlappingPageView/HXSegmentMenuCellModel.h>\n#import <HXBase/HXDropDownPopView.h>\n#import <HXChartIndicatorManager/HXIndicatorManager.h>\n#import <HXSecuritiesTableCard/HXSecuritiesTableCardStockModel.h>\n#import <HXWatchlistGroupsDataProvider/HXWatchlistGroupsDataService.h>\n#import <HXWatchList/HXWatchList-Swift.h>\n#import <HXSelfStockDataProvider/HXSelfStockAPI.h>\n\n#import \"HXBuySellPlugin.h\"\n#import \"HXMagic9Plugin.h\"\n#import \"HXAIDDPlugin.h\"\n#import \"HXSelfStockDayPlugin.h\"\n#import \"HXKlineMagic9Plugin.h\"\n#import \"HXKlineBuySellPlugin.h\"\n#import \"HXKlineGapMarkPlugin.h\"\n#import \"HXKlineDKTrendPlugin.h\"\n#import \"HXKlineAIBandRandarPlugin.h\"\n#import \"HXStrategySignalPlugin.h\"\n#import \"HXWTAccountStockInfoManager.h\"\n#import \"WTTradeChiCangBuySellPointManager.h\"\n#import \"HXHQMutibleStockBuySellPlugin.h\"\n\n#import \"HXKlineIndicatorOperater.h\"\n#import \"HXIndicatorFeeGrayRelease.h\"\n#import \"AMUIPublicProxy+CurveLine.h\"\n\n#define kProtocolID        1264\n\n@interface HXHQMutibleStockListSelfStockAdapter ()\n\n/// 自选分组对应的分组名称数组,和显示的tab分组区分开。主要是因为显示时自选股、持仓股在前面。而分组数据中持仓股有可能在后面\n@property (nonatomic, strong) NSMutableArray *groupNamesArray;\n\n/// 分组tab对应的数组\n@property (nonatomic, copy) NSArray <NSString *> *groupTabNamesArray;\n\n/// 所有行情表头ID\n@property (nonatomic, strong) NSMutableArray *allHQHeadIDs;\n\n/// 所有问财表头ID\n@property (nonatomic, strong) NSMutableArray *allIWenCaiHeadIDs;\n\n/// 所有问财表头\n@property (nonatomic, strong) NSMutableArray *allIWenCaiHeadObjects;\n\n/// 所有扶摇表头ID\n@property (nonatomic, strong) NSMutableArray *allFuyaoHeadIDs;\n\n/// 所有扶摇表头\n@property (nonatomic, strong) NSMutableArray *allFuyaoHeadObjects;\n\n@property (nonatomic, strong) HXSocketFetcher *fetcher;\n\n/// 自选股选择功能（市场筛选）,和自选分组保持一致\n@property (nonatomic, copy) HXSSFilterTabCloudStoreModel *filterTabModel;\n\n/// 自选股选择器当前选中的市场类型\n@property (nonatomic, assign) NSInteger currentFilterTabModelIndex;\n\n@end\n\n@implementation HXHQMutibleStockListSelfStockAdapter\n\n#pragma mark - Lifecycle\n\n- (instancetype)init {\n    if (self = [super init]) {\n        [[WTTradeChiCangBuySellPointManager shareInstance] clearMultiStockBSDict];\n        [self initHeadIDs];\n    }\n    return self;\n}\n\n#pragma mark - HXHQMutibleStockListDelegate\n\n- (void)registerKlineDelegate {\n    // 提前注册分时K线相关协议\n    HXKLineTechDelegate *delegate = [[HXKLineTechDelegate alloc] init];\n    HXSimpleQuotationModuleDelegate *quotationDelegate = [[HXSimpleQuotationModuleDelegate alloc] init];\n    HXKLineModuleDelegate *klineDelegate = [[HXKLineModuleDelegate alloc] init];\n    NSDictionary *dic = @{\n        @\"HXTechDelegate\" : delegate,\n        @\"HXSimpleQuotationDelegate\": quotationDelegate,\n        @\"HXKLineDelegate\": klineDelegate,\n    };\n    [HXKLine registerKLineDelegates:dic];\n    [self multibleStockListLog:@\"注册分时K线公有协议\"];\n}\n\n- (void)requestBuySellData {\n    [[HXWTAccountStockInfoManager sharedInstance] getBSPointWithStockCode:@\"\" andStockMarketId:@\"\" isNeedAllData:YES andStartToDrawBSBlock:^(NSDictionary *bsInfo) {\n        [[WTTradeChiCangBuySellPointManager shareInstance] saveMultiStockBSDict:bsInfo];\n        [[NSNotificationCenter defaultCenter] postNotificationName:WTMutibleStockBuySellPluginBS object:nil];\n    }];\n}\n\n- (ChartIndicator *)createMainChartIndicatorWithStockCode:(NSString *)stockCode\n                                                 marketId:(NSString *)marketId {\n    HXKlineViewContext *context = [[HXKlineViewContext alloc] init];\n    context.marketCode = marketId;\n    context.stockCode = stockCode;\n    return [self mainChartIndicatorWithParams:context];;\n}\n\n- (ChartIndicator *)mainChartIndicatorWithParams:(HXKlineViewContext *)params {\n    HXIndicatorType originalType = [self klineMainGraphTypeWithParams:params];\n    ChartIndicator *mainChartIndicator = [ChartIndicator chartIndicatorWithType:originalType section:ChartMainSection];\n    mainChartIndicator.plugins = @{\n        @\"KlineMagic9Plugin\": HXKlineMagic9Plugin.class,\n        @\"KlineBuySellPlugin\": HXKlineBuySellPlugin.class,\n        @\"KlineGapMarkPlugin\": HXKlineGapMarkPlugin.class,\n        @\"KlineDKTrendPlugin\": HXKlineDKTrendPlugin.class,\n        @\"KlineAIBandRandarPlugin\" : HXKlineAIBandRandarPlugin.class,\n        @\"StrategySignalPlugin\" : HXStrategySignalPlugin.class,\n        @\"SelfStockDayPlugin\": HXSelfStockDayPlugin.class\n    };\n    NSMutableArray *combinedIndicators = [NSMutableArray array];\n    HXIndicatorType type = [MultiIndicatorManager selectedKlineMainIndicatorTypeWithMarketId:params.marketCode];\n    if (![[HXIndicatorFeeGrayRelease sharedManager] isNeedShowAINXX_GSCLAI_AIJGYT] && type == ECurveTechType_AINXX) {\n        type = ECurveTechType_AVERAGE;\n    }\n    ChartIndicator *combinedIndicator = [ChartIndicator chartIndicatorWithType:type section:ChartMainSection];\n    [combinedIndicators addObject:combinedIndicator];\n    if ([AMUIPublicProxy cfxfBuyAndSellSettingState] && [AMUIPublicProxy cfxfZYZSSettingState] && [HXBaseMarketTools supportFXJSBKHSAWithMarketId:params.marketCode]) {\n        // 止盈止损\n        [combinedIndicators addObject:[ChartIndicator chartIndicatorWithType:ECurveTechType_KLine_ZYZS section:ChartMainSection]];\n    }\n    mainChartIndicator.combinedIndicators = combinedIndicators;\n    [HXKlinePublicProxy SetShowJunXianState:combinedIndicator.indicatorType == ECurveTechType_AVERAGE ? 0 : 1];\n    return mainChartIndicator;\n}\n\n/// 主图k线类型 开启主图\n- (HXIndicatorType)klineMainGraphTypeWithParams:(HXKlineViewContext *)params {\n    if ([[HXIndicatorFeeGrayRelease sharedManager] isNeedShowAINXX_GSCLAI_AIJGYT]) {\n        id<IIndicatorItem> item = [_Builtin_GSCLAI_IndicatorItem new];\n        if (![item displayLogic:@{@\"marketId\": params.marketCode ?: @\"\"}] && [AMUIPublicProxy gsclaiSettingState]) {\n            [AMUIPublicProxy setGSCLAISettingState:NO];\n            [HXKlinePublicProxy setCommonKlineSettingState:YES];\n        }\n        if ([AMUIPublicProxy gsclaiSettingState] && [self isHuShenAorBeijingStockMarket:params.marketCode]) {\n            // GS策略AI版\n            return ECurveTechType_GSCLAI;\n        }\n        item = [_Builtin_AIJGYT_IndicatorItem new];\n        if (![item displayLogic:@{@\"marketId\": params.marketCode ?: @\"\"}] && [AMUIPublicProxy aijgytSettingState]) {\n            [AMUIPublicProxy setAIJGYTSettingState:NO];\n            [HXKlinePublicProxy setCommonKlineSettingState:YES];\n        }\n        if ([AMUIPublicProxy aijgytSettingState] && [self isHuShenAorBeijingStockMarket:params.marketCode]) {\n            // AI机构意图\n            return ECurveTechType_AIJGYT;\n        }\n    }\n    return ECurveTechType_KLINE;\n}\n\n- (BOOL)isHuShenAorBeijingStockMarket:(NSString *)market {\n    return [HXBaseMarketTools isHuShenAMarket:market] || [HXBaseMarketTools isBeijingStockMarket:market];\n}\n\n- (NSDictionary<NSString *,id<HXFenshiPluginsProtocol>> *)curvePlugins {\n    return @{\n        @\"BuySellPlugin\": HXHQMutibleStockBuySellPlugin.class,\n        @\"Magic9Plugin\": H","infill":"HXMutableWatchlistGroupModel *group in groups) {\n        if ([group.groupName isEqualToString:tabName]) {\n            completion([self deleteUOFJWithArray:group.getAllGroupSecurities]);\n      ","suffix":"      break;\n        }\n    }\n}\n\n#pragma mark - Request\n\n/// 通过原始列表和排序表头ID，获取新的列表\n/// - Parameters:\n///   - array: 原始列表\n///   - completion: 回调\n- (void)resortStockInfoIfNeededWithStockArray:(NSArray <HXUGCSelfStockModel *> *)array completion:(void (^)(NSArray<HXUGCSelfStockModel *> *))completion {\n    \n    // 分组关注详情页进多股同列需过滤场外基金\n    NSArray <HXUGCSelfStockModel *>* filteredArray = [self deleteUOFJWithArray:array];\n    if ([self.from isEqualToString:@\"gzfz\"]) {\n        filteredArray = [self deleteUOFJWithArray:array];\n    } else {\n        filteredArray = array;\n    }\n    \n    if ([self.sortID isEqualToString:@\"-1\"]) {\n        [self multibleStockListLog:@\"无需重新排序\"];\n        completion(filteredArray);\n        return;\n    }\n    \n    if ([self.allHQHeadIDs containsObject:self.sortID]) {\n        [self multibleStockListLog:[NSString stringWithFormat:@\"行情表头:%@, 开始排序\", self.sortID]];\n        [self requestWithStockInfos:filteredArray completion:completion];\n    } else if ([self.allIWenCaiHeadIDs containsObject:self.sortID]) {\n        [self multibleStockListLog:[NSString stringWithFormat:@\"问财表头:%@, 开始排序\", self.sortID]];\n        [self requestIWebCaiWithStockInfos:filteredArray completion:completion];\n    } else if ([self.allFuyaoHeadIDs containsObject:self.sortID]) {\n        [self multibleStockListLog:[NSString stringWithFormat:@\"扶摇表头:%@, 开始排序\", self.sortID]];\n        [self requestFuYaoWithStockInfos:filteredArray completion:completion];\n    } else {\n        [self multibleStockListLog:[NSString stringWithFormat:@\"未找到ID：%@对应的表头项,不做排序处理\", self.sortID]];\n        completion(filteredArray);\n    }\n}\n\n/// 行情表头排序\n/// 全量请求，因为仅需要返回股票代码、市场、名字，不需要像自选股一样返回所有行情表头数据，请求数据量不大，不需要分页、降低复杂度\n/// - Parameters:\n///   - stockInfoArray: 股票原始列表\n///   - completion: 回调\n- (void)requestWithStockInfos:(NSArray<HXUGCSelfStockModel *> *)stockInfoArray completion:(void (^)(NSArray <HXUGCSelfStockModel *> *stockArray))completion {\n    NSMutableDictionary *params = [@{\n            @\"startrow\": @(0), /// 开始行\n            @\"rowcount\": @(stockInfoArray.count),  /// 行数\n            @\"columnorder\": @\"34338|55|4\", /// 表头数据列顺序\n            @\"sortid\": @(self.sortID.integerValue), /// 排序ID\n            @\"sortorder\": @(self.sortOrder), /// 排序顺序 (升序 降序)\n            @\"selfstockcustom\": @(1),\n            @\"update\":@(0),\n            @\"newrealtime\":@(0),\n    } mutableCopy];\n    \n    NSArray *hqArray = [self getHQStringWithArray:stockInfoArray];\n    params[@\"stocklist\"] = hqArray.firstObject;\n    params[@\"marketlist\"] = hqArray.lastObject;\n    WeakObj(self);\n    [self.fetcher pause];\n    self.fetcher.request = [[HXMutableSocketRequest alloc] initWithProtocolId:kProtocolID\n                                                                   paramsDict:params\n                                                                       pageId:PAGE_DuoGuTongLie_ID\n                                                                         wait:NO];\n    [self.fetcher setCallBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data1, NSError *error1) {\n        if ([data1 modelType] == StuffModelTypeTable) {\n            CEQStuffTableStruct *stuffTable = new CEQStuffTableStruct(data1);\n            completion([selfWeak getStockArrayWithData:stuffTable]);\n            delete stuffTable;\n        } else {\n            completion(@[]);\n            [AMUIPublicProxy showTipAutoClose:@\"行情获取失败\"];\n        }\n        [selfWeak.fetcher pause];\n    }];\n    [self.fetcher start];\n}\n\n/// 问财表头排序\n/// 全量请求，仅返回股票列表和排序表头数据\n/// - Parameters:\n///   - stockInfoArray: 原始列表\n///   - completion: 回调\n- (void)requestIWebCaiWithStockInfos:(NSArray<HXUGCSelfStockModel *> *)stockInfoArray completion:(void (^)(NSArray <HXUGCSelfStockModel *> *stockArray))completion {\n    NSInteger index = [self.allIWenCaiHeadIDs indexOfObject:self.sortID];\n    NSMutableArray *codeArray = [NSMutableArray array];\n    NSMutableArray *marketArray = [NSMutableArray array];\n    for (HXUGCSelfStockModel *stockInfo in stockInfoArray) {\n        [codeArray addObject:stockInfo.stockCode];\n        [marketArray addObject:stockInfo.marketId];\n    }\n    if ([HXTableHeaderAdapter shareInstance].openFuyaoHeader) {\n        //新老版本问财的数据模型不同，新的HXSelfHeader\n        [HXIWCDataManager requestIWenCaiDataWithHeads:@[self.allIWenCaiHeadObjects[index]]\n                                           stockCodes:codeArray\n                                              markets:marketArray\n                                               sortID:0\n                                            sortOrder:1 - self.sortOrder\n                                             complete:^(NSDictionary *data, NSError *error) {\n            if (data && !error) {\n                NSArray *codeList = data[kCTH_IWC_CODE_ITEMS];\n                completion([self getNewStockArrayWithStockArray:stockInfoArray codeList:codeList]);\n            } else {\n                completion(stockInfoArray);\n            }\n        }];\n        return;\n    }\n    //新老版本问财的数据模型不同，老的CTHIWCHeadModel\n    [CTHIWCDataManager requestIWenCaiHQDataWithHeads:@[self.allIWenCaiHeadObjects[index]]\n                                          stockCodes:codeArray\n                                             markets:marketArray\n                                              sortID:0\n                                           sortOrder:1 - self.sortOrder\n                                            complete:^(NSDictionary *data, NSError *error) {\n                                                if (data && !error) {\n                                                    NSArray *codeList = data[kCTH_IWC_CODE_ITEMS];\n                                                    completion([self getNewStockArrayWithStockArray:stockInfoArray codeList:codeList]);\n                                                 } else {\n                                                    completion(stockInfoArray);\n                                                 }\n     }];\n }\n\n/// 扶摇表头排序\n/// 全量请求，仅返回股票列表和排序表头数据\n/// - Parameters:\n///   - stockInfoArray: 原始列表\n///   - completion: 回调\n- (void)requestFuYaoWithStockInfos:(NSArray<HXUGCSelfStockModel *> *)stockInfoArray completion:(void (^)(NSArray <HXUGCSelfStockModel *> *stockArray))completion {\n    NSInteger index = [self.allFuyaoHeadIDs indexOfObject:self.sortID];\n    NSMutableArray *codeArray = [NSMutableArray array];\n    NSMutableArray *marketArray = [NSMutableArray array];\n    for (HXUGCSelfStockModel *stockInfo in stockInfoArray) {\n        [codeArray addObject:stockInfo.stockCode];\n        [marketArray addObject:stockInfo.marketId];\n    }\n    [HXFuyaoDataManager requestFuyaoDataWithHeads:@[self.allFuyaoHeadObjects[index]]\n                                       stockCodes:codeArray\n                                     stockMarkets:marketArray\n                                           sortID:self.sortID\n                                        sortOrder:1-self.sortOrder\n                                        pageBegin:0\n                                         pageSize:0 //扶摇接口要求，如果全量请求pageSize=0；多股列表只需要请求一个表头，所以全量请求，不分页（参考多股同列，行情排序）\n                                         complete:^(NSDictionary * _Nonnull data, NSError * _Nonnull error) {\n        if (data && !error) {\n            NSArray *codeList = data[kCTH_IWC_CODE_ITEMS];\n            NSMutableArray *stockList = [NSMutableArray new];\n            [codeList enumerateObjectsUsingBlock:^(HXFuyaoHeaderOutputCodeValue *obj, NSUInteger idx, BOOL *stop) {\n                [stockList addObject:obj.code];\n            }];\n            completion([self getNewStockArrayWithStockArray:stockInfoArray codeList:stockList]);\n         } else {\n            completion(stockInfoArray);\n         }\n    }];\n }\n\n#pragma mark - Respond\n\n- (NSArray <HXUGCSelfStockModel *> *)getStockArrayWithData:(CEQStuffTableStruct *)tableData {\n    //取正文数据（代码）\n    CEQHashTable< CEQArrayPtr<CEQString16> > *pHashTableText = tableData->GetBodyText();\n    if (pHashTableText == NULL) {\n        [self multibleStockListLog:@\"返回数据BodyText错误\"];\n        re","relevantFile":"","relevantFileList":[],"filePath":"HXHQMutibleStockListSelfStockAdapter.mm","template":"objective-cpp","multiRes":{"hipilot":"HXMagic9Plugin.class,\n        @\"AIDDPlugin\": HXAIDDPlugin.class,\n        @\"SelfStockDayPlugin\": HXSelfStockDayPlugin.class,\n        @\"HQMutibleStockBuySellPlugin\": HXHQMut","deepseek-chat-lite":"XMagic9Plugin.class,","CodeQwen2.5-7B":"XMagic9Plugin.class,","copilot":"HXMutableWatchlistGroupModel *group in groups) {\n        if ([group.groupName isEqualToString:tabName]) {\n            completion([self deleteUOFJWithArray:group.getAllGroupSecurities]);\n      "}},{"prefix":"\n#import \"HXConditionalOrderDataManager.h\"\n#import \"AMBusinessModelInterface.h\"\n#import \"HXConditionalOrderModel.h\"\n#import \"HXConditionalOrderDataModel.h\"\n#import <HXStuffDataModel/StuffTableModel.h>\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import \"CCChicangData.h\"\n#import \"HXRzrqZhicanInfo.h\"\n#import \"RZRQZiChanRequest.h\"\n#import \"HXWTAccountStockInfoManager.h\"\n#import \"HXConditionalOrderDefine.h\"\n#import <HXTool/NSObject+JSON.h>\n#import <HXTool/NSString+EmptyAndWhitespace.h>\n#import \"EQstdafx.h\"\n#import \"EQAppInfo.h\"\n#import \"AMLocalIdDef.h\"\n#import \"AMUIInterface.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertView_CustomView.h>\n#import \"HXGrayRelease+Register.h\"\n#import \"HXWTAccountManager.h\"\n#import <HXBase/NSDictionary+Safety.h>\n#import \"TJiaoYiRiSearchModel.h\"\n#import <HXTool/InternetTimeTool.h>\n#import <HXBase/HXBaseMarketTools+Adapter.h>\n#import \"HXSettingOrderAdvancedOptionModel.h\"\n#import <HXBase/NSArray+Safety.h>\n#import \"WTConditionOrderMarkManager.h\"\n#import \"WTQuickCounterServiceChannelManager.h\"\n#import \"HXConditionalOrderTool.h\"\n#import <WTTradeModule/NSString+WTTradeSafety.h>\n#import \"HXConditionalOrderHelpTool.h\"\n#import \"WTAlertBindAccountTool.h\"\n#import \"HXConditionOrderStockPresenter.h\"\n#import <WTTradeModule/WTKSGTSignStateManager.h>\n\n#define WT_EXPIRED_CONDITIONAL_ORDER_CACHE_KEY @\"WT_EXPIRED_CONDITIONAL_ORDER_CACHE_KEY\"\n\n@implementation HXErrorCOModel\n\n- (instancetype)initWithErrorCode:(NSInteger)code errorMessage:(NSString *)message {\n    if (self = [super init]) {\n        self.code = code;\n        self.message = message;\n    }\n    return self;\n}\n\n@end\n\n@implementation HXRequestCOModel\n\n- (instancetype)initWithIdentifier:(NSString *)identifier method:(NSString *)method params:(NSDictionary *)params {\n    if (self = [super init]) {\n        self.identifier = identifier;\n        self.method = method;\n        self.params = params;\n    }\n    return self;\n}\n\n#pragma mark - YYModel\n+ (NSDictionary<NSString *,id> *)modelCustomPropertyMapper {\n    return @{\n             @\"identifier\" : @\"id\",\n             };\n}\n\n@end\n\n@implementation HXResponseCOModel\n\n- (instancetype)initWithIdentifier:(NSString *)identifier result:(NSDictionary *)result error:(HXErrorCOModel *)errorModel {\n    self = [super init];\n    if (self) {\n        self.identifier = identifier;\n        self.result = result;\n        self.error = errorModel;\n    }\n    return self;\n}\n\n#pragma mark - YYModel\n+ (NSDictionary<NSString *,id> *)modelCustomPropertyMapper {\n    return @{@\"identifier\" : @\"id\"};\n}\n\n@end\n\n@interface HXConditionalOrderDataManager ()\n@property (nonatomic, strong) HXPriorConditionalOrderModel *priorCOModel;\n@property (nonatomic, strong) HXConditionOrderStockPresenter *stockPresenter;\n\n@end\n\n@implementation HXConditionalOrderDataManager\n\n+ (instancetype)shareManager {\n    static id instance_ = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance_ = [[HXConditionalOrderDataManager alloc] init];\n    });\n    return instance_;\n}\n\n- (void)beginMakingConditionalOrderWithPriorCOModel:(HXPriorConditionalOrderModel *)priorCOModel {\n    self.priorCOModel = priorCOModel;\n    [self.priorCOModel resetStateToDefault];\n}\n\n- (BOOL)modifyConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXChaXunBillDetailDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeModify;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持修改\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGJJX ||\n        billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ||\n        billDataCOModel.conditiontype == HXCOConditionTypeYSWT ||\n        billDataCOModel.conditiontype == HXCOConditionTypeGrid ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCJQD\n        ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    // 夜市委托特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT) {\n        self.priorCOModel.yswtModel = [[HXYSWTBaseModel alloc] init];\n        self.priorCOModel.yswtModel.execPriceString = billDataCOModel.execprice.stringValue;\n    }\n    [self pauseHqRequest];\n    return YES;\n}\n\n- (BOOL)restartConditionalOrderWithCOModel:(HXBillDataCOModel *)billDataCOModel\n{\n    if (!billDataCOModel || ![self.class isSupportWith:billDataCOModel.conditiontype]) {\n        return NO;\n    }\n    self.priorCOModel = [[HXPriorConditionalOrderModel alloc] init];\n    self.priorCOModel.billDataCOModel = [HXBillDataCOModel yy_modelWithJSON:[billDataCOModel yy_modelToJSONString]];\n    self.priorCOModel.priorCOType = HXPriorConditionalOrderTypeRestart;\n    self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype / 100);\n    if(![self addStockModelWithStockCode:billDataCOModel.stockcode stockName:billDataCOModel.extend.stockname stockMarket:billDataCOModel.extend.marketid]) {\n        return NO;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseWTETFDTTJD broker:account.yybId] && self.priorCOModel.coType == HXConditionalOrderTypeETFDT) {//灰度打开时设过条件单，后面关闭，不支持重启\n        return NO;\n    }else if (billDataCOModel.conditiontype == HXCOConditionTypeYSWT && ![[HXGrayRelease shared] switchForKey:GrayReleaseQuickConditionalYSWT broker:account.yybId]){\n        return NO;\n    }\n    self.priorCOModel.uiEntrusModel = [[HXCOEntrusModel alloc] init];\n    ///类型特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGJJG || billDataCOModel.conditiontype == HXCOConditionTypeGJJX) {\n        if ([billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_LESS_AVERAGE] ||\n            [billDataCOModel.condition.SIGNAL_LOGIC containsString:FUNC_PRICES_MORE_AVERAGE]) {\n            self.priorCOModel.coType =  HXConditionalOrderTypeJX;\n        }\n        else {\n            self.priorCOModel.coType = HXConditionalOrderTypeGJ;\n        }\n    }\n    //网格特殊处理\n    if (billDataCOModel.conditiontype == HXCOConditionTypeGrid) {\n        self.priorCOModel.coType = HXConditionalOrderTypeGrid;\n    } else if (billDataCOModel.conditiontype == HXCOConditionTypeCJQD) {\n        self.priorCOModel.coType = HXConditionalOrderTypeCJQD;\n    }\n    //新增三种，否则跳转不对\n    if (billDataCOModel.conditiontype == HXCOConditionTypeRZTMR ||\n        billDataCOModel.conditiontype == HXCOConditionTypeZTKB ||\n        billDataCOModel.conditiontype == HXCOConditionTypeFT ||\n        billDataCOModel.conditiontype == HXCO","infill":"| !currentAccount.rzrqZicanData.hasZijinSynchronised) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised ||\n","suffix":"            [HXWTAccountStockInfoManager updateRZRQZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder completion:nil];\n        }\n    } else {\n        if (!currentAccount.zicanData.hasChicangSynchronised) {\n            [HXWTAccountStockInfoManager updateZijinAndChicangDelay:NO sence:WTAssetsRequestSenceConditionOrder];\n        }\n    }\n}\n\n- (NSMutableArray<HXConditionOrderStockModel *> *)getStockModelArr {\n    return [self.stockPresenter getStockModelArr];\n}\n\n- (HXConditionOrderStockModel *)getStockModel {\n    return [self.stockPresenter getStockModelArr].lastObject;\n}\n\n- (void)requestHqDataWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    [self.stockPresenter requestHqDataWithCompletion:completion];\n}\n\n- (void)pauseHqRequest {\n    [self.stockPresenter pauseHqRequest];\n}\n\n\n- (void)requestKeMaiWithCompletion:(void (^)(BOOL error))completion {\n    if (!completion) {\n        return;\n    }\n    WeakObj(self);\n    [self.stockPresenter requestKeMaiWithCompletion:^(BOOL error) {\n        if (!error) {\n            HXConditionOrderStockModel *stockModel = [selfWeak getStockModel];\n            selfWeak.priorCOModel.billDataCOModel.bondunittype = stockModel.bondunittype;\n        }\n        completion(error);\n    }];\n}\n\n- (BOOL)addStockModelWithStockCode:(NSString *)stockCode\n                         stockName:(NSString *)stockName\n                       stockMarket:(NSString *)stockMarket {\n    // 数据校验\n    if (!stockCode || !stockName || !stockMarket) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"数据错误\")];\n        return NO;\n    }\n    // 适用范围校验\n    BOOL isSupportTiaoJianDan = [HXConditionalOrderHelpTool shouldShowConditionOrderEntrance:self.priorCOModel.coType\n                                                                                    marketID:stockMarket\n                                                                                   stockName:stockName\n                                                                                   stockCode:stockCode\n                                                                                   enterFrom:HXConditionalOrderEnterFromTypeTiaoJianDanSelect];\n    if (!isSupportTiaoJianDan) {\n        [AMUIPublicProxy showTipAutoClose:HX_LOAD_TIPS(@\"暂不支持监控该标的\")];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"unable\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    // 持仓股校验\n    if (self.priorCOModel.coType == HXConditionalOrderTypeCJQD && ![self.stockPresenter validationOfChicangWithStockCode:stockCode stockName:stockName stockMarket:stockMarket]) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择持仓股\"];\n        [ClientUserBehaviorLog sendLogWithLogobject:[HXConditionalOrderDataManager judgeAndReplaceRZRQLog:JOINT(@\"sousuo_new\", @\"noposition\")]\n                                         actionType:ClickAction];\n        return NO;\n    }\n    \n    if ([self.stockPresenter addStockModelWithStockCode:stockCode stockName:stockName stockMarket:stockMarket priorCOType:self.priorCOModel.priorCOType]) {\n        [self.priorCOModel addStockInfoWithStockCode:stockCode name:stockName market:stockMarket];\n        return YES;\n    }\n    return NO;\n}\n\n- (void)removeStockModelWithStockCode:(NSString *)stockCode\n                          stockMarket:(NSString *)stockMarket {\n    [self.stockPresenter removeStockModelWithStockCode:stockCode stockMarket:stockMarket];\n    HXConditionOrderStockModel *stockModel = [self getStockModel];\n    // 更新数据\n    [self.priorCOModel addStockInfoWithStockCode:stockModel.stockCode name:stockModel.stockName market:stockModel.stockMarket];\n}\n\n- (void)checkZhangTingPrice {\n    __block BOOL needShowTip = NO;\n    [[self getStockModelArr] enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(HXConditionOrderStockModel * _Nonnull stockModel, NSUInteger idx, BOOL * _Nonnull stop) {\n        BOOL isValidZTKBModel = stockModel.hqDataModel && stockModel.hqDataModel.xianjiaStr;\n        if (isValidZTKBModel && ![stockModel.hqDataModel.xianjiaStr isEqualToString:stockModel.hqDataModel.zhangtingPriceStr]) {\n            [self removeStockModelWithStockCode:stockModel.stockCode stockMarket:stockModel.stockMarket];\n            needShowTip = YES;\n        }\n    }];\n    if (needShowTip) {\n        [AMUIPublicProxy showTipAutoClose:@\"请选择涨停股作为监控股票\"];\n    }\n}\n\n- (HXConditionOrderStockPresenter *)stockPresenter {\n    if (!_stockPresenter) {\n        _stockPresenter = [[HXConditionOrderStockPresenter alloc] init];\n    }\n    return _stockPresenter;\n}\n\n#pragma mark - 批量新增条件单\n///批量新增条件单是否开启\n///同时控制新版条件单缓存功能以及非持仓股支持卖出的逻辑\n+ (BOOL)isBatchCreateConditionalOrderGrayReleaseOpen {\n    // 概率发布判断\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    BOOL isQuickCounterCondition = [WTQuickCounterServiceChannelManager isQuickCounterCondition];\n    if (isQuickCounterCondition) {\n        //快速柜台根据灰度\n        return [[HXGrayRelease shared] switchForKey:GrayReleaseQuickBatchCreateCO broker:currentAccount.yybId];\n    }\n    //自营默认支持\n    return YES;\n}\n\n+ (BOOL) isSupportBatchCreateConditionalOrder:(HXConditionalOrderType)coType {\n    // 不支持两融条件单\n    if ([self isRZRQConditionalOrder]) {\n        return NO;\n    }\n    // 概率发布判断\n    if (![self isBatchCreateConditionalOrderGrayReleaseOpen]) {\n        return NO;\n    }\n    if (coType == HXConditionalOrderTypeSJ || coType == HXConditionalOrderTypeRZDF || coType == HXConditionalOrderTypeMACD || coType == HXConditionalOrderTypeZTMR) {\n        return YES;\n    }\n    return NO;\n}\n\n- (BOOL)isSeletedStock {\n    return [self getStockModelArr].count > 0;\n}\n\n- (BOOL)isSeletedMultiStock {\n    return (self.priorCOModel.priorCOType == HXPriorConditionalOrderTypeBatchNew && [self getStockModelArr].count > 1);\n}\n\n#pragma mark - 条件单记忆功能\n- (void)applyCacheStockModelArrWithPriorCOModel:(HXPriorConditionalOrderModel *)priorCOModel {\n    if (priorCOModel.priorCOType == HXPriorConditionalOrderTypeModify || priorCOModel.priorCOType == HXPriorConditionalOrderTypeRestart) {\n        // 重启/修改不需要修改数据\n        return;\n    }\n    if ([self.stockPresenter needClearCacheStock:priorCOModel]) {\n        [self clearCacheStockModelArr];\n        return;\n    }\n    \n    NSArray *currentStockModel = [self getStockModelArr].copy;\n    [self clearCacheStockModelArr];\n    for (HXConditionOrderStockModel *stockModel in currentStockModel) {\n        if (![self addStockModelWithStockCode:stockModel.stockCode stockName:stockModel.stockName stockMarket:stockModel.stockMarket]) {\n            break;\n        }\n        HXConditionOrderStockModel *newStockModel = [self getStockModel];\n        newStockModel.hqDataModel = stockModel.hqDataModel;\n        newStockModel.bondTypeModel = stockModel.bondTypeModel;\n        newStockModel.chicangStockInfo = stockModel.chicangStockInfo;\n        newStockModel.rzrqChicangStockInfo = stockModel.rzrqChicangStockInfo;\n    }\n}\n\n- (void)saveStockModelArrToCache {\n    [self.stockPresenter saveStockModelArrToCache];\n}\n\n- (void)clearCacheStockModelArr {\n    [self.stockPresenter clearCacheStockModelArr];\n    [self.priorCOModel removeStockInfo];\n}\n\n+ (BOOL)needRequestWTMaiHangQing {\n    //jira:3227 当前不是交易日且时间不在8:30～15:00之间,则需要使用委托买行情获取的明日涨跌停\n    if (!([TJiaoYiRiSearchModel isTodayJiaoYiDate] && [TJiaoYiRiSearchModel isNowDateBetweenStartTime:830 andEndTime:1500])) {\n        return YES;\n    }\n    return NO;\n}\n\n+ (BOOL)isSupportWith:(HXCOConditionType)coType\n{\n    if ([[HXConditionalOrderDataManager supportList] containsObject:@(coType)]) {\n        return YES;\n    }\n    else {\n        return NO;\n    }\n}\n\n+ (BOOL)hasShouldGuideMap {\n    WTAccountInfor *currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    NSString *key = @\"SCGuideMapCOStashKey\";\n    if (currentAccount.isRZRQ) {\n        key = @\"SCGuideMapCOStashKeyRZRQ\";\n    }\n    return [[NS","relevantFile":"","relevantFileList":[],"filePath":"HXConditionalOrderDataManager.mm","template":"objective-cpp","multiRes":{"hipilot":"ConditionTypeDTZZ ||\n        billDataCOModel.conditiontype == HXCOConditionTypeCGZY ) {\n        self.priorCOModel.coType = (HXConditionalOrderType)(billDataCOModel.conditiontype);\n    }\n    \n    if (bill","deepseek-chat-lite":"ConditionTypeDTZZ ||","CodeQwen2.5-7B":"ConditionTypeDTZZ ||","copilot":"| !currentAccount.rzrqZicanData.hasZijinSynchronised) {\n        if (!currentAccount.rzrqZicanData.hasChicangSynchronised ||\n"}},{"prefix":"\n#import \"AppDelegate.h\"\n#import \"CoredataManager.h\"\n#import \"HXUIFrmPool.h\"\n#import \"UserDefaultsPoolKeys.h\"\n#import <objc/runtime.h>\n#import \"LJLocalURLConfig.h\"\n#import \"MePool.h\"\n#import <HXBaseViewController/HXViewController.h>\n#import \"HXPushedMsgInfo.h\"\n#import \"WKWebViewController.h\"\n#import \"LJHQDetailController.h\"\n#import \"SurveyModel.h\"\n#import \"ReadAndWriteFile.h\"\n#import \"AppBanBenDef.h\"\n#import \"LJLocalURLConfig.h\"\n#import \"GCXPageIdDefine.h\"\n#import \"CustomIOSAlertView.h\"\n\n#import \"LaunchCrashProtection.h\"\n#ifdef NSFoundationVersionNumber_iOS_9_x_Max\n#import <UserNotifications/UserNotifications.h>\n#endif\n#import \"HXDBObjectManager.h\"\n#import \"JumpTool.h\"\n#import \"HXTools.h\"\n#import \"HXShareSDK+Set.h\"\n#import \"HXHTTPDetector.h\"\n#import \"ReturnWindow.h\"\n#import <LJMobiPush/LJMobiPushManager.h>\n#import \"TradePushMessage.h\"\n#import \"ModelMainView.h\"\n#import \"AM_UI_VarKeyString.h\"\n#import \"NetWorkEvnMonitor.h\"\n//#import <HXIMClientSDK/HXIMClientSDK.h>\n#import \"UIView+Toast.h\"\n#import \"HXURLProtocol.h\"\n#import \"RegisRemotePushBus.h\"\n#import \"CurveSettingManager.h\"\n#import \"LJTechDataManage.h\"\n#import \"IQKeyboardManager.h\"\n\n#import \"HXTradeLoginManager.h\"\n#import \"HXHttpNetwork.h\"\n#import \"LJUserAgentManager.h\"\n\n#import \"HXSwiftHeader.h\"\n#import \"LJSwitchManager.h\"\n\n#if (defined ADHOC) || (defined DEBUG) //#ifdef ADHOC\n#import \"HXPerformanceCenter.h\"\n#import \"HXHangDetectMoniter.h\"\n#import \"BuryPointWindow.h\"\n#endif\n\n#import \"CrashReporter.h\"\n#import \"SwitchAccountListView.h\"\n#import <LJSelfStockManager/LJSelfStockManager.h>\n#import \"LJSelfStockGroupManager.h\"\n#import \"CompanyPushManager.h\"\n\n#import <HsFutuSystemInfo/HsSysInfoUtils.h>\n#import \"AXSystemInfo.h\"\n#import <CoreTelephony/CTCellularData.h>\n#include <arpa/inet.h>\n#import \"LJPrivacyManage.h\"\n#import \"SimulatedTradeGameListData.h\"\n#import \"HXLoginManager.h\"\n#import \"ChannelViewModel.h\"\n#import \"FUSwitchManage.h\"\n#import \"HXFuturesScreenShotShareManager.h\"\n#import \"JiaoYiLoginPool.h\"\n#import \"FUCommonSwitchModel.h\"\n#import \"CrashReporterLogsManager.h\"\n#import \"LJAppInfo.h\"\n#import \"PhoneNumLoginManager.h\"\n#import \"OneKeyBindController.h\"\n#import \"FeedBackManager.h\"\n#import \"WKHorizontalScreenWebViewController.h\"\n#import \"OpenAccountManager.h\"\n#import \"KeyManager.h\"\n#import \"UIStatusBarManager+HandleTapAction.h\"\n#import \"HXLevel2PowerManager.h\"\n#import \"HXAddValueCheckTool.h\"\n#import \"HotStockRequestManager.h\"\n#import \"LJLiveHardcodedString.h\"\n#import \"LJAdPushManage.h\"\n#import \"CTMediator+SocketFetcherHandler.h\"\n#import \"ToastManagerPool.h\"\n#import \"LJTCPLogManager.h\"\n#import \"HXTopInformationPopUpWindow.h\"\n#import \"THSDomainResolver.h\"\n#import \"LJNetProxyStatusCheckTool.h\"\n#import \"EQUIWindow.h\"\n#import \"LJDrawLinePushManage.h\"\n#import \"HXLogPushManager.h\"\n#import \"LJStockCodeTablePush.h\"\n#import \"LJDrawLineManager.h\"\n#import \"LJAdPagePushManager.h\"\n#import \"DataBaseService.h\"\n#import \"LJIndicatorPushManage.h\"\n\n#if DEBUGTOOL\n#import <HXCoverageReport/HXCoverageReportService.h>\n#endif\n#import \"UIApplication+info.h\"\n#import \"LJCrashService.h\"\n#import <HXAPMonitor/HXAPMonitor.h>\n#import <LJDrawLineCloudStore/LJDLPlanDataManage.h>\n#import \"HXDeviceManager.h\"\n#import \"LJAppStoreLaunchEffectMonitor.h\"\n#import \"ZiXunTitleView.h\"\n#import <LJCategoryKit/LJCategory.h>\n#import \"LJTradeGeneralTools.h\"\n#import \"LJCustomizedUITools.h\"\n#import \"LJWebClientIdentification.h\"\n#import <EQConfigModul/EQConfigManager.h>\n#import <HXCore/HXCoreConfig.h>\n#import \"HXEnvManager.h\"\n#import \"LJRouter+JumpTool.h\"\n#import \"LJUserPermissionPushManager.h\"\n#import \"HXSERVGrayReleaseRegister.h\"\n#import <LJCategoryKit/UIViewController+LJAdd.h>\n#import \"HXCommandManager.h\"\n#import \"AMCollectUserBehavior.h\"\n#import \"HXCapitalLuaUpdateManager.h\"\n#import \"HXViewController+Protocols.h\"\n#import <LJViewTrace/LJViewControllerProtocol.h>\n#import <HXCommand/HXHangMonitorExecutor.h>\n#import <HXTradeDevelopTool/HXTradeDevelopTool.h>\n#import <LJTradeFunctionManager/AllCloudCondictionCompanyManager.h>\n#import <LJDomainChangeObserver/LJDomainChangeObserver.h>\n#import <LJDeviceHelper/LJDeviceHelper.h>\n#import <LJTradeClientSDK/HXTradeClientSDK.h>\n#import \"LJNWPackageManager.h\"\n\n#pragma mark - Launch\n#import \"HXLaunchAppConfiguration.h\"\n#import \"LJCommunicateRegister.h\"\n#import \"HomeViewController.h\"\n#import \"LJThemeRegister.h\"\n#import \"LJHummerRegister.h\"\n#import \"LJNetworkMonitorRegister.h\"\n#import \"LJStockCodeRegister.h\"\n#import \"LJPasteboardRegister.h\"\n#import \"LJAuditedVersionControlRegister.h\"\n#import \"LJScreenShotRegister.h\"\n#import \"LJFUActionManagerRegister.h\"\n#import \"LJUserNotificationRegister.h\"\n#import \"LJDrawLineRegister.h\"\n#import \"LJDrawLineShareRegister.h\"\n#import \"LJUserAgentR","infill":"void)applicationDidBecomeActive:(UIApplication *)application {\n    // fixbug：通知方法中存在调用","suffix":"当前keywindow的UI布局，确保程序进入前台后发送通知，防止程序未完全进入时获取keywindow失败，从而masonry布局导致的崩溃出现\n    if ([[NSUserDefaults standardUserDefaults] objectForKey:kSetBackgroundPlay] == 0) {\n        [[NSNotificationCenter defaultCenter] postNotificationName:SHOW_LIVE_BACK_VIEW object:nil];\n    }\n    NSString *requestShenhe = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:HAS_REQUEST_SHENHE_SUCCESS];\n    if (![requestShenhe isEqualToString:@\"yes\"]) {\n        [LJAuditedVersionControlRegister requestAuditedVersionControl];\n    }\n    \n    //使用时注意，ios13首次安装选择推送/定位弹框后还会执行didbecomeactive\n    [[LJPasteboardRegister sharedInstance] analysisPasteboard];\n\n#if !TARGET_IPHONE_SIMULATOR\n    if ([[KeyManager sharedInstance] needUpdateKey]) {\n        [[KeyManager sharedInstance] updateKey];\n    }\n#endif\n    \n    if ([LJNetProxyStatusCheckTool getProxyStatus]) {\n        [[UIApplication sharedApplication].keyWindow makeToast:kUnableToViewMarketData duration:HXToastTimeDurationShort position:CSToastPositionBottom];\n    }\n    HXViewController *currentViewController = [HXUIFrmPool getCurHXViewController];\n    HXViewController *presentViewController = [HXUIFrmPool getPresentedViewController];\n    \n    if (presentViewController != nil || ![currentViewController isKindOfClass:[HXViewController class]]) {\n        return;\n    }\n    if (currentViewController.nFrameID == GCXAddWarning || currentViewController.nFrameID == MyZhiBiao || currentViewController.nFrameID == ZhiBiaoCanShu) {\n        if ([currentViewController conformsToProtocol:@protocol(LJViewControllerProtocol)] &&\n            [currentViewController respondsToSelector:@selector(needResendReuqest)]) {\n            [currentViewController needResendReuqest];\n        }\n    }\n}\n\n- (void)applicationDidReceiveMemoryWarning:(UIApplication *)application {\n    HXLogInfo(kQHGlobal, @\"app 收到内存警告\");\n    [[CrashReporterLogsManager sharedManager] addUserBehaviorLogMessage:kAppDidReceiveMemoryWarning];\n}\n\n- (void)applicationWillTerminate:(UIApplication *)application {\n    HXLogInfo(kQHGlobal, @\"app 即将被杀掉\");\n    [AMCollectUserBehavior saveActionRecord];\n    //app关闭时，清空一下coredata数据\n    [CoredataManager exitWithClean];\n    [[CrashReporterLogsManager sharedManager] addUserBehaviorLogMessage:kAppWillTerminateLog];\n    [[HXTradeAutoLoginManager shared] updateEnterBackgroundDateWithDate:[NSDate date]];\n}\n\n- (void)registerShareAction {\n    HXShareSDK *shareSdk = [HXShareSDK sharedInstance];\n    shareSdk.supportPlatforms = SHARE_SUPPORT_PLATFORM;\n    shareSdk.ljwechatAppid = LJWechatAppId;\n    shareSdk.wechatAppid = WECHAT_APPID;\n    shareSdk.wechatSecret = LJWeChatSecret;\n    shareSdk.wechatUniversalLink = UNIVERSAL_LINK;\n    shareSdk.qqAppid = LJQQAppId;\n    shareSdk.qqUniversalLink = QQ_UNIVERSAL_LINK;\n    shareSdk.weiboAppkey = LJWeiBoAppKey;\n    [shareSdk registerShareAction];\n}\n\n#pragma mark 点击检测\n- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {\n    [super touchesBegan:touches withEvent:event];\n    CGPoint point = [touches.anyObject locationInView:_window];\n    if (CGRectContainsPoint(UIApplication.sharedApplication.statusBarFrame, point)) {\n        [[NSNotificationCenter defaultCenter] postNotificationName:ClickStatusBar object:nil];\n    }\n}\n\n#pragma mark - Push CallBack\n- (void)registerForRemoteNotification {\n    if (@available(iOS 10.0, *)) {\n        //iOS10特有\n        UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];\n        //代理  监听通知与点击\n        center.delegate = self;\n        [center requestAuthorizationWithOptions:(UNAuthorizationOptionAlert | UNAuthorizationOptionBadge | UNAuthorizationOptionSound) completionHandler:^(BOOL granted, NSError * _Nullable error) {\n            // 记录开关打开关闭状态\n            [[UserDefaultsPool sharedUserDefaultsPool] setObject:@(granted) forKey:LJPushStatus];\n            \n            if (granted) {\n                //点击允许\n                NSLog(@\"注册成功\");\n                [center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) {\n                    NSLog(@\"%@\",settings);\n                }];\n            } else {\n                //点击不允许\n                NSLog(@\"注册失败\");\n            }\n        }];\n        [[UIApplication sharedApplication] registerForRemoteNotifications];\n    }\n}\n\n// 注册推送成功调用 APNs返回deviceToken 须保存\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    \n    if (![deviceToken isKindOfClass:[NSData class]]) {\n        return;\n    }\n    const unsigned *tokenBytes = (const unsigned *)[deviceToken bytes];\n    NSString *formatToekn = [NSString stringWithFormat:@\"%08x%08x%08x%08x%08x%08x%08x%08x\",ntohl(tokenBytes[0]),ntohl(tokenBytes[1]),ntohl(tokenBytes[2]),ntohl(tokenBytes[3]),ntohl(tokenBytes[4]),ntohl(tokenBytes[5]),ntohl(tokenBytes[6]),ntohl(tokenBytes[7])];\n    \n    NSString *strDeviceToken = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_DEVICE_TOKEN];\n    if (!strDeviceToken || strDeviceToken.length<=0) {\n        if ([MePool sharedMePool].isLogined) {\n            RegisRemotePushBus *regisRemotePushBus = [[RegisRemotePushBus alloc] init];\n            [regisRemotePushBus doBusiness:formatToekn];\n        }\n    }\n    //将转换后的deviceToken存入本地\n    [[UserDefaultsPool sharedUserDefaultsPool] setObject:formatToekn forKey:KEY_DEVICE_TOKEN];\n}\n\n//iOS10后台接收通知\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)())completionHandler {\n    if (!LJPrivacyManage.shared.userPrivacyState) {\n        completionHandler();\n        return;\n    }\n    // 取出后台推送过来的信息 点击后\n    NSDictionary *userInfo = response.notification.request.content.userInfo;\n    \n    UNNotificationRequest *request = response.notification.request; //收到推送的请求\n    UNNotificationContent *content = request.content;  //推送消息的内容\n    NSString *strAlertBody = content.body;  //推送消息体\n    if (strAlertBody != NULL) {\n        _infoMsgPush = [HXPushedMsgInfo itemFromPushDictionary:userInfo];\n        if ([UIApplication sharedApplication].applicationState == UIApplicationStateActive) {\n            //应用在前台\n            [self receivePushWhenAppActive:userInfo];\n            [UIApplication sharedApplication].applicationIconBadgeNumber = 0;//set to zero\n        } else {\n            // app处于后台状态\n            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                if ([UIApplication sharedApplication].statusBarOrientation == UIInterfaceOrientationLandscapeLeft || [UIApplication sharedApplication].statusBarOrientation == UIInterfaceOrientationLandscapeRight) {\n                } else {\n                    [self clickRemoteNotificationRestart:NO];\n                }\n            });\n            [[UserDefaultsPool sharedUserDefaultsPool] setObject:@\"1\" forKey:KEY_LAUNCH_WITH_NOTIFI];\n            [UIApplication sharedApplication].applicationIconBadgeNumber = 0;//set to zero\n        }\n    }\n    completionHandler(); //系统要求执行这个方法\n}\n\n//iOS10前台接收通知\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler __IOS_AVAILABLE(10.0) __TVOS_AVAILABLE(10.0) __WATCHOS_AVAILABLE(3.0) {\n    if (!LJPrivacyManage.shared.userPrivacyState) {\n        completionHandler(UNNotificationPresentationOptionNone);\n        return;\n    }\n    [[UserDefaultsPool sharedUserDefaultsPool] setObject:@\"1\" forKey:KEY_LAUNCH_WITH_NOTIFI];\n    \n    NSDictionary *userInfo = notification.request.content.userInfo;\n    \n    UNNotificationRequest *request = notification.request; //收到推送的请求\n    UNNotificationContent *content = request.content;  //推送消息的内容\n    NSString *strAlertBody = content.body;  //推送消息体\n    if (strAlertBody != NULL) {\n        _infoMsgPush = [HXPushedMsgInfo itemFromPushDictionary:userInfo];\n        if ([UIApplication sharedAp","relevantFile":"<file_path>NetWorkEvnMonitor.mm\n\n@end\n\n@implementation NetWorkEvnMonitor\n\n+(void)startNetWorkEvnMonitor:(void (^)(AFNetworkReachabilityStatus status))block\n{\n    [[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {\n        block(status);\n        SLog(@\"当前网络状态== %@\",AFStringFromNetworkReachabilityStatus(status));\n        HXLogInfo(kQHGlobal, @\"%@\", [NSThread currentThread]);\n        if (status == AFNetworkReachabilityStatusNotReachable) {\n            dispatch_async(dispatch_get_main_queue(), ^{\n                HXLogInfo(kQHGlobal, @\"NetWorkEvnMonitor:startNetWorkEvnMonitor\");\n                [AMCommunicationManager endAllConnect];\n                [[UIApplication sharedApplication].keyWindow makeToast:NetworkDisconnect duration:2.0 position:@\"center\"];\n            });\n        } else {\n            if (![AMCommunicationManager isConnectToServer:EQSERVER_QUOTA]) {\n                EQINT nState = [AMCommunicationManager getSessionStat:EQSERVER_QUOTA];\n                if(nState != EQSessionCell::CONNECT_OPEN && nState != EQSessionCell::CONNECT_CONNECTED) {\n                    // 未开启优化时执行老的交易重连逻辑\n                    // 注意：蜂窝数据建立连接后网络切换连接不会断开，重连通过行情认证触发，释放连接的时机需要和行情判断连接异常时机一致，否则会出现连接释放后行情未认证导致交易未重新登录的情况\n                    if (![HXTradeGrayScaleManager share].isConnectOptimizeEnable &&\n                        (status == AFNetworkReachabilityStatusReachableViaWWAN ||\n                         status == AFNetworkReachabilityStatusReachableViaWiFi)) {\n                        TradeDebugPrint(@\"[SDK_JNI_LOG][app] 网络状态(%ld)变化，释放当前交易账号连接\", status);\n                        [HXTradeRequestManager cancelAllRequests];\n                        [HXTradeRequestManager releaseLinkWithIpPort:[HXTradeLoginManager currentAccount].ipPort];\n                    }\n\n                    // 重新请求连接\n                    [AMCommunicationManager forceReConnect];\n                    return ;\n                }\n            } else {\n                [[HXOsInfo sharedInstance] resetWaitForEdgeCounter];\n            }\n        }\n        \n        [[NSNotificationCenter defaultCenter] postNotificationName:@\"AFNetworkReachabilityStatus\" object:nil userInfo:@{@\"status\":[NSString stringWithFormat:@\"%ld\",(long)status]}];\n    }];\n    \n    [[AFNetworkReachabilityManager sharedManager] startMonitoring];\n}\n\n+(BOOL)isNetWorkReachable\n{ \n    return  [AFNetworkReachabilityManager sharedManager].isReachable;\n}\n\n+(AFNetworkReachabilityStatus)getCurNetworkStatus\n{\n    return  [AFNetworkReachabilityManager sharedManager].networkReachabilityStatus;\n}\n\n+ (BOOL)isQuataConnet {\n    return [AMCommunicationManager isConnectToServer:EQSERVER_QUOTA];\n}\n\n AppDelegate.m\n HXFutures\n\n Created by hexin on 15/3/5.\n Copyright (c) 2015年 hexin. All rights reserved.","relevantFileList":[],"filePath":"AppDelegate.mm","template":"objective-cpp","multiRes":{"hipilot":"egister.h\"\n#import \"LJBaseRegister.h\"\n\n@interface AppDelegate ()\n@property (nonatomic, strong) HomeViewController *homeViewController;\n@property (nonatomic, strong) UIWindow *window;\n@property (nonatomic, strong) UI","deepseek-chat-lite":"egister.h\"","CodeQwen2.5-7B":"egister.h\"","copilot":"void)applicationDidBecomeActive:(UIApplication *)application {\n    // fixbug：通知方法中存在调用"}},{"prefix":"\n#import \"UKMarketBottomMenuViewController.h\"\n#import \"HXTimeSharingBottomMenuBaseViewController+functionInterface.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import \"SurveyModel.h\"\n#import <HXThemeVersion/UIImage+ImageName.h>\n#import \"DaPanItemViewController.h\"\n#import \"HXFenshiKlineNewOperationPanel.h\"\n#import <HXSelfStockDataProvider/HXSelfStockAPI.h>\n\n@interface UKMarketBottomMenuViewController ()\n\n@property (nonatomic,strong) IBOutlet UIView *dapanBGView;\n\n@end\n\n@implementation UKMarketBottomMenuViewController\n\n- (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n    [self.dapanItemVC setPageID:self.pageId];\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self addUKDaPanIndexItem];\n}\n\n- (void)addUKDaPanIndexItem{\n    NSDictionary *params = @{@\"requestProtocal\":@ID_Protocal_USAZS,\n                             @\"isUKIndex\" : @1\n                             };\n    self.dapanItemVC = [[DaPanItemViewController alloc] initWithParams:params];\n    [self addChildViewController:self.dapanItemVC];\n    [self.dapanBGView addSubview:self.dapanItemVC.view];\n    [self.dapanItemVC didMoveToParentViewController:self];\n}\n\n- (BOOL)isSelfStock {\n    NSArray< = HXS","infill":"elfStockAPI.getFavoriteStocksCache;\n    \n    NSMutableArray *groupI","suffix":"DArray = [[[SSGGroupViewModel shareInstance] IDsOfIncludedStockInfo:[SSGStockInfoModel modelWithStockID:[self getStockCode] marketID:[self getMarketID]]] mutableCopy];\n    if ([groupIDArray containsObject:[SSGGroupDefinition selfChiCangGroupID]]) {\n        [groupIDArray removeObject:[SSGGroupDefinition selfChiCangGroupID]];\n    }\n    if (groupIDArray.count > 0) {\n        return YES;\n    } else {\n        return NO;\n    }\n}\n\n- (IBAction)openUKOperatePanel:(id)sender {\n    [super openOperatePanel:sender];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"UKMarketBottomMenuViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"SelfStockAPI.groupIDsOfSuitableStock","deepseek-chat-lite":"elfStockAPI getSelfStockList];","CodeQwen2.5-7B":"elfStockAPI shareInstance].selfStockI<|file_sep|><|fim_prefix|>/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/SSG/","copilot":"elfStockAPI.getFavoriteStocksCache;\n    \n    NSMutableArray *groupI"}},{"prefix":"\n#import \"BuyViewController.h\"\n#import \"TradeAction.h\"\n#import \"WeiTuoMaiMaiPan.h\"\n#import \"NewTradeView.h\"\n#import \"BuySellSharedInstance.h\"\n#import \"HXSearchStockManager.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"WTTradePostionManager.h\"\n#import <HXBase/NSDictionary+Safety.h>\n#import <WTTradeModule/TradeBuyOrSellDefine.h>\n#import \"MultilpleTable.h\"\n#import <ThirdBase/Masonry.h>\n#import <HXKLineModule/HXFenshiView.h>\n#import <HXKLineModule/HXKlineView.h>\n#import \"HXFenshiParams.h\"\n#import \"Vertical_DetailTableViewController.h\"\n#import \"WTTradeBuySellKlineView.h\"\n#import \"WTTradePositionView.h\"\n#import \"TradeBuyOrSellView.h\"\n#import \"TradeBuyOrSellSubViewNormal.h\"\n#import \"WTHangqingStatusBarView.h\"\n#import \"UIView+Frame.h\"\n#import \"HXGrayRelease+Register.h\"\n#import \"WTTradeKlineView.h\"\n#import \"HXWTAccountManager.h\"\n#import \"CCChicangData.h\"\n\nNSString  *const maimaipanIsNotFirstAppear = @\"maimaipanIsNotFirstAppear\";\nstatic NSString * const SCMaimaiPanGuideView = @\"SCMaimaiPanGuideView\";\n@interface BuyViewController () <WTTradeTableViewSelectedProtocol, WTTradeBuySellKlineDelegate>\n\n@property (nonatomic,weak) IBOutlet TradeAction *tradeAction;\n\n@property (nonatomic,weak) IBOutlet WeiTuoMaiMaiPan *maiMaiPan;\n\n@property (nonatomic,weak) IBOutlet NewTradeView *tableView;\n\n@property (nonatomic, strong) BuySellSharedInstance *buyOrSellInstance;\n@property (nonatomic, strong) UIView *bgView;\n@property (nonatomic, strong) WTTradeBuySellKlineView *headView;\n\n@property (nonatomic, assign) CGFloat begainEditContentOffSetY;\n@property (nonatomic, assign) BOOL alreadBegainEdit;\n\n@property (nonatomic, assign, readwrite) BOOL showHangqing;\n@property (nonatomic, assign) BOOL searchViewIsShow;\n@end\n\n@implementation BuyViewController\n\n- (void)dealloc {\n    NSLog(@\"--------- dealloc\");\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.maiMaiPan.logString = TRADEMAIRUPAGEOBJECT;\n    [_tableView setPageId:2604];\n    if ([WTTradePostionManager isTenPan]) {\n        self.tradeAction.wt_MaiMaiPanTen = self.tableView.tenMaiMaiPan;\n        self.tableView.tenMaiMaiPan.delegate = self.tradeAction;\n        self.tableView.marketIndexScrollView.pageStr = WT_CBAS_OBJ_MAIRU_AGU;\n        self.tradeAction.marketIndexScrollView = self.tableView.marketIndexScrollView;\n    }\n    [_tableView onFinishInflate];\n    self.","infill":"\n\n    self.tableView.tableView.headView = [self fetch","suffix":"HeadView];\n    [self handleHeaderViewAction];\n    [self.tableView.tableView setTableContentInset:UIEdgeInsetsMake(-FENSHI_HEIGHT, 0, 0, 0)];\n    self.tableView.delegate = self;\nself.\n    self.tradeAction.stockSearchResultBlock = ^(HXSearchStockInfo *stockInfo) {\n        //判断是否是债券\n        if ([stockInfo.stockCode isEqualToString:@\"888880\"] || [stockInfo.stockCode isEqualToString:@\"131990\"]) {\n            [AMUIPublicProxy gotoPageWithId:PAGE_GZNHG_LIST params:nil];\n            return YES;\n        }\n        if (([stockInfo.stockCode hasPrefix:@\"1318\"] || [stockInfo.stockCode hasPrefix:@\"204\"]) &&\n            [@[SHAGNHAI_ZAIQUAN_MARKET_19, SEHNZHEN_ZHAIQUAN_MARKET_35] containsObject:stockInfo.stockMarket]) {\n                [AMUIPublicProxy gotoPageWithId:PAGE_GZNHG_LIST params:nil];\n            return YES;\n        }else {\n            return NO;\n        }\n    };\n    \n    if (_buyOrSellInstance){\n        [_tableView setBuySellInstance:_buyOrSellInstance];\n        \n    }\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoardWillHide:) name:UIKeyboardWillHideNotification object:nil];\n    \n    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];\n    if (![userDefaults boolForKey:maimaipanIsNotFirstAppear]&&[WTTradePostionManager isOpenTenPanAuth]&&![WTTradePostionManager isTenPan]) {\n        [userDefaults setBool:YES forKey:maimaipanIsNotFirstAppear];\n        [userDefaults synchronize];\n    }\n}\n\n- (void)keyBoardWillHide:(NSNotification *)notification {\n    if (!self.searchViewIsShow) {\n        [self tradeTableKeyboardWillHide];\n    }\n}\n\n- (CGFloat)fetchTradeActionHeight {\n    return [self.tableView fetchTradeActionHeight];\n}\n\n- (CGFloat)fetchTradeActionWidth {\n    return Screen_width-MINGXI_WIDTH;\n}\n\n- (UIView *)fetchHeadView {\n    \n    CGFloat tradeActionHeight = [self fetchTradeActionHeight];\n    [self.headView.backScrollView addSubview:self.tradeAction];\n    CGFloat tradeActionWidth = [self fetchTradeActionWidth];\n        \n    [_tradeAction mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.equalTo(self.headView.backScrollView);\n        make.top.equalTo(self.headView.backScrollView).offset(FENSHI_HEIGHT);\n        make.width.mas_equalTo(tradeActionWidth-7);\n        make.height.mas_equalTo(tradeActionHeight);\n    }];\n    \n    [self creatMaiMaiPanView];\n    [self creatPositionView];\n    \n    return self.headView;\n}\n\n- (void)creatMaiMaiPanView {\n    if (self.tableView.isTenPan) {\n        [self.headView.backScrollView addSubview:self.tableView.tenMaiMaiPan];\n        [self.tableView.tenMaiMaiPan mas_makeConstraints:^(MASConstraintMaker *make) {\n            make.width.mas_equalTo(MINGXI_WIDTH-5);\n            make.left.equalTo(self.headView.backScrollView).offset(int([self fetchTradeActionWidth]));\n            make.height.mas_equalTo([self fetchTradeActionHeight]-22);\n            make.top.equalTo(self.headView.backScrollView).offset(FENSHI_HEIGHT+12);\n        }];\n        [self.headView.backScrollView addSubview:self.tableView.marketIndexScrollView];\n        self.tableView.marketIndexScrollView.frame = CGRectMake(16, FENSHI_HEIGHT+_tradeAction.bounds.size.height+12+22, [self fetchTradeActionWidth] -24, self.tableView.level2ExternHeight - 34);\n        //添加仓位栏\n        self.tableView.positionView = [[WTTradePositionView alloc] initWithFrame:CGRectMake(0, FENSHI_HEIGHT+_tradeAction.bounds.size.height, [self fetchTradeActionWidth]-1, 22)];\n        [self.headView.backScrollView addSubview:self.tableView.positionView];\n        [self.tableView.positionView setLeftAlignment:16 rightAlignment:[self fetchTradeActionWidth]-9]; //设置仓位 label 的左右对齐点\n        [self.tableView updatePositionViewType];\n    }else{\n        [self.headView.backScrollView addSubview:self.maiMaiPan];\n        [self.maiMaiPan mas_makeConstraints:^(MASConstraintMaker *make) {\n            make.width.mas_equalTo(MINGXI_WIDTH-5);\n            make.height.mas_equalTo(_tradeAction.bounds.size.height-12);\n            make.top.equalTo(self.headView.backScrollView).offset(FENSHI_HEIGHT+12);\n            make.left.equalTo(self.headView.backScrollView).offset(int([self fetchTradeActionWidth]));\n        }];\n    }\n}\n\n- (void)creatPositionView {\n    //添加仓位栏\n    self.tableView.positionView = [[WTTradePositionView alloc] initWithFrame:CGRectMake(0, FENSHI_HEIGHT+_tradeAction.bounds.size.height, [self fetchTradeActionWidth]-7, 22)];\n    [self.headView.backScrollView addSubview:self.tableView.positionView];\n    [self.tableView.positionView setLeftAlignment:16 rightAlignment:[self fetchTradeActionWidth]-15]; //设置仓位 label 的左右对齐点\n    [self.tableView updatePositionViewType];\n    if (self.tableView.isTenPan) {\n        self.tableView.positionView.hidden = NO;\n       [self.tableView.positionView updatePositionWithStockPosition:-2 totalPosition:-2];\n       [self.tableView.positionView updateEstimateCostWithCost:@\"--\"];\n       [[self.tradeAction getTradeBuyOrSellView].tradeView updateDataWithCost:@\"--\" andProfitScale:@\"--\"];\n       self.tableView.positionView.bottomLine.hidden = YES;\n    } else {\n        self.tableView.positionView.hidden = YES;\n        self.tableView.positionView.bottomLine.hidden = YES;\n    }\n}\n\n- (void)handleHeaderViewAction {\n    WeakObj(self);\n    self.headView.heightHandle = ^(CGFloat height) {\n        selfWeak.headView.frame = CGRectMake(0, 0, Screen_width, height);\n        selfWeak.tableView.tableView.headView = selfWeak.headView;\n        NSIndexSet *set = [NSIndexSet indexSetWithIndex:0];\n        [selfWeak.tableView.tableView reloadSections:set withRowAnimation:UITableViewRowAnimationNone];\n        [selfWeak.tableView updateEmptyViewWithData:selfWeak.tableView.zicanInfo];\n    };\n    \n    self.headView.hangqingAction = ^(BOOL show) {\n        selfWeak.showHangqing = show;\n        if (selfWeak.hangqingAction) {\n            selfWeak.hangqingAction(show);\n        }\n    };\n    \n    self.headView.scrollAction = ^(BOOL begain) {\n        selfWeak.tableView.tableView.verticalScrollEnabled = !begain;\n    };\n}\n\n- (void)safeCurrentTradeAction:(BOOL)isStockTextFiled {\n    if (!self.alreadBegainEdit) {\n        self.alreadBegainEdit = YES;\n        self.begainEditContentOffSetY = self.tableView.tableView.tableContentOffset.y;\n    }\n    CGFloat headerHeight = self.headView.bounds.size.height;\n    CGFloat offSet = headerHeight-self.begainEditContentOffSetY;\n    CGFloat keyboardOffSet = KEYBOARD_HEIGHT;\n    if (isStockTextFiled) {\n        keyboardOffSet = KEYBOARD_HEIGHT*1.5;\n    }\n    if (offSet + keyboardOffSet > self.tableView.bounds.size.height) {\n        CGFloat setY = headerHeight - (self.tableView.bounds.size.height-keyboardOffSet);\n        [self.tableView.tableView setTableContentOffset:CGPointMake(0, MIN(setY, FENSHI_HEIGHT)) animated:YES];\n    }\n}\n\n// 离开页面时重置撤单参数\n- (void)resetCheDanParams {\n    NSMutableDictionary *paramsM = [self getParamsOfCurrentPage].mutableCopy;\n    NSString *goToPage = [paramsM stringObjectForKey:wtCheDanGotoPage];\n    if ([goToPage isEqualToString:@\"buy\"]) {\n        [paramsM safetyRemoveObjectForKey:wtCheDanGotoPage];\n        [self setParams:paramsM.copy];\n    }\n}\n\n- (void)viewWillAppear:(BOOL)animated{\n    [super viewWillAppear:animated];\n    [_tableView setPageData:[NSMutableDictionary dictionaryWithDictionary:[self getParamsOfCurrentPage]]];\n    [_tableView willAppear];\n}\n\n- (void)viewDidAppear:(BOOL)animated{\n    [super viewDidAppear:animated];\n    [_tableView didAppear];\n    [self.headView viewDidAppear];\n    [self pageLoadFinish];\n    [self endMonitor];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [_tableView willDisappear];\n    [super viewWillDisappear:animated];\n    [self.headView viewWillDisappear];\n}\n\n- (void)viewDidDisappear:(BOOL)animated{\n    [self resetCheDanParams];\n    [_tableView didDisappear];\n    [super viewDidDisappear:animated];\n}\n\n- (void)setBuySellInstance:(BuySellSharedInstance *)instance{\n    _buyOrSellInstance = instance;\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemo","relevantFile":"","relevantFileList":[],"filePath":"BuyViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"headView = [self fetch","deepseek-chat-lite":"tableView.delegate = self;","CodeQwen2.5-7B":"tableView.delegate = self;","copilot":"\n\n    self.tableView.tableView.headView = [self fetch"}},{"prefix":"\n#import \"QuickBuyOrSellView.h\"\n#import \"EQAppFrame.h\"\n#import <CoreText/CoreText.h>\n#import \"AM_UI_VarKeyString.h\"\n#import <HXTool/UIColor+extend.h>\n#import <EQFoundation/EQColor.h>\n#import \"QuickNetworkModal.h\"\n#import \"SystemControl_Append.h\"\n#import \"NSString+Account.h\"\n#import \"NSString+AM.h\"\n#import <HXTool/NSString+Chinese.h>\n#import <HXTool/NSString+EmptyAndWhitespace.h>\n#import \"WtLoginUtil.h\"\n#import \"HXWTAccountManager.h\"\n#import \"WTAccountInfor+HideAccount.h\"\n#import \"CCChicangData.h\"\n#import <HXBase/CustomKeyboard.h>\n#import <HXBase/AMUITabFm.h>\n#import \"HUAccountManager.h\"\n#import \"HUStockManager.h\"\n#import \"QuickBuyOrSellConfirmView.h\"\n#import \"QuickBuyOrSellModal.h\"\n#import <HXTool/UIView+Uilities.h>\n#import <HXThemeVersion/ThemeVersion.h>\n#import \"AlertViewBusiness.h\"\n#import \"HXUserInfo.h\"\n#import \"HXDropdownMenu.h\"\n#import \"HUValueDelta.h\"\n#import <HXDataTypeConvertor/NSArray+HXDataTypeConvertor.h>\n#import <ThirdBase/Masonry.h>\n#import \"HXSocketFetcher.h\"\n#import \"AMMiddlePublicProxy.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import <HXDataTypeConvertor/NSDictionary+HXDataTypeConvertor.h>\n#import <HXUIKit/UIApplication+Extention.h>\n#import \"WTRiskBuyAlertView.h\"\n#import \"WTRiskMsgCodeAuthView.h\"\n#import \"WTRiskNoticeManager.h\"\n#import \"__HXPageControl.h\"\n#import \"HXCustomAlertViewUniqueness.h\"\n#import <LocalURLConfig/LocalURLConfig.h>\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"WTHTMLStringTool.h\"\n#import \"WTLoginComponent.h\"\n#import \"TradeActionRequest.h\"\n#import <WTTradeModule/TradeActionDefine.h>\n#import \"HXUIStyleDefines.h\"\n#import \"WTChicangFlagInfo.h\"\n#import \"WTChicangFlagInfo+WTKeChuangBanCheck.h\"\n#import \"WTChicangFlagInfo+WTChuangYeBanCheck.h\"\n#import \"WTStockPlateCheck.h\"\n#import \"WTTradeVoiceManager.h\"\n#import \"WTJumpManager.h\"\n#import \"HXConditionalOrderDataManager.h\"\n#import <HXTool/InternetTimeTool.h>\n#import \"NSString+TradeDataCal.h\"\n#import <HXBase/TabBarControllerEx.h>\n#import \"HXAccountTypeSwitchManager.h\"\n#import \"HXCustomTradePopManager.h\"\n#import \"HXConditionalOrderDataModel.h\"\n#import \"JHModeTotalDefine.h\"\n#import \"HXGrayRelease+Register.h\"\n#import <HXTool/UILabel+HXAutoAdaptionSize.h>\n#import \"TradeToolWeakTimer.h\"\n#import \"MNCGMarkTools.h\"\n#import <HXBase/UIColor+Colours.h>\n#import \"EQAppInfo.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import \"AMLocalIdDef.h\"\n#import \"WTExchangeAccountView.h\"\n#import \"WTPriceLimitManager.h\"\n#import \"AMUIPublicProxy+CurveLine.h\"\n#import \"WTBuyStockAutoAddToSSGHandler.h\"\n#import \"ExchangeAccountView.h\"\n#import \"WTTradeSetArchiverManager.h\"\n#import \"HXConvertibleBondStockTool.h\"\n#import <HXBase/HXBaseMarketTools.h>\n#import <HXBase/NSArray+Safety.h>\n#import \"WTTradeSetDefaultModel.h\"\n#import \"UpAndDownPercentageModel.h\"\n#import <HXTool/UIImage+ImageColorRender.h>\n#import \"UIButton+HeXin.h\"\n#import \"NSDecimalNumberCalculate.h\"\n#import \"QuickOrderAutoSwitchAccountManager.h\"\n#import \"WTChaiDanManager.h\"\n#import <HXTool/NSObject+JSON.h>\n#import <AudioToolbox/AudioToolbox.h>\n#import \"WTTradeVoiceSetController.h\"\n#import \"WTBidCBASTool.h\"\n#import <HXBase/ImageTools.h>\n#import \"WTClientErrorAlertCBASTool.h\"\n#import \"HXCustomAlertView+HXBusiness.h\"\n#import <HXCustomAlertView/HXCustomAlertView_CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertView+CustomView.h>\n#import \"TradeToolRequestLimit.h\"\n#import <WTTradeModule/TradeBuyOrSellDefine.h>\n#import \"UIView+HeXin.h\"\n#import \"NSString+SubStrings.h\"\n#import \"HXStockMarketManager.h\"\n#import \"HXWTModuleAirTrack.h\"\n#import \"WTTradeFKManager.h\"\n#import <HXTool/InternetTimeTool.h>\n#import \"WTChicangFlagInfo+WTChuangYeBanCheck.h\"\n#import \"WTOrderManager.h\"\n#import \"QuickBuyOrSellTool.h\"\n#import \"HXCustomAlertViewIdentifier.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertViewPush.h>\n#import \"WTTradeSetFundModel.h\"\n#import <WTTradeModule/WTMarketTools.h>\n#import \"NSString+WTTradeSafety.h\"\n#import \"WTChicangFlagInfo+WTBeijingStockExchangeCheck.h\"\n#import \"HXAutoOrderShareData.h\"\n#import \"WTTradeHandleHKStockCodeManager.h\"\n#import \"WTCangWeiTool.h\"\n#import \"WTStockTools.h\"\n#import \"WTSkipSecondConfirmTool.h\"\n#import \"CCChiCangViewData.h\"\n#import \"WTTradeHQHandleManager.h\"\n#import \"WTTradeHQModel.h\"\n#import \"HXRecordStockPeriodManager.h\"\n#import \"WTQuickOrderHQDataHandler.h\"\n#import \"WTAccountInformationDisplayManager.h\"\n#import <HXBase/NSDictionary+Safety.h>\n#import \"WTCangWeiCheckTool.h\"\n#import \"TradeToolUtility.h\"\n#import \"WTCangWeiView.h\"\n#import \"WTDateSafeFormatter.h\"\n#import \"WTChaiDanRequestManager.h\"\n#import \"WTChaiDanQuickConfirmView.h\"\n#import \"WTTradelog.h\"\n#import \"HXKlineContentViewTradePresenter.h\"\n#import \"HXFSCOPoperView.h\"\n#import \"HXFenshiContentViewTradePresenter.h\"\n\n#define QUICK_SELL_OR_BUY_CONFIRM_TAG 'CFTG'\n#define QUICK_SELL_OR_BUY_RISK_WARNING_TAG  3008    //普通闪电下单交易风险提示弹窗\n#define QUICK_SELL_OR_BUY_WRONG_TAG 3000\n#define Risk_Tip                    3001\n\n#define KProtocalID_BUY\t\t\t1804\n#define KProtocalID_SELL\t\t1805\n#define KReqctrlID_Sell\t\t\t2002\n#define KReqctrlID_Buy\t\t\t2001\n#define KReqctrlID_Code_Buy\t\t4491\n#define KReqctrlID_Code_Sell\t4514\n#define KReqctrlID_Price_Buy\t4492\n#define KReqctrlID_Price_Sell\t4515\n\n#define KProtocalID_Confirm_Buy     1820\n#define KProtocalID_Confirm_Sell\t1821\n#define Kreqctrl_Buy\t\t\t\t2001\n#define Kreqctrl_Sell\t\t\t\t2002\n\n#define TABLE_FIVECELL_RIGHT    36618   //右边的买5表格\n#define TABLE_FIVECELL_LEFT     36619   // 左边卖5表格\n#define SELL_AMOUNT             36621   //卖出股票数量\n#define ABLE_SELL_AMOUNT        36620\t//可卖股票数量\n#define BUY_AMOUNT              36615   //买入股票数量\n#define ABLE_BUY_AMOUNT         36614\t//可买股票数量\n#define RISE_STOP_PRICE         36616\t//涨停价\n#define FALL_STOP_PRICE         36617   // 跌停价\n#define STOCKCODE               2102\t//股票代码\n#define STOCKNAME               2103\t//股票名称\n#define STOCK_DEAL_PRICE        2127    // 股票成交价格\n#define RISKWARNING          36650 //买入不适当性匹配\n#define RISKLIUHENG          36651 //适当性风险确认留痕编号\n\n#define RISKMSGCODEAUTH      36652 //适当性风险确认是否需要短信验证。1为需要，0或者没有返回这个字段为不需要\n#define RISKPHONENUM         36653 //手机号\n#define RISKPHONEEDITSATAUS  36654 //手机号是否可编辑；1为可编辑，0为不可编辑\n#define RISKGETOCDETIME      36655 //获取验证码的间隔时间\n\n#define LIMITUPNAME          36661 //涨停文案\n#define LIMITDOWNNAME        36662 //涨停文案\n#define WT_MKCODE            36646 // 市场代码\n\nextern NSString * const RiskMsgCodeAuth;\nextern NSString * const RiskPhoneNum;\nextern NSString * const RiskPhoneEditStatus;\nextern NSString * const RiskGetCodeTime;\n\n// 债券\n#define WT_ID_ALLPRICE          36656   // 全价\n#define WT_ID_INTEREST          36657   // 利息\n#define WT_ID_DISTANCE          36648   // 价格加减步长\n#define WT_ID_EXCHANGERATE      36649   // 汇率\n\n#define kStartAnimationTime     0.05\n\n#define ShenGangTongString      @\"shengangtong\"\n#define ShenGangTongJYCode      @\"9\"\n#define HuGangTongString        @\"hugangtong\"\n#define HuGangTongJYCode        @\"8\"\n\n#define TIAOJIANDANFUNID        @\"700009\" //条件单成功后的请求ID号\n\n#define LABELDISTANCE 8\n\n#define SafeString(str) str?:@\"\"\n\n#define SC_KHBTN_DID_CLICKED @\"SC_KHBTN_DID_CLICKED\"\n\n#define HUGANGTONG_TRADEMARKET   @\"8\"  //沪港通交易市场\n#define SHENGANGTONG_TRADEMARKET @\"9\"  //深港通交易市场\n\nextern CEQAppFrame* EQGetAppFrame();\nextern EQBOOL CopyNSStringToEQString(NSString* pNsStr,CEQString16& pEQStringSave);\nextern NSString* CopyEQStringToNsString(CEQString16* pEQsrc);\nstatic NSString *const kRequestErrorMessageKey = @\"errorMessageKey\";\n\n\n\n\n@interface QuickBuyOrSellView ()\n<UITextFieldDelegate,\nTradeConfirmDelegate,\nCustomKeyboardDelegate,\nQuickBuyOrSellConfirmViewDelegate,\nUIGestureRecognizerDelegate,\nPriceTextFieldDelegate,\nHXDr","infill":"thLogobj","suffix":"ect:[self.behaviorLogMainObj stringByAppendingString:@\"_verify.failed\"] actionType:ClickAction];\n    [se]\n}\n\n#pragma mark - WTRiskBuyAlertViewDelegate\n- (void)riskBuyAlertViewWillPresent:(WTRiskBuyAlertView *)tipView\n{\n    [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\".bsdppqr\"]];\n}\n\n- (void)riskBuyAlertViewDidClickCancel:(WTRiskBuyAlertView *)tipView {\n    [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\"_bsdppqr.cancel\"] actionType:ClickAction];\n    [HXCustomAlertView dismissShowingAlertView];\n    \n    if (tipView.cancelNeedClear) {\n        // 右上角关闭按钮\n        UIButton *closeQuickBuyOrSellButton = [self viewWithTag:102];\n        [self closeQuickBuyOrSellView:closeQuickBuyOrSellButton];\n    }\n    [self.liuhengFlagDic removeAllObjects];  //点击取消后不留痕\n}\n\n- (void)riskBuyAlertViewDidClickConfirm:(WTRiskBuyAlertView *)tipView {\n    [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\"_bsdppqr.ok\"] actionType:ClickAction];\n    \n    //是否需要短信校验\n    BOOL isNeedMsgCodeAuth = [[self.msgCodeDic thsStringForKey:RiskMsgCodeAuth] boolValue];\n    if (isNeedMsgCodeAuth) {\n        [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\".verify\"] actionType:ClickAction];\n        WTRiskMsgCodeAuthView *msgCodeAuthView = [[WTRiskMsgCodeAuthView alloc] init];\n        msgCodeAuthView.delegate = self;\n        [msgCodeAuthView initViewWithDic:self.msgCodeDic];\n        HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithSize:msgCodeAuthView.frame.size];\n        [alertView.contentView addSubview:msgCodeAuthView];\n        alertView.priority = HXCustomAlertViewPriority_Required;  //最高优先级，该弹框必须紧接着弹出\n        alertView.uniqueIdentifier = @\"riskWarning\";\n        [alertView uniquenessJudgeWithComparator:^BOOL(HXCustomAlertView * _Nonnull selfAlert, HXCustomAlertView * _Nonnull otherAlert) {\n            if (!otherAlert.uniqueIdentifier || ![otherAlert.uniqueIdentifier isKindOfClass:[NSString class]] || ![otherAlert.uniqueIdentifier isEqualToString:@\"riskWarning\"]) {\n                return YES;\n            }\n            return NO;\n        }];\n        [alertView show];\n    }\n    [HXCustomAlertView dismissShowingAlertView];\n}\n\n- (void)didJumpToWarningPage {\n    [[ComponentBlockManager sharedInstance] removeAllComponent];  //跳转页面时关闭登录组件\n    [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\"_bsdppqr.check\"] actionType:ClickAction toPageid:PAGE_WT_RISK_STATIC_HTML_ID];\n}\n\n#pragma mark -\n\n- (void)initGestures {\n    UIPanGestureRecognizer * swipeGesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(panscrollHandle:)];\n    swipeGesture.delegate = self;\n    [self addGestureRecognizer:swipeGesture];\n    \n    UISwipeGestureRecognizer * downGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(downGesture)];\n    downGesture.delegate = self;\n    downGesture.direction = UISwipeGestureRecognizerDirectionDown;\n    [self addGestureRecognizer:downGesture];\n}\n//返回YES，第一个手势和第二个冲突时，第一个失效\n- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer {\n    if ([gestureRecognizer isMemberOfClass:UIPanGestureRecognizer.class] && [otherGestureRecognizer isMemberOfClass:UISwipeGestureRecognizer.class]) {\n        return YES;\n    }\n    return NO;\n}\n\n- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch{\n    if ([touch.view isDescendantOfView:_confirmView] ||\n        (self.openChicang && [gestureRecognizer isMemberOfClass:UISwipeGestureRecognizer.class]) || [touch.view isDescendantOfView:_chaiDanQuickConfirmView]\n        ) {\n        return NO;\n    }\n    \n    return YES;\n}\n\n- (void)downGesture {\n\n    [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\"_weibangb.close\"]];\n    if (self.quickDelegate && [self.quickDelegate respondsToSelector:@selector(cancelQuickBuyOrSellViewClickedWithType:)]) {\n        [self.quickDelegate cancelQuickBuyOrSellViewClickedWithType:QuickBuyOrSellTypeNormal];\n    }\n    //清除缓存中的股票数量\n    [AMUIPublicProxy RemovePublicValue:kLastInputAmountKey];\n    [WTPriceLimitManager sharedManager].priceSubject = nil;\n}\n\n- (void)panscrollHandle:(UIPanGestureRecognizer *)panG {\n    if (self.isGGT || self.quanJingQueue) {\n        return;\n    }\n    switch (panG.state) {\n        case UIGestureRecognizerStateBegan:\n            //收起键盘\n            [self hideKeyBoard];\n            if (self.quickDelegate && [self.quickDelegate respondsToSelector:@selector(goDownQuickBuyOrSellViewWithType:)]) {\n                [self.quickDelegate goDownQuickBuyOrSellViewWithType:QuickBuyOrSellTypeNormal];\n            }\n            break;\n\n        case UIGestureRecognizerStateChanged:\n        {\n            CGPoint point = [panG translationInView:self];\n            CGFloat desY = self.frame.origin.y + point.y;\n            //bounce处理\n            if (desY < self.minStageY) {\n                desY = self.minStageY;\n            } else if (desY > self.maxStageY) {\n                desY = self.maxStageY;\n            }\n            self.frame = CGRectMake(self.frame.origin.x, desY, self.frame.size.width, self.frame.size.height);\n            [panG setTranslation:CGPointZero inView:self];\n        }\n            break;\n        case UIGestureRecognizerStateEnded:\n            [self finishPan:panG];\n            break;\n        case UIGestureRecognizerStateCancelled:\n            [self finishPan:panG];\n            break;\n\n        default:\n            break;\n    }\n}\n\n- (void)finishPan:(UIPanGestureRecognizer *)panG {\n    CGFloat velocity = [panG velocityInView:self].y;\n    CGFloat desY = self.maxStageY;\n    if (fabs(velocity) > 600) {\n        //未超出边界，根据速度，\n        if (velocity > 0) {\n            desY = self.maxStageY;\n        } else {\n            desY = self.minStageY;\n        }\n    } else {\n        //未达到阀值，距离哪个stage近，则选择哪个\n        if (self.frame.origin.y - self.minStageY < self.maxStageY - self.frame.origin.y) {\n            desY = self.minStageY;\n        } else {\n            desY = self.maxStageY;\n        }\n    }\n    NSString *pageType = @\"\";\n    if (self.jiaoyiType == JiaoYiTypeBuy) {\n        pageType = @\"kjmairu\";\n    } else if (self.jiaoyiType == JiaoYiTypeSell) {\n        pageType = @\"kjmaichu\";\n    }\n    if (desY == self.maxStageY) {\n        //收起\n        if ([self.quickDelegate respondsToSelector:@selector(quickViewPanToBottom)]) {\n            [self.quickDelegate quickViewPanToBottom];\n        }\n        [ClientUserBehaviorLog sendLogWithLogobject:[NSString stringWithFormat:@\"%@_%@.chicang.close.hd\",[HXRecordStockPeriodManager shareInstance].fenshiLog,pageType]];\n        self.openChicang = NO;\n    } else if(desY == self.minStageY) {\n        //展开\n        if (self.quickDelegate && [self.quickDelegate respondsToSelector:@selector(quickViewPanToTop)]) {\n            [self.quickDelegate quickViewPanToTop];\n        }\n        [ClientUserBehaviorLog sendLogWithLogobject:[NSString stringWithFormat:@\"%@_%@.chicang.open.hd\",[HXRecordStockPeriodManager shareInstance].fenshiLog,pageType]];\n        self.openChicang = YES;\n    }\n}\n\n- (void)hideChiCang {\n    //隐藏键盘\n    [self hideKeyBoard];\n    if (self.quickDelegate && [self.quickDelegate respondsToSelector:@selector(goDownQuickBuyOrSellViewWithType:)]) {\n        [self.quickDelegate goDownQuickBuyOrSellViewWithType:QuickBuyOrSellTypeNormal];\n    }\n    if (self.openChicang && [self.quickDelegate respondsToSelector:@selector(quickViewPanToBottom)]) {\n        [self.quickDelegate quickViewPanToBottom];\n        self.openChicang = NO;\n    }\n}\n//圆角+阴影\n- (void)updateLayerMask {\n    UIEdgeInsets edge = UIEdgeInsetsZero;\n    if (self.quanJingQueue) {\n        self.scrollUpTipView.hidden = YES;\n        self.backBtn.hidden = YES;\n        self.wtExchangeAccountView.frame = CGRectMake(8, 0, 200, 48.0f);\n        edge = UIEdgeInsetsMake(13, 0, 0,","relevantFile":"","relevantFileList":[],"filePath":"QuickBuyOrSellView.mm","template":"objective-cpp","multiRes":{"hipilot":"aftViewDelegate,\nWTRiskBuyAlertViewDelegate","deepseek-chat-lite":"opdownMenuDelegate,","CodeQwen2.5-7B":"opDownMenuDelegate,","copilot":"thLogobj"}},{"prefix":"\n#import \"HSMarketQuickController.h\"\n#import \"HXWTAccountManager.h\"\n#import \"HXAccountTypeSwitchManager.h\"\n#import <HXBase/AMUITabFm.h>\n#import \"EnvironmentVariableManager.h\"\n#import \"AMMiddlePublicProxy.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"AMUIPublicProxy+CurveLine.h\"\n#import \"AMSettingVarsProxy.h\"\n#import \"WtLoginUtil.h\"\n#import \"RZRQQuickBuyOrSellView.h\"\n#import \"QuickBuyOrSellView.h\"\n#import \"HXTimeSharingBottomMenuBaseViewController.h\"\n#import \"WTLoginComponent.h\"\n#import <EQConfigModul/EQLocalString.h>\n#import \"DaPanItemViewController.h\"\n#import \"WtLoginCollectUserBehaviorTool.h\"\n#import \"FullScreenTipView.h\"\n#import <HXBase/EQUIWindow.h>\n#import \"HXUserInfo.h\"\n#import <HXTool/UIView+Uilities.h>\n#import <HXBase/TabBarControllerEx.h>\n#import \"HXPageControlProtocol.h\"\n#import \"NSString+AM.h\"\n#import <HXTool/NSString+Chinese.h>\n#import <HXTool/NSString+EmptyAndWhitespace.h>\n#import \"AM_UI_VarKeyString.h\"\n#import \"AMSQLPublicProxy.h\"\n#import \"HSBottomMenuViewController.h\"\n#import \"HXWTAccountStockInfoManager.h\"\n#import \"WTAccountDefine.h\"\n#import \"TimeSharingAndKlineTools.h\"\n#import \"WTLoginComponent.h\"\n#import \"HXWTAccountStockInfoManager.h\"\n#import \"WTJumpManager.h\"\n#import \"HXGrayRelease.h\"\n#import \"HXGrayRelease+Register.h\"\n#import <HXTool/UIImagePlus.h>\n#import \"WTChicangFlagInfo.h\"\n#import \"SecuritySDKManager.h\"\n#import \"FinanceMasterBussinessHandler.h\"\n#import \"HXChedanOrSearchDataLevel.h\"\n#import \"QuickCheDanView.h\"\n#import \"GuideViewHeader.h\"\n#import \"WTExchangeAccountGuideView.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import \"WTExchangeAccountNeedShowGuide.h\"\n#import \"WTExchangeAccountView.h\"\n#import <ThirdBase/Masonry.h>\n#import \"ExchangeTradeAccountProtocol.h\"\n#import \"HXSelectAccount.h\"\n#import \"UpAndDownPercentageModel.h\"\n#import \"BindAccountPWDManager.h\"\n#import \"WTJumpOptManager.h\"\n#import \"HXAccountStateView.h\"\n#import \"HXTradeKHGuideDataHandler.h\"\n#import \"HXWTQuanCheAndGaiDanManager.h\"\n#import \"HXWTQuanCheAndGaiDanRequestManager.h\"\n#import \"QuickOrderAutoSwitchAccountManager.h\"\n#import \"WTKeepOnlineManager.h\"\n#import \"WTBidCBASTool.h\"\n#import \"SurveyModel.h\"\n#import \"HXUserInfo+HXBusiness.h\"\n#import \"RZRQQuickCheDanView.h\"\n#import \"RZRQCheDanRequestManager.h\"\n#import \"HSMarketQuickChiCangManager.h\"\n#import \"TipShapeLayer.h\"\n#import \"HXWTAccountManager.h\"\n#import \"HXGrayRelease+Register.h\"\n#import \"HXCustomAlertViewIdentifier.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertViewPush.h>\n#import \"WTOrderManager.h\"\n#import \"WTAccountInformationDisplayManager.h\"\n#import \"WTDoubleWayOrderDataTool.h\"\n#import <HXBase/HXBaseMarketTools.h>\n#import \"HXSocketFetcher.h\"\n#import <HXBase/NSArray+Safety.h>\n#import \"WTFastOrderManager.h\"\n#import \"HXRecordStockPeriodManager.h\"\n#import \"WTConditionOrderMarkManager.h\"\n#import \"WTTradeMMSetLogManager.h\"\n#import \"WTDateSafeFormatter.h\"\n#import \"WTSSLCertificateTool.h\"\n#import \"WTPositonFunctionManager.h\"\n#import \"WTQuickTradeMenuView.h\"\n#import \"HXFSConditionOrderDataTool.h\"\n#import \"HXConditionalOrderHelpTool.h\"\n#import <HUTradeFramework/HUAccountManager.h>\n#import <WTTradeModule/UIView+HeXin.h>\n#import \"QuickBuyOrSellTool.h\"\n#import \"HXConditionOrderExceptionHandlingManager.h\"\n#import \"HXConditionalOrderTool.h\"\n#import \"HXCurveHuaXianXiaDanDelegate.h\"\n#import <WTTradeModule/WTNotificationKeyDefine.h>\n#import <WTTradeModule/WTLocalOrderRecordManager.h>\n\n#define BUY_PAGE_ID             @\"PAGE_WTXIADAN_BUY_ID\"\n#define SELL_PAGE_ID            @\"PAGE_WTXIADAN_SELL_ID\"\n#define CANCEL_PAGE_ID          @\"PAGE_CHEDAN_ID\"\n#define CHICANG_PAGE_ID         @\"PAGE_CHICHANG_ID\"\n\n#define RZRQ_BUY_PAGE_ID        @\"PAGE_RZRQ_BUY\"\n\n#define SC_QUICKTRADEMULTIACCOUNTGUIDEVIEW @\"SC_QUICKTRADEMULTIACCOUNTGUIDEVIEW\"\n\n#define FK_IDENTIFIER @\"RISK_CONTROL_SETTINGS_POP_UP_WINDOW\"\n\n#define MaimaiPanClicked_tipsKey @\"maimaiPanClicked_tipsKey\"\n\nNSString * const KEY_OF_STOCKMARKET_LIST = @\"stockmarketKey\";\n\nNSString *const HSMarketQuickControllerQuickViewCanShow = @\"TradeQuickViewCanShow\";\nNSString *const HSMarketQuickControllerFSConditionOrderCanShow = @\"TradeFSConditionOrderCanShow\";\nNSString *const HSMarketQuickControllerQuickViewType = @\"TradeQuickViewType\";\nNSString *const HSForceOpenQuickViewWithChiCang = @\"HSForceOpenQuickViewWithChiCang\";\nNSString *const HSForceOpenQuickCheDanView = @\"HSForceOpenQuickCheDanView\";\n\n// 菜单面板状态值 取值范围见 WTQuickTradeMenuView.h\nNSString *const HSForceOpenMenuChiCangListState = @\"HSForceOpenMenuChiCangListState\";\n\n//是否展开持仓\nNSString *const HSForceOpenFSCoSetViewWithChiCang = @\"HSForceOpenFSCoSetViewWithChiCang\";\n//闪电下单是否弹出\nNSString *const FSQuickViewisOpen = @\"FSQuickViewisOpen\";\n\n// 菜单状态未定义，持仓列表切换取票时，环境变量中 HSForceOpenMenuChiCangListState 的值为 kHSMenuChiCangStateUndefined 时，不会恢复持仓列表\nNSInteger const kHSMenuChiCangStateUndefined = -154645;\n\nextern EQUIWindow* g_eqWindow;\n\n@interface HSMarketQuickController ()\n<\nQuickBuyOrSellViewDelegate,\nFullScreenTipViewDelegate,\nQuickCheDanHeadViewDelegate,\nQuickCheDanViewDelegate,\nWTEcxhangeAccountGuideViewDelegate,\nExchangeTradeAccountProtocol,\nRZRQCheDanViewHeightDelegate,\nHuaXianXiaDanDelegate,\nWTQuickTradeMenuViewDelegate,\nHXConditionOrderExceptionHandlingProtocol\n>\n\n@property (nonatomic, assign) int targetPageID;\n\n@property (nonatomic, strong) QuickBuyOrSellView   *quickView;\n@property (nonatomic, strong) RZRQQuickBuyOrSellView   *rzrqQuickView;\n\n@property (nonatomic, strong) QuickCheDanView *quickCheDanView;\n\n@property (nonatomic, assign) CGFloat changeDistance;//记录quickView需要移动的距离\n@property (nonatomic, assign) CGFloat rzrqChangeDistance;//记录quickView需要移动的距离\n\n@property (nonatomic, assign) QuickViewFrameState    quickViewState;\n@property (nonatomic, assign) QuickViewFrameState    rzrqQuickViewState;\n\n@property (nonatomic, assign) BOOL isRZRQQuickBuyOrSellView;\n\n@property (nonatomic, strong) FullScreenTipView*  tipView;       //新手引导背景view\n\n@property (nonatomic, assign) BOOL isJinEUp; //金额输入框更高\n@property (nonatomic, assign) BOOL isRZRQJinEUp; //金额输入框更高\n@property (nonatomic, strong) WTExchangeAccountGuideView *graphic;\n@property (nonatomic, strong) TipShapeLayer *tipShapeLayer;\n\n@property (nonatomic, strong) WTExchangeAccountNeedShowGuide *exchangeNeedShowGuide;\n\n@property (nonatomic, strong) UpAndDownPercentageModel *upAndDownModel;\n\n@property (nonatomic, strong) HXWTQuanCheAndGaiDanManager *quanCheManager;\n\n@property (nonatomic, strong) RZRQQuickCheDanView *rzrqQuickCheDanView;\n/* 持仓列表*/\n@property (nonatomic, strong) HSMarketQuickChiCangManager *chicangManager;\n@property (nonatomic, strong) HXFSConditionOrderEntry *coEntry;\n@property (nonatomic, strong) HXConditionOrderExceptionHandlingManager *conditionOrderExceptionManager;\n@end\n\n@implementation HSMarketQuickController\n\n- (void)dealloc{\n    [self removeScrollupTipWithOutAnimation];\n    [[ComponentBlockManager sharedInstance] removeComponentIfNeedWithOwner:self];\n    [self removeTotalQuickViewForce];\n    [self chedanCloseTheQuickCheDanViewWithOutAnimation];\n    [self removeConditionOrderForce];\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    \n    [HXAccountTypeSwitchManager sharedInstance].delegate = nil;\n    [AMUIPublicProxy SetPublicValue:@0 Key:HSMarketQuickControllerQuickViewCanShow];\n    [AMUIPublicProxy SetPublicValue:@(NO) Key:HSForceOpenQuickViewWithChiCang];\n    [AMUIPublicProxy SetPublicValue:@(NO) Key:HSForceOpenQuickCheDanView];\n    [AMUIPublicProxy SetPublicValue:@(kHSMenuChiCangStateUndefined) Key:HSForceOpenMenuChiCangListState];\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self whenVCDidLoa","infill":"ew {\n    [QuickBuyOrSellTool updateFenshiQuickTradeModel:WTFSQuickViewOpenStatusMen","suffix":"u];\n    [[self.tradeProtocol getDaPanItem] hideDaPanItem];\n    \n    [self showXiaDanView];\n    \n    [self refreshCanCheWeiTuoCount];\n    \n    NSString *loginBehaviorObj = [WtLoginCollectUserBehaviorTool getLoginBehaviorWithType:@\"unactive\" reason:@\"autoLoginType1\"];\n    [self tryToAutoLoginNormalAccountInQuickTradingWithLoginBehaviorObj:loginBehaviorObj];\n    [self createQuickViewKeyBoards];\n    \n    [self sendLogWithLogobject:[NSString stringWithFormat:@\"%@.xiadan\",[HXRecordStockPeriodManager shareInstance].fenshiLog] actionType:ClickAction];\n        \n    //持仓股票标记灰度是否打开\n    if ([WTPositonFunctionManager isOpenChicangMark]) {\n        self.chicangManager.stockCode = [self.tradeProtocol getStockCode];\n        self.chicangManager.stockMarket = [self.tradeProtocol getMarketID];\n        [self.chicangManager.chicangTableView.tableView reloadData];\n        [self.chicangManager refreshView];\n    }\n}\n\n- (void)refreshCanCheWeiTuoCount {\n    if (!self.xiaDanView.superview) {\n        return;\n    }\n    //先重置成不显示\n    [self.xiaDanView updateCheDanCountLabelWithCount:0];\n    //已登录 && 实盘账号 && 本地有下单记录\n    WTAccountInfor *curAccountInfo = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if(!curAccountInfo.bLogin || !curAccountInfo.bRealOrSimu || ![[WTLocalOrderRecordManager sharedManager] isAccountHasWTRecord:curAccountInfo stockCode:[self.tradeProtocol getStockCode]]){\n        return;\n    }\n    if(curAccountInfo.isNormal){\n        [self handleShowCancheWeiTuoCount];\n    }else{\n        [self showRZRQCancheWeiTuoCount];\n    }\n}\n\n//获取当前可撤委托数量\n-(void)handleShowCancheWeiTuoCount{\n    WeakObj(self);\n    NSString *stockCode = [self.tradeProtocol getStockCode];\n    [HXWTQuanCheAndGaiDanRequestManager queryCanCheWeiTuoCountWithStockCode:stockCode callback:^(int count) {\n        [selfWeak.xiaDanView updateCheDanCountLabelWithCount:count];\n    }];\n}\n\n//获取RZRQ当前可撤委托数量\n-(void)showRZRQCancheWeiTuoCount{\n    WeakObj(self);\n    NSString *stockCode = [self.tradeProtocol getStockCode];\n    [RZRQCheDanRequestManager requestCanCheDanCountWithStockCode:stockCode callback:^(int count) {\n        [selfWeak.xiaDanView updateCheDanCountLabelWithCount:count];\n    }];\n}\n\n- (void)createQuickViewKeyBoards {\n    [self.quickView createKeyBoards];\n    if ([[HXWTAccountManager sharedInstance] currentAccountIsRZRQ]) {\n        [self.rzrqQuickView createKeyBoards];\n    }\n}\n\n- (void)prepareSelf{\n    [super prepareSelf];\n    \n    //默认时不在买卖状态\n    [[NSUserDefaults standardUserDefaults] setInteger:JiaoYiTypeNone forKey:kJiaoYiTypeKey];\n    [[NSUserDefaults standardUserDefaults] synchronize];\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(willEnterBackGround) name:UIApplicationWillResignActiveNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(removeTotalQuickViewForce) name:GoOutComponent object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(stockHadSwitched) name:@\"QuickStockSwitchNotification\" object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(applicationDidEnterBackground) name:UIApplicationDidEnterBackgroundNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(fenshiViewWillAppear) name:@\"updateQuickViewDelegate\" object:nil];\n    if ([[HXGrayRelease shared] switchForKey:GrayReleaseKeyQuickMenuChiCang]) {\n        self.jiaoyiType = JiaoYiTypeNone;\n    }\n    [self createQuickView];\n}\n\n- (void)fenshiViewWillAppear {\n    //增加通知，在分时k线同屏下，从k线进入分时更新闪电下单代理\n    id<HXFenShiViewSupportBottomToolProtocol> curveFenshi = [self getCurveFenShi];\n    curveFenshi.huaXianDelegate = self;\n}\n\n- (void)stockHadSwitched{\n    //测试时发现，切换股票会有多分HSMarketQuickController存在\n    NSString *marketid = [[self.tradeProtocol getMarketVC] getMarketID] ? :  [self.tradeProtocol getMarketID];\n    NSString *stockcode = [[self.tradeProtocol getMarketVC] getStockCode] ?: [self.tradeProtocol getStockCode];\n    [self stockHadSwitched:marketid stockcode:stockcode];\n}\n\n- (void)stockHadSwitched:(NSString *)marketid stockcode:(NSString *)stockcode {\n    \n    if (self.jiaoyiType == JiaoYiTypeTJDan) {\n        [_coEntry stockHadSwitched:marketid stockcode:stockcode];\n        return;\n    }\n    \n    if ([HXBaseMarketTools supportQuickViewLock:marketid stockCode:stockcode]) {\n        if ([self shouldShowBuySellType]) {\n            [AMUIPublicProxy SetPublicValue:@1 Key:HSMarketQuickControllerQuickViewCanShow];\n            [self setNowBuySellType];\n        }\n        \n        if ([self shouldShowMenuChiCang] && [self.xiaDanView isKindOfClass:[WTQuickTradeMenuView class]]) {\n            [AMUIPublicProxy SetPublicValue:@(((WTQuickTradeMenuView *)self.xiaDanView).currentState) Key:HSForceOpenMenuChiCangListState];\n        }\n    } else {\n        [AMUIPublicProxy SetPublicValue:@0 Key:HSMarketQuickControllerQuickViewCanShow];\n        [AMUIPublicProxy SetPublicValue:@(kHSMenuChiCangStateUndefined) Key:HSForceOpenMenuChiCangListState];\n        WTAMLogInfo(WT_LOG_MODULE_CHICANG, WT_LOG_KEYWORDS_PUBLIC, @\"闪电下单持仓切换股票跳转不会唤起持仓列表, marketid=%@, stockcode=%@, jiaoyiType=%ld\", marketid, stockcode, self.jiaoyiType);\n    }\n    \n    [self removeTotalQuickViewForce]; // 移除面板\n    [self removeCheDanQuickViewForce];\n}\n\n- (BOOL)shouldShowMenuChiCang {\n    if (!self.xiaDanView.superview) {\n        return NO;\n    }\n    if ([self.xiaDanView respondsToSelector:@selector(isChiCangListViewDisplaying)] && [self.xiaDanView isChiCangListViewDisplaying]) {\n        return YES;\n    }\n    return NO;\n}\n\n- (BOOL)shouldShowBuySellType{\n    return ((self.quickView.superview && ![self.quickView hasConfirm]) ||\n            (_rzrqQuickView.superview && ![_rzrqQuickView hasConfirm]));\n}\n\n- (void)setNowBuySellType{\n    NSNumber *numberType = [NSNumber numberWithInt:(int)self.jiaoyiType];\n    [AMUIPublicProxy SetPublicValue:numberType Key:HSMarketQuickControllerQuickViewType];\n    if (self.quickView.openChicang) {\n        [AMUIPublicProxy SetPublicValue:@(YES) Key:HSForceOpenQuickViewWithChiCang];\n    }\n}\n\n- (void)refreshQuickBuySellView {\n    if ([[HXGrayRelease shared] switchForKey:GrayReleaseKeyQuickMenuChiCang]) {\n        [self holdChiCangManager];\n    }\n    JiaoYiType jiaoyiType = (JiaoYiType)[[AMUIPublicProxy GetPublicValue:HSMarketQuickControllerQuickViewType] intValue];\n    [AMUIPublicProxy SetPublicValue:[NSNumber numberWithInt:JiaoYiTypeNone] Key:HSMarketQuickControllerQuickViewType];\n    if (self.jiaoyiType == JiaoYiTypeBuy || self.jiaoyiType == JiaoYiTypeSell) {\n        [self forceOpenQuickView];\n        return;\n    } else if (jiaoyiType == JiaoYiTypeBuy || jiaoyiType == JiaoYiTypeSell) {\n        self.jiaoyiType = jiaoyiType;\n        [self forceOpenQuickView];\n    }\n}\n\n- (void)refreshQuickMenuView {\n    if ([[HXGrayRelease shared] switchForKey:GrayReleaseKeyQuickMenuChiCang]) {\n        [self holdChiCangManager];\n    }\n    [AMUIPublicProxy SetPublicValue:[NSNumber numberWithInt:JiaoYiTypeNone] Key:HSMarketQuickControllerQuickViewType];\n    self.jiaoyiType = JiaoYiTypeNone;\n    [self showQuickXiaDanView];\n}\n//更新撤单列表数据\n- (void)refreshChedanData {\n    if (self.quickCheDanView.superview) {\n        [self.quickCheDanView updateCheDanData];\n        return;\n    }\n    if (self.rzrqQuickCheDanView.superview) {\n        [self.rzrqQuickCheDanView updateCheDanData];\n    }\n}\n\n- (void)refreshCheDanView {\n    JiaoYiType jiaoyiType = (JiaoYiType)[[AMUIPublicProxy GetPublicValue:HSMarketQuickControllerQuickViewType] intValue];\n    \n    if (self.jiaoyiType == JiaoYiTypeCheDan || jiaoyiType == JiaoYiTypeCheDan) {\n        self.jiaoyiType = JiaoYiTypeCheDan;\n        if ([[HXWTAccountManager sharedInstance] currentAccountIsRZRQ]) {\n            [self openQuickRZRQCheDanView];\n        } else {\n            [self openQuickCheDanView];\n        }\n    }\n    [AMUIPublicProxy SetPublicValue:[NSNumber numberWithInt:JiaoYiTypeNone] Key:HSMarketQuickControllerQuickViewType];\n}\n\n- (void)refreshFS","relevantFile":"","relevantFileList":[],"filePath":"HSMarketQuickController.mm","template":"objective-cpp","multiRes":{"hipilot":"d","deepseek-chat-lite":"d];","CodeQwen2.5-7B":"d];","copilot":"ew {\n    [QuickBuyOrSellTool updateFenshiQuickTradeModel:WTFSQuickViewOpenStatusMen"}},{"prefix":"\n#import \"HSMarketQuickController.h\"\n#import \"HXWTAccountManager.h\"\n#import \"HXAccountTypeSwitchManager.h\"\n#import <HXBase/AMUITabFm.h>\n#import \"EnvironmentVariableManager.h\"\n#import \"AMMiddlePublicProxy.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"AMUIPublicProxy+CurveLine.h\"\n#import \"AMSettingVarsProxy.h\"\n#import \"WtLoginUtil.h\"\n#import \"RZRQQuickBuyOrSellView.h\"\n#import \"QuickBuyOrSellView.h\"\n#import \"HXTimeSharingBottomMenuBaseViewController.h\"\n#import \"WTLoginComponent.h\"\n#import <EQConfigModul/EQLocalString.h>\n#import \"DaPanItemViewController.h\"\n#import \"WtLoginCollectUserBehaviorTool.h\"\n#import \"FullScreenTipView.h\"\n#import <HXBase/EQUIWindow.h>\n#import \"HXUserInfo.h\"\n#import <HXTool/UIView+Uilities.h>\n#import <HXBase/TabBarControllerEx.h>\n#import \"HXPageControlProtocol.h\"\n#import \"NSString+AM.h\"\n#import <HXTool/NSString+Chinese.h>\n#import <HXTool/NSString+EmptyAndWhitespace.h>\n#import \"AM_UI_VarKeyString.h\"\n#import \"AMSQLPublicProxy.h\"\n#import \"HSBottomMenuViewController.h\"\n#import \"HXWTAccountStockInfoManager.h\"\n#import \"WTAccountDefine.h\"\n#import \"TimeSharingAndKlineTools.h\"\n#import \"WTLoginComponent.h\"\n#import \"HXWTAccountStockInfoManager.h\"\n#import \"WTJumpManager.h\"\n#import \"HXGrayRelease.h\"\n#import \"HXGrayRelease+Register.h\"\n#import <HXTool/UIImagePlus.h>\n#import \"WTChicangFlagInfo.h\"\n#import \"SecuritySDKManager.h\"\n#import \"FinanceMasterBussinessHandler.h\"\n#import \"HXChedanOrSearchDataLevel.h\"\n#import \"QuickCheDanView.h\"\n#import \"GuideViewHeader.h\"\n#import \"WTExchangeAccountGuideView.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import \"WTExchangeAccountNeedShowGuide.h\"\n#import \"WTExchangeAccountView.h\"\n#import <ThirdBase/Masonry.h>\n#import \"ExchangeTradeAccountProtocol.h\"\n#import \"HXSelectAccount.h\"\n#import \"UpAndDownPercentageModel.h\"\n#import \"BindAccountPWDManager.h\"\n#import \"WTJumpOptManager.h\"\n#import \"HXAccountStateView.h\"\n#import \"HXTradeKHGuideDataHandler.h\"\n#import \"HXWTQuanCheAndGaiDanManager.h\"\n#import \"HXWTQuanCheAndGaiDanRequestManager.h\"\n#import \"QuickOrderAutoSwitchAccountManager.h\"\n#import \"WTKeepOnlineManager.h\"\n#import \"WTBidCBASTool.h\"\n#import \"SurveyModel.h\"\n#import \"HXUserInfo+HXBusiness.h\"\n#import \"RZRQQuickCheDanView.h\"\n#import \"RZRQCheDanRequestManager.h\"\n#import \"HSMarketQuickChiCangManager.h\"\n#import \"TipShapeLayer.h\"\n#import \"HXWTAccountManager.h\"\n#import \"HXGrayRelease+Register.h\"\n#import \"HXCustomAlertViewIdentifier.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertViewPush.h>\n#import \"WTOrderManager.h\"\n#import \"WTAccountInformationDisplayManager.h\"\n#import \"WTDoubleWayOrderDataTool.h\"\n#import <HXBase/HXBaseMarketTools.h>\n#import \"HXSocketFetcher.h\"\n#import <HXBase/NSArray+Safety.h>\n#import \"WTFastOrderManager.h\"\n#import \"HXRecordStockPeriodManager.h\"\n#import \"WTConditionOrderMarkManager.h\"\n#import \"WTTradeMMSetLogManager.h\"\n#import \"WTDateSafeFormatter.h\"\n#import \"WTSSLCertificateTool.h\"\n#import \"WTPositonFunctionManager.h\"\n#import \"WTQuickTradeMenuView.h\"\n#import \"HXFSConditionOrderDataTool.h\"\n#import \"HXConditionalOrderHelpTool.h\"\n#import <HUTradeFramework/HUAccountManager.h>\n#import <WTTradeModule/UIView+HeXin.h>\n#import \"QuickBuyOrSellTool.h\"\n#import \"HXConditionOrderExceptionHandlingManager.h\"\n#import \"HXConditionalOrderTool.h\"\n#import \"HXCurveHuaXianXiaDanDelegate.h\"\n#import <WTTradeModule/WTNotificationKeyDefine.h>\n#import <WTTradeModule/WTLocalOrderRecordManager.h>\n\n#define BUY_PAGE_ID             @\"PAGE_WTXIADAN_BUY_ID\"\n#define SELL_PAGE_ID            @\"PAGE_WTXIADAN_SELL_ID\"\n#define CANCEL_PAGE_ID          @\"PAGE_CHEDAN_ID\"\n#define CHICANG_PAGE_ID         @\"PAGE_CHICHANG_ID\"\n\n#define RZRQ_BUY_PAGE_ID        @\"PAGE_RZRQ_BUY\"\n\n#define SC_QUICKTRADEMULTIACCOUNTGUIDEVIEW @\"SC_QUICKTRADEMULTIACCOUNTGUIDEVIEW\"\n\n#define FK_IDENTIFIER @\"RISK_CONTROL_SETTINGS_POP_UP_WINDOW\"\n\n#define MaimaiPanClicked_tipsKey @\"maimaiPanClicked_tipsKey\"\n\nNSString * const KEY_OF_STOCKMARKET_LIST = @\"stockmarketKey\";\n\nNSString *const HSMarketQuickControllerQuickViewCanShow = @\"TradeQuickViewCanShow\";\nNSString *const HSMarketQuickControllerFSConditionOrderCanShow = @\"TradeFSConditionOrderCanShow\";\nNSString *const HSMarketQuickControllerQuickViewType = @\"TradeQuickViewType\";\nNSString *const HSForceOpenQuickViewWithChiCang = @\"HSForceOpenQuickViewWithChiCang\";\nNSString *const HSForceOpenQuickCheDanView = @\"HSForceOpenQuickCheDanView\";\n\n// 菜单面板状态值 取值范围见 WTQuickTradeMenuView.h\nNSString *const HSForceOpenMenuChiCangListState = @\"HSForceOpenMenuChiCangListState\";\n\n//是否展开持仓\nNSString *const HSForceOpenFSCoSetViewWithChiCang = @\"HSForceOpenFSCoSetViewWithChiCang\";\n//闪电下单是否弹出\nNSString *const FSQuickViewisOpen = @\"FSQuickViewisOpen\";\n\n// 菜单状态未定义，持仓列表切换取票时，环境变量中 HSForceOpenMenuChiCangListState 的值为 kHSMenuChiCangStateUndefined 时，不会恢复持仓列表\nNSInteger const kHSMenuChiCangStateUndefined = -154645;\n\nextern EQUIWindow* g_eqWindow;\n\n@interface HSMarketQuickController ()\n<\nQuickBuyOrSellViewDelegate,\nFullScreenTipViewDelegate,\nQuickCheDanHeadViewDelegate,\nQuickCheDanViewDelegate,\nWTEcxhangeAccountGuideViewDelegate,\nExchangeTradeAccountProtocol,\nRZRQCheDanViewHeightDelegate,\nHuaXianXiaDanDelegate,\nWTQuickTradeMenuViewDelegate,\nHXConditionOrderExceptionHandlingProtocol\n>\n\n@property (nonatomic, assign) int targetPageID;\n\n@property (nonatomic, strong) QuickBuyOrSellView   *quickView;\n@property (nonatomic, strong) RZRQQuickBuyOrSellView   *rzrqQuickView;\n\n@property (nonatomic, strong) QuickCheDanView *quickCheDanView;\n\n@property (nonatomic, assign) CGFloat changeDistance;//记录quickView需要移动的距离\n@property (nonatomic, assign) CGFloat rzrqChangeDistance;//记录quickView需要移动的距离\n\n@property (nonatomic, assign) QuickViewFrameState    quickViewState;\n@property (nonatomic, assign) QuickViewFrameState    rzrqQuickViewState;\n\n@property (nonatomic, assign) BOOL isRZRQQuickBuyOrSellView;\n\n@property (nonatomic, strong) FullScreenTipView*  tipView;       //新手引导背景view\n\n@property (nonatomic, assign) BOOL isJinEUp; //金额输入框更高\n@property (nonatomic, assign) BOOL isRZRQJinEUp; //金额输入框更高\n@property (nonatomic, strong) WTExchangeAccountGuideView *graphic;\n@property (nonatomic, strong) TipShapeLayer *tipShapeLayer;\n\n@property (nonatomic, strong) WTExchangeAccountNeedShowGuide *exchangeNeedShowGuide;\n\n@property (nonatomic, strong) UpAndDownPercentageModel *upAndDownModel;\n\n@property (nonatomic, strong) HXWTQuanCheAndGaiDanManager *quanCheManager;\n\n@property (nonatomic, strong) RZRQQuickCheDanView *rzrqQuickCheDanView;\n/* 持仓列表*/\n@property (nonatomic, strong) HSMarketQuickChiCangManager *chicangManager;\n@property (nonatomic, strong) HXFSConditionOrderEntry *coEntry;\n@property (nonatomic, strong) HXConditionOrderExceptionHandlingManager *conditionOrderExceptionManager;\n@end\n\n@implementation HSMarketQuickController\n\n- (void)dealloc{\n    [self removeScrollupTipWithOutAnimation];\n    [[ComponentBlockManager sharedInstance] removeComponentIfNeedWithOwner:self];\n    [self removeTotalQuickViewForce];\n    [self chedanCloseTheQuickCheDanViewWithOutAnimation];\n    [self removeConditionOrderForce];\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    \n    [HXAccountTypeSwitchManager sharedInstance].delegate = nil;\n    [AMUIPublicProxy SetPublicValue:@0 Key:HSMarketQuickControllerQuickViewCanShow];\n    [AMUIPublicProxy SetPublicValue:@(NO) Key:HSForceOpenQuickViewWithChiCang];\n    [AMUIPublicProxy SetPublicValue:@(NO) Key:HSForceOpenQuickCheDanView];\n    [AMUIPublicProxy SetPublicValue:@(kHSMenuChiCangStateUndefined) Key:HSForceOpenMenuChiCangListState];\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self whenVCDidLoa","infill":"wQuick","suffix":"XiaDanView {\n    [QuickBuyOrSellTool updateFenshiQuickTradeModel:WTFSQuickViewOpenStatusMenu];\n    [[self.tradeProtocol getDaPanItem] hideDaPanItem];\n    \n    [self showXiaDanView];\n    \n    [self refreshCanCheWeiTuoCount];\n    \n    NSString *loginBehaviorObj = [WtLoginCollectUserBehaviorTool getLoginBehaviorWithType:@\"unactive\" reason:@\"autoLoginType1\"];\n    [self tryToAutoLoginNormalAccountInQuickTradingWithLoginBehaviorObj:loginBehaviorObj];\n    [self createQuickViewKeyBoards];\n    \n    [self sendLogWithLogobject:[NSString stringWithFormat:@\"%@.xiadan\",[HXRecordStockPeriodManager shareInstance].fenshiLog] actionType:ClickAction];\n        \n    //持仓股票标记灰度是否打开\n    if ([WTPositonFunctionManager isOpenChicangMark]) {\n        self.chicangManager.stockCode = [self.tradeProtocol getStockCode];\n        self.chicangManager.stockMarket = [self.tradeProtocol getMarketID];\n        [self.chicangManager.chicangTableView.tableView reloadData];\n        [self.chicangManager refreshView];\n    }\n}\n\n- (void)refreshCanCheWeiTuoCount {\n    if (!self.xiaDanView.superview) {\n        return;\n    }\n    //先重置成不显示\n    [self.xiaDanView updateCheDanCountLabelWithCount:0];\n    //已登录 && 实盘账号 && 本地有下单记录\n    WTAccountInfor *curAccountInfo = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if(!curAccountInfo.bLogin || !curAccountInfo.bRealOrSimu || ![[WTLocalOrderRecordManager sharedManager] isAccountHasWTRecord:curAccountInfo stockCode:[self.tradeProtocol getStockCode]]){\n        return;\n    }\n    if(curAccountInfo.isNormal){\n        [self handleShowCancheWeiTuoCount];\n    }else{\n        [self showRZRQCancheWeiTuoCount];\n    }\n}\n\n//获取当前可撤委托数量\n-(void)handleShowCancheWeiTuoCount{\n    WeakObj(self);\n    NSString *stockCode = [self.tradeProtocol getStockCode];\n    [HXWTQuanCheAndGaiDanRequestManager queryCanCheWeiTuoCountWithStockCode:stockCode callback:^(int count) {\n        [selfWeak.xiaDanView updateCheDanCountLabelWithCount:count];\n    }];\n}\n\n//获取RZRQ当前可撤委托数量\n-(void)showRZRQCancheWeiTuoCount{\n    WeakObj(self);\n    NSString *stockCode = [self.tradeProtocol getStockCode];\n    [RZRQCheDanRequestManager requestCanCheDanCountWithStockCode:stockCode callback:^(int count) {\n        [selfWeak.xiaDanView updateCheDanCountLabelWithCount:count];\n    }];\n}\n\n- (void)createQuickViewKeyBoards {\n    [self.quickView createKeyBoards];\n    if ([[HXWTAccountManager sharedInstance] currentAccountIsRZRQ]) {\n        [self.rzrqQuickView createKeyBoards];\n    }\n}\n\n- (void)prepareSelf{\n    [super prepareSelf];\n    \n    //默认时不在买卖状态\n    [[NSUserDefaults standardUserDefaults] setInteger:JiaoYiTypeNone forKey:kJiaoYiTypeKey];\n    [[NSUserDefaults standardUserDefaults] synchronize];\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(willEnterBackGround) name:UIApplicationWillResignActiveNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(removeTotalQuickViewForce) name:GoOutComponent object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(stockHadSwitched) name:@\"QuickStockSwitchNotification\" object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(applicationDidEnterBackground) name:UIApplicationDidEnterBackgroundNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(fenshiViewWillAppear) name:@\"updateQuickViewDelegate\" object:nil];\n    if ([[HXGrayRelease shared] switchForKey:GrayReleaseKeyQuickMenuChiCang]) {\n        self.jiaoyiType = JiaoYiTypeNone;\n    }\n    [self createQuickView];\n}\n\n- (void)fenshiViewWillAppear {\n    //增加通知，在分时k线同屏下，从k线进入分时更新闪电下单代理\n    id<HXFenShiViewSupportBottomToolProtocol> curveFenshi = [self getCurveFenShi];\n    curveFenshi.huaXianDelegate = self;\n}\n\n- (void)stockHadSwitched{\n    //测试时发现，切换股票会有多分HSMarketQuickController存在\n    NSString *marketid = [[self.tradeProtocol getMarketVC] getMarketID] ? :  [self.tradeProtocol getMarketID];\n    NSString *stockcode = [[self.tradeProtocol getMarketVC] getStockCode] ?: [self.tradeProtocol getStockCode];\n    [self stockHadSwitched:marketid stockcode:stockcode];\n}\n\n- (void)stockHadSwitched:(NSString *)marketid stockcode:(NSString *)stockcode {\n    \n    if (self.jiaoyiType == JiaoYiTypeTJDan) {\n        [_coEntry stockHadSwitched:marketid stockcode:stockcode];\n        return;\n    }\n    \n    if ([HXBaseMarketTools supportQuickViewLock:marketid stockCode:stockcode]) {\n        if ([self shouldShowBuySellType]) {\n            [AMUIPublicProxy SetPublicValue:@1 Key:HSMarketQuickControllerQuickViewCanShow];\n            [self setNowBuySellType];\n        }\n        \n        if ([self shouldShowMenuChiCang] && [self.xiaDanView isKindOfClass:[WTQuickTradeMenuView class]]) {\n            [AMUIPublicProxy SetPublicValue:@(((WTQuickTradeMenuView *)self.xiaDanView).currentState) Key:HSForceOpenMenuChiCangListState];\n        }\n    } else {\n        [AMUIPublicProxy SetPublicValue:@0 Key:HSMarketQuickControllerQuickViewCanShow];\n        [AMUIPublicProxy SetPublicValue:@(kHSMenuChiCangStateUndefined) Key:HSForceOpenMenuChiCangListState];\n        WTAMLogInfo(WT_LOG_MODULE_CHICANG, WT_LOG_KEYWORDS_PUBLIC, @\"闪电下单持仓切换股票跳转不会唤起持仓列表, marketid=%@, stockcode=%@, jiaoyiType=%ld\", marketid, stockcode, self.jiaoyiType);\n    }\n    \n    [self removeTotalQuickViewForce]; // 移除面板\n    [self removeCheDanQuickViewForce];\n}\n\n- (BOOL)shouldShowMenuChiCang {\n    if (!self.xiaDanView.superview) {\n        return NO;\n    }\n    if ([self.xiaDanView respondsToSelector:@selector(isChiCangListViewDisplaying)] && [self.xiaDanView isChiCangListViewDisplaying]) {\n        return YES;\n    }\n    return NO;\n}\n\n- (BOOL)shouldShowBuySellType{\n    return ((self.quickView.superview && ![self.quickView hasConfirm]) ||\n            (_rzrqQuickView.superview && ![_rzrqQuickView hasConfirm]));\n}\n\n- (void)setNowBuySellType{\n    NSNumber *numberType = [NSNumber numberWithInt:(int)self.jiaoyiType];\n    [AMUIPublicProxy SetPublicValue:numberType Key:HSMarketQuickControllerQuickViewType];\n    if (self.quickView.openChicang) {\n        [AMUIPublicProxy SetPublicValue:@(YES) Key:HSForceOpenQuickViewWithChiCang];\n    }\n}\n\n- (void)refreshQuickBuySellView {\n    if ([[HXGrayRelease shared] switchForKey:GrayReleaseKeyQuickMenuChiCang]) {\n        [self holdChiCangManager];\n    }\n    JiaoYiType jiaoyiType = (JiaoYiType)[[AMUIPublicProxy GetPublicValue:HSMarketQuickControllerQuickViewType] intValue];\n    [AMUIPublicProxy SetPublicValue:[NSNumber numberWithInt:JiaoYiTypeNone] Key:HSMarketQuickControllerQuickViewType];\n    if (self.jiaoyiType == JiaoYiTypeBuy || self.jiaoyiType == JiaoYiTypeSell) {\n        [self forceOpenQuickView];\n        return;\n    } else if (jiaoyiType == JiaoYiTypeBuy || jiaoyiType == JiaoYiTypeSell) {\n        self.jiaoyiType = jiaoyiType;\n        [self forceOpenQuickView];\n    }\n}\n\n- (void)refreshQuickMenuView {\n    if ([[HXGrayRelease shared] switchForKey:GrayReleaseKeyQuickMenuChiCang]) {\n        [self holdChiCangManager];\n    }\n    [AMUIPublicProxy SetPublicValue:[NSNumber numberWithInt:JiaoYiTypeNone] Key:HSMarketQuickControllerQuickViewType];\n    self.jiaoyiType = JiaoYiTypeNone;\n    [self showQuickXiaDanView];\n}\n//更新撤单列表数据\n- (void)refreshChedanData {\n    if (self.quickCheDanView.superview) {\n        [self.quickCheDanView updateCheDanData];\n        return;\n    }\n    if (self.rzrqQuickCheDanView.superview) {\n        [self.rzrqQuickCheDanView updateCheDanData];\n    }\n}\n\n- (void)refreshCheDanView {\n    JiaoYiType jiaoyiType = (JiaoYiType)[[AMUIPublicProxy GetPublicValue:HSMarketQuickControllerQuickViewType] intValue];\n    \n    if (self.jiaoyiType == JiaoYiTypeCheDan || jiaoyiType == JiaoYiTypeCheDan) {\n        self.jiaoyiType = JiaoYiTypeCheDan;\n        if ([[HXWTAccountManager sharedInstance] currentAccountIsRZRQ]) {\n            [self openQuickRZRQCheDanView];\n        } else {\n            [self openQuickCheDanView];\n        }\n    }\n    [AMUIPublicProxy SetPublicValue:[NSNumber numb","relevantFile":"","relevantFileList":[],"filePath":"HSMarketQuickController.mm","template":"objective-cpp","multiRes":{"hipilot":"d:self];\n    [self setNowBuySellType];\n}\n\n- (void)showQuick","deepseek-chat-lite":"d];","CodeQwen2.5-7B":"d];","copilot":"wQuick"}},{"prefix":"\n#import \"AppDelegate.h\"\n#import \"CoredataManager.h\"\n#import \"HXUIFrmPool.h\"\n#import \"UserDefaultsPoolKeys.h\"\n#import <objc/runtime.h>\n#import \"LJLocalURLConfig.h\"\n#import \"MePool.h\"\n#import <HXBaseViewController/HXViewController.h>\n#import \"HXPushedMsgInfo.h\"\n#import \"WKWebViewController.h\"\n#import \"LJHQDetailController.h\"\n#import \"ShenHeBanBenKongZhi.h\"\n#import \"SurveyModel.h\"\n#import \"ReadAndWriteFile.h\"\n#import \"AppBanBenDef.h\"\n#import \"LJLocalURLConfig.h\"\n#import \"GCXPageIdDefine.h\"\n#import \"CustomIOSAlertView.h\"\n#import \"HomeViewController.h\"\n\n#import \"LaunchCrashProtection.h\"\n#ifdef NSFoundationVersionNumber_iOS_9_x_Max\n#import <UserNotifications/UserNotifications.h>\n#endif\n#import \"HXDBObjectManager.h\"\n#import \"JumpTool.h\"\n#import \"HXTools.h\"\n#import \"HXShareSDK+Set.h\"\n#import \"HXHTTPDetector.h\"\n#import \"ReturnWindow.h\"\n#import <LJMobiPush/LJMobiPushManager.h>\n#import \"TradePushMessage.h\"\n#import \"ModelMainView.h\"\n#import \"AM_UI_VarKeyString.h\"\n#import \"NetWorkEvnMonitor.h\"\n//#import <HXIMClientSDK/HXIMClientSDK.h>\n#import \"UIView+Toast.h\"\n#import \"HXURLProtocol.h\"\n#import \"RegisRemotePushBus.h\"\n#import \"CurveSettingManager.h\"\n#import \"LJTechDataManage.h\"\n#import \"IQKeyboardManager.h\"\n\n#import \"HXTradeLoginManager.h\"\n#import \"HXHttpNetwork.h\"\n#import \"LJUserAgentManager.h\"\n\n#import \"HXSwiftHeader.h\"\n#import \"LJSwitchManager.h\"\n\n#if (defined ADHOC) || (defined DEBUG) //#ifdef ADHOC\n#import \"HXPerformanceCenter.h\"\n#import \"HXHangDetectMoniter.h\"\n#import \"BuryPointWindow.h\"\n#endif\n\n#import \"CrashReporter.h\"\n#import \"SwitchAccountListView.h\"\n#import <LJSelfStockManager/LJSelfStockManager.h>\n#import \"LJSelfStockGroupManager.h\"\n#import \"CompanyPushManager.h\"\n\n#import <HsFutuSystemInfo/HsSysInfoUtils.h>\n#import \"AXSystemInfo.h\"\n#import <CoreTelephony/CTCellularData.h>\n#include <arpa/inet.h>\n#import \"AppDelegate+ScreenShot.h\"\n#import \"AppDelegate+LJDrawLine.h\"\n#import \"AppDelegate+LJDrawLineShare.h\"\n#import \"LJPrivacyManage.h\"\n#import \"AppDelegate+PasetboardAnalysis.h\"\n#import \"SimulatedTradeGameListData.h\"\n#import \"HXLoginManager.h\"\n#import \"ChannelViewModel.h\"\n#import \"FUSwitchManage.h\"\n#import \"HXFuturesScreenShotShareManager.h\"\n#import \"JiaoYiLoginPool.h\"\n#import \"AppDelegate+FUActionManage.h\"\n#import \"FUCommonSwitchModel.h\"\n#import \"CrashReporterLogsManager.h\"\n#import \"LJAppInfo.h\"\n#import \"PhoneNumLoginManager.h\"\n#import \"OneKeyBindController.h\"\n#import \"FeedBackManager.h\"\n#import \"WKHorizontalScreenWebViewController.h\"\n#import \"OpenAccountManager.h\"\n#import \"KeyManager.h\"\n#import \"UIStatusBarManager+HandleTapAction.h\"\n#import \"HXLevel2PowerManager.h\"\n#import \"HXAddValueCheckTool.h\"\n#import \"HotStockRequestManager.h\"\n#import \"AppDelegate+Theme.h\"\n#import \"LJLiveHardcodedString.h\"\n#import \"LJAdPushManage.h\"\n#import \"CTMediator+SocketFetcherHandler.h\"\n#import \"ToastManagerPool.h\"\n#import \"LJTCPLogManager.h\"\n#import \"HXTopInformationPopUpWindow.h\"\n#import \"THSDomainResolver.h\"\n#import \"LJNetProxyStatusCheckTool.h\"\n#import \"EQUIWindow.h\"\n#import \"LJDrawLinePushManage.h\"\n#import \"HXLogPushManager.h\"\n#import \"AppDelegate+Hummer.h\"\n#import \"LJStockCodeTablePush.h\"\n#import \"LJDrawLineManager.h\"\n#import \"LJAdPagePushManager.h\"\n#import \"SecuritySDKManager.h\"\n#import \"DataBaseService.h\"\n#import \"AppDelegate+SafeProtector.h\"\n#import \"LJIndicatorPushManage.h\"\n\n#if DEBUGTOOL\n#import <HXCoverageReport/HXCoverageReportService.h>\n#endif\n#import \"UIApplication+info.h\"\n#import \"LJCrashService.h\"\n#import <HXAPMonitor/HXAPMonitor.h>\n#import <LJDrawLineCloudStore/LJDLPlanDataManage.h>\n#import \"HXDeviceManager.h\"\n#import \"LJAppStoreLaunchEffectMonitor.h\"\n#import \"ZiXunTitleView.h\"\n#import <LJCategoryKit/LJCategory.h>\n#import \"LJTradeGeneralTools.h\"\n#import \"LJCustomizedUITools.h\"\n#import \"LJWebClientIdentification.h\"\n#import <EQConfigModul/EQConfigManager.h>\n#import <HXCore/HXCoreConfig.h>\n#import \"HXEnvManager.h\"\n#import \"AppDelegate+UserAgent.h\"\n#import \"LJRouter+JumpTool.h\"\n#import \"LJUserPermissionPushManager.h\"\n#import \"HXSERVGrayReleaseRegister.h\"\n#import <LJCategoryKit/UIViewController+LJAdd.h>\n#import \"HXCommandManager.h\"\n#import \"AppDelegate+LJCommunication.h\"\n#import \"AMCollectUserBehavior.h\"\n#import \"HXCapitalLuaUpdateManager.h\"\n#import \"HXViewController+Protocols.h\"\n#import <LJViewTrace/LJViewControllerProtocol.h>\n#import <HXCommand/HXHangMonitorExecutor.h>\n#import <HXTradeDevelopTool/HXTradeDevelopTool.h>\n#import <LJTradeFunctionManager/AllCloudCondictionCompanyManager.h>\n#import <TYSwizzle/TYLoggerManager.h>\n#import <LJDomainChangeObserver/LJDomainChangeObserver.h>\n#import <LJDeviceHelper/LJDeviceHelper.h>\n#import <LJTradeClientSDK/HXTradeClientSDK.h>\n#import \"LJNWPackageManager.h\"\n#import <LJCommunication/AMCommunicationManager.h>\n#import <HXAPMonitor/HXAPMLaunchPlugin.h>\n\n@import CTMediator;\n@import LJContractManager;\n@import LJStockCodeTable;\n@import LJGridTrade_Category;\n@import LJTradeOrderService;\n@import LJTradeSpecificationPushType;\n@import HXTradeDailyDataNotification;\n@import LJIAPManager;\n@import LogManager;\n\n#define BanBenKongZhi @\"banbenkongzhi.plist\"\n#define TAG_ALERT_PUSH 232323\n\n//手抄授权登录回调\n#define HXTHSAuthRes @\"HXTHSAuthRes\"\n\nEQINT g_bInForground = 1;//是否在前台\nEQINT g_bLocalApp = 0;//是否为本地应用(主应用)，1:是主应用，0:被其他应用作为静态库编译进去了。\n\nstatic NSString * const kAppId = @\"\"; //@\"<appId>\";\nstatic NSString * const kAppSecret = @\"\"; //@\"<appSecret>\";\nstatic NSString * const kTHSDomainResolver = @\"70kf1j0q\";\n/// 推送状态日志\nstatic NSString *const LogPushStatus = @\"LOGPUSHSTATUS\";\nextern NSString * const ClickStatusBar;\n//extern EQUIWindow* g_eqWindow;\nextern EQINT g_bLocalApp; //是否为本地应用(主应用)，1:是主应用，0:被其他应用作为静态库编译进去了。\n\nNSString * const kAppDelegateNotificationReceivedNotification = @\"AppDelegateNotificationReceived\";\n\nstatic NSString *const kAppDidReceiveMemoryWarning = @\"APP_DID_RECEIVE_MEMORY_WARNING\";\nstatic NSString *const kAppWillTerminateLog = @\"APP_WILL_TERMINATE\";\n\n/// 讯息图标\nstatic NSString *const kTouGuIcon = @\"TouGu\";\n/// 讯息标题\nstatic NSString *const kTouGuTitleStr = @\"讯息\";\n/// 意见反馈回复图标\nstatic NSString *const kFeedbackReplyIcon = @\"YiJianHuiFu\";\n/// 意见反馈回复标题\nstatic NSString *const kFeedbackReplyTitleStr = @\"意见反馈回复\";\n/// client跳转协议前缀\nstatic NSString *const kClientHtml = @\"client.html\";\nstatic NSString *const kUnableToViewMarketData = @\"您所用网络环境可能无法查看部分行情数据\";\nstatic NSString *const kRequestTimeoutErrorMessage = @\"请求超时，请稍后重试\";\n///universal link 链接跳转配置\nstatic NSString *const kClipboardKey = @\"clipboardkey=\";\nstatic NSString *const kClipLinkKey = @\"cliplinkkey=\";\n\n@interface AppDelegate () <DoneBusinessDelegate, UNUserNotificationCenterDelegate>\n\n@property (nonatomic, strong) HXPushedMsgInfo *infoMsgPush;\n@property (nonatomic, strong) HXPushedMsgInfo *infoMsgTouGuPush;\n/// 通过aler弹框展示的推送消息对象\n@property (nonatomic, strong) HXPushedMsgInfo *infoMsgPushToAlert;\n@property (nonatomic, strong) LJHQDetailController *geGuViewController;\n@property (nonatomic, strong) ShenHeBanBenKongZhi *shenheBanbenKongzhi;\n@property (nonatomic, strong) dispatch_queue_t analysisQueue;\n\n@end\n\n@implementation AppDelegate\n\n- (void)dealloc {\n    \n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)initRootViewController {\n    self.window = [HXEnvManager shareInstance].appWindow;\n    MainTabbarController *tabbar = [[MainTabbarController alloc] init];\n    [HXEnvManager shareInstance].appWindow.rootViewController = tabbar;\n    [[HXEnvManager shareInstance].appWindow makeKeyAndVisible];\n}\n\n#pragma mark - APP life cycle\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptio","infill":"UGTOOL // 检查 fa","suffix":"ctory 服务是否注入完整\n    [FactoryServiceCheck check];\n#endif\n    \n#if (defined ADHOC) || (defined DEBUG)\n    // 测试环境如果配置了启动就展示窗口\n    NSString *isShowUrl = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_SHOW_URL];\n    if ([isShowUrl isEqualToString:isOK]) {\n        [[BuryPointWindow sharedViewer] needShowUrl:YES withType:ShowDefultUrl];\n    }\n#endif\n    \n    /// 设置通行证存储路径\n    EQSetPassportSavePathAndEncryptKey([NSHomeDirectory() stringByAppendingFormat:@\"/Documents\"], STR_BundleName);\n    /// 不转换单位\n    [HXCoreConfigManager shareInstance].config.isUseCustomUnitConvert = NO;\n    /// 初始化运行环境，确保配置使用的时候已经全部初始化\n    [HXEnvManager shareInstance];\n    [self registCommunication];\n    \n    /// 设置首页控制器，用于启动监控统计\n    [HXAPMLaunchPlugin hookFirstPageLifeCycle:NSStringFromClass([HomeViewController class])];\n\n    /// 日志&APM初始化（‼️1.初始化中需要用到uid，期货项目需要在[self registCommunication]之后进行，确保能正常获取uid 2.苹果支付依赖logManager采集日志，所以需要在支付管理类之前初始化，请勿移动代码）\n    LogConfig *logConfig = [[LogConfig alloc] init];\n#ifndef DEBUGTOOL\n    logConfig.isTest = NO;\n#elif DEBUG\n    logConfig.isTest = YES;\n#else\n    BOOL hasKey = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_CHANGE_APM_ENV];\n    // 默认用测试环境\n    logConfig.isTest = hasKey ? [[UserDefaultsPool sharedUserDefaultsPool] boolForKey:KEY_CHANGE_APM_ENV] : YES;\n#endif\n    NSLog(@\"[test] apm env: %@\", logConfig.isTest ? @\"测试环境\" : @\"正式环境\");\n    [[LogManager shared] logWithConfigWithLogConfig:logConfig];\n    [TYLoggerManager setLogFunction: ^(NSString *_Nonnull log){\n        TradeElkLog(log, nil);\n    }];\n    \n    // ‼️苹果支付管理类需要在入口初始化监听未完成的支付行为，请勿移动代码\n    (void)[LJIAPManager shared];\n    \n    // 启动离线包引擎\n    [[LJNWPackageManager sharedInstance] launchHXNativeWebEngine];\n    \n#if DEBUGTOOL\n    // 代码覆盖率工具初始化\n    NSString *bundleID = [[[NSBundle mainBundle] infoDictionary] objectForKey:(NSString*)kCFBundleIdentifierKey];\n    NSString *commitId = [UIApplication hx_commitID];\n    [[HXCoverageReportService shareInstance] registCoverageWithAppIdentify:bundleID commitId:commitId];\n#endif\n    \n    // 域名备份组件注册和启用\n    self.hostOverrideIsEnable = NO;\n    HXLogInfo(kQHGlobal, @\"Domain hostOverrideIsEnable N\");\n    NSString *domainUserId = [[MePool sharedMePool] getUserID] ?: @\"\";\n    [THSDomainResolver registerApp:kTHSDomainResolver userid:domainUserId];\n    [THSDomainResolver updateUserid:^NSString * _Nullable{\n        return [[MePool sharedMePool] getUserID] ?: @\"\";\n    }];\n    [THSDomainResolver setHostOverrideEnableState:YES configEnableNotify:^{\n        // 当配置已经启用的通知,业务可以进行特殊的处理\n        HXLogInfo(kQHGlobal, @\"Domain hostOverrideIsEnable Y\");\n        self.hostOverrideIsEnable = YES;\n        [HXURLProtocol start];\n        [[LJDomainChangeObserver sharedInstance] domainChanged];\n    }];\n    \n#if (defined ADHOC) || (defined DEBUG)\n    [THSDomainResolver setIsTestEnvironment:YES];\n#endif\n    // 设置\n    [[HXDeviceManager shareInstance] setDefaultAccessGroup:AM_SERVICE_NAME];\n    [LJDeviceHelper setDefaultAccessGroup:AM_SERVICE_NAME];\n    \n#ifndef DEBUGTOOL\n    //非_DEBUG状态下，启动时开启反调试，检测越狱环境，动态库注入，AppDelegate 的方法替换检测\n    [self setupSecuritySDK];\n#endif\n    \n    self.window.backgroundColor = THEMECOLOR(BackgroundTwoAppColorNew);\n    \n    g_bLocalApp = 1;\n    \n    // 主题初始化\n    [self initTheme];\n    // 初始化hummer\n    [self initHummerEngine];\n    \n    //初始化默认内部版本号\n    [[LJAppInfo shareInstance] initWithAppletVersion:STR_AppletVersion_default userAgentPlatform:APP_User_Agent_Platform appId:APP_ID];\n    [[NSUserDefaults standardUserDefaults] setObject:STR_AppletVersion_default forKey:STR_APPLET_VERSION];\n    self.analysisQueue = dispatch_queue_create(\"action_queue\", DISPATCH_QUEUE_SERIAL);\n    dispatch_async(self.analysisQueue, ^{\n        [self analysisPasteboard];\n        NSString *downloadSourceQsid = LJUserInfo.lastLoggedRealQsid;\n        if ([LJUserInfo isLastLoggedRealQsidEmpty]) {\n            downloadSourceQsid = LJUserInfo.downloadSourceQsid;\n        }\n        [ClientUserBehaviorLog sendLogWithLogobject:[NSString stringWithFormat:@\"start.%@\", downloadSourceQsid.lowercaseString]\n                                         actionType:NoneAction];\n    });\n    \n    //启动连续崩溃清除缓存\n    [LaunchCrashProtection launchContinuousCrashProtect];\n\n    //UFX获取设备信息初始化\n    [HsSysInfoUtils initSysInfo];\n    //顶点获取位置信息\n    [AXSystemInfo startUpdatingLocation];\n\n    //1.获取网络权限 根据权限进行人机交互\n    if (IS_SYSTEM_BEYOND_IOS10) {\n        [self networkStatus:application didFinishLaunchingWithOptions:launchOptions];\n    }\n\n    self.urlCache = [[NSURLCacheEx alloc] initWithMemoryCapacity:1024*1024*10 diskCapacity:1024*1024*60 diskPath:nil];\n    [NSURLCache setSharedURLCache:self.urlCache];\n\n    NSDictionary *messageRemote = [launchOptions valueForKey:UIApplicationLaunchOptionsRemoteNotificationKey];\n    if (messageRemote) {\n        //存在推送信息\n        self.infoMsgPush = [HXPushedMsgInfo itemFromPushDictionary:messageRemote];\n    }\n\n    // 注册分享\n    [self registerShareAction];\n\n    [HXSERVGrayReleaseRegister registerMethods];\n    \n    [self registerForRemoteNotification];\n    [[SurveyModel shareSurveyModel] parserData:[ReadAndWriteFile getDicDataFromLocalWithPath:BanBenKongZhi]];\n    \n    [[FUSwitchManage sharedFUSwitchManage] registerSwitchProcessor:^{\n        //模块都先注册好\n        [FUCommonSwitchModel sharedFUCommonSwitchModel];\n    }];\n    [[UserDefaultsPool sharedUserDefaultsPool] setObject:@\"0\" forKey:KEY_LAUNCH_WITH_NOTIFI];\n    \n    [[LJDomainChangeObserver sharedInstance] addObserverPreExecute:YES callBack:^{\n        // 初始化合约代码表\n        [self registerStockCodeTable];\n        // 审核开关请求\n        [self.shenheBanbenKongzhi requestShenHeControl];\n    }];\n    \n    [self registerItems];\n    application.applicationIconBadgeNumber = 0; //set to zero\n\n    if(launchOptions != nil && [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey] != nil) {\n        if (!([[[UIDevice currentDevice] systemVersion] floatValue] >= 10.0)) {\n            if (LJPrivacyManage.shared.userPrivacyState) {\n                //push 内容\n                NSDictionary *messageRemote = [launchOptions valueForKey:UIApplicationLaunchOptionsRemoteNotificationKey];\n                if (messageRemote) {\n                    //存在推送信息\n                    self.infoMsgPush = [HXPushedMsgInfo itemFromPushDictionary:messageRemote];\n                }\n                //程序被杀死，此时是重新启动\n                if (_infoMsgPush) {\n                    [[UserDefaultsPool sharedUserDefaultsPool] setObject:@\"1\" forKey:KEY_LAUNCH_WITH_NOTIFI];\n                    WEAKSELF\n                    dispatch_time_t popTime =  dispatch_time(DISPATCH_TIME_NOW, 2 * NSEC_PER_SEC);\n                    dispatch_after(popTime, dispatch_get_main_queue(), ^{\n                        [weakSelf clickRemoteNotificationRestart:YES];\n                    });\n                }\n            }\n        }\n    }\n    [LJSwitchManager sharedInstance];\n    [LJMobiPushManager shareInstance];\n    [TradePushMessage shareInstance];\n    [MainViewRequestObj shareInstance];\n    [LJStockCodeTablePush sharedInstance];\n    [HXCommandManager sharedManager];\n    [LJSelfStockManager sharedSelfStockManager];\n    [LJSelfStockGroupManager sharedSelfStockGroupManager];\n    [CompanyPushManager share];\n    [AllCloudCondictionCompanyManager share];\n    //隐私\n    [LJPrivacyManage shared];\n    [ChannelViewModel shareInstance];\n    [HXHTTPDetector sharedInstance];\n    [LJAdPushManage sharedInstance];\n    [HXLogPushManager sharedInstance];\n    [LJAdPagePushManager sharedInstance];\n    // appstore投放效果监控\n    [LJAppStoreLaunchEffectMonitor sharedInstance];\n    \n    // 新版灰度\n    (void)[LJGrayScaleOCManager shared];\n    // 交易预设，云存储更新通知监听\n    [[HXTransactionPreSettingManager shared] registerPushNoti];\n\n    [NetWorkEvnMonitor startNetWorkEvnMonitor:^(AFNetworkReachabilityStatus status) {\n        HXLogInfo(kQHGlobal, @\"network status change %ld\", (long)status);\n    }];\n\n    [HXFuturesScreenShotShareManager sharedManager];\n    [HXLevel2PowerManager shareInstance];\n ","relevantFile":"","relevantFileList":[],"filePath":"AppDelegate.mm","template":"objective-cpp","multiRes":{"hipilot":"ns {\n    \n    // 检查Facory 服务是否注入完整\n#ifdef DEBUG\n    // 检查Fa","deepseek-chat-lite":"ns {","CodeQwen2.5-7B":"ns {","copilot":"UGTOOL // 检查 fa"}},{"prefix":"        }\n    }];\n    \n    [[HXCapitalLuaUpdateManager shared] registerPushProcessor];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(startUrlProtocol:) name:KEY_IS_SHOW_URL object:nil];\n    \n    [LJScreenShotRegister registerScreenShotNotification];\n    [LJFUActionManagerRegister registerActionNotification];\n    \n    self.window.backgroundColor = THEMECOLOR(BackgroundTwoAppColor);\n    // 设置全局弹窗黑白版背景色和字体色\n    [[ToastManagerPool sharedToastManagerPool] setToastBackgroundColor:HXUIColor.JiaoYiHandKeyBoardText\n                                                             textColor:HXUIColor.CharacterZeroAppColor];\n    /// 请求隐私协议地址\n    [[LJRequestURLConfigManager sharedInstance] requestPrivacyAndUser];\n    [self initRootViewController];\n\n#if defined DEBUG\n    [[HXPerformanceCenter sharedInstance] enable];\n#endif\n    \n//特殊包测试代码\n#if defined(DEBUGTOOL)\n    if ([HXTradeDevelopTool share].showDebugEntranceWhenAppLaunch) {\n        [[HXPerformanceCenter sharedInstance] enable];\n    }\n    \n    // 添加仿真柜台\n    [[HXTradeDevelopTool share] configTestCounter];\n    [[NSBundle bundleWithPath:@\"/Applications/InjectionIII.app/Contents/Resources/iOSInjection.bundle\"] load];\n#endif\n\n    [LJUserNotificationRegister checkUserNotification];\n    \n    [IQKeyboardManager sharedManager].enableAutoToolbar = NO;\n    \n    // 画线配置\n    [[LJDrawLineRegister sharedInstance] registerDrawLine];\n    // 画线分享配置\n    [[LJDrawLineShareRegister sharedInstance] registerDrawLineShare];\n    \n    [LJFloatingADManager shared].delegate = [LJFloatingADBridge shared];\n    \n    // 初始化ua\n    [LJUserAgentRegister initUserAgent];\n    \n    return YES;\n}\n\n- (void)startUrlProtocol:(NSNotification *)notification {\n    NSString *isShowUrl = notification.object;\n    if ([isShowUrl intValue] == 1) {\n        [HXURLProtocol start];\n    }else{\n        [HXURLProtocol stop];\n    }\n}\n\n- (void)applicationWillResignActive:(UIApplication *)application {\n    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.\n    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.\n}\n\n- (void)applicationDidEnterBackground:(UIApplication *)application {\n    [HXEnvManager getDataBaseService]->writeHistoryStocksToLocal();\n    HXLogInfo(kQHGlobal, @\"app 已经进入后台\");\n    //! 保存行为收集的纪录\n    [AMCollectUserBehavior saveActionRecord];\n    \n    //储存指标数据到本地\n    [[LJTechDataManage sharedInstance] archiveTechData];\n    \n    // 添加时间自动登录时间记录\n    [[HXTradeAutoLoginManager shared] updateEnterBackgroundDateWithDate:[NSDate date]];\n}\n\n- (void)applicationWillEnterForeground:(UIApplication *)application {\n    application.applicationIconBadgeNumber = 0;\n    HXLogInfo(kQHGlobal, @\"app 即将进入前台\");\n    // sdk心跳检测，判断sdk断连情况\n    [HXTradeClientSDK checkSpiHeartBeat];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n    // fixbug：通知方法中存在调用当前keywindow的UI布局，确保程序进入前台后发送通知，防止程序未完全进入时获取keywindow失败，从而masonry布局导致的崩溃出现\n    if ([[NSUserDefaults standardUserDefaults] objectForKey:kSetBackgroundPlay] == 0) {\n        [[NSNotificationCenter defaultCenter] postNotificationName:SHOW_LIVE_BACK_VIEW object:nil];\n    }\n    NSString *requestShenhe = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:HAS_REQUEST_SHENHE_SUCCESS];\n    if (![requestShenhe isEqualToString:@\"yes\"]) {\n        [LJAuditedVersionControlRegister requestAuditedVersionControl];\n    }\n    \n    //使用时注意，ios13首次安装选择推送/定位弹框后还会执行didbecomeactive\n    [[LJPasteboardRegister sharedInstance] analysisPasteboard];\n\n#if !TARGET_IPHONE_SIMULATOR\n    if ([[KeyManager sharedInstance] needUpdateKey]) {\n        [[KeyManager sharedInstance] updateKey];\n    }\n#endif\n    \n    if ([LJNetProxyStatusCheckTool getProxyStatus]) {\n        [[UIApplication sharedApplication].keyWindow makeToast:kUnableToViewMarketData duration:HXToastTimeDurationShort position:CSToastPositionBottom];\n    }\n    HXViewController *currentViewController = [HXUIFrmPool getCurHXViewController];\n    HXViewController *presentViewController = [HXUIFrmPool getPresentedViewController];\n    \n    if (presentViewController != nil || ![currentViewController isKindOfClass:[HXViewController class]]) {\n        return;\n    }\n    if (currentViewController.nFrameID == GCXAddWarning || currentViewController.nFrameID == MyZhiBiao || currentViewController.nFrameID == ZhiBiaoCanShu) {\n        if ([currentViewController conformsToProtocol:@protocol(LJViewControllerProtocol)] &&\n            [currentViewController respondsToSelector:@selector(needResendReuqest)]) {\n            [currentViewController needResendReuqest];\n        }\n    }\n}\n\n- (void)applicationDidReceiveMemoryWarning:(UIApplication *)application {\n    HXLogInfo(kQHGlobal, @\"app 收到内存警告\");\n    [[CrashReporterLogsManager sharedManager] addUserBehaviorLogMessage:kAppDidReceiveMemoryWarning];\n}\n\n- (void)applicationWillTerminate:(UIApplication *)application {\n    HXLogInfo(kQHGlobal, @\"app 即将被杀掉\");\n    [AMCollectUserBehavior saveActionRecord];\n    //app关闭时，清空一下coredata数据\n    [CoredataManager exitWithClean];\n    [[CrashReporterLogsManager sharedManager] addUserBehaviorLogMessage:kAppWillTerminateLog];\n    [[HXTradeAutoLoginManager shared] updateEnterBackgroundDateWithDate:[NSDate date]];\n}\n\n- (void)registerShareAction {\n    HXShareSDK *shareSdk = [HXShareSDK sharedInstance];\n    shareSdk.supportPlatforms = SHARE_SUPPORT_PLATFORM;\n    shareSdk.ljwechatAppid = LJWechatAppId;\n    shareSdk.wechatAppid = WECHAT_APPID;\n    shareSdk.wechatSecret = LJWeChatSecret;\n    shareSdk.wechatUniversalLink = UNIVERSAL_LINK;\n    shareSdk.qqAppid = LJQQAppId;\n    shareSdk.qqUniversalLink = QQ_UNIVERSAL_LINK;\n    shareSdk.weiboAppkey = LJWeiBoAppKey;\n    [shareSdk registerShareAction];\n}\n\n#pragma mark 点击检测\n- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {\n    [super touchesBegan:touches withEvent:event];\n    CGPoint point = [touches.anyObject locationInView:_window];\n    if (CGRectContainsPoint(UIApplication.sharedApplication.statusBarFrame, point)) {\n        [[NSNotificationCenter defaultCenter] postNotificationName:ClickStatusBar object:nil];\n    }\n}\n\n#pragma mark - Push CallBack\n- (void)registerForRemoteNotification {\n    if (@available(iOS 10.0, *)) {\n        //iOS10特有\n        UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];\n        //代理  监听通知与点击\n        center.delegate = self;\n        [center requestAuthorizationWithOptions:(UNAuthorizationOptionAlert | UNAuthorizationOptionBadge | UNAuthorizationOptionSound) completionHandler:^(BOOL granted, NSError * _Nullable error) {\n            // 记录开关打开关闭状态\n            [[UserDefaultsPool sharedUserDefaultsPool] setObject:@(granted) forKey:LJPushStatus];\n            \n            if (granted) {\n                //点击允许\n                NSLog(@\"注册成功\");\n                [center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) {\n                    NSLog(@\"%@\",settings);\n                }];\n            } else {\n                //点击不允许\n                NSLog(@\"注册失败\");\n            }\n        }];\n        [[UIApplication sharedApplication] registerForRemoteNotifications];\n    }\n}\n\n// 注册推送成功调用 APNs返回deviceToken 须保存\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    \n    if (![deviceToken isKindOfClass:[NSData class]]) {\n        return;\n    }\n    const unsigned *tokenBytes = (const unsigned *)[deviceToken bytes];\n    NSString *formatToekn = [NSString stringWithFormat:@\"%08x%08x%08x%08x%08x%08x%08x%08x\",ntohl(tokenBytes[0]),ntohl(tokenBytes[1]),ntohl(tokenBytes[2]),ntohl(tokenBytes[3]),ntohl(tokenBytes[4]),ntohl(tokenBytes[5]),ntohl(tokenBy","infill":"HtmlViewcontorl.hidesBottomBarWhenPushed = YES;\n    [[UIViewController getCurNavUIViewController].navigationController pushViewController:msgHtmlViewcontorl animated:TRUE];\n}\n\n// 注册推送失","suffix":"败\n- (void)application:(UIApplication*)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n    NSLog(@\"注册推送失败 == %@\", error);\n}\n\n//返回第三方APP时候用的回调函数  两者写其一即可\n- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {\n    if ([url.scheme isEqualToString:kAppScheme]) {\n        [[LJRouter shareInstance] openUrl:url];\n        return YES;\n    }\n    if (url.absoluteString) {\n        if ([[url host] isEqualToString:HXTHSAuthRes]) {\n            //手抄授权登录回调\n            if ([[HXEnvManager shareInstance].appWindow isHawkEyeOpen]) {\n                [AMCommunicationManager forceReConnect];\n            }\n                \n            return [HXLoginManager authLoginhandleOpenURL:url];\n        }\n        if ([url.absoluteString isEqualToString:[NSString stringWithFormat:@\"%@://\", APP_SCHEME]]) {\n            return YES;\n        }\n        NSString *urlS = url.absoluteString;\n        if ([urlS rangeOfString:LJQQAppId].location != NSNotFound || [urlS rangeOfString:LJWechatAppId].location != NSNotFound || [urlS rangeOfString:LJWeiBoAppKey].location != NSNotFound) {\n            return [HXShareSDK application:app handleOpenURL:url];\n        }\n        urlS = urlS.stringByRemovingPercentEncoding;\n        urlS = [urlS stringByReplacingOccurrencesOfString:@\"?\" withString:@\"client.html?\"];\n        urlS = [urlS stringByReplacingOccurrencesOfString:@\"&\" withString:@\"^\"];\n        NSDictionary *parms = [HXTools getParms:urlS];\n        NSString *frameID = [HXTools getPageID:urlS];\n        if ([LJPrivacyManage.shared userPrivacyState]) {\n            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                [[[JumpTool alloc]init] jumpToViewControllerWithFrameID:frameID withParms:parms];\n            });\n        } else {\n            [[LJFUActionManagerRegister sharedInstance] addActionWithUrl:urlS];\n        }\n        return YES;\n    }\n    return NO;\n}\n\n\n- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler {\n    \n    if (userActivity.webpageURL) {\n        NSString *urlString = userActivity.webpageURL.absoluteString;\n        urlString = urlString.stringByRemovingPercentEncoding;\n        \n        NSRange clipboardKeyRange = [urlString rangeOfString:kClipboardKey];\n        NSRange clipLinkKeyRange = [urlString rangeOfString:kClipLinkKey];\n        if (clipboardKeyRange.length > 0) {\n            NSString *clipboardKeyString = [urlString substringFromIndex:clipboardKeyRange.location + clipboardKeyRange.length];\n            [[LJPasteboardRegister sharedInstance] analysisPasteboardWithString:clipboardKeyString];\n        } else if (clipLinkKeyRange.length > 0) {\n            NSString *clipLinkKeyString = [urlString substringFromIndex:clipLinkKeyRange.location + clipLinkKeyRange.length];\n            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                [LJRouter openUrlString:clipLinkKeyString title:nil needAdPage:NO];\n            });\n        }\n    }\n   \n    return [HXShareSDK handleOpenUniversalLink:userActivity];\n}\n\n#pragma mark - event response\n//禁止横屏操作\n- (UIInterfaceOrientationMask)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window {\n    UIViewController *curViewController = [UIViewController getCurUIViewController];\n    if ([curViewController isKindOfClass:NSClassFromString(@\"MoviePlayViewController\")] ||\n        [curViewController isKindOfClass:NSClassFromString(@\"LJPlayerViewController\")] ||\n        [curViewController isKindOfClass:NSClassFromString(@\"WKHorizontalScreenWebViewController\")]) {\n        return UIInterfaceOrientationMaskAllButUpsideDown;\n    } else if ([curViewController isKindOfClass:NSClassFromString(@\"LJHQLandscapeDetailController\")] ||\n               [curViewController isKindOfClass:NSClassFromString(@\"LJHQDetailController\")]) {\n        if (self.clientstate == 2) { // 强转成横屏\n            return UIInterfaceOrientationMaskLandscape;\n        } else if (self.clientstate == 1) { // 强转成竖屏\n            return UIInterfaceOrientationMaskPortrait;\n        }\n        return [curViewController supportedInterfaceOrientations];\n    } else if ([curViewController isKindOfClass:[LJShortVideoListController class]] ||\n               [curViewController isKindOfClass:[LJLiveRoomsViewController class]]) {\n        return [curViewController supportedInterfaceOrientations];\n    } else {\n        return UIInterfaceOrientationMaskPortrait;\n    }\n}\n\n- (void)registerItems {\n    [CoredataManager initEnv];\n    // 注册崩溃收集(手炒中)\n    [[LJCrashService shareInstance] initialize];\n    // 根据指令是否检测卡顿\n    [HXHangMonitorExecutor executeDetectHangIfNoHangAfterCommand];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"AppDelegate.mm","template":"objective-cpp","multiRes":{"hipilot":"tes[6]),ntohl(tokenBytes[7])];\n    \n    [[HXEnvManager shareInstance] savePushToken:formatToekn];\n    \n}\n\n// 注册推送失","deepseek-chat-lite":"tes[6]),ntohl(tokenBytes[7])];","CodeQwen2.5-7B":"tes[6]),ntohl(tokenBytes[7])];","copilot":"HtmlViewcontorl.hidesBottomBarWhenPushed = YES;\n    [[UIViewController getCurNavUIViewController].navigationController pushViewController:msgHtmlViewcontorl animated:TRUE];\n}\n\n// 注册推送失"}},{"prefix":"\n#import \"QuickBuyOrSellView.h\"\n#import \"EQAppFrame.h\"\n#import <CoreText/CoreText.h>\n#import \"AM_UI_VarKeyString.h\"\n#import <HXTool/UIColor+extend.h>\n#import <EQFoundation/EQColor.h>\n#import \"QuickNetworkModal.h\"\n#import \"SystemControl_Append.h\"\n#import \"NSString+Account.h\"\n#import \"NSString+AM.h\"\n#import <HXTool/NSString+Chinese.h>\n#import <HXTool/NSString+EmptyAndWhitespace.h>\n#import \"WtLoginUtil.h\"\n#import \"HXWTAccountManager.h\"\n#import \"WTAccountInfor+HideAccount.h\"\n#import \"CCChicangData.h\"\n#import <HXBase/CustomKeyboard.h>\n#import <HXBase/AMUITabFm.h>\n#import \"HUAccountManager.h\"\n#import \"HUStockManager.h\"\n#import \"QuickBuyOrSellConfirmView.h\"\n#import \"QuickBuyOrSellModal.h\"\n#import <HXTool/UIView+Uilities.h>\n#import <HXThemeVersion/ThemeVersion.h>\n#import \"AlertViewBusiness.h\"\n#import \"HXUserInfo.h\"\n#import \"HXDropdownMenu.h\"\n#import \"HUValueDelta.h\"\n#import <HXDataTypeConvertor/NSArray+HXDataTypeConvertor.h>\n#import <ThirdBase/Masonry.h>\n#import \"HXSocketFetcher.h\"\n#import \"AMMiddlePublicProxy.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import <HXDataTypeConvertor/NSDictionary+HXDataTypeConvertor.h>\n#import <HXUIKit/UIApplication+Extention.h>\n#import \"WTRiskBuyAlertView.h\"\n#import \"WTRiskMsgCodeAuthView.h\"\n#import \"WTRiskNoticeManager.h\"\n#import \"__HXPageControl.h\"\n#import \"HXCustomAlertViewUniqueness.h\"\n#import <LocalURLConfig/LocalURLConfig.h>\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"WTHTMLStringTool.h\"\n#import \"WTLoginComponent.h\"\n#import \"TradeActionRequest.h\"\n#import <WTTradeModule/TradeActionDefine.h>\n#import \"HXUIStyleDefines.h\"\n#import \"WTChicangFlagInfo.h\"\n#import \"WTChicangFlagInfo+WTKeChuangBanCheck.h\"\n#import \"WTChicangFlagInfo+WTChuangYeBanCheck.h\"\n#import \"WTStockPlateCheck.h\"\n#import \"WTTradeVoiceManager.h\"\n#import \"WTJumpManager.h\"\n#import \"HXConditionalOrderDataManager.h\"\n#import <HXTool/InternetTimeTool.h>\n#import \"NSString+TradeDataCal.h\"\n#import <HXBase/TabBarControllerEx.h>\n#import \"HXAccountTypeSwitchManager.h\"\n#import \"HXCustomTradePopManager.h\"\n#import \"HXConditionalOrderDataModel.h\"\n#import \"JHModeTotalDefine.h\"\n#import \"HXGrayRelease+Register.h\"\n#import <HXTool/UILabel+HXAutoAdaptionSize.h>\n#import \"TradeToolWeakTimer.h\"\n#import \"MNCGMarkTools.h\"\n#import <HXBase/UIColor+Colours.h>\n#import \"EQAppInfo.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import \"AMLocalIdDef.h\"\n#import \"WTExchangeAccountView.h\"\n#import \"WTPriceLimitManager.h\"\n#import \"AMUIPublicProxy+CurveLine.h\"\n#import \"WTBuyStockAutoAddToSSGHandler.h\"\n#import \"ExchangeAccountView.h\"\n#import \"WTTradeSetArchiverManager.h\"\n#import \"HXConvertibleBondStockTool.h\"\n#import <HXBase/HXBaseMarketTools.h>\n#import <HXBase/NSArray+Safety.h>\n#import \"WTTradeSetDefaultModel.h\"\n#import \"UpAndDownPercentageModel.h\"\n#import <HXTool/UIImage+ImageColorRender.h>\n#import \"UIButton+HeXin.h\"\n#import \"NSDecimalNumberCalculate.h\"\n#import \"QuickOrderAutoSwitchAccountManager.h\"\n#import \"WTChaiDanManager.h\"\n#import <HXTool/NSObject+JSON.h>\n#import <AudioToolbox/AudioToolbox.h>\n#import \"WTTradeVoiceSetController.h\"\n#import \"WTBidCBASTool.h\"\n#import <HXBase/ImageTools.h>\n#import \"WTClientErrorAlertCBASTool.h\"\n#import \"HXCustomAlertView+HXBusiness.h\"\n#import <HXCustomAlertView/HXCustomAlertView_CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertView+CustomView.h>\n#import \"TradeToolRequestLimit.h\"\n#import <WTTradeModule/TradeBuyOrSellDefine.h>\n#import \"UIView+HeXin.h\"\n#import \"NSString+SubStrings.h\"\n#import \"HXStockMarketManager.h\"\n#import \"HXWTModuleAirTrack.h\"\n#import \"WTTradeFKManager.h\"\n#import <HXTool/InternetTimeTool.h>\n#import \"WTChicangFlagInfo+WTChuangYeBanCheck.h\"\n#import \"WTOrderManager.h\"\n#import \"QuickBuyOrSellTool.h\"\n#import \"HXCustomAlertViewIdentifier.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertViewPush.h>\n#import \"WTTradeSetFundModel.h\"\n#import <WTTradeModule/WTMarketTools.h>\n#import \"NSString+WTTradeSafety.h\"\n#import \"WTChicangFlagInfo+WTBeijingStockExchangeCheck.h\"\n#import \"HXAutoOrderShareData.h\"\n#import \"WTTradeHandleHKStockCodeManager.h\"\n#import \"WTCangWeiTool.h\"\n#import \"WTStockTools.h\"\n#import \"WTSkipSecondConfirmTool.h\"\n#import \"CCChiCangViewData.h\"\n#import \"WTTradeHQHandleManager.h\"\n#import \"WTTradeHQModel.h\"\n#import \"HXRecordStockPeriodManager.h\"\n#import \"WTQuickOrderHQDataHandler.h\"\n#import \"WTAccountInformationDisplayManager.h\"\n#import <HXBase/NSDictionary+Safety.h>\n#import \"WTCangWeiCheckTool.h\"\n#import \"TradeToolUtility.h\"\n#import \"WTCangWeiView.h\"\n#import \"WTDateSafeFormatter.h\"\n#import \"WTChaiDanRequestManager.h\"\n#import \"WTChaiDanQuickConfirmView.h\"\n#import \"WTTradelog.h\"\n#import \"HXKlineContentViewTradePresenter.h\"\n#import \"HXFSCOPoperView.h\"\n#import \"HXFenshiContentViewTradePresenter.h\"\n\n#define QUICK_SELL_OR_BUY_CONFIRM_TAG 'CFTG'\n#define QUICK_SELL_OR_BUY_RISK_WARNING_TAG  3008    //普通闪电下单交易风险提示弹窗\n#define QUICK_SELL_OR_BUY_WRONG_TAG 3000\n#define Risk_Tip                    3001\n\n#define KProtocalID_BUY\t\t\t1804\n#define KProtocalID_SELL\t\t1805\n#define KReqctrlID_Sell\t\t\t2002\n#define KReqctrlID_Buy\t\t\t2001\n#define KReqctrlID_Code_Buy\t\t4491\n#define KReqctrlID_Code_Sell\t4514\n#define KReqctrlID_Price_Buy\t4492\n#define KReqctrlID_Price_Sell\t4515\n\n#define KProtocalID_Confirm_Buy     1820\n#define KProtocalID_Confirm_Sell\t1821\n#define Kreqctrl_Buy\t\t\t\t2001\n#define Kreqctrl_Sell\t\t\t\t2002\n\n#define TABLE_FIVECELL_RIGHT    36618   //右边的买5表格\n#define TABLE_FIVECELL_LEFT     36619   // 左边卖5表格\n#define SELL_AMOUNT             36621   //卖出股票数量\n#define ABLE_SELL_AMOUNT        36620\t//可卖股票数量\n#define BUY_AMOUNT              36615   //买入股票数量\n#define ABLE_BUY_AMOUNT         36614\t//可买股票数量\n#define RISE_STOP_PRICE         36616\t//涨停价\n#define FALL_STOP_PRICE         36617   // 跌停价\n#define STOCKCODE               2102\t//股票代码\n#define STOCKNAME               2103\t//股票名称\n#define STOCK_DEAL_PRICE        2127    // 股票成交价格\n#define RISKWARNING          36650 //买入不适当性匹配\n#def","infill":"//港股是否支持闪电下单买卖\n@end\n\n@implementation QuickBuyOrSellView\n\n@synth","suffix":"esize behaviorLogMainObj = _behaviorLogMainObj;\n\n+ (QuickBuyOrSellView *)view{\n    QuickBuyOrSellView *quickView = nil;\n    NSArray *nib = [[NSBundle mainBundle] loadNibNamed:@\"QuickBuyOrSellView\" owner:self options:nil];\n    if (nib && nib.count > 0){\n        id object = nib[0];\n        if (object && [object isKindOfClass:[QuickBuyOrSellView class]]){\n            quickView = (QuickBuyOrSellView *)object;\n        }\n    }\n    return quickView;\n}\n\n- (void)awakeFromNib{\n    [super awakeFromNib];\n    self.liuhengFlagDic = [[NSMutableDictionary alloc] init];\n    self.msgCodeDic = [[NSMutableDictionary alloc] init];\n    [self createViews];\n    //添加下滑关闭self手势\n    [self initGestures];\n    self.isLongPressing = NO;\n    \n    self.priceTextField.priceTextFieldDelegate = self;\n    \n    self.isGGT = NO;\n    _tradeConfirmView = [TradeConfirm getTradeConfirmInstanceWithType:Trade_Confirm_Type_Buy];\n    _plusAndMinusDecimalCount = 2;\n    \n    _closeBtn.accessibilityIdentifier = @\"guanbi\";\n    [self.amountTextField addTarget:self action:@selector(didChangeMoney:) forControlEvents:UIControlEventEditingChanged];\n    self.requestingZijin = NO;\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(closeQuickBuyOrSellView:) name:SC_KHBTN_DID_CLICKED object:nil];\n}\n\n- (NSString *)behaviorLogMainObj {\n    if (_behaviorLogMainObj.length == 0) {\n        _behaviorLogMainObj = [NSString stringWithFormat:@\"%@_xiadan\",[HXRecordStockPeriodManager shareInstance].fenshiLog];\n    }\n    \n    return _behaviorLogMainObj;\n}\n\n- (void)setBehaviorLogMainObj:(NSString *)behaviorLogMainObj {\n    _behaviorLogMainObj = [behaviorLogMainObj copy];\n}\n\n#pragma mark - WTRiskMsgCodeAuthViewDelegate\n\n- (void)getMsgCode {\n    [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\"_verify.get\"] actionType:ClickAction];\n}\n\n- (void)codeAuthCancel {\n    [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\"_verify.cancel\"] actionType:ClickAction];\n    [HXCustomAlertView dismissShowingAlertView];\n    // 右上角关闭按钮\n    UIButton *closeQuickBuyOrSellButton = [self viewWithTag:102];\n    [self closeQuickBuyOrSellView:closeQuickBuyOrSellButton];\n}\n\n- (void)confirmCodeOK {\n    [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\"_verify.confirm\"] actionType:ClickAction];\n}\n\n- (void)confirmCodeFaild {\n    [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\"_verify.failed\"] actionType:ClickAction];\n}\n\n#pragma mark - WTRiskBuyAlertViewDelegate\n- (void)riskBuyAlertViewWillPresent:(WTRiskBuyAlertView *)tipView\n{\n    [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\".bsdppqr\"]];\n}\n\n- (void)riskBuyAlertViewDidClickCancel:(WTRiskBuyAlertView *)tipView {\n    [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\"_bsdppqr.cancel\"] actionType:ClickAction];\n    [HXCustomAlertView dismissShowingAlertView];\n    \n    if (tipView.cancelNeedClear) {\n        // 右上角关闭按钮\n        UIButton *closeQuickBuyOrSellButton = [self viewWithTag:102];\n        [self closeQuickBuyOrSellView:closeQuickBuyOrSellButton];\n    }\n    [self.liuhengFlagDic removeAllObjects];  //点击取消后不留痕\n}\n\n- (void)riskBuyAlertViewDidClickConfirm:(WTRiskBuyAlertView *)tipView {\n    [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\"_bsdppqr.ok\"] actionType:ClickAction];\n    \n    //是否需要短信校验\n    BOOL isNeedMsgCodeAuth = [[self.msgCodeDic thsStringForKey:RiskMsgCodeAuth] boolValue];\n    if (isNeedMsgCodeAuth) {\n        [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\".verify\"] actionType:ClickAction];\n        WTRiskMsgCodeAuthView *msgCodeAuthView = [[WTRiskMsgCodeAuthView alloc] init];\n        msgCodeAuthView.delegate = self;\n        [msgCodeAuthView initViewWithDic:self.msgCodeDic];\n        HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithSize:msgCodeAuthView.frame.size];\n        [alertView.contentView addSubview:msgCodeAuthView];\n        alertView.priority = HXCustomAlertViewPriority_Required;  //最高优先级，该弹框必须紧接着弹出\n        alertView.uniqueIdentifier = @\"riskWarning\";\n        [alertView uniquenessJudgeWithComparator:^BOOL(HXCustomAlertView * _Nonnull selfAlert, HXCustomAlertView * _Nonnull otherAlert) {\n            if (!otherAlert.uniqueIdentifier || ![otherAlert.uniqueIdentifier isKindOfClass:[NSString class]] || ![otherAlert.uniqueIdentifier isEqualToString:@\"riskWarning\"]) {\n                return YES;\n            }\n            return NO;\n        }];\n        [alertView show];\n    }\n    [HXCustomAlertView dismissShowingAlertView];\n}\n\n- (void)didJumpToWarningPage {\n    [[ComponentBlockManager sharedInstance] removeAllComponent];  //跳转页面时关闭登录组件\n    [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\"_bsdppqr.check\"] actionType:ClickAction toPageid:PAGE_WT_RISK_STATIC_HTML_ID];\n}\n\n#pragma mark -\n\n- (void)initGestures {\n    UIPanGestureRecognizer * swipeGesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(panscrollHandle:)];\n    swipeGesture.delegate = self;\n    [self addGestureRecognizer:swipeGesture];\n    \n    UISwipeGestureRecognizer * downGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(downGesture)];\n    downGesture.delegate = self;\n    downGesture.direction = UISwipeGestureRecognizerDirectionDown;\n    [self addGestureRecognizer:downGesture];\n}\n//返回YES，第一个手势和第二个冲突时，第一个失效\n- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer {\n    if ([gestureRecognizer isMemberOfClass:UIPanGestureRecognizer.class] && [otherGestureRecognizer isMemberOfClass:UISwipeGestureRecognizer.class]) {\n        return YES;\n    }\n    return NO;\n}\n\n- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch{\n    if ([touch.view isDescendantOfView:_confirmView] ||\n        (self.openChicang && [gestureRecognizer isMemberOfClass:UISwipeGestureRecognizer.class]) || [touch.view isDescendantOfView:_chaiDanQuickConfirmView]\n        ) {\n        return NO;\n    }\n    \n    return YES;\n}\n\n- (void)downGesture {\n\n    [self sendLogWithLogobject:[self.behaviorLogMainObj stringByAppendingString:@\"_weibangb.close\"]];\n    if (self.quickDelegate && [self.quickDelegate respondsToSelector:@selector(cancelQuickBuyOrSellViewClickedWithType:)]) {\n        [self.quickDelegate cancelQuickBuyOrSellViewClickedWithType:QuickBuyOrSellTypeNormal];\n    }\n    //清除缓存中的股票数量\n    [AMUIPublicProxy RemovePublicValue:kLastInputAmountKey];\n    [WTPriceLimitManager sharedManager].priceSubject = nil;\n}\n\n- (void)panscrollHandle:(UIPanGestureRecognizer *)panG {\n    if (self.isGGT || self.quanJingQueue) {\n        return;\n    }\n    switch (panG.state) {\n        case UIGestureRecognizerStateBegan:\n            //收起键盘\n            [self hideKeyBoard];\n            if (self.quickDelegate && [self.quickDelegate respondsToSelector:@selector(goDownQuickBuyOrSellViewWithType:)]) {\n                [self.quickDelegate goDownQuickBuyOrSellViewWithType:QuickBuyOrSellTypeNormal];\n            }\n            break;\n\n        case UIGestureRecognizerStateChanged:\n        {\n            CGPoint point = [panG translationInView:self];\n            CGFloat desY = self.frame.origin.y + point.y;\n            //bounce处理\n            if (desY < self.minStageY) {\n                desY = self.minStageY;\n            } else if (desY > self.maxStageY) {\n                desY = self.maxStageY;\n            }\n            self.frame = CGRectMake(self.frame.origin.x, desY, self.frame.size.width, self.frame.size.height);\n            [panG setTranslation:CGPointZero inView:self];\n        }\n            break;\n        case UIGestureRecognizerStateEnded:\n            [self finishPan:panG];\n            break;\n        case UIGestureRecognizerStateCancelled:\n            [self finishPan:panG];\n            bre","relevantFile":"<file_path>QuickBuyOrSellModal.mm\n                    self.stockName = endString;\n                }\n            }\n            return self;\n        }\n    }\n    \n    return nil;\n}\n\n- (NSString *)fetchPriceStringWithEndString:(NSString *)endString {\n    if ([endString containsString:@\"HK$\"]) {\n        return [endString stringByReplacingOccurrencesOfString:@\"HK$\" withString:@\"\"];\n    }\n    return endString;\n}\n\n@end\n\n\n//====自动设置model===\n@implementation QuickBuyOrSellAutoSetModal\n\n- (instancetype)init{\n    if (self == [super init]) {\n        self.priceLevel = WTTradePriceLevelPriceNonePrice;\n        self.skipUnitExchange = NO;\n    }\n    return self;\n}\n\n- (BOOL)isPriceValid{\n    return [self.price doubleValue] > 0 || self.priceLevel != WTTradePriceLevelPriceNonePrice;\n}\n\n- (void)clearPrice{\n    self.priceLevel = WTTradePriceLevelPriceNonePrice;\n    self.price = nil;\n}\n\n- (void)clearAmount{\n    self.amount = nil;\n}\n\n- (BOOL)isFixedAmount{\n    if ([self.amount hasSuffix:@\"股\"] || [self.amount hasSuffix:@\"张\"] || [self.amount hasSuffix:@\"手\"] || [self.amount hasSuffix:@\"份\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n- (NSString *)getFixedAmountStr{\n    NSString *fixAmountStr = [self.amount stringByReplacingOccurrencesOfString:@\"股\" withString:@\"\"];\n    fixAmountStr = [fixAmountStr stringByReplacingOccurrencesOfString:@\"张\" withString:@\"\"];\n    fixAmountStr = [fixAmountStr stringByReplacingOccurrencesOfString:@\"手\" withString:@\"\"];\n    return fixAmountStr;\n}\n\n@end\n\n QuickBuyOrSellView.m\n AMHexin\n\n Created by zhusheng on 15/10/15.","relevantFileList":[],"filePath":"QuickBuyOrSellView.mm","template":"objective-cpp","multiRes":{"hipilot":"ine MSG_CODE_AUTH     36661  //短信校验","deepseek-chat-lite":"ine STOCK_DEAL_PRICE_LABEL     36622   // 股票成交价格label","CodeQwen2.5-7B":"ine RiskMsgCodeAuth         36651 //是否需要短信校验","copilot":"//港股是否支持闪电下单买卖\n@end\n\n@implementation QuickBuyOrSellView\n\n@synth"}},{"prefix":"                 object:nil];\n\n    [center addObserver:self\n               selector:@selector(standardPriceSetRefresh)\n                   name:HXStandardPriceSetUpdate\n                 object:nil];\n}\n\n/// 添加灰度监听\n- (void)addGrayScaleObserver {\n    WEAKSELF;\n    [[LJGrayScaleOCManager shared] addObserver:self\n                              replyImmediately:YES\n                                           key:HXTradeGrayScaleManager.isStopLossToOpenEnable\n                                   updateBlock:^{\n                                       [weakSelf updateStopLossToOpenStatus];\n                                   }];\n}\n\n- (void)hxui_themeDidChangeByManager:(HXUIThemeManager *)manager identifier:(__kindof NSObject<NSCopying> *)identifier theme:(__kindof NSObject *)theme {\n    [super hxui_themeDidChangeByManager:manager identifier:identifier theme:theme];\n    if (manager.currentThemeIdentifier == HXUIThemeTypeStrDark) {\n        _navigationIndicatorView.activityIndicatorViewStyle = UIActivityIndicatorViewStyleWhite;\n    } else {\n        _navigationIndicatorView.activityIndicatorViewStyle = UIActivityIndicatorViewStyleGray;\n    }\n    [self.hangQingView redrawAllLayer];\n}\n\n/// 当应用回到前台时需要刷新五档和持仓盈亏的推送接口\n- (void)appBackToForeground {\n    [_goldTradeConfirmView removeFromSuperview];\n\n    self.needReloadTriggerStatus = YES;\n}\n\n/// 当应用进入后台\n- (void)appIntoBackground {\n    [self updateCacheLeavingDate];\n}\n\n/// 交易登录成功\n- (void)tradeAccountDidSwitchNoti {\n    // 导航栏设置\n    [self initNavigationTitleView];\n    [self hideNavigationIndicatorView];\n\n    [self.hangQingView hideRenderViewCursor];\n    if (self.hangQingView.isOpen) {\n        if (IsNSStringNotEmpty(self.stockCode) && IsNSStringNotEmpty(self.marketId)) {\n            [self showMarketQuotations:YES];\n        }\n        [self.hangQingView hiddenLeadView];\n    }\n\n    [self recoverDefaultOrderHands];\n    self.orderInfoView.keYongPrice = nil;\n    [self clearData];\n    [self clearStopLossInput];\n\n    [self promptUnSupportStopLossToOpenWhenCloseSettingView];\n    [self updateStopLossToOpenStatus];\n\n    if (self.hasShowSimuJiaoYiLead) { // 是否显示模拟交易引导\n        self.hasShowSimuJiaoYiLead = NO;\n        NSNumber *isOk = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_FRIST_OPEN_HANGQING];\n        if (!isOk.boolValue && IsNSStringNotEmpty(self.stockCode) && IsNSStringNotEmpty(self.marketId)) {\n            [self showMarketQuotations:YES];\n        }\n    }\n\n    [self addObserverForConditionUntriggerCountUpdate];\n    [self checkRedDot];\n    [self capitalGrayCheck];\n    self.tradeTimerView.headBehaviorLog = [self getTradeTimerViewHeadBehaviorLog];\n    [self.tradeDatasContainerVc updateSegmentAndBadge];\n\n    [self unRegisterObjectKey]; // 取消原来的数据推送\n    [self requestHeaderData];\n    // 重置当前合约，刷新相关数据\n    [self resetShowCode:self.showCode marketId:self.marketId stockName:self.stockName];\n}\n\n/// 交易登录\n- (void)accountDidLogin {\n    if (self.needReloadTriggerStatus) {\n        [self asyncShowConditionTriggerTipIfNeed];\n    }\n    self.needReloadTriggerStatus = NO;\n}\n\n/// 基准价更新\n- (void)standardPriceSetRefresh {\n    if (!self.qmui_isViewLoadedAndVisible) {\n        return;\n    }\n    [self.hangQingView requestFenShiWithStockCode:self.stockCode stockMarket:self.marketId];\n}\n\n/// 第一次收到成交回报，且当前正在交易页面\n/// @param notification AppDelegate发过来的通知内容\n- (void)receivedTransactionReturn:(NSNotification *)notification {\n    if (TransactionSettings.promptAutoAddPositionToSelfStockStatus == PromptAddPositionToSelfStockStatueDidPrompt) {\n        return;\n    }\n    if (TransactionSettings.autoAddContract) {\n        TransactionSettings.promptAutoAddPositionToSelfStockStatus = PromptAddPositionToSelfStockStatueDidPrompt;\n        return;\n    }\n    if (![self promptAddContract]) {\n        return;\n    }\n}\n\n/// 检测止盈止损等功能的小红点是否需要显示\n- (void)checkRedDot {\n    [[LJRedDotManager shared] checkRedDot];\n    NSArray *items = [[LJRedDotManager shared] readFileItem];\n    for (NSDictionary *item in items) {\n        if ([self shouldClearRedDotForKey:item[@\"key\"]]) {\n            [self clearRedDot:item];\n        }\n    }\n\n    // 再根据灰度控制，检测一遍红点\n    [[LJGrayScaleOCManager shared] notiForAllObserver];\n}\n\n- (BOOL)shouldClearRedDotForKey:(NSString *)key {\n    if ([key isEqualToString:@\"mTransactionCapital\"]) {\n        if (![[HXAccountAnalysisPluginBridge service] isEnable] ||\n            [MePool sharedMePool].transactionType == TransactionTypeSimulate) {\n            return true;\n        }\n    } else if ([key isEqualToString:[ManageItemModel actionTypeStr:mTransactionCapitalSimulate]]) {\n        if ([MePool sharedMePool].transactionType == TransactionTypeReal || ![[HXTradeGrayScaleManager share] isSimulateAnalyseEnable]) {\n            return true;\n        }\n    } else if (([key isEqualToString:HXCustomizedTradeViewSettingController.optionRedDotKeyPath] &&\n                !HXOptionTradeGray.isEnableForCurrentAccount) ||\n               ([key isEqualToString:HXCustomizedTradeViewSettingController.arbitrageRedDotKeyPath] &&\n                !HXTradeFunctionControl.isArbitrageTradeEnable)) {\n        return true;\n    } else if ([key isEqualToString:HXTransactionSettingTypeStringGridTrade] &&\n               ![[HXTradeGrayScaleManager share] isGridTradeEnable]) {\n        return true;\n    } else if ([key isEqualToString:HXConditionParamSettingViewController.convertRedDotKeyPath] &&\n               !([[HXTradeGrayScaleManager share] isConditionConvertEnable] && \n                 [[AllCloudCondictionCompanyManager share] isConditionEnableForQsid:[HXTradeLoginManager currentAccount].qsid\n                                                                               wtid:[HXTradeLoginManager currentAccount].wtid])) {\n        return true;\n    } else if ([key isEqualToString:HXTransactionSettingTypeStringSimulatorAccountSetting] &&\n               ![[HXTradeGrayScaleManager share] isSimulatorAccountSettingEnable]) {\n        return true;\n    }\n    return false;\n}\n\n- (void)clearRedDot:(NSDictionary *)dic {\n    NSString *keyPath = [NSString stringWithFormat:@\"%@.%@\", dic[@\"preKeyPath\"], dic[@\"key\"]];\n    [LJBadgeController clearBadgeForKeyPath:keyPath];\n}\n\n// 账户分析灰度检测\n- (void)capitalGrayCheck {\n    WEAKSELF\n    [[HXAccountAnalysisPluginBridge service] requestEnableStatusWithIsEnable:^(BOOL status) {\n        [weakSelf checkRedDot];\n        // 账户分析灰度开关检查返回通知跳转账户分析链路继续执行\n        [[NSNotificationCenter defaultCenter] postNotificationName:HXCAPITAL_GRAY_CHECK_BACK_NOTI\n                                                            object:nil\n                                                          userInfo:nil];\n    }];\n}\n\n- (void)appStoreComment {\n    [self performSelector:@selector(goComment) withObject:nil afterDelay:1.0];\n}\n\n- (void)goComment {\n    // 应用评分\n    CGFloat yingkui = 0;\n    for (int j = 0; j < [self.futuresAndOptionPositions count]; j++) {\n        HXQueryPositionRsp *position = [self.futuresAndOptionPositions thsObjectAtIndex:j];\n        yingkui += [position.chasesProfitAndLoss floatValue];\n    }\n    if (yingkui > 0) { // 用于测试，应该为 yingKui > 0\n        _usercomment = [[UserComment alloc] init];\n        [_usercomment showAppStoreComment:yingkui];\n    }\n}\n\n#pragma mark - 条件单\n\n- (void)addObserverForConditionUntriggerCountUpdate {\n    WEAKSELF;\n    [self.view addAssociateWithConditionDataType:HXAssociateConditionDataTypeCondition];\n    [self.view addAssociateWithConditionDataType:HXAssociateConditionDataTypeStopLoseProfit];\n    [HXConditionDataManager addObserverForConditionsTrigger:self\n                                          replayImmediately:YES\n                                             allManagements:^(BOOL changed, BOOL isTrigger, NSUInteger count) {\n                                                 weakSelf.untriggerCount = count;\n                                                 [weakSelf.untriggerBadge setUntriggerCount:weakSelf.untriggerCount + weakSelf.gridTradeCount];\n                                                 if (isTrigger) {\n                             ","infill":"rketAPI];\n    } else if (typ","suffix":"e == kTransactionActionTypeMiddle) {\n        [self sellOpenOrder];\n    } else if (type == kTransactionActionTypeRight) {\n        [self closePositionOrder];\n    }\n}\n\n- (void)testMarketAPI {\n    LJMarketUniversalRequest *request = [LJMarketUniversalRequest new];\n    \n}\n\n#pragma mark - 下单逻辑\n\n- (void)buyOpenOrder {\n    NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAIRU : LOG_FUI_MAIDUO];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n\n    NSString *priceStr = self.transactionActionView.leftDataBtn.upDataString;\n    BOOL isPriceOrder = ![LJNumericStringUtils isNumber:self.orderInfoView.transPriceTextField.text];\n    NSString *comparePrice = priceStr;\n    if (isPriceOrder) { // 先取最新，再取昨收\n        comparePrice = self.nowPrice;\n        if (![LJNumericStringUtils isNumber:self.nowPrice]) {\n            comparePrice = self.market.yesterdayClosePrice;\n        }\n    }\n\n    BOOL isStopLossInfoError = NO;\n    if (self.stopLossToOpenSetView.isStopLossEnable &&\n        ![self.stopLossToOpenSetView checkIsPriceCanBeOrderWithOrderType:HXOrderActionTypeBuy\n                                                            comparePrice:comparePrice\n                                                            isOrderPrice:isPriceOrder]) {\n        isStopLossInfoError = YES;\n    }\n\n    if ([LJNumericStringUtils isValidDigitNumber:priceStr]) {\n        // 注意：这里特意使用 & 是为了右边的逻辑也需要执行，对委托的错误进行提示\n        if (!isStopLossInfoError & [self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n            [self recordTradeDaily:kTransactionActionTypeLeft];\n            [self transactionOrderRequestWithShowCode:self.showCode\n                                             marketId:self.marketId\n                                            stockName:self.stockName\n                                            direction:HXOrderActionTypeBuy\n                                       combOffsetType:HXCombOffsetTypeOpen\n                                           orderPrice:priceStr\n                                           orderHands:self.orderInfoView.transHandsTextField.text];\n        }\n    } else if (IsNSStringNotEmpty(self.showCode)) {\n        [self.view makeToast:@\"请输入价格\" duration:HXToastTimeDurationShort];\n    }\n}\n\n- (void)sellOpenOrder {\n    NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAICHU : LOG_FUI_MAIKONG];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n\n    NSString *priceStr = self.transactionActionView.middleDataBtn.upDataString;\n    BOOL isPriceOrder = ![LJNumericStringUtils isNumber:self.orderInfoView.transPriceTextField.text];\n    NSString *comparePrice = priceStr;\n    if (isPriceOrder) { // 先取最新，再取昨收\n        comparePrice = self.nowPrice;\n        if (![LJNumericStringUtils isNumber:self.nowPrice]) {\n            comparePrice = self.market.yesterdayClosePrice;\n        }\n    }\n\n    BOOL isStopLossInfoError = NO;\n    if (self.stopLossToOpenSetView.isStopLossEnable &&\n        ![self.stopLossToOpenSetView checkIsPriceCanBeOrderWithOrderType:HXOrderActionTypeSell\n                                                            comparePrice:comparePrice\n                                                            isOrderPrice:isPriceOrder]) {\n        isStopLossInfoError = YES;\n    }\n\n    if ([LJNumericStringUtils isValidDigitNumber:priceStr]) {\n        // 注意：这里特意使用 & 是为了右边的逻辑也需要执行，对委托的错误进行提示\n        if (!isStopLossInfoError & [self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n            [self recordTradeDaily:kTransactionActionTypeMiddle];\n            [self transactionOrderRequestWithShowCode:self.showCode\n                                             marketId:self.marketId\n                                            stockName:self.stockName\n                                            direction:HXOrderActionTypeSell\n                                       combOffsetType:HXCombOffsetTypeOpen\n                                           orderPrice:priceStr\n                                           orderHands:self.orderInfoView.transHandsTextField.text];\n        }\n    } else if (IsNSStringNotEmpty(self.showCode)) {\n        [self.view makeToast:@\"请输入价格\" duration:HXToastTimeDurationShort];\n    }\n}\n\n/// 是否展示套利单腿平仓提示\n- (BOOL)shouldShowArbitrageCloseAlert:(HXOrderActionType)direction {\n    return !self.isArbitrage &&\n           [HXTransactionSettingConfigManager shouldShowArbitrageCloseAlertWithShowCode:self.showCode\n                                                                               marketId:self.marketId\n                                                                              direction:direction\n                                                                             orderCount:self.orderInfoView.transHandsTextField.text.integerValue];\n}\n\n- (void)closePositionOrder {\n    if (self.selectedPosition) {\n        NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n        [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n        NSString *priceStr = self.transactionActionView.rightDataBtn.upDataString;\n        if (![priceStr isEqualToString:@\"--\"] && priceStr && [LJNumericStringUtils isValidDigitNumber:priceStr]) {\n            HXQueryPositionRsp *position = self.selectedPosition;\n            if (position) {\n                if ([self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n                    NSInteger handsTextFieldInt = self.orderInfoView.transHandsTextField.text.integerValue;\n                    NSInteger handsTotal = position.enablePosition;\n                    if (handsTotal < handsTextFieldInt) {\n                        [self.view makeToast:@\"可平仓手数不足\" duration:2 position:@\"center\"];\n                    } else {\n                        [self closeHoldPositionIfNeeded:position price:priceStr hands:self.orderInfoView.transHandsTextField.text];\n                    }\n                }\n            }\n        } else if (IsNSStringNotEmpty(self.showCode)) {\n            [self.view makeToast:@\"请输入价格\" duration:2 position:@\"center\"];\n        }\n    } else {\n        int i = 0, j = 0, k = 0;                               // 变量k用来记录当前可以选中的合约代码在数组中的index\n        NSMutableArray *array = [[NSMutableArray alloc] init]; // 存放平仓选项\n        NSArray<HXQueryPositionRsp *> *matchedPositions = [self matchedPositions];\n        NSInteger count = [matchedPositions count];\n        for (; i < count; i++) {\n            HXQueryPositionRsp *position = [matchedPositions thsObjectAtIndex:i];\n            if ([position.showCode isEqualToString:self.showCode] && !position.isHedgeStock) {\n                [array addObject:position];\n                j++;\n                k = i;\n            }\n        }\n        if (1 == j) {\n            NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n            [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n            NSString *priceStr = self.transactionActionView.rightDataBtn.upDataString;\n            if (![priceStr isEqualToString:@\"--\"] && priceStr && [LJNumericStringUtils isValidDigitNumber:priceStr]) {\n                if ([self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n                    HXQueryPositionRsp *position = [matchedPositions thsObjectAtIndex:k];\n                    if (position) {\n                        NSInteger handsTextFieldInt = self.orderInfoView.transHandsTextField.text.integerValue;\n                        NSInteger handsTotel = position.enablePosition;\n\n                        if (handsTotel < handsTextFieldInt) {\n                            [self.view makeToast:@\"可平仓手数不足\" duration:2 position:@\"center\"];\n                        } else {\n                            [self closeHoldPositionIfNeeded:position price:priceStr hands:self.orderInfoView.transHandsTextFie","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"[weakSelf showNavigationIndicatorView];\n                                                 } else {\n                                                 [weakSelf hideNavigationIndicatorView];\n                                                 }\n                                             }];\n}\n\n- (void)transactionAction:(NSInteger)type {","deepseek-chat-lite":"                        [weakSelf.untriggerBadge setUntriggerCount:weakSelf.untriggerCount];","CodeQwen2.5-7B":"                        [weakSelf untriggerBadge setUntriggerCount:0];","copilot":"rketAPI];\n    } else if (typ"}},{"prefix":"                              replyImmediately:YES\n                                           key:HXTradeGrayScaleManager.isStopLossToOpenEnable\n                                   updateBlock:^{\n                                       [weakSelf updateStopLossToOpenStatus];\n                                   }];\n}\n\n- (void)hxui_themeDidChangeByManager:(HXUIThemeManager *)manager identifier:(__kindof NSObject<NSCopying> *)identifier theme:(__kindof NSObject *)theme {\n    [super hxui_themeDidChangeByManager:manager identifier:identifier theme:theme];\n    if (manager.currentThemeIdentifier == HXUIThemeTypeStrDark) {\n        _navigationIndicatorView.activityIndicatorViewStyle = UIActivityIndicatorViewStyleWhite;\n    } else {\n        _navigationIndicatorView.activityIndicatorViewStyle = UIActivityIndicatorViewStyleGray;\n    }\n    [self.hangQingView redrawAllLayer];\n}\n\n/// 当应用回到前台时需要刷新五档和持仓盈亏的推送接口\n- (void)appBackToForeground {\n    [_goldTradeConfirmView removeFromSuperview];\n\n    self.needReloadTriggerStatus = YES;\n}\n\n/// 当应用进入后台\n- (void)appIntoBackground {\n    [self updateCacheLeavingDate];\n}\n\n/// 交易登录成功\n- (void)tradeAccountDidSwitchNoti {\n    // 导航栏设置\n    [self initNavigationTitleView];\n    [self hideNavigationIndicatorView];\n\n    [self.hangQingView hideRenderViewCursor];\n    if (self.hangQingView.isOpen) {\n        if (IsNSStringNotEmpty(self.stockCode) && IsNSStringNotEmpty(self.marketId)) {\n            [self showMarketQuotations:YES];\n        }\n        [self.hangQingView hiddenLeadView];\n    }\n\n    [self recoverDefaultOrderHands];\n    self.orderInfoView.keYongPrice = nil;\n    [self clearData];\n    [self clearStopLossInput];\n\n    [self promptUnSupportStopLossToOpenWhenCloseSettingView];\n    [self updateStopLossToOpenStatus];\n\n    if (self.hasShowSimuJiaoYiLead) { // 是否显示模拟交易引导\n        self.hasShowSimuJiaoYiLead = NO;\n        NSNumber *isOk = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_FRIST_OPEN_HANGQING];\n        if (!isOk.boolValue && IsNSStringNotEmpty(self.stockCode) && IsNSStringNotEmpty(self.marketId)) {\n            [self showMarketQuotations:YES];\n        }\n    }\n\n    [self addObserverForConditionUntriggerCountUpdate];\n    [self checkRedDot];\n    [self capitalGrayCheck];\n    self.tradeTimerView.headBehaviorLog = [self getTradeTimerViewHeadBehaviorLog];\n    [self.tradeDatasContainerVc updateSegmentAndBadge];\n\n    [self unRegisterObjectKey]; // 取消原来的数据推送\n    [self requestHeaderData];\n    // 重置当前合约，刷新相关数据\n    [self resetShowCode:self.showCode marketId:self.marketId stockName:self.stockName];\n}\n\n/// 交易登录\n- (void)accountDidLogin {\n    if (self.needReloadTriggerStatus) {\n        [self asyncShowConditionTriggerTipIfNeed];\n    }\n    self.needReloadTriggerStatus = NO;\n}\n\n/// 基准价更新\n- (void)standardPriceSetRefresh {\n    if (!self.qmui_isViewLoadedAndVisible) {\n        return;\n    }\n    [self.hangQingView requestFenShiWithStockCode:self.stockCode stockMarket:self.marketId];\n}\n\n/// 第一次收到成交回报，且当前正在交易页面\n/// @param notification AppDelegate发过来的通知内容\n- (void)receivedTransactionReturn:(NSNotification *)notification {\n    if (TransactionSettings.promptAutoAddPositionToSelfStockStatus == PromptAddPositionToSelfStockStatueDidPrompt) {\n        return;\n    }\n    if (TransactionSettings.autoAddContract) {\n        TransactionSettings.promptAutoAddPositionToSelfStockStatus = PromptAddPositionToSelfStockStatueDidPrompt;\n        return;\n    }\n    if (![self promptAddContract]) {\n        return;\n    }\n}\n\n/// 检测止盈止损等功能的小红点是否需要显示\n- (void)checkRedDot {\n    [[LJRedDotManager shared] checkRedDot];\n    NSArray *items = [[LJRedDotManager shared] readFileItem];\n    for (NSDictionary *item in items) {\n        if ([self shouldClearRedDotForKey:item[@\"key\"]]) {\n            [self clearRedDot:item];\n        }\n    }\n\n    // 再根据灰度控制，检测一遍红点\n    [[LJGrayScaleOCManager shared] notiForAllObserver];\n}\n\n- (BOOL)shouldClearRedDotForKey:(NSString *)key {\n    if ([key isEqualToString:@\"mTransactionCapital\"]) {\n        if (![[HXAccountAnalysisPluginBridge service] isEnable] ||\n            [MePool sharedMePool].transactionType == TransactionTypeSimulate) {\n            return true;\n        }\n    } else if ([key isEqualToString:[ManageItemModel actionTypeStr:mTransactionCapitalSimulate]]) {\n        if ([MePool sharedMePool].transactionType == TransactionTypeReal || ![[HXTradeGrayScaleManager share] isSimulateAnalyseEnable]) {\n            return true;\n        }\n    } else if (([key isEqualToString:HXCustomizedTradeViewSettingController.optionRedDotKeyPath] &&\n                !HXOptionTradeGray.isEnableForCurrentAccount) ||\n               ([key isEqualToString:HXCustomizedTradeViewSettingController.arbitrageRedDotKeyPath] &&\n                !HXTradeFunctionControl.isArbitrageTradeEnable)) {\n        return true;\n    } else if ([key isEqualToString:HXTransactionSettingTypeStringGridTrade] &&\n               ![[HXTradeGrayScaleManager share] isGridTradeEnable]) {\n        return true;\n    } else if ([key isEqualToString:HXConditionParamSettingViewController.convertRedDotKeyPath] &&\n               !([[HXTradeGrayScaleManager share] isConditionConvertEnable] && \n                 [[AllCloudCondictionCompanyManager share] isConditionEnableForQsid:[HXTradeLoginManager currentAccount].qsid\n                                                                               wtid:[HXTradeLoginManager currentAccount].wtid])) {\n        return true;\n    } else if ([key isEqualToString:HXTransactionSettingTypeStringSimulatorAccountSetting] &&\n               ![[HXTradeGrayScaleManager share] isSimulatorAccountSettingEnable]) {\n        return true;\n    }\n    return false;\n}\n\n- (void)clearRedDot:(NSDictionary *)dic {\n    NSString *keyPath = [NSString stringWithFormat:@\"%@.%@\", dic[@\"preKeyPath\"], dic[@\"key\"]];\n    [LJBadgeController clearBadgeForKeyPath:keyPath];\n}\n\n// 账户分析灰度检测\n- (void)capitalGrayCheck {\n    WEAKSELF\n    [[HXAccountAnalysisPluginBridge service] requestEnableStatusWithIsEnable:^(BOOL status) {\n        [weakSelf checkRedDot];\n        // 账户分析灰度开关检查返回通知跳转账户分析链路继续执行\n        [[NSNotificationCenter defaultCenter] postNotificationName:HXCAPITAL_GRAY_CHECK_BACK_NOTI\n                                                            object:nil\n                                                          userInfo:nil];\n    }];\n}\n\n- (void)appStoreComment {\n    [self performSelector:@selector(goComment) withObject:nil afterDelay:1.0];\n}\n\n- (void)goComment {\n    // 应用评分\n    CGFloat yingkui = 0;\n    for (int j = 0; j < [self.futuresAndOptionPositions count]; j++) {\n        HXQueryPositionRsp *position = [self.futuresAndOptionPositions thsObjectAtIndex:j];\n        yingkui += [position.chasesProfitAndLoss floatValue];\n    }\n    if (yingkui > 0) { // 用于测试，应该为 yingKui > 0\n        _usercomment = [[UserComment alloc] init];\n        [_usercomment showAppStoreComment:yingkui];\n    }\n}\n\n#pragma mark - 条件单\n\n- (void)addObserverForConditionUntriggerCountUpdate {\n    WEAKSELF;\n    [self.view addAssociateWithConditionDataType:HXAssociateConditionDataTypeCondition];\n    [self.view addAssociateWithConditionDataType:HXAssociateConditionDataTypeStopLoseProfit];\n    [HXConditionDataManager addObserverForConditionsTrigger:self\n                                          replayImmediately:YES\n                                             allManagements:^(BOOL changed, BOOL isTrigger, NSUInteger count) {\n                                                 weakSelf.untriggerCount = count;\n                                                 [weakSelf.untriggerBadge setUntriggerCount:weakSelf.untriggerCount + weakSelf.gridTradeCount];\n                                                 if (isTrigger) {\n                                                     if (weakSelf.disappearred) {\n                                                         weakSelf.triggerdInDisappear = YES;\n                                                     } else {\n                                                         [weakSelf.untriggerBadge showTriggered];\n           ","infill":"  NSMutableArray *co\n    \n    for (HXQueryPositionRsp *position in positions) {\n        \n    }\n    \n    \n    LJMarketUniversalRequest *request = [LJMarketUniversalRequest new];\n    \n}\n\n#pragma mark - 下单逻辑\n\n- (void)buyOpenOrder {\n  ","suffix":"  NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAIRU : LOG_FUI_MAIDUO];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n\n    NSString *priceStr = self.transactionActionView.leftDataBtn.upDataString;\n    BOOL isPriceOrder = ![LJNumericStringUtils isNumber:self.orderInfoView.transPriceTextField.text];\n    NSString *comparePrice = priceStr;\n    if (isPriceOrder) { // 先取最新，再取昨收\n        comparePrice = self.nowPrice;\n        if (![LJNumericStringUtils isNumber:self.nowPrice]) {\n            comparePrice = self.market.yesterdayClosePrice;\n        }\n    }\n\n    BOOL isStopLossInfoError = NO;\n    if (self.stopLossToOpenSetView.isStopLossEnable &&\n        ![self.stopLossToOpenSetView checkIsPriceCanBeOrderWithOrderType:HXOrderActionTypeBuy\n                                                            comparePrice:comparePrice\n                                                            isOrderPrice:isPriceOrder]) {\n        isStopLossInfoError = YES;\n    }\n\n    if ([LJNumericStringUtils isValidDigitNumber:priceStr]) {\n        // 注意：这里特意使用 & 是为了右边的逻辑也需要执行，对委托的错误进行提示\n        if (!isStopLossInfoError & [self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n            [self recordTradeDaily:kTransactionActionTypeLeft];\n            [self transactionOrderRequestWithShowCode:self.showCode\n                                             marketId:self.marketId\n                                            stockName:self.stockName\n                                            direction:HXOrderActionTypeBuy\n                                       combOffsetType:HXCombOffsetTypeOpen\n                                           orderPrice:priceStr\n                                           orderHands:self.orderInfoView.transHandsTextField.text];\n        }\n    } else if (IsNSStringNotEmpty(self.showCode)) {\n        [self.view makeToast:@\"请输入价格\" duration:HXToastTimeDurationShort];\n    }\n}\n\n- (void)sellOpenOrder {\n    NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAICHU : LOG_FUI_MAIKONG];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n\n    NSString *priceStr = self.transactionActionView.middleDataBtn.upDataString;\n    BOOL isPriceOrder = ![LJNumericStringUtils isNumber:self.orderInfoView.transPriceTextField.text];\n    NSString *comparePrice = priceStr;\n    if (isPriceOrder) { // 先取最新，再取昨收\n        comparePrice = self.nowPrice;\n        if (![LJNumericStringUtils isNumber:self.nowPrice]) {\n            comparePrice = self.market.yesterdayClosePrice;\n        }\n    }\n\n    BOOL isStopLossInfoError = NO;\n    if (self.stopLossToOpenSetView.isStopLossEnable &&\n        ![self.stopLossToOpenSetView checkIsPriceCanBeOrderWithOrderType:HXOrderActionTypeSell\n                                                            comparePrice:comparePrice\n                                                            isOrderPrice:isPriceOrder]) {\n        isStopLossInfoError = YES;\n    }\n\n    if ([LJNumericStringUtils isValidDigitNumber:priceStr]) {\n        // 注意：这里特意使用 & 是为了右边的逻辑也需要执行，对委托的错误进行提示\n        if (!isStopLossInfoError & [self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n            [self recordTradeDaily:kTransactionActionTypeMiddle];\n            [self transactionOrderRequestWithShowCode:self.showCode\n                                             marketId:self.marketId\n                                            stockName:self.stockName\n                                            direction:HXOrderActionTypeSell\n                                       combOffsetType:HXCombOffsetTypeOpen\n                                           orderPrice:priceStr\n                                           orderHands:self.orderInfoView.transHandsTextField.text];\n        }\n    } else if (IsNSStringNotEmpty(self.showCode)) {\n        [self.view makeToast:@\"请输入价格\" duration:HXToastTimeDurationShort];\n    }\n}\n\n/// 是否展示套利单腿平仓提示\n- (BOOL)shouldShowArbitrageCloseAlert:(HXOrderActionType)direction {\n    return !self.isArbitrage &&\n           [HXTransactionSettingConfigManager shouldShowArbitrageCloseAlertWithShowCode:self.showCode\n                                                                               marketId:self.marketId\n                                                                              direction:direction\n                                                                             orderCount:self.orderInfoView.transHandsTextField.text.integerValue];\n}\n\n- (void)closePositionOrder {\n    if (self.selectedPosition) {\n        NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n        [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n        NSString *priceStr = self.transactionActionView.rightDataBtn.upDataString;\n        if (![priceStr isEqualToString:@\"--\"] && priceStr && [LJNumericStringUtils isValidDigitNumber:priceStr]) {\n            HXQueryPositionRsp *position = self.selectedPosition;\n            if (position) {\n                if ([self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n                    NSInteger handsTextFieldInt = self.orderInfoView.transHandsTextField.text.integerValue;\n                    NSInteger handsTotal = position.enablePosition;\n                    if (handsTotal < handsTextFieldInt) {\n                        [self.view makeToast:@\"可平仓手数不足\" duration:2 position:@\"center\"];\n                    } else {\n                        [self closeHoldPositionIfNeeded:position price:priceStr hands:self.orderInfoView.transHandsTextField.text];\n                    }\n                }\n            }\n        } else if (IsNSStringNotEmpty(self.showCode)) {\n            [self.view makeToast:@\"请输入价格\" duration:2 position:@\"center\"];\n        }\n    } else {\n        int i = 0, j = 0, k = 0;                               // 变量k用来记录当前可以选中的合约代码在数组中的index\n        NSMutableArray *array = [[NSMutableArray alloc] init]; // 存放平仓选项\n        NSArray<HXQueryPositionRsp *> *matchedPositions = [self matchedPositions];\n        NSInteger count = [matchedPositions count];\n        for (; i < count; i++) {\n            HXQueryPositionRsp *position = [matchedPositions thsObjectAtIndex:i];\n            if ([position.showCode isEqualToString:self.showCode] && !position.isHedgeStock) {\n                [array addObject:position];\n                j++;\n                k = i;\n            }\n        }\n        if (1 == j) {\n            NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n            [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n            NSString *priceStr = self.transactionActionView.rightDataBtn.upDataString;\n            if (![priceStr isEqualToString:@\"--\"] && priceStr && [LJNumericStringUtils isValidDigitNumber:priceStr]) {\n                if ([self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n                    HXQueryPositionRsp *position = [matchedPositions thsObjectAtIndex:k];\n                    if (position) {\n                        NSInteger handsTextFieldInt = self.orderInfoView.transHandsTextField.text.integerValue;\n                        NSInteger handsTotel = position.enablePosition;\n\n                        if (handsTotel < handsTextFieldInt) {\n                            [self.view makeToast:@\"可平仓手数不足\" duration:2 position:@\"center\"];\n                        } else {\n                            [self closeHoldPositionIfNeeded:position price:priceStr hands:self.orderInfoView.transHandsTextField.text];\n                        }\n                    }\n                }\n            } else if (IsNSStringNotEmpty(self.showCode)) {\n                [self.view makeToast:@\"请输入价格\" duration:2 position:@\"center\"];\n            }\n        } else if (array.count == 2) {\n            NSString *prefixStr = [NSString stringW","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"                                            }\n                                                 [weakSelf checkRedDot];\n                                             }];\n}","deepseek-chat-lite":"                                          }","CodeQwen2.5-7B":"                                          }","copilot":"  NSMutableArray *co\n    \n    for (HXQueryPositionRsp *position in positions) {\n        \n    }\n    \n    \n    LJMarketUniversalRequest *request = [LJMarketUniversalRequest new];\n    \n}\n\n#pragma mark - 下单逻辑\n\n- (void)buyOpenOrder {\n  "}},{"prefix":"                              replyImmediately:YES\n                                           key:HXTradeGrayScaleManager.isStopLossToOpenEnable\n                                   updateBlock:^{\n                                       [weakSelf updateStopLossToOpenStatus];\n                                   }];\n}\n\n- (void)hxui_themeDidChangeByManager:(HXUIThemeManager *)manager identifier:(__kindof NSObject<NSCopying> *)identifier theme:(__kindof NSObject *)theme {\n    [super hxui_themeDidChangeByManager:manager identifier:identifier theme:theme];\n    if (manager.currentThemeIdentifier == HXUIThemeTypeStrDark) {\n        _navigationIndicatorView.activityIndicatorViewStyle = UIActivityIndicatorViewStyleWhite;\n    } else {\n        _navigationIndicatorView.activityIndicatorViewStyle = UIActivityIndicatorViewStyleGray;\n    }\n    [self.hangQingView redrawAllLayer];\n}\n\n/// 当应用回到前台时需要刷新五档和持仓盈亏的推送接口\n- (void)appBackToForeground {\n    [_goldTradeConfirmView removeFromSuperview];\n\n    self.needReloadTriggerStatus = YES;\n}\n\n/// 当应用进入后台\n- (void)appIntoBackground {\n    [self updateCacheLeavingDate];\n}\n\n/// 交易登录成功\n- (void)tradeAccountDidSwitchNoti {\n    // 导航栏设置\n    [self initNavigationTitleView];\n    [self hideNavigationIndicatorView];\n\n    [self.hangQingView hideRenderViewCursor];\n    if (self.hangQingView.isOpen) {\n        if (IsNSStringNotEmpty(self.stockCode) && IsNSStringNotEmpty(self.marketId)) {\n            [self showMarketQuotations:YES];\n        }\n        [self.hangQingView hiddenLeadView];\n    }\n\n    [self recoverDefaultOrderHands];\n    self.orderInfoView.keYongPrice = nil;\n    [self clearData];\n    [self clearStopLossInput];\n\n    [self promptUnSupportStopLossToOpenWhenCloseSettingView];\n    [self updateStopLossToOpenStatus];\n\n    if (self.hasShowSimuJiaoYiLead) { // 是否显示模拟交易引导\n        self.hasShowSimuJiaoYiLead = NO;\n        NSNumber *isOk = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_FRIST_OPEN_HANGQING];\n        if (!isOk.boolValue && IsNSStringNotEmpty(self.stockCode) && IsNSStringNotEmpty(self.marketId)) {\n            [self showMarketQuotations:YES];\n        }\n    }\n\n    [self addObserverForConditionUntriggerCountUpdate];\n    [self checkRedDot];\n    [self capitalGrayCheck];\n    self.tradeTimerView.headBehaviorLog = [self getTradeTimerViewHeadBehaviorLog];\n    [self.tradeDatasContainerVc updateSegmentAndBadge];\n\n    [self unRegisterObjectKey]; // 取消原来的数据推送\n    [self requestHeaderData];\n    // 重置当前合约，刷新相关数据\n    [self resetShowCode:self.showCode marketId:self.marketId stockName:self.stockName];\n}\n\n/// 交易登录\n- (void)accountDidLogin {\n    if (self.needReloadTriggerStatus) {\n        [self asyncShowConditionTriggerTipIfNeed];\n    }\n    self.needReloadTriggerStatus = NO;\n}\n\n/// 基准价更新\n- (void)standardPriceSetRefresh {\n    if (!self.qmui_isViewLoadedAndVisible) {\n        return;\n    }\n    [self.hangQingView requestFenShiWithStockCode:self.stockCode stockMarket:self.marketId];\n}\n\n/// 第一次收到成交回报，且当前正在交易页面\n/// @param notification AppDelegate发过来的通知内容\n- (void)receivedTransactionReturn:(NSNotification *)notification {\n    if (TransactionSettings.promptAutoAddPositionToSelfStockStatus == PromptAddPositionToSelfStockStatueDidPrompt) {\n        return;\n    }\n    if (TransactionSettings.autoAddContract) {\n        TransactionSettings.promptAutoAddPositionToSelfStockStatus = PromptAddPositionToSelfStockStatueDidPrompt;\n        return;\n    }\n    if (![self promptAddContract]) {\n        return;\n    }\n}\n\n/// 检测止盈止损等功能的小红点是否需要显示\n- (void)checkRedDot {\n    [[LJRedDotManager shared] checkRedDot];\n    NSArray *items = [[LJRedDotManager shared] readFileItem];\n    for (NSDictionary *item in items) {\n        if ([self shouldClearRedDotForKey:item[@\"key\"]]) {\n            [self clearRedDot:item];\n        }\n    }\n\n    // 再根据灰度控制，检测一遍红点\n    [[LJGrayScaleOCManager shared] notiForAllObserver];\n}\n\n- (BOOL)shouldClearRedDotForKey:(NSString *)key {\n    if ([key isEqualToString:@\"mTransactionCapital\"]) {\n        if (![[HXAccountAnalysisPluginBridge service] isEnable] ||\n            [MePool sharedMePool].transactionType == TransactionTypeSimulate) {\n            return true;\n        }\n    } else if ([key isEqualToString:[ManageItemModel actionTypeStr:mTransactionCapitalSimulate]]) {\n        if ([MePool sharedMePool].transactionType == TransactionTypeReal || ![[HXTradeGrayScaleManager share] isSimulateAnalyseEnable]) {\n            return true;\n        }\n    } else if (([key isEqualToString:HXCustomizedTradeViewSettingController.optionRedDotKeyPath] &&\n                !HXOptionTradeGray.isEnableForCurrentAccount) ||\n               ([key isEqualToString:HXCustomizedTradeViewSettingController.arbitrageRedDotKeyPath] &&\n                !HXTradeFunctionControl.isArbitrageTradeEnable)) {\n        return true;\n    } else if ([key isEqualToString:HXTransactionSettingTypeStringGridTrade] &&\n               ![[HXTradeGrayScaleManager share] isGridTradeEnable]) {\n        return true;\n    } else if ([key isEqualToString:HXConditionParamSettingViewController.convertRedDotKeyPath] &&\n               !([[HXTradeGrayScaleManager share] isConditionConvertEnable] && \n                 [[AllCloudCondictionCompanyManager share] isConditionEnableForQsid:[HXTradeLoginManager currentAccount].qsid\n                                                                               wtid:[HXTradeLoginManager currentAccount].wtid])) {\n        return true;\n    } else if ([key isEqualToString:HXTransactionSettingTypeStringSimulatorAccountSetting] &&\n               ![[HXTradeGrayScaleManager share] isSimulatorAccountSettingEnable]) {\n        return true;\n    }\n    return false;\n}\n\n- (void)clearRedDot:(NSDictionary *)dic {\n    NSString *keyPath = [NSString stringWithFormat:@\"%@.%@\", dic[@\"preKeyPath\"], dic[@\"key\"]];\n    [LJBadgeController clearBadgeForKeyPath:keyPath];\n}\n\n// 账户分析灰度检测\n- (void)capitalGrayCheck {\n    WEAKSELF\n    [[HXAccountAnalysisPluginBridge service] requestEnableStatusWithIsEnable:^(BOOL status) {\n        [weakSelf checkRedDot];\n        // 账户分析灰度开关检查返回通知跳转账户分析链路继续执行\n        [[NSNotificationCenter defaultCenter] postNotificationName:HXCAPITAL_GRAY_CHECK_BACK_NOTI\n                                                            object:nil\n                                                          userInfo:nil];\n    }];\n}\n\n- (void)appStoreComment {\n    [self performSelector:@selector(goComment) withObject:nil afterDelay:1.0];\n}\n\n- (void)goComment {\n    // 应用评分\n    CGFloat yingkui = 0;\n    for (int j = 0; j < [self.futuresAndOptionPositions count]; j++) {\n        HXQueryPositionRsp *position = [self.futuresAndOptionPositions thsObjectAtIndex:j];\n        yingkui += [position.chasesProfitAndLoss floatValue];\n    }\n    if (yingkui > 0) { // 用于测试，应该为 yingKui > 0\n        _usercomment = [[UserComment alloc] init];\n        [_usercomment showAppStoreComment:yingkui];\n    }\n}\n\n#pragma mark - 条件单\n\n- (void)addObserverForConditionUntriggerCountUpdate {\n    WEAKSELF;\n    [self.view addAssociateWithConditionDataType:HXAssociateConditionDataTypeCondition];\n    [self.view addAssociateWithConditionDataType:HXAssociateConditionDataTypeStopLoseProfit];\n    [HXConditionDataManager addObserverForConditionsTrigger:self\n                                          replayImmediately:YES\n                                             allManagements:^(BOOL changed, BOOL isTrigger, NSUInteger count) {\n                                                 weakSelf.untriggerCount = count;\n                                                 [weakSelf.untriggerBadge setUntriggerCount:weakSelf.untriggerCount + weakSelf.gridTradeCount];\n                                                 if (isTrigger) {\n                                                     if (weakSelf.disappearred) {\n                                                         weakSelf.triggerdInDisappear = YES;\n                                                     } else {\n                                                         [weakSelf.untriggerBadge showTriggered];\n           ","infill":"utableArray *codeList = [NSMutableArray alloc] \n    \n    for (HXQueryPositionRsp *position in positions) {\n        \n    }\n    \n    \n    LJMarketUniversalRequest *request = [LJMarketUniversalRequest n","suffix":"ew];\n    \n}\n\n#pragma mark - 下单逻辑\n\n- (void)buyOpenOrder {\n    NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAIRU : LOG_FUI_MAIDUO];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n\n    NSString *priceStr = self.transactionActionView.leftDataBtn.upDataString;\n    BOOL isPriceOrder = ![LJNumericStringUtils isNumber:self.orderInfoView.transPriceTextField.text];\n    NSString *comparePrice = priceStr;\n    if (isPriceOrder) { // 先取最新，再取昨收\n        comparePrice = self.nowPrice;\n        if (![LJNumericStringUtils isNumber:self.nowPrice]) {\n            comparePrice = self.market.yesterdayClosePrice;\n        }\n    }\n\n    BOOL isStopLossInfoError = NO;\n    if (self.stopLossToOpenSetView.isStopLossEnable &&\n        ![self.stopLossToOpenSetView checkIsPriceCanBeOrderWithOrderType:HXOrderActionTypeBuy\n                                                            comparePrice:comparePrice\n                                                            isOrderPrice:isPriceOrder]) {\n        isStopLossInfoError = YES;\n    }\n\n    if ([LJNumericStringUtils isValidDigitNumber:priceStr]) {\n        // 注意：这里特意使用 & 是为了右边的逻辑也需要执行，对委托的错误进行提示\n        if (!isStopLossInfoError & [self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n            [self recordTradeDaily:kTransactionActionTypeLeft];\n            [self transactionOrderRequestWithShowCode:self.showCode\n                                             marketId:self.marketId\n                                            stockName:self.stockName\n                                            direction:HXOrderActionTypeBuy\n                                       combOffsetType:HXCombOffsetTypeOpen\n                                           orderPrice:priceStr\n                                           orderHands:self.orderInfoView.transHandsTextField.text];\n        }\n    } else if (IsNSStringNotEmpty(self.showCode)) {\n        [self.view makeToast:@\"请输入价格\" duration:HXToastTimeDurationShort];\n    }\n}\n\n- (void)sellOpenOrder {\n    NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAICHU : LOG_FUI_MAIKONG];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n\n    NSString *priceStr = self.transactionActionView.middleDataBtn.upDataString;\n    BOOL isPriceOrder = ![LJNumericStringUtils isNumber:self.orderInfoView.transPriceTextField.text];\n    NSString *comparePrice = priceStr;\n    if (isPriceOrder) { // 先取最新，再取昨收\n        comparePrice = self.nowPrice;\n        if (![LJNumericStringUtils isNumber:self.nowPrice]) {\n            comparePrice = self.market.yesterdayClosePrice;\n        }\n    }\n\n    BOOL isStopLossInfoError = NO;\n    if (self.stopLossToOpenSetView.isStopLossEnable &&\n        ![self.stopLossToOpenSetView checkIsPriceCanBeOrderWithOrderType:HXOrderActionTypeSell\n                                                            comparePrice:comparePrice\n                                                            isOrderPrice:isPriceOrder]) {\n        isStopLossInfoError = YES;\n    }\n\n    if ([LJNumericStringUtils isValidDigitNumber:priceStr]) {\n        // 注意：这里特意使用 & 是为了右边的逻辑也需要执行，对委托的错误进行提示\n        if (!isStopLossInfoError & [self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n            [self recordTradeDaily:kTransactionActionTypeMiddle];\n            [self transactionOrderRequestWithShowCode:self.showCode\n                                             marketId:self.marketId\n                                            stockName:self.stockName\n                                            direction:HXOrderActionTypeSell\n                                       combOffsetType:HXCombOffsetTypeOpen\n                                           orderPrice:priceStr\n                                           orderHands:self.orderInfoView.transHandsTextField.text];\n        }\n    } else if (IsNSStringNotEmpty(self.showCode)) {\n        [self.view makeToast:@\"请输入价格\" duration:HXToastTimeDurationShort];\n    }\n}\n\n/// 是否展示套利单腿平仓提示\n- (BOOL)shouldShowArbitrageCloseAlert:(HXOrderActionType)direction {\n    return !self.isArbitrage &&\n           [HXTransactionSettingConfigManager shouldShowArbitrageCloseAlertWithShowCode:self.showCode\n                                                                               marketId:self.marketId\n                                                                              direction:direction\n                                                                             orderCount:self.orderInfoView.transHandsTextField.text.integerValue];\n}\n\n- (void)closePositionOrder {\n    if (self.selectedPosition) {\n        NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n        [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n        NSString *priceStr = self.transactionActionView.rightDataBtn.upDataString;\n        if (![priceStr isEqualToString:@\"--\"] && priceStr && [LJNumericStringUtils isValidDigitNumber:priceStr]) {\n            HXQueryPositionRsp *position = self.selectedPosition;\n            if (position) {\n                if ([self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n                    NSInteger handsTextFieldInt = self.orderInfoView.transHandsTextField.text.integerValue;\n                    NSInteger handsTotal = position.enablePosition;\n                    if (handsTotal < handsTextFieldInt) {\n                        [self.view makeToast:@\"可平仓手数不足\" duration:2 position:@\"center\"];\n                    } else {\n                        [self closeHoldPositionIfNeeded:position price:priceStr hands:self.orderInfoView.transHandsTextField.text];\n                    }\n                }\n            }\n        } else if (IsNSStringNotEmpty(self.showCode)) {\n            [self.view makeToast:@\"请输入价格\" duration:2 position:@\"center\"];\n        }\n    } else {\n        int i = 0, j = 0, k = 0;                               // 变量k用来记录当前可以选中的合约代码在数组中的index\n        NSMutableArray *array = [[NSMutableArray alloc] init]; // 存放平仓选项\n        NSArray<HXQueryPositionRsp *> *matchedPositions = [self matchedPositions];\n        NSInteger count = [matchedPositions count];\n        for (; i < count; i++) {\n            HXQueryPositionRsp *position = [matchedPositions thsObjectAtIndex:i];\n            if ([position.showCode isEqualToString:self.showCode] && !position.isHedgeStock) {\n                [array addObject:position];\n                j++;\n                k = i;\n            }\n        }\n        if (1 == j) {\n            NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n            [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n            NSString *priceStr = self.transactionActionView.rightDataBtn.upDataString;\n            if (![priceStr isEqualToString:@\"--\"] && priceStr && [LJNumericStringUtils isValidDigitNumber:priceStr]) {\n                if ([self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n                    HXQueryPositionRsp *position = [matchedPositions thsObjectAtIndex:k];\n                    if (position) {\n                        NSInteger handsTextFieldInt = self.orderInfoView.transHandsTextField.text.integerValue;\n                        NSInteger handsTotel = position.enablePosition;\n\n                        if (handsTotel < handsTextFieldInt) {\n                            [self.view makeToast:@\"可平仓手数不足\" duration:2 position:@\"center\"];\n                        } else {\n                            [self closeHoldPositionIfNeeded:position price:priceStr hands:self.orderInfoView.transHandsTextField.text];\n                        }\n                    }\n                }\n            } else if (IsNSStringNotEmpty(self.showCode)) {\n                [self.view makeToast:@\"请输入价格\" duration:2 position:@\"center\"];\n            }\n        } else if (array.","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"                                                } else {\n                                                     [weakSelf.untriggerBadge hideTriggered];\n                                                 }\n                                             }];\n    [self.view removeAssociateWithConditionDataType:HXAssociateConditionDataTypeCondition];","deepseek-chat-lite":"                                          }","CodeQwen2.5-7B":"                                          }","copilot":"utableArray *codeList = [NSMutableArray alloc] \n    \n    for (HXQueryPositionRsp *position in positions) {\n        \n    }\n    \n    \n    LJMarketUniversalRequest *request = [LJMarketUniversalRequest n"}},{"prefix":"    [super hxui_themeDidChangeByManager:manager identifier:identifier theme:theme];\n    if (manager.currentThemeIdentifier == HXUIThemeTypeStrDark) {\n        _navigationIndicatorView.activityIndicatorViewStyle = UIActivityIndicatorViewStyleWhite;\n    } else {\n        _navigationIndicatorView.activityIndicatorViewStyle = UIActivityIndicatorViewStyleGray;\n    }\n    [self.hangQingView redrawAllLayer];\n}\n\n/// 当应用回到前台时需要刷新五档和持仓盈亏的推送接口\n- (void)appBackToForeground {\n    [_goldTradeConfirmView removeFromSuperview];\n\n    self.needReloadTriggerStatus = YES;\n}\n\n/// 当应用进入后台\n- (void)appIntoBackground {\n    [self updateCacheLeavingDate];\n}\n\n/// 交易登录成功\n- (void)tradeAccountDidSwitchNoti {\n    // 导航栏设置\n    [self initNavigationTitleView];\n    [self hideNavigationIndicatorView];\n\n    [self.hangQingView hideRenderViewCursor];\n    if (self.hangQingView.isOpen) {\n        if (IsNSStringNotEmpty(self.stockCode) && IsNSStringNotEmpty(self.marketId)) {\n            [self showMarketQuotations:YES];\n        }\n        [self.hangQingView hiddenLeadView];\n    }\n\n    [self recoverDefaultOrderHands];\n    self.orderInfoView.keYongPrice = nil;\n    [self clearData];\n    [self clearStopLossInput];\n\n    [self promptUnSupportStopLossToOpenWhenCloseSettingView];\n    [self updateStopLossToOpenStatus];\n\n    if (self.hasShowSimuJiaoYiLead) { // 是否显示模拟交易引导\n        self.hasShowSimuJiaoYiLead = NO;\n        NSNumber *isOk = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_FRIST_OPEN_HANGQING];\n        if (!isOk.boolValue && IsNSStringNotEmpty(self.stockCode) && IsNSStringNotEmpty(self.marketId)) {\n            [self showMarketQuotations:YES];\n        }\n    }\n\n    [self addObserverForConditionUntriggerCountUpdate];\n    [self checkRedDot];\n    [self capitalGrayCheck];\n    self.tradeTimerView.headBehaviorLog = [self getTradeTimerViewHeadBehaviorLog];\n    [self.tradeDatasContainerVc updateSegmentAndBadge];\n\n    [self unRegisterObjectKey]; // 取消原来的数据推送\n    [self requestHeaderData];\n    // 重置当前合约，刷新相关数据\n    [self resetShowCode:self.showCode marketId:self.marketId stockName:self.stockName];\n}\n\n/// 交易登录\n- (void)accountDidLogin {\n    if (self.needReloadTriggerStatus) {\n        [self asyncShowConditionTriggerTipIfNeed];\n    }\n    self.needReloadTriggerStatus = NO;\n}\n\n/// 基准价更新\n- (void)standardPriceSetRefresh {\n    if (!self.qmui_isViewLoadedAndVisible) {\n        return;\n    }\n    [self.hangQingView requestFenShiWithStockCode:self.stockCode stockMarket:self.marketId];\n}\n\n/// 第一次收到成交回报，且当前正在交易页面\n/// @param notification AppDelegate发过来的通知内容\n- (void)receivedTransactionReturn:(NSNotification *)notification {\n    if (TransactionSettings.promptAutoAddPositionToSelfStockStatus == PromptAddPositionToSelfStockStatueDidPrompt) {\n        return;\n    }\n    if (TransactionSettings.autoAddContract) {\n        TransactionSettings.promptAutoAddPositionToSelfStockStatus = PromptAddPositionToSelfStockStatueDidPrompt;\n        return;\n    }\n    if (![self promptAddContract]) {\n        return;\n    }\n}\n\n/// 检测止盈止损等功能的小红点是否需要显示\n- (void)checkRedDot {\n    [[LJRedDotManager shared] checkRedDot];\n    NSArray *items = [[LJRedDotManager shared] readFileItem];\n    for (NSDictionary *item in items) {\n        if ([self shouldClearRedDotForKey:item[@\"key\"]]) {\n            [self clearRedDot:item];\n        }\n    }\n\n    // 再根据灰度控制，检测一遍红点\n    [[LJGrayScaleOCManager shared] notiForAllObserver];\n}\n\n- (BOOL)shouldClearRedDotForKey:(NSString *)key {\n    if ([key isEqualToString:@\"mTransactionCapital\"]) {\n        if (![[HXAccountAnalysisPluginBridge service] isEnable] ||\n            [MePool sharedMePool].transactionType == TransactionTypeSimulate) {\n            return true;\n        }\n    } else if ([key isEqualToString:[ManageItemModel actionTypeStr:mTransactionCapitalSimulate]]) {\n        if ([MePool sharedMePool].transactionType == TransactionTypeReal || ![[HXTradeGrayScaleManager share] isSimulateAnalyseEnable]) {\n            return true;\n        }\n    } else if (([key isEqualToString:HXCustomizedTradeViewSettingController.optionRedDotKeyPath] &&\n                !HXOptionTradeGray.isEnableForCurrentAccount) ||\n               ([key isEqualToString:HXCustomizedTradeViewSettingController.arbitrageRedDotKeyPath] &&\n                !HXTradeFunctionControl.isArbitrageTradeEnable)) {\n        return true;\n    } else if ([key isEqualToString:HXTransactionSettingTypeStringGridTrade] &&\n               ![[HXTradeGrayScaleManager share] isGridTradeEnable]) {\n        return true;\n    } else if ([key isEqualToString:HXConditionParamSettingViewController.convertRedDotKeyPath] &&\n               !([[HXTradeGrayScaleManager share] isConditionConvertEnable] && \n                 [[AllCloudCondictionCompanyManager share] isConditionEnableForQsid:[HXTradeLoginManager currentAccount].qsid\n                                                                               wtid:[HXTradeLoginManager currentAccount].wtid])) {\n        return true;\n    } else if ([key isEqualToString:HXTransactionSettingTypeStringSimulatorAccountSetting] &&\n               ![[HXTradeGrayScaleManager share] isSimulatorAccountSettingEnable]) {\n        return true;\n    }\n    return false;\n}\n\n- (void)clearRedDot:(NSDictionary *)dic {\n    NSString *keyPath = [NSString stringWithFormat:@\"%@.%@\", dic[@\"preKeyPath\"], dic[@\"key\"]];\n    [LJBadgeController clearBadgeForKeyPath:keyPath];\n}\n\n// 账户分析灰度检测\n- (void)capitalGrayCheck {\n    WEAKSELF\n    [[HXAccountAnalysisPluginBridge service] requestEnableStatusWithIsEnable:^(BOOL status) {\n        [weakSelf checkRedDot];\n        // 账户分析灰度开关检查返回通知跳转账户分析链路继续执行\n        [[NSNotificationCenter defaultCenter] postNotificationName:HXCAPITAL_GRAY_CHECK_BACK_NOTI\n                                                            object:nil\n                                                          userInfo:nil];\n    }];\n}\n\n- (void)appStoreComment {\n    [self performSelector:@selector(goComment) withObject:nil afterDelay:1.0];\n}\n\n- (void)goComment {\n    // 应用评分\n    CGFloat yingkui = 0;\n    for (int j = 0; j < [self.futuresAndOptionPositions count]; j++) {\n        HXQueryPositionRsp *position = [self.futuresAndOptionPositions thsObjectAtIndex:j];\n        yingkui += [position.chasesProfitAndLoss floatValue];\n    }\n    if (yingkui > 0) { // 用于测试，应该为 yingKui > 0\n        _usercomment = [[UserComment alloc] init];\n        [_usercomment showAppStoreComment:yingkui];\n    }\n}\n\n#pragma mark - 条件单\n\n- (void)addObserverForConditionUntriggerCountUpdate {\n    WEAKSELF;\n    [self.view addAssociateWithConditionDataType:HXAssociateConditionDataTypeCondition];\n    [self.view addAssociateWithConditionDataType:HXAssociateConditionDataTypeStopLoseProfit];\n    [HXConditionDataManager addObserverForConditionsTrigger:self\n                                          replayImmediately:YES\n                                             allManagements:^(BOOL changed, BOOL isTrigger, NSUInteger count) {\n                                                 weakSelf.untriggerCount = count;\n                                                 [weakSelf.untriggerBadge setUntriggerCount:weakSelf.untriggerCount + weakSelf.gridTradeCount];\n                                                 if (isTrigger) {\n                                                     if (weakSelf.disappearred) {\n                                                         weakSelf.triggerdInDisappear = YES;\n                                                     } else {\n                                                         [weakSelf.untriggerBadge showTriggered];\n                                                     }\n                                                 }\n                                             }];\n\n    [[CTMediator sharedInstance] GridTrade_addObserverGridCount:self\n                                                    updateBlock:^(NSInteger count) {\n                                                        weakSelf.gridTradeCount = count;\n                                         ","infill":"[marketList addObject:position.marketId];\n    }\n ","suffix":"   \n    LJMarketUniversalRequest *request = [LJMarketUniversalRequest new];\n    request \n}\n\n#pragma mark - 下单逻辑\n\n- (void)buyOpenOrder {\n    NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAIRU : LOG_FUI_MAIDUO];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n\n    NSString *priceStr = self.transactionActionView.leftDataBtn.upDataString;\n    BOOL isPriceOrder = ![LJNumericStringUtils isNumber:self.orderInfoView.transPriceTextField.text];\n    NSString *comparePrice = priceStr;\n    if (isPriceOrder) { // 先取最新，再取昨收\n        comparePrice = self.nowPrice;\n        if (![LJNumericStringUtils isNumber:self.nowPrice]) {\n            comparePrice = self.market.yesterdayClosePrice;\n        }\n    }\n\n    BOOL isStopLossInfoError = NO;\n    if (self.stopLossToOpenSetView.isStopLossEnable &&\n        ![self.stopLossToOpenSetView checkIsPriceCanBeOrderWithOrderType:HXOrderActionTypeBuy\n                                                            comparePrice:comparePrice\n                                                            isOrderPrice:isPriceOrder]) {\n        isStopLossInfoError = YES;\n    }\n\n    if ([LJNumericStringUtils isValidDigitNumber:priceStr]) {\n        // 注意：这里特意使用 & 是为了右边的逻辑也需要执行，对委托的错误进行提示\n        if (!isStopLossInfoError & [self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n            [self recordTradeDaily:kTransactionActionTypeLeft];\n            [self transactionOrderRequestWithShowCode:self.showCode\n                                             marketId:self.marketId\n                                            stockName:self.stockName\n                                            direction:HXOrderActionTypeBuy\n                                       combOffsetType:HXCombOffsetTypeOpen\n                                           orderPrice:priceStr\n                                           orderHands:self.orderInfoView.transHandsTextField.text];\n        }\n    } else if (IsNSStringNotEmpty(self.showCode)) {\n        [self.view makeToast:@\"请输入价格\" duration:HXToastTimeDurationShort];\n    }\n}\n\n- (void)sellOpenOrder {\n    NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAICHU : LOG_FUI_MAIKONG];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n\n    NSString *priceStr = self.transactionActionView.middleDataBtn.upDataString;\n    BOOL isPriceOrder = ![LJNumericStringUtils isNumber:self.orderInfoView.transPriceTextField.text];\n    NSString *comparePrice = priceStr;\n    if (isPriceOrder) { // 先取最新，再取昨收\n        comparePrice = self.nowPrice;\n        if (![LJNumericStringUtils isNumber:self.nowPrice]) {\n            comparePrice = self.market.yesterdayClosePrice;\n        }\n    }\n\n    BOOL isStopLossInfoError = NO;\n    if (self.stopLossToOpenSetView.isStopLossEnable &&\n        ![self.stopLossToOpenSetView checkIsPriceCanBeOrderWithOrderType:HXOrderActionTypeSell\n                                                            comparePrice:comparePrice\n                                                            isOrderPrice:isPriceOrder]) {\n        isStopLossInfoError = YES;\n    }\n\n    if ([LJNumericStringUtils isValidDigitNumber:priceStr]) {\n        // 注意：这里特意使用 & 是为了右边的逻辑也需要执行，对委托的错误进行提示\n        if (!isStopLossInfoError & [self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n            [self recordTradeDaily:kTransactionActionTypeMiddle];\n            [self transactionOrderRequestWithShowCode:self.showCode\n                                             marketId:self.marketId\n                                            stockName:self.stockName\n                                            direction:HXOrderActionTypeSell\n                                       combOffsetType:HXCombOffsetTypeOpen\n                                           orderPrice:priceStr\n                                           orderHands:self.orderInfoView.transHandsTextField.text];\n        }\n    } else if (IsNSStringNotEmpty(self.showCode)) {\n        [self.view makeToast:@\"请输入价格\" duration:HXToastTimeDurationShort];\n    }\n}\n\n/// 是否展示套利单腿平仓提示\n- (BOOL)shouldShowArbitrageCloseAlert:(HXOrderActionType)direction {\n    return !self.isArbitrage &&\n           [HXTransactionSettingConfigManager shouldShowArbitrageCloseAlertWithShowCode:self.showCode\n                                                                               marketId:self.marketId\n                                                                              direction:direction\n                                                                             orderCount:self.orderInfoView.transHandsTextField.text.integerValue];\n}\n\n- (void)closePositionOrder {\n    if (self.selectedPosition) {\n        NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n        [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n        NSString *priceStr = self.transactionActionView.rightDataBtn.upDataString;\n        if (![priceStr isEqualToString:@\"--\"] && priceStr && [LJNumericStringUtils isValidDigitNumber:priceStr]) {\n            HXQueryPositionRsp *position = self.selectedPosition;\n            if (position) {\n                if ([self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n                    NSInteger handsTextFieldInt = self.orderInfoView.transHandsTextField.text.integerValue;\n                    NSInteger handsTotal = position.enablePosition;\n                    if (handsTotal < handsTextFieldInt) {\n                        [self.view makeToast:@\"可平仓手数不足\" duration:2 position:@\"center\"];\n                    } else {\n                        [self closeHoldPositionIfNeeded:position price:priceStr hands:self.orderInfoView.transHandsTextField.text];\n                    }\n                }\n            }\n        } else if (IsNSStringNotEmpty(self.showCode)) {\n            [self.view makeToast:@\"请输入价格\" duration:2 position:@\"center\"];\n        }\n    } else {\n        int i = 0, j = 0, k = 0;                               // 变量k用来记录当前可以选中的合约代码在数组中的index\n        NSMutableArray *array = [[NSMutableArray alloc] init]; // 存放平仓选项\n        NSArray<HXQueryPositionRsp *> *matchedPositions = [self matchedPositions];\n        NSInteger count = [matchedPositions count];\n        for (; i < count; i++) {\n            HXQueryPositionRsp *position = [matchedPositions thsObjectAtIndex:i];\n            if ([position.showCode isEqualToString:self.showCode] && !position.isHedgeStock) {\n                [array addObject:position];\n                j++;\n                k = i;\n            }\n        }\n        if (1 == j) {\n            NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n            [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n            NSString *priceStr = self.transactionActionView.rightDataBtn.upDataString;\n            if (![priceStr isEqualToString:@\"--\"] && priceStr && [LJNumericStringUtils isValidDigitNumber:priceStr]) {\n                if ([self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n                    HXQueryPositionRsp *position = [matchedPositions thsObjectAtIndex:k];\n                    if (position) {\n                        NSInteger handsTextFieldInt = self.orderInfoView.transHandsTextField.text.integerValue;\n                        NSInteger handsTotel = position.enablePosition;\n\n                        if (handsTotel < handsTextFieldInt) {\n                            [self.view makeToast:@\"可平仓手数不足\" duration:2 position:@\"center\"];\n                        } else {\n                            [self closeHoldPositionIfNeeded:position price:priceStr hands:self.orderInfoView.transHandsTextField.text];\n                        }\n                    }\n                }\n            } else if (IsNSStringNotEmpty(self.showCode)) {\n                [self.view makeToast:@\"请输入","relevantFile":"","relevantFileList":[],"filePath":"FuturesJiaoYiViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"[weakSelf.untriggerBadge setUntriggerCount:weakSelf.untriggerCount + count];\n                                                        if (weakSelf.disappearred) {\n                                                            weakSelf.triggerdInDisappear = YES;\n                                                        }\n                                                    }];","deepseek-chat-lite":"               [weakSelf.untriggerBadge setGridTradeCount:weakSelf.gridTradeCount];","CodeQwen2.5-7B":"               [weakSelf.untriggerBadge setUntriggerCount:weakSelf.untriggerCount + weakSelf.gridTradeCount];","copilot":"[marketList addObject:position.marketId];\n    }\n "}},{"prefix":"    } else {\n        _navigationIndicatorView.activityIndicatorViewStyle = UIActivityIndicatorViewStyleGray;\n    }\n    [self.hangQingView redrawAllLayer];\n}\n\n/// 当应用回到前台时需要刷新五档和持仓盈亏的推送接口\n- (void)appBackToForeground {\n    [_goldTradeConfirmView removeFromSuperview];\n\n    self.needReloadTriggerStatus = YES;\n}\n\n/// 当应用进入后台\n- (void)appIntoBackground {\n    [self updateCacheLeavingDate];\n}\n\n/// 交易登录成功\n- (void)tradeAccountDidSwitchNoti {\n    // 导航栏设置\n    [self initNavigationTitleView];\n    [self hideNavigationIndicatorView];\n\n    [self.hangQingView hideRenderViewCursor];\n    if (self.hangQingView.isOpen) {\n        if (IsNSStringNotEmpty(self.stockCode) && IsNSStringNotEmpty(self.marketId)) {\n            [self showMarketQuotations:YES];\n        }\n        [self.hangQingView hiddenLeadView];\n    }\n\n    [self recoverDefaultOrderHands];\n    self.orderInfoView.keYongPrice = nil;\n    [self clearData];\n    [self clearStopLossInput];\n\n    [self promptUnSupportStopLossToOpenWhenCloseSettingView];\n    [self updateStopLossToOpenStatus];\n\n    if (self.hasShowSimuJiaoYiLead) { // 是否显示模拟交易引导\n        self.hasShowSimuJiaoYiLead = NO;\n        NSNumber *isOk = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_FRIST_OPEN_HANGQING];\n        if (!isOk.boolValue && IsNSStringNotEmpty(self.stockCode) && IsNSStringNotEmpty(self.marketId)) {\n            [self showMarketQuotations:YES];\n        }\n    }\n\n    [self addObserverForConditionUntriggerCountUpdate];\n    [self checkRedDot];\n    [self capitalGrayCheck];\n    self.tradeTimerView.headBehaviorLog = [self getTradeTimerViewHeadBehaviorLog];\n    [self.tradeDatasContainerVc updateSegmentAndBadge];\n\n    [self unRegisterObjectKey]; // 取消原来的数据推送\n    [self requestHeaderData];\n    // 重置当前合约，刷新相关数据\n    [self resetShowCode:self.showCode marketId:self.marketId stockName:self.stockName];\n}\n\n/// 交易登录\n- (void)accountDidLogin {\n    if (self.needReloadTriggerStatus) {\n        [self asyncShowConditionTriggerTipIfNeed];\n    }\n    self.needReloadTriggerStatus = NO;\n}\n\n/// 基准价更新\n- (void)standardPriceSetRefresh {\n    if (!self.qmui_isViewLoadedAndVisible) {\n        return;\n    }\n    [self.hangQingView requestFenShiWithStockCode:self.stockCode stockMarket:self.marketId];\n}\n\n/// 第一次收到成交回报，且当前正在交易页面\n/// @param notification AppDelegate发过来的通知内容\n- (void)receivedTransactionReturn:(NSNotification *)notification {\n    if (TransactionSettings.promptAutoAddPositionToSelfStockStatus == PromptAddPositionToSelfStockStatueDidPrompt) {\n        return;\n    }\n    if (TransactionSettings.autoAddContract) {\n        TransactionSettings.promptAutoAddPositionToSelfStockStatus = PromptAddPositionToSelfStockStatueDidPrompt;\n        return;\n    }\n    if (![self promptAddContract]) {\n        return;\n    }\n}\n\n/// 检测止盈止损等功能的小红点是否需要显示\n- (void)checkRedDot {\n    [[LJRedDotManager shared] checkRedDot];\n    NSArray *items = [[LJRedDotManager shared] readFileItem];\n    for (NSDictionary *item in items) {\n        if ([self shouldClearRedDotForKey:item[@\"key\"]]) {\n            [self clearRedDot:item];\n        }\n    }\n\n    // 再根据灰度控制，检测一遍红点\n    [[LJGrayScaleOCManager shared] notiForAllObserver];\n}\n\n- (BOOL)shouldClearRedDotForKey:(NSString *)key {\n    if ([key isEqualToString:@\"mTransactionCapital\"]) {\n        if (![[HXAccountAnalysisPluginBridge service] isEnable] ||\n            [MePool sharedMePool].transactionType == TransactionTypeSimulate) {\n            return true;\n        }\n    } else if ([key isEqualToString:[ManageItemModel actionTypeStr:mTransactionCapitalSimulate]]) {\n        if ([MePool sharedMePool].transactionType == TransactionTypeReal || ![[HXTradeGrayScaleManager share] isSimulateAnalyseEnable]) {\n            return true;\n        }\n    } else if (([key isEqualToString:HXCustomizedTradeViewSettingController.optionRedDotKeyPath] &&\n                !HXOptionTradeGray.isEnableForCurrentAccount) ||\n               ([key isEqualToString:HXCustomizedTradeViewSettingController.arbitrageRedDotKeyPath] &&\n                !HXTradeFunctionControl.isArbitrageTradeEnable)) {\n        return true;\n    } else if ([key isEqualToString:HXTransactionSettingTypeStringGridTrade] &&\n               ![[HXTradeGrayScaleManager share] isGridTradeEnable]) {\n        return true;\n    } else if ([key isEqualToString:HXConditionParamSettingViewController.convertRedDotKeyPath] &&\n               !([[HXTradeGrayScaleManager share] isConditionConvertEnable] && \n                 [[AllCloudCondictionCompanyManager share] isConditionEnableForQsid:[HXTradeLoginManager currentAccount].qsid\n                                                                               wtid:[HXTradeLoginManager currentAccount].wtid])) {\n        return true;\n    } else if ([key isEqualToString:HXTransactionSettingTypeStringSimulatorAccountSetting] &&\n               ![[HXTradeGrayScaleManager share] isSimulatorAccountSettingEnable]) {\n        return true;\n    }\n    return false;\n}\n\n- (void)clearRedDot:(NSDictionary *)dic {\n    NSString *keyPath = [NSString stringWithFormat:@\"%@.%@\", dic[@\"preKeyPath\"], dic[@\"key\"]];\n    [LJBadgeController clearBadgeForKeyPath:keyPath];\n}\n\n// 账户分析灰度检测\n- (void)capitalGrayCheck {\n    WEAKSELF\n    [[HXAccountAnalysisPluginBridge service] requestEnableStatusWithIsEnable:^(BOOL status) {\n        [weakSelf checkRedDot];\n        // 账户分析灰度开关检查返回通知跳转账户分析链路继续执行\n        [[NSNotificationCenter defaultCenter] postNotificationName:HXCAPITAL_GRAY_CHECK_BACK_NOTI\n                                                            object:nil\n                                                          userInfo:nil];\n    }];\n}\n\n- (void)appStoreComment {\n    [self performSelector:@selector(goComment) withObject:nil afterDelay:1.0];\n}\n\n- (void)goComment {\n    // 应用评分\n    CGFloat yingkui = 0;\n    for (int j = 0; j < [self.futuresAndOptionPositions count]; j++) {\n        HXQueryPositionRsp *position = [self.futuresAndOptionPositions thsObjectAtIndex:j];\n        yingkui += [position.chasesProfitAndLoss floatValue];\n    }\n    if (yingkui > 0) { // 用于测试，应该为 yingKui > 0\n        _usercomment = [[UserComment alloc] init];\n        [_usercomment showAppStoreComment:yingkui];\n    }\n}\n\n#pragma mark - 条件单\n\n- (void)addObserverForConditionUntriggerCountUpdate {\n    WEAKSELF;\n    [self.view addAssociateWithConditionDataType:HXAssociateConditionDataTypeCondition];\n    [self.view addAssociateWithConditionDataType:HXAssociateConditionDataTypeStopLoseProfit];\n    [HXConditionDataManager addObserverForConditionsTrigger:self\n                                          replayImmediately:YES\n                                             allManagements:^(BOOL changed, BOOL isTrigger, NSUInteger count) {\n                                                 weakSelf.untriggerCount = count;\n                                                 [weakSelf.untriggerBadge setUntriggerCount:weakSelf.untriggerCount + weakSelf.gridTradeCount];\n                                                 if (isTrigger) {\n                                                     if (weakSelf.disappearred) {\n                                                         weakSelf.triggerdInDisappear = YES;\n                                                     } else {\n                                                         [weakSelf.untriggerBadge showTriggered];\n                                                     }\n                                                 }\n                                             }];\n\n    [[CTMediator sharedInstance] GridTrade_addObserverGridCount:self\n                                                    updateBlock:^(NSInteger count) {\n                                                        weakSelf.gridTradeCount = count;\n                                                        [weakSelf.untriggerBadge setUntriggerCount:weakSelf.untriggerCount + weakSelf.gridTradeCount];\n                                                    }];\n\n    // 提示展示有时效性，需要在页面显示之后进行展示\n    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 2 * NSEC_PER_SEC), dispatch_get_main_q","infill":"rmat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAIRU : LOG_FUI_MAIDUO];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];","suffix":"\n\n    NSString *priceStr = self.transactionActionView.leftDataBtn.upDataString;\n    BOOL isPriceOrder = ![LJNumericStringUtils isNumber:self.orderInfoView.transPriceTextField.text];\n    NSString *comparePrice = priceStr;\n    if (isPriceOrder) { // 先取最新，再取昨收\n        comparePrice = self.nowPrice;\n        if (![LJNumericStringUtils isNumber:self.nowPrice]) {\n            comparePrice = self.market.yesterdayClosePrice;\n        }\n    }\n\n    BOOL isStopLossInfoError = NO;\n    if (self.stopLossToOpenSetView.isStopLossEnable &&\n        ![self.stopLossToOpenSetView checkIsPriceCanBeOrderWithOrderType:HXOrderActionTypeBuy\n                                                            comparePrice:comparePrice\n                                                            isOrderPrice:isPriceOrder]) {\n        isStopLossInfoError = YES;\n    }\n\n    if ([LJNumericStringUtils isValidDigitNumber:priceStr]) {\n        // 注意：这里特意使用 & 是为了右边的逻辑也需要执行，对委托的错误进行提示\n        if (!isStopLossInfoError & [self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n            [self recordTradeDaily:kTransactionActionTypeLeft];\n            [self transactionOrderRequestWithShowCode:self.showCode\n                                             marketId:self.marketId\n                                            stockName:self.stockName\n                                            direction:HXOrderActionTypeBuy\n                                       combOffsetType:HXCombOffsetTypeOpen\n                                           orderPrice:priceStr\n                                           orderHands:self.orderInfoView.transHandsTextField.text];\n        }\n    } else if (IsNSStringNotEmpty(self.showCode)) {\n        [self.view makeToast:@\"请输入价格\" duration:HXToastTimeDurationShort];\n    }\n}\n\n- (void)sellOpenOrder {\n    NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAICHU : LOG_FUI_MAIKONG];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n\n    NSString *priceStr = self.transactionActionView.middleDataBtn.upDataString;\n    BOOL isPriceOrder = ![LJNumericStringUtils isNumber:self.orderInfoView.transPriceTextField.text];\n    NSString *comparePrice = priceStr;\n    if (isPriceOrder) { // 先取最新，再取昨收\n        comparePrice = self.nowPrice;\n        if (![LJNumericStringUtils isNumber:self.nowPrice]) {\n            comparePrice = self.market.yesterdayClosePrice;\n        }\n    }\n\n    BOOL isStopLossInfoError = NO;\n    if (self.stopLossToOpenSetView.isStopLossEnable &&\n        ![self.stopLossToOpenSetView checkIsPriceCanBeOrderWithOrderType:HXOrderActionTypeSell\n                                                            comparePrice:comparePrice\n                                                            isOrderPrice:isPriceOrder]) {\n        isStopLossInfoError = YES;\n    }\n\n    if ([LJNumericStringUtils isValidDigitNumber:priceStr]) {\n        // 注意：这里特意使用 & 是为了右边的逻辑也需要执行，对委托的错误进行提示\n        if (!isStopLossInfoError & [self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n            [self recordTradeDaily:kTransactionActionTypeMiddle];\n            [self transactionOrderRequestWithShowCode:self.showCode\n                                             marketId:self.marketId\n                                            stockName:self.stockName\n                                            direction:HXOrderActionTypeSell\n                                       combOffsetType:HXCombOffsetTypeOpen\n                                           orderPrice:priceStr\n                                           orderHands:self.orderInfoView.transHandsTextField.text];\n        }\n    } else if (IsNSStringNotEmpty(self.showCode)) {\n        [self.view makeToast:@\"请输入价格\" duration:HXToastTimeDurationShort];\n    }\n}\n\n/// 是否展示套利单腿平仓提示\n- (BOOL)shouldShowArbitrageCloseAlert:(HXOrderActionType)direction {\n    return !self.isArbitrage &&\n           [HXTransactionSettingConfigManager shouldShowArbitrageCloseAlertWithShowCode:self.showCode\n                                                                               marketId:self.marketId\n                                                                              direction:direction\n                                                                             orderCount:self.orderInfoView.transHandsTextField.text.integerValue];\n}\n\n- (void)closePositionOrder {\n    if (self.selectedPosition) {\n        NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n        [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n        NSString *priceStr = self.transactionActionView.rightDataBtn.upDataString;\n        if (![priceStr isEqualToString:@\"--\"] && priceStr && [LJNumericStringUtils isValidDigitNumber:priceStr]) {\n            HXQueryPositionRsp *position = self.selectedPosition;\n            if (position) {\n                if ([self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n                    NSInteger handsTextFieldInt = self.orderInfoView.transHandsTextField.text.integerValue;\n                    NSInteger handsTotal = position.enablePosition;\n                    if (handsTotal < handsTextFieldInt) {\n                        [self.view makeToast:@\"可平仓手数不足\" duration:2 position:@\"center\"];\n                    } else {\n                        [self closeHoldPositionIfNeeded:position price:priceStr hands:self.orderInfoView.transHandsTextField.text];\n                    }\n                }\n            }\n        } else if (IsNSStringNotEmpty(self.showCode)) {\n            [self.view makeToast:@\"请输入价格\" duration:2 position:@\"center\"];\n        }\n    } else {\n        int i = 0, j = 0, k = 0;                               // 变量k用来记录当前可以选中的合约代码在数组中的index\n        NSMutableArray *array = [[NSMutableArray alloc] init]; // 存放平仓选项\n        NSArray<HXQueryPositionRsp *> *matchedPositions = [self matchedPositions];\n        NSInteger count = [matchedPositions count];\n        for (; i < count; i++) {\n            HXQueryPositionRsp *position = [matchedPositions thsObjectAtIndex:i];\n            if ([position.showCode isEqualToString:self.showCode] && !position.isHedgeStock) {\n                [array addObject:position];\n                j++;\n                k = i;\n            }\n        }\n        if (1 == j) {\n            NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n            [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n            NSString *priceStr = self.transactionActionView.rightDataBtn.upDataString;\n            if (![priceStr isEqualToString:@\"--\"] && priceStr && [LJNumericStringUtils isValidDigitNumber:priceStr]) {\n                if ([self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n                    HXQueryPositionRsp *position = [matchedPositions thsObjectAtIndex:k];\n                    if (position) {\n                        NSInteger handsTextFieldInt = self.orderInfoView.transHandsTextField.text.integerValue;\n                        NSInteger handsTotel = position.enablePosition;\n\n                        if (handsTotel < handsTextFieldInt) {\n                            [self.view makeToast:@\"可平仓手数不足\" duration:2 position:@\"center\"];\n                        } else {\n                            [self closeHoldPositionIfNeeded:position price:priceStr hands:self.orderInfoView.transHandsTextField.text];\n                        }\n                    }\n                }\n            } else if (IsNSStringNotEmpty(self.showCode)) {\n                [self.view makeToast:@\"请输入价格\" duration:2 position:@\"center\"];\n            }\n        } else if (array.count == 2) {\n            NSString *prefixStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n            NSString *logStr = [NSString stringWithFormat:@\"%@%@\", prefixStr, LOG_SHANDIAN_SUOCANG];\n      ","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"ue","deepseek-chat-lite":"ueue(), ^{","CodeQwen2.5-7B":"ueue(), ^{","copilot":"rmat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAIRU : LOG_FUI_MAIDUO];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];"}},{"prefix":"\n#import \"PositionViewController.h\"\n#import \"NewTradeView.h\"\n#import \"WTNotificationKeyDefine.h\"\n#import \"WTChiCangPGPZNoticeView.h\"\n#import <ThirdBase/Masonry.h>\n#import \"WTPGPZManager.h\"\n#import \"WTAccountDefine.h\"\n\n#import \"HXWTAccountManager.h\"\n#import \"HXUserInfo.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertView_CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewConfiguration.h>\n#import <HXCustomAlertView/HXCustomAlertView+CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewAnimation.h>\n#import \"WTPositionShareHandle.h\"\n#import \"CCChicangData.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"WTTradeAutoNoteNoticeView.h\"\n#import \"WTTradeAutoNoteUserDefaultManager.h\"\n#import \"WTTradeNoteAutoViewModel.h\"\n#import \"HXGrayRelease.h\"\n#import \"HXGrayRelease+Register.h\"\n#import \"WTNotePageInfoDefine.h\"\n#import \"WTJCOrYJQCCollectUserBehaviorManager.h\"\n#import <HXBase/NSDictionary+Safety.h>\n#import \"WTEditShaiYiShaiChooseActionModel.h\"\n#import \"WTZiChanHiddenHelper.h\"\n#import <HXModuleServiceManage/WTTradeBusinessServiceProtocol.h>\n#import <StanderTableView/MultilpleTable.h>\n\n@interface PositionViewController ()<WTChiCangPGPZNoticeViewDelegate>\n\n@property (nonatomic,weak) IBOutlet NewTradeView *tableView;\n@property (nonatomic,strong) WTChiCangPGPZNoticeView *pgpzNoticeView;//配股配债提示视图\n@property (nonatomic, strong) WTTradeAutoNoteNoticeView *noteNoticeView;\n\n@end\n\n@implementation PositionViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    if (HXGrayRelease sha","infill":"redInstance] key) {\n        <#statements#>\n    }\n    \n","suffix":"    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(gotoBuyPage) name:kWTGotoBuyGuideButtonClicked object:nil];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(wtChangeAccount) name:WT_SAMENATUREACCOUNT_EXCHANGE_SUCCESS object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(autoNoteSuccess) name:WT_TRADE_AUTO_NOTE_SUCCESS object:nil];\n\n    [_tableView setPageId:2605];\n    [_tableView onFinishInflate];\n    //配股配债功能提醒\n    [self handlePeiGuPeiZhaiAlertNotice];\n    [self creatNoteNoticeView];\n\n    [self dealGetShotScreenImage];\n}\n\n\n- (void)autoNoteSuccess {\n    [self creatNoteNoticeView];\n}\n\n/// 自动复盘完成通知\n- (void)creatNoteNoticeView {\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseTradeAutoStockLog]) {\n        return;\n    }\n    if (!_pgpzNoticeView || !_pgpzNoticeView.superview) {\n        if ([WTTradeAutoNoteUserDefaultManager judegeCurrentAccountShouldShowNotice]) {\n            [self.view addSubview:self.noteNoticeView];\n            [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                make.bottom.left.right.equalTo(self.view);\n                make.top.mas_equalTo(self.view).offset(36);\n            }];\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(LOG_PAGE_NAME_NOTE_TRADE_TAB_COMPLETE_CLICK, @\"autobiji.complete.show\") actionType:OtherAction];\n        } else {\n            [self closeNoteNoticeView];\n        }\n    }\n}\n\n- (void)closeNoteNoticeView {\n    [self.noteNoticeView removeFromSuperview];\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(self.view).offset(0);\n    }];\n}\n\n//处理配股配债功能提醒\n- (void)handlePeiGuPeiZhaiAlertNotice{\n    if ([WTPGPZManager isSupportPGPZAlert]) {\n        WTPGPZManager *manager = [WTPGPZManager sharedManager];\n        __weak typeof(self) weakSelf = self;\n        [manager checkIfNeedShowPeiGuPeiZhaiTipWithCallback:^(NSArray<WTPeiGuModel *> *pgArray, NSArray<WTPeiZhaiModel *> *pzArray) {\n            if (pgArray == nil && pzArray == nil) {\n                return;\n            }\n            if(pgArray || pzArray){\n                NSString *tip = @\"\";\n                if (pgArray.count > 0 && pzArray.count > 0) {\n                    tip = HX_LOAD_TIPS(@\"持仓股配债，配股操作教学说明公告>>\");\n                }else if (pgArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配股操作教学说明公告>>\");\n                }else if (pzArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配债操作教学说明公告>>\");\n                }else{\n                    return; //都没有时不做处理;\n                }\n                [weakSelf closeNoteNoticeView];\n                [weakSelf.view addSubview:weakSelf.pgpzNoticeView];\n                [weakSelf.pgpzNoticeView setTipText:tip];\n                CGFloat height = [WTChiCangPGPZNoticeView viewHeight];\n                [weakSelf.pgpzNoticeView mas_makeConstraints:^(MASConstraintMaker *make) {\n                    make.top.left.right.equalTo(weakSelf.view);\n                    make.height.mas_equalTo(height);\n                }];\n                [weakSelf.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                    make.bottom.left.right.equalTo(weakSelf.view);\n                    make.top.mas_equalTo(weakSelf.view).offset(height);\n                }];\n            }\n        }];\n    }\n}\n\n- (WTChiCangPGPZNoticeView *)pgpzNoticeView{\n    if (!_pgpzNoticeView) {\n        _pgpzNoticeView = [[WTChiCangPGPZNoticeView alloc] init];\n        _pgpzNoticeView.delegate = self;\n    }\n    return _pgpzNoticeView;\n}\n\n#pragma mark notice view delegate\n- (void)hidePGPZNoticeView{\n    if (_pgpzNoticeView && _pgpzNoticeView.superview) {\n        self.pgpzNoticeView.hidden = YES;\n        [self.pgpzNoticeView removeFromSuperview];\n        self.pgpzNoticeView = nil;\n    }\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(0);\n    }];\n    [self creatNoteNoticeView];\n}\n\n#pragma mark 切换账号时\n- (void)wtChangeAccount{\n    //1. 先移除上个账号的持仓提醒视图\n    [self hidePGPZNoticeView];\n    //2. 检查当前账号是否需要显示\n    [self handlePeiGuPeiZhaiAlertNotice];\n    //3. 添加复盘成功通知\n    [self creatNoteNoticeView];\n}\n\n- (void)viewWillAppear:(BOOL)animated{\n    [super viewWillAppear:animated];\n    [_tableView setPageData:[NSMutableDictionary dictionaryWithDictionary:[self getParamsOfCurrentPage]]];\n    [_tableView combinationSellHandleParams:[self getParamsOfCurrentPage]];\n    [_tableView willAppear];\n    [self handleCombinationSellPageData];\n}\n\n- (void)viewDidAppear:(BOOL)animated{\n    [super viewDidAppear:animated];\n    [_tableView didAppear];\n    [self pageLoadFinish];\n    [self endMonitor];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [_tableView willDisappear];\n    [super viewWillDisappear:animated];\n}\n\n- (void)viewDidDisappear:(BOOL)animated{\n    [_tableView didDisappear];\n    [super viewDidDisappear:animated];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)refreshPage{\n    //    [_tradeAction requestData:NO];\n    [_tableView requestData:NO];\n}\n\n- (void)setTableViewRefreshBtn:(UIButton *)btn{\n    [_tableView setFreshBtn:btn];\n}\n\n- (void)gotoBuyPage {\n    [self.hxTabbarController selectViewControllerWithIdentity:[NSString stringWithFormat:@\"%d\", PAGE_WTXIADAN_BUY_ID]];\n}\n\n\n- (void)clearFenshiData{\n    [_tableView clearFenshiData];\n}\n\n- (void)shareChiCangNew:(CGPoint)point {\n    [self.tableView longPictureShare];\n\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_CHICANG_AGU, @\"ccfx\")];\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (!account.zicanData.isAddGuoZhaiProfit) {\n        [AMUIPublicProxy showTipAutoClose:@\"正在请求当日行情数据，请稍后再试\"];\n        return;\n    }\n   \n    [[WTPositionShareHandle weakShareInstance] chiCangShareNewWithZiCanData:account.zicanData point:point];\n}\n\n\n\n#pragma mark -加仓清仓模式-\n///是否是加仓或清仓模式\n- (BOOL)isYJQCModeOrJCMode {\n    return [self.tableView isYJQCModeOrJCMode];\n}\n///去除加仓或清仓模式\n- (void)closeTabView{\n    [WTJCOrYJQCCollectUserBehaviorManager sendLogWithJCOrYJQCStateLogObj:@\"close\" type:[self isYJQCModeOrJCMode] ? WTPositionPickerViewTypeJC : WTPositionPickerViewTypeYJQC isRZRQ:NO];\n    [self.tableView closeTabView];\n}\n\n/// 是否是从组合跳转过来并在一键清仓模式下\n- (BOOL)isCombinationYJQCMode {\n    return [self.tableView combinationYJQCMode];\n}\n\n#pragma mark - 跳转持仓获取截屏相关处理\n/// 笔记晒一晒跳转页面截图相关逻辑处理\n- (void)dealGetShotScreenImage{\n    WTEditShaiYiShaiChooseActionModel *chooseAction = [[self getParamsOfCurrentPage] objectForKey:WTEditShaiYiShaiChooseAction];\n    //持仓渲染完成回调\n    WTChiCangRenderFinishBlock renderFinishBlock = [[self getParamsOfCurrentPage] objectForKey:WTChiCangRenderFinishBlockParamsKey];\n    if (([chooseAction isKindOfClass:[WTEditShaiYiShaiChooseActionModel class]] &&\n         !chooseAction.isCreateImageFinish) || renderFinishBlock) {\n        //资产显示隐藏变更事件\n        [self bindZiChanHiddenEvent];\n        \n        //记录用户设置的显示隐藏状态\n        BOOL userSetHidden = [WTZiChanHiddenHelper nowHideStateWithScene:WTZiChanHiddenSceneChiCang];\n\n        if (chooseAction) {\n            //主动修改用户资产显示隐藏状态\n            [WTZiChanHiddenHelper saveHideMoneyState:!chooseAction.isShowMoney withScene:WTZiChanHiddenSceneChiCang];\n        }\n        \n        //强制发查持仓请求\n        WTAccountInfor *accountInfo = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        accountInfo.zicanData.hasChicangSynchronised = NO;\n        [self refreshPage];\n\n        //数据获取并完成界面刷新\n        self.tableView.zijinAndChicangRequestAndRefreshFinished = ^{\n            if (chooseAction.renderFinsihBlock) {\n                chooseAction.renderFinsihBlock();\n            }\n            if (renderFinishBlock) {\n                renderFinishBlock();\n            }\n        };\n        if (chooseAction) {\n            choose","relevantFile":"","relevantFileList":[],"filePath":"PositionViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"reloadData) {\n        [self.tableView reloadData];\n    }\n    \n    [self bindAccountInfoNotice];\n    [self bindZiChanHiddenEvent];\n    [self bindCombinationSellEvent];\n    \n","deepseek-chat-lite":"re].switchForKey(GrayReleaseTradeAutoStockLog)) {","CodeQwen2.5-7B":"red].switchForKey(GrayReleaseTradeAutoStockLog) {","copilot":"redInstance] key) {\n        <#statements#>\n    }\n    \n"}},{"prefix":"\n#import \"PositionViewController.h\"\n#import \"NewTradeView.h\"\n#import \"WTNotificationKeyDefine.h\"\n#import \"WTChiCangPGPZNoticeView.h\"\n#import <ThirdBase/Masonry.h>\n#import \"WTPGPZManager.h\"\n#import \"WTAccountDefine.h\"\n\n#import \"HXWTAccountManager.h\"\n#import \"HXUserInfo.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertView_CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewConfiguration.h>\n#import <HXCustomAlertView/HXCustomAlertView+CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewAnimation.h>\n#import \"WTPositionShareHandle.h\"\n#import \"CCChicangData.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"WTTradeAutoNoteNoticeView.h\"\n#import \"WTTradeAutoNoteUserDefaultManager.h\"\n#import \"WTTradeNoteAutoViewModel.h\"\n#import \"HXGrayRelease.h\"\n#import \"HXGrayRelease+Register.h\"\n#import \"WTNotePageInfoDefine.h\"\n#import \"WTJCOrYJQCCollectUserBehaviorManager.h\"\n#import <HXBase/NSDictionary+Safety.h>\n#import \"WTEditShaiYiShaiChooseActionModel.h\"\n#import \"WTZiChanHiddenHelper.h\"\n#import <HXModuleServiceManage/WTTradeBusinessServiceProtocol.h>\n#import <StanderTableView/MultilpleTable.h>\n#import \"HXgray\"\n\n@interface PositionViewController ()<WTChiCangPGPZNoticeViewDelegate>\n\n@property (nonatomic,weak) IBOutlet NewTradeView *tableView;\n@property (nonatomic,strong) WTChiCangPGPZNoticeView *pgpzNoticeView;//配股配债提示视图\n@property (nonatomic, strong) WTTradeAutoNoteNoticeView *noteNoticeView;\n\n@end\n\n@implementation PositionViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    if ([HXGrayRelease s","infill":"haredInstance] key:GrayReleaseTradeAutoStockLog]) {\n        <#statement","suffix":"s#>\n    }\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(gotoBuyPage) name:kWTGotoBuyGuideButtonClicked object:nil];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(wtChangeAccount) name:WT_SAMENATUREACCOUNT_EXCHANGE_SUCCESS object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(autoNoteSuccess) name:WT_TRADE_AUTO_NOTE_SUCCESS object:nil];\n\n    [_tableView setPageId:2605];\n    [_tableView onFinishInflate];\n    //配股配债功能提醒\n    [self handlePeiGuPeiZhaiAlertNotice];\n    [self creatNoteNoticeView];\n\n    [self dealGetShotScreenImage];\n}\n\n\n- (void)autoNoteSuccess {\n    [self creatNoteNoticeView];\n}\n\n/// 自动复盘完成通知\n- (void)creatNoteNoticeView {\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseTradeAutoStockLog]) {\n        return;\n    }\n    if (!_pgpzNoticeView || !_pgpzNoticeView.superview) {\n        if ([WTTradeAutoNoteUserDefaultManager judegeCurrentAccountShouldShowNotice]) {\n            [self.view addSubview:self.noteNoticeView];\n            [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                make.bottom.left.right.equalTo(self.view);\n                make.top.mas_equalTo(self.view).offset(36);\n            }];\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(LOG_PAGE_NAME_NOTE_TRADE_TAB_COMPLETE_CLICK, @\"autobiji.complete.show\") actionType:OtherAction];\n        } else {\n            [self closeNoteNoticeView];\n        }\n    }\n}\n\n- (void)closeNoteNoticeView {\n    [self.noteNoticeView removeFromSuperview];\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(self.view).offset(0);\n    }];\n}\n\n//处理配股配债功能提醒\n- (void)handlePeiGuPeiZhaiAlertNotice{\n    if ([WTPGPZManager isSupportPGPZAlert]) {\n        WTPGPZManager *manager = [WTPGPZManager sharedManager];\n        __weak typeof(self) weakSelf = self;\n        [manager checkIfNeedShowPeiGuPeiZhaiTipWithCallback:^(NSArray<WTPeiGuModel *> *pgArray, NSArray<WTPeiZhaiModel *> *pzArray) {\n            if (pgArray == nil && pzArray == nil) {\n                return;\n            }\n            if(pgArray || pzArray){\n                NSString *tip = @\"\";\n                if (pgArray.count > 0 && pzArray.count > 0) {\n                    tip = HX_LOAD_TIPS(@\"持仓股配债，配股操作教学说明公告>>\");\n                }else if (pgArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配股操作教学说明公告>>\");\n                }else if (pzArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配债操作教学说明公告>>\");\n                }else{\n                    return; //都没有时不做处理;\n                }\n                [weakSelf closeNoteNoticeView];\n                [weakSelf.view addSubview:weakSelf.pgpzNoticeView];\n                [weakSelf.pgpzNoticeView setTipText:tip];\n                CGFloat height = [WTChiCangPGPZNoticeView viewHeight];\n                [weakSelf.pgpzNoticeView mas_makeConstraints:^(MASConstraintMaker *make) {\n                    make.top.left.right.equalTo(weakSelf.view);\n                    make.height.mas_equalTo(height);\n                }];\n                [weakSelf.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                    make.bottom.left.right.equalTo(weakSelf.view);\n                    make.top.mas_equalTo(weakSelf.view).offset(height);\n                }];\n            }\n        }];\n    }\n}\n\n- (WTChiCangPGPZNoticeView *)pgpzNoticeView{\n    if (!_pgpzNoticeView) {\n        _pgpzNoticeView = [[WTChiCangPGPZNoticeView alloc] init];\n        _pgpzNoticeView.delegate = self;\n    }\n    return _pgpzNoticeView;\n}\n\n#pragma mark notice view delegate\n- (void)hidePGPZNoticeView{\n    if (_pgpzNoticeView && _pgpzNoticeView.superview) {\n        self.pgpzNoticeView.hidden = YES;\n        [self.pgpzNoticeView removeFromSuperview];\n        self.pgpzNoticeView = nil;\n    }\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(0);\n    }];\n    [self creatNoteNoticeView];\n}\n\n#pragma mark 切换账号时\n- (void)wtChangeAccount{\n    //1. 先移除上个账号的持仓提醒视图\n    [self hidePGPZNoticeView];\n    //2. 检查当前账号是否需要显示\n    [self handlePeiGuPeiZhaiAlertNotice];\n    //3. 添加复盘成功通知\n    [self creatNoteNoticeView];\n}\n\n- (void)viewWillAppear:(BOOL)animated{\n    [super viewWillAppear:animated];\n    [_tableView setPageData:[NSMutableDictionary dictionaryWithDictionary:[self getParamsOfCurrentPage]]];\n    [_tableView combinationSellHandleParams:[self getParamsOfCurrentPage]];\n    [_tableView willAppear];\n    [self handleCombinationSellPageData];\n}\n\n- (void)viewDidAppear:(BOOL)animated{\n    [super viewDidAppear:animated];\n    [_tableView didAppear];\n    [self pageLoadFinish];\n    [self endMonitor];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [_tableView willDisappear];\n    [super viewWillDisappear:animated];\n}\n\n- (void)viewDidDisappear:(BOOL)animated{\n    [_tableView didDisappear];\n    [super viewDidDisappear:animated];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)refreshPage{\n    //    [_tradeAction requestData:NO];\n    [_tableView requestData:NO];\n}\n\n- (void)setTableViewRefreshBtn:(UIButton *)btn{\n    [_tableView setFreshBtn:btn];\n}\n\n- (void)gotoBuyPage {\n    [self.hxTabbarController selectViewControllerWithIdentity:[NSString stringWithFormat:@\"%d\", PAGE_WTXIADAN_BUY_ID]];\n}\n\n\n- (void)clearFenshiData{\n    [_tableView clearFenshiData];\n}\n\n- (void)shareChiCangNew:(CGPoint)point {\n    [self.tableView longPictureShare];\n\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_CHICANG_AGU, @\"ccfx\")];\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (!account.zicanData.isAddGuoZhaiProfit) {\n        [AMUIPublicProxy showTipAutoClose:@\"正在请求当日行情数据，请稍后再试\"];\n        return;\n    }\n   \n    [[WTPositionShareHandle weakShareInstance] chiCangShareNewWithZiCanData:account.zicanData point:point];\n}\n\n\n\n#pragma mark -加仓清仓模式-\n///是否是加仓或清仓模式\n- (BOOL)isYJQCModeOrJCMode {\n    return [self.tableView isYJQCModeOrJCMode];\n}\n///去除加仓或清仓模式\n- (void)closeTabView{\n    [WTJCOrYJQCCollectUserBehaviorManager sendLogWithJCOrYJQCStateLogObj:@\"close\" type:[self isYJQCModeOrJCMode] ? WTPositionPickerViewTypeJC : WTPositionPickerViewTypeYJQC isRZRQ:NO];\n    [self.tableView closeTabView];\n}\n\n/// 是否是从组合跳转过来并在一键清仓模式下\n- (BOOL)isCombinationYJQCMode {\n    return [self.tableView combinationYJQCMode];\n}\n\n#pragma mark - 跳转持仓获取截屏相关处理\n/// 笔记晒一晒跳转页面截图相关逻辑处理\n- (void)dealGetShotScreenImage{\n    WTEditShaiYiShaiChooseActionModel *chooseAction = [[self getParamsOfCurrentPage] objectForKey:WTEditShaiYiShaiChooseAction];\n    //持仓渲染完成回调\n    WTChiCangRenderFinishBlock renderFinishBlock = [[self getParamsOfCurrentPage] objectForKey:WTChiCangRenderFinishBlockParamsKey];\n    if (([chooseAction isKindOfClass:[WTEditShaiYiShaiChooseActionModel class]] &&\n         !chooseAction.isCreateImageFinish) || renderFinishBlock) {\n        //资产显示隐藏变更事件\n        [self bindZiChanHiddenEvent];\n        \n        //记录用户设置的显示隐藏状态\n        BOOL userSetHidden = [WTZiChanHiddenHelper nowHideStateWithScene:WTZiChanHiddenSceneChiCang];\n\n        if (chooseAction) {\n            //主动修改用户资产显示隐藏状态\n            [WTZiChanHiddenHelper saveHideMoneyState:!chooseAction.isShowMoney withScene:WTZiChanHiddenSceneChiCang];\n        }\n        \n        //强制发查持仓请求\n        WTAccountInfor *accountInfo = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        accountInfo.zicanData.hasChicangSynchronised = NO;\n        [self refreshPage];\n\n        //数据获取并完成界面刷新\n        self.tableView.zijinAndChicangRequestAndRefreshFinished = ^{\n            if (chooseAction.renderFinsihBlock) {\n                chooseAction.renderFinsihBlock();\n            }\n            if (renderFinishBlock) {\n                renderFinishBlock();\n            }\n        };\n        if (chooseAction) {\n","relevantFile":"","relevantFileList":[],"filePath":"PositionViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"houldShowViewController:(UIViewController *)self]){\n        return;","deepseek-chat-lite":"hared].switchForKey:GrayReleaseTradeAutoStockLog) {","CodeQwen2.5-7B":"witchForKey:GrayReleaseTradeAutoStockLog]) {","copilot":"haredInstance] key:GrayReleaseTradeAutoStockLog]) {\n        <#statement"}},{"prefix":"\n#import \"PositionViewController.h\"\n#import \"NewTradeView.h\"\n#import \"WTNotificationKeyDefine.h\"\n#import \"WTChiCangPGPZNoticeView.h\"\n#import <ThirdBase/Masonry.h>\n#import \"WTPGPZManager.h\"\n#import \"WTAccountDefine.h\"\n\n#import \"HXWTAccountManager.h\"\n#import \"HXUserInfo.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertView_CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewConfiguration.h>\n#import <HXCustomAlertView/HXCustomAlertView+CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewAnimation.h>\n#import \"WTPositionShareHandle.h\"\n#import \"CCChicangData.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"WTTradeAutoNoteNoticeView.h\"\n#import \"WTTradeAutoNoteUserDefaultManager.h\"\n#import \"WTTradeNoteAutoViewModel.h\"\n#import \"HXGrayRelease.h\"\n#import \"HXGrayRelease+Register.h\"\n#import \"WTNotePageInfoDefine.h\"\n#import \"WTJCOrYJQCCollectUserBehaviorManager.h\"\n#import <HXBase/NSDictionary+Safety.h>\n#import \"WTEditShaiYiShaiChooseActionModel.h\"\n#import \"WTZiChanHiddenHelper.h\"\n#import <HXModuleServiceManage/WTTradeBusinessServiceProtocol.h>\n#import <StanderTableView/MultilpleTable.h>\n// #import \"HXGrayrelease+","infill":"Register.h\"\n#import \"HXG\n\n@interfa","suffix":"ce PositionViewController ()<WTChiCangPGPZNoticeViewDelegate>\n\n@property (nonatomic,weak) IBOutlet NewTradeView *tableView;\n@property (nonatomic,strong) WTChiCangPGPZNoticeView *pgpzNoticeView;//配股配债提示视图\n@property (nonatomic, strong) WTTradeAutoNoteNoticeView *noteNoticeView;\n\n@end\n\n@implementation PositionViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    if ([HXGrayRelease sharedInstance] key:GrayReleaseTradeAutoStockLog]) {\n        <#statements#>\n    }\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(gotoBuyPage) name:kWTGotoBuyGuideButtonClicked object:nil];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(wtChangeAccount) name:WT_SAMENATUREACCOUNT_EXCHANGE_SUCCESS object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(autoNoteSuccess) name:WT_TRADE_AUTO_NOTE_SUCCESS object:nil];\n\n    [_tableView setPageId:2605];\n    [_tableView onFinishInflate];\n    //配股配债功能提醒\n    [self handlePeiGuPeiZhaiAlertNotice];\n    [self creatNoteNoticeView];\n\n    [self dealGetShotScreenImage];\n}\n\n\n- (void)autoNoteSuccess {\n    [self creatNoteNoticeView];\n}\n\n/// 自动复盘完成通知\n- (void)creatNoteNoticeView {\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseTradeAutoStockLog]) {\n        return;\n    }\n    if (!_pgpzNoticeView || !_pgpzNoticeView.superview) {\n        if ([WTTradeAutoNoteUserDefaultManager judegeCurrentAccountShouldShowNotice]) {\n            [self.view addSubview:self.noteNoticeView];\n            [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                make.bottom.left.right.equalTo(self.view);\n                make.top.mas_equalTo(self.view).offset(36);\n            }];\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(LOG_PAGE_NAME_NOTE_TRADE_TAB_COMPLETE_CLICK, @\"autobiji.complete.show\") actionType:OtherAction];\n        } else {\n            [self closeNoteNoticeView];\n        }\n    }\n}\n\n- (void)closeNoteNoticeView {\n    [self.noteNoticeView removeFromSuperview];\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(self.view).offset(0);\n    }];\n}\n\n//处理配股配债功能提醒\n- (void)handlePeiGuPeiZhaiAlertNotice{\n    if ([WTPGPZManager isSupportPGPZAlert]) {\n        WTPGPZManager *manager = [WTPGPZManager sharedManager];\n        __weak typeof(self) weakSelf = self;\n        [manager checkIfNeedShowPeiGuPeiZhaiTipWithCallback:^(NSArray<WTPeiGuModel *> *pgArray, NSArray<WTPeiZhaiModel *> *pzArray) {\n            if (pgArray == nil && pzArray == nil) {\n                return;\n            }\n            if(pgArray || pzArray){\n                NSString *tip = @\"\";\n                if (pgArray.count > 0 && pzArray.count > 0) {\n                    tip = HX_LOAD_TIPS(@\"持仓股配债，配股操作教学说明公告>>\");\n                }else if (pgArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配股操作教学说明公告>>\");\n                }else if (pzArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配债操作教学说明公告>>\");\n                }else{\n                    return; //都没有时不做处理;\n                }\n                [weakSelf closeNoteNoticeView];\n                [weakSelf.view addSubview:weakSelf.pgpzNoticeView];\n                [weakSelf.pgpzNoticeView setTipText:tip];\n                CGFloat height = [WTChiCangPGPZNoticeView viewHeight];\n                [weakSelf.pgpzNoticeView mas_makeConstraints:^(MASConstraintMaker *make) {\n                    make.top.left.right.equalTo(weakSelf.view);\n                    make.height.mas_equalTo(height);\n                }];\n                [weakSelf.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                    make.bottom.left.right.equalTo(weakSelf.view);\n                    make.top.mas_equalTo(weakSelf.view).offset(height);\n                }];\n            }\n        }];\n    }\n}\n\n- (WTChiCangPGPZNoticeView *)pgpzNoticeView{\n    if (!_pgpzNoticeView) {\n        _pgpzNoticeView = [[WTChiCangPGPZNoticeView alloc] init];\n        _pgpzNoticeView.delegate = self;\n    }\n    return _pgpzNoticeView;\n}\n\n#pragma mark notice view delegate\n- (void)hidePGPZNoticeView{\n    if (_pgpzNoticeView && _pgpzNoticeView.superview) {\n        self.pgpzNoticeView.hidden = YES;\n        [self.pgpzNoticeView removeFromSuperview];\n        self.pgpzNoticeView = nil;\n    }\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(0);\n    }];\n    [self creatNoteNoticeView];\n}\n\n#pragma mark 切换账号时\n- (void)wtChangeAccount{\n    //1. 先移除上个账号的持仓提醒视图\n    [self hidePGPZNoticeView];\n    //2. 检查当前账号是否需要显示\n    [self handlePeiGuPeiZhaiAlertNotice];\n    //3. 添加复盘成功通知\n    [self creatNoteNoticeView];\n}\n\n- (void)viewWillAppear:(BOOL)animated{\n    [super viewWillAppear:animated];\n    [_tableView setPageData:[NSMutableDictionary dictionaryWithDictionary:[self getParamsOfCurrentPage]]];\n    [_tableView combinationSellHandleParams:[self getParamsOfCurrentPage]];\n    [_tableView willAppear];\n    [self handleCombinationSellPageData];\n}\n\n- (void)viewDidAppear:(BOOL)animated{\n    [super viewDidAppear:animated];\n    [_tableView didAppear];\n    [self pageLoadFinish];\n    [self endMonitor];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [_tableView willDisappear];\n    [super viewWillDisappear:animated];\n}\n\n- (void)viewDidDisappear:(BOOL)animated{\n    [_tableView didDisappear];\n    [super viewDidDisappear:animated];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)refreshPage{\n    //    [_tradeAction requestData:NO];\n    [_tableView requestData:NO];\n}\n\n- (void)setTableViewRefreshBtn:(UIButton *)btn{\n    [_tableView setFreshBtn:btn];\n}\n\n- (void)gotoBuyPage {\n    [self.hxTabbarController selectViewControllerWithIdentity:[NSString stringWithFormat:@\"%d\", PAGE_WTXIADAN_BUY_ID]];\n}\n\n\n- (void)clearFenshiData{\n    [_tableView clearFenshiData];\n}\n\n- (void)shareChiCangNew:(CGPoint)point {\n    [self.tableView longPictureShare];\n\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_CHICANG_AGU, @\"ccfx\")];\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (!account.zicanData.isAddGuoZhaiProfit) {\n        [AMUIPublicProxy showTipAutoClose:@\"正在请求当日行情数据，请稍后再试\"];\n        return;\n    }\n   \n    [[WTPositionShareHandle weakShareInstance] chiCangShareNewWithZiCanData:account.zicanData point:point];\n}\n\n\n\n#pragma mark -加仓清仓模式-\n///是否是加仓或清仓模式\n- (BOOL)isYJQCModeOrJCMode {\n    return [self.tableView isYJQCModeOrJCMode];\n}\n///去除加仓或清仓模式\n- (void)closeTabView{\n    [WTJCOrYJQCCollectUserBehaviorManager sendLogWithJCOrYJQCStateLogObj:@\"close\" type:[self isYJQCModeOrJCMode] ? WTPositionPickerViewTypeJC : WTPositionPickerViewTypeYJQC isRZRQ:NO];\n    [self.tableView closeTabView];\n}\n\n/// 是否是从组合跳转过来并在一键清仓模式下\n- (BOOL)isCombinationYJQCMode {\n    return [self.tableView combinationYJQCMode];\n}\n\n#pragma mark - 跳转持仓获取截屏相关处理\n/// 笔记晒一晒跳转页面截图相关逻辑处理\n- (void)dealGetShotScreenImage{\n    WTEditShaiYiShaiChooseActionModel *chooseAction = [[self getParamsOfCurrentPage] objectForKey:WTEditShaiYiShaiChooseAction];\n    //持仓渲染完成回调\n    WTChiCangRenderFinishBlock renderFinishBlock = [[self getParamsOfCurrentPage] objectForKey:WTChiCangRenderFinishBlockParamsKey];\n    if (([chooseAction isKindOfClass:[WTEditShaiYiShaiChooseActionModel class]] &&\n         !chooseAction.isCreateImageFinish) || renderFinishBlock) {\n        //资产显示隐藏变更事件\n        [self bindZiChanHiddenEvent];\n        \n        //记录用户设置的显示隐藏状态\n        BOOL userSetHidden = [WTZiChanHiddenHelper nowHideStateWithScene:WTZiChanHiddenSceneChiCang];\n\n        if (chooseAction) {\n            //主动修改用户资产显示隐藏状态\n            [WTZiChanHiddenHelper saveHideMoneyState:!chooseAction.isShowMoney withScene:WTZiChanHiddenSceneChiCang];\n        }\n        \n        //强制发查持仓请求\n        WTAccountInfor *accountInfo = [[HXWTAccount","relevantFile":"","relevantFileList":[],"filePath":"PositionViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"Position.h\"","deepseek-chat-lite":"Register.h\"","CodeQwen2.5-7B":"Register.h\"","copilot":"Register.h\"\n#import \"HXG\n\n@interfa"}},{"prefix":"\n#import \"PositionViewController.h\"\n#import \"NewTradeView.h\"\n#import \"WTNotificationKeyDefine.h\"\n#import \"WTChiCangPGPZNoticeView.h\"\n#import <ThirdBase/Masonry.h>\n#import \"WTPGPZManager.h\"\n#import \"WTAccountDefine.h\"\n\n#import \"HXWTAccountManager.h\"\n#import \"HXUserInfo.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertView_CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewConfiguration.h>\n#import <HXCustomAlertView/HXCustomAlertView+CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewAnimation.h>\n#import \"WTPositionShareHandle.h\"\n#import \"CCChicangData.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"WTTradeAutoNoteNoticeView.h\"\n#import \"WTTradeAutoNoteUserDefaultManager.h\"\n#import \"WTTradeNoteAutoViewModel.h\"\n#import \"HXGrayRelease.h\"\n#import \"HXGrayRelease+Register.h\"\n#import \"WTNotePageInfoDefine.h\"\n#import \"WTJCOrYJQCCollectUserBehaviorManager.h\"\n#import <HXBase/NSDictionary+Safety.h>\n#import \"WTEditShaiYiShaiChooseActionModel.h\"\n#import \"WTZiChanHiddenHelper.h\"\n#import <HXModuleServiceManage/WTTradeBusinessServiceProtocol.h>\n#import <StanderTableView/MultilpleTable.h>\n#import \"HXGrayRelease+Register.h\"\n#import <WTTradeModule/WTPositionListEntry.h>\n\n@interface PositionViewController ()<WTChiCangPGPZNoticeViewDelegate>\n\n@property (nonatomic,weak) IBOutlet NewTradeView *tableView;\n@property (nonatomic,strong) WTChiCangPGPZNoticeView *pgpzNoticeView;//配股配债提示视图\n@property (nonatomic, strong) WTTradeAutoNoteNoticeView *noteNoticeView;\n@property (nonatomic, strong) WTPositionListEntry *postionEntry;\n@end\n\n@implementation PositionViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    if ([HXGrayRelease sharedInstance] switchForKey:GrayReleaseWTUnifiedPositionPage]) {\n        \n    }\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(gotoBuyPage) name:kWTGotoBuyGuideButtonClicked object:nil];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(wtChangeAccount) name:WT_SAMENATUREACCOUNT_EXCHANGE_SUCCESS object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(autoNoteSuccess) name:WT_TRADE_AUTO_NOTE_SUCCESS object:nil];\n\n    [_tableView setPageId:2605];\n    [_tableView onFinishInflate];\n    //配股配债功能提醒\n    [self handlePeiGuPeiZhaiAlertNotice];\n    [self creatNoteNoticeView];\n\n    [self dealGetShotScreenImage];\n}\n\n\n- (void)autoNoteSuccess {\n    [self creatNoteNoticeView];\n}\n\n/// 自动复盘完成通知\n- (void)creatNoteNoticeView {\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseTradeAutoStockLog]) {\n        return;\n    }\n    if (!_pgpzNoticeView || !_pgpzNoticeView.superview) {\n        if ([WTTradeAutoNoteUserDefaultManager judegeCurrentAccountShouldShowNotice]) {\n            [self.view addSubview:self.noteNoticeView];\n            [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                make.bottom.left.right.equalTo(self.view);\n                make.top.mas_equalTo(self.view).offset(36);\n            }];\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(LOG_PAGE_NAME_NOTE_TRADE_TAB_COMPLETE_CLICK, @\"autobiji.complete.show\") actionType:OtherAction];\n        } else {\n            [self closeNoteNoticeView];\n        }\n    }\n}\n\n- (void)closeNoteNoticeView {\n    [self.noteNoticeView removeFromSuperview];\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(self.view).offset(0);\n    }];\n}\n\n//处理配股配债功能提醒\n- (void)handlePeiGuPeiZhaiAlertNotice{\n    if ([WTPGPZManager isSupportPGPZAlert]) {\n        WTPGPZManager *manager = [WTPGPZManager sharedManager];\n        __weak typeof(self) weakSelf = self;\n        [manager checkIfNeedShowPeiGuPeiZhaiTipWithCallback:^(NSArray<WTPeiGuModel *> *pgArray, NSArray<WTPeiZhaiModel *> *pzArray) {\n            if (pgArray == nil && pzArray == nil) {\n                return;\n            }\n            if(pgArray || pzArray){\n                NSString *tip = @\"\";\n                if (pgArray.count > 0 && pzArray.count > 0) {\n                    tip = HX_LOAD_TIPS(@\"持仓股配债，配股操作教学说明公告>>\");\n                }else if (pgArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配股操作教学说明公告>>\");\n                }else if (pzArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配债操作教学说明公告>>\");\n                }else{\n                    return; //都没有时不做处理;\n                }\n                [weakSelf closeNoteNoticeView];\n                [weakSelf.view addSubview:weakSelf.pgpzNoticeView];\n                [weakSelf.pgpzNoticeView setTipText:tip];\n                CGFloat height = [WTChiCangPGPZNoticeView viewHeight];\n                [weakSelf.pgpzNoticeView mas_makeConstraints:^(MASConstraintMaker *make) {\n                    make.top.left.right.equalTo(weakSelf.view);\n                    make.height.mas_equalTo(height);\n                }];\n                [weakSelf.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                    make.bottom.left.right.equalTo(weakSelf.view);\n                    make.top.mas_equalTo(weakSelf.view).offset(height);\n                }];\n            }\n        }];\n    }\n}\n\n- (WTChiCangPGPZNoticeView *)pgpzNoticeView{\n    if (!_pgpzNoticeView) {\n        _pgpzNoticeView = [[WTChiCangPGPZNoticeView alloc] init];\n        _pgpzNoticeView.delegate = self;\n    }\n    return _pgpzNoticeView;\n}\n\n#pragma mark notice view delegate\n- (void)hidePGPZNoticeView{\n    if (_pgpzNoticeView && _pgpzNoticeView.superview) {\n        self.pgpzNoticeView.hidden = YES;\n        [self.pgpzNoticeView removeFromSuperview];\n        self.pgpzNoticeView = nil;\n    }\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(0);\n    }];\n    [self creatNoteNoticeView];\n}\n\n#pragma mark 切换账号时\n- (void)wtChangeAccount{\n    //1. 先移除上个账号的持仓提醒视图\n    [self hidePGPZNoticeView];\n    //2. 检查当前账号是否需要显示\n    [self handlePeiGuPeiZhaiAlertNotice];\n    //3. 添加复盘成功通知\n    [self creatNoteNoticeView];\n}\n\n- (void)viewWillAppear:(BOOL)animated{\n    [super viewWillAppear:animated];\n    [_tableView setPageData:[NSMutableDictionary dictionaryWithDictionary:[self getParamsOfCurrentPage]]];\n    [_tableView combinationSellHandleParams:[self getParamsOfCurrentPage]];\n    [_tableView willAppear];\n    [self handleCombinationSellPageData];\n}\n\n- (void)viewDidAppear:(BOOL)animated{\n    [super viewDidAppear:animated];\n    [_tableView didAppear];\n    [self pageLoadFinish];\n    [self endMonitor];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [_tableView willDisappear];\n    [super viewWillDisappear:animated];\n}\n\n- (void)viewDidDisappear:(BOOL)animated{\n    [_tableView didDisappear];\n    [super viewDidDisappear:animated];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)refreshPage{\n    //    [_tradeAction requestData:NO];\n    [_tableView requestData:NO];\n}\n\n- (void)setTableViewRefreshBtn:(UIButton *)btn{\n    [_tableView setFreshBtn:btn];\n}\n\n- (void)gotoBuyPage {\n    [self.hxTabbarController selectViewControllerWithIdentity:[NSString stringWithFormat:@\"%d\", PAGE_WTXIADAN_BUY_ID]];\n}\n\n\n- (void)clearFenshiData{\n    [_tableView clearFenshiData];\n}\n\n- (void)shareChiCangNew:(CGPoint)point {\n    [self.tableView longPictureShare];\n\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_CHICANG_AGU, @\"ccfx\")];\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (!account.zicanData.isAddGuoZhaiProfit) {\n        [AMUIPublicProxy showTipAutoClose:@\"正在请求当日行情数据，请稍后再试\"];\n        return;\n    }\n   \n    [[WTPositionShareHandle weakShareInstance] chiCa","infill":"\n- (WTPositionListEntry *)postionEntry\n\n@end\n","suffix":"","relevantFile":"","relevantFileList":[],"filePath":"PositionViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"ngNew:self.tableView.selectedIndexPath rowType:self.tableView.curRowType];","deepseek-chat-lite":"ngShareWithPoint:point];","CodeQwen2.5-7B":"ngShareWithPoint:point];","copilot":"\n- (WTPositionListEntry *)postionEntry\n\n@end\n"}},{"prefix":"\n#import \"PositionViewController.h\"\n#import \"NewTradeView.h\"\n#import \"WTNotificationKeyDefine.h\"\n#import \"WTChiCangPGPZNoticeView.h\"\n#import <ThirdBase/Masonry.h>\n#import \"WTPGPZManager.h\"\n#import \"WTAccountDefine.h\"\n\n#import \"HXWTAccountManager.h\"\n#import \"HXUserInfo.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertView_CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewConfiguration.h>\n#import <HXCustomAlertView/HXCustomAlertView+CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewAnimation.h>\n#import \"WTPositionShareHandle.h\"\n#import \"CCChicangData.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"WTTradeAutoNoteNoticeView.h\"\n#import \"WTTradeAutoNoteUserDefaultManager.h\"\n#import \"WTTradeNoteAutoViewModel.h\"\n#import \"HXGrayRelease.h\"\n#import \"HXGrayRelease+Register.h\"\n#import \"WTNotePageInfoDefine.h\"\n#import \"WTJCOrYJQCCollectUserBehaviorManager.h\"\n#import <HXBase/NSDictionary+Safety.h>\n#import \"WTEditShaiYiShaiChooseActionModel.h\"\n#import \"WTZiChanHiddenHelper.h\"\n#import <HXModuleServiceManage/WTTradeBusinessServiceProtocol.h>\n#import <StanderTableView/MultilpleTable.h>\n#import \"HXGrayRelease+Register.h\"\n#import <WTTradeModule/WTPositionListEntry.h>\n\n@interface PositionViewController ()<WTChiCangPGPZNoticeViewDelegate>\n\n@property (nonatomic,weak) IBOutlet NewTradeView *tableView;\n@property (nonatomic,strong) WTChiCangPGPZNoticeView *pgpzNoticeView;//配股配债提示视图\n@property (nonatomic, strong) WTTradeAutoNoteNoticeView *noteNoticeView;\n@property (nonatomic, strong) WTPositionListEntry *postionEntry;\n@end\n\n@implementation PositionViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    if ([HXGrayRelease sharedInstance] switchForKey:GrayReleaseWTUnifiedPositionPage]) {\n        \n    }\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(gotoBuyPage) name:kWTGotoBuyGuideButtonClicked object:nil];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(wtChangeAccount) name:WT_SAMENATUREACCOUNT_EXCHANGE_SUCCESS object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(autoNoteSuccess) name:WT_TRADE_AUTO_NOTE_SUCCESS object:nil];\n\n    [_tableView setPageId:2605];\n    [_tableView onFinishInflate];\n    //配股配债功能提醒\n    [self handlePeiGuPeiZhaiAlertNotice];\n    [self creatNoteNoticeView];\n\n    [self dealGetShotScreenImage];\n}\n\n\n- (void)autoNoteSuccess {\n    [self creatNoteNoticeView];\n}\n\n/// 自动复盘完成通知\n- (void)creatNoteNoticeView {\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseTradeAutoStockLog]) {\n        return;\n    }\n    if (!_pgpzNoticeView || !_pgpzNoticeView.superview) {\n        if ([WTTradeAutoNoteUserDefaultManager judegeCurrentAccountShouldShowNotice]) {\n            [self.view addSubview:self.noteNoticeView];\n            [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                make.bottom.left.right.equalTo(self.view);\n                make.top.mas_equalTo(self.view).offset(36);\n            }];\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(LOG_PAGE_NAME_NOTE_TRADE_TAB_COMPLETE_CLICK, @\"autobiji.complete.show\") actionType:OtherAction];\n        } else {\n            [self closeNoteNoticeView];\n        }\n    }\n}\n\n- (void)closeNoteNoticeView {\n    [self.noteNoticeView removeFromSuperview];\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(self.view).offset(0);\n    }];\n}\n\n//处理配股配债功能提醒\n- (void)handlePeiGuPeiZhaiAlertNotice{\n    if ([WTPGPZManager isSupportPGPZAlert]) {\n        WTPGPZManager *manager = [WTPGPZManager sharedManager];\n        __weak typeof(self) weakSelf = self;\n        [manager checkIfNeedShowPeiGuPeiZhaiTipWithCallback:^(NSArray<WTPeiGuModel *> *pgArray, NSArray<WTPeiZhaiModel *> *pzArray) {\n            if (pgArray == nil && pzArray == nil) {\n                return;\n            }\n            if(pgArray || pzArray){\n                NSString *tip = @\"\";\n                if (pgArray.count > 0 && pzArray.count > 0) {\n                    tip = HX_LOAD_TIPS(@\"持仓股配债，配股操作教学说明公告>>\");\n                }else if (pgArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配股操作教学说明公告>>\");\n                }else if (pzArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配债操作教学说明公告>>\");\n                }else{\n                    return; //都没有时不做处理;\n                }\n                [weakSelf closeNoteNoticeView];\n                [weakSelf.view addSubview:weakSelf.pgpzNoticeView];\n                [weakSelf.pgpzNoticeView setTipText:tip];\n                CGFloat height = [WTChiCangPGPZNoticeView viewHeight];\n                [weakSelf.pgpzNoticeView mas_makeConstraints:^(MASConstraintMaker *make) {\n                    make.top.left.right.equalTo(weakSelf.view);\n                    make.height.mas_equalTo(height);\n                }];\n                [weakSelf.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                    make.bottom.left.right.equalTo(weakSelf.view);\n                    make.top.mas_equalTo(weakSelf.view).offset(height);\n                }];\n            }\n        }];\n    }\n}\n\n- (WTChiCangPGPZNoticeView *)pgpzNoticeView{\n    if (!_pgpzNoticeView) {\n        _pgpzNoticeView = [[WTChiCangPGPZNoticeView alloc] init];\n        _pgpzNoticeView.delegate = self;\n    }\n    return _pgpzNoticeView;\n}\n\n#pragma mark notice view delegate\n- (void)hidePGPZNoticeView{\n    if (_pgpzNoticeView && _pgpzNoticeView.superview) {\n        self.pgpzNoticeView.hidden = YES;\n        [self.pgpzNoticeView removeFromSuperview];\n        self.pgpzNoticeView = nil;\n    }\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(0);\n    }];\n    [self creatNoteNoticeView];\n}\n\n#pragma mark 切换账号时\n- (void)wtChangeAccount{\n    //1. 先移除上个账号的持仓提醒视图\n    [self hidePGPZNoticeView];\n    //2. 检查当前账号是否需要显示\n    [self handlePeiGuPeiZhaiAlertNotice];\n    //3. 添加复盘成功通知\n    [self creatNoteNoticeView];\n}\n\n- (void)viewWillAppear:(BOOL)animated{\n    [super viewWillAppear:animated];\n    [_tableView setPageData:[NSMutableDictionary dictionaryWithDictionary:[self getParamsOfCurrentPage]]];\n    [_tableView combinationSellHandleParams:[self getParamsOfCurrentPage]];\n    [_tableView willAppear];\n    [self handleCombinationSellPageData];\n}\n\n- (void)viewDidAppear:(BOOL)animated{\n    [super viewDidAppear:animated];\n    [_tableView didAppear];\n    [self pageLoadFinish];\n    [self endMonitor];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [_tableView willDisappear];\n    [super viewWillDisappear:animated];\n}\n\n- (void)viewDidDisappear:(BOOL)animated{\n    [_tableView didDisappear];\n    [super viewDidDisappear:animated];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)refreshPage{\n    //    [_tradeAction requestData:NO];\n    [_tableView requestData:NO];\n}\n\n- (void)setTableViewRefreshBtn:(UIButton *)btn{\n    [_tableView setFreshBtn:btn];\n}\n\n- (void)gotoBuyPage {\n    [self.hxTabbarController selectViewControllerWithIdentity:[NSString stringWithFormat:@\"%d\", PAGE_WTXIADAN_BUY_ID]];\n}\n\n\n- (void)clearFenshiData{\n    [_tableView clearFenshiData];\n}\n\n- (void)shareChiCangNew:(CGPoint)point {\n    [self.tableView longPictureShare];\n\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_CHICANG_AGU, @\"ccfx\")];\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (!account.zicanData.isAddGuoZhaiProfit) {\n        [AMUIPublicProxy showTipAutoClose:@\"正在请求当日行情数据，请稍后再试\"];\n        return;\n    }\n   \n    [[WTPositionShareHandle weakShareInstance] chiCa","infill":" and getter\n\n- (WTPositionListEn","suffix":"try *)postionEntry\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"PositionViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"ngNew:point withEntry:(WTPositionListEn","deepseek-chat-lite":"ngShareWithPoint:point];","CodeQwen2.5-7B":"ngShareWithPoint:point];","copilot":" and getter\n\n- (WTPositionListEn"}},{"prefix":"\n#import \"PositionViewController.h\"\n#import \"NewTradeView.h\"\n#import \"WTNotificationKeyDefine.h\"\n#import \"WTChiCangPGPZNoticeView.h\"\n#import <ThirdBase/Masonry.h>\n#import \"WTPGPZManager.h\"\n#import \"WTAccountDefine.h\"\n\n#import \"HXWTAccountManager.h\"\n#import \"HXUserInfo.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertView_CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewConfiguration.h>\n#import <HXCustomAlertView/HXCustomAlertView+CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewAnimation.h>\n#import \"WTPositionShareHandle.h\"\n#import \"CCChicangData.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"WTTradeAutoNoteNoticeView.h\"\n#import \"WTTradeAutoNoteUserDefaultManager.h\"\n#import \"WTTradeNoteAutoViewModel.h\"\n#import \"HXGrayRelease.h\"\n#import \"HXGrayRelease+Register.h\"\n#import \"WTNotePageInfoDefine.h\"\n#import \"WTJCOrYJQCCollectUserBehaviorManager.h\"\n#import <HXBase/NSDictionary+Safety.h>\n#import \"WTEditShaiYiShaiChooseActionModel.h\"\n#import \"WTZiChanHiddenHelper.h\"\n#import <HXModuleServiceManage/WTTradeBusinessServiceProtocol.h>\n#import <StanderTableView/MultilpleTable.h>\n#import \"HXGrayRelease+Register.h\"\n#import <WTTradeModule/WTPositionListEntry.h>\n\n@interface PositionViewController ()<WTChiCangPGPZNoticeViewDelegate>\n\n@property (nonatomic,weak) IBOutlet NewTradeView *tableView;\n@property (nonatomic,strong) WTChiCangPGPZNoticeView *pgpzNoticeView;//配股配债提示视图\n@property (nonatomic, strong) WTTradeAutoNoteNoticeView *noteNoticeView;\n@property (nonatomic, strong) WTPositionListEntry *postionEntry;\n@end\n\n@implementation PositionViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // if ([[HXGrayRelease sharedInstance] switchForKey:GrayReleaseWTUnifiedPositionPage]) {\n    if ([\n        \n    }\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(gotoBuyPage) name:kWTGotoBuyGuideButtonClicked object:nil];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(wtChangeAccount) name:WT_SAMENATUREACCOUNT_EXCHANGE_SUCCESS object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(autoNoteSuccess) name:WT_TRADE_AUTO_NOTE_SUCCESS object:nil];\n\n    [_tableView setPageId:2605];\n    [_tableView onFinishInflate];\n    //配股配债功能提醒\n    [self handlePeiGuPeiZhaiAlertNotice];\n    [self creatNoteNoticeView];\n\n    [self dealGetShotScreenImage];\n}\n\n\n- (void)autoNoteSuccess {\n    [self creatNoteNoticeView];\n}\n\n/// 自动复盘完成通知\n- (void)creatNoteNoticeView {\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseTradeAutoStockLog]) {\n        return;\n    }\n    if (!_pgpzNoticeView || !_pgpzNoticeView.superview) {\n        if ([WTTradeAutoNoteUserDefaultManager judegeCurrentAccountShouldShowNotice]) {\n            [self.view addSubview:self.noteNoticeView];\n            [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                make.bottom.left.right.equalTo(self.view);\n                make.top.mas_equalTo(self.view).offset(36);\n            }];\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(LOG_PAGE_NAME_NOTE_TRADE_TAB_COMPLETE_CLICK, @\"autobiji.complete.show\") actionType:OtherAction];\n        } else {\n            [self closeNoteNoticeView];\n        }\n    }\n}\n\n- (void)closeNoteNoticeView {\n    [self.noteNoticeView removeFromSuperview];\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(self.view).offset(0);\n    }];\n}\n\n//处理配股配债功能提醒\n- (void)handlePeiGuPeiZhaiAlertNotice{\n    if ([WTPGPZManager isSupportPGPZAlert]) {\n        WTPGPZManager *manager = [WTPGPZManager sharedManager];\n        __weak typeof(self) weakSelf = self;\n        [manager checkIfNeedShowPeiGuPeiZhaiTipWithCallback:^(NSArray<WTPeiGuModel *> *pgArray, NSArray<WTPeiZhaiModel *> *pzArray) {\n            if (pgArray == nil && pzArray == nil) {\n                return;\n            }\n            if(pgArray || pzArray){\n                NSString *tip = @\"\";\n                if (pgArray.count > 0 && pzArray.count > 0) {\n                    tip = HX_LOAD_TIPS(@\"持仓股配债，配股操作教学说明公告>>\");\n                }else if (pgArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配股操作教学说明公告>>\");\n                }else if (pzArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配债操作教学说明公告>>\");\n                }else{\n                    return; //都没有时不做处理;\n                }\n                [weakSelf closeNoteNoticeView];\n                [weakSelf.view addSubview:weakSelf.pgpzNoticeView];\n                [weakSelf.pgpzNoticeView setTipText:tip];\n                CGFloat height = [WTChiCangPGPZNoticeView viewHeight];\n                [weakSelf.pgpzNoticeView mas_makeConstraints:^(MASConstraintMaker *make) {\n                    make.top.left.right.equalTo(weakSelf.view);\n                    make.height.mas_equalTo(height);\n                }];\n                [weakSelf.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                    make.bottom.left.right.equalTo(weakSelf.view);\n                    make.top.mas_equalTo(weakSelf.view).offset(height);\n                }];\n            }\n        }];\n    }\n}\n\n- (WTChiCangPGPZNoticeView *)pgpzNoticeView{\n    if (!_pgpzNoticeView) {\n        _pgpzNoticeView = [[WTChiCangPGPZNoticeView alloc] init];\n        _pgpzNoticeView.delegate = self;\n    }\n    return _pgpzNoticeView;\n}\n\n#pragma mark notice view delegate\n- (void)hidePGPZNoticeView{\n    if (_pgpzNoticeView && _pgpzNoticeView.superview) {\n        self.pgpzNoticeView.hidden = YES;\n        [self.pgpzNoticeView removeFromSuperview];\n        self.pgpzNoticeView = nil;\n    }\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(0);\n    }];\n    [self creatNoteNoticeView];\n}\n\n#pragma mark 切换账号时\n- (void)wtChangeAccount{\n    //1. 先移除上个账号的持仓提醒视图\n    [self hidePGPZNoticeView];\n    //2. 检查当前账号是否需要显示\n    [self handlePeiGuPeiZhaiAlertNotice];\n    //3. 添加复盘成功通知\n    [self creatNoteNoticeView];\n}\n\n- (void)viewWillAppear:(BOOL)animated{\n    [super viewWillAppear:animated];\n    [_tableView setPageData:[NSMutableDictionary dictionaryWithDictionary:[self getParamsOfCurrentPage]]];\n    [_tableView combinationSellHandleParams:[self getParamsOfCurrentPage]];\n    [_tableView willAppear];\n    [self handleCombinationSellPageData];\n}\n\n- (void)viewDidAppear:(BOOL)animated{\n    [super viewDidAppear:animated];\n    [_tableView didAppear];\n    [self pageLoadFinish];\n    [self endMonitor];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [_tableView willDisappear];\n    [super viewWillDisappear:animated];\n}\n\n- (void)viewDidDisappear:(BOOL)animated{\n    [_tableView didDisappear];\n    [super viewDidDisappear:animated];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)refreshPage{\n    //    [_tradeAction requestData:NO];\n    [_tableView requestData:NO];\n}\n\n- (void)setTableViewRefreshBtn:(UIButton *)btn{\n    [_tableView setFreshBtn:btn];\n}\n\n- (void)gotoBuyPage {\n    [self.hxTabbarController selectViewControllerWithIdentity:[NSString stringWithFormat:@\"%d\", PAGE_WTXIADAN_BUY_ID]];\n}\n\n\n- (void)clearFenshiData{\n    [_tableView clearFenshiData];\n}\n\n- (void)shareChiCangNew:(CGPoint)point {\n    [self.tableView longPictureShare];\n\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_CHICANG_AGU, @\"ccfx\")];\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (!account.zicanData.isAddGuoZhaiProfit) {\n        [AMUIPublicProxy showTipAutoClose:@\"正在请求当日行情数据，请稍后再试\"];\n        return;\n    }\n   \n    [[WTPositionShareHandle weakShare","infill":"*)postionEntry {\n    if (!_postionEntry) {\n        _postionEntry = [[WTPositionListEntry alloc] init];\n    }\n    return _postionEntry;\n}\n\n@end\n","suffix":"","relevantFile":"","relevantFileList":[],"filePath":"PositionViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"Instance] showShareViewWithPoint:point];","deepseek-chat-lite":"Handle] sharePositionWithPoint:point];","CodeQwen2.5-7B":"Handle] shareChiCangWithPoint:point];","copilot":"*)postionEntry {\n    if (!_postionEntry) {\n        _postionEntry = [[WTPositionListEntry alloc] init];\n    }\n    return _postionEntry;\n}\n\n@end\n"}},{"prefix":"\n#import \"PositionViewController.h\"\n#import \"NewTradeView.h\"\n#import \"WTNotificationKeyDefine.h\"\n#import \"WTChiCangPGPZNoticeView.h\"\n#import <ThirdBase/Masonry.h>\n#import \"WTPGPZManager.h\"\n#import \"WTAccountDefine.h\"\n\n#import \"HXWTAccountManager.h\"\n#import \"HXUserInfo.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertView_CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewConfiguration.h>\n#import <HXCustomAlertView/HXCustomAlertView+CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewAnimation.h>\n#import \"WTPositionShareHandle.h\"\n#import \"CCChicangData.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"WTTradeAutoNoteNoticeView.h\"\n#import \"WTTradeAutoNoteUserDefaultManager.h\"\n#import \"WTTradeNoteAutoViewModel.h\"\n#import \"HXGrayRelease.h\"\n#import \"HXGrayRelease+Register.h\"\n#import \"WTNotePageInfoDefine.h\"\n#import \"WTJCOrYJQCCollectUserBehaviorManager.h\"\n#import <HXBase/NSDictionary+Safety.h>\n#import \"WTEditShaiYiShaiChooseActionModel.h\"\n#import \"WTZiChanHiddenHelper.h\"\n#import <HXModuleServiceManage/WTTradeBusinessServiceProtocol.h>\n#import <StanderTableView/MultilpleTable.h>\n#import <WTTradeModule/WTPositionListEntry.h>\n\n@interface PositionViewController ()<WTChiCangPGPZNoticeViewDelegate>\n\n@property (nonatomic,weak) IBOutlet NewTradeView *tableView;\n@property (nonatomic,strong) WTChiCangPGPZNoticeView *pgpzNoticeView;//配股配债提示视图\n@property (nonatomic, strong) WTTradeAutoNoteNoticeView *noteNoticeView;\n@property (nonatomic, strong) WTPositionListEntry *postionEntry;\n@end\n\n@implementation PositionViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    if ([WTPositionListEntry isPositionListRefactorOpen]) {\n        self","infill":".postionEntry.view.frame = self.view.bounds;\n        sel","suffix":"f.view = self.postionEntry.view;\n        return;\n    }\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(gotoBuyPage) name:kWTGotoBuyGuideButtonClicked object:nil];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(wtChangeAccount) name:WT_SAMENATUREACCOUNT_EXCHANGE_SUCCESS object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(autoNoteSuccess) name:WT_TRADE_AUTO_NOTE_SUCCESS object:nil];\n\n    [_tableView setPageId:2605];\n    [_tableView onFinishInflate];\n    //配股配债功能提醒\n    [self handlePeiGuPeiZhaiAlertNotice];\n    [self creatNoteNoticeView];\n\n    [self dealGetShotScreenImage];\n}\n\n\n- (void)autoNoteSuccess {\n    [self creatNoteNoticeView];\n}\n\n/// 自动复盘完成通知\n- (void)creatNoteNoticeView {\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseTradeAutoStockLog]) {\n        return;\n    }\n    if (!_pgpzNoticeView || !_pgpzNoticeView.superview) {\n        if ([WTTradeAutoNoteUserDefaultManager judegeCurrentAccountShouldShowNotice]) {\n            [self.view addSubview:self.noteNoticeView];\n            [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                make.bottom.left.right.equalTo(self.view);\n                make.top.mas_equalTo(self.view).offset(36);\n            }];\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(LOG_PAGE_NAME_NOTE_TRADE_TAB_COMPLETE_CLICK, @\"autobiji.complete.show\") actionType:OtherAction];\n        } else {\n            [self closeNoteNoticeView];\n        }\n    }\n}\n\n- (void)closeNoteNoticeView {\n    [self.noteNoticeView removeFromSuperview];\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(self.view).offset(0);\n    }];\n}\n\n//处理配股配债功能提醒\n- (void)handlePeiGuPeiZhaiAlertNotice{\n    if ([WTPGPZManager isSupportPGPZAlert]) {\n        WTPGPZManager *manager = [WTPGPZManager sharedManager];\n        __weak typeof(self) weakSelf = self;\n        [manager checkIfNeedShowPeiGuPeiZhaiTipWithCallback:^(NSArray<WTPeiGuModel *> *pgArray, NSArray<WTPeiZhaiModel *> *pzArray) {\n            if (pgArray == nil && pzArray == nil) {\n                return;\n            }\n            if(pgArray || pzArray){\n                NSString *tip = @\"\";\n                if (pgArray.count > 0 && pzArray.count > 0) {\n                    tip = HX_LOAD_TIPS(@\"持仓股配债，配股操作教学说明公告>>\");\n                }else if (pgArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配股操作教学说明公告>>\");\n                }else if (pzArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配债操作教学说明公告>>\");\n                }else{\n                    return; //都没有时不做处理;\n                }\n                [weakSelf closeNoteNoticeView];\n                [weakSelf.view addSubview:weakSelf.pgpzNoticeView];\n                [weakSelf.pgpzNoticeView setTipText:tip];\n                CGFloat height = [WTChiCangPGPZNoticeView viewHeight];\n                [weakSelf.pgpzNoticeView mas_makeConstraints:^(MASConstraintMaker *make) {\n                    make.top.left.right.equalTo(weakSelf.view);\n                    make.height.mas_equalTo(height);\n                }];\n                [weakSelf.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                    make.bottom.left.right.equalTo(weakSelf.view);\n                    make.top.mas_equalTo(weakSelf.view).offset(height);\n                }];\n            }\n        }];\n    }\n}\n\n- (WTChiCangPGPZNoticeView *)pgpzNoticeView{\n    if (!_pgpzNoticeView) {\n        _pgpzNoticeView = [[WTChiCangPGPZNoticeView alloc] init];\n        _pgpzNoticeView.delegate = self;\n    }\n    return _pgpzNoticeView;\n}\n\n#pragma mark notice view delegate\n- (void)hidePGPZNoticeView{\n    if (_pgpzNoticeView && _pgpzNoticeView.superview) {\n        self.pgpzNoticeView.hidden = YES;\n        [self.pgpzNoticeView removeFromSuperview];\n        self.pgpzNoticeView = nil;\n    }\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(0);\n    }];\n    [self creatNoteNoticeView];\n}\n\n#pragma mark 切换账号时\n- (void)wtChangeAccount{\n    //1. 先移除上个账号的持仓提醒视图\n    [self hidePGPZNoticeView];\n    //2. 检查当前账号是否需要显示\n    [self handlePeiGuPeiZhaiAlertNotice];\n    //3. 添加复盘成功通知\n    [self creatNoteNoticeView];\n}\n\n- (void)viewWillAppear:(BOOL)animated{\n    [super viewWillAppear:animated];\n    [_tableView setPageData:[NSMutableDictionary dictionaryWithDictionary:[self getParamsOfCurrentPage]]];\n    [_tableView combinationSellHandleParams:[self getParamsOfCurrentPage]];\n    [_tableView willAppear];\n    [self handleCombinationSellPageData];\n}\n\n- (void)viewDidAppear:(BOOL)animated{\n    [super viewDidAppear:animated];\n    [_tableView didAppear];\n    [self pageLoadFinish];\n    [self endMonitor];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [_tableView willDisappear];\n    [super viewWillDisappear:animated];\n}\n\n- (void)viewDidDisappear:(BOOL)animated{\n    [_tableView didDisappear];\n    [super viewDidDisappear:animated];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)refreshPage{\n    //    [_tradeAction requestData:NO];\n    [_tableView requestData:NO];\n}\n\n- (void)setTableViewRefreshBtn:(UIButton *)btn{\n    [_tableView setFreshBtn:btn];\n}\n\n- (void)gotoBuyPage {\n    [self.hxTabbarController selectViewControllerWithIdentity:[NSString stringWithFormat:@\"%d\", PAGE_WTXIADAN_BUY_ID]];\n}\n\n\n- (void)clearFenshiData{\n    [_tableView clearFenshiData];\n}\n\n- (void)shareChiCangNew:(CGPoint)point {\n    [self.tableView longPictureShare];\n\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_CHICANG_AGU, @\"ccfx\")];\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (!account.zicanData.isAddGuoZhaiProfit) {\n        [AMUIPublicProxy showTipAutoClose:@\"正在请求当日行情数据，请稍后再试\"];\n        return;\n    }\n   \n    [[WTPositionShareHandle weakShareInstance] chiCangShareNewWithZiCanData:account.zicanData point:point];\n}\n\n\n\n#pragma mark -加仓清仓模式-\n///是否是加仓或清仓模式\n- (BOOL)isYJQCModeOrJCMode {\n    return [self.tableView isYJQCModeOrJCMode];\n}\n///去除加仓或清仓模式\n- (void)closeTabView{\n    [WTJCOrYJQCCollectUserBehaviorManager sendLogWithJCOrYJQCStateLogObj:@\"close\" type:[self isYJQCModeOrJCMode] ? WTPositionPickerViewTypeJC : WTPositionPickerViewTypeYJQC isRZRQ:NO];\n    [self.tableView closeTabView];\n}\n\n/// 是否是从组合跳转过来并在一键清仓模式下\n- (BOOL)isCombinationYJQCMode {\n    return [self.tableView combinationYJQCMode];\n}\n\n#pragma mark - 跳转持仓获取截屏相关处理\n/// 笔记晒一晒跳转页面截图相关逻辑处理\n- (void)dealGetShotScreenImage{\n    WTEditShaiYiShaiChooseActionModel *chooseAction = [[self getParamsOfCurrentPage] objectForKey:WTEditShaiYiShaiChooseAction];\n    //持仓渲染完成回调\n    WTChiCangRenderFinishBlock renderFinishBlock = [[self getParamsOfCurrentPage] objectForKey:WTChiCangRenderFinishBlockParamsKey];\n    if (([chooseAction isKindOfClass:[WTEditShaiYiShaiChooseActionModel class]] &&\n         !chooseAction.isCreateImageFinish) || renderFinishBlock) {\n        //资产显示隐藏变更事件\n        [self bindZiChanHiddenEvent];\n        \n        //记录用户设置的显示隐藏状态\n        BOOL userSetHidden = [WTZiChanHiddenHelper nowHideStateWithScene:WTZiChanHiddenSceneChiCang];\n\n        if (chooseAction) {\n            //主动修改用户资产显示隐藏状态\n            [WTZiChanHiddenHelper saveHideMoneyState:!chooseAction.isShowMoney withScene:WTZiChanHiddenSceneChiCang];\n        }\n        \n        //强制发查持仓请求\n        WTAccountInfor *accountInfo = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        accountInfo.zicanData.hasChicangSynchronised = NO;\n        [self refreshPage];\n\n        //数据获取并完成界面刷新\n        self.tableView.zijinAndChicangRequestAndRefreshFinished = ^{\n            if (chooseAction.renderFinsihBlock) {\n                chooseAction.renderFinsihBlock();\n            }\n            if (renderFinishBlock) {\n                renderFinishBlock();\n          ","relevantFile":"","relevantFileList":[],"filePath":"PositionViewController.mm","template":"objective-cpp","multiRes":{"hipilot":".postionEntry = [[WTPositionListEntry alloc] initWithParams:[self getParamsOfCurrentPage]];\n        sel","deepseek-chat-lite":".postionEntry = [[WTPositionListEntry alloc] init];","CodeQwen2.5-7B":".postionEntry = [[WTPositionListEntry alloc] init];","copilot":".postionEntry.view.frame = self.view.bounds;\n        sel"}},{"prefix":"    \n    AM_WT_LOGIN_TYPE loginType = (AM_WT_LOGIN_TYPE)[[autoConnectInfoArr objectAtIndex:0] intValue];\n    \n    NSString *yyb = nil;\n    NSString *accountType = nil;\n    NSString *account = nil;\n    NSString *tradePwd = nil;\n    NSString *txPwd = nil;\n    NSString *dyPwd = nil;\n    NSString *yybInfo = nil;\n    NSString *rzrqAccount = nil;\n    NSString *rzrqPwd = nil;\n    \n    //模拟炒股\n    if (!bRealOrSimu &&loginType == AM_WT_LOGIN_MNCG && [autoConnectInfoArr count] >=9) {\n        yyb = [autoConnectInfoArr objectAtIndex:1];\n        accountType = [autoConnectInfoArr objectAtIndex:2];\n        account = [autoConnectInfoArr objectAtIndex:3];\n        tradePwd = [autoConnectInfoArr objectAtIndex:4];\n        txPwd = [autoConnectInfoArr objectAtIndex:5];\n        yybInfo = [autoConnectInfoArr objectAtIndex:7];\n        NSString *cgdsid = [autoConnectInfoArr objectAtIndex:8];\n        if(cgdsid != nil)\n        {\n            // 设置正在登录中变量\n            AM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_WEITUO_ISAUTOCONNECTING, (EQCHAR*)[@\"YES\" UTF8String]);\n            //[HXWTAccountManager sharedInstance].curAccount = account;\n            [[HXWTAccountManager sharedInstance] setAccountInforLogining:infor];\n            \n            [WtLoginUtil WtAutoMncgLogin:yyb\n                             accountType:accountType\n                                 account:account\n                               tradePswd:tradePwd\n                                  txPswd:txPwd\n                                  dynPwd:nil\n                                 yybInfo:yybInfo\n                                  cgdsid:cgdsid];\n            return YES;\n        }\n    }\n    else if(bRealOrSimu)//实盘炒股\n    {\n        NSString *tokenStr;\n        NSString *timestampStr;\n        if (infor.token.fingerPrintToken.mediumPwd.length > 0 &&\n            infor.token.fingerPrintToken.timestamp.length > 0) {\n            tokenStr = infor.token.fingerPrintToken.mediumPwd;\n            timestampStr = infor.token.fingerPrintToken.timestamp;\n        } else if (infor.token.guardWordToken.mediumPwd.length > 0 &&\n                   infor.token.guardWordToken.timestamp.length > 0){\n            tokenStr = infor.token.guardWordToken.mediumPwd;\n            timestampStr = infor.token.guardWordToken.timestamp;\n        } else if (infor.token.accountPasswordToken.mediumPwd.length > 0 &&\n                   infor.token.accountPasswordToken.timestamp.length > 0) {\n            tokenStr = infor.token.accountPasswordToken.mediumPwd;\n            timestampStr = infor.token.accountPasswordToken.timestamp;\n        }\n        \n        //判断是否需要token登录\n        if (tokenStr && timestampStr) {\n            // 设置正在登录中变量\n            AM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_WEITUO_ISAUTOCONNECTING, (EQCHAR*)[@\"YES\" UTF8String]);\n            [[HXWTAccountManager sharedInstance] setAccountInforLogining:infor];\n            \n            [WtLoginUtil stopAndStartWtLoginTimer];\n            [self wtloginWithToken:tokenStr timestamp:timestampStr instantid:instanceid accountNature:infor.accnature qsId:infor.yybId loginBehaviorObj:nil account:infor.account sence:WTLoginSenceAutoLogin];\n            // 执行静默登录\n            [[WTPassiveLoginManager sharedInstance] processAutoWtPassiveLogin];\n            return YES;\n        }\n        \n        // 保存了正确的委托交易自动登录信息\n        if ([autoConnectInfoArr count] >= 8)\n        {\n            yyb = [autoConnectInfoArr objectAtIndex:1];\n            accountType = [autoConnectInfoArr objectAtIndex:2];\n            account = [autoConnectInfoArr objectAtIndex:3];\n            tradePwd = [autoConnectInfoArr objectAtIndex:4];\n            txPwd = [autoConnectInfoArr objectAtIndex:5];\n            dyPwd = [autoConnectInfoArr objectAtIndex:6];\n            yybInfo = [autoConnectInfoArr objectAtIndex:7];\n            if ([txPwd isEqualToString:@\"(null)\"])//避免没有通讯秘密的用户给它填(null)，jira1836\n            {\n                txPwd = nil;\n            }\n            \n            \n            \n            //融资融券二次登陆自动登录\n            if (infor.natureType == HXWTAccountNatureTypeRZRQSecond) {\n                if ([autoConnectInfoArr count] >= 10) {\n                    rzrqAccount = [autoConnectInfoArr objectAtIndex:8];\n                    rzrqPwd = [autoConnectInfoArr objectAtIndex:9];\n                    \n                    if (rzrqAccount.length == 0 || rzrqPwd.length == 0) {\n                        WTAMLogError(WT_LOG_MODULE_LOGIN, WT_LOG_KEYWORDS_LOGIN_AUTO, @\"信息异常,rzrqAccount=%@,rzrqPwd.length=%ld\",rzrqAccount,(long)rzrqPwd.length);\n                        return NO;\n                    }\n                    \n                } else {\n                    WTAMLogError(WT_LOG_MODULE_LOGIN, WT_LOG_KEYWORDS_LOGIN_AUTO, @\"信息异常,autoConnectInfoArr.count=%ld\",(long)[autoConnectInfoArr count]);\n                    return NO;\n                }\n            }\n            \n            // 如果没有动态口令，则自动登录\n            if ((loginType == AM_WT_LOGIN_DTPWD || loginType == AM_WT_LOGIN_TX_AND_DT)\n                && ![dyPwd isEqualToString:@\"\"] && ![dyPwd isEqualToString:@\"(null)\"]) {\n                WTAMLogError(WT_LOG_MODULE_LOGIN, WT_LOG_KEYWORDS_LOGIN_AUTO, @\"缺失动态口令\");\n                return NO;\n            }\n            else\n            {\n                // 设置正在登录中变量\n                AM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_WEITUO_ISAUTOCONNECTING, (EQCHAR*)[@\"YES\" UTF8String]);\n                //[HXWTAccountManager sharedInstance].curAccount = account;\n                [[HXWTAccountManager sharedInstance] setAccountInforLogining:infor];\n                \n                [WtLoginUtil WtAutoLogin:yyb\n                             accountType:accountType\n                                 account:account\n                               tradePswd:tradePwd\n                                  txPswd:txPwd\n                                  dynPwd:nil\n                                 yybInfo:yybInfo\n                             rzrqAccount:rzrqAccount\n                                 rzrqPwd:rzrqPwd\n                           accountNature:infor.accnature\n                              instanceId:instanceid\n                               bSimuRzrq:infor.bSimuRzrq\n                        loginBehaviorObj:nil\n                                   sence:WTLoginSenceAutoLogin];\n                // 执行静默登录\n                [[WTPassiveLoginManager sharedInstance] processAutoWtPassiveLogin];\n                return YES;\n            }\n        }\n        \n        if (infor.natureType == HXWTAccountNatureTypeRZRQSecond && infor.rzrqSecondLoginAccount && infor.rzrqSecondLoginAccount.length > 0 && infor.rzrqSecondLoginPassword && infor.rzrqSecondLoginPassword.length > 0) {\n            //查看对应的普通账号是否存在\n            WTAccountInfor *normalAccount = [[HXWTAccountManager sharedInstance] accountInfoWithAccount:infor.account qsId:infor.yybId accnature:WT_LOGIN_NORMAL_NATURE];\n            \n            NSString *tokenStr;\n            NSString *timestampStr;\n            if (normalAccount.token.fingerPrintToken.mediumPwd.length > 0 &&\n                normalAccount.token.fingerPrintToken.timestamp.length > 0) {\n                tokenStr = normalAccount.token.fingerPrintToken.mediumPwd;\n                timestampStr = normalAccount.token.fingerPrintToken.timestamp;\n            } else {\n                tokenStr = normalAccount.token.guardWordToken.mediumPwd;\n                timestampStr = normalAccount.token.guardWordToken.timestamp;\n            }\n            \n            if (tokenStr.length > 1) {\n                AM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_WEITUO_ISAUTOCONNECTING, (EQCHAR*)[@\"YES\" UTF8String]);\n                \n                [[HXWTAccountManager sharedInstance] setAccountInforLogining:normalAccount];\n                [WtLoginUtil stopAndStartWtLoginTimer];\n                \n                int instanceId = rzrqInstanceid;\n                [WtLoginUtil wtloginWithToken:tokenStr timestamp:timestampStr instantid:instanceId accountNature:normalAccount.accnature qsId:normalAccount.yybId login","infill":"nfo *accountInfo = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    WTAccount","suffix":"I\n    \n}\n\n+ (BOOL) isGoingtoPropertyDetail\n{\n    NSString *curUserIdNs = AM_UI_Public_Proxy::GetUserId();\n    NSArray * accounts = [CCChicangData allTradeAccountsForUser:curUserIdNs];\n    NSArray * avaluableAccounts = [CCAccountsModal getAllAvailableAccountsWithUserId:curUserIdNs];\n    long int avaluableAccNum = [avaluableAccounts count];\n    if ([IFundAccountIDObtain obtainFundAccID]) {\n        avaluableAccNum++;\n    }\n    if([accounts count] == 0 && avaluableAccNum == 1)\n        return YES;\n    else\n        return NO;\n}\n\n+ (void)jumpToWtLoginView\n{\n    [[NSNotificationCenter defaultCenter] postNotificationName:WT_LOGIN_FIRST object:nil];\n    AM_UI_Public_Proxy::GogoPageWithId(PAGE_WTLOGIN_ID, nil);\n}\n\n+ (void)switchToNormalAccountTab\n{\n    TabBarControllerEx * tabController = ((AMUITabFm*)[AMUIFrameWork shareingUIFramework]).mainTabBar;\n    NavigationControllEx * jiaoyiNav = (NavigationControllEx *)[tabController.viewControllers objectAtIndex:[AMUIPublicProxy tradeIndexInTabbarVC]];\n    \n    [jiaoyiNav popToRootViewControllerAnimated:NO];\n    [[NSNotificationCenter defaultCenter]postNotificationName:CC_LOGINOUT_MONIDASAI object:nil];\n}\n\n+ (void)switchToNormalAccountTabIfNeeded\n{\n    HXLoginAccountType currentLoginType = [HXAccountTypeSwitchManager sharedInstance].currentLoginType;\n    if(currentLoginType != HXLoginAccountTypeNormal && currentLoginType != HXLoginAccountNone)\n    {//从已登录的美股账号或模拟炒股账号切换过来的，需要切换交易页面到A股的tab\n        \n        [WtLoginUtil switchToNormalAccountTab];\n    }\n}\n\n+ (void)WtLoginTimerOutTips {\n    WTAMLogError(WT_LOG_MODULE_LOGIN, WT_LOG_KEYWORDS_LOGIN_AUTO, @\"自动登录委托超时\");\n    NSString *targetZjzh = [HXWTAccountManager sharedInstance].targetZjzh;\n    if(AM_UI_Public_Proxy::GetCurSelectedTabIndex() == [AMUIPublicProxy tradeIndexInTabbarVC] && targetZjzh == nil) // 交易tabbar\n    {\n        AM_UI_Public_Proxy::ShowTipAutoCloseNsAtHeight(@\"自动登录委托超时\",150);\n        [[NSNotificationCenter defaultCenter] postNotificationName:WT_AUTOLOGIN_TIMEOUT object:nil];\n    }\n    AM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_WEITUO_ISAUTOCONNECTING, (EQCHAR*)[@\"NO\" UTF8String]);\n    [WtLoginUtil stopWtLoginTimer];\n    if (!WTLoginManager.loginUniteGray) {\n        [[WTPassiveLoginManager sharedInstance] processPassiveLoginAfterAutoLogin:[[HXWTAccountManager sharedInstance] getCurAccountInfor]];\n    }\n}\n\n+ (BOOL)didInValidTime:(WTAccountInfor*)acctInfo\n{\n    double nowTime = [[[InternetTimeTool sharedInstance] getInternetTime] timeIntervalSince1970];\n    NSString *strLastTime =  acctInfo.lastLoginTime;\n    double lastConnectTime = [strLastTime doubleValue];\n    \n    // 重置时间，使得断网重连或是切换服务器也会做委托自动登录\n    acctInfo.lastLoginTime = @\"-1\";\n    \n    bool reconnectValid;\n    if (lastConnectTime < 0) {\n        reconnectValid = TRUE;\n    } else {\n        NSString *userid = [HXUserInfo getUserId];\n        BindAccountPWDManager *bindManager = [BindAccountPWDManager initializeWithUserid:userid];\n        BOOL isTokenLogin = [bindManager isBindAccount:acctInfo];\n        NSInteger validTime = [[TradeToolKeepOnlineManager sharedInstance] getTimeSetIntegerIsTokenLogin:isTokenLogin];\n        reconnectValid = (nowTime - lastConnectTime) > validTime ? FALSE : TRUE;\n    }\n    return reconnectValid;\n}\n\n+ (BOOL)validFromLastLoginTime:(NSTimeInterval)lastLoginTime isTokenLogin:(BOOL)isTokenLogin\n{\n    NSTimeInterval nowTime = [[[InternetTimeTool sharedInstance] getInternetTime] timeIntervalSince1970];\n  \n    //用户设置的有效时间\n    NSInteger validTime = [[TradeToolKeepOnlineManager sharedInstance] getTimeSetIntegerIsTokenLogin:isTokenLogin];\n\n    return ((nowTime - lastLoginTime) <= validTime);\n}\n\n+ (void)dealAutoLoginPasswordError:(BOOL)tip account:(WTAccountInfor *)account {\n    [WtLoginUtil stopWtLoginTimer];\n    //SCJYIIP5571断线重连异常时，退出登录账户,修复account取不到的问题\n    WTAccountInfor* wtAccount = account;\n    if (!wtAccount) {\n        wtAccount = [[HXWTAccountManager sharedInstance] getAccountInforLogining];\n    }\n    BOOL inTradeAguTab = [[HXAccountTypeSwitchManager sharedInstance] isInTradeTab] && [TradeLoginTimeTip tradeContainerTabIsInAGu];\n    [[self class] logoutAccount:wtAccount gotoMainView:inTradeAguTab];\n    //SCJYIIP5571断线重连异常时，退出到登录列表时，增加提示\n    if (tip && ![WTDialogInterceptManager interceptWTLoginDialogWithContent:@\"登录失败，请重新登录\"]) {\n        HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithFeedBackItemWithTitle:@\"提示\" message:@\"登录失败，请重新登录\" delegate:nil otherButtonTitles:@[@\"好的\"] clickHandler:nil];\n        [alertView show];\n    }\n    if (!WTLoginManager.loginUniteGray) {\n        //JIRA-20307 登录失败，清除委托网关和委托主站的保存信息\n        if(wtAccount) {\n            [[HXWTLoginUserInfoManager sharedInstance] removeInvalidInfoWithAccount:wtAccount.account brokerId:wtAccount.yybId];\n        }\n        [[WTPassiveLoginManager sharedInstance] processPassiveLoginAfterAutoLogin:wtAccount];\n    }\n}\n\n+ (WTLoginEnvironmentState)checkLoginNetworkCondition:(NSString *)qsid {\n    //非直连，判断行情连接状态\n    if (![HXWTModuleAirTrack isSupportWTModuleSDKWithQsid:qsid]) {\n        return [AMMiddlePublicProxy IsQuotaConnected] ? WTLoginEnvironmentStateReady: WTLoginEnvironmentStateNotDirectAndQuotaDisConnected;\n    }\n    //直连未启动\n    if (![HXWTModuleProxy hasWTModuleRegister]) {\n        return WTLoginEnvironmentStateDirectNotRegister;\n    }\n    return [AMMiddlePublicProxy isHasNetWork] ? WTLoginEnvironmentStateReady : WTLoginEnvironmentStateDirectDecoupledNoNetwork;\n}\n\n+ (BOOL)dealWTPushWithPushDic:(NSDictionary *)pushDic {\n    NSDictionary *userInfoDic = [pushDic thsDictionaryForKey:@\"UserInfo\"];\n    if (userInfoDic) {\n        [self dealUserInfoDic:userInfoDic];\n        return YES;\n    }\n    NSDictionary *tipInfoDic = [pushDic thsDictionaryForKey:@\"Tip\"];\n    //jira：17540 保持在线导致的自动登录不显示push弹框信息\n    if ([[WTKeepOnlineManager sharedInstance] canShowPushAlert] && tipInfoDic) {\n        [self dealTipInfoDic:[tipInfoDic copy] pushDic:pushDic];\n        return YES;\n    }\n    \n    return NO;\n}\n\n+ (void)dealUserInfoDic:(NSDictionary *)userInfoDic {\n    WTAMLogDebug(WT_LOG_MODULE_LOGIN, WT_LOG_KEYWORDS_LOGIN, @\"pushInfo_%@\",userInfoDic);\n    WTUserInfo *userInfo = [[WTUserInfo alloc] initWithDictionary:userInfoDic];\n    NSDictionary *commonDict = [WTPassiveLoginManager getCommonDictWithPushDict:userInfoDic];\n    NSString *loginType = [commonDict thsStringForKey:@\"loginType\"];\n    NSString *pushAccnature = [commonDict thsStringForKey:@\"wtAccountType\"];\n    NSString *pushWtLgAccount = [userInfoDic thsStringForKey:@\"WtLgAccount\"];\n    NSString *pushQsid = [userInfoDic thsStringForKey:@\"Qsid\"];\n    if ([loginType isEqualToString:WT_LOGIN_TYPE_PASSIVE]) {\n        [self dealPassiveLoginWithUserInfo:userInfo userInfoDic:userInfoDic account:pushWtLgAccount qsid:pushQsid accnature:pushAccnature];\n        return;\n    }\n    // 处理委托网关缓存相关逻辑\n    [self updateWtCacheTimeWithUserInfo:userInfo userInfoDic:userInfoDic];\n    \n    // 处理推送账号相关逻辑\n    [self updateAccountWithUserInfo:userInfo userInfoDic:userInfoDic account:pushWtLgAccount qsid:pushQsid accnature:pushAccnature];\n    \n    WTAccountInfor *currentInfo = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    \n    //自动登录没必要每次都发同步营业部和账户分析的初始化请求\n    [[HXWTAccountManager sharedInstance] updateBrokersWithAccount:currentInfo];\n    \n    //登录普通交易成功，根据本地的时间控制是否请求一人多户盈亏分析的初始化请求\n    [WTXCSBusinessManager sendSynInitRequestWithAccount:currentInfo];\n    \n    // 处理风险测评状态逻辑\n    [self dealRiskStatusWithUserInfo:userInfo userInfoDic:userInfoDic currentInfo:currentInfo];\n    \n    if ([userInfoDic[@\"WeakPasswd\"] boolValue] && userInfoDic[@\"WeakPasswdMsg\"]) {\n        WTWeakPwdAlertModel *model = [[WTWeakPwdAlertModel alloc] initWithConfigDict:userInfoDic];\n        [[TradeAlertManager sharedInstance] parseWeakPwdAlertWithWeakPwdAlertModel:model];\n    }\n    \n    //账密登录token处理\n    if ([[HXGrayRelease shared] switchForKey:GrayReleaseWTLoginCreateToken]) {\n        NSString *wtToken = [userInfoDic thsStringForKey:@\"WtToken\"];\n        NSString *timestamp = [userInfoDic th","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"BehaviorObj:nil account:normalAccount.account sence:WTLoginSenceAutoLogin];\n                \n                // 执行静默登录\n                [[WTPassiveLoginManager sharedInstance] processAutoWtPassiveLogin];\n                return YES;\n            }","deepseek-chat-lite":"BehaviorObj:nil account:infor.account sence:WTLoginSenceAutoLogin];","CodeQwen2.5-7B":"BehaviorObj:nil account:infor.rzrqSecondLoginAccount sence:WTLoginSenceAutoLogin];","copilot":"nfo *accountInfo = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    WTAccount"}},{"prefix":"    [self registerForKeyboardNotifications];\n    [[HXAdvertisingManager shareInstance] registerAdObserver:self atAdPosition:HXAD_JIAOYIYUNYING_TRADELOGINBANNER];\n    [[HXAdvertisingManager shareInstance] requestFatigueAdWithTypes:@[HXAD_JIAOYIYUNYING_TRADELOGINBANNER] params:nil];\n}\n\n- (void)removeWillGo{\n    NSString* key = @\"keyPageID\";\n    NSString* strCodeID = @\"GPCode\";\n    NSString* strMarketKey = @\"GPMarket\";\n    [[AMUIFrameWork shareingUIFramework] removePublicValue:key];\n    [[AMUIFrameWork shareingUIFramework] removePublicValue:strCodeID];\n    [[AMUIFrameWork shareingUIFramework] removePublicValue:strMarketKey];\n}\n// 设置运营位是否显示\n- (void)setTextOperateViewPosition {\n\n    if ([self.loginBannerView hasBannerAd]) {\n        self.loginBannerView.hidden = !self.loginBannerView.hasBannerAd;\n    } else {\n        self.loginBannerView.hidden = YES;\n    }\n    \n    if (self.isInComponent) {\n        self.loginBannerView.hidden = YES;\n    }\n    // JIRA-11124 屏蔽开户入口 交易运营位\n    BOOL isOnlineVersion = [[SurveyModel shareSurveyModel] judgeVersion];\n    if (!isOnlineVersion) {\n        self.loginBannerView.hidden = YES;\n    }\n    \n    [self addQSTipView];\n}\n\n- (void)creatLoginBannerViewType {\n    BOOL isFindAccountShow = [self isSupportOldFindAccountView];\n    CGFloat findHeight = 50 * isFindAccountShow;\n    CGFloat originY = findHeight + 16*!isFindAccountShow;\n    if (!self.rzrqTypeSave.selected) {\n        [self.loginBannerView fetchLoginBannerAdInfoWithMarketType:StockMarketType_A brokerId:self.qsId];\n        originY = originY + CGRectGetMaxY(self.accountInputViewNormal.frame);\n    } else {\n        [self.loginBannerView fetchLoginBannerAdInfoWithMarketType:StockMarketType_RZRQ brokerId:self.qsId];\n        originY = originY + CGRectGetMaxY(self.accountInputViewRZRQ.frame);\n    }\n    self.loginBannerView.frame = CGRectMake(16, originY, Screen_width-32, WTTradeLoginBannerView.bannerheight);\n    \n    [self setTextOperateViewPosition];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [super viewWillDisappear:animated];\n    [self.loginBannerView willDisappear];\n    [self setRequestWaitViewActivity:NO];\n    if (_accountInputViewNormal) {\n        [_accountInputViewNormal removeKeepOnlineControl];\n    }\n    if (_accountInputViewRZRQ) {\n        [_accountInputViewRZRQ removeKeepOnlineControl];\n    }\n    [[GuideViewManager sharedInstance] unregisterAllGuideViewsForOwner:self];\n    [[HXDataDispatchManager sharedInstance] unRegisterObjectForKey:[NSNumber numberWithInteger:self.normalLoginInstanceId]];\n    [[HXDataDispatchManager sharedInstance] unRegisterObjectForKey:[NSNumber numberWithInteger:self.rzrqFirstLoginInstanceId]];\n    [[HXDataDispatchManager sharedInstance] unRegisterObjectForKey:[NSNumber numberWithInteger:self.rzrqSecondLoginInstanceId]];\n    if (self.loginModel) {\n        [self.loginModel endLogin];\n    }\n    [self cloaseWrapperWebView];\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)viewDidAppear:(BOOL)animated{\n    \n    [super viewDidAppear:animated];\n    //处理填充账号\n    [self dealFillAccountAction];\n    if (self.setPassWordSuccess == YES) {\n        [self collectUserBehavior];\n        NSString *loginBehaviorObj = [WtLoginCollectUserBehaviorTool getLoginBehaviorWithType:@\"active\" reason:self.e_reason];\n        [self loginWithAccnature:self.willLoginAccountAccnature loginBehaviorObj:loginBehaviorObj];\n        self.setPassWordSuccess = NO;\n    }\n    \n    if (!IsStringNilOrEmpty(self.assignAccount)) {\n        self.normalAccount = self.assignAccount;\n        self.assignAccount = nil;\n    }\n    \n    if ([self.normalAccount length] > 0) {\n        UITextField *tradeTextField = (UITextField *)[self.accountInputViewNormal viewWithTag:WT_ACCOUNT_TEXT_TAG];\n        tradeTextField.text = self.normalAccount;\n    }\n    \n    if (![[WTChicangFlagInfo sharedInfo] isNeedBidCbasSend:self.qsId]) {\n        [ClientUserBehaviorLog initializeViewLogAttributes:self.view marketId:nil];\n        [ClientUserBehaviorLog sendLogQsNumLogobject:WT_CBAS_OBJ_ADDACCOUNT actionType:NoneAction toPageid:0];\n    }\n    \n    [[self selectedAccountInputView] resetSSLSwitchState];\n}\n\n- (void)backAction{\n    [super backAction];\n}\n\n- (BrokersListBusiness *)requestBrokersList {\n    if (!_requestBrokersList) {\n        _requestBrokersList = [[BrokersListBusiness alloc] initWithQsId:self.qsId];\n    }\n    return _requestBrokersList;\n}\n\n- (WTFakeAccountInfor *)creatFakeAccount {\n    WTFakeAccountInfor *infor = [[WTFakeAccountInfor alloc] init];\n    infor.account = _normalAccount;\n    infor.bRealOrSimu = YES;\n    infor.yybName = _qsName;\n    infor.yybId = _qsId;\n    infor.accountTypeName = [self.realAccountTypeArray thsStringAtIndex:self.accountTypeIndex];\n    infor.yybInfo = _wtYybInfo;\n    infor.strYYBInfo = _yybInfo;\n    infor.rzrqAccount = _rzrqAccount;\n    infor.rzrqSecondLoginAccount = _rzrqAccount;\n    infor.wtLoginType = [self.dtklString intValue];\n    infor.accountTypeIndex = [NSString stringWithFormat:@\"%ld\", (long)_accountTypeIndex];\n    infor.yybfunc = _brokerDic[BROKER_INFO_YYBFUNC];\n    infor.brokerDic = _brokerDic;\n    infor.getzbStr = _brokerDic[BROKER_INFO_GETZB];\n    \n    infor.accnature = _willLoginAccountAccnature;\n    return infor;\n}\n\n- (void)createCustomKeyBoard {\n    if (nil == _customKey) {\n        self.customKey = [CustomKeyboard loadKeyBoardWithType:keyBoardTypeNum2];\n        [_customKey setDelegate:self];\n    }\n}\n\n- (void)resetSelf{\n    _wtLoginType = AM_WT_LOGIN_NORMAL;\n    _lWTLoginRequestTime = 0;\n    [self initInstanceId];\n    \n    [self showBrokerLogo:self.qsId];\n    \n    self.wtYybInfo = [[WTYybInfo alloc] initWithYybDictionary:self.brokerDic];\n    \n    [self.qsTopView setBackgroundColor:FOREGROUND_COLOR_NORMAL];\n    \n    NSString *qsNameStr = [self.brokerDic thsStringForKey:BROKER_INFO_QSNAME];\n    if (qsNameStr == nil) {\n        qsNameStr = @\"\";\n    }\n    self.qsNameLabel.text = qsNameStr;\n    [self.qsNameLabel setTextColor:TEXT_COLOR_HOME_PAGE theme:ThemeVersionNormal];\n    \n    NSString *accountType = [self.brokerDic thsStringForKey:BROKER_INFO_ACCOUNTTYPE];\n    if (accountType == nil) {\n        accountType = @\"\";\n    }\n    \n    NSArray *accounttypeArr = [accountType componentsSeparatedByString:@\"|\"];\n    \n    if (accounttypeArr && accounttypeArr.count > 0) {\n        [self solveAccountTypeFirstNumberWithArray:accounttypeArr];\n    }\n    \n    if (self.dtklString != nil && [self.dtklString length] > 0) {\n        [self setWtLoginTypeWithString:self.dtklString];\n    } else {\n        _wtLoginType = AM_WT_LOGIN_NORMAL;\n    }\n    \n    self.yybFunc = [self.brokerDic thsStringForKey:BROKER_INFO_YYBFUNC];\n    if (self.yybFunc == nil) {\n        self.yybFunc = @\"\";\n    }\n    // 修改账号类型\n    self.qsTypeNameLabel.textColor = TEXT_COLOR_RED_NORMAL;\n    [self.qsAccountsTypeBtn addSubview:self.qsTypeNameLabel];\n    [self.qsAccountsTypeBtn addSubview:self.qsTypeImage];\n    if ([ThemeVersionManager currentThemeVersion] == ThemeVersionNormal) {\n        [self.qsTypeImage setImage:[UIImage imageNamed:@\"account_icon_arrowright\"]];\n    } else {\n        [self.qsTypeImage setImage:[UIImage imageNamed:@\"account_icon_arrowright_night\"]];\n    }\n    [self.qsAccountsTypeBtn addTarget:self action:@selector(accountsTypeClicked:) forControlEvents:UIControlEventTouchUpInside];\n    [self.qsAccountsTypeBtn changeTheme];\n    [self realSelectIndex:0];//默认选择第0个\n    \n    if (![self.wtYybInfo isSupportRZRQSecondLogin] && ![self.wtYybInfo isSupportFirstLogin]) {\n        self.chooseAccountTypeView.hidden = YES;\n        CGRect qsTopViewFrame = self.qsTopView.frame;\n        qsTopViewFrame.origin.y = 0;\n        self.qsTopView.frame = qsTopViewFrame;\n        [self updateAccountInputView];\n    } else {\n        self.chooseAccountTypeView.hidden = NO;\n        [self.normalTypeSave addTarget:self action:@selector(typeSaveClicked:) forControlEvents:UIControlEventTouchUpInside];\n        [self.normalTypeSave changeTheme];\n        \n        [self.rzrqTypeSave addTarget:self ","infill":"\n        self.logi","suffix":"nBannerView.hidden = YES;\n    }\n    \n    self.addWTScrollView.frame = self.view.bounds;\n    [self.addWTScrollView setContentSize:CGSizeMake(Screen_width, nowY)];\n    self.addWTScrollView.scrollEnabled = YES;\n    \n    [self addQSTipView];\n}\n\n- (AccountInputView *)selectedAccountInputView {\n    if (self.rzrqTypeSave.isSelected ) {\n        return  self.accountInputViewRZRQ;\n    } else {\n        return self.accountInputViewNormal;\n    }\n}\n\n- (IBAction)yunying:(id)sender {\n//    [self performPrefixCBASStat:[NSString stringWithFormat:@\"%@.yunying\", FIRSTAGU]];\n}\n\n- (void)accountOpenAndTransfer:(id)sender {\n    if (![[WTChicangFlagInfo sharedInfo] isNeedBidCbasSend:_qsId]) {\n        [ClientUserBehaviorLog sendLogQsNumLogobject:JOINT(WT_CBAS_OBJ_ADDACCOUNT, @\"help\") actionType:ClickAction toPageid:0];\n    }\n    //修改为跳转到交易帮助页面\n    NSString* urlString = [NSString stringWithFormat:@\"%@?qid=6\",[[LocalURLConfig sharedInstance] getLocalURLStringByKey:@\"NewHelpAndFeedBackList\"]];\n    NSString* urlMakeSuggestionUrl = [webViewCacheIdPage makeSuggestionUrl:urlString];\n    NSMutableDictionary* pageData = [NSMutableDictionary dictionary];\n    [pageData setObject:urlMakeSuggestionUrl forKey:@\"url\"];\n    AM_UI_Public_Proxy::GogoPageWithIdAndParams(PAGE_WT_WEBVIEW_HELP, pageData);\n}\n\n// 设置委托登录类型\n- (void)setWtLoginTypeWithString:(NSString*)strType {\n    int nType = -1;\n    if (strType != nil)\n    {\n        nType = [strType intValue];\n    }\n    switch (nType) {\n        case 1:\n            _wtLoginType = AM_WT_LOGIN_NORMAL;\n            break;\n        case 2:\n            _wtLoginType = AM_WT_LOGIN_TXPWD;\n            break;\n        case 3:\n            _wtLoginType = AM_WT_LOGIN_DTPWD;\n            break;\n        case 4:\n            _wtLoginType = AM_WT_LOGIN_TX_AND_DT;\n            break;\n        default:\n            _wtLoginType = AM_WT_LOGIN_NORMAL;\n            break;\n    }\n}\n\n- (void)showBrokerLogo:(NSString *)brokerId {\n    // 设置logo\n    [[QSLogoManager shareInstance] setImageView:self.qsIconView byQsid:brokerId];\n}\n\n#pragma mark - 插件化相关\n- (void)downloadPlus {\n    if ([self.pluginurlios length] > 4) {\n        if (!_plugManger) {\n            _plugManger = [[PlugManger alloc] init];\n            _plugManger.addView = self.view;\n        }\n        if ([[_plugManger getVersionWithBroker:self.qsId] isEqualToString:@\"0\"]) {\n            [_plugManger startDownloadTaskWithUrl:self.pluginurlios andVersion:self.pluginverios andBroker:self.qsId];\n        }\n    }\n}\n\n#pragma mark - HXAdObserverProtocol\n//广告数据刷新成功回调\n- (void)refreshAdInfoBy:(HXAdRefreshSourceType)sourceType withParam:(NSDictionary *)param {\n    [self creatLoginBannerViewType];\n    [self layoutButtomViews];\n}\n\n//请求时，额外券商id获取\n- (NSString *)extraQdAtPosition:(NSString *)position withParam:(NSDictionary *)param {\n    return self.qsId;\n}\n\n#pragma mark - 私有方法\n- (void)performPrefixCBASStat:(NSString*)stat\n{\n    NSString * totalObj = @\"i_\";\n#ifdef TARGET_HEXINPRO\n    totalObj = @\"iz_\";\n#endif\n    \n#ifdef _COLLECT_USER_BEHAVIOR\n    AM_Middle_Public_Proxy::IsSendCBASData(YES);\n    AM_UI_Public_Proxy::CollectUserBehavior([NSString stringWithFormat:@\"%@%@\", totalObj, stat]);\n    AM_Middle_Public_Proxy::IsSendCBASData(NO);\n#endif\n}\n\n#pragma mark loginFailed\n- (BOOL)normalAccountIsNilAlertWithTag:(NSInteger)tag account:(NSString *)account accnature:(NSString *)accnature{\n    if ([accnature isEqualToString:WT_LOGIN_NORMAL_NATURE]) {\n        if (account.length == 0 ||\n            [account isEqualToString:@\" \"] ||\n            [account isEqualToString:@\"  \"]) {\n            if (![WTDialogInterceptManager interceptWTLoginDialogWithContent:[NSString stringWithFormat:@\"登录失败:%ld\", (long)tag]]) {\n                HXCustomAlertView *alertView = [[HXCustomAlertView alloc] initWithTitle:[NSString stringWithFormat:@\"登录失败:%ld\", (long)tag]\n                                                                                message:nil\n                                                                               delegate:nil\n                                                                      cancelButtonTitle:nil\n                                                                      otherButtonTitles:@\"确定\", nil];\n                [alertView show];\n            }\n            return YES;\n        }\n    }\n    \n    return NO;\n}\n\n- (void)checkNeedPreConnect{\n    BOOL isRzrq = [[HXWTAccountManager sharedInstance] isRZRQWithAccnature:self.willLoginAccountAccnature];\n    if (isRzrq) {\n        return;\n    }\n    \n    if ([HXWTModuleAirTrack isSupportWTModuleSDKWithQsid:self.qsId]) {  //非委托直连方案，不返回\n        NSString *nomalAccount = [[[self getTextIsRzrq:NO andTextFieldTag:WT_ACCOUNT_TEXT_TAG]\n        removeSpecialCharacter] removeInvisibleCharacter];\n        [WTLoginForwardManager tryToForwardWithYyb:self.qsId accnature:self.willLoginAccountAccnature account:nomalAccount strYYBInfo:self.yybInfo];\n    }\n}\n\n#pragma mark common HudTip\n- (void)setRequestWaitViewActivity:(BOOL)isShow{\n    if (isShow) {\n        [self showHudTip];\n    } else {\n        [self removeHudTip];\n    }\n}\n\n- (void)showHudTip{\n    NSString *tipString = [NSString stringWithFormat:@\"登录中\"];\n    if (self.qsName.length > 0) {\n        tipString = [NSString stringWithFormat:HX_LOAD_TIPS(@\"登录中\\n由%@提供证券服务\"), self.qsName];\n    }\n    \n    [[WTLoginHUDManager sharedInstance] showLoadingWithTip:tipString];\n}\n\n- (void)removeHudTip{\n    [[WTLoginHUDManager sharedInstance] removeLoginHud];\n}\n\n#pragma mark UIKeyboard\n- (void)registerForKeyboardNotifications\n{\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(keyboardWillShowNotification:)\n                                                 name:UIKeyboardWillShowNotification\n                                               object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(keyboardWillHideNotification:)\n                                                 name:UIKeyboardWillHideNotification\n                                               object:nil];\n}\n\n- (void)keyboardWillShowNotification:(NSNotification *)noti\n{\n    CGRect keyboardFrame = [noti.userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];\n    [self.addWTScrollView setHeight:Screen_height - 64 - keyboardFrame.size.height + _accessoryView.bounds.size.height];\n    self.addWTScrollView.scrollEnabled = YES;\n}\n\n- (void)keyboardWillHideNotification:(NSNotification *)noti\n{\n    [self layoutButtomViews];\n}\n\n#pragma mark TableCellWt\n- (void)setCellContent:(NSString*)content cellTag:(int)cellTag\n{\n    switch (cellTag)\n    {\n        case WT_ACCOUNT_TAG:\n        case WT_ACCOUNT_TEXT_TAG:\n        {\n            self.normalAccount = [NSString stringWithString:content];\n        }\n            break;\n        case WT_TRADEPWD_TAG:\n        case WT_TRADEPWD_TEXT_TAG:\n        {\n            self.normalTradePwd = [NSString stringWithString:content];\n            if (self.rzrqTypeSave.isSelected) {\n                if (self.accountInputViewRZRQ.sameWithTradePWDbutton.isSelected) {\n                    UITextField *rzrqTradeTextField = (UITextField *)[self.accountInputViewRZRQ viewWithTag:WT_RZRQPWD_TEXT_TAG];\n                    rzrqTradeTextField.text = [NSString stringWithString:content];\n                    self.rzrqTradePwd = [NSString stringWithString:content];\n                } else {\n                    [self checkSameButton];\n                }\n            } else {\n                if (self.accountInputViewRZRQ.sameWithTradePWDbutton.isSelected) {//当在普通账号页面修改了密码并且融资融券页面的同普通交易密码按钮选中的时候，融资融券密码也跟随普通密码一起修改\n                    UITextField *rzrqTradeTextField = (UITextField *)[self.accountInputViewRZRQ viewWithTag:WT_RZRQPWD_TEXT_TAG];\n                    rzrqTradeTextField.text = [NSString stringWithString:content];\n                    self.rzrqTradePwd = [NSString stringWithString:content];\n                }\n            }\n        }\n    ","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"action:@selector(rzrqTypeSaveClicked:) forControlEvents:UIControlEventTouchUpInside];\n        [self.rzrqTypeSave changeTheme];\n        \n        self.logi","deepseek-chat-lite":"action:@selector(typeSaveClicked:) forControlEvents:UIControlEventTouchUpInside];","CodeQwen2.5-7B":"action:@selector(typeSaveClicked:) forControlEvents:UIControlEventTouchUpInside];","copilot":"\n        self.logi"}},{"prefix":"\n#import \"AddWTAccountViewController.h\"\n#import \"ClientUserBehaviorLog.h\"\n#import <AMPublic/AMDefine.h>\n#import <HXThemeVersion/ThemeVersion.h>\n#import \"BrokerManager.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXTool/NSString+Validate.h>\n#import \"accountsTypeView.h\"\n#import <HXBase/CustomKeyboard.h>\n#import <HXUIKit/EQInputAccessoryView.h>\n#import \"AM_UI_VarKeyString.h\"\n#import \"AMPublicInterface.h\"\n#import \"WTAccountDefine.h\"\n#import \"WtLoginUtil.h\"\n#include \"EQAppFrame.h\"\n#import \"HXWTAccountManager.h\"\n#import \"HXWTLoginUserInfoManager.h\"\n#import \"HXAccountTypeSwitchManager.h\"\n#import \"NSString+AM.h\"\n#import <HXTool/NSString+Chinese.h>\n#import <HXTool/NSString+EmptyAndWhitespace.h>\n#import <HXTool/UIView+Uilities.h>\n#import \"AccountInputView.h\"\n#import \"BDAccountManager.h\"\n#import <LocalURLConfig/LocalURLConfig.h>\n#import \"webViewCacheIdPage.h\"\n#include \"CommonProcess.h\"\n#import \"BindAccountPWD.h\"\n#import \"FingerPrintManager.h\"\n#import \"HXUserInfo+HXBusiness.h\"\n#import \"EnvironmentVariableManager.h\"\n#import \"BindAccountPWDManager.h\"\n#import \"PlugManger.h\"\n#import \"QSLogoManager.h\"\n#import \"NSString+Account.h\"\n#import <HXBase/AMUITabFm.h>\n#import <HXBase/UIViewplus.h>\n#import <ThirdBase/Masonry.h>\n#import \"EQLocaIdDef.h\"\n#import \"WTPasswordTypeModel.h\"\n#import <HXBase/UIButton+StyleExtension.h>\n#import \"WtLoginCollectUserBehaviorTool.h\"\n#import \"ComponentBlockManager.h\"\n#import \"StockColorTag.h\"\n#import \"HXRZRQLoginSucessPreProcess.h\"\n#import \"SurveyModel.h\"\n#import \"AMUIInterface.h\"\n#import \"tooles.h\"\n#import \"WTLoginHUDManager+WTAccountLoginTip.h\"\n#import \"HXCustomAlertView+HXBusiness.h\"\n#import <HXCustomAlertView/HXCustomAlertViewTool.h>\n#import \"WTFindAccountView.h\"\n#import \"WTChicangFlagInfo.h\"\n#import \"WTFakeAccountInfor.h\"\n#import \"HXBindMobileComponent.h\"\n#import \"HXWTModuleAirTrack.h\"\n#import \"HXGrayRelease.h\"\n#import \"HXGrayRelease+Register.h\"\n#import <HXTool/NSObject+JSON.h>\n#import \"HXWTLoginDefine.h\"\n#import \"WTChicangFlagInfo.h\"\n#import \"TradeLoginTimeTip.h\"\n#import \"WTAccountInfor+AccountSwitch.h\"\n#import \"WTYybFuncManager.h\"\n#import \"TradeToolKeepOnlineManager.h\"\n#import \"HXHttpNetwork.h\"\n#import \"NSString+SubStrings.h\"\n#import \"BrokersListBusiness.h\"\n#import \"HXRiskNoticeManager.h\"\n#import \"WTAddAccountOptManager.h\"\n#import <HXBase/AMUIFrameWork.h>\n#import \"WTYYBNatureManager.h\"\n#import \"WTLoginForwardManager.h\"\n#import \"WTClientErrorAlertCBASTool.h\"\n#import <HXCustomAlertView/HXCustomAlertViewConfiguration.h>\n#import <HXCustomAlertView/HXCustomAlertView_CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertView+CustomView.h>\n#import \"HXMobileTrustManager.h\"\n#import \"HXForbidQSWorkerWT.h\"\n#import \"HXTradeOneStepBindHandler.h\"\n#import \"HXAdvertisingManager.h\"\n#import \"HXUpgradeManager.h\"\n#import \"AddWTAccountPrivacyManager.h\"\n#import \"NSString+WTTradeSafety.h\"\n#import \"AddWTAccountQSTipView.h\"\n#import \"WTDialogInterceptManager.h\"\n#import \"WTLoginAccountCheckManager.h\"\n#import \"WTRestrictTryPWDConfigManager.h\"\n#import \"WTScreenSecurityManager.h\"\n#import \"WTTradeLoginBannerView.h\"\n#import \"WTLoginManager.h\"\n#import \"WTDecoupleTool.h\"\n#import \"WTFillAccountTool.h\"\n#import \"WTFillAccountManager.h\"\n#import \"WTFillAccountCacheManager.h\"\n#import <HXGuideView/GuideViewManager.h>\n#import \"GuideViewConfig+Create.h\"\n#import \"InternetTimeTool.h\"\n#import \"UIFont+HXFont.h\"\n#import \"TJiaoYiRiSearchModel.h\"\n#import \"JSWangTingEvent.h\"\n#import \"WTWebWrapperJSEventProtocol.h\"\n#import <HXBase/UIColor+Colours.h>\n#import \"WTWebWrapperView.h\"\n\n#define NO_SUPPORT_LOGIN        HX_LOAD_TIPS(@\"当前版本不支持使用该营业部账号登录普通交易\")\n\n#define HEIGHT_OF_CELL   46\n#define KEYBOARD_HEIGHT 216\n\n#define KAIHU_BTN_WIDTH      49.5\n#define FIND_VIEW_HEIGHT     50\n#define FIND_VIEW_DISTANCE   16\n\n#define FILL_ACCOUNT_TIPVIEW_WIDTH               84.0\n#define FILL_ACCOUNT_TIPVIEW_HEIGHT              17.0\n#define FILL_ACCOUNT_TIPBUTTON_HEIGHT            47.0\n#define FILL_ACCOUNT_TIPVIEW_RIGHTDISTANCE       16.0\n//引导pointY 40是顶部切换组件高度，13是文字距离顶部切换组件高度\n#define FILL_ACCOUNT_GUIDE_POINTY                40.0 + 13.0\n//无权限引导pointX，68为输入框文本距离左侧边缘距离，40为将箭头向内部挪动距离\n#define FILL_ACCOUNT_NOAUTHORITY_GUIDE_POINTX             68.0 + 40.0\n//无权限引导pointY，40是顶部切换组件高度75为输入框文本距离顶部切换组件高度\n#define FILL_ACCOUNT_NOAUTHORITY_GUIDE_POINTY             40.0 + 75.0\n\n#define KAIHU_BUTTON_LEFT_DISTANCE 19\n#define KAIHU_BUTTON_TOP_DISTANCE 19\n#define KAIHU_BUTTON_HEIGHT   44\n\n#define WT_RZRQ_SUCCESS      3044\n#define WT_RZRQ_FAILED       3052\n\nextern CEQAppFrame* EQGetAppFrame();\nextern NSString* g_strDocumentPath;//可写的目录 document的路径\n\nstatic NSString *const LoginRequestingKey = @\"loginRequestKey\"; // 默认Value为@1\nstatic NSString *const BindRequestingKey = @\"bindRequestKey\";   // 默认Value为@1\n\n// Key\nstatic NSString *const LoginRequestResultKey = @\"LoginRequesting\";\nstatic NSString *const BindRequestResultKey = @\"BindRequesting\";\n// Value\nstatic NSString *const LoginSuccessResult = @\"LoginSuccess\";\nstatic NSString *const LoginFailResult = @\"LoginSuccessfila\";\nstatic NSString *const BindSuccessResult = @\"LoginFail\";\nstatic NSString *const BindFailResult = @\"LoginFailfd\";\nstatic NSString *const DidPushLoginFailTip = @\"didPushLoginFailTip\";\n\n@interface AddWTAccountViewController () <accountsTypeViewDelegate, UITextFieldDelegate, AccountInputViewDelegate, CustomKeyboardDelegate,LoginAndBindSender,UIScrollViewDelegate,JSChooseAccountHandlerProtocol,WTWebWrapperViewDelegate,HXAdObserverProtocol>\n\n@property (copy, nonatomic) NSDictionary *brokerDic;//上级页面传入参数\n@property (strong, nonatomic) NSMutableArray *realAccountTypeArray;//将数字处理掉之后的数据\n@property (assign, nonatomic) AM_WT_LOGIN_TYPE wtLoginType; // 委托登录类型\n@property (copy, nonatomic) NSString *dtklString;//从brokerDic中取出\n@property (assign, nonatomic) NSInteger accountTypeIndex;//AccountManager_type.png\n\n@property (assign, nonatomic) NSInteger normalSelectAccountTypeIndex;//普通选择的账号类型下标\n@property (assign, nonatomic) NSInteger rzrqSelectAccountTypeIndex;//两融选择的账号类型下标\n\n@property (copy, nonatomic) NSString *yybFunc;\n@property (copy, nonatomic) NSString *yybInfo;//营业部信息\n@property (copy, nonatomic) NSString *yybName;\n@property (copy, nonatomic) NSString *qsName;\n@property (copy, nonatomic) NSString *qsId;\n@property (copy, nonatomic) NSString *funcStr;\n@property (copy, nonatomic) NSString *pluginverios;\n@property (copy, nonatomic) NSString *pluginurlios;\n@property (strong, nonatomic) WTYybInfo *wtYybInfo;\n\n@property (weak, nonatomic) IBOutlet UIScrollView *addWTScrollView;\n@property (weak, nonatomic) IBOutlet UIView *qsTopView;\n@property (weak, nonatomic) IBOutlet UIImageView *qsIconView;\n@property (weak, nonatomic) IBOutlet UILabel *qsNameLabel;\n@property (weak, nonatomic) IBOutlet StockColorTag *qsRZRQIconVIew;\n@property (weak, nonatomic) IBOutlet UILabel *qsAccountsTipLabel;\n@property (weak, nonatomic) IBOutlet UIButton *qsAccountsTypeBtn;\n@property (weak, nonatomic) IBOutlet UILabel *qsTypeNameLabel;\n@property (weak, nonatomic) IBOutlet UIImageView *qsTypeImage;\n\n@property (weak, nonatomic) IBOutlet UIView *chooseAccountTypeView;\n@property (weak, nonatomic) IBOutlet UIButton *normalTypeSave;\n@property (weak, nonatomic) IBOutlet UIButton *rzrqTypeSave;\n// 红色底划线\n@property (weak, nonatomic) IBOutlet UIView *typeSaveLine;\n@property (strong, nonatomic) PlugManger *plugManger;\n\n@property (strong, nonatomic) IBOutlet UIButton *troubleBtn;\n\n\n@property (strong, nonatomic) accountsTypeView *accountsTypeView;\n\n\n@property (nonatomic, strong) WTWebWrapperView *webWrapperView;\n\n@property (strong, nonatomic) CustomKeyboard *customKey;\n@property (strong, nonatomic) EQInputAccessoryView *accessoryView;\n\n@property (strong, nonatomic) UIView *fillAccountTipView;\n@property (strong, nonatomic) UIButto","infill":"  return _accountsTypeView;\n}\n\n- (void)setNormalAccount","suffix":":(NSString *)normalAccount {\n    if (![_normalAccount isEqualToString:normalAccount]) {\n        _normalAccount = [[normalAccount removeSpecialCharacter] removeInvisibleCharacter];\n    }\n}\n\n- (void)setRzrqAccount:(NSString *)rzrqAccount {\n    if (![_rzrqAccount isEqualToString:rzrqAccount]) {\n        _rzrqAccount = [[rzrqAccount removeSpecialCharacter] removeInvisibleCharacter];\n    }\n}\n\n#pragma mark - 懒加载 说明相关的内容\n\n- (AddWTAccountQSTipView *)tipView {\n    if (!_tipView) {\n        _tipView = [AddWTAccountQSTipView getAddWTAccountQSTipView];\n        [_tipView configTipViewWithQSName:self.qsName andLogStr:WT_CBAS_OBJ_ADDACCOUNT];\n    }\n    return _tipView;\n}\n\n- (void)addQSTipView {\n    if (!self.qsBackView.superview) {\n        [self.view addSubview:self.qsBackView];\n    }\n    \n    CGFloat viewHeight = self.addWTScrollView.contentSize.height;\n    \n    CGFloat viewHeight2 = CGRectGetMaxY(self.loginBannerView.frame) - [EQTools getRealFloat:80] * self.loginBannerView.hidden + 50 + 12;\n    \n    CGFloat maxHeight = MAX(MAX(viewHeight, viewHeight2), Screen_height - STATUSBAR_AND_NAVIGATIONBAR_HEIGHT);\n    [self.addWTScrollView setContentSize:CGSizeMake(Screen_width, maxHeight)];\n    CGFloat bottonHeight = SAFEAREA_BOTTOM_MARGIM_V;\n    if (bottonHeight == 0.0) {\n        bottonHeight = 16;\n    }\n    [self.qsBackView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.leading.trailing.bottom.equalTo(self.view);\n        make.height.mas_equalTo(31+bottonHeight);\n    }];\n\n\n}\n\n- (void)setParams:(NSDictionary *)params{\n    self.willBeInRZRQ = NO;\n    if (params) {\n        \n        if ([[params thsStringForKey:FROM_FIND_ACCOUNT] boolValue]) {\n            \n            if ([[params thsStringForKey:BROKER_INFO_ADD_WTACCOUNT] length] > 0) {\n                self.normalAccount = [params thsStringForKey:BROKER_INFO_ADD_WTACCOUNT];\n            }\n            \n            return;\n        }\n        \n        self.brokerDic = params;\n        \n        CEQAppFrame* pFrame = EQGetAppFrame();\n        [pFrame->GetBrokerManager() updateBrokerFuncWithBrokerInfo:params];\n\n        NSString *wtid = [self.brokerDic thsStringForKey:BROKER_INFO_WTID];\n        if (wtid == nil) {\n            wtid = @\"\";\n        }\n        NSString *qsid = [self.brokerDic thsStringForKey:BROKER_INFO_QSID];\n        if (qsid == nil) {\n            qsid = @\"\";\n        }\n        self.qsId = qsid;\n        \n        [[WTYybFuncManager sharedInstance] addYybFunc:[self.brokerDic thsStringForKey:BROKER_INFO_YYBFUNC] withQsId:qsid];\n        \n        //更新下灰度key\n        [[HXGrayRelease shared] appendBrokersAndRefresh:@[qsid] completion:nil];\n\n        //将要添加券商，将要添加一个券商的通知\n        [[NSNotificationCenter defaultCenter] postNotificationName:WT_WILL_ADD_ACCOUNT_NOTIFICATION object:qsid];\n\n        self.dtklString = [self.brokerDic thsStringForKey:BROKER_INFO_DTKLTYPE];\n        if (self.dtklString == nil) {\n            self.dtklString = @\"\";\n        }\n        \n        NSString *zztype = [self.brokerDic thsStringForKey:BROKER_INFO_ZZTYPE];\n        if (zztype == nil) {\n            zztype = @\"\";\n        }\n        \n        self.yybName = [self.brokerDic thsStringForKey:BROKER_INFO_YYBNAME];\n        if (self.yybName == nil) {\n            self.yybName = @\"\";\n        }\n        \n        self.qsName = [self.brokerDic thsStringForKey:BROKER_INFO_QSNAME];\n        if (self.qsName == nil) {\n            self.qsName = @\"\";\n        }\n        \n        if ([[self.brokerDic thsStringForKey:@\"IsInComponent\"] boolValue] == YES) {\n            self.isInComponent = YES;\n        }\n        \n        if ([[self.brokerDic thsStringForKey:BROKER_INFO_ADD_WTACCOUNT] length] > 0) {\n            self.normalAccount = [self.brokerDic thsStringForKey:BROKER_INFO_ADD_WTACCOUNT];\n        }\n        \n        self.yybInfo = [NSString stringWithFormat:@\"%@#%@#%@#%@\",wtid,qsid,self.dtklString,zztype];\n        \n        NSString *isRZRQ = [self.brokerDic thsStringForKey:@\"WillBeInRZRQ\"];\n        if ([isRZRQ length] > 0) {\n            self.willBeInRZRQ = [isRZRQ boolValue];\n        }\n        \n        self.assignAccount = [self.brokerDic thsStringForKey:@\"assignAccount\"];\n    } else {\n        self.brokerDic = [NSDictionary dictionary];\n        self.yybName = @\"\";\n        self.qsName = @\"\";\n        self.yybInfo = @\"\";\n    }\n}\n\n- (void)viewDidLoad{\n    [super viewDidLoad];\n    \n    self.isFindAccountGrayOpen = [[HXGrayRelease shared]switchForKey:GrayReleaseKeyFindAccount];\n    self.view.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    self.title = @\"添加交易账户\";\n    self.reqCountDic = [NSMutableDictionary dictionaryWithCapacity:2];\n    self.reqResultDic = [NSMutableDictionary dictionaryWithCapacity:2];\n    self.bindAcctDelegate = [[MultiAcctBusinessDelegate alloc]init];\n    self.bindAcctDelegate.reqProcesser = self;\n    self.addWTScrollView.backgroundColor = BACKGROUND_COLOR_NORMAL;\n    self.addWTScrollView.showsVerticalScrollIndicator = NO;\n    self.addWTScrollView.delegate = self;\n    [self registerForKeyboardNotifications];\n    [self createCustomKeyBoard];\n    self.normalSelectAccountTypeIndex = 0;\n    self.rzrqSelectAccountTypeIndex = 0;\n    \n    [self.addWTScrollView addSubview:self.loginBannerView];\n    [self resetSelf];\n    [self downloadPlus];\n    [self updateQsTopView];\n    if(self.isFindAccountGrayOpen){\n        [self isSupportFindPWDBtnWithQsId:self.qsId];\n    }\n    BOOL isFindAccountShow = [self isSupportOldFindAccountView];\n    if (isFindAccountShow) {\n        self.findAccountView = [[WTFindAccountView alloc] initWithFrame:CGRectMake(0, _accountInputViewNormal.frame.origin.y + _accountInputViewNormal.frame.size.height, Screen_width, FIND_VIEW_HEIGHT)];\n        [self.findAccountView setQsId:self.qsId];\n        [self.addWTScrollView addSubview:self.findAccountView];\n    }\n\n    WeakObj(self);\n    [self.requestBrokersList requestKaiHuBrokersListWithChangeFindAccountButton:^{\n        CGFloat originY = selfWeak.accountInputViewNormal.frame.origin.y + selfWeak.accountInputViewNormal.frame.size.height + KAIHU_BUTTON_TOP_DISTANCE + KAIHU_BUTTON_HEIGHT;\n        [selfWeak.findAccountView removeFromSuperview];\n        selfWeak.findAccountView = nil;\n        selfWeak.findAccountView = [[WTFindAccountView alloc] initWithFrame:CGRectMake(FIND_VIEW_DISTANCE, originY, 112, FIND_VIEW_HEIGHT)];\n        [selfWeak.findAccountView setQsId:selfWeak.qsId];\n        [selfWeak.addWTScrollView addSubview:selfWeak.findAccountView];\n        selfWeak.normalBottomOriginY = selfWeak.normalBottomOriginY = MAX(selfWeak.normalBottomOriginY,originY + FIND_VIEW_HEIGHT);\n        [selfWeak layoutButtomViews];\n    } andAddKaiHuButton:^(UIButton * _Nonnull sender) {\n        selfWeak.kaihuButton = sender;\n        CGFloat kaihuButtonOriginY = selfWeak.accountInputViewNormal.frame.origin.y + selfWeak.accountInputViewNormal.frame.size.height + KAIHU_BUTTON_TOP_DISTANCE;\n        selfWeak.kaihuButton.frame = CGRectMake(16 , kaihuButtonOriginY, selfWeak.accountInputViewNormal.frame.size.width - 16 * 2, KAIHU_BUTTON_HEIGHT);\n        [selfWeak.addWTScrollView addSubview:selfWeak.kaihuButton];\n        [selfWeak.requestBrokersList showOrHiddenKaihuButton:selfWeak.rzrqTypeSave.selected];\n        selfWeak.normalBottomOriginY = MAX(selfWeak.normalBottomOriginY, kaihuButtonOriginY + KAIHU_BUTTON_HEIGHT + 16);\n        [selfWeak layoutButtomViews];\n    } requestFail:^{\n#ifdef _DEBUG\n        [AMUIPublicProxy showTipAutoClose:@\"请求开户券商列表失败\"];\n#endif\n    }];\n    \n    [self requestRzrqKaiHuBrokersList];\n   \n    self.isChangeTXMM = NO;\n    self.e_reason = nil;\n    \n    self.addWTScrollView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;\n    \n    _hasSavedToLocal = NO;\n    _needSaveToLocal = YES;\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(enterBackgroundAction) name:UIApplicationDidEnterBackgroundNotification object:nil];\n    if (@available(iOS 13.0, *)) {\n        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(t","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"n *findPWDBtn;\n\n@property (nonatomic, strong) WTTradeLoginBannerView *loginBannerView;\n@property (nonatomic, strong) UIButton *kaihuButton;","deepseek-chat-lite":"n *fillAccountTipButton;","CodeQwen2.5-7B":"n *fillAccountTipButton;","copilot":"  return _accountsTypeView;\n}\n\n- (void)setNormalAccount"}},{"prefix":"    [super hxui_themeDidChangeByManager:manager identifier:identifier theme:theme];\n    if (manager.currentThemeIdentifier == HXUIThemeTypeStrDark) {\n        _navigationIndicatorView.activityIndicatorViewStyle = UIActivityIndicatorViewStyleWhite;\n    } else {\n        _navigationIndicatorView.activityIndicatorViewStyle = UIActivityIndicatorViewStyleGray;\n    }\n    [self.hangQingView redrawAllLayer];\n}\n\n/// 当应用回到前台时需要刷新五档和持仓盈亏的推送接口\n- (void)appBackToForeground {\n    [_goldTradeConfirmView removeFromSuperview];\n\n    self.needReloadTriggerStatus = YES;\n}\n\n/// 当应用进入后台\n- (void)appIntoBackground {\n    [self updateCacheLeavingDate];\n}\n\n/// 交易登录成功\n- (void)tradeAccountDidSwitchNoti {\n    // 导航栏设置\n    [self initNavigationTitleView];\n    [self hideNavigationIndicatorView];\n\n    [self.hangQingView hideRenderViewCursor];\n    if (self.hangQingView.isOpen) {\n        if (IsNSStringNotEmpty(self.stockCode) && IsNSStringNotEmpty(self.marketId)) {\n            [self showMarketQuotations:YES];\n        }\n        [self.hangQingView hiddenLeadView];\n    }\n\n    [self recoverDefaultOrderHands];\n    self.orderInfoView.keYongPrice = nil;\n    [self clearData];\n    [self clearStopLossInput];\n\n    [self promptUnSupportStopLossToOpenWhenCloseSettingView];\n    [self updateStopLossToOpenStatus];\n\n    if (self.hasShowSimuJiaoYiLead) { // 是否显示模拟交易引导\n        self.hasShowSimuJiaoYiLead = NO;\n        NSNumber *isOk = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_FRIST_OPEN_HANGQING];\n        if (!isOk.boolValue && IsNSStringNotEmpty(self.stockCode) && IsNSStringNotEmpty(self.marketId)) {\n            [self showMarketQuotations:YES];\n        }\n    }\n\n    [self addObserverForConditionUntriggerCountUpdate];\n    [self checkRedDot];\n    [self capitalGrayCheck];\n    self.tradeTimerView.headBehaviorLog = [self getTradeTimerViewHeadBehaviorLog];\n    [self.tradeDatasContainerVc updateSegmentAndBadge];\n\n    [self unRegisterObjectKey]; // 取消原来的数据推送\n    [self requestHeaderData];\n    // 重置当前合约，刷新相关数据\n    [self resetShowCode:self.showCode marketId:self.marketId stockName:self.stockName];\n}\n\n/// 交易登录\n- (void)accountDidLogin {\n    if (self.needReloadTriggerStatus) {\n        [self asyncShowConditionTriggerTipIfNeed];\n    }\n    self.needReloadTriggerStatus = NO;\n}\n\n/// 基准价更新\n- (void)standardPriceSetRefresh {\n    if (!self.qmui_isViewLoadedAndVisible) {\n        return;\n    }\n    [self.hangQingView requestFenShiWithStockCode:self.stockCode stockMarket:self.marketId];\n}\n\n/// 第一次收到成交回报，且当前正在交易页面\n/// @param notification AppDelegate发过来的通知内容\n- (void)receivedTransactionReturn:(NSNotification *)notification {\n    if (TransactionSettings.promptAutoAddPositionToSelfStockStatus == PromptAddPositionToSelfStockStatueDidPrompt) {\n        return;\n    }\n    if (TransactionSettings.autoAddContract) {\n        TransactionSettings.promptAutoAddPositionToSelfStockStatus = PromptAddPositionToSelfStockStatueDidPrompt;\n        return;\n    }\n    if (![self promptAddContract]) {\n        return;\n    }\n}\n\n/// 检测止盈止损等功能的小红点是否需要显示\n- (void)checkRedDot {\n    [[LJRedDotManager shared] checkRedDot];\n    NSArray *items = [[LJRedDotManager shared] readFileItem];\n    for (NSDictionary *item in items) {\n        if ([self shouldClearRedDotForKey:item[@\"key\"]]) {\n            [self clearRedDot:item];\n        }\n    }\n\n    // 再根据灰度控制，检测一遍红点\n    [[LJGrayScaleOCManager shared] notiForAllObserver];\n}\n\n- (BOOL)shouldClearRedDotForKey:(NSString *)key {\n    if ([key isEqualToString:@\"mTransactionCapital\"]) {\n        if (![[HXAccountAnalysisPluginBridge service] isEnable] ||\n            [MePool sharedMePool].transactionType == TransactionTypeSimulate) {\n            return true;\n        }\n    } else if ([key isEqualToString:[ManageItemModel actionTypeStr:mTransactionCapitalSimulate]]) {\n        if ([MePool sharedMePool].transactionType == TransactionTypeReal || ![[HXTradeGrayScaleManager share] isSimulateAnalyseEnable]) {\n            return true;\n        }\n    } else if (([key isEqualToString:HXCustomizedTradeViewSettingController.optionRedDotKeyPath] &&\n                !HXOptionTradeGray.isEnableForCurrentAccount) ||\n               ([key isEqualToString:HXCustomizedTradeViewSettingController.arbitrageRedDotKeyPath] &&\n                !HXTradeFunctionControl.isArbitrageTradeEnable)) {\n        return true;\n    } else if ([key isEqualToString:HXTransactionSettingTypeStringGridTrade] &&\n               ![[HXTradeGrayScaleManager share] isGridTradeEnable]) {\n        return true;\n    } else if ([key isEqualToString:HXConditionParamSettingViewController.convertRedDotKeyPath] &&\n               !([[HXTradeGrayScaleManager share] isConditionConvertEnable] && \n                 [[AllCloudCondictionCompanyManager share] isConditionEnableForQsid:[HXTradeLoginManager currentAccount].qsid\n                                                                               wtid:[HXTradeLoginManager currentAccount].wtid])) {\n        return true;\n    } else if ([key isEqualToString:HXTransactionSettingTypeStringSimulatorAccountSetting] &&\n               ![[HXTradeGrayScaleManager share] isSimulatorAccountSettingEnable]) {\n        return true;\n    }\n    return false;\n}\n\n- (void)clearRedDot:(NSDictionary *)dic {\n    NSString *keyPath = [NSString stringWithFormat:@\"%@.%@\", dic[@\"preKeyPath\"], dic[@\"key\"]];\n    [LJBadgeController clearBadgeForKeyPath:keyPath];\n}\n\n// 账户分析灰度检测\n- (void)capitalGrayCheck {\n    WEAKSELF\n    [[HXAccountAnalysisPluginBridge service] requestEnableStatusWithIsEnable:^(BOOL status) {\n        [weakSelf checkRedDot];\n        // 账户分析灰度开关检查返回通知跳转账户分析链路继续执行\n        [[NSNotificationCenter defaultCenter] postNotificationName:HXCAPITAL_GRAY_CHECK_BACK_NOTI\n                                                            object:nil\n                                                          userInfo:nil];\n    }];\n}\n\n- (void)appStoreComment {\n    [self performSelector:@selector(goComment) withObject:nil afterDelay:1.0];\n}\n\n- (void)goComment {\n    // 应用评分\n    CGFloat yingkui = 0;\n    for (int j = 0; j < [self.futuresAndOptionPositions count]; j++) {\n        HXQueryPositionRsp *position = [self.futuresAndOptionPositions thsObjectAtIndex:j];\n        yingkui += [position.chasesProfitAndLoss floatValue];\n    }\n    if (yingkui > 0) { // 用于测试，应该为 yingKui > 0\n        _usercomment = [[UserComment alloc] init];\n        [_usercomment showAppStoreComment:yingkui];\n    }\n}\n\n#pragma mark - 条件单\n\n- (void)addObserverForConditionUntriggerCountUpdate {\n    WEAKSELF;\n    [self.view addAssociateWithConditionDataType:HXAssociateConditionDataTypeCondition];\n    [self.view addAssociateWithConditionDataType:HXAssociateConditionDataTypeStopLoseProfit];\n    [HXConditionDataManager addObserverForConditionsTrigger:self\n                                          replayImmediately:YES\n                                             allManagements:^(BOOL changed, BOOL isTrigger, NSUInteger count) {\n                                                 weakSelf.untriggerCount = count;\n                                                 [weakSelf.untriggerBadge setUntriggerCount:weakSelf.untriggerCount + weakSelf.gridTradeCount];\n                                                 if (isTrigger) {\n                                                     if (weakSelf.disappearred) {\n                                                         weakSelf.triggerdInDisappear = YES;\n                                                     } else {\n                                                         [weakSelf.untriggerBadge showTriggered];\n                                                     }\n                                                 }\n                                             }];\n\n    [[CTMediator sharedInstance] GridTrade_addObserverGridCount:self\n                                                    updateBlock:^(NSInteger count) {\n                                                        weakSelf.gridTradeCount = count;\n                                         ","infill":"[marketList removeAllObjects];\n   ","suffix":" \n    // codeList addObject:<#(nonnull id)#>\n    codeList addObject:\n    \n    LJMarketUniversalRequest *request = [LJMarketUniversalRequest new];\n    [request queryMarketWithCodeList:codeList marketList:marketList successBlock:{ } failedBlock:{ }];\n}\n\n#pragma mark - 下单逻辑\n\n- (void)buyOpenOrder {\n    NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAIRU : LOG_FUI_MAIDUO];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n\n    NSString *priceStr = self.transactionActionView.leftDataBtn.upDataString;\n    BOOL isPriceOrder = ![LJNumericStringUtils isNumber:self.orderInfoView.transPriceTextField.text];\n    NSString *comparePrice = priceStr;\n    if (isPriceOrder) { // 先取最新，再取昨收\n        comparePrice = self.nowPrice;\n        if (![LJNumericStringUtils isNumber:self.nowPrice]) {\n            comparePrice = self.market.yesterdayClosePrice;\n        }\n    }\n\n    BOOL isStopLossInfoError = NO;\n    if (self.stopLossToOpenSetView.isStopLossEnable &&\n        ![self.stopLossToOpenSetView checkIsPriceCanBeOrderWithOrderType:HXOrderActionTypeBuy\n                                                            comparePrice:comparePrice\n                                                            isOrderPrice:isPriceOrder]) {\n        isStopLossInfoError = YES;\n    }\n\n    if ([LJNumericStringUtils isValidDigitNumber:priceStr]) {\n        // 注意：这里特意使用 & 是为了右边的逻辑也需要执行，对委托的错误进行提示\n        if (!isStopLossInfoError & [self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n            [self recordTradeDaily:kTransactionActionTypeLeft];\n            [self transactionOrderRequestWithShowCode:self.showCode\n                                             marketId:self.marketId\n                                            stockName:self.stockName\n                                            direction:HXOrderActionTypeBuy\n                                       combOffsetType:HXCombOffsetTypeOpen\n                                           orderPrice:priceStr\n                                           orderHands:self.orderInfoView.transHandsTextField.text];\n        }\n    } else if (IsNSStringNotEmpty(self.showCode)) {\n        [self.view makeToast:@\"请输入价格\" duration:HXToastTimeDurationShort];\n    }\n}\n\n- (void)sellOpenOrder {\n    NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAICHU : LOG_FUI_MAIKONG];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n\n    NSString *priceStr = self.transactionActionView.middleDataBtn.upDataString;\n    BOOL isPriceOrder = ![LJNumericStringUtils isNumber:self.orderInfoView.transPriceTextField.text];\n    NSString *comparePrice = priceStr;\n    if (isPriceOrder) { // 先取最新，再取昨收\n        comparePrice = self.nowPrice;\n        if (![LJNumericStringUtils isNumber:self.nowPrice]) {\n            comparePrice = self.market.yesterdayClosePrice;\n        }\n    }\n\n    BOOL isStopLossInfoError = NO;\n    if (self.stopLossToOpenSetView.isStopLossEnable &&\n        ![self.stopLossToOpenSetView checkIsPriceCanBeOrderWithOrderType:HXOrderActionTypeSell\n                                                            comparePrice:comparePrice\n                                                            isOrderPrice:isPriceOrder]) {\n        isStopLossInfoError = YES;\n    }\n\n    if ([LJNumericStringUtils isValidDigitNumber:priceStr]) {\n        // 注意：这里特意使用 & 是为了右边的逻辑也需要执行，对委托的错误进行提示\n        if (!isStopLossInfoError & [self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n            [self recordTradeDaily:kTransactionActionTypeMiddle];\n            [self transactionOrderRequestWithShowCode:self.showCode\n                                             marketId:self.marketId\n                                            stockName:self.stockName\n                                            direction:HXOrderActionTypeSell\n                                       combOffsetType:HXCombOffsetTypeOpen\n                                           orderPrice:priceStr\n                                           orderHands:self.orderInfoView.transHandsTextField.text];\n        }\n    } else if (IsNSStringNotEmpty(self.showCode)) {\n        [self.view makeToast:@\"请输入价格\" duration:HXToastTimeDurationShort];\n    }\n}\n\n/// 是否展示套利单腿平仓提示\n- (BOOL)shouldShowArbitrageCloseAlert:(HXOrderActionType)direction {\n    return !self.isArbitrage &&\n           [HXTransactionSettingConfigManager shouldShowArbitrageCloseAlertWithShowCode:self.showCode\n                                                                               marketId:self.marketId\n                                                                              direction:direction\n                                                                             orderCount:self.orderInfoView.transHandsTextField.text.integerValue];\n}\n\n- (void)closePositionOrder {\n    if (self.selectedPosition) {\n        NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n        [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n        NSString *priceStr = self.transactionActionView.rightDataBtn.upDataString;\n        if (![priceStr isEqualToString:@\"--\"] && priceStr && [LJNumericStringUtils isValidDigitNumber:priceStr]) {\n            HXQueryPositionRsp *position = self.selectedPosition;\n            if (position) {\n                if ([self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n                    NSInteger handsTextFieldInt = self.orderInfoView.transHandsTextField.text.integerValue;\n                    NSInteger handsTotal = position.enablePosition;\n                    if (handsTotal < handsTextFieldInt) {\n                        [self.view makeToast:@\"可平仓手数不足\" duration:2 position:@\"center\"];\n                    } else {\n                        [self closeHoldPositionIfNeeded:position price:priceStr hands:self.orderInfoView.transHandsTextField.text];\n                    }\n                }\n            }\n        } else if (IsNSStringNotEmpty(self.showCode)) {\n            [self.view makeToast:@\"请输入价格\" duration:2 position:@\"center\"];\n        }\n    } else {\n        int i = 0, j = 0, k = 0;                               // 变量k用来记录当前可以选中的合约代码在数组中的index\n        NSMutableArray *array = [[NSMutableArray alloc] init]; // 存放平仓选项\n        NSArray<HXQueryPositionRsp *> *matchedPositions = [self matchedPositions];\n        NSInteger count = [matchedPositions count];\n        for (; i < count; i++) {\n            HXQueryPositionRsp *position = [matchedPositions thsObjectAtIndex:i];\n            if ([position.showCode isEqualToString:self.showCode] && !position.isHedgeStock) {\n                [array addObject:position];\n                j++;\n                k = i;\n            }\n        }\n        if (1 == j) {\n            NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n            [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n            NSString *priceStr = self.transactionActionView.rightDataBtn.upDataString;\n            if (![priceStr isEqualToString:@\"--\"] && priceStr && [LJNumericStringUtils isValidDigitNumber:priceStr]) {\n                if ([self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n                    HXQueryPositionRsp *position = [matchedPositions thsObjectAtIndex:k];\n                    if (position) {\n                        NSInteger handsTextFieldInt = self.orderInfoView.transHandsTextField.text.integerValue;\n                        NSInteger handsTotel = position.enablePosition;\n\n                        if (handsTotel < handsTextFieldInt) {\n                            [self.view makeToast:@\"可平仓手数不足\" duration:2 position:@\"center\"];\n                        } else {\n                            [self closeHoldPositionIfNeeded:position price:priceStr hands:self.orderInfoView.transHandsTextField.text];\n          ","relevantFile":"","relevantFileList":[],"filePath":"FuturesJiaoYiViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"[weakSelf.untriggerBadge setUntriggerCount:weakSelf.untriggerCount + count];\n                                                        if (weakSelf.disappearred) {\n                                                            weakSelf.triggerdInDisappear = YES;\n                                                        }\n                                                    }","deepseek-chat-lite":"               [weakSelf.untriggerBadge setGridTradeCount:weakSelf.gridTradeCount];","CodeQwen2.5-7B":"               [weakSelf.untriggerBadge setUntriggerCount:weakSelf.untriggerCount + weakSelf.gridTradeCount];","copilot":"[marketList removeAllObjects];\n   "}},{"prefix":"    [super hxui_themeDidChangeByManager:manager identifier:identifier theme:theme];\n    if (manager.currentThemeIdentifier == HXUIThemeTypeStrDark) {\n        _navigationIndicatorView.activityIndicatorViewStyle = UIActivityIndicatorViewStyleWhite;\n    } else {\n        _navigationIndicatorView.activityIndicatorViewStyle = UIActivityIndicatorViewStyleGray;\n    }\n    [self.hangQingView redrawAllLayer];\n}\n\n/// 当应用回到前台时需要刷新五档和持仓盈亏的推送接口\n- (void)appBackToForeground {\n    [_goldTradeConfirmView removeFromSuperview];\n\n    self.needReloadTriggerStatus = YES;\n}\n\n/// 当应用进入后台\n- (void)appIntoBackground {\n    [self updateCacheLeavingDate];\n}\n\n/// 交易登录成功\n- (void)tradeAccountDidSwitchNoti {\n    // 导航栏设置\n    [self initNavigationTitleView];\n    [self hideNavigationIndicatorView];\n\n    [self.hangQingView hideRenderViewCursor];\n    if (self.hangQingView.isOpen) {\n        if (IsNSStringNotEmpty(self.stockCode) && IsNSStringNotEmpty(self.marketId)) {\n            [self showMarketQuotations:YES];\n        }\n        [self.hangQingView hiddenLeadView];\n    }\n\n    [self recoverDefaultOrderHands];\n    self.orderInfoView.keYongPrice = nil;\n    [self clearData];\n    [self clearStopLossInput];\n\n    [self promptUnSupportStopLossToOpenWhenCloseSettingView];\n    [self updateStopLossToOpenStatus];\n\n    if (self.hasShowSimuJiaoYiLead) { // 是否显示模拟交易引导\n        self.hasShowSimuJiaoYiLead = NO;\n        NSNumber *isOk = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_FRIST_OPEN_HANGQING];\n        if (!isOk.boolValue && IsNSStringNotEmpty(self.stockCode) && IsNSStringNotEmpty(self.marketId)) {\n            [self showMarketQuotations:YES];\n        }\n    }\n\n    [self addObserverForConditionUntriggerCountUpdate];\n    [self checkRedDot];\n    [self capitalGrayCheck];\n    self.tradeTimerView.headBehaviorLog = [self getTradeTimerViewHeadBehaviorLog];\n    [self.tradeDatasContainerVc updateSegmentAndBadge];\n\n    [self unRegisterObjectKey]; // 取消原来的数据推送\n    [self requestHeaderData];\n    // 重置当前合约，刷新相关数据\n    [self resetShowCode:self.showCode marketId:self.marketId stockName:self.stockName];\n}\n\n/// 交易登录\n- (void)accountDidLogin {\n    if (self.needReloadTriggerStatus) {\n        [self asyncShowConditionTriggerTipIfNeed];\n    }\n    self.needReloadTriggerStatus = NO;\n}\n\n/// 基准价更新\n- (void)standardPriceSetRefresh {\n    if (!self.qmui_isViewLoadedAndVisible) {\n        return;\n    }\n    [self.hangQingView requestFenShiWithStockCode:self.stockCode stockMarket:self.marketId];\n}\n\n/// 第一次收到成交回报，且当前正在交易页面\n/// @param notification AppDelegate发过来的通知内容\n- (void)receivedTransactionReturn:(NSNotification *)notification {\n    if (TransactionSettings.promptAutoAddPositionToSelfStockStatus == PromptAddPositionToSelfStockStatueDidPrompt) {\n        return;\n    }\n    if (TransactionSettings.autoAddContract) {\n        TransactionSettings.promptAutoAddPositionToSelfStockStatus = PromptAddPositionToSelfStockStatueDidPrompt;\n        return;\n    }\n    if (![self promptAddContract]) {\n        return;\n    }\n}\n\n/// 检测止盈止损等功能的小红点是否需要显示\n- (void)checkRedDot {\n    [[LJRedDotManager shared] checkRedDot];\n    NSArray *items = [[LJRedDotManager shared] readFileItem];\n    for (NSDictionary *item in items) {\n        if ([self shouldClearRedDotForKey:item[@\"key\"]]) {\n            [self clearRedDot:item];\n        }\n    }\n\n    // 再根据灰度控制，检测一遍红点\n    [[LJGrayScaleOCManager shared] notiForAllObserver];\n}\n\n- (BOOL)shouldClearRedDotForKey:(NSString *)key {\n    if ([key isEqualToString:@\"mTransactionCapital\"]) {\n        if (![[HXAccountAnalysisPluginBridge service] isEnable] ||\n            [MePool sharedMePool].transactionType == TransactionTypeSimulate) {\n            return true;\n        }\n    } else if ([key isEqualToString:[ManageItemModel actionTypeStr:mTransactionCapitalSimulate]]) {\n        if ([MePool sharedMePool].transactionType == TransactionTypeReal || ![[HXTradeGrayScaleManager share] isSimulateAnalyseEnable]) {\n            return true;\n        }\n    } else if (([key isEqualToString:HXCustomizedTradeViewSettingController.optionRedDotKeyPath] &&\n                !HXOptionTradeGray.isEnableForCurrentAccount) ||\n               ([key isEqualToString:HXCustomizedTradeViewSettingController.arbitrageRedDotKeyPath] &&\n                !HXTradeFunctionControl.isArbitrageTradeEnable)) {\n        return true;\n    } else if ([key isEqualToString:HXTransactionSettingTypeStringGridTrade] &&\n               ![[HXTradeGrayScaleManager share] isGridTradeEnable]) {\n        return true;\n    } else if ([key isEqualToString:HXConditionParamSettingViewController.convertRedDotKeyPath] &&\n               !([[HXTradeGrayScaleManager share] isConditionConvertEnable] && \n                 [[AllCloudCondictionCompanyManager share] isConditionEnableForQsid:[HXTradeLoginManager currentAccount].qsid\n                                                                               wtid:[HXTradeLoginManager currentAccount].wtid])) {\n        return true;\n    } else if ([key isEqualToString:HXTransactionSettingTypeStringSimulatorAccountSetting] &&\n               ![[HXTradeGrayScaleManager share] isSimulatorAccountSettingEnable]) {\n        return true;\n    }\n    return false;\n}\n\n- (void)clearRedDot:(NSDictionary *)dic {\n    NSString *keyPath = [NSString stringWithFormat:@\"%@.%@\", dic[@\"preKeyPath\"], dic[@\"key\"]];\n    [LJBadgeController clearBadgeForKeyPath:keyPath];\n}\n\n// 账户分析灰度检测\n- (void)capitalGrayCheck {\n    WEAKSELF\n    [[HXAccountAnalysisPluginBridge service] requestEnableStatusWithIsEnable:^(BOOL status) {\n        [weakSelf checkRedDot];\n        // 账户分析灰度开关检查返回通知跳转账户分析链路继续执行\n        [[NSNotificationCenter defaultCenter] postNotificationName:HXCAPITAL_GRAY_CHECK_BACK_NOTI\n                                                            object:nil\n                                                          userInfo:nil];\n    }];\n}\n\n- (void)appStoreComment {\n    [self performSelector:@selector(goComment) withObject:nil afterDelay:1.0];\n}\n\n- (void)goComment {\n    // 应用评分\n    CGFloat yingkui = 0;\n    for (int j = 0; j < [self.futuresAndOptionPositions count]; j++) {\n        HXQueryPositionRsp *position = [self.futuresAndOptionPositions thsObjectAtIndex:j];\n        yingkui += [position.chasesProfitAndLoss floatValue];\n    }\n    if (yingkui > 0) { // 用于测试，应该为 yingKui > 0\n        _usercomment = [[UserComment alloc] init];\n        [_usercomment showAppStoreComment:yingkui];\n    }\n}\n\n#pragma mark - 条件单\n\n- (void)addObserverForConditionUntriggerCountUpdate {\n    WEAKSELF;\n    [self.view addAssociateWithConditionDataType:HXAssociateConditionDataTypeCondition];\n    [self.view addAssociateWithConditionDataType:HXAssociateConditionDataTypeStopLoseProfit];\n    [HXConditionDataManager addObserverForConditionsTrigger:self\n                                          replayImmediately:YES\n                                             allManagements:^(BOOL changed, BOOL isTrigger, NSUInteger count) {\n                                                 weakSelf.untriggerCount = count;\n                                                 [weakSelf.untriggerBadge setUntriggerCount:weakSelf.untriggerCount + weakSelf.gridTradeCount];\n                                                 if (isTrigger) {\n                                                     if (weakSelf.disappearred) {\n                                                         weakSelf.triggerdInDisappear = YES;\n                                                     } else {\n                                                         [weakSelf.untriggerBadge showTriggered];\n                                                     }\n                                                 }\n                                             }];\n\n    [[CTMediator sharedInstance] GridTrade_addObserverGridCount:self\n                                                    updateBlock:^(NSInteger count) {\n                                                        weakSelf.gridTradeCount = count;\n                                                        [weakSelf.untriggerBadge s","infill":"// [marketList addObject:@\"65\"];\n  ","suffix":"  [marketList addObject:@\"65\n    \n    LJMarketUniversalRequest *request = [LJMarketUniversalRequest new];\n    [request queryMarketWithCodeList:codeList marketList:marketList successBlock:{ } failedBlock:{ }];\n}\n\n#pragma mark - 下单逻辑\n\n- (void)buyOpenOrder {\n    NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAIRU : LOG_FUI_MAIDUO];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n\n    NSString *priceStr = self.transactionActionView.leftDataBtn.upDataString;\n    BOOL isPriceOrder = ![LJNumericStringUtils isNumber:self.orderInfoView.transPriceTextField.text];\n    NSString *comparePrice = priceStr;\n    if (isPriceOrder) { // 先取最新，再取昨收\n        comparePrice = self.nowPrice;\n        if (![LJNumericStringUtils isNumber:self.nowPrice]) {\n            comparePrice = self.market.yesterdayClosePrice;\n        }\n    }\n\n    BOOL isStopLossInfoError = NO;\n    if (self.stopLossToOpenSetView.isStopLossEnable &&\n        ![self.stopLossToOpenSetView checkIsPriceCanBeOrderWithOrderType:HXOrderActionTypeBuy\n                                                            comparePrice:comparePrice\n                                                            isOrderPrice:isPriceOrder]) {\n        isStopLossInfoError = YES;\n    }\n\n    if ([LJNumericStringUtils isValidDigitNumber:priceStr]) {\n        // 注意：这里特意使用 & 是为了右边的逻辑也需要执行，对委托的错误进行提示\n        if (!isStopLossInfoError & [self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n            [self recordTradeDaily:kTransactionActionTypeLeft];\n            [self transactionOrderRequestWithShowCode:self.showCode\n                                             marketId:self.marketId\n                                            stockName:self.stockName\n                                            direction:HXOrderActionTypeBuy\n                                       combOffsetType:HXCombOffsetTypeOpen\n                                           orderPrice:priceStr\n                                           orderHands:self.orderInfoView.transHandsTextField.text];\n        }\n    } else if (IsNSStringNotEmpty(self.showCode)) {\n        [self.view makeToast:@\"请输入价格\" duration:HXToastTimeDurationShort];\n    }\n}\n\n- (void)sellOpenOrder {\n    NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_MAICHU : LOG_FUI_MAIKONG];\n    [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n\n    NSString *priceStr = self.transactionActionView.middleDataBtn.upDataString;\n    BOOL isPriceOrder = ![LJNumericStringUtils isNumber:self.orderInfoView.transPriceTextField.text];\n    NSString *comparePrice = priceStr;\n    if (isPriceOrder) { // 先取最新，再取昨收\n        comparePrice = self.nowPrice;\n        if (![LJNumericStringUtils isNumber:self.nowPrice]) {\n            comparePrice = self.market.yesterdayClosePrice;\n        }\n    }\n\n    BOOL isStopLossInfoError = NO;\n    if (self.stopLossToOpenSetView.isStopLossEnable &&\n        ![self.stopLossToOpenSetView checkIsPriceCanBeOrderWithOrderType:HXOrderActionTypeSell\n                                                            comparePrice:comparePrice\n                                                            isOrderPrice:isPriceOrder]) {\n        isStopLossInfoError = YES;\n    }\n\n    if ([LJNumericStringUtils isValidDigitNumber:priceStr]) {\n        // 注意：这里特意使用 & 是为了右边的逻辑也需要执行，对委托的错误进行提示\n        if (!isStopLossInfoError & [self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n            [self recordTradeDaily:kTransactionActionTypeMiddle];\n            [self transactionOrderRequestWithShowCode:self.showCode\n                                             marketId:self.marketId\n                                            stockName:self.stockName\n                                            direction:HXOrderActionTypeSell\n                                       combOffsetType:HXCombOffsetTypeOpen\n                                           orderPrice:priceStr\n                                           orderHands:self.orderInfoView.transHandsTextField.text];\n        }\n    } else if (IsNSStringNotEmpty(self.showCode)) {\n        [self.view makeToast:@\"请输入价格\" duration:HXToastTimeDurationShort];\n    }\n}\n\n/// 是否展示套利单腿平仓提示\n- (BOOL)shouldShowArbitrageCloseAlert:(HXOrderActionType)direction {\n    return !self.isArbitrage &&\n           [HXTransactionSettingConfigManager shouldShowArbitrageCloseAlertWithShowCode:self.showCode\n                                                                               marketId:self.marketId\n                                                                              direction:direction\n                                                                             orderCount:self.orderInfoView.transHandsTextField.text.integerValue];\n}\n\n- (void)closePositionOrder {\n    if (self.selectedPosition) {\n        NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n        [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n        NSString *priceStr = self.transactionActionView.rightDataBtn.upDataString;\n        if (![priceStr isEqualToString:@\"--\"] && priceStr && [LJNumericStringUtils isValidDigitNumber:priceStr]) {\n            HXQueryPositionRsp *position = self.selectedPosition;\n            if (position) {\n                if ([self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n                    NSInteger handsTextFieldInt = self.orderInfoView.transHandsTextField.text.integerValue;\n                    NSInteger handsTotal = position.enablePosition;\n                    if (handsTotal < handsTextFieldInt) {\n                        [self.view makeToast:@\"可平仓手数不足\" duration:2 position:@\"center\"];\n                    } else {\n                        [self closeHoldPositionIfNeeded:position price:priceStr hands:self.orderInfoView.transHandsTextField.text];\n                    }\n                }\n            }\n        } else if (IsNSStringNotEmpty(self.showCode)) {\n            [self.view makeToast:@\"请输入价格\" duration:2 position:@\"center\"];\n        }\n    } else {\n        int i = 0, j = 0, k = 0;                               // 变量k用来记录当前可以选中的合约代码在数组中的index\n        NSMutableArray *array = [[NSMutableArray alloc] init]; // 存放平仓选项\n        NSArray<HXQueryPositionRsp *> *matchedPositions = [self matchedPositions];\n        NSInteger count = [matchedPositions count];\n        for (; i < count; i++) {\n            HXQueryPositionRsp *position = [matchedPositions thsObjectAtIndex:i];\n            if ([position.showCode isEqualToString:self.showCode] && !position.isHedgeStock) {\n                [array addObject:position];\n                j++;\n                k = i;\n            }\n        }\n        if (1 == j) {\n            NSString *logStr = [NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], self.isOption ? LOG_FUI_QQPINGCANG : LOG_FUI_PINGCANG];\n            [ClientUserBehaviorLog sendLogWithLogobject:logStr actionType:ClickAction];\n            NSString *priceStr = self.transactionActionView.rightDataBtn.upDataString;\n            if (![priceStr isEqualToString:@\"--\"] && priceStr && [LJNumericStringUtils isValidDigitNumber:priceStr]) {\n                if ([self canDoTransactionWithPrice:priceStr needOnWindow:NO]) {\n                    HXQueryPositionRsp *position = [matchedPositions thsObjectAtIndex:k];\n                    if (position) {\n                        NSInteger handsTextFieldInt = self.orderInfoView.transHandsTextField.text.integerValue;\n                        NSInteger handsTotel = position.enablePosition;\n\n                        if (handsTotel < handsTextFieldInt) {\n                            [self.view makeToast:@\"可平仓手数不足\" duration:2 position:@\"center\"];\n                        } else {\n                            [self closeHoldPositionIfNeeded:position price:priceStr hands:self.orderInfoView.transHandsTextField.text];\n                        }\n                    }\n ","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"setUntriggerCount:weakSelf.untriggerCount + count","deepseek-chat-lite":"etUntriggerCount:weakSelf.untriggerCount + weakSelf.gridTradeCount];","CodeQwen2.5-7B":"etUntriggerCount:weakSelf.untriggerCount + weakSelf.gridTradeCount];","copilot":"// [marketList addObject:@\"65\"];\n  "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n  协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action","infill":"?pageId=1109460462\n */\n\n@interface LJMarketUniversalRequest ()\n\n@prop","suffix":"erty (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (void)queryMarketWithCodeList:(NSArray *)codeList\n                     marketList:(NSArray *)marketList\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    if (codeList == nil || codeList.count == 0) {\n        return;\n    }\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    NSString *codeListString = [self combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) { //有网络时发出请求\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                               @\"24,30,69,70\"];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int) self.nProtocolID paramsDict:requestDic pageId:(int) self.nPageID];\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSLog(@\"=== set data ==\");\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n- (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"?pageId=11937","deepseek-chat-lite":"?pageId=100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","CodeQwen2.5-7B":"?pageId=100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","copilot":"?pageId=1109460462\n */\n\n@interface LJMarketUniversalRequest ()\n\n@prop"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n  协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n 应答数据","infill":"格式（4，5，5","suffix":"5，34338，36103为固定返回数据）：\n 4：\n */\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (void)queryMarketWithCodeList:(NSArray *)codeList\n                     marketList:(NSArray *)marketList\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    if (codeList == nil || codeList.count == 0) {\n        return;\n    }\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    NSString *codeListString = [self combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) { //有网络时发出请求\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                               @\"24,30,69,70\"];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int) self.nProtocolID paramsDict:requestDic pageId:(int) self.nPageID];\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSLog(@\"=== set data ==\");\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n- (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"（1、2、3、4对应的数据格式不同，1：StuffBaseModel，2：StuffTextModel，3：StuffTableModel，其中4的数据格式为：dataitem=code1,code2,market1:name1","deepseek-chat-lite":"格式（4106，3433","CodeQwen2.5-7B":"格式：","copilot":"格式（4，5，5"}},{"prefix":"            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\n               }];\n            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {\n                NSString *origin = alert.textFields.firstObject.text;\n                NSString *belongTo = alert.textFields.lastObject.text;\n                [MePool sharedMePool].origin = origin;\n                [MePool sharedMePool].belongTo = belongTo;\n                [[UserDefaultsPool sharedUserDefaultsPool] setObject:origin forKey:@\"keyUserOrigin\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"来源:%@\",[MePool sharedMePool].origin];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"所属:%@\",[MePool sharedMePool].belongTo];\n            }];\n            [alert addAction:okAction];\n            [alert addAction:cancelAction];\n            [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n            break;\n        }\n        case 6:\n        {\n            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"添加期货公司\" message:nil preferredStyle:UIAlertControllerStyleAlert];\n            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\n               }];\n            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {\n                NSString *companyname = alert.textFields.firstObject.text;\n                NSString *qsid = alert.textFields[1].text;\n                NSString *wtid = alert.textFields[2].text;\n                NSString *gtName = alert.textFields[3].text;\n\n                CompanyInfoModel *model = [[CompanyInfoModel alloc] init];\n                model.companyName = companyname;\n                model.companyQSID = qsid;\n                model.companyWtidArray = @[@{wtid:gtName}];\n                NSMutableArray *tempAry = [NSMutableArray arrayWithArray:[CompanyManager share].companyArrayInsec.firstObject];\n                [tempAry addObject:model];\n                NSMutableArray *tempCompanyArrayInsec = [NSMutableArray arrayWithArray:[CompanyManager share].companyArrayInsec];\n                [tempCompanyArrayInsec replaceObjectAtIndex:0 withObject:tempAry];\n                [CompanyManager share].companyArrayInsec = tempCompanyArrayInsec;\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"companyname:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"qsid:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"wtid:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"柜台:\"];\n            }];\n            [alert addAction:okAction];\n            [alert addAction:cancelAction];\n            [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n        }\n        case 7: {\n            [self debugForBindPhoneLimit];\n            break;\n        }\n        case 8: {\n            ChangeTradeDateViewController *viewController = [[ChangeTradeDateViewController alloc] init];\n            [[UIViewController getCurUIViewController] presentViewController:viewController animated:YES completion:nil];\n            break;\n        }\n        case 9: {\n            [[FUCommonSwitchModel sharedFUCommonSwitchModel] switchUseAMProtocol];\n            break;\n        }\n        case 10: {\n            //新协议开关\n            NSString *commonJson = [FUCommonSwitchModel sharedFUCommonSwitchModel].useNewProtocol?@\"yes\":@\"no\";\n            NSString *msg = [NSString stringWithFormat:@\"useNewProtocol:%@\\n\",commonJson];\n            [LJCustomizedUITools dismissAlertController];\n            [LJCustomizedUITools alertControllerWithTitle:@\"开关\" message:msg preferredStyle:UIAlertControllerStyleAlert cancelHandler:^(UIAlertAction *action) {\n                \n            } OKHandler:^(UIAlertAction *action) {\n                \n            } target:nil];\n            break;\n        }\n        case 11: {\n            //日结单下载参数加密\n            QHT3desEncryptViewController *viewController = [[QHT3desEncryptViewController alloc] init];\n            [[UIViewController getCurUIViewController].navigationController pushViewController:viewController animated:YES];\n            break;\n        }\n        case 12: {\n            //强制开启ip检测超时\n            NSString *result = [[NSUserDefaults standardUserDefaults] objectForKey:@\"averageTimeOut\"];\n            if ([result isEqualToString:@\"1\"]) {\n                [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"averageTimeOut\"];\n            } else {\n                [[NSUserDefaults standardUserDefaults] setObject:@\"1\" forKey:@\"averageTimeOut\"];\n            }\n            break;\n        }\n        case 13: {\n            self.accountAnalysisPlugin.debugTool.isOpenCtpBigData = !self.accountAnalysisPlugin.debugTool.isOpenCtpBigData;\n            break;\n        }\n        case 14: {\n            [self.accountAnalysisPlugin.debugTool showDebugTool];\n            break;\n        }\n        case 15: {\n            [self showCustomToastAlertController];\n            break;\n        }\n        case 16: {\n            NSString *debugJavaScript = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_DEBUG_JS];\n            if ([debugJavaScript isEqualToString:isOK]) {\n                debugJavaScript = isNO;\n            } else {\n                debugJavaScript = isOK;\n            }\n            [[UserDefaultsPool sharedUserDefaultsPool] setObject:debugJavaScript forKey:KEY_IS_DEBUG_JS];\n            break;\n        }\n        case 17: {\n            if ([LJDrawLineCloudStoreManager shared].requestUrlStr &&\n                [[LJDrawLineCloudStoreManager shared].requestUrlStr isEqualToString:DLUrlDomainTest]) {\n                [LJDrawLineCloudStoreManager shared].requestUrlStr = DLUrlDomain;\n            } else {\n                [LJDrawLineCloudStoreManager shared].requestUrlStr = DLUrlDomainTest;\n            }\n            break;\n        }\n        case 18: {\n            NSArray *actions = [self luaPatchDatasource];\n            NSMutableArray *titles = [NSMutableArray new];\n            NSMutableArray *values = [NSMutableArray new];\n            for (NSDictionary *dict in actions) {\n                [titles addObject:dict[kDebugMenuNodeNameKey]];\n                [values addObject:dict[kDebugMenuNodeClickKey]];\n            }\n            [LJCustomizedUITools alertControllerWithTitle:@\"热修复\" \n                                                  message:nil\n                                           preferredStyle:UIAlertControllerStyleActionSheet\n                                              cancelTitle:@\"取消\"\n                                            cancelHandler:nil\n                                              cancelStyle:UIAlertActionStyleCancel\n                                              othersTitle:titles\n                                            othersHandler:values];\n            break;\n        }\n        default:\n            break;\n    }\n#endif\n}\n\n- (void)addObserverForSwitchAccountAnalys","infill":"[NSUserDefaults.standardUserDefaults setBool:YES forKey:@\"HXHotFixEnv\"];\n       ","suffix":" \n    };\n    NSArray *d = @[\n        @{kDebugMenuNodeNameKey:@\"执行剪切板脚本\",kDebugMenuNodeClickKey:block},\n        @{kDebugMenuNodeNameKey:@\"关闭测试脚本\",kDebugMenuNodeClickKey:block2},\n        @{kDebugMenuNodeNameKey:@\"启动时执行上次脚本\",kDebugMenuNodeClickKey:block3},\n        @{kDebugMenuNodeNameKey:@\"启动时不执行脚本\",kDebugMenuNodeClickKey:block4},\n        @{kDebugMenuNodeNameKey:@\"执行上次测试脚本\",kDebugMenuNodeClickKey:block5},\n        @{kDebugMenuNodeNameKey:@\"热修复环境\",kDebugMenuNodeClickKey:block6},\n    ];\n    \n    return d;\n}\n\n#pragma mark - UITableViewDelegate\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {\n    return 140;\n}\n\n- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {\n    return 30;\n}\n\n- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {\n    UILabel *headLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 20, SCREEN_WIDTH, 30)];\n    headLabel.backgroundColor = [UIColor darkGrayColor];\n    headLabel.text = self.nameArray[section];\n    return headLabel;\n}\n\n#pragma mark - UITableViewDataSource\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {\n    return self.nameArray.count;\n}\n\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    NSArray *array = self.sortedArray;\n    NSDictionary *dic = array[section];\n    return dic.count-1;\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n   \n    NSDictionary *configDic = [[NSDictionary alloc] initWithDictionary:self.sortedArray[indexPath.section]];\n    NSMutableArray *discriptionArray = [[NSMutableArray alloc] initWithArray:[configDic allKeys]];\n    // 删除描述中的 排序 标签\n    if ([discriptionArray containsObject:@\"sort\"]) {\n        [discriptionArray removeObject:@\"sort\"];\n    }\n    NSString *title = discriptionArray[indexPath.row];\n    static NSString *identifier = @\"m_pCell\";\n    MPTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];\n    if (cell == nil) {\n        cell = [[[NSBundle mainBundle] loadNibNamed:@\"MPTableViewCell\" owner:self options:nil] firstObject];\n//        [cell.isDebugButton addTarget:self action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];\n        [cell.isBigDebugButton addTarget:self action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];\n    }\n    LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n    cell.itemLabel.text = [urlConfig.dicURLDescription objectForKey:title];\n    cell.officalTextField.text = [configDic objectForKey:title];\n    cell.officalTextField.delegate = self;\n    cell.officalTextField.tag = 0;\n    if ([[configDic objectForKey:title] isEqualToString:@\"\"]) {\n        cell.officalTextField.text = @\"暂无正式地址\";\n    }\n    \n    cell.testTextField.text = [urlConfig.dicURLTest objectForKey:title];\n    cell.testTextField.delegate = self;\n    // testTextField.tag 范围：100-707之间的几个\n    cell.testTextField.tag = (indexPath.section + 1) * 100 + indexPath.row;\n    cell.isBigDebugButton.tag = (indexPath.section + 1) * 100 + indexPath.row;\n    if ([[urlConfig.dicURLTest objectForKey:title] isEqualToString:@\"\"]) {\n        cell.testTextField.text = @\"\";\n        cell.testTextField.placeholder = @\"请输入测试地址\";\n    }\n    \n    BOOL isSelected = [[urlConfig.configIsDebugDic objectForKey:title] integerValue];\n    // isDebug.tag 范围：1000-7007之间的几个\n//    cell.isDebugButton.tag = (indexPath.section + 1) * 1000 + indexPath.row;\n    cell.isBigDebugButton.tag = (indexPath.section + 1) * 1000 + indexPath.row;\n    if (isSelected) {\n        cell.isDebugButton.backgroundColor = [UIColor redColor];\n    } else {\n        cell.isDebugButton.backgroundColor = [UIColor whiteColor];\n    }\n    // 用于点击按钮后获取 url的key\n//    cell.isDebugButton.titleLabel.text = title;\n    cell.isBigDebugButton.titleLabel.text = title;\n    cell.isDebugButton.tintColor = [UIColor whiteColor];\n    return cell;\n}\n\n#pragma mark - UIPickerViewDataSource\n- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {\n    return 2;\n}\n\n- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {\n    if(component == 0) {\n        return\t[m_pServers count];\n    } else {\n        return [m_pPorts count];\n    }\n}\n\n#pragma mark - UIPickerViewDelegate\n- (CGFloat)pickerView:(UIPickerView *)pickerView widthForComponent:(NSInteger)component {\n    if(component == 0) {\n        return\t200\t;\n    } else {\n        return 80;\n    }\n}\n\n- (CGFloat)pickerView:(UIPickerView *)pickerView rowHeightForComponent:(NSInteger)component {\n    return 50;\n}\n\n- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component {\n    if(component == 0) {\n        return [m_pServers objectAtIndex:row];\n    } else {\n        return\t[m_pPorts objectAtIndex:row];\n    }\n}\n\n- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component {\n    NSInteger a1 =\t[m_pPickView selectedRowInComponent:0];\n    NSInteger a2 =\t[m_pPickView selectedRowInComponent:1];\n    NSString* server = [m_pServers objectAtIndex:a1];\n    NSString* port = [m_pPorts objectAtIndex:a2];\n    [m_pBtn setTitle:[NSString stringWithFormat:@\"替换服务器-%@:%@\",server,port] forState:UIControlStateNormal];\n}\n\n#pragma mark - UITextFieldDelegate\n- (void)textFieldDidEndEditing:(UITextField *)textField {\n    if (textField.tag != 0) {\n        NSInteger section = textField.tag / 100 - 1;\n        NSInteger row = textField.tag % 100;\n        UIButton *button = (UIButton *)[m_pTableView viewWithTag:(section + 1) * 1000 + row];\n        NSString *keyStr = button.titleLabel.text;\n        LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n        if ([[urlConfig.configIsDebugDic objectForKey:keyStr] integerValue]) {\n            [urlConfig.dicURLTest setValue:textField.text forKey:keyStr];\n        }\n    }\n}\n\n- (BOOL)textFieldShouldReturn:(UITextField *)textField {\n    [textField resignFirstResponder];\n    return YES;\n}\n\n- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string {\n    if (textField.tag == searchTextField_Tag) {\n        self.sortedArray = nil; //每一次输入搜索，重置sortedArray\n        NSString *searchString = [textField.text stringByReplacingCharactersInRange:range withString:string];\n        if ([searchString isEqualToString:@\"\"] || searchString == nil) {\n            \n        } else {\n            NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"SELF CONTAINS %@\",searchString];\n            if (self.searchArray != nil) {\n                [self.searchArray removeAllObjects];\n                self.searchArray = nil;\n            }\n            LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n            self.searchArray = [NSMutableArray arrayWithArray:[self.urlNameArray filteredArrayUsingPredicate:predicate]];  //搜索的匹配名字的数组\n            NSMutableArray *nameArray = [NSMutableArray arrayWithArray:self.urlNameArray];\n            [nameArray removeObjectsInArray:self.searchArray];\n            for (NSString *title in nameArray) { //移除sortedArray中所有与nameArray中相同的数据\n                [self deleSortArrayWithTitle:title localURL:urlConfig];\n            }\n        }\n        [m_pTableView reloadData];\n    }\n    \n    return YES;\n}\n\n- (void)deleSortArrayWithTitle:(NSString *)title localURL:(LJLocalURLConfig *)urlConfig {\n    for (NSMutableDictionary *dic in self.sortedArray) {\n        NSMutableArray *discriptionArray = [[NSMutableArray alloc] initWithArray:[dic allKeys]];\n        for (NSString *finalTitle in discriptionArray) {\n            if ([title isEqualToString:[urlConfig.dicURLDescription objectForKey:finalTitle]]) {\n                [dic removeObjectForKey:finalTitle];\n                return;\n            }\n        }\n    }\n}\n\n- (void)textFieldDidBeginEditing:(UITextField *)textField {\n  ","relevantFile":"","relevantFileList":[],"filePath":"DebugMenu.mm","template":"objective-cpp","multiRes":{"hipilot":"isPlugin {\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(switchAccountAnalysisPlugin:) name:kSwitchAccountAnalysisPluginNotification object:nil];\n}","deepseek-chat-lite":"isPlugin {","CodeQwen2.5-7B":"is {","copilot":"[NSUserDefaults.standardUserDefaults setBool:YES forKey:@\"HXHotFixEnv\"];\n       "}},{"prefix":"            }];\n            [alert addAction:okAction];\n            [alert addAction:cancelAction];\n            [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n            break;\n        }\n        case 6:\n        {\n            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"添加期货公司\" message:nil preferredStyle:UIAlertControllerStyleAlert];\n            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\n               }];\n            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {\n                NSString *companyname = alert.textFields.firstObject.text;\n                NSString *qsid = alert.textFields[1].text;\n                NSString *wtid = alert.textFields[2].text;\n                NSString *gtName = alert.textFields[3].text;\n\n                CompanyInfoModel *model = [[CompanyInfoModel alloc] init];\n                model.companyName = companyname;\n                model.companyQSID = qsid;\n                model.companyWtidArray = @[@{wtid:gtName}];\n                NSMutableArray *tempAry = [NSMutableArray arrayWithArray:[CompanyManager share].companyArrayInsec.firstObject];\n                [tempAry addObject:model];\n                NSMutableArray *tempCompanyArrayInsec = [NSMutableArray arrayWithArray:[CompanyManager share].companyArrayInsec];\n                [tempCompanyArrayInsec replaceObjectAtIndex:0 withObject:tempAry];\n                [CompanyManager share].companyArrayInsec = tempCompanyArrayInsec;\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"companyname:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"qsid:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"wtid:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"柜台:\"];\n            }];\n            [alert addAction:okAction];\n            [alert addAction:cancelAction];\n            [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n        }\n        case 7: {\n            [self debugForBindPhoneLimit];\n            break;\n        }\n        case 8: {\n            ChangeTradeDateViewController *viewController = [[ChangeTradeDateViewController alloc] init];\n            [[UIViewController getCurUIViewController] presentViewController:viewController animated:YES completion:nil];\n            break;\n        }\n        case 9: {\n            [[FUCommonSwitchModel sharedFUCommonSwitchModel] switchUseAMProtocol];\n            break;\n        }\n        case 10: {\n            //新协议开关\n            NSString *commonJson = [FUCommonSwitchModel sharedFUCommonSwitchModel].useNewProtocol?@\"yes\":@\"no\";\n            NSString *msg = [NSString stringWithFormat:@\"useNewProtocol:%@\\n\",commonJson];\n            [LJCustomizedUITools dismissAlertController];\n            [LJCustomizedUITools alertControllerWithTitle:@\"开关\" message:msg preferredStyle:UIAlertControllerStyleAlert cancelHandler:^(UIAlertAction *action) {\n                \n            } OKHandler:^(UIAlertAction *action) {\n                \n            } target:nil];\n            break;\n        }\n        case 11: {\n            //日结单下载参数加密\n            QHT3desEncryptViewController *viewController = [[QHT3desEncryptViewController alloc] init];\n            [[UIViewController getCurUIViewController].navigationController pushViewController:viewController animated:YES];\n            break;\n        }\n        case 12: {\n            //强制开启ip检测超时\n            NSString *result = [[NSUserDefaults standardUserDefaults] objectForKey:@\"averageTimeOut\"];\n            if ([result isEqualToString:@\"1\"]) {\n                [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"averageTimeOut\"];\n            } else {\n                [[NSUserDefaults standardUserDefaults] setObject:@\"1\" forKey:@\"averageTimeOut\"];\n            }\n            break;\n        }\n        case 13: {\n            self.accountAnalysisPlugin.debugTool.isOpenCtpBigData = !self.accountAnalysisPlugin.debugTool.isOpenCtpBigData;\n            break;\n        }\n        case 14: {\n            [self.accountAnalysisPlugin.debugTool showDebugTool];\n            break;\n        }\n        case 15: {\n            [self showCustomToastAlertController];\n            break;\n        }\n        case 16: {\n            NSString *debugJavaScript = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_DEBUG_JS];\n            if ([debugJavaScript isEqualToString:isOK]) {\n                debugJavaScript = isNO;\n            } else {\n                debugJavaScript = isOK;\n            }\n            [[UserDefaultsPool sharedUserDefaultsPool] setObject:debugJavaScript forKey:KEY_IS_DEBUG_JS];\n            break;\n        }\n        case 17: {\n            if ([LJDrawLineCloudStoreManager shared].requestUrlStr &&\n                [[LJDrawLineCloudStoreManager shared].requestUrlStr isEqualToString:DLUrlDomainTest]) {\n                [LJDrawLineCloudStoreManager shared].requestUrlStr = DLUrlDomain;\n            } else {\n                [LJDrawLineCloudStoreManager shared].requestUrlStr = DLUrlDomainTest;\n            }\n            break;\n        }\n        case 18: {\n            NSArray *actions = [self luaPatchDatasource];\n            NSMutableArray *titles = [NSMutableArray new];\n            NSMutableArray *values = [NSMutableArray new];\n            for (NSDictionary *dict in actions) {\n                [titles addObject:dict[kDebugMenuNodeNameKey]];\n                [values addObject:dict[kDebugMenuNodeClickKey]];\n            }\n            [LJCustomizedUITools alertControllerWithTitle:@\"热修复\" \n                                                  message:nil\n                                           preferredStyle:UIAlertControllerStyleActionSheet\n                                              cancelTitle:@\"取消\"\n                                            cancelHandler:nil\n                                              cancelStyle:UIAlertActionStyleCancel\n                                              othersTitle:titles\n                                            othersHandler:values];\n            break;\n        }\n        default:\n            break;\n    }\n#endif\n}\n\n- (void)addObserverForSwitchAccountAnalysisEnv {\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(configCapitalTestEnv)\n                                                 name:self.accountAnalysisPlugin.debugTool.accountAnalysisDebugSwitchToTestEnvNoti\n                                               object:nil];\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(configCapitalPreTestEnv)\n                                                 name:self.accountAnalysisPlugin.debugTool.accountAnalysisDebugSwitchToPreEnvNoti\n                                               object:nil];\n}\n\n/// 小财神预发布环境： 121.52.252.10：9540； 测试环境： 121.52.252.9：9628\n- (void)configCapitalTestEnv {\n    LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n    [urlConfig.configIsDebugDic setValue:@\"1\" forKey:CapitalDebugDataDownload];\n    [urlConfig.configIsDebugDic setValue:@\"1\" forKey:CapitalSendUploadDate];\n    [urlConfig.dicURLTest setValue:@\"https://testcapital.hexin.cn/futures/snaupload\" forKey:CapitalSendUploadDate];\n  ","infill":" - UITableViewDelegate\n- (CGFloat)tableView:(UITableView *)tableView heigh","suffix":"tForRowAtIndexPath:(NSIndexPath *)indexPath {\n    return 140;\n}\n\n- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {\n    return 30;\n}\n\n- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {\n    UILabel *headLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 20, SCREEN_WIDTH, 30)];\n    headLabel.backgroundColor = [UIColor darkGrayColor];\n    headLabel.text = self.nameArray[section];\n    return headLabel;\n}\n\n#pragma mark - UITableViewDataSource\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {\n    return self.nameArray.count;\n}\n\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    NSArray *array = self.sortedArray;\n    NSDictionary *dic = array[section];\n    return dic.count-1;\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n   \n    NSDictionary *configDic = [[NSDictionary alloc] initWithDictionary:self.sortedArray[indexPath.section]];\n    NSMutableArray *discriptionArray = [[NSMutableArray alloc] initWithArray:[configDic allKeys]];\n    // 删除描述中的 排序 标签\n    if ([discriptionArray containsObject:@\"sort\"]) {\n        [discriptionArray removeObject:@\"sort\"];\n    }\n    NSString *title = discriptionArray[indexPath.row];\n    static NSString *identifier = @\"m_pCell\";\n    MPTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];\n    if (cell == nil) {\n        cell = [[[NSBundle mainBundle] loadNibNamed:@\"MPTableViewCell\" owner:self options:nil] firstObject];\n//        [cell.isDebugButton addTarget:self action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];\n        [cell.isBigDebugButton addTarget:self action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];\n    }\n    LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n    cell.itemLabel.text = [urlConfig.dicURLDescription objectForKey:title];\n    cell.officalTextField.text = [configDic objectForKey:title];\n    cell.officalTextField.delegate = self;\n    cell.officalTextField.tag = 0;\n    if ([[configDic objectForKey:title] isEqualToString:@\"\"]) {\n        cell.officalTextField.text = @\"暂无正式地址\";\n    }\n    \n    cell.testTextField.text = [urlConfig.dicURLTest objectForKey:title];\n    cell.testTextField.delegate = self;\n    // testTextField.tag 范围：100-707之间的几个\n    cell.testTextField.tag = (indexPath.section + 1) * 100 + indexPath.row;\n    cell.isBigDebugButton.tag = (indexPath.section + 1) * 100 + indexPath.row;\n    if ([[urlConfig.dicURLTest objectForKey:title] isEqualToString:@\"\"]) {\n        cell.testTextField.text = @\"\";\n        cell.testTextField.placeholder = @\"请输入测试地址\";\n    }\n    \n    BOOL isSelected = [[urlConfig.configIsDebugDic objectForKey:title] integerValue];\n    // isDebug.tag 范围：1000-7007之间的几个\n//    cell.isDebugButton.tag = (indexPath.section + 1) * 1000 + indexPath.row;\n    cell.isBigDebugButton.tag = (indexPath.section + 1) * 1000 + indexPath.row;\n    if (isSelected) {\n        cell.isDebugButton.backgroundColor = [UIColor redColor];\n    } else {\n        cell.isDebugButton.backgroundColor = [UIColor whiteColor];\n    }\n    // 用于点击按钮后获取 url的key\n//    cell.isDebugButton.titleLabel.text = title;\n    cell.isBigDebugButton.titleLabel.text = title;\n    cell.isDebugButton.tintColor = [UIColor whiteColor];\n    return cell;\n}\n\n#pragma mark - UIPickerViewDataSource\n- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {\n    return 2;\n}\n\n- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {\n    if(component == 0) {\n        return\t[m_pServers count];\n    } else {\n        return [m_pPorts count];\n    }\n}\n\n#pragma mark - UIPickerViewDelegate\n- (CGFloat)pickerView:(UIPickerView *)pickerView widthForComponent:(NSInteger)component {\n    if(component == 0) {\n        return\t200\t;\n    } else {\n        return 80;\n    }\n}\n\n- (CGFloat)pickerView:(UIPickerView *)pickerView rowHeightForComponent:(NSInteger)component {\n    return 50;\n}\n\n- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component {\n    if(component == 0) {\n        return [m_pServers objectAtIndex:row];\n    } else {\n        return\t[m_pPorts objectAtIndex:row];\n    }\n}\n\n- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component {\n    NSInteger a1 =\t[m_pPickView selectedRowInComponent:0];\n    NSInteger a2 =\t[m_pPickView selectedRowInComponent:1];\n    NSString* server = [m_pServers objectAtIndex:a1];\n    NSString* port = [m_pPorts objectAtIndex:a2];\n    [m_pBtn setTitle:[NSString stringWithFormat:@\"替换服务器-%@:%@\",server,port] forState:UIControlStateNormal];\n}\n\n#pragma mark - UITextFieldDelegate\n- (void)textFieldDidEndEditing:(UITextField *)textField {\n    if (textField.tag != 0) {\n        NSInteger section = textField.tag / 100 - 1;\n        NSInteger row = textField.tag % 100;\n        UIButton *button = (UIButton *)[m_pTableView viewWithTag:(section + 1) * 1000 + row];\n        NSString *keyStr = button.titleLabel.text;\n        LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n        if ([[urlConfig.configIsDebugDic objectForKey:keyStr] integerValue]) {\n            [urlConfig.dicURLTest setValue:textField.text forKey:keyStr];\n        }\n    }\n}\n\n- (BOOL)textFieldShouldReturn:(UITextField *)textField {\n    [textField resignFirstResponder];\n    return YES;\n}\n\n- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string {\n    if (textField.tag == searchTextField_Tag) {\n        self.sortedArray = nil; //每一次输入搜索，重置sortedArray\n        NSString *searchString = [textField.text stringByReplacingCharactersInRange:range withString:string];\n        if ([searchString isEqualToString:@\"\"] || searchString == nil) {\n            \n        } else {\n            NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"SELF CONTAINS %@\",searchString];\n            if (self.searchArray != nil) {\n                [self.searchArray removeAllObjects];\n                self.searchArray = nil;\n            }\n            LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n            self.searchArray = [NSMutableArray arrayWithArray:[self.urlNameArray filteredArrayUsingPredicate:predicate]];  //搜索的匹配名字的数组\n            NSMutableArray *nameArray = [NSMutableArray arrayWithArray:self.urlNameArray];\n            [nameArray removeObjectsInArray:self.searchArray];\n            for (NSString *title in nameArray) { //移除sortedArray中所有与nameArray中相同的数据\n                [self deleSortArrayWithTitle:title localURL:urlConfig];\n            }\n        }\n        [m_pTableView reloadData];\n    }\n    \n    return YES;\n}\n\n- (void)deleSortArrayWithTitle:(NSString *)title localURL:(LJLocalURLConfig *)urlConfig {\n    for (NSMutableDictionary *dic in self.sortedArray) {\n        NSMutableArray *discriptionArray = [[NSMutableArray alloc] initWithArray:[dic allKeys]];\n        for (NSString *finalTitle in discriptionArray) {\n            if ([title isEqualToString:[urlConfig.dicURLDescription objectForKey:finalTitle]]) {\n                [dic removeObjectForKey:finalTitle];\n                return;\n            }\n        }\n    }\n}\n\n- (void)textFieldDidBeginEditing:(UITextField *)textField {\n    CGRect textField_Rect = [textField convertRect:textField.bounds toView:nil];\n    CGFloat textFiewld_y = textField_Rect.origin.y;\n    CGFloat textFiewld_h = textField_Rect.size.height;\n    CGFloat keyBorHightAndTabbarHight = 270;\n    int offset = SCREEN_HEIGHT - textFiewld_y - textFiewld_h - keyBorHightAndTabbarHight;\n    \n    if (offset < 0) {\n        offset = m_pTableView.contentOffset.y - offset;\n        [UIView animateWithDuration:0.3 animations:^{\n            [self->m_pTableView setContentOffset:CGPointMake(0, offset)];\n        }];\n    }\n\n}\n\n#pragma mark - event response\n- (void)receiveCallsN","relevantFile":"","relevantFileList":[],"filePath":"DebugMenu.mm","template":"objective-cpp","multiRes":{"hipilot":"[[NSUserDefaults standardUserDefaults] setObject:isOK forKey:KEY_IS_DEBUG_BL];\n}\n\n- (void)configCapitalPreTestEnv {\n    LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n    [","deepseek-chat-lite":"  [urlConfig.dicURLTest setValue:@\"https://testcapital.hexin.cn/futures/snaupload\" forKey:CapitalDebugDataDownload];","CodeQwen2.5-7B":"  [urlConfig.dicURLTest setValue:@\"https://testcapital.hexin.cn/futures/snaupload\" forKey:CapitalDataDownload];","copilot":" - UITableViewDelegate\n- (CGFloat)tableView:(UITableView *)tableView heigh"}},{"prefix":"            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\n               }];\n            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {\n                NSString *origin = alert.textFields.firstObject.text;\n                NSString *belongTo = alert.textFields.lastObject.text;\n                [MePool sharedMePool].origin = origin;\n                [MePool sharedMePool].belongTo = belongTo;\n                [[UserDefaultsPool sharedUserDefaultsPool] setObject:origin forKey:@\"keyUserOrigin\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"来源:%@\",[MePool sharedMePool].origin];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"所属:%@\",[MePool sharedMePool].belongTo];\n            }];\n            [alert addAction:okAction];\n            [alert addAction:cancelAction];\n            [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n            break;\n        }\n        case 6:\n        {\n            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"添加期货公司\" message:nil preferredStyle:UIAlertControllerStyleAlert];\n            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\n               }];\n            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {\n                NSString *companyname = alert.textFields.firstObject.text;\n                NSString *qsid = alert.textFields[1].text;\n                NSString *wtid = alert.textFields[2].text;\n                NSString *gtName = alert.textFields[3].text;\n\n                CompanyInfoModel *model = [[CompanyInfoModel alloc] init];\n                model.companyName = companyname;\n                model.companyQSID = qsid;\n                model.companyWtidArray = @[@{wtid:gtName}];\n                NSMutableArray *tempAry = [NSMutableArray arrayWithArray:[CompanyManager share].companyArrayInsec.firstObject];\n                [tempAry addObject:model];\n                NSMutableArray *tempCompanyArrayInsec = [NSMutableArray arrayWithArray:[CompanyManager share].companyArrayInsec];\n                [tempCompanyArrayInsec replaceObjectAtIndex:0 withObject:tempAry];\n                [CompanyManager share].companyArrayInsec = tempCompanyArrayInsec;\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"companyname:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"qsid:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"wtid:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"柜台:\"];\n            }];\n            [alert addAction:okAction];\n            [alert addAction:cancelAction];\n            [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n        }\n        case 7: {\n            [self debugForBindPhoneLimit];\n            break;\n        }\n        case 8: {\n            ChangeTradeDateViewController *viewController = [[ChangeTradeDateViewController alloc] init];\n            [[UIViewController getCurUIViewController] presentViewController:viewController animated:YES completion:nil];\n            break;\n        }\n        case 9: {\n            [[FUCommonSwitchModel sharedFUCommonSwitchModel] switchUseAMProtocol];\n            break;\n        }\n        case 10: {\n            //新协议开关\n            NSString *commonJson = [FUCommonSwitchModel sharedFUCommonSwitchModel].useNewProtocol?@\"yes\":@\"no\";\n            NSString *msg = [NSString stringWithFormat:@\"useNewProtocol:%@\\n\",commonJson];\n            [LJCustomizedUITools dismissAlertController];\n            [LJCustomizedUITools alertControllerWithTitle:@\"开关\" message:msg preferredStyle:UIAlertControllerStyleAlert cancelHandler:^(UIAlertAction *action) {\n                \n            } OKHandler:^(UIAlertAction *action) {\n                \n            } target:nil];\n            break;\n        }\n        case 11: {\n            //日结单下载参数加密\n            QHT3desEncryptViewController *viewController = [[QHT3desEncryptViewController alloc] init];\n            [[UIViewController getCurUIViewController].navigationController pushViewController:viewController animated:YES];\n            break;\n        }\n        case 12: {\n            //强制开启ip检测超时\n            NSString *result = [[NSUserDefaults standardUserDefaults] objectForKey:@\"averageTimeOut\"];\n            if ([result isEqualToString:@\"1\"]) {\n                [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"averageTimeOut\"];\n            } else {\n                [[NSUserDefaults standardUserDefaults] setObject:@\"1\" forKey:@\"averageTimeOut\"];\n            }\n            break;\n        }\n        case 13: {\n            self.accountAnalysisPlugin.debugTool.isOpenCtpBigData = !self.accountAnalysisPlugin.debugTool.isOpenCtpBigData;\n            break;\n        }\n        case 14: {\n            [self.accountAnalysisPlugin.debugTool showDebugTool];\n            break;\n        }\n        case 15: {\n            [self showCustomToastAlertController];\n            break;\n        }\n        case 16: {\n            NSString *debugJavaScript = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_DEBUG_JS];\n            if ([debugJavaScript isEqualToString:isOK]) {\n                debugJavaScript = isNO;\n            } else {\n                debugJavaScript = isOK;\n            }\n            [[UserDefaultsPool sharedUserDefaultsPool] setObject:debugJavaScript forKey:KEY_IS_DEBUG_JS];\n            break;\n        }\n        case 17: {\n            if ([LJDrawLineCloudStoreManager shared].requestUrlStr &&\n                [[LJDrawLineCloudStoreManager shared].requestUrlStr isEqualToString:DLUrlDomainTest]) {\n                [LJDrawLineCloudStoreManager shared].requestUrlStr = DLUrlDomain;\n            } else {\n                [LJDrawLineCloudStoreManager shared].requestUrlStr = DLUrlDomainTest;\n            }\n            break;\n        }\n        case 18: {\n            NSArray *actions = [self luaPatchDatasource];\n            NSMutableArray *titles = [NSMutableArray new];\n            NSMutableArray *values = [NSMutableArray new];\n            for (NSDictionary *dict in actions) {\n                [titles addObject:dict[kDebugMenuNodeNameKey]];\n                [values addObject:dict[kDebugMenuNodeClickKey]];\n            }\n            [LJCustomizedUITools alertControllerWithTitle:@\"热修复\" \n                                                  message:nil\n                                           preferredStyle:UIAlertControllerStyleActionSheet\n                                              cancelTitle:@\"取消\"\n                                            cancelHandler:nil\n                                              cancelStyle:UIAlertActionStyleCancel\n                                              othersTitle:titles\n                                            othersHandler:values];\n            break;\n        }\n        default:\n            break;\n    }\n#endif\n}\n\n- (void)addObserverForSwitchAccountAnalys","infill":"[NSUserDefaults.standardUserDefaults boolForKey:@\"HXHotFixEnv\"];\n    LJDebugMenuClick","suffix":"Block block6 = ^(UIAlertAction *action) {\n        // [NSUserDefaults.standardUserDefaults setBool:!envStatus forKey:@\"HXHotFixEnv\"];\n        [NSUserDefaults.standardUserDefaults setBool:!envStatus\n        \n    };\n    NSArray *d = @[\n        @{kDebugMenuNodeNameKey:@\"执行剪切板脚本\",kDebugMenuNodeClickKey:block},\n        @{kDebugMenuNodeNameKey:@\"关闭测试脚本\",kDebugMenuNodeClickKey:block2},\n        @{kDebugMenuNodeNameKey:@\"启动时执行上次脚本\",kDebugMenuNodeClickKey:block3},\n        @{kDebugMenuNodeNameKey:@\"启动时不执行脚本\",kDebugMenuNodeClickKey:block4},\n        @{kDebugMenuNodeNameKey:@\"执行上次测试脚本\",kDebugMenuNodeClickKey:block5},\n        @{kDebugMenuNodeNameKey:@\"切换热修复环境\",kDebugMenuNodeClickKey:block6},\n    ];\n    \n    return d;\n}\n\n#pragma mark - UITableViewDelegate\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {\n    return 140;\n}\n\n- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {\n    return 30;\n}\n\n- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {\n    UILabel *headLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 20, SCREEN_WIDTH, 30)];\n    headLabel.backgroundColor = [UIColor darkGrayColor];\n    headLabel.text = self.nameArray[section];\n    return headLabel;\n}\n\n#pragma mark - UITableViewDataSource\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {\n    return self.nameArray.count;\n}\n\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    NSArray *array = self.sortedArray;\n    NSDictionary *dic = array[section];\n    return dic.count-1;\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n   \n    NSDictionary *configDic = [[NSDictionary alloc] initWithDictionary:self.sortedArray[indexPath.section]];\n    NSMutableArray *discriptionArray = [[NSMutableArray alloc] initWithArray:[configDic allKeys]];\n    // 删除描述中的 排序 标签\n    if ([discriptionArray containsObject:@\"sort\"]) {\n        [discriptionArray removeObject:@\"sort\"];\n    }\n    NSString *title = discriptionArray[indexPath.row];\n    static NSString *identifier = @\"m_pCell\";\n    MPTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];\n    if (cell == nil) {\n        cell = [[[NSBundle mainBundle] loadNibNamed:@\"MPTableViewCell\" owner:self options:nil] firstObject];\n//        [cell.isDebugButton addTarget:self action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];\n        [cell.isBigDebugButton addTarget:self action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];\n    }\n    LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n    cell.itemLabel.text = [urlConfig.dicURLDescription objectForKey:title];\n    cell.officalTextField.text = [configDic objectForKey:title];\n    cell.officalTextField.delegate = self;\n    cell.officalTextField.tag = 0;\n    if ([[configDic objectForKey:title] isEqualToString:@\"\"]) {\n        cell.officalTextField.text = @\"暂无正式地址\";\n    }\n    \n    cell.testTextField.text = [urlConfig.dicURLTest objectForKey:title];\n    cell.testTextField.delegate = self;\n    // testTextField.tag 范围：100-707之间的几个\n    cell.testTextField.tag = (indexPath.section + 1) * 100 + indexPath.row;\n    cell.isBigDebugButton.tag = (indexPath.section + 1) * 100 + indexPath.row;\n    if ([[urlConfig.dicURLTest objectForKey:title] isEqualToString:@\"\"]) {\n        cell.testTextField.text = @\"\";\n        cell.testTextField.placeholder = @\"请输入测试地址\";\n    }\n    \n    BOOL isSelected = [[urlConfig.configIsDebugDic objectForKey:title] integerValue];\n    // isDebug.tag 范围：1000-7007之间的几个\n//    cell.isDebugButton.tag = (indexPath.section + 1) * 1000 + indexPath.row;\n    cell.isBigDebugButton.tag = (indexPath.section + 1) * 1000 + indexPath.row;\n    if (isSelected) {\n        cell.isDebugButton.backgroundColor = [UIColor redColor];\n    } else {\n        cell.isDebugButton.backgroundColor = [UIColor whiteColor];\n    }\n    // 用于点击按钮后获取 url的key\n//    cell.isDebugButton.titleLabel.text = title;\n    cell.isBigDebugButton.titleLabel.text = title;\n    cell.isDebugButton.tintColor = [UIColor whiteColor];\n    return cell;\n}\n\n#pragma mark - UIPickerViewDataSource\n- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {\n    return 2;\n}\n\n- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {\n    if(component == 0) {\n        return\t[m_pServers count];\n    } else {\n        return [m_pPorts count];\n    }\n}\n\n#pragma mark - UIPickerViewDelegate\n- (CGFloat)pickerView:(UIPickerView *)pickerView widthForComponent:(NSInteger)component {\n    if(component == 0) {\n        return\t200\t;\n    } else {\n        return 80;\n    }\n}\n\n- (CGFloat)pickerView:(UIPickerView *)pickerView rowHeightForComponent:(NSInteger)component {\n    return 50;\n}\n\n- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component {\n    if(component == 0) {\n        return [m_pServers objectAtIndex:row];\n    } else {\n        return\t[m_pPorts objectAtIndex:row];\n    }\n}\n\n- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component {\n    NSInteger a1 =\t[m_pPickView selectedRowInComponent:0];\n    NSInteger a2 =\t[m_pPickView selectedRowInComponent:1];\n    NSString* server = [m_pServers objectAtIndex:a1];\n    NSString* port = [m_pPorts objectAtIndex:a2];\n    [m_pBtn setTitle:[NSString stringWithFormat:@\"替换服务器-%@:%@\",server,port] forState:UIControlStateNormal];\n}\n\n#pragma mark - UITextFieldDelegate\n- (void)textFieldDidEndEditing:(UITextField *)textField {\n    if (textField.tag != 0) {\n        NSInteger section = textField.tag / 100 - 1;\n        NSInteger row = textField.tag % 100;\n        UIButton *button = (UIButton *)[m_pTableView viewWithTag:(section + 1) * 1000 + row];\n        NSString *keyStr = button.titleLabel.text;\n        LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n        if ([[urlConfig.configIsDebugDic objectForKey:keyStr] integerValue]) {\n            [urlConfig.dicURLTest setValue:textField.text forKey:keyStr];\n        }\n    }\n}\n\n- (BOOL)textFieldShouldReturn:(UITextField *)textField {\n    [textField resignFirstResponder];\n    return YES;\n}\n\n- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string {\n    if (textField.tag == searchTextField_Tag) {\n        self.sortedArray = nil; //每一次输入搜索，重置sortedArray\n        NSString *searchString = [textField.text stringByReplacingCharactersInRange:range withString:string];\n        if ([searchString isEqualToString:@\"\"] || searchString == nil) {\n            \n        } else {\n            NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"SELF CONTAINS %@\",searchString];\n            if (self.searchArray != nil) {\n                [self.searchArray removeAllObjects];\n                self.searchArray = nil;\n            }\n            LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n            self.searchArray = [NSMutableArray arrayWithArray:[self.urlNameArray filteredArrayUsingPredicate:predicate]];  //搜索的匹配名字的数组\n            NSMutableArray *nameArray = [NSMutableArray arrayWithArray:self.urlNameArray];\n            [nameArray removeObjectsInArray:self.searchArray];\n            for (NSString *title in nameArray) { //移除sortedArray中所有与nameArray中相同的数据\n                [self deleSortArrayWithTitle:title localURL:urlConfig];\n            }\n        }\n        [m_pTableView reloadData];\n    }\n    \n    return YES;\n}\n\n- (void)deleSortArrayWithTitle:(NSString *)title localURL:(LJLocalURLConfig *)urlConfig {\n    for (NSMutableDictionary *dic in self.sortedArray) {\n        NSMutableArray *discriptionArray = [[NSMutableArray alloc] initWithArray:[dic allKeys]];\n        for (NSString *finalTitle in discriptionArray) {\n            if ([title isEqualToString:[urlConfig.dicURLDescription","relevantFile":"","relevantFileList":[],"filePath":"DebugMenu.mm","template":"objective-cpp","multiRes":{"hipilot":"sisPlugin {\n    \n}","deepseek-chat-lite":"isPlugin {","CodeQwen2.5-7B":"is {","copilot":"[NSUserDefaults.standardUserDefaults boolForKey:@\"HXHotFixEnv\"];\n    LJDebugMenuClick"}},{"prefix":"                [MePool sharedMePool].origin = origin;\n                [MePool sharedMePool].belongTo = belongTo;\n                [[UserDefaultsPool sharedUserDefaultsPool] setObject:origin forKey:@\"keyUserOrigin\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"来源:%@\",[MePool sharedMePool].origin];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"所属:%@\",[MePool sharedMePool].belongTo];\n            }];\n            [alert addAction:okAction];\n            [alert addAction:cancelAction];\n            [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n            break;\n        }\n        case 6:\n        {\n            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"添加期货公司\" message:nil preferredStyle:UIAlertControllerStyleAlert];\n            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\n               }];\n            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {\n                NSString *companyname = alert.textFields.firstObject.text;\n                NSString *qsid = alert.textFields[1].text;\n                NSString *wtid = alert.textFields[2].text;\n                NSString *gtName = alert.textFields[3].text;\n\n                CompanyInfoModel *model = [[CompanyInfoModel alloc] init];\n                model.companyName = companyname;\n                model.companyQSID = qsid;\n                model.companyWtidArray = @[@{wtid:gtName}];\n                NSMutableArray *tempAry = [NSMutableArray arrayWithArray:[CompanyManager share].companyArrayInsec.firstObject];\n                [tempAry addObject:model];\n                NSMutableArray *tempCompanyArrayInsec = [NSMutableArray arrayWithArray:[CompanyManager share].companyArrayInsec];\n                [tempCompanyArrayInsec replaceObjectAtIndex:0 withObject:tempAry];\n                [CompanyManager share].companyArrayInsec = tempCompanyArrayInsec;\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"companyname:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"qsid:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"wtid:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"柜台:\"];\n            }];\n            [alert addAction:okAction];\n            [alert addAction:cancelAction];\n            [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n        }\n        case 7: {\n            [self debugForBindPhoneLimit];\n            break;\n        }\n        case 8: {\n            ChangeTradeDateViewController *viewController = [[ChangeTradeDateViewController alloc] init];\n            [[UIViewController getCurUIViewController] presentViewController:viewController animated:YES completion:nil];\n            break;\n        }\n        case 9: {\n            [[FUCommonSwitchModel sharedFUCommonSwitchModel] switchUseAMProtocol];\n            break;\n        }\n        case 10: {\n            //新协议开关\n            NSString *commonJson = [FUCommonSwitchModel sharedFUCommonSwitchModel].useNewProtocol?@\"yes\":@\"no\";\n            NSString *msg = [NSString stringWithFormat:@\"useNewProtocol:%@\\n\",commonJson];\n            [LJCustomizedUITools dismissAlertController];\n            [LJCustomizedUITools alertControllerWithTitle:@\"开关\" message:msg preferredStyle:UIAlertControllerStyleAlert cancelHandler:^(UIAlertAction *action) {\n                \n            } OKHandler:^(UIAlertAction *action) {\n                \n            } target:nil];\n            break;\n        }\n        case 11: {\n            //日结单下载参数加密\n            QHT3desEncryptViewController *viewController = [[QHT3desEncryptViewController alloc] init];\n            [[UIViewController getCurUIViewController].navigationController pushViewController:viewController animated:YES];\n            break;\n        }\n        case 12: {\n            //强制开启ip检测超时\n            NSString *result = [[NSUserDefaults standardUserDefaults] objectForKey:@\"averageTimeOut\"];\n            if ([result isEqualToString:@\"1\"]) {\n                [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"averageTimeOut\"];\n            } else {\n                [[NSUserDefaults standardUserDefaults] setObject:@\"1\" forKey:@\"averageTimeOut\"];\n            }\n            break;\n        }\n        case 13: {\n            self.accountAnalysisPlugin.debugTool.isOpenCtpBigData = !self.accountAnalysisPlugin.debugTool.isOpenCtpBigData;\n            break;\n        }\n        case 14: {\n            [self.accountAnalysisPlugin.debugTool showDebugTool];\n            break;\n        }\n        case 15: {\n            [self showCustomToastAlertController];\n            break;\n        }\n        case 16: {\n            NSString *debugJavaScript = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_DEBUG_JS];\n            if ([debugJavaScript isEqualToString:isOK]) {\n                debugJavaScript = isNO;\n            } else {\n                debugJavaScript = isOK;\n            }\n            [[UserDefaultsPool sharedUserDefaultsPool] setObject:debugJavaScript forKey:KEY_IS_DEBUG_JS];\n            break;\n        }\n        case 17: {\n            if ([LJDrawLineCloudStoreManager shared].requestUrlStr &&\n                [[LJDrawLineCloudStoreManager shared].requestUrlStr isEqualToString:DLUrlDomainTest]) {\n                [LJDrawLineCloudStoreManager shared].requestUrlStr = DLUrlDomain;\n            } else {\n                [LJDrawLineCloudStoreManager shared].requestUrlStr = DLUrlDomainTest;\n            }\n            break;\n        }\n        case 18: {\n            NSArray *actions = [self luaPatchDatasource];\n            NSMutableArray *titles = [NSMutableArray new];\n            NSMutableArray *values = [NSMutableArray new];\n            for (NSDictionary *dict in actions) {\n                [titles addObject:dict[kDebugMenuNodeNameKey]];\n                [values addObject:dict[kDebugMenuNodeClickKey]];\n            }\n            [LJCustomizedUITools alertControllerWithTitle:@\"热修复\" \n                                                  message:nil\n                                           preferredStyle:UIAlertControllerStyleActionSheet\n                                              cancelTitle:@\"取消\"\n                                            cancelHandler:nil\n                                              cancelStyle:UIAlertActionStyleCancel\n                                              othersTitle:titles\n                                            othersHandler:values];\n            break;\n        }\n        default:\n            break;\n    }\n#endif\n}\n\n- (void)addObserverForSwitchAccountAnalysisEnv {\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(configCapitalTestEnv)\n                                                 name:self.accountAnalysisPlugin.debugTool.accountAnalysisDebugSwitchToTestEnvNoti\n                                               object:nil];\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(c","infill":"ctionWithTitle:@\"确定\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\n        UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@\"确定\" st","suffix":"yle:UIAlertActionStyleCancel\n            \n        }];\n        [alert addAction:sureAction];\n        [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n        \n    };\n    NSArray *d = @[\n        @{kDebugMenuNodeNameKey:@\"执行剪切板脚本\",kDebugMenuNodeClickKey:block},\n        @{kDebugMenuNodeNameKey:@\"关闭测试脚本\",kDebugMenuNodeClickKey:block2},\n        @{kDebugMenuNodeNameKey:@\"启动时执行上次脚本\",kDebugMenuNodeClickKey:block3},\n        @{kDebugMenuNodeNameKey:@\"启动时不执行脚本\",kDebugMenuNodeClickKey:block4},\n        @{kDebugMenuNodeNameKey:@\"执行上次测试脚本\",kDebugMenuNodeClickKey:block5},\n        @{kDebugMenuNodeNameKey:[NSString stringWithFormat:@\"切换环境(当前：%@)\", isRelEnv ? @\"生成\" : @\"测试\"],kDebugMenuNodeClickKey:block6},\n    ];\n    \n    return d;\n}\n\n#pragma mark - UITableViewDelegate\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {\n    return 140;\n}\n\n- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {\n    return 30;\n}\n\n- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {\n    UILabel *headLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 20, SCREEN_WIDTH, 30)];\n    headLabel.backgroundColor = [UIColor darkGrayColor];\n    headLabel.text = self.nameArray[section];\n    return headLabel;\n}\n\n#pragma mark - UITableViewDataSource\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {\n    return self.nameArray.count;\n}\n\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    NSArray *array = self.sortedArray;\n    NSDictionary *dic = array[section];\n    return dic.count-1;\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n   \n    NSDictionary *configDic = [[NSDictionary alloc] initWithDictionary:self.sortedArray[indexPath.section]];\n    NSMutableArray *discriptionArray = [[NSMutableArray alloc] initWithArray:[configDic allKeys]];\n    // 删除描述中的 排序 标签\n    if ([discriptionArray containsObject:@\"sort\"]) {\n        [discriptionArray removeObject:@\"sort\"];\n    }\n    NSString *title = discriptionArray[indexPath.row];\n    static NSString *identifier = @\"m_pCell\";\n    MPTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];\n    if (cell == nil) {\n        cell = [[[NSBundle mainBundle] loadNibNamed:@\"MPTableViewCell\" owner:self options:nil] firstObject];\n//        [cell.isDebugButton addTarget:self action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];\n        [cell.isBigDebugButton addTarget:self action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];\n    }\n    LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n    cell.itemLabel.text = [urlConfig.dicURLDescription objectForKey:title];\n    cell.officalTextField.text = [configDic objectForKey:title];\n    cell.officalTextField.delegate = self;\n    cell.officalTextField.tag = 0;\n    if ([[configDic objectForKey:title] isEqualToString:@\"\"]) {\n        cell.officalTextField.text = @\"暂无正式地址\";\n    }\n    \n    cell.testTextField.text = [urlConfig.dicURLTest objectForKey:title];\n    cell.testTextField.delegate = self;\n    // testTextField.tag 范围：100-707之间的几个\n    cell.testTextField.tag = (indexPath.section + 1) * 100 + indexPath.row;\n    cell.isBigDebugButton.tag = (indexPath.section + 1) * 100 + indexPath.row;\n    if ([[urlConfig.dicURLTest objectForKey:title] isEqualToString:@\"\"]) {\n        cell.testTextField.text = @\"\";\n        cell.testTextField.placeholder = @\"请输入测试地址\";\n    }\n    \n    BOOL isSelected = [[urlConfig.configIsDebugDic objectForKey:title] integerValue];\n    // isDebug.tag 范围：1000-7007之间的几个\n//    cell.isDebugButton.tag = (indexPath.section + 1) * 1000 + indexPath.row;\n    cell.isBigDebugButton.tag = (indexPath.section + 1) * 1000 + indexPath.row;\n    if (isSelected) {\n        cell.isDebugButton.backgroundColor = [UIColor redColor];\n    } else {\n        cell.isDebugButton.backgroundColor = [UIColor whiteColor];\n    }\n    // 用于点击按钮后获取 url的key\n//    cell.isDebugButton.titleLabel.text = title;\n    cell.isBigDebugButton.titleLabel.text = title;\n    cell.isDebugButton.tintColor = [UIColor whiteColor];\n    return cell;\n}\n\n#pragma mark - UIPickerViewDataSource\n- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {\n    return 2;\n}\n\n- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {\n    if(component == 0) {\n        return\t[m_pServers count];\n    } else {\n        return [m_pPorts count];\n    }\n}\n\n#pragma mark - UIPickerViewDelegate\n- (CGFloat)pickerView:(UIPickerView *)pickerView widthForComponent:(NSInteger)component {\n    if(component == 0) {\n        return\t200\t;\n    } else {\n        return 80;\n    }\n}\n\n- (CGFloat)pickerView:(UIPickerView *)pickerView rowHeightForComponent:(NSInteger)component {\n    return 50;\n}\n\n- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component {\n    if(component == 0) {\n        return [m_pServers objectAtIndex:row];\n    } else {\n        return\t[m_pPorts objectAtIndex:row];\n    }\n}\n\n- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component {\n    NSInteger a1 =\t[m_pPickView selectedRowInComponent:0];\n    NSInteger a2 =\t[m_pPickView selectedRowInComponent:1];\n    NSString* server = [m_pServers objectAtIndex:a1];\n    NSString* port = [m_pPorts objectAtIndex:a2];\n    [m_pBtn setTitle:[NSString stringWithFormat:@\"替换服务器-%@:%@\",server,port] forState:UIControlStateNormal];\n}\n\n#pragma mark - UITextFieldDelegate\n- (void)textFieldDidEndEditing:(UITextField *)textField {\n    if (textField.tag != 0) {\n        NSInteger section = textField.tag / 100 - 1;\n        NSInteger row = textField.tag % 100;\n        UIButton *button = (UIButton *)[m_pTableView viewWithTag:(section + 1) * 1000 + row];\n        NSString *keyStr = button.titleLabel.text;\n        LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n        if ([[urlConfig.configIsDebugDic objectForKey:keyStr] integerValue]) {\n            [urlConfig.dicURLTest setValue:textField.text forKey:keyStr];\n        }\n    }\n}\n\n- (BOOL)textFieldShouldReturn:(UITextField *)textField {\n    [textField resignFirstResponder];\n    return YES;\n}\n\n- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string {\n    if (textField.tag == searchTextField_Tag) {\n        self.sortedArray = nil; //每一次输入搜索，重置sortedArray\n        NSString *searchString = [textField.text stringByReplacingCharactersInRange:range withString:string];\n        if ([searchString isEqualToString:@\"\"] || searchString == nil) {\n            \n        } else {\n            NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"SELF CONTAINS %@\",searchString];\n            if (self.searchArray != nil) {\n                [self.searchArray removeAllObjects];\n                self.searchArray = nil;\n            }\n            LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n            self.searchArray = [NSMutableArray arrayWithArray:[self.urlNameArray filteredArrayUsingPredicate:predicate]];  //搜索的匹配名字的数组\n            NSMutableArray *nameArray = [NSMutableArray arrayWithArray:self.urlNameArray];\n            [nameArray removeObjectsInArray:self.searchArray];\n            for (NSString *title in nameArray) { //移除sortedArray中所有与nameArray中相同的数据\n                [self deleSortArrayWithTitle:title localURL:urlConfig];\n            }\n        }\n        [m_pTableView reloadData];\n    }\n    \n    return YES;\n}\n\n- (void)deleSortArrayWithTitle:(NSString *)title localURL:(LJLocalURLConfig *)urlConfig {\n    for (NSMutableDictionary *dic in self.sortedArray) {\n        NSMutableArray *discriptionArray = [[NSMutableArray alloc] initWithArray:[dic allKeys]];\n        for (NSString *finalTitle in discriptionArray) {\n ","relevantFile":"","relevantFileList":[],"filePath":"DebugMenu.mm","template":"objective-cpp","multiRes":{"hipilot":"onReceiveSwitchAccountAnalysisEnv)\n                                                 name:self.accountAnalysisPlugin.debugTool.accountAnalysisDebugSwitchToReleaseEnvNoti\n                                               object:nil];\n}\n\n- (void)configCapitalTestEnv {\n    [FUCommonSwitchModel sharedFUCommon","deepseek-chat-lite":"onfigCapitalTestEnv)","CodeQwen2.5-7B":"onfigCapitalTestEnv)","copilot":"ctionWithTitle:@\"确定\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\n        UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@\"确定\" st"}},{"prefix":"                [MePool sharedMePool].origin = origin;\n                [MePool sharedMePool].belongTo = belongTo;\n                [[UserDefaultsPool sharedUserDefaultsPool] setObject:origin forKey:@\"keyUserOrigin\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"来源:%@\",[MePool sharedMePool].origin];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"所属:%@\",[MePool sharedMePool].belongTo];\n            }];\n            [alert addAction:okAction];\n            [alert addAction:cancelAction];\n            [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n            break;\n        }\n        case 6:\n        {\n            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"添加期货公司\" message:nil preferredStyle:UIAlertControllerStyleAlert];\n            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\n               }];\n            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {\n                NSString *companyname = alert.textFields.firstObject.text;\n                NSString *qsid = alert.textFields[1].text;\n                NSString *wtid = alert.textFields[2].text;\n                NSString *gtName = alert.textFields[3].text;\n\n                CompanyInfoModel *model = [[CompanyInfoModel alloc] init];\n                model.companyName = companyname;\n                model.companyQSID = qsid;\n                model.companyWtidArray = @[@{wtid:gtName}];\n                NSMutableArray *tempAry = [NSMutableArray arrayWithArray:[CompanyManager share].companyArrayInsec.firstObject];\n                [tempAry addObject:model];\n                NSMutableArray *tempCompanyArrayInsec = [NSMutableArray arrayWithArray:[CompanyManager share].companyArrayInsec];\n                [tempCompanyArrayInsec replaceObjectAtIndex:0 withObject:tempAry];\n                [CompanyManager share].companyArrayInsec = tempCompanyArrayInsec;\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"companyname:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"qsid:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"wtid:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"柜台:\"];\n            }];\n            [alert addAction:okAction];\n            [alert addAction:cancelAction];\n            [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n        }\n        case 7: {\n            [self debugForBindPhoneLimit];\n            break;\n        }\n        case 8: {\n            ChangeTradeDateViewController *viewController = [[ChangeTradeDateViewController alloc] init];\n            [[UIViewController getCurUIViewController] presentViewController:viewController animated:YES completion:nil];\n            break;\n        }\n        case 9: {\n            [[FUCommonSwitchModel sharedFUCommonSwitchModel] switchUseAMProtocol];\n            break;\n        }\n        case 10: {\n            //新协议开关\n            NSString *commonJson = [FUCommonSwitchModel sharedFUCommonSwitchModel].useNewProtocol?@\"yes\":@\"no\";\n            NSString *msg = [NSString stringWithFormat:@\"useNewProtocol:%@\\n\",commonJson];\n            [LJCustomizedUITools dismissAlertController];\n            [LJCustomizedUITools alertControllerWithTitle:@\"开关\" message:msg preferredStyle:UIAlertControllerStyleAlert cancelHandler:^(UIAlertAction *action) {\n                \n            } OKHandler:^(UIAlertAction *action) {\n                \n            } target:nil];\n            break;\n        }\n        case 11: {\n            //日结单下载参数加密\n            QHT3desEncryptViewController *viewController = [[QHT3desEncryptViewController alloc] init];\n            [[UIViewController getCurUIViewController].navigationController pushViewController:viewController animated:YES];\n            break;\n        }\n        case 12: {\n            //强制开启ip检测超时\n            NSString *result = [[NSUserDefaults standardUserDefaults] objectForKey:@\"averageTimeOut\"];\n            if ([result isEqualToString:@\"1\"]) {\n                [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"averageTimeOut\"];\n            } else {\n                [[NSUserDefaults standardUserDefaults] setObject:@\"1\" forKey:@\"averageTimeOut\"];\n            }\n            break;\n        }\n        case 13: {\n            self.accountAnalysisPlugin.debugTool.isOpenCtpBigData = !self.accountAnalysisPlugin.debugTool.isOpenCtpBigData;\n            break;\n        }\n        case 14: {\n            [self.accountAnalysisPlugin.debugTool showDebugTool];\n            break;\n        }\n        case 15: {\n            [self showCustomToastAlertController];\n            break;\n        }\n        case 16: {\n            NSString *debugJavaScript = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_DEBUG_JS];\n            if ([debugJavaScript isEqualToString:isOK]) {\n                debugJavaScript = isNO;\n            } else {\n                debugJavaScript = isOK;\n            }\n            [[UserDefaultsPool sharedUserDefaultsPool] setObject:debugJavaScript forKey:KEY_IS_DEBUG_JS];\n            break;\n        }\n        case 17: {\n            if ([LJDrawLineCloudStoreManager shared].requestUrlStr &&\n                [[LJDrawLineCloudStoreManager shared].requestUrlStr isEqualToString:DLUrlDomainTest]) {\n                [LJDrawLineCloudStoreManager shared].requestUrlStr = DLUrlDomain;\n            } else {\n                [LJDrawLineCloudStoreManager shared].requestUrlStr = DLUrlDomainTest;\n            }\n            break;\n        }\n        case 18: {\n            NSArray *actions = [self luaPatchDatasource];\n            NSMutableArray *titles = [NSMutableArray new];\n            NSMutableArray *values = [NSMutableArray new];\n            for (NSDictionary *dict in actions) {\n                [titles addObject:dict[kDebugMenuNodeNameKey]];\n                [values addObject:dict[kDebugMenuNodeClickKey]];\n            }\n            [LJCustomizedUITools alertControllerWithTitle:@\"热修复\" \n                                                  message:nil\n                                           preferredStyle:UIAlertControllerStyleActionSheet\n                                              cancelTitle:@\"取消\"\n                                            cancelHandler:nil\n                                              cancelStyle:UIAlertActionStyleCancel\n                                              othersTitle:titles\n                                            othersHandler:values];\n            break;\n        }\n        default:\n            break;\n    }\n#endif\n}\n\n- (void)addObserverForSwitchAccountAnalysisEnv {\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(configCapitalTestEnv)\n                                                 name:self.accountAnalysisPlugin.debugTool.accountAnalysisDebugSwitchToTestEnvNoti\n                                               object:nil];\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(c","infill":"n actionWithTitle:@\"确定\" style:UIAlertActionStyleCancel handler:nil];\n        UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@\"确定\" style:UIAlertActionStyleCancel","suffix":" handler:nil\n        [alert addAction:sureAction];\n        [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n        \n    };\n    NSArray *d = @[\n        @{kDebugMenuNodeNameKey:@\"执行剪切板脚本\",kDebugMenuNodeClickKey:block},\n        @{kDebugMenuNodeNameKey:@\"关闭测试脚本\",kDebugMenuNodeClickKey:block2},\n        @{kDebugMenuNodeNameKey:@\"启动时执行上次脚本\",kDebugMenuNodeClickKey:block3},\n        @{kDebugMenuNodeNameKey:@\"启动时不执行脚本\",kDebugMenuNodeClickKey:block4},\n        @{kDebugMenuNodeNameKey:@\"执行上次测试脚本\",kDebugMenuNodeClickKey:block5},\n        @{kDebugMenuNodeNameKey:[NSString stringWithFormat:@\"切换环境(当前：%@)\", isRelEnv ? @\"生成\" : @\"测试\"],kDebugMenuNodeClickKey:block6},\n    ];\n    \n    return d;\n}\n\n#pragma mark - UITableViewDelegate\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {\n    return 140;\n}\n\n- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {\n    return 30;\n}\n\n- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {\n    UILabel *headLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 20, SCREEN_WIDTH, 30)];\n    headLabel.backgroundColor = [UIColor darkGrayColor];\n    headLabel.text = self.nameArray[section];\n    return headLabel;\n}\n\n#pragma mark - UITableViewDataSource\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {\n    return self.nameArray.count;\n}\n\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    NSArray *array = self.sortedArray;\n    NSDictionary *dic = array[section];\n    return dic.count-1;\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n   \n    NSDictionary *configDic = [[NSDictionary alloc] initWithDictionary:self.sortedArray[indexPath.section]];\n    NSMutableArray *discriptionArray = [[NSMutableArray alloc] initWithArray:[configDic allKeys]];\n    // 删除描述中的 排序 标签\n    if ([discriptionArray containsObject:@\"sort\"]) {\n        [discriptionArray removeObject:@\"sort\"];\n    }\n    NSString *title = discriptionArray[indexPath.row];\n    static NSString *identifier = @\"m_pCell\";\n    MPTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];\n    if (cell == nil) {\n        cell = [[[NSBundle mainBundle] loadNibNamed:@\"MPTableViewCell\" owner:self options:nil] firstObject];\n//        [cell.isDebugButton addTarget:self action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];\n        [cell.isBigDebugButton addTarget:self action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];\n    }\n    LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n    cell.itemLabel.text = [urlConfig.dicURLDescription objectForKey:title];\n    cell.officalTextField.text = [configDic objectForKey:title];\n    cell.officalTextField.delegate = self;\n    cell.officalTextField.tag = 0;\n    if ([[configDic objectForKey:title] isEqualToString:@\"\"]) {\n        cell.officalTextField.text = @\"暂无正式地址\";\n    }\n    \n    cell.testTextField.text = [urlConfig.dicURLTest objectForKey:title];\n    cell.testTextField.delegate = self;\n    // testTextField.tag 范围：100-707之间的几个\n    cell.testTextField.tag = (indexPath.section + 1) * 100 + indexPath.row;\n    cell.isBigDebugButton.tag = (indexPath.section + 1) * 100 + indexPath.row;\n    if ([[urlConfig.dicURLTest objectForKey:title] isEqualToString:@\"\"]) {\n        cell.testTextField.text = @\"\";\n        cell.testTextField.placeholder = @\"请输入测试地址\";\n    }\n    \n    BOOL isSelected = [[urlConfig.configIsDebugDic objectForKey:title] integerValue];\n    // isDebug.tag 范围：1000-7007之间的几个\n//    cell.isDebugButton.tag = (indexPath.section + 1) * 1000 + indexPath.row;\n    cell.isBigDebugButton.tag = (indexPath.section + 1) * 1000 + indexPath.row;\n    if (isSelected) {\n        cell.isDebugButton.backgroundColor = [UIColor redColor];\n    } else {\n        cell.isDebugButton.backgroundColor = [UIColor whiteColor];\n    }\n    // 用于点击按钮后获取 url的key\n//    cell.isDebugButton.titleLabel.text = title;\n    cell.isBigDebugButton.titleLabel.text = title;\n    cell.isDebugButton.tintColor = [UIColor whiteColor];\n    return cell;\n}\n\n#pragma mark - UIPickerViewDataSource\n- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {\n    return 2;\n}\n\n- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {\n    if(component == 0) {\n        return\t[m_pServers count];\n    } else {\n        return [m_pPorts count];\n    }\n}\n\n#pragma mark - UIPickerViewDelegate\n- (CGFloat)pickerView:(UIPickerView *)pickerView widthForComponent:(NSInteger)component {\n    if(component == 0) {\n        return\t200\t;\n    } else {\n        return 80;\n    }\n}\n\n- (CGFloat)pickerView:(UIPickerView *)pickerView rowHeightForComponent:(NSInteger)component {\n    return 50;\n}\n\n- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component {\n    if(component == 0) {\n        return [m_pServers objectAtIndex:row];\n    } else {\n        return\t[m_pPorts objectAtIndex:row];\n    }\n}\n\n- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component {\n    NSInteger a1 =\t[m_pPickView selectedRowInComponent:0];\n    NSInteger a2 =\t[m_pPickView selectedRowInComponent:1];\n    NSString* server = [m_pServers objectAtIndex:a1];\n    NSString* port = [m_pPorts objectAtIndex:a2];\n    [m_pBtn setTitle:[NSString stringWithFormat:@\"替换服务器-%@:%@\",server,port] forState:UIControlStateNormal];\n}\n\n#pragma mark - UITextFieldDelegate\n- (void)textFieldDidEndEditing:(UITextField *)textField {\n    if (textField.tag != 0) {\n        NSInteger section = textField.tag / 100 - 1;\n        NSInteger row = textField.tag % 100;\n        UIButton *button = (UIButton *)[m_pTableView viewWithTag:(section + 1) * 1000 + row];\n        NSString *keyStr = button.titleLabel.text;\n        LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n        if ([[urlConfig.configIsDebugDic objectForKey:keyStr] integerValue]) {\n            [urlConfig.dicURLTest setValue:textField.text forKey:keyStr];\n        }\n    }\n}\n\n- (BOOL)textFieldShouldReturn:(UITextField *)textField {\n    [textField resignFirstResponder];\n    return YES;\n}\n\n- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string {\n    if (textField.tag == searchTextField_Tag) {\n        self.sortedArray = nil; //每一次输入搜索，重置sortedArray\n        NSString *searchString = [textField.text stringByReplacingCharactersInRange:range withString:string];\n        if ([searchString isEqualToString:@\"\"] || searchString == nil) {\n            \n        } else {\n            NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"SELF CONTAINS %@\",searchString];\n            if (self.searchArray != nil) {\n                [self.searchArray removeAllObjects];\n                self.searchArray = nil;\n            }\n            LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n            self.searchArray = [NSMutableArray arrayWithArray:[self.urlNameArray filteredArrayUsingPredicate:predicate]];  //搜索的匹配名字的数组\n            NSMutableArray *nameArray = [NSMutableArray arrayWithArray:self.urlNameArray];\n            [nameArray removeObjectsInArray:self.searchArray];\n            for (NSString *title in nameArray) { //移除sortedArray中所有与nameArray中相同的数据\n                [self deleSortArrayWithTitle:title localURL:urlConfig];\n            }\n        }\n        [m_pTableView reloadData];\n    }\n    \n    return YES;\n}\n\n- (void)deleSortArrayWithTitle:(NSString *)title localURL:(LJLocalURLConfig *)urlConfig {\n    for (NSMutableDictionary *dic in self.sortedArray) {\n        NSMutableArray *discriptionArray = [[NSMutableArray alloc] initWithArray:[dic allKeys]];\n        for (NSString *finalTitle in discriptionArray) {\n            if ([title isEqualToString:[urlC","relevantFile":"","relevantFileList":[],"filePath":"DebugMenu.mm","template":"objective-cpp","multiRes":{"hipilot":"onfigCapitalTestEnvCancel)\n                                                 name:self.accountAnalysisPlugin.debugTool.accountAnalysisDebugSwitchToTestEnvCancelNoti\n                                               object:nil];\n}\n\n- (NSArray *)luaPatchDatasource {\n    BOOL isRelEnv =","deepseek-chat-lite":"onfigCapitalTestEnv)","CodeQwen2.5-7B":"onfigCapitalTestEnv)","copilot":"n actionWithTitle:@\"确定\" style:UIAlertActionStyleCancel handler:nil];\n        UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@\"确定\" style:UIAlertActionStyleCancel"}},{"prefix":"            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"来源:%@\",[MePool sharedMePool].origin];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"所属:%@\",[MePool sharedMePool].belongTo];\n            }];\n            [alert addAction:okAction];\n            [alert addAction:cancelAction];\n            [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n            break;\n        }\n        case 6:\n        {\n            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"添加期货公司\" message:nil preferredStyle:UIAlertControllerStyleAlert];\n            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\n               }];\n            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {\n                NSString *companyname = alert.textFields.firstObject.text;\n                NSString *qsid = alert.textFields[1].text;\n                NSString *wtid = alert.textFields[2].text;\n                NSString *gtName = alert.textFields[3].text;\n\n                CompanyInfoModel *model = [[CompanyInfoModel alloc] init];\n                model.companyName = companyname;\n                model.companyQSID = qsid;\n                model.companyWtidArray = @[@{wtid:gtName}];\n                NSMutableArray *tempAry = [NSMutableArray arrayWithArray:[CompanyManager share].companyArrayInsec.firstObject];\n                [tempAry addObject:model];\n                NSMutableArray *tempCompanyArrayInsec = [NSMutableArray arrayWithArray:[CompanyManager share].companyArrayInsec];\n                [tempCompanyArrayInsec replaceObjectAtIndex:0 withObject:tempAry];\n                [CompanyManager share].companyArrayInsec = tempCompanyArrayInsec;\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"companyname:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"qsid:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"wtid:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"柜台:\"];\n            }];\n            [alert addAction:okAction];\n            [alert addAction:cancelAction];\n            [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n        }\n        case 7: {\n            [self debugForBindPhoneLimit];\n            break;\n        }\n        case 8: {\n            ChangeTradeDateViewController *viewController = [[ChangeTradeDateViewController alloc] init];\n            [[UIViewController getCurUIViewController] presentViewController:viewController animated:YES completion:nil];\n            break;\n        }\n        case 9: {\n            [[FUCommonSwitchModel sharedFUCommonSwitchModel] switchUseAMProtocol];\n            break;\n        }\n        case 10: {\n            //新协议开关\n            NSString *commonJson = [FUCommonSwitchModel sharedFUCommonSwitchModel].useNewProtocol?@\"yes\":@\"no\";\n            NSString *msg = [NSString stringWithFormat:@\"useNewProtocol:%@\\n\",commonJson];\n            [LJCustomizedUITools dismissAlertController];\n            [LJCustomizedUITools alertControllerWithTitle:@\"开关\" message:msg preferredStyle:UIAlertControllerStyleAlert cancelHandler:^(UIAlertAction *action) {\n                \n            } OKHandler:^(UIAlertAction *action) {\n                \n            } target:nil];\n            break;\n        }\n        case 11: {\n            //日结单下载参数加密\n            QHT3desEncryptViewController *viewController = [[QHT3desEncryptViewController alloc] init];\n            [[UIViewController getCurUIViewController].navigationController pushViewController:viewController animated:YES];\n            break;\n        }\n        case 12: {\n            //强制开启ip检测超时\n            NSString *result = [[NSUserDefaults standardUserDefaults] objectForKey:@\"averageTimeOut\"];\n            if ([result isEqualToString:@\"1\"]) {\n                [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"averageTimeOut\"];\n            } else {\n                [[NSUserDefaults standardUserDefaults] setObject:@\"1\" forKey:@\"averageTimeOut\"];\n            }\n            break;\n        }\n        case 13: {\n            self.accountAnalysisPlugin.debugTool.isOpenCtpBigData = !self.accountAnalysisPlugin.debugTool.isOpenCtpBigData;\n            break;\n        }\n        case 14: {\n            [self.accountAnalysisPlugin.debugTool showDebugTool];\n            break;\n        }\n        case 15: {\n            [self showCustomToastAlertController];\n            break;\n        }\n        case 16: {\n            NSString *debugJavaScript = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_DEBUG_JS];\n            if ([debugJavaScript isEqualToString:isOK]) {\n                debugJavaScript = isNO;\n            } else {\n                debugJavaScript = isOK;\n            }\n            [[UserDefaultsPool sharedUserDefaultsPool] setObject:debugJavaScript forKey:KEY_IS_DEBUG_JS];\n            break;\n        }\n        case 17: {\n            if ([LJDrawLineCloudStoreManager shared].requestUrlStr &&\n                [[LJDrawLineCloudStoreManager shared].requestUrlStr isEqualToString:DLUrlDomainTest]) {\n                [LJDrawLineCloudStoreManager shared].requestUrlStr = DLUrlDomain;\n            } else {\n                [LJDrawLineCloudStoreManager shared].requestUrlStr = DLUrlDomainTest;\n            }\n            break;\n        }\n        case 18: {\n            NSArray *actions = [self luaPatchDatasource];\n            NSMutableArray *titles = [NSMutableArray new];\n            NSMutableArray *values = [NSMutableArray new];\n            for (NSDictionary *dict in actions) {\n                [titles addObject:dict[kDebugMenuNodeNameKey]];\n                [values addObject:dict[kDebugMenuNodeClickKey]];\n            }\n            [LJCustomizedUITools alertControllerWithTitle:@\"热修复\" \n                                                  message:nil\n                                           preferredStyle:UIAlertControllerStyleActionSheet\n                                              cancelTitle:@\"取消\"\n                                            cancelHandler:nil\n                                              cancelStyle:UIAlertActionStyleCancel\n                                              othersTitle:titles\n                                            othersHandler:values];\n            break;\n        }\n        default:\n            break;\n    }\n#endif\n}\n\n- (void)addObserverForSwitchAccountAnalysisEnv {\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(configCapitalTestEnv)\n                                                 name:self.accountAnalysisPlugin.debugTool.accountAnalysisDebugSwitchToTestEnvNoti\n                                               object:nil];\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(configCapitalPreTestEnv)\n                                                 name:self.accountAnalysisPlugin.debugTool.accountAnalysisDebugSwitchToPreEnvNoti\n                                               object:nil];\n}\n\n/// 小财神预发布环境： 121.52.2","infill":" !isRelEnv ? @\"测试\" : @\"生成\"\n        UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@\"确定\" style:UIAlertActionStyleCancel handler:nil];\n        [alert addAction:sureAction];\n        [[UIViewController getCurUIV","suffix":"iewController] presentViewController:alert animated:YES completion:nil];\n        \n    };\n    NSArray *d = @[\n        @{kDebugMenuNodeNameKey:@\"执行剪切板脚本\",kDebugMenuNodeClickKey:block},\n        @{kDebugMenuNodeNameKey:@\"关闭测试脚本\",kDebugMenuNodeClickKey:block2},\n        @{kDebugMenuNodeNameKey:@\"启动时执行上次脚本\",kDebugMenuNodeClickKey:block3},\n        @{kDebugMenuNodeNameKey:@\"启动时不执行脚本\",kDebugMenuNodeClickKey:block4},\n        @{kDebugMenuNodeNameKey:@\"执行上次测试脚本\",kDebugMenuNodeClickKey:block5},\n        @{kDebugMenuNodeNameKey:[NSString stringWithFormat:@\"切换环境(当前：%@)\", isRelEnv ? @\"生成\" : @\"测试\"],kDebugMenuNodeClickKey:block6},\n    ];\n    \n    return d;\n}\n\n#pragma mark - UITableViewDelegate\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {\n    return 140;\n}\n\n- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {\n    return 30;\n}\n\n- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {\n    UILabel *headLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 20, SCREEN_WIDTH, 30)];\n    headLabel.backgroundColor = [UIColor darkGrayColor];\n    headLabel.text = self.nameArray[section];\n    return headLabel;\n}\n\n#pragma mark - UITableViewDataSource\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {\n    return self.nameArray.count;\n}\n\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    NSArray *array = self.sortedArray;\n    NSDictionary *dic = array[section];\n    return dic.count-1;\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n   \n    NSDictionary *configDic = [[NSDictionary alloc] initWithDictionary:self.sortedArray[indexPath.section]];\n    NSMutableArray *discriptionArray = [[NSMutableArray alloc] initWithArray:[configDic allKeys]];\n    // 删除描述中的 排序 标签\n    if ([discriptionArray containsObject:@\"sort\"]) {\n        [discriptionArray removeObject:@\"sort\"];\n    }\n    NSString *title = discriptionArray[indexPath.row];\n    static NSString *identifier = @\"m_pCell\";\n    MPTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];\n    if (cell == nil) {\n        cell = [[[NSBundle mainBundle] loadNibNamed:@\"MPTableViewCell\" owner:self options:nil] firstObject];\n//        [cell.isDebugButton addTarget:self action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];\n        [cell.isBigDebugButton addTarget:self action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];\n    }\n    LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n    cell.itemLabel.text = [urlConfig.dicURLDescription objectForKey:title];\n    cell.officalTextField.text = [configDic objectForKey:title];\n    cell.officalTextField.delegate = self;\n    cell.officalTextField.tag = 0;\n    if ([[configDic objectForKey:title] isEqualToString:@\"\"]) {\n        cell.officalTextField.text = @\"暂无正式地址\";\n    }\n    \n    cell.testTextField.text = [urlConfig.dicURLTest objectForKey:title];\n    cell.testTextField.delegate = self;\n    // testTextField.tag 范围：100-707之间的几个\n    cell.testTextField.tag = (indexPath.section + 1) * 100 + indexPath.row;\n    cell.isBigDebugButton.tag = (indexPath.section + 1) * 100 + indexPath.row;\n    if ([[urlConfig.dicURLTest objectForKey:title] isEqualToString:@\"\"]) {\n        cell.testTextField.text = @\"\";\n        cell.testTextField.placeholder = @\"请输入测试地址\";\n    }\n    \n    BOOL isSelected = [[urlConfig.configIsDebugDic objectForKey:title] integerValue];\n    // isDebug.tag 范围：1000-7007之间的几个\n//    cell.isDebugButton.tag = (indexPath.section + 1) * 1000 + indexPath.row;\n    cell.isBigDebugButton.tag = (indexPath.section + 1) * 1000 + indexPath.row;\n    if (isSelected) {\n        cell.isDebugButton.backgroundColor = [UIColor redColor];\n    } else {\n        cell.isDebugButton.backgroundColor = [UIColor whiteColor];\n    }\n    // 用于点击按钮后获取 url的key\n//    cell.isDebugButton.titleLabel.text = title;\n    cell.isBigDebugButton.titleLabel.text = title;\n    cell.isDebugButton.tintColor = [UIColor whiteColor];\n    return cell;\n}\n\n#pragma mark - UIPickerViewDataSource\n- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {\n    return 2;\n}\n\n- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {\n    if(component == 0) {\n        return\t[m_pServers count];\n    } else {\n        return [m_pPorts count];\n    }\n}\n\n#pragma mark - UIPickerViewDelegate\n- (CGFloat)pickerView:(UIPickerView *)pickerView widthForComponent:(NSInteger)component {\n    if(component == 0) {\n        return\t200\t;\n    } else {\n        return 80;\n    }\n}\n\n- (CGFloat)pickerView:(UIPickerView *)pickerView rowHeightForComponent:(NSInteger)component {\n    return 50;\n}\n\n- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component {\n    if(component == 0) {\n        return [m_pServers objectAtIndex:row];\n    } else {\n        return\t[m_pPorts objectAtIndex:row];\n    }\n}\n\n- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component {\n    NSInteger a1 =\t[m_pPickView selectedRowInComponent:0];\n    NSInteger a2 =\t[m_pPickView selectedRowInComponent:1];\n    NSString* server = [m_pServers objectAtIndex:a1];\n    NSString* port = [m_pPorts objectAtIndex:a2];\n    [m_pBtn setTitle:[NSString stringWithFormat:@\"替换服务器-%@:%@\",server,port] forState:UIControlStateNormal];\n}\n\n#pragma mark - UITextFieldDelegate\n- (void)textFieldDidEndEditing:(UITextField *)textField {\n    if (textField.tag != 0) {\n        NSInteger section = textField.tag / 100 - 1;\n        NSInteger row = textField.tag % 100;\n        UIButton *button = (UIButton *)[m_pTableView viewWithTag:(section + 1) * 1000 + row];\n        NSString *keyStr = button.titleLabel.text;\n        LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n        if ([[urlConfig.configIsDebugDic objectForKey:keyStr] integerValue]) {\n            [urlConfig.dicURLTest setValue:textField.text forKey:keyStr];\n        }\n    }\n}\n\n- (BOOL)textFieldShouldReturn:(UITextField *)textField {\n    [textField resignFirstResponder];\n    return YES;\n}\n\n- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string {\n    if (textField.tag == searchTextField_Tag) {\n        self.sortedArray = nil; //每一次输入搜索，重置sortedArray\n        NSString *searchString = [textField.text stringByReplacingCharactersInRange:range withString:string];\n        if ([searchString isEqualToString:@\"\"] || searchString == nil) {\n            \n        } else {\n            NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"SELF CONTAINS %@\",searchString];\n            if (self.searchArray != nil) {\n                [self.searchArray removeAllObjects];\n                self.searchArray = nil;\n            }\n            LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n            self.searchArray = [NSMutableArray arrayWithArray:[self.urlNameArray filteredArrayUsingPredicate:predicate]];  //搜索的匹配名字的数组\n            NSMutableArray *nameArray = [NSMutableArray arrayWithArray:self.urlNameArray];\n            [nameArray removeObjectsInArray:self.searchArray];\n            for (NSString *title in nameArray) { //移除sortedArray中所有与nameArray中相同的数据\n                [self deleSortArrayWithTitle:title localURL:urlConfig];\n            }\n        }\n        [m_pTableView reloadData];\n    }\n    \n    return YES;\n}\n\n- (void)deleSortArrayWithTitle:(NSString *)title localURL:(LJLocalURLConfig *)urlConfig {\n    for (NSMutableDictionary *dic in self.sortedArray) {\n        NSMutableArray *discriptionArray = [[NSMutableArray alloc] initWithArray:[dic allKeys]];\n        for (NSString *finalTitle in discriptionArray) {\n            if ([title isEqualToString:[urlConfig.dicURLDescription objectForKey:finalTitle]]) {\n                [dic removeObjectFo","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"50.168 生成环境：121.52.248.168\n- (NSArray *)luaPatchDatasource {\n    NSInteger indexRow = -1;\n    NSInteger indexSection = -1;","deepseek-chat-lite":"34.10:8080","CodeQwen2.5-7B":"0.100:8080","copilot":" !isRelEnv ? @\"测试\" : @\"生成\"\n        UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@\"确定\" style:UIAlertActionStyleCancel handler:nil];\n        [alert addAction:sureAction];\n        [[UIViewController getCurUIV"}},{"prefix":"               }];\n            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {\n                NSString *origin = alert.textFields.firstObject.text;\n                NSString *belongTo = alert.textFields.lastObject.text;\n                [MePool sharedMePool].origin = origin;\n                [MePool sharedMePool].belongTo = belongTo;\n                [[UserDefaultsPool sharedUserDefaultsPool] setObject:origin forKey:@\"keyUserOrigin\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"来源:%@\",[MePool sharedMePool].origin];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"所属:%@\",[MePool sharedMePool].belongTo];\n            }];\n            [alert addAction:okAction];\n            [alert addAction:cancelAction];\n            [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n            break;\n        }\n        case 6:\n        {\n            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"添加期货公司\" message:nil preferredStyle:UIAlertControllerStyleAlert];\n            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\n               }];\n            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {\n                NSString *companyname = alert.textFields.firstObject.text;\n                NSString *qsid = alert.textFields[1].text;\n                NSString *wtid = alert.textFields[2].text;\n                NSString *gtName = alert.textFields[3].text;\n\n                CompanyInfoModel *model = [[CompanyInfoModel alloc] init];\n                model.companyName = companyname;\n                model.companyQSID = qsid;\n                model.companyWtidArray = @[@{wtid:gtName}];\n                NSMutableArray *tempAry = [NSMutableArray arrayWithArray:[CompanyManager share].companyArrayInsec.firstObject];\n                [tempAry addObject:model];\n                NSMutableArray *tempCompanyArrayInsec = [NSMutableArray arrayWithArray:[CompanyManager share].companyArrayInsec];\n                [tempCompanyArrayInsec replaceObjectAtIndex:0 withObject:tempAry];\n                [CompanyManager share].companyArrayInsec = tempCompanyArrayInsec;\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"companyname:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"qsid:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"wtid:\"];\n            }];\n            [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\n                textField.placeholder = [NSString stringWithFormat:@\"柜台:\"];\n            }];\n            [alert addAction:okAction];\n            [alert addAction:cancelAction];\n            [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n        }\n        case 7: {\n            [self debugForBindPhoneLimit];\n            break;\n        }\n        case 8: {\n            ChangeTradeDateViewController *viewController = [[ChangeTradeDateViewController alloc] init];\n            [[UIViewController getCurUIViewController] presentViewController:viewController animated:YES completion:nil];\n            break;\n        }\n        case 9: {\n            [[FUCommonSwitchModel sharedFUCommonSwitchModel] switchUseAMProtocol];\n            break;\n        }\n        case 10: {\n            //新协议开关\n            NSString *commonJson = [FUCommonSwitchModel sharedFUCommonSwitchModel].useNewProtocol?@\"yes\":@\"no\";\n            NSString *msg = [NSString stringWithFormat:@\"useNewProtocol:%@\\n\",commonJson];\n            [LJCustomizedUITools dismissAlertController];\n            [LJCustomizedUITools alertControllerWithTitle:@\"开关\" message:msg preferredStyle:UIAlertControllerStyleAlert cancelHandler:^(UIAlertAction *action) {\n                \n            } OKHandler:^(UIAlertAction *action) {\n                \n            } target:nil];\n            break;\n        }\n        case 11: {\n            //日结单下载参数加密\n            QHT3desEncryptViewController *viewController = [[QHT3desEncryptViewController alloc] init];\n            [[UIViewController getCurUIViewController].navigationController pushViewController:viewController animated:YES];\n            break;\n        }\n        case 12: {\n            //强制开启ip检测超时\n            NSString *result = [[NSUserDefaults standardUserDefaults] objectForKey:@\"averageTimeOut\"];\n            if ([result isEqualToString:@\"1\"]) {\n                [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"averageTimeOut\"];\n            } else {\n                [[NSUserDefaults standardUserDefaults] setObject:@\"1\" forKey:@\"averageTimeOut\"];\n            }\n            break;\n        }\n        case 13: {\n            self.accountAnalysisPlugin.debugTool.isOpenCtpBigData = !self.accountAnalysisPlugin.debugTool.isOpenCtpBigData;\n            break;\n        }\n        case 14: {\n            [self.accountAnalysisPlugin.debugTool showDebugTool];\n            break;\n        }\n        case 15: {\n            [self showCustomToastAlertController];\n            break;\n        }\n        case 16: {\n            NSString *debugJavaScript = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_DEBUG_JS];\n            if ([debugJavaScript isEqualToString:isOK]) {\n                debugJavaScript = isNO;\n            } else {\n                debugJavaScript = isOK;\n            }\n            [[UserDefaultsPool sharedUserDefaultsPool] setObject:debugJavaScript forKey:KEY_IS_DEBUG_JS];\n            break;\n        }\n        case 17: {\n            if ([LJDrawLineCloudStoreManager shared].requestUrlStr &&\n                [[LJDrawLineCloudStoreManager shared].requestUrlStr isEqualToString:DLUrlDomainTest]) {\n                [LJDrawLineCloudStoreManager shared].requestUrlStr = DLUrlDomain;\n            } else {\n                [LJDrawLineCloudStoreManager shared].requestUrlStr = DLUrlDomainTest;\n            }\n            break;\n        }\n        case 18: {\n            NSArray *actions = [self luaPatchDatasource];\n            NSMutableArray *titles = [NSMutableArray new];\n            NSMutableArray *values = [NSMutableArray new];\n            for (NSDictionary *dict in actions) {\n                [titles addObject:dict[kDebugMenuNodeNameKey]];\n                [values addObject:dict[kDebugMenuNodeClickKey]];\n            }\n            [LJCustomizedUITools alertControllerWithTitle:@\"热修复\" \n                                                  message:nil\n                                           preferredStyle:UIAlertControllerStyleActionSheet\n                                              cancelTitle:@\"取消\"\n                                            cancelHandler:nil\n                                              cancelStyle:UIAlertActionStyleCancel\n                                              othersTitle:titles\n                                            othersHandler:values];\n            break;\n        }\n        default:\n            break;\n    }\n#endif\n}\n\n- (void)addObserverForSwitchAccountAnalysisEnv {\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(configCapitalTestEnv)\n  ","infill":"ealEnv = !isRelEnv;\n        [NSUs","suffix":"erDefaults.standardUserDefaults setBool:nextIsRealEnv forKey:@\"HXHotFixEnv\"];\n        \n        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"热修复环境切换提示\" \n                                                                       // message:[NSString stringWithFormat:@\"请链接主站%@环境，并重启app\", nextIsRealEnv ? @\"生成\" : @\"测试\"]\n                                                                       message:[NSString stringWithFormat:@\"请链接主站%@环境，并重启app\", nextIsRealEnv ? @\"生成\" : \n                                                                preferredStyle:UIAlertControllerStyleAlert];\n        UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@\"确定\" style:UIAlertActionStyleCancel handler:nil];\n        [alert addAction:sureAction];\n        [[UIViewController getCurUIViewController] presentViewController:alert animated:YES completion:nil];\n        \n    };\n    NSArray *d = @[\n        @{kDebugMenuNodeNameKey:@\"执行剪切板脚本\",kDebugMenuNodeClickKey:block},\n        @{kDebugMenuNodeNameKey:@\"关闭测试脚本\",kDebugMenuNodeClickKey:block2},\n        @{kDebugMenuNodeNameKey:@\"启动时执行上次脚本\",kDebugMenuNodeClickKey:block3},\n        @{kDebugMenuNodeNameKey:@\"启动时不执行脚本\",kDebugMenuNodeClickKey:block4},\n        @{kDebugMenuNodeNameKey:@\"执行上次测试脚本\",kDebugMenuNodeClickKey:block5},\n        @{kDebugMenuNodeNameKey:[NSString stringWithFormat:@\"切换环境(当前：%@)\", isRelEnv ? @\"生成\" : @\"测试\"],kDebugMenuNodeClickKey:block6},\n    ];\n    \n    return d;\n}\n\n#pragma mark - UITableViewDelegate\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {\n    return 140;\n}\n\n- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {\n    return 30;\n}\n\n- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {\n    UILabel *headLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 20, SCREEN_WIDTH, 30)];\n    headLabel.backgroundColor = [UIColor darkGrayColor];\n    headLabel.text = self.nameArray[section];\n    return headLabel;\n}\n\n#pragma mark - UITableViewDataSource\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {\n    return self.nameArray.count;\n}\n\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    NSArray *array = self.sortedArray;\n    NSDictionary *dic = array[section];\n    return dic.count-1;\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n   \n    NSDictionary *configDic = [[NSDictionary alloc] initWithDictionary:self.sortedArray[indexPath.section]];\n    NSMutableArray *discriptionArray = [[NSMutableArray alloc] initWithArray:[configDic allKeys]];\n    // 删除描述中的 排序 标签\n    if ([discriptionArray containsObject:@\"sort\"]) {\n        [discriptionArray removeObject:@\"sort\"];\n    }\n    NSString *title = discriptionArray[indexPath.row];\n    static NSString *identifier = @\"m_pCell\";\n    MPTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];\n    if (cell == nil) {\n        cell = [[[NSBundle mainBundle] loadNibNamed:@\"MPTableViewCell\" owner:self options:nil] firstObject];\n//        [cell.isDebugButton addTarget:self action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];\n        [cell.isBigDebugButton addTarget:self action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];\n    }\n    LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n    cell.itemLabel.text = [urlConfig.dicURLDescription objectForKey:title];\n    cell.officalTextField.text = [configDic objectForKey:title];\n    cell.officalTextField.delegate = self;\n    cell.officalTextField.tag = 0;\n    if ([[configDic objectForKey:title] isEqualToString:@\"\"]) {\n        cell.officalTextField.text = @\"暂无正式地址\";\n    }\n    \n    cell.testTextField.text = [urlConfig.dicURLTest objectForKey:title];\n    cell.testTextField.delegate = self;\n    // testTextField.tag 范围：100-707之间的几个\n    cell.testTextField.tag = (indexPath.section + 1) * 100 + indexPath.row;\n    cell.isBigDebugButton.tag = (indexPath.section + 1) * 100 + indexPath.row;\n    if ([[urlConfig.dicURLTest objectForKey:title] isEqualToString:@\"\"]) {\n        cell.testTextField.text = @\"\";\n        cell.testTextField.placeholder = @\"请输入测试地址\";\n    }\n    \n    BOOL isSelected = [[urlConfig.configIsDebugDic objectForKey:title] integerValue];\n    // isDebug.tag 范围：1000-7007之间的几个\n//    cell.isDebugButton.tag = (indexPath.section + 1) * 1000 + indexPath.row;\n    cell.isBigDebugButton.tag = (indexPath.section + 1) * 1000 + indexPath.row;\n    if (isSelected) {\n        cell.isDebugButton.backgroundColor = [UIColor redColor];\n    } else {\n        cell.isDebugButton.backgroundColor = [UIColor whiteColor];\n    }\n    // 用于点击按钮后获取 url的key\n//    cell.isDebugButton.titleLabel.text = title;\n    cell.isBigDebugButton.titleLabel.text = title;\n    cell.isDebugButton.tintColor = [UIColor whiteColor];\n    return cell;\n}\n\n#pragma mark - UIPickerViewDataSource\n- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {\n    return 2;\n}\n\n- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {\n    if(component == 0) {\n        return\t[m_pServers count];\n    } else {\n        return [m_pPorts count];\n    }\n}\n\n#pragma mark - UIPickerViewDelegate\n- (CGFloat)pickerView:(UIPickerView *)pickerView widthForComponent:(NSInteger)component {\n    if(component == 0) {\n        return\t200\t;\n    } else {\n        return 80;\n    }\n}\n\n- (CGFloat)pickerView:(UIPickerView *)pickerView rowHeightForComponent:(NSInteger)component {\n    return 50;\n}\n\n- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component {\n    if(component == 0) {\n        return [m_pServers objectAtIndex:row];\n    } else {\n        return\t[m_pPorts objectAtIndex:row];\n    }\n}\n\n- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component {\n    NSInteger a1 =\t[m_pPickView selectedRowInComponent:0];\n    NSInteger a2 =\t[m_pPickView selectedRowInComponent:1];\n    NSString* server = [m_pServers objectAtIndex:a1];\n    NSString* port = [m_pPorts objectAtIndex:a2];\n    [m_pBtn setTitle:[NSString stringWithFormat:@\"替换服务器-%@:%@\",server,port] forState:UIControlStateNormal];\n}\n\n#pragma mark - UITextFieldDelegate\n- (void)textFieldDidEndEditing:(UITextField *)textField {\n    if (textField.tag != 0) {\n        NSInteger section = textField.tag / 100 - 1;\n        NSInteger row = textField.tag % 100;\n        UIButton *button = (UIButton *)[m_pTableView viewWithTag:(section + 1) * 1000 + row];\n        NSString *keyStr = button.titleLabel.text;\n        LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n        if ([[urlConfig.configIsDebugDic objectForKey:keyStr] integerValue]) {\n            [urlConfig.dicURLTest setValue:textField.text forKey:keyStr];\n        }\n    }\n}\n\n- (BOOL)textFieldShouldReturn:(UITextField *)textField {\n    [textField resignFirstResponder];\n    return YES;\n}\n\n- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string {\n    if (textField.tag == searchTextField_Tag) {\n        self.sortedArray = nil; //每一次输入搜索，重置sortedArray\n        NSString *searchString = [textField.text stringByReplacingCharactersInRange:range withString:string];\n        if ([searchString isEqualToString:@\"\"] || searchString == nil) {\n            \n        } else {\n            NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"SELF CONTAINS %@\",searchString];\n            if (self.searchArray != nil) {\n                [self.searchArray removeAllObjects];\n                self.searchArray = nil;\n            }\n            LJLocalURLConfig *urlConfig = [LJLocalURLConfig sharedInstance];\n            self.searchArray = [NSMutableArray arrayWithArray:[self.urlNameArray filteredArrayUsingPredicate:predicate]];  //搜索的匹配名字的数组\n            NSMutableArray *nam","relevantFile":"","relevantFileList":[],"filePath":"DebugMenu.mm","template":"objective-cpp","multiRes":{"hipilot":"                                             name:kSwitchAccountAnalysisEnv","deepseek-chat-lite":"                                               name:kNotificationNameConfigCapitalTestEnv","CodeQwen2.5-7B":"                                       name:HXConfigCapitalTestEnvNotification","copilot":"ealEnv = !isRelEnv;\n        [NSUs"}},{"prefix":"#import <WTTradeModule/TradeBuyOrSellDefine.h>\n#import <HXBase/NSDictionary+Safety.h>\n#import <HXBase/NSArray+Safety.h>\n#import \"WTAccountDefine.h\"\n#import \"WTTradePositionView.h\"\n#import \"WTTradePostionManager.h\"\n#import \"TradeChiCangModel.h\"\n#import <HXTool/UIView+Uilities.h>\n#import \"NSString+TradeDataCal.h\"\n#import <HXTool/InternetTimeTool.h>\n#import <HXTool/NSArray+SafetyOperation.h>\n#import <HXDataTypeConvertor/NSArray+HXDataTypeConvertor.h>\n#import \"HXWTWaterMarkViewManager.h\"\n#import \"WTAccountInformationDisplayManager.h\"\n#import \"RQMCSegmentSearchView.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"RQMCKeRongQuanTableView.h\"\n#import \"KeRongQuanDataManager.h\"\n#import <HXDataTypeConvertor/NSDictionary+HXDataTypeConvertor.h>\n#import \"RQMCKeRongQuanTableHeadView.h\"\n#import \"RQMCDefines.h\"\n#import \"UIFont+HXFont.h\"\n#import \"WTTradeMMSetLogManager.h\"\n#import \"WTTradeFenshiView.h\"\n#import \"HXKLineTechDelegate.h\"\n#import \"HXSimpleQuotationModuleDelegate.h\"\n#import \"HXKLineModuleDelegate.h\"\n#import \"WTTradeChiCangBuySellPointManager.h\"\n#import \"WTTradePerformOptManager.h\"\n#import <HXCategoryTool/NSMutableDictionary+HXSafety.h>\n#import \"WTTradeBuySellKlineView.h\"\n#import \"WTQuotationService.h\"\n#import \"WTQuotationSimpleParamModel.h\"\n#import \"WTTradeHangqingDataManager.h\"\n\n#define WT_RQMC_SOURCE_SEARCH_PAGEID  2850\n\n#define PostionViewHeight 22\n\nNSString *const SCRZRQHasPullDownTradeFenshi = @\"SCRZRQHasPullDownTradeFenshi\";\n#define KVOKeyPath_HANGQINGSTATUS @\"directionDown\"\n#define STOCKISCLICKED @1\n#define STATEDOWN @1\n\n@interface RZRQSellViewController ()<rzrqTradeActionDelegate,RZRQScrollViewDragDelegate,WTNoticeModelViewDelegate,UIScrollViewDelegate, RZRQChicangGridTableViewDelegate, RQMCSegmentSearchViewDelegate, RZRQTradeStateChangeDelegate, WTTradeFenshiViewDelegate>\n\n@property (nonatomic, weak) IBOutlet UIView *tradeActionBackgroundView;\n@property (weak, nonatomic) IBOutlet UIView *tradeActionBackView;\n@property (nonatomic, weak) IBOutlet RZRQAction *tradeAction;\n@property (nonatomic, weak) IBOutlet WeiTuoMaiMaiPan *maiMaiPan;\n@property (nonatomic, weak) IBOutlet RZRQChicangGridTableView *tableView;\n@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;\n@property (nonatomic,assign) WTRZRQTradeScrollState scrollState;\n@property (nonatomic, weak) WTHangqingStatusBarView *hangqingStatus;    //行情状态栏\n@property (nonatomic, strong) WTTradeTopNoticeView *topNoticeView;  //顶部停靠视图\n@property (nonatomic,assign) BOOL topViewHasShow;\n@property (nonatomic,assign) BOOL isHasNoticeView;  //是否有公告位，在reloadViewWithNotice方法中根据是否显示公告位对其修改\n@property (nonatomic,assign) BOOL isFirstPageType;  //页面类型，第一种进入页面无公告位，第二种进入页面有公告位\n@property (nonatomic,assign) BOOL isOnlyClose;  //仅调用tradeActionDidClearStock方法清除股票\n@property (nonatomic, copy) NSString *selectStockCode;              //当前选中的股票代码\n@property (nonatomic, copy) NSString *selectStockMarket;            //当前选中的市场代码\n@property (nonatomic, strong) WTNoticeModelView * noticeModelView;  //广告运营位\n@property (nonatomic, strong) id<WTQuotationRequestProtocol> hqProvider;\n@property (nonatomic,strong) NSMutableDictionary *hqParams;\n@property (nonatomic, strong) WTAccountInfor *oldAccountInfor;  //登录保存用户信息；注意：refreshpage保存后立即使用持仓数据为空\n@property (nonatomic, strong) WTTradePositionView *positionView;    //个股和总仓位显示栏\n@property (nonatomic, assign) BOOL isTenPan;\n@property (nonatomic,strong) TradeChiCangModel *chiCangData;\n@property (nonatomic,strong) HXRzrqZhicanInfo *rzrqZicanData; //得到rzrq资产信息\n\n@property (nonatomic, assign) RZRQ_Trade_Type tradeType;\n\n@property (nonatomic, strong) UIView *headCeilingView;\n@property (nonatomic, strong) RQMCSegmentSearchView *segmentSearchView;\n@property (nonatomic, strong) RQMCKeRongQuanTableView *keRongQuanTableView;\n\n@property (nonatomic, assign) int segmentSelectedIndex;\n@property (nonatomic, assign) BOOL canRequestKeRongQuanData; //是否可以请求可融券源数据\n@property (nonatomic, strong) WTTradeFenshiView *fenshiView;\n\n@end\n\n@implementation RZRQSellViewController\n\n- (void)dealloc{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    [self.hangqingStatus removeObserver:self forKeyPath:@\"directionDown\"];\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self registerKlineDelegate];\n    [self initUI];\n    [self.hangqingStatus addObserver:self forKeyPath:KVOKeyPath_HANGQINGSTATUS options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:nil];\n    self.canRequestKeRongQuanData = YES;\n    [self makeConstraints];\n\n}\n- (void)initUI{\n    self.scrollState = [[AMUIPublicProxy GetPublicValue:@\"RZRQFenShiShowStatus\"] isEqual:@1] ? WTRZRQTradeScrollStateShow : WTRZRQTradeScrollStateDismiss;\n    [self.tradeAction onFinishInflate];\n    self.tradeAction.rzrqTradeStateChangeDelegate = self;\n    [self.scrollView addSubview:self.fenshiView];\n    [self.scrollView.superview addSubview:self.topNoticeView];\n    self.scrollView.alwaysBounceVertical = YES;\n    //SCJYIIP-121 修复交易下单价格加减按钮点击不高亮问题\n    self.scrollView.delaysContentTouches = NO;\n    _tradeAction.rzrqTradeActionDelegate = self;\n    _tableView.rzrqTradeScrollDelegate = self;\n    _tableView.rzrqChicangGridTableViewdelegate = self;\n    _scrollView.delegate = self;\n    _isFirstPageType = YES;\n    _isHasNoticeView = NO;\n    _oldAccountInfor = [[HXWTAccountManager sharedInstance] getCurAccountInfor];//登陆保存账号信息\n    _scrollView.showsVerticalScrollIndicator = NO;\n    [_maiMaiPan onFinishInflate];\n    [_tableView onFinishInflate];\n    [_tradeAction setPageId:2844];\n    [_maiMaiPan setPageId:2844];\n    [_tableView setPageId:2844];\n    _tableView.autoresizingMask = UIViewAutoresizingNone;\n    [self resetBackGroundColor];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(adjustFrame) name:UIApplicationDidChangeStatusBarFrameNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(themeChange) name:ThemeVersionNotification object:nil];\n    //设置行情栏\n    self.hangqingStatus = self.topNoticeView.hangqingStatusBar;\n    self.hangqingStatus.userInteractionEnabled = YES;\n    self.hangqingStatus.logObject = WT_CBAS_OBJ_MAICHU_RZRQ;\n    _topViewHasShow = NO;\n    WeakObj(self);\n    [self.hangqingStatus setClickHandler:^(BOOL directDown) {\n        StrongObj(selfWeak);\n        [selfWeakStrong changeFenShiViewState];\n    }];\n    [self.hangqingStatus setHQClickHandler:^{\n        [selfWeak jumpToHangQing];\n        [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_MAICHU_RZRQ, @\"fenshi.goto\") actionType:ClickAction];\n    }];\n    [self initNoticeView];\n    \n    //添加仓位栏\n    self.isTenPan = [WTTradePostionManager isTenPan];\n    CGFloat tradeActionWidth = IS_IPHONE_WIDTH_SMALL ? 195 : 189 * Screen_width / 320;\n    self.positionView = [[WTTradePositionView alloc] initWithFrame:CGRectMake(0, _tradeAction.frame.origin.y + _tradeAction.getQuickBuyOrSellButtonBottom, Screen_width, PostionViewHeight)];\n    self.positionView.positionViewType = WTTradePositionViewTypeOld;\n    [self.scrollView addSubview:self.positionView];\n    [self.positionView setLeftAlignment:16 rightAlignment:tradeActionWidth-9]; //设置仓位 label 的左右对齐点\n    self.positionView.alpha = 0;\n    self.positionView.hidden = YES;\n    \n    [self initSegmentView];\n}\n\n- (void)registerKlineDelegate {\n    HXKLineTechDelegate *delegate = [[HXKLineTechDelegate alloc] init];\n    HXSimpleQuotationModuleDelegate *quotationDelegate = [[HXSimpleQuotationModuleDelegate alloc] init];\n    HXKLineModuleDelegate *klineDelegate = [[HXKLineModuleDelegate alloc] init];\n    NSDictionary *dic = @{\n        @\"HXTechDelegate\" : delegate,\n        @\"HXSimpleQuotationDelegate\": quotationDelegate,\n        @\"HXKLineDelegate\": klineDelegate\n    };\n    [HXKLine registerKLineDelegates:dic];\n}\n\n- (void)initNoticeView {\n    self.noticeModelView = [[WTNoticeModelView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, 40) withType:TRADE_OPERATION_NOTICE_PTMC];\n    self.noticeModel","infill":"TopDescShowDescStringWithPrice:newPrice.string currentRate:zhangDieFu.string currentRise:zhangDieZhi.string dealMoney:chengjiaoe.string huangshou:haunshou.string];\n    ","suffix":"[params safetySetObject:newPrice.string forKey:@\"price\"];\n    [params safetySetObject:[zhangDieFu.string stringByReplacingOccurrencesOfString:@\"%\" withString:@\"\"] forKey:@\"zhangdiePercent\"];\n    [params safetySetObject:zhangDieFu.color forKey:@\"zhangdiePercentColor\"];\n    [params safetySetObject:zhangDieZhi.string forKey:@\"zhangdie\"];\n    [params safetySetObject:zhangDieZhi.color forKey:@\"zhangdieColor\"];\n    [self.hangqingStatus updateWithParams:params];\n    _tradeAction.dealPrice = [params thsStringForKey:@\"price\"];//根据请求到的改变最新现价，风控设置拦截使用\n}\n\n\n- (void)rzrqTradeAction:(RZRQAction *)action didChangePrice:(NSString *)price {\n    [self drawTradePriceLine:price];\n}\n\n- (void)tradeActionDidClearStock:(TradeAction *)action {\n    [[WTAccountInformationDisplayManager sharedInstance] clearStockInfo];\n    _isOnlyClose = YES;\n    [self.fenshiView tradeHQClearData];\n    [self unexpandFenshi];\n    self.selectStockCode = nil;\n    self.selectStockMarket = nil;\n    self.topViewHasShow = NO;\n    self.scrollState = WTRZRQTradeScrollStateDismiss;\n    [self.noticeModelView setPosition:CGPointMake(self.noticeModelView.position.x, 0)];\n    [self hideTopNoticeViewWithOnlyHideBlackNotice:NO needCleanBlackNoticeData:NO];\n    [self endDrawTradePriceLine:nil];\n    if (!self.isTenPan) {\n        if (action) {\n            [self positionViewShow:NO];\n        }\n    }else{\n        [self.positionView updatePositionWithStockPosition:-2 totalPosition:-2];\n    }\n}\n\n- (void)rzrqTradeActionDidLongPressPriceBtn:(RZRQAction *)action {\n    NSString *log = JOINT(WT_CBAS_OBJ_MAICHU_RZRQ, @\"price.longspin\");\n    if (log.length > 0) {\n        [ClientUserBehaviorLog sendLogWithLogobject:log actionType:ClickAction];\n    }\n}\n\n- (void)rzrqTradeActionDidLongPressAmountBtn:(RZRQAction *)action {\n    NSString *log = JOINT(WT_CBAS_OBJ_MAICHU_RZRQ, @\"number.longspin\");\n    if (log.length > 0) {\n        [ClientUserBehaviorLog sendLogWithLogobject:log actionType:ClickAction];\n    }\n}\n\n#pragma mark - 收起分时图\n- (void)closeTradeAction {\n    [self unexpandFenshi];\n}\n\n#pragma mark - 价格绘线\n\n- (void)beginDrawTradePriceLine:(NSString *) price{\n    [self.fenshiView fenshiViewBegainDrawPriceLine];\n}\n\n- (void)drawTradePriceLine:(NSString *) price{\n    [self.fenshiView fenshiViewUpdateDrawPriceLineWithPrice:price];\n}\n\n- (void)endDrawTradePriceLine:(NSString *) price{\n    [self.fenshiView fenshiViewEndDrawPriceLine];\n}\n#pragma mark - TopNoticeView Animation\n- (void)showTopNoticeViewWithOnlyShowHangqingBar\n{\n    if (self.selectStockCode.length <= 0) {\n        return;\n    }\n    [self doTopNoticeAnimationWithShowType:TradeTopShowType_ShowHQ completion:^() {\n        [self adjustFrame];\n        self.topViewHasShow = YES;\n    } needCleanBlackNoticeData:NO];\n    \n}\n- (void)hideTopNoticeViewWithOnlyHideBlackNotice:(BOOL)onlyHide needCleanBlackNoticeData:(BOOL)needClean\n{\n    [self doTopNoticeAnimationWithShowType:onlyHide ? TradeTopShowType_ShowHQ : TradeTopShowType_Hide completion:^() {\n        self.topViewHasShow = NO;\n        self.scrollState = WTRZRQTradeScrollStateDismiss;\n    } needCleanBlackNoticeData:needClean];\n}\n- (void)doTopNoticeAnimationWithShowType:(TradeTopShowType)type completion:(void (^)())completion needCleanBlackNoticeData:(BOOL)needClean\n{\n    CGFloat showHeight = [self.topNoticeView getShowHeightWithType:type]; //显示高度\n    CGFloat tableTopOffset = showHeight;\n    if (fabs(showHeight) > DBL_MIN) {\n        tableTopOffset = showHeight - 12.0;\n    }\n    [self.topNoticeView doAnimationWithShowType:type animations:^() {\n        CGRect frame = self.scrollView.frame;\n        if (!self.tableView.isUseOffsetOpt) {\n            frame.size.height = frame.size.height - tableTopOffset + frame.origin.y;\n        }\n        frame.origin.y = tableTopOffset;\n        self.scrollView.frame = frame;\n    } completion:^() {\n        if (completion) {\n            completion();\n        }\n    }];\n    \n    CGFloat noticeY = self.noticeModelView.frame.origin.y;\n    if ([self reloadViewWithNotice] && self.topNoticeView.hqStatusBarShowed && noticeY == 0 && type != TradeTopShowType_Hide) {\n        [self.noticeModelView setPosition:CGPointMake(self.noticeModelView.position.x, self.noticeModelView.position.y+12)];\n        if(self.tableView.frame.origin.y == 260){\n            [self changeTableView];\n        }\n    } else if (!_isFirstPageType && self.tableView.frame.origin.y == 260 && _isOnlyClose){\n        _isOnlyClose = NO;\n        [self changeTableView];\n    }\n    [self updatePositionViewUI];\n    \n}\n\n- (void)setHangqingGuideCount {\n    NSUserDefaults *ud = [NSUserDefaults standardUserDefaults];\n    NSInteger count = [ud integerForKey:kRZRQHangqingStatusBarGuideCount];\n    [ud setInteger:(count + 1) forKey:kRZRQHangqingStatusBarGuideCount];\n}\n\n#pragma mark RZRQScrollViewDragDelegate\n\n///当正在执行垂直方向滚动时\n- (void)scrollViewDidVeriticalScroll:(UIScrollView *)scrollView{\n    CGFloat y = self.scrollView.contentOffset.y;\n    if (self.scrollView.contentSize.height - y > self.scrollView.height - self.scrollView.frame.origin.y) {\n         if (y > 200 && (self.topNoticeView.blackNoticeShowed || self.topNoticeView.hqStatusBarShowed)) {\n\n             [self hideTopNoticeViewWithOnlyHideBlackNotice:NO needCleanBlackNoticeData:NO];  //只隐藏，不需要清空数据\n         } else if (y <= 200 && !self.topNoticeView.blackNoticeShowed && !self.topNoticeView.hqStatusBarShowed) {\n             [self showTopNoticeViewWithOnlyShowHangqingBar];\n         }\n     }\n    \n    [self showKeRongQuanHeadCeilingView:scrollView];\n}\n///当已经结束垂直方向的拖动时\n- (void)scrollViewDidEndVeriticalDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate{\n    if (self.scrollState == WTRZRQTradeScrollStateShow\n        && scrollView.contentOffset.y > -scrollView.contentInset.top + 10){\n        if (scrollView.contentOffset.y < 0) {\n            dispatch_async(dispatch_get_main_queue(), ^{\n                [self unexpandFenshi];\n            });\n        }\n    }\n    NSString *stockCode = self.fenshiView.stockCode;\n    if (self.scrollState == WTRZRQTradeScrollStateDismiss\n        && scrollView.contentOffset.y < -25\n        && stockCode.length > 0) {\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [self expandFenshi];\n        });\n    }\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_MAICHU_RZRQ, @\"slide\") actionType:ScreenAction];\n}\n\n\n#pragma mark - FenShiDisplayFunction\n- (void)expandFenshi {\n    if (![[NSUserDefaults standardUserDefaults] boolForKey:kRZRQHasPullDownTradeFenshi]) {\n        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:kRZRQHasPullDownTradeFenshi];\n        [[NSUserDefaults standardUserDefaults] synchronize];\n    }\n    self.hangqingStatus.directionDown = NO;\n    CGFloat offsetY = kHangqingStatusBarHeight - 41;\n    [self.scrollView setContentInset:UIEdgeInsetsMake(205 + offsetY, 0, 0, 0)];\n    [self.scrollView setContentOffset:CGPointMake(0, -205 - offsetY) animated:YES];\n    [self.view bringSubviewToFront:self.fenshiView];\n    //延时设置 scrollState，原因是 setTableContentOffset 有动画时，会触发动画最终触发multilpleTableDidEndVeriticalScrollingAnimation 这类 delegate 方法，而且 expandFenshi 本身也有可能被多次触发，导致分时展示异常，所以延时设置并判断状态，动画期间不要触发 unexpandFenshi\n    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5f * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n        self.scrollState = WTRZRQTradeScrollStateShow;\n    });\n    [self fenshiLogWithExpand:YES];\n}\n- (void)unexpandFenshi {\n    if (self.scrollState == WTRZRQTradeScrollStateShow) {\n        [self fenshiLogWithExpand:NO];\n    }\n    [self.scrollView setContentInset:UIEdgeInsetsZero];\n    [self.scrollView setContentOffset:CGPointZero animated:YES];\n    self.hangqingStatus.directionDown = YES;\n    self.scrollState = WTRZRQTradeScrollStateDismiss;\n\n}\n\n- (BOOL)reloadViewWithNotice {\n    if ([self.noticeModelView needShowOrHideNoticeAndUpDate]\n        && ([[SurveyModel shareSurveyModel] judgeVersion])) {\n        self.noticeModelView.hidden = NO;\n        NSArray *noticeArr = [self.noticeModelView loadNeedSh","relevantFile":"","relevantFileList":[],"filePath":"RZRQSellViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"= [self.noticeModelView setDelegate:self];","deepseek-chat-lite":"View.delegate = self;","CodeQwen2.5-7B":"View.delegate = self;","copilot":"TopDescShowDescStringWithPrice:newPrice.string currentRate:zhangDieFu.string currentRise:zhangDieZhi.string dealMoney:chengjiaoe.string huangshou:haunshou.string];\n    "}},{"prefix":"\n#import <HXKLineModule/HXKLine.h>\n#import \"HXFenshiPeriodView.h\"\n#import <HXDataTypeConvertor/HXDataTypeConvertor.h>\n#import <HXBase/NSArray+Safety.h>\n#import <HXTool/InternetTimeTool.h>\n#import <HXFinanceMasterMoudle/NSDate+Extend.h>\n#import <HXEventBus/HXEventBus.h>\n#import <HXKLineModule/HXFenshiHistoryEvent.h>\n#import <HexColors/HexColors.h>\n#import <ThirdBase/Masonry.h>\n#import \"HXFenshiPeriodPresenter.h\"\n\n#import \"HXFenshiSetting.h\"\n#import \"HXKLineSetting.h\"\n#import \"USDropDownPopView.h\"\n#import \"AMSettingVarsProxy.h\"\n#import \"UIFont+HXFont.h\"\n\n#import <HXShowTipComponent/ToastView.h>\n#import \"HXHQTabsView.h\"\n#import \"HXHQFenShiPeriodCollectionViewCell.h\"\n#import \"HXHQListConfig.h\"\n#import \"AMUIPublicProxy+CurveLine.h\"\n#import \"HXUserInfo+SpecialServiceOrdered.h\"\n#import <HXBase/HXBaseMarketTools+TechCondition.h>\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"FortunePioneerStockSelectionView.h\"\n#import \"AMLocalIdDef.h\"\n#import \"HXRecordStockPeriodManager.h\"\n#import \"YYTextWeakProxy.h\"\n#import <HXKLineModule/HXKlinePublicProxy.h>\n#import \"NSDKPreAfterTool.h\"\n\n#import \"HXHQFenShiPeriodSortViewCell.h\"\n#import \"HXSnapShotNavigationController.h\"\n#import <HXThemeVersion/UINavigationBar+ChangeTheme.h>\n\n#import \"HXStrategySignalManager.h\"\n#import <HXKLineModule/HXKlinePublicProxy.h>\n#import <HXKLineModule/HXKlineSettingEvent.h>\n#import \"HXUserConfigCloudManager.h\"\n#import \"HXFenshiContentViewTradePresenter.h\"\n#import \"HXKlineContentViewTradePresenter.h\"\n#import \"HXFenshiPeriodView+PeriodDelegate.h\"\n\nextern NSString *const kNSDKTradeType;\nextern NSString *const kUSMarketOpenPrePost;\nextern CGFloat const kBottomMenuHeight;\n\nCGFloat const kFenShiPeriodSpaceHeight = 4;\nCGFloat const kFenShiPeriodBottomSpaceHeight = 8;\nCGFloat const kFenShiPeriodSegmentTitleHeight = 36;\n\nstatic CGFloat const kFenShiPeriodMore = 36;\nstatic CGFloat const CFXF_Button_Width_XFXG = 24; //按钮宽度\nstatic CGFloat const CFXF_Button_Height_XFXG = 52; //按钮高度\nstatic CGFloat const CFXF_Bottom_Space_Height_XFXG = 46; //按钮下方空隙\nstatic CGFloat const CFXF_Right_Space_Height_XFXG = 12; //按钮右侧空隙\nstatic CGFloat const kSettingMore = 40;\n\n// 引导相关\nstatic NSString *const kPeriodSwitchSlideGuideFlag = @\"periodSwitchSlideGuideFlag\";\nstatic NSString *const kPeriodSwitchClickInfo = @\"periodSwitchClickInfo\";\nstatic NSString *const kDateKey = @\"date\";\nstatic NSString *const kDayCountKey = @\"dayCount\";\nstatic NSUInteger const kDayCount = 5; //触发引导的日点击次数\nNSString * const kWaitForPeriodSwitchSlideGuide = @\"waitForPeriodSwitchSlideGuide\";\n\nstatic NSString *const FuncStockDetailScrollToFenShiTopNotify = @\"FuncStockDetailScrollToFenShiTopNotify\"; //跳转到详情页顶部通知，即section为0\n\n@interface HXFenshiPeriodView ()<HXPageContainerViewDataSource,HXPageContainerViewDelegate,HXFenshiPeriodViewProtocol, HXHQTabsViewDelegate, HXHQTabsViewDataSource>\n@property (nonatomic, strong) UIView *upSpaceView;\n@property (nonatomic, strong) UIView *lineView;\n\n@property (nonatomic, strong) UIView *spaceView;\n@property (nonatomic, strong) UIView *downSpaceView;\n\n@property (nonatomic, strong) HXFenshiSetting *fenshiSetting;\n@property (nonatomic, strong) HXKLineSetting *klineSetting;\n\n@property (nonatomic, strong) NSTimer *openTimer;\n\n@property (nonatomic, strong) UIButton *autoButton;\n\n@end\n\n@implementation HXFenshiPeriodView\n\n- (void)dealloc {\n    if (_openTimer) {\n        [_openTimer invalidate];\n        _openTimer = nil;\n    }\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (instancetype)init{\n    self = [super init];\n    if (self) {\n        HXFenshiPeriodPresenter *presenter = [[HXFenshiPeriodPresenter alloc] init];\n        presenter.view = self;\n        self.presenter = presenter;\n        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(userDidTakeScreenShot:) name:UIApplicationUserDidTakeScreenshotNotification object:nil];\n        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(openXianfengxuangu) name:@\"DealWithJCMM\" object:nil];\n        \n        //进入分时页面清除价格画线数据，使用分时页面价格\n        [HXFenshiContentViewTradePresenter shareInstance].priceParams = nil;\n        [HXKlineContentViewTradePresenter shareInstance].priceParams = nil;\n    }\n    return self;\n}\n\n/// 手势拦截 不切换股票\n- (void)gesture{}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    [self.view setBackgroundColor:FOREGROUND_COLOR_NORMAL theme:ThemeVersionNormal];\n    [self.view setBackgroundColor:FOREGROUND_COLOR_NIGHT theme:ThemeVersionNight];\n    [self.view addSubview:self.periodContainer];\n    [self.periodContainer addSubview:self.upSpaceView];\n    [self.periodContainer addSubview:self.segmentEditContainer];\n    [self.periodContainer addSubview:self.internalPeriodView];\n    [self.periodContainer addSubview:self.lineView];\n    [self.periodContainer addSubview:self.pageContainerView];\n    [self.periodContainer addSubview:self.spaceView];\n    [self.periodContainer addSubview:self.downSpaceView];\n    [self setupLayout];\n    [ThemeVersionManager changeTheme:self.view];\n    [self.upSpaceView changeTheme];\n    /// 手势拦截 不切换股票\n    UIPanGestureRecognizer *gesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(gesture)];\n    [self.view addGestureRecognizer:gesture];\n    if ([self.internalPeriodView conformsToProtocol:@protocol(HXFenshiMorePeriodViewDelegate)]) {\n        self.morePeriodViewDelegate =(id<HXFenshiMorePeriodViewDelegate>)self.internalPeriodView; //更多周期视图tab代理\n    }\n    \n    self.autoButton = ","infill":"[UIButton buttonWithType:UIButtonTypeCustom];\n    self.autoButton.f","suffix":"rame = CGRectMake(0, 0, 100, 100);\n}\n\n- (void)setupLayout {\n    [_periodContainer mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.edges.equalTo(self.view);\n    }];\n    [_upSpaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSpaceHeight);\n    }];\n    [_segmentEditContainer mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.upSpaceView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSegmentTitleHeight);\n    }];\n    [_internalPeriodView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.segmentEditContainer.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSegmentTitleHeight);\n    }];\n    [_lineView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.internalPeriodView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(0.5);\n    }];\n    [_pageContainerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.lineView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n    }];\n    [_spaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.pageContainerView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodBottomSpaceHeight);\n    }];\n    [_downSpaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.spaceView.mas_bottom);\n        make.left.right.bottom.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSpaceHeight);\n    }];\n}\n\n- (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n    // 放在willappear 股票切换需要同步一些状态\n    [_presenter loadWithStockDetailContextModel:_stockDetailContextModel];\n    // 同步更多的状态\n    [self setMorePeriodSelectedIndexWithIndex:[_presenter selectedHideItemIndex]];\n    // 本次进程内获取更多周期开启状态\n    BOOL isOpen = [HXKlinePublicProxy isMorePeriodOnOpen];\n    _internalPeriodView.hidden = !isOpen;\n\n    // 重载数据源\n    [self reloadDataWithSelectedIndex:_presenter.memorySelectedIndex];\n    \n    [_internalPeriodView reloadData]; // 内部周期tab\n    [self updateInternalPeriodViewHeight:_internalPeriodView.hidden ? 0 : kFenShiPeriodSegmentTitleHeight];\n    \n    [self openXianfengxuangu];\n    \n    [self updateHeightAndReload:YES];\n    \n    /// 策略灰度打开，注册策略代理\n    [HXStrategySignalManager sharedManager].periodViewDelegate = self;\n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    // 清空数据标记\n    [_presenter.cacheAdStateDic removeAllObjects];\n    \n    /// 用户cookie变更后刷新策略信号\n    __weak typeof(self) weakSelf = self;\n    [[NSNotificationCenter defaultCenter] addObserverForName:COOKIE_CHANGE_SUCCESS_SUBJECT_NAME object:nil queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification * _Nonnull note) {\n        NSString *oldPeriodIdentify = weakSelf.stockDetailContextModel.memoryStatusModel.periodIdentify;\n        if ([oldPeriodIdentify isEqualToString:kIdentify_1d]) {\n            ///当前周期为日k，刷新插件\n            [weakSelf handleKlineSettingEvent];\n        }\n    }];\n}\n\n- (void)viewDidDisappear:(BOOL)animated {\n    [super viewDidDisappear:animated];\n\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:COOKIE_CHANGE_SUCCESS_SUBJECT_NAME object:nil];\n}\n\n- (void)updateInternalPeriodViewHeight:(CGFloat)height {\n    [_internalPeriodView mas_updateConstraints:^(MASConstraintMaker *make) {\n        make.height.mas_equalTo(height);\n    }];\n}\n\n- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    id<HXFenshiContentViewPublicProtocol> content = (id<HXFenshiContentViewPublicProtocol>)[_pageContainerView pageContentAtIndex:0];\n    if([content respondsToSelector:@selector(periodViewWillDisAppear)]) {\n        [content periodViewWillDisAppear];\n    }\n}\n\n- (void)viewDidLayoutSubviews {\n    [super viewDidLayoutSubviews];\n    CGRect rect = _stockDetailViewController.view.bounds;\n    _xfxgBtn.frame = CGRectMake(rect.size.width - CFXF_Button_Height_XFXG-CFXF_Right_Space_Height_XFXG, rect.size.height-kBottomMenuHeight-SAFEAREA_BOTTOM_MARGIM_V-CFXF_Bottom_Space_Height_XFXG-CFXF_Button_Height_XFXG, CFXF_Button_Height_XFXG, CFXF_Button_Height_XFXG);\n    [_xfxgBtn changeTheme];\n    \n    _xfxgHideBtn.frame = CGRectMake(rect.size.width - CFXF_Button_Width_XFXG, rect.size.height-kBottomMenuHeight-SAFEAREA_BOTTOM_MARGIM_V-CFXF_Bottom_Space_Height_XFXG-CFXF_Button_Height_XFXG, CFXF_Button_Width_XFXG, CFXF_Button_Height_XFXG);\n    [_xfxgHideBtn changeTheme];\n}\n\n@synthesize stockDetailContextModel = _stockDetailContextModel;\n@synthesize stockDetailViewController = _stockDetailViewController;\n@synthesize moduleDynamicUIDelegate = _moduleDynamicUIDelegate;\n\n- (void)loadWithModel:(HXStockDetailContextModel *)model {\n    _stockDetailContextModel = model;\n    _screenShotTool = [[HXUserScreenShotTool alloc] init];\n    _screenShotTool.stockDetailContextModel = model;\n    _screenShotTool.presentVC = self;\n    _screenShotTool.pageContainerView = _pageContainerView;\n    _screenShotTool.stockDetailViewController = _stockDetailViewController;\n}\n\n- (void)setStockDetailVC:(HXBaseViewController<HXStockDetailModulesDelegate> *)stockDetailViewController {\n    [stockDetailViewController.view addSubview:self.xfxgBtn];\n    [stockDetailViewController.view addSubview:self.xfxgHideBtn];\n    \n    _stockDetailViewController = stockDetailViewController;\n}\n\n- (void)contentViewWillDisPlay{\n    id<HXFSPeriodContentViewProtocol> content = (id<HXFSPeriodContentViewProtocol>)[_pageContainerView currentPageContent];\n    if ([content respondsToSelector:@selector(contentViewWillDisPlay)]) {\n        [content contentViewWillDisPlay];\n    }\n}\n\n///用户截图\n- (void)userDidTakeScreenShot:(NSNotification *)notification {\n    [_screenShotTool userDidTakeScreenShot:notification];\n}\n\n#pragma mark - HXFenshiPeriodViewProtocol presenter数据回调\n\n- (void)reloadDataWithSelectedIndex:(NSInteger)index{\n    _segmentView.titleArray = [self getTitleArray];\n    _segmentView.typeArray = _presenter.typeArray;\n    [self changeDataSource];\n    if (_internalPeriodView.hidden || _internalPeriodView.selectedIndex == -1) {\n        [_segmentView reloadDataWithIndex:index];\n    } else {\n        [_segmentView reloadMoreDataWithSelectIndex:kOuter_count reloadIndex:_internalPeriodView.selectedIndex+kOuter_count];\n    }\n}\n\n- (void)changeDataSource {\n    _dataSourceType = [self curDataSourceType];\n    //移除多余模块 修改数据源 重载\n    [_presenter removeInvalidContent];\n    if (_dataSourceType == PeriodDataSourceTypeOneMoreLast) {\n        [_presenter addContentWithIdentify:kIdentify_placeholder];\n    } else if (_dataSourceType == PeriodDataSourceTypeOneMoreNotLast) {\n        [_presenter addContentWithIdentify:[_presenter.tabKeyHideConfigs safetyObjectAtIndex:_internalPeriodView.selectedIndex+1]];\n    }\n}\n\n- (void)reloadMorePeriod {\n    [_internalPeriodView reloadData];\n}\n\n- (void)reloadTitleAtIndex:(NSInteger)index{\n    _segmentView.titleArray = [self getTitleArray];\n    _segmentView.typeArray = _presenter.typeArray;\n    if (index == kOuter_count) {\n        [_segmentView reloadItemImmediatelyAtIndex:index];\n    } else {\n        [_segmentView reloadItemAtIndex:index];\n    }\n}\n\n- (void)updateHeightAndReload:(BOOL)animated {\n    [self updateHeight];\n    [_moduleDynamicUIDelegate updateContent:self animated:animated];\n}\n\n#pragma mark - private\n\n- (void)_settingButtonAction:(UIButton *)sender {\n    id<HXFSPeriodContentViewProtocol> obj = (id<HXFSPeriodContentViewProtocol>)[_pageContainerView currentPageContent];\n    NSString *periodKey = obj.moduleIdentify;\n    BOOL supportBarrageSetting = [obj respondsToSelector:@selector(supportBarrageSetting)] && [obj supportBarrageSetting];\n    CGPoint startPoint = [sender convertPoint:CGP","relevantFile":"","relevantFileList":[],"filePath":"HXFenshiPeriodView.mm","template":"objective-cpp","multiRes":{"hipilot":"[[UIButton alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];\n    self.autoButton.f","deepseek-chat-lite":"[UIButton buttonWithType:UIButtonTypeCustom];","CodeQwen2.5-7B":"[[UIButton alloc] init];","copilot":"[UIButton buttonWithType:UIButtonTypeCustom];\n    self.autoButton.f"}},{"prefix":"\n#import <HXKLineModule/HXKLine.h>\n#import \"HXFenshiPeriodView.h\"\n#import <HXDataTypeConvertor/HXDataTypeConvertor.h>\n#import <HXBase/NSArray+Safety.h>\n#import <HXTool/InternetTimeTool.h>\n#import <HXFinanceMasterMoudle/NSDate+Extend.h>\n#import <HXEventBus/HXEventBus.h>\n#import <HXKLineModule/HXFenshiHistoryEvent.h>\n#import <HexColors/HexColors.h>\n#import <ThirdBase/Masonry.h>\n#import \"HXFenshiPeriodPresenter.h\"\n\n#import \"HXFenshiSetting.h\"\n#import \"HXKLineSetting.h\"\n#import \"USDropDownPopView.h\"\n#import \"AMSettingVarsProxy.h\"\n#import \"UIFont+HXFont.h\"\n\n#import <HXShowTipComponent/ToastView.h>\n#import \"HXHQTabsView.h\"\n#import \"HXHQFenShiPeriodCollectionViewCell.h\"\n#import \"HXHQListConfig.h\"\n#import \"AMUIPublicProxy+CurveLine.h\"\n#import \"HXUserInfo+SpecialServiceOrdered.h\"\n#import <HXBase/HXBaseMarketTools+TechCondition.h>\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"FortunePioneerStockSelectionView.h\"\n#import \"AMLocalIdDef.h\"\n#import \"HXRecordStockPeriodManager.h\"\n#import \"YYTextWeakProxy.h\"\n#import <HXKLineModule/HXKlinePublicProxy.h>\n#import \"NSDKPreAfterTool.h\"\n\n#import \"HXHQFenShiPeriodSortViewCell.h\"\n#import \"HXSnapShotNavigationController.h\"\n#import <HXThemeVersion/UINavigationBar+ChangeTheme.h>\n\n#import \"HXStrategySignalManager.h\"\n#import <HXKLineModule/HXKlinePublicProxy.h>\n#import <HXKLineModule/HXKlineSettingEvent.h>\n#import \"HXUserConfigCloudManager.h\"\n#import \"HXFenshiContentViewTradePresenter.h\"\n#import \"HXKlineContentViewTradePresenter.h\"\n#import \"HXFenshiPeriodView+PeriodDelegate.h\"\n\nextern NSString *const kNSDKTradeType;\nextern NSString *const kUSMarketOpenPrePost;\nextern CGFloat const kBottomMenuHeight;\n\nCGFloat const kFenShiPeriodSpaceHeight = 4;\nCGFloat const kFenShiPeriodBottomSpaceHeight = 8;\nCGFloat const kFenShiPeriodSegmentTitleHeight = 36;\n\nstatic CGFloat const kFenShiPeriodMore = 36;\nstatic CGFloat const CFXF_Button_Width_XFXG = 24; //按钮宽度\nstatic CGFloat const CFXF_Button_Height_XFXG = 52; //按钮高度\nstatic CGFloat const CFXF_Bottom_Space_Height_XFXG = 46; //按钮下方空隙\nstatic CGFloat const CFXF_Right_Space_Height_XFXG = 12; //按钮右侧空隙\nstatic CGFloat const kSettingMore = 40;\n\n// 引导相关\nstatic NSString *const kPeriodSwitchSlideGuideFlag = @\"periodSwitchSlideGuideFlag\";\nstatic NSString *const kPeriodSwitchClickInfo = @\"periodSwitchClickInfo\";\nstatic NSString *const kDateKey = @\"date\";\nstatic NSString *const kDayCountKey = @\"dayCount\";\nstatic NSUInteger const kDayCount = 5; //触发引导的日点击次数\nNSString * const kWaitForPeriodSwitchSlideGuide = @\"waitForPeriodSwitchSlideGuide\";\n\nstatic NSString *const FuncStockDetailScrollToFenShiTopNotify = @\"FuncStockDetailScrollToFenShiTopNotify\"; //跳转到详情页顶部通知，即section为0\n\n@interface HXFenshiPeriodView ()<HXPageContainerViewDataSource,HXPageContainerViewDelegate,HXFenshiPeriodViewProtocol, HXHQTabsViewDelegate, HXHQTabsViewDataSource>\n@property (nonatomic, strong) UIView *upSpaceView;\n@property (nonatomic, strong) UIView *lineView;\n\n@property (nonatomic, strong) UIView *spaceView;\n@property (nonatomic, strong) UIView *downSpaceView;\n\n@property (nonatomic, strong) HXFenshiSetting *fenshiSetting;\n@property (nonatomic, strong) HXKLineSetting *klineSetting;\n\n@property (nonatomic, strong) NSTimer *openTimer;\n\n@property (nonatomic, strong) UIButton *autoButton;\n\n@end\n\n@implementation HXFenshiPeriodView\n\n- (void)dealloc {\n    if (_openTimer) {\n        [_openTimer invalidate];\n        _openTimer = nil;\n    }\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (instancetype)init{\n    self = [super init];\n    if (self) {\n        HXFenshiPeriodPresenter *presenter = [[HXFenshiPeriodPresenter alloc] init];\n        presenter.view = self;\n        self.presenter = presenter;\n        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(userDidTakeScreenShot:) name:UIApplicationUserDidTakeScreenshotNotification object:nil];\n        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(openXianfengxuangu) name:@\"DealWithJCMM\" object:nil];\n        \n        //进入分时页面清除价格画线数据，使用分时页面价格\n        [HXFenshiContentViewTradePresenter shareInstance].priceParams = nil;\n        [HXKlineContentViewTradePresenter shareInstance].priceParams = nil;\n    }\n    return self;\n}\n\n/// 手势拦截 不切换股票\n- (void)gesture{}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    [self.view setBackgroundColor:FOREGROUND_COLOR_NORMAL theme:ThemeVersionNormal];\n    [self.view setBackgroundColor:FOREGROUND_COLOR_NIGHT theme:ThemeVersionNight];\n    [self.view addSubview:self.periodContainer];\n    [self.periodContainer addSubview:self.upSpaceView];\n    [self.periodContainer addSubview:self.segmentEditContainer];\n    [self.periodContainer addSubview:self.internalPeriodView];\n    [self.periodContainer addSubview:self.lineView];\n    [self.periodContainer addSubview:self.pageContainerView];\n    [self.periodContainer addSubview:self.spaceView];\n    [self.periodContainer addSubview:self.downSpaceView];\n    [self setupLayout];\n    [ThemeVersionManager changeTheme:self.view];\n    [self.upSpaceView changeTheme];\n    /// 手势拦截 不切换股票\n    UIPanGestureRecognizer *gesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(gesture)];\n    [self.view addGestureRecognizer:gesture];\n    if ([self.internalPeriodView conformsToProtocol:@protocol(HXFenshiMorePeriodViewDelegate)]) {\n        self.morePeriodViewDelegate =(id<HXFenshiMorePeriodViewDelegate>)self.internalPeriodView; //更多周期视图tab代理\n    }\n    \n    self.autoButton = [UIButton buttonWithType:UIButtonTypeCustom];\n    self.autoButton.frame = CG","infill":"RectMake(0, 0, 100, 100);\n}\n\n- (void)setupLayout {\n    ","suffix":"[_periodContainer mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.edges.equalTo(self.view);\n    }];\n    [_upSpaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSpaceHeight);\n    }];\n    [_segmentEditContainer mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.upSpaceView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSegmentTitleHeight);\n    }];\n    [_internalPeriodView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.segmentEditContainer.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSegmentTitleHeight);\n    }];\n    [_lineView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.internalPeriodView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(0.5);\n    }];\n    [_pageContainerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.lineView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n    }];\n    [_spaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.pageContainerView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodBottomSpaceHeight);\n    }];\n    [_downSpaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.spaceView.mas_bottom);\n        make.left.right.bottom.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSpaceHeight);\n    }];\n}\n\n- (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n    // 放在willappear 股票切换需要同步一些状态\n    [_presenter loadWithStockDetailContextModel:_stockDetailContextModel];\n    // 同步更多的状态\n    [self setMorePeriodSelectedIndexWithIndex:[_presenter selectedHideItemIndex]];\n    // 本次进程内获取更多周期开启状态\n    BOOL isOpen = [HXKlinePublicProxy isMorePeriodOnOpen];\n    _internalPeriodView.hidden = !isOpen;\n\n    // 重载数据源\n    [self reloadDataWithSelectedIndex:_presenter.memorySelectedIndex];\n    \n    [_internalPeriodView reloadData]; // 内部周期tab\n    [self updateInternalPeriodViewHeight:_internalPeriodView.hidden ? 0 : kFenShiPeriodSegmentTitleHeight];\n    \n    [self openXianfengxuangu];\n    \n    [self updateHeightAndReload:YES];\n    \n    /// 策略灰度打开，注册策略代理\n    [HXStrategySignalManager sharedManager].periodViewDelegate = self;\n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    // 清空数据标记\n    [_presenter.cacheAdStateDic removeAllObjects];\n    \n    /// 用户cookie变更后刷新策略信号\n    __weak typeof(self) weakSelf = self;\n    [[NSNotificationCenter defaultCenter] addObserverForName:COOKIE_CHANGE_SUCCESS_SUBJECT_NAME object:nil queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification * _Nonnull note) {\n        NSString *oldPeriodIdentify = weakSelf.stockDetailContextModel.memoryStatusModel.periodIdentify;\n        if ([oldPeriodIdentify isEqualToString:kIdentify_1d]) {\n            ///当前周期为日k，刷新插件\n            [weakSelf handleKlineSettingEvent];\n        }\n    }];\n}\n\n- (void)viewDidDisappear:(BOOL)animated {\n    [super viewDidDisappear:animated];\n\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:COOKIE_CHANGE_SUCCESS_SUBJECT_NAME object:nil];\n}\n\n- (void)updateInternalPeriodViewHeight:(CGFloat)height {\n    [_internalPeriodView mas_updateConstraints:^(MASConstraintMaker *make) {\n        make.height.mas_equalTo(height);\n    }];\n}\n\n- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    id<HXFenshiContentViewPublicProtocol> content = (id<HXFenshiContentViewPublicProtocol>)[_pageContainerView pageContentAtIndex:0];\n    if([content respondsToSelector:@selector(periodViewWillDisAppear)]) {\n        [content periodViewWillDisAppear];\n    }\n}\n\n- (void)viewDidLayoutSubviews {\n    [super viewDidLayoutSubviews];\n    CGRect rect = _stockDetailViewController.view.bounds;\n    _xfxgBtn.frame = CGRectMake(rect.size.width - CFXF_Button_Height_XFXG-CFXF_Right_Space_Height_XFXG, rect.size.height-kBottomMenuHeight-SAFEAREA_BOTTOM_MARGIM_V-CFXF_Bottom_Space_Height_XFXG-CFXF_Button_Height_XFXG, CFXF_Button_Height_XFXG, CFXF_Button_Height_XFXG);\n    [_xfxgBtn changeTheme];\n    \n    _xfxgHideBtn.frame = CGRectMake(rect.size.width - CFXF_Button_Width_XFXG, rect.size.height-kBottomMenuHeight-SAFEAREA_BOTTOM_MARGIM_V-CFXF_Bottom_Space_Height_XFXG-CFXF_Button_Height_XFXG, CFXF_Button_Width_XFXG, CFXF_Button_Height_XFXG);\n    [_xfxgHideBtn changeTheme];\n}\n\n@synthesize stockDetailContextModel = _stockDetailContextModel;\n@synthesize stockDetailViewController = _stockDetailViewController;\n@synthesize moduleDynamicUIDelegate = _moduleDynamicUIDelegate;\n\n- (void)loadWithModel:(HXStockDetailContextModel *)model {\n    _stockDetailContextModel = model;\n    _screenShotTool = [[HXUserScreenShotTool alloc] init];\n    _screenShotTool.stockDetailContextModel = model;\n    _screenShotTool.presentVC = self;\n    _screenShotTool.pageContainerView = _pageContainerView;\n    _screenShotTool.stockDetailViewController = _stockDetailViewController;\n}\n\n- (void)setStockDetailVC:(HXBaseViewController<HXStockDetailModulesDelegate> *)stockDetailViewController {\n    [stockDetailViewController.view addSubview:self.xfxgBtn];\n    [stockDetailViewController.view addSubview:self.xfxgHideBtn];\n    \n    _stockDetailViewController = stockDetailViewController;\n}\n\n- (void)contentViewWillDisPlay{\n    id<HXFSPeriodContentViewProtocol> content = (id<HXFSPeriodContentViewProtocol>)[_pageContainerView currentPageContent];\n    if ([content respondsToSelector:@selector(contentViewWillDisPlay)]) {\n        [content contentViewWillDisPlay];\n    }\n}\n\n///用户截图\n- (void)userDidTakeScreenShot:(NSNotification *)notification {\n    [_screenShotTool userDidTakeScreenShot:notification];\n}\n\n#pragma mark - HXFenshiPeriodViewProtocol presenter数据回调\n\n- (void)reloadDataWithSelectedIndex:(NSInteger)index{\n    _segmentView.titleArray = [self getTitleArray];\n    _segmentView.typeArray = _presenter.typeArray;\n    [self changeDataSource];\n    if (_internalPeriodView.hidden || _internalPeriodView.selectedIndex == -1) {\n        [_segmentView reloadDataWithIndex:index];\n    } else {\n        [_segmentView reloadMoreDataWithSelectIndex:kOuter_count reloadIndex:_internalPeriodView.selectedIndex+kOuter_count];\n    }\n}\n\n- (void)changeDataSource {\n    _dataSourceType = [self curDataSourceType];\n    //移除多余模块 修改数据源 重载\n    [_presenter removeInvalidContent];\n    if (_dataSourceType == PeriodDataSourceTypeOneMoreLast) {\n        [_presenter addContentWithIdentify:kIdentify_placeholder];\n    } else if (_dataSourceType == PeriodDataSourceTypeOneMoreNotLast) {\n        [_presenter addContentWithIdentify:[_presenter.tabKeyHideConfigs safetyObjectAtIndex:_internalPeriodView.selectedIndex+1]];\n    }\n}\n\n- (void)reloadMorePeriod {\n    [_internalPeriodView reloadData];\n}\n\n- (void)reloadTitleAtIndex:(NSInteger)index{\n    _segmentView.titleArray = [self getTitleArray];\n    _segmentView.typeArray = _presenter.typeArray;\n    if (index == kOuter_count) {\n        [_segmentView reloadItemImmediatelyAtIndex:index];\n    } else {\n        [_segmentView reloadItemAtIndex:index];\n    }\n}\n\n- (void)updateHeightAndReload:(BOOL)animated {\n    [self updateHeight];\n    [_moduleDynamicUIDelegate updateContent:self animated:animated];\n}\n\n#pragma mark - private\n\n- (void)_settingButtonAction:(UIButton *)sender {\n    id<HXFSPeriodContentViewProtocol> obj = (id<HXFSPeriodContentViewProtocol>)[_pageContainerView currentPageContent];\n    NSString *periodKey = obj.moduleIdentify;\n    BOOL supportBarrageSetting = [obj respondsToSelector:@selector(supportBarrageSetting)] && [obj supportBarrageSetting];\n    CGPoint startPoint = [sender convertPoint:CGPointMake(sender.bounds.size.width / 2.0, sender.bounds.size.height) ","relevantFile":"","relevantFileList":[],"filePath":"HXFenshiPeriodView.mm","template":"objective-cpp","multiRes":{"hipilot":"rect(0, 0, 60, 30);\n    [self.autoButton setImage:[UIImage imageNamed:@\"shouxie_normal\"] forState:UIControlStateNormal];\n    [self.autoButton addTarget:self action:@selector(settingButton","deepseek-chat-lite":"RectMake(0, 0, 40, 40);","CodeQwen2.5-7B":"RectMake(0, 0, 24, 24);","copilot":"RectMake(0, 0, 100, 100);\n}\n\n- (void)setupLayout {\n    "}},{"prefix":"\n#import <HXKLineModule/HXKLine.h>\n#import \"HXFenshiPeriodView.h\"\n#import <HXDataTypeConvertor/HXDataTypeConvertor.h>\n#import <HXBase/NSArray+Safety.h>\n#import <HXTool/InternetTimeTool.h>\n#import <HXFinanceMasterMoudle/NSDate+Extend.h>\n#import <HXEventBus/HXEventBus.h>\n#import <HXKLineModule/HXFenshiHistoryEvent.h>\n#import <HexColors/HexColors.h>\n#import <ThirdBase/Masonry.h>\n#import \"HXFenshiPeriodPresenter.h\"\n\n#import \"HXFenshiSetting.h\"\n#import \"HXKLineSetting.h\"\n#import \"USDropDownPopView.h\"\n#import \"AMSettingVarsProxy.h\"\n#import \"UIFont+HXFont.h\"\n\n#import <HXShowTipComponent/ToastView.h>\n#import \"HXHQTabsView.h\"\n#import \"HXHQFenShiPeriodCollectionViewCell.h\"\n#import \"HXHQListConfig.h\"\n#import \"AMUIPublicProxy+CurveLine.h\"\n#import \"HXUserInfo+SpecialServiceOrdered.h\"\n#import <HXBase/HXBaseMarketTools+TechCondition.h>\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"FortunePioneerStockSelectionView.h\"\n#import \"AMLocalIdDef.h\"\n#import \"HXRecordStockPeriodManager.h\"\n#import \"YYTextWeakProxy.h\"\n#import <HXKLineModule/HXKlinePublicProxy.h>\n#import \"NSDKPreAfterTool.h\"\n\n#import \"HXHQFenShiPeriodSortViewCell.h\"\n#import \"HXSnapShotNavigationController.h\"\n#import <HXThemeVersion/UINavigationBar+ChangeTheme.h>\n\n#import \"HXStrategySignalManager.h\"\n#import <HXKLineModule/HXKlinePublicProxy.h>\n#import <HXKLineModule/HXKlineSettingEvent.h>\n#import \"HXUserConfigCloudManager.h\"\n#import \"HXFenshiContentViewTradePresenter.h\"\n#import \"HXKlineContentViewTradePresenter.h\"\n#import \"HXFenshiPeriodView+PeriodDelegate.h\"\n\nextern NSString *const kNSDKTradeType;\nextern NSString *const kUSMarketOpenPrePost;\nextern CGFloat const kBottomMenuHeight;\n\nCGFloat const kFenShiPeriodSpaceHeight = 4;\nCGFloat const kFenShiPeriodBottomSpaceHeight = 8;\nCGFloat const kFenShiPeriodSegmentTitleHeight = 36;\n\nstatic CGFloat const kFenShiPeriodMore = 36;\nstatic CGFloat const CFXF_Button_Width_XFXG = 24; //按钮宽度\nstatic CGFloat const CFXF_Button_Height_XFXG = 52; //按钮高度\nstatic CGFloat const CFXF_Bottom_Space_Height_XFXG = 46; //按钮下方空隙\nstatic CGFloat const CFXF_Right_Space_Height_XFXG = 12; //按钮右侧空隙\nstatic CGFloat const kSettingMore = 40;\n\n// 引导相关\nstatic NSString *const kPeriodSwitchSlideGuideFlag = @\"periodSwitchSlideGuideFlag\";\nstatic NSString *const kPeriodSwitchClickInfo = @\"periodSwitchClickInfo\";\nstatic NSString *const kDateKey = @\"date\";\nstatic NSString *const kDayCountKey = @\"dayCount\";\nstatic NSUInteger const kDayCount = 5; //触发引导的日点击次数\nNSString * const kWaitForPeriodSwitchSlideGuide = @\"waitForPeriodSwitchSlideGuide\";\n\nstatic NSString *const FuncStockDetailScrollToFenShiTopNotify = @\"FuncStockDetailScrollToFenShiTopNotify\"; //跳转到详情页顶部通知，即section为0\n\n@interface HXFenshiPeriodView ()<HXPageContainerViewDataSource,HXPageContainerViewDelegate,HXFenshiPeriodViewProtocol, HXHQTabsViewDelegate, HXHQTabsViewDataSource>\n@property (nonatomic, strong) UIView *upSpaceView;\n@property (nonatomic, strong) UIView *lineView;\n\n@property (nonatomic, strong) UIView *spaceView;\n@property (nonatomic, strong) UIView *downSpaceView;\n\n@property (nonatomic, strong) HXFenshiSetting *fenshiSetting;\n@property (nonatomic, strong) HXKLineSetting *klineSetting;\n\n@property (nonatomic, strong) NSTimer *openTimer;\n\n@property (nonatomic, strong) UIButton *autoButton;\n\n@end\n\n@implementation HXFenshiPeriodView\n\n- (void)dealloc {\n    if (_openTimer) {\n        [_openTimer invalidate];\n        _openTimer = nil;\n    }\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (instancetype)init{\n    self = [super init];\n    if (self) {\n        HXFenshiPeriodPresenter *presenter = [[HXFenshiPeriodPresenter alloc] init];\n        presenter.view = self;\n        self.presenter = presenter;\n        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(userDidTakeScreenShot:) name:UIApplicationUserDidTakeScreenshotNotification object:nil];\n        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(openXianfengxuangu) name:@\"DealWithJCMM\" object:nil];\n        \n        //进入分时页面清除价格画线数据，使用分时页面价格\n        [HXFenshiContentViewTradePresenter shareInstance].priceParams = nil;\n        [HXKlineContentViewTradePresenter shareInstance].priceParams = nil;\n    }\n    return self;\n}\n\n/// 手势拦截 不切换股票\n- (void)gesture{}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    [self.view setBackgroundColor:FOREGROUND_COLOR_NORMAL theme:ThemeVersionNormal];\n    [self.view setBackgroundColor:FOREGROUND_COLOR_NIGHT theme:ThemeVersionNight];\n    [self.view addSubview:self.periodContainer];\n    [self.periodContainer addSubview:self.upSpaceView];\n    [self.periodContainer addSubview:self.segmentEditContainer];\n    [self.periodContainer addSubview:self.internalPeriodView];\n    [self.periodContainer addSubview:self.lineView];\n    [self.periodContainer addSubview:self.pageContainerView];\n    [self.periodContainer addSubview:self.spaceView];\n    [self.periodContainer addSubview:self.downSpaceView];\n    [self setupLayout];\n    [ThemeVersionManager changeTheme:self.view];\n    [self.upSpaceView changeTheme];\n    /// 手势拦截 不切换股票\n    UIPanGestureRecognizer *gesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(gesture)];\n    [self.view addGestureRecognizer:gesture];\n    if ([self.internalPeriodView conformsToProtocol:@protocol(HXFenshiMorePeriodViewDelegate)]) {\n        self.morePeriodViewDelegate =(id<HXFenshiMorePeriodViewDelegate>)self.internalPeriodView; //更多周期视图tab代理\n    }\n    \n    self.autoButton = [UIButton buttonWithType:UIButtonTypeCustom];\n    self.autoButton.frame = CGRectMake(0, 0, 40, 40);\n    self.autoButton.backgroundColor = [UIColor blueColor];\n    [self.periodContainer addSubview:self.autoButton];\n    [self.autoButton addTarget:self action:@selector(autoBegin) forControlEvents:UIControlEventTouchUpInside];\n}\n\n- (void)autoBegin {\n    CGRect targetRect = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);\n    UIImage *snap","infill":"shot = [self.view snapshotOf];\n}\n\n- (void)setupLayout {\n    [_periodCont","suffix":"ainer mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.edges.equalTo(self.view);\n    }];\n    [_upSpaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSpaceHeight);\n    }];\n    [_segmentEditContainer mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.upSpaceView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSegmentTitleHeight);\n    }];\n    [_internalPeriodView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.segmentEditContainer.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSegmentTitleHeight);\n    }];\n    [_lineView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.internalPeriodView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(0.5);\n    }];\n    [_pageContainerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.lineView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n    }];\n    [_spaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.pageContainerView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodBottomSpaceHeight);\n    }];\n    [_downSpaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.spaceView.mas_bottom);\n        make.left.right.bottom.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSpaceHeight);\n    }];\n}\n\n- (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n    // 放在willappear 股票切换需要同步一些状态\n    [_presenter loadWithStockDetailContextModel:_stockDetailContextModel];\n    // 同步更多的状态\n    [self setMorePeriodSelectedIndexWithIndex:[_presenter selectedHideItemIndex]];\n    // 本次进程内获取更多周期开启状态\n    BOOL isOpen = [HXKlinePublicProxy isMorePeriodOnOpen];\n    _internalPeriodView.hidden = !isOpen;\n\n    // 重载数据源\n    [self reloadDataWithSelectedIndex:_presenter.memorySelectedIndex];\n    \n    [_internalPeriodView reloadData]; // 内部周期tab\n    [self updateInternalPeriodViewHeight:_internalPeriodView.hidden ? 0 : kFenShiPeriodSegmentTitleHeight];\n    \n    [self openXianfengxuangu];\n    \n    [self updateHeightAndReload:YES];\n    \n    /// 策略灰度打开，注册策略代理\n    [HXStrategySignalManager sharedManager].periodViewDelegate = self;\n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    // 清空数据标记\n    [_presenter.cacheAdStateDic removeAllObjects];\n    \n    /// 用户cookie变更后刷新策略信号\n    __weak typeof(self) weakSelf = self;\n    [[NSNotificationCenter defaultCenter] addObserverForName:COOKIE_CHANGE_SUCCESS_SUBJECT_NAME object:nil queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification * _Nonnull note) {\n        NSString *oldPeriodIdentify = weakSelf.stockDetailContextModel.memoryStatusModel.periodIdentify;\n        if ([oldPeriodIdentify isEqualToString:kIdentify_1d]) {\n            ///当前周期为日k，刷新插件\n            [weakSelf handleKlineSettingEvent];\n        }\n    }];\n}\n\n- (void)viewDidDisappear:(BOOL)animated {\n    [super viewDidDisappear:animated];\n\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:COOKIE_CHANGE_SUCCESS_SUBJECT_NAME object:nil];\n}\n\n- (void)updateInternalPeriodViewHeight:(CGFloat)height {\n    [_internalPeriodView mas_updateConstraints:^(MASConstraintMaker *make) {\n        make.height.mas_equalTo(height);\n    }];\n}\n\n- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    id<HXFenshiContentViewPublicProtocol> content = (id<HXFenshiContentViewPublicProtocol>)[_pageContainerView pageContentAtIndex:0];\n    if([content respondsToSelector:@selector(periodViewWillDisAppear)]) {\n        [content periodViewWillDisAppear];\n    }\n}\n\n- (void)viewDidLayoutSubviews {\n    [super viewDidLayoutSubviews];\n    CGRect rect = _stockDetailViewController.view.bounds;\n    _xfxgBtn.frame = CGRectMake(rect.size.width - CFXF_Button_Height_XFXG-CFXF_Right_Space_Height_XFXG, rect.size.height-kBottomMenuHeight-SAFEAREA_BOTTOM_MARGIM_V-CFXF_Bottom_Space_Height_XFXG-CFXF_Button_Height_XFXG, CFXF_Button_Height_XFXG, CFXF_Button_Height_XFXG);\n    [_xfxgBtn changeTheme];\n    \n    _xfxgHideBtn.frame = CGRectMake(rect.size.width - CFXF_Button_Width_XFXG, rect.size.height-kBottomMenuHeight-SAFEAREA_BOTTOM_MARGIM_V-CFXF_Bottom_Space_Height_XFXG-CFXF_Button_Height_XFXG, CFXF_Button_Width_XFXG, CFXF_Button_Height_XFXG);\n    [_xfxgHideBtn changeTheme];\n}\n\n@synthesize stockDetailContextModel = _stockDetailContextModel;\n@synthesize stockDetailViewController = _stockDetailViewController;\n@synthesize moduleDynamicUIDelegate = _moduleDynamicUIDelegate;\n\n- (void)loadWithModel:(HXStockDetailContextModel *)model {\n    _stockDetailContextModel = model;\n    _screenShotTool = [[HXUserScreenShotTool alloc] init];\n    _screenShotTool.stockDetailContextModel = model;\n    _screenShotTool.presentVC = self;\n    _screenShotTool.pageContainerView = _pageContainerView;\n    _screenShotTool.stockDetailViewController = _stockDetailViewController;\n}\n\n- (void)setStockDetailVC:(HXBaseViewController<HXStockDetailModulesDelegate> *)stockDetailViewController {\n    [stockDetailViewController.view addSubview:self.xfxgBtn];\n    [stockDetailViewController.view addSubview:self.xfxgHideBtn];\n    \n    _stockDetailViewController = stockDetailViewController;\n}\n\n- (void)contentViewWillDisPlay{\n    id<HXFSPeriodContentViewProtocol> content = (id<HXFSPeriodContentViewProtocol>)[_pageContainerView currentPageContent];\n    if ([content respondsToSelector:@selector(contentViewWillDisPlay)]) {\n        [content contentViewWillDisPlay];\n    }\n}\n\n///用户截图\n- (void)userDidTakeScreenShot:(NSNotification *)notification {\n    [_screenShotTool userDidTakeScreenShot:notification];\n}\n\n#pragma mark - HXFenshiPeriodViewProtocol presenter数据回调\n\n- (void)reloadDataWithSelectedIndex:(NSInteger)index{\n    _segmentView.titleArray = [self getTitleArray];\n    _segmentView.typeArray = _presenter.typeArray;\n    [self changeDataSource];\n    if (_internalPeriodView.hidden || _internalPeriodView.selectedIndex == -1) {\n        [_segmentView reloadDataWithIndex:index];\n    } else {\n        [_segmentView reloadMoreDataWithSelectIndex:kOuter_count reloadIndex:_internalPeriodView.selectedIndex+kOuter_count];\n    }\n}\n\n- (void)changeDataSource {\n    _dataSourceType = [self curDataSourceType];\n    //移除多余模块 修改数据源 重载\n    [_presenter removeInvalidContent];\n    if (_dataSourceType == PeriodDataSourceTypeOneMoreLast) {\n        [_presenter addContentWithIdentify:kIdentify_placeholder];\n    } else if (_dataSourceType == PeriodDataSourceTypeOneMoreNotLast) {\n        [_presenter addContentWithIdentify:[_presenter.tabKeyHideConfigs safetyObjectAtIndex:_internalPeriodView.selectedIndex+1]];\n    }\n}\n\n- (void)reloadMorePeriod {\n    [_internalPeriodView reloadData];\n}\n\n- (void)reloadTitleAtIndex:(NSInteger)index{\n    _segmentView.titleArray = [self getTitleArray];\n    _segmentView.typeArray = _presenter.typeArray;\n    if (index == kOuter_count) {\n        [_segmentView reloadItemImmediatelyAtIndex:index];\n    } else {\n        [_segmentView reloadItemAtIndex:index];\n    }\n}\n\n- (void)updateHeightAndReload:(BOOL)animated {\n    [self updateHeight];\n    [_moduleDynamicUIDelegate updateContent:self animated:animated];\n}\n\n#pragma mark - private\n\n- (void)_settingButtonAction:(UIButton *)sender {\n    id<HXFSPeriodContentViewProtocol> obj = (id<HXFSPeriodContentViewProtocol>)[_pageContainerView currentPageContent];\n    NSString *periodKey = obj.moduleIdentify;\n    BOOL supportBarrageSetting = [obj respondsToSelector:@selector(supportBarrageSetting)] && [obj supportBarrageSetting];\n    CGPoint startPoint = [sender convertPoint:CGPointMake(sender.bounds.size.width / 2.0, sender.bounds.size.height) toView:nil];","relevantFile":"","relevantFileList":[],"filePath":"HXFenshiPeriodView.mm","template":"objective-cpp","multiRes":{"hipilot":"= [self.view snapshotViewAfterScreenUpdates:YES];\n    UIImage *image = [self screenShotImageWithRect:targetRect snapshot:snap];\n    [self showToast:image.jc_imageDataWithLimitSize:CGSizeMake(kScreen","deepseek-chat-lite":"shot = [self.view snapshotImageAfterScreenUpdates:YES];","CodeQwen2.5-7B":"shot = [self.view snapshotViewAfterScreenUpdates:YES];","copilot":"shot = [self.view snapshotOf];\n}\n\n- (void)setupLayout {\n    [_periodCont"}},{"prefix":"\n#import <HXKLineModule/HXKLine.h>\n#import \"HXFenshiPeriodView.h\"\n#import <HXDataTypeConvertor/HXDataTypeConvertor.h>\n#import <HXBase/NSArray+Safety.h>\n#import <HXTool/InternetTimeTool.h>\n#import <HXFinanceMasterMoudle/NSDate+Extend.h>\n#import <HXEventBus/HXEventBus.h>\n#import <HXKLineModule/HXFenshiHistoryEvent.h>\n#import <HexColors/HexColors.h>\n#import <ThirdBase/Masonry.h>\n#import \"HXFenshiPeriodPresenter.h\"\n\n#import \"HXFenshiSetting.h\"\n#import \"HXKLineSetting.h\"\n#import \"USDropDownPopView.h\"\n#import \"AMSettingVarsProxy.h\"\n#import \"UIFont+HXFont.h\"\n\n#import <HXShowTipComponent/ToastView.h>\n#import \"HXHQTabsView.h\"\n#import \"HXHQFenShiPeriodCollectionViewCell.h\"\n#import \"HXHQListConfig.h\"\n#import \"AMUIPublicProxy+CurveLine.h\"\n#import \"HXUserInfo+SpecialServiceOrdered.h\"\n#import <HXBase/HXBaseMarketTools+TechCondition.h>\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"FortunePioneerStockSelectionView.h\"\n#import \"AMLocalIdDef.h\"\n#import \"HXRecordStockPeriodManager.h\"\n#import \"YYTextWeakProxy.h\"\n#import <HXKLineModule/HXKlinePublicProxy.h>\n#import \"NSDKPreAfterTool.h\"\n\n#import \"HXHQFenShiPeriodSortViewCell.h\"\n#import \"HXSnapShotNavigationController.h\"\n#import <HXThemeVersion/UINavigationBar+ChangeTheme.h>\n\n#import \"HXStrategySignalManager.h\"\n#import <HXKLineModule/HXKlinePublicProxy.h>\n#import <HXKLineModule/HXKlineSettingEvent.h>\n#import \"HXUserConfigCloudManager.h\"\n#import \"HXFenshiContentViewTradePresenter.h\"\n#import \"HXKlineContentViewTradePresenter.h\"\n#import \"HXFenshiPeriodView+PeriodDelegate.h\"\n\nextern NSString *const kNSDKTradeType;\nextern NSString *const kUSMarketOpenPrePost;\nextern CGFloat const kBottomMenuHeight;\n\nCGFloat const kFenShiPeriodSpaceHeight = 4;\nCGFloat const kFenShiPeriodBottomSpaceHeight = 8;\nCGFloat const kFenShiPeriodSegmentTitleHeight = 36;\n\nstatic CGFloat const kFenShiPeriodMore = 36;\nstatic CGFloat const CFXF_Button_Width_XFXG = 24; //按钮宽度\nstatic CGFloat const CFXF_Button_Height_XFXG = 52; //按钮高度\nstatic CGFloat const CFXF_Bottom_Space_Height_XFXG = 46; //按钮下方空隙\nstatic CGFloat const CFXF_Right_Space_Height_XFXG = 12; //按钮右侧空隙\nstatic CGFloat const kSettingMore = 40;\n\n// 引导相关\nstatic NSString *const kPeriodSwitchSlideGuideFlag = @\"periodSwitchSlideGuideFlag\";\nstatic NSString *const kPeriodSwitchClickInfo = @\"periodSwitchClickInfo\";\nstatic NSString *const kDateKey = @\"date\";\nstatic NSString *const kDayCountKey = @\"dayCount\";\nstatic NSUInteger const kDayCount = 5; //触发引导的日点击次数\nNSString * const kWaitForPeriodSwitchSlideGuide = @\"waitForPeriodSwitchSlideGuide\";\n\nstatic NSString *const FuncStockDetailScrollToFenShiTopNotify = @\"FuncStockDetailScrollToFenShiTopNotify\"; //跳转到详情页顶部通知，即section为0\n\n@interface HXFenshiPeriodView ()<HXPageContainerViewDataSource,HXPageContainerViewDelegate,HXFenshiPeriodViewProtocol, HXHQTabsViewDelegate, HXHQTabsViewDataSource>\n@property (nonatomic, strong) UIView *upSpaceView;\n@property (nonatomic, strong) UIView *lineView;\n\n@property (nonatomic, strong) UIView *spaceView;\n@property (nonatomic, strong) UIView *downSpaceView;\n\n@property (nonatomic, strong) HXFenshiSetting *fenshiSetting;\n@property (nonatomic, strong) HXKLineSetting *klineSetting;\n\n@property (nonatomic, strong) NSTimer *openTimer;\n\n@property (nonatomic, strong) UIButton *autoButton;\n\n@end\n\n@implementation HXFenshiPeriodView\n\n- (void)dealloc {\n    if (_openTimer) {\n        [_openTimer invalidate];\n        _openTimer = nil;\n    }\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (instancetype)init{\n    self = [super init];\n    if (self) {\n        HXFenshiPeriodPresenter *presenter = [[HXFenshiPeriodPresenter alloc] init];\n        presenter.view = self;\n        self.presenter = presenter;\n        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(userDidTakeScreenShot:) name:UIApplicationUserDidTakeScreenshotNotification object:nil];\n        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(openXianfengxuangu) name:@\"DealWithJCMM\" object:nil];\n        \n        //进入分时页面清除价格画线数据，使用分时页面价格\n        [HXFenshiContentViewTradePresenter shareInstance].priceParams = nil;\n        [HXKlineContentViewTradePresenter shareInstance].priceParams = nil;\n    }\n    return self;\n}\n\n/// 手势拦截 不切换股票\n- (void)gesture{}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    [self.view setBackgroundColor:FOREGROUND_COLOR_NORMAL theme:ThemeVersionNormal];\n    [self.view setBackgroundColor:FOREGROUND_COLOR_NIGHT theme:ThemeVersionNight];\n    [self.view addSubview:self.periodContainer];\n    [self.periodContainer addSubview:self.upSpaceView];\n    [self.periodContainer addSubview:self.segmentEditContainer];\n    [self.periodContainer addSubview:self.internalPeriodView];\n    [self.periodContainer addSubview:self.lineView];\n    [self.periodContainer addSubview:self.pageContainerView];\n    [self.periodContainer addSubview:self.spaceView];\n    [self.periodContainer addSubview:self.downSpaceView];\n    [self setupLayout];\n    [ThemeVersionManager changeTheme:self.view];\n    [self.upSpaceView changeTheme];\n    /// 手势拦截 不切换股票\n    UIPanGestureRecognizer *gesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(gesture)];\n    [self.view addGestureRecognizer:gesture];\n    if ([self.internalPeriodView conformsToProtocol:@protocol(HXFenshiMorePeriodViewDelegate)]) {\n        self.morePeriodViewDelegate =(id<HXFenshiMorePeriodViewDelegate>)self.internalPeriodView; //更多周期视图tab代理\n    }\n    \n    self.autoButton = [UIButton buttonWithType:UIButtonTypeCustom];\n    self.autoButton.frame = CGRectMake(0, 0, 40, 40);\n    self.autoButton.backgroundColor = [UIColor blueColor];\n    [self.periodContainer addSubview:self.autoButton];\n    [self.autoButton addTarget:self action:@selector(autoBegin) forControlEvents:UIControlEventTouchUpInside];\n}\n\n- (void)autoBegin {\n    CGRect targetRect = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);\n    UIImage *snapshot = [self.view snapshotOf","infill":"];\n}\n\n- (void)setupLayout {\n    [_periodContainer mas_makeConstraint","suffix":"s:^(MASConstraintMaker *make) {\n        make.edges.equalTo(self.view);\n    }];\n    [_upSpaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSpaceHeight);\n    }];\n    [_segmentEditContainer mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.upSpaceView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSegmentTitleHeight);\n    }];\n    [_internalPeriodView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.segmentEditContainer.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSegmentTitleHeight);\n    }];\n    [_lineView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.internalPeriodView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(0.5);\n    }];\n    [_pageContainerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.lineView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n    }];\n    [_spaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.pageContainerView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodBottomSpaceHeight);\n    }];\n    [_downSpaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.spaceView.mas_bottom);\n        make.left.right.bottom.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSpaceHeight);\n    }];\n}\n\n- (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n    // 放在willappear 股票切换需要同步一些状态\n    [_presenter loadWithStockDetailContextModel:_stockDetailContextModel];\n    // 同步更多的状态\n    [self setMorePeriodSelectedIndexWithIndex:[_presenter selectedHideItemIndex]];\n    // 本次进程内获取更多周期开启状态\n    BOOL isOpen = [HXKlinePublicProxy isMorePeriodOnOpen];\n    _internalPeriodView.hidden = !isOpen;\n\n    // 重载数据源\n    [self reloadDataWithSelectedIndex:_presenter.memorySelectedIndex];\n    \n    [_internalPeriodView reloadData]; // 内部周期tab\n    [self updateInternalPeriodViewHeight:_internalPeriodView.hidden ? 0 : kFenShiPeriodSegmentTitleHeight];\n    \n    [self openXianfengxuangu];\n    \n    [self updateHeightAndReload:YES];\n    \n    /// 策略灰度打开，注册策略代理\n    [HXStrategySignalManager sharedManager].periodViewDelegate = self;\n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    // 清空数据标记\n    [_presenter.cacheAdStateDic removeAllObjects];\n    \n    /// 用户cookie变更后刷新策略信号\n    __weak typeof(self) weakSelf = self;\n    [[NSNotificationCenter defaultCenter] addObserverForName:COOKIE_CHANGE_SUCCESS_SUBJECT_NAME object:nil queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification * _Nonnull note) {\n        NSString *oldPeriodIdentify = weakSelf.stockDetailContextModel.memoryStatusModel.periodIdentify;\n        if ([oldPeriodIdentify isEqualToString:kIdentify_1d]) {\n            ///当前周期为日k，刷新插件\n            [weakSelf handleKlineSettingEvent];\n        }\n    }];\n}\n\n- (void)viewDidDisappear:(BOOL)animated {\n    [super viewDidDisappear:animated];\n\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:COOKIE_CHANGE_SUCCESS_SUBJECT_NAME object:nil];\n}\n\n- (void)updateInternalPeriodViewHeight:(CGFloat)height {\n    [_internalPeriodView mas_updateConstraints:^(MASConstraintMaker *make) {\n        make.height.mas_equalTo(height);\n    }];\n}\n\n- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    id<HXFenshiContentViewPublicProtocol> content = (id<HXFenshiContentViewPublicProtocol>)[_pageContainerView pageContentAtIndex:0];\n    if([content respondsToSelector:@selector(periodViewWillDisAppear)]) {\n        [content periodViewWillDisAppear];\n    }\n}\n\n- (void)viewDidLayoutSubviews {\n    [super viewDidLayoutSubviews];\n    CGRect rect = _stockDetailViewController.view.bounds;\n    _xfxgBtn.frame = CGRectMake(rect.size.width - CFXF_Button_Height_XFXG-CFXF_Right_Space_Height_XFXG, rect.size.height-kBottomMenuHeight-SAFEAREA_BOTTOM_MARGIM_V-CFXF_Bottom_Space_Height_XFXG-CFXF_Button_Height_XFXG, CFXF_Button_Height_XFXG, CFXF_Button_Height_XFXG);\n    [_xfxgBtn changeTheme];\n    \n    _xfxgHideBtn.frame = CGRectMake(rect.size.width - CFXF_Button_Width_XFXG, rect.size.height-kBottomMenuHeight-SAFEAREA_BOTTOM_MARGIM_V-CFXF_Bottom_Space_Height_XFXG-CFXF_Button_Height_XFXG, CFXF_Button_Width_XFXG, CFXF_Button_Height_XFXG);\n    [_xfxgHideBtn changeTheme];\n}\n\n@synthesize stockDetailContextModel = _stockDetailContextModel;\n@synthesize stockDetailViewController = _stockDetailViewController;\n@synthesize moduleDynamicUIDelegate = _moduleDynamicUIDelegate;\n\n- (void)loadWithModel:(HXStockDetailContextModel *)model {\n    _stockDetailContextModel = model;\n    _screenShotTool = [[HXUserScreenShotTool alloc] init];\n    _screenShotTool.stockDetailContextModel = model;\n    _screenShotTool.presentVC = self;\n    _screenShotTool.pageContainerView = _pageContainerView;\n    _screenShotTool.stockDetailViewController = _stockDetailViewController;\n}\n\n- (void)setStockDetailVC:(HXBaseViewController<HXStockDetailModulesDelegate> *)stockDetailViewController {\n    [stockDetailViewController.view addSubview:self.xfxgBtn];\n    [stockDetailViewController.view addSubview:self.xfxgHideBtn];\n    \n    _stockDetailViewController = stockDetailViewController;\n}\n\n- (void)contentViewWillDisPlay{\n    id<HXFSPeriodContentViewProtocol> content = (id<HXFSPeriodContentViewProtocol>)[_pageContainerView currentPageContent];\n    if ([content respondsToSelector:@selector(contentViewWillDisPlay)]) {\n        [content contentViewWillDisPlay];\n    }\n}\n\n///用户截图\n- (void)userDidTakeScreenShot:(NSNotification *)notification {\n    [_screenShotTool userDidTakeScreenShot:notification];\n}\n\n#pragma mark - HXFenshiPeriodViewProtocol presenter数据回调\n\n- (void)reloadDataWithSelectedIndex:(NSInteger)index{\n    _segmentView.titleArray = [self getTitleArray];\n    _segmentView.typeArray = _presenter.typeArray;\n    [self changeDataSource];\n    if (_internalPeriodView.hidden || _internalPeriodView.selectedIndex == -1) {\n        [_segmentView reloadDataWithIndex:index];\n    } else {\n        [_segmentView reloadMoreDataWithSelectIndex:kOuter_count reloadIndex:_internalPeriodView.selectedIndex+kOuter_count];\n    }\n}\n\n- (void)changeDataSource {\n    _dataSourceType = [self curDataSourceType];\n    //移除多余模块 修改数据源 重载\n    [_presenter removeInvalidContent];\n    if (_dataSourceType == PeriodDataSourceTypeOneMoreLast) {\n        [_presenter addContentWithIdentify:kIdentify_placeholder];\n    } else if (_dataSourceType == PeriodDataSourceTypeOneMoreNotLast) {\n        [_presenter addContentWithIdentify:[_presenter.tabKeyHideConfigs safetyObjectAtIndex:_internalPeriodView.selectedIndex+1]];\n    }\n}\n\n- (void)reloadMorePeriod {\n    [_internalPeriodView reloadData];\n}\n\n- (void)reloadTitleAtIndex:(NSInteger)index{\n    _segmentView.titleArray = [self getTitleArray];\n    _segmentView.typeArray = _presenter.typeArray;\n    if (index == kOuter_count) {\n        [_segmentView reloadItemImmediatelyAtIndex:index];\n    } else {\n        [_segmentView reloadItemAtIndex:index];\n    }\n}\n\n- (void)updateHeightAndReload:(BOOL)animated {\n    [self updateHeight];\n    [_moduleDynamicUIDelegate updateContent:self animated:animated];\n}\n\n#pragma mark - private\n\n- (void)_settingButtonAction:(UIButton *)sender {\n    id<HXFSPeriodContentViewProtocol> obj = (id<HXFSPeriodContentViewProtocol>)[_pageContainerView currentPageContent];\n    NSString *periodKey = obj.moduleIdentify;\n    BOOL supportBarrageSetting = [obj respondsToSelector:@selector(supportBarrageSetting)] && [obj supportBarrageSetting];\n    CGPoint startPoint = [sender convertPoint:CGPointMake(sender.bounds.size.width / 2.0, sender.bounds.size.height) toView:nil];\n    if ([periodKey isE","relevantFile":"","relevantFileList":[],"filePath":"HXFenshiPeriodView.mm","template":"objective-cpp","multiRes":{"hipilot":":targetRect afterScreenUpdates:YES];\n    self.presenter.screenShot = snapshot;\n}\n\n- (void)setupLayout {\n    [_periodContainer mas_makeConstraint","deepseek-chat-lite":"fscreenWithView:self.view];","CodeQwen2.5-7B":"View:self.view afterScreenUpdates:YES];","copilot":"];\n}\n\n- (void)setupLayout {\n    [_periodContainer mas_makeConstraint"}},{"prefix":"\n#import <HXKLineModule/HXKLine.h>\n#import \"HXFenshiPeriodView.h\"\n#import <HXDataTypeConvertor/HXDataTypeConvertor.h>\n#import <HXBase/NSArray+Safety.h>\n#import <HXTool/InternetTimeTool.h>\n#import <HXFinanceMasterMoudle/NSDate+Extend.h>\n#import <HXEventBus/HXEventBus.h>\n#import <HXKLineModule/HXFenshiHistoryEvent.h>\n#import <HexColors/HexColors.h>\n#import <ThirdBase/Masonry.h>\n#import \"HXFenshiPeriodPresenter.h\"\n\n#import \"HXFenshiSetting.h\"\n#import \"HXKLineSetting.h\"\n#import \"USDropDownPopView.h\"\n#import \"AMSettingVarsProxy.h\"\n#import \"UIFont+HXFont.h\"\n\n#import <HXShowTipComponent/ToastView.h>\n#import \"HXHQTabsView.h\"\n#import \"HXHQFenShiPeriodCollectionViewCell.h\"\n#import \"HXHQListConfig.h\"\n#import \"AMUIPublicProxy+CurveLine.h\"\n#import \"HXUserInfo+SpecialServiceOrdered.h\"\n#import <HXBase/HXBaseMarketTools+TechCondition.h>\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"FortunePioneerStockSelectionView.h\"\n#import \"AMLocalIdDef.h\"\n#import \"HXRecordStockPeriodManager.h\"\n#import \"YYTextWeakProxy.h\"\n#import <HXKLineModule/HXKlinePublicProxy.h>\n#import \"NSDKPreAfterTool.h\"\n\n#import \"HXHQFenShiPeriodSortViewCell.h\"\n#import \"HXSnapShotNavigationController.h\"\n#import <HXThemeVersion/UINavigationBar+ChangeTheme.h>\n\n#import \"HXStrategySignalManager.h\"\n#import <HXKLineModule/HXKlinePublicProxy.h>\n#import <HXKLineModule/HXKlineSettingEvent.h>\n#import \"HXUserConfigCloudManager.h\"\n#import \"HXFenshiContentViewTradePresenter.h\"\n#import \"HXKlineContentViewTradePresenter.h\"\n#import \"HXFenshiPeriodView+PeriodDelegate.h\"\n#import <Photos/Photos.h>\n\nextern NSString *const kNSDKTradeType;\nextern NSString *const kUSMarketOpenPrePost;\nextern CGFloat const kBottomMenuHeight;\n\nCGFloat const kFenShiPeriodSpaceHeight = 4;\nCGFloat const kFenShiPeriodBottomSpaceHeight = 8;\nCGFloat const kFenShiPeriodSegmentTitleHeight = 36;\n\nstatic CGFloat const kFenShiPeriodMore = 36;\nstatic CGFloat const CFXF_Button_Width_XFXG = 24; //按钮宽度\nstatic CGFloat const CFXF_Button_Height_XFXG = 52; //按钮高度\nstatic CGFloat const CFXF_Bottom_Space_Height_XFXG = 46; //按钮下方空隙\nstatic CGFloat const CFXF_Right_Space_Height_XFXG = 12; //按钮右侧空隙\nstatic CGFloat const kSettingMore = 40;\n\n// 引导相关\nstatic NSString *const kPeriodSwitchSlideGuideFlag = @\"periodSwitchSlideGuideFlag\";\nstatic NSString *const kPeriodSwitchClickInfo = @\"periodSwitchClickInfo\";\nstatic NSString *const kDateKey = @\"date\";\nstatic NSString *const kDayCountKey = @\"dayCount\";\nstatic NSUInteger const kDayCount = 5; //触发引导的日点击次数\nNSString * const kWaitForPeriodSwitchSlideGuide = @\"waitForPeriodSwitchSlideGuide\";\n\nstatic NSString *const FuncStockDetailScrollToFenShiTopNotify = @\"FuncStockDetailScrollToFenShiTopNotify\"; //跳转到详情页顶部通知，即section为0\n\n@interface HXFenshiPeriodView ()<HXPageContainerViewDataSource,HXPageContainerViewDelegate,HXFenshiPeriodViewProtocol, HXHQTabsViewDelegate, HXHQTabsViewDataSource>\n@property (nonatomic, strong) UIView *upSpaceView;\n@property (nonatomic, strong) UIView *lineView;\n\n@property (nonatomic, strong) UIView *spaceView;\n@property (nonatomic, strong) UIView *downSpaceView;\n\n@property (nonatomic, strong) HXFenshiSetting *fenshiSetting;\n@property (nonatomic, strong) HXKLineSetting *klineSetting;\n\n@property (nonatomic, strong) NSTimer *openTimer;\n\n@property (nonatomic, strong) UIButton *autoButton;\n\n@end\n\n@implementation HXFenshiPeriodView\n\n- (void)dealloc {\n    if (_openTimer) {\n        [_openTimer invalidate];\n        _openTimer = nil;\n    }\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (instancetype)init{\n    self = [super init];\n    if (self) {\n        HXFenshiPeriodPresenter *presenter = [[HXFenshiPeriodPresenter alloc] init];\n        presenter.view = self;\n        self.presenter = presenter;\n        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(userDidTakeScreenShot:) name:UIApplicationUserDidTakeScreenshotNotification object:nil];\n        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(openXianfengxuangu) name:@\"DealWithJCMM\" object:nil];\n        \n        //进入分时页面清除价格画线数据，使用分时页面价格\n        [HXFenshiContentViewTradePresenter shareInstance].priceParams = nil;\n        [HXKlineContentViewTradePresenter shareInstance].priceParams = nil;\n    }\n    return self;\n}\n\n/// 手势拦截 不切换股票\n- (void)gesture{}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    [self.view setBackgroundColor:FOREGROUND_COLOR_NORMAL theme:ThemeVersionNormal];\n    [self.view setBackgroundColor:FOREGROUND_COLOR_NIGHT theme:ThemeVersionNight];\n    [self.view addSubview:self.periodContainer];\n    [self.periodContainer addSubview:self.upSpaceView];\n    [self.periodContainer addSubview:self.segmentEditContainer];\n    [self.periodContainer addSubview:self.internalPeriodView];\n    [self.periodContainer addSubview:self.lineView];\n    [self.periodContainer addSubview:self.pageContainerView];\n    [self.periodContainer addSubview:self.spaceView];\n    [self.periodContainer addSubview:self.downSpaceView];\n    [self setupLayout];\n    [ThemeVersionManager changeTheme:self.view];\n    [self.upSpaceView changeTheme];\n    /// 手势拦截 不切换股票\n    UIPanGestureRecognizer *gesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(gesture)];\n    [self.view addGestureRecognizer:gesture];\n    if ([self.internalPeriodView conformsToProtocol:@protocol(HXFenshiMorePeriodViewDelegate)]) {\n        self.morePeriodViewDelegate =(id<HXFenshiMorePeriodViewDelegate>)self.internalPeriodView; //更多周期视图tab代理\n    }\n    \n    self.autoButton = [UIButton buttonWithType:UIButtonTypeCustom];\n    self.autoButton.frame = CGRectMake(0, 0, 40, 40);\n    self.autoButton.backgroundColor = [UIColor blueColor];\n    [self.periodContainer addSubview:self.autoButton];\n    [self.autoButton addTarget:self action:@selector(autoBegin) forControlEvents:UIControlEventTouchUpInside];\n}\n\n- (void)autoBegin {\n    CGRect targetRect = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);\n    UIImage *snapshotImage = [self snapshotOfRect:targetRect];\n    \n    // UIImageWriteToSavedPhotosAlbum(snapshotImage, self, @selector, <#void * _Nullable contextInfo#>)\n    UIImageWriteToSavedPhotosAlbum(snapshotIma","infill":"ge, self, @selector\n}\n\n- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo {\n    if (error) {\n        NSLog(@\"xzq---保存失败 %@\", error.localiz","suffix":"edDescription);\n    } else {\n        NSLog(@\"xzq---保存成功\");\n    }\n}\n\n- (UIImage *)snapshotOfRect:(CGRect)rect {\n    UIGraphicsBeginImageContextWithOptions(rect.size, NO, 0.0);\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    CGContextTranslateCTM(context, -rect.origin.x, -rect.origin.y);\n    [self.view.layer renderInContext:context];\n    UIImage *snapshotImage = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return snapshotImage;\n}\n\n- (void)setupLayout {\n    [_periodContainer mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.edges.equalTo(self.view);\n    }];\n    [_upSpaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSpaceHeight);\n    }];\n    [_segmentEditContainer mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.upSpaceView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSegmentTitleHeight);\n    }];\n    [_internalPeriodView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.segmentEditContainer.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSegmentTitleHeight);\n    }];\n    [_lineView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.internalPeriodView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(0.5);\n    }];\n    [_pageContainerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.lineView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n    }];\n    [_spaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.pageContainerView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodBottomSpaceHeight);\n    }];\n    [_downSpaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.spaceView.mas_bottom);\n        make.left.right.bottom.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSpaceHeight);\n    }];\n}\n\n- (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n    // 放在willappear 股票切换需要同步一些状态\n    [_presenter loadWithStockDetailContextModel:_stockDetailContextModel];\n    // 同步更多的状态\n    [self setMorePeriodSelectedIndexWithIndex:[_presenter selectedHideItemIndex]];\n    // 本次进程内获取更多周期开启状态\n    BOOL isOpen = [HXKlinePublicProxy isMorePeriodOnOpen];\n    _internalPeriodView.hidden = !isOpen;\n\n    // 重载数据源\n    [self reloadDataWithSelectedIndex:_presenter.memorySelectedIndex];\n    \n    [_internalPeriodView reloadData]; // 内部周期tab\n    [self updateInternalPeriodViewHeight:_internalPeriodView.hidden ? 0 : kFenShiPeriodSegmentTitleHeight];\n    \n    [self openXianfengxuangu];\n    \n    [self updateHeightAndReload:YES];\n    \n    /// 策略灰度打开，注册策略代理\n    [HXStrategySignalManager sharedManager].periodViewDelegate = self;\n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    // 清空数据标记\n    [_presenter.cacheAdStateDic removeAllObjects];\n    \n    /// 用户cookie变更后刷新策略信号\n    __weak typeof(self) weakSelf = self;\n    [[NSNotificationCenter defaultCenter] addObserverForName:COOKIE_CHANGE_SUCCESS_SUBJECT_NAME object:nil queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification * _Nonnull note) {\n        NSString *oldPeriodIdentify = weakSelf.stockDetailContextModel.memoryStatusModel.periodIdentify;\n        if ([oldPeriodIdentify isEqualToString:kIdentify_1d]) {\n            ///当前周期为日k，刷新插件\n            [weakSelf handleKlineSettingEvent];\n        }\n    }];\n}\n\n- (void)viewDidDisappear:(BOOL)animated {\n    [super viewDidDisappear:animated];\n\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:COOKIE_CHANGE_SUCCESS_SUBJECT_NAME object:nil];\n}\n\n- (void)updateInternalPeriodViewHeight:(CGFloat)height {\n    [_internalPeriodView mas_updateConstraints:^(MASConstraintMaker *make) {\n        make.height.mas_equalTo(height);\n    }];\n}\n\n- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    id<HXFenshiContentViewPublicProtocol> content = (id<HXFenshiContentViewPublicProtocol>)[_pageContainerView pageContentAtIndex:0];\n    if([content respondsToSelector:@selector(periodViewWillDisAppear)]) {\n        [content periodViewWillDisAppear];\n    }\n}\n\n- (void)viewDidLayoutSubviews {\n    [super viewDidLayoutSubviews];\n    CGRect rect = _stockDetailViewController.view.bounds;\n    _xfxgBtn.frame = CGRectMake(rect.size.width - CFXF_Button_Height_XFXG-CFXF_Right_Space_Height_XFXG, rect.size.height-kBottomMenuHeight-SAFEAREA_BOTTOM_MARGIM_V-CFXF_Bottom_Space_Height_XFXG-CFXF_Button_Height_XFXG, CFXF_Button_Height_XFXG, CFXF_Button_Height_XFXG);\n    [_xfxgBtn changeTheme];\n    \n    _xfxgHideBtn.frame = CGRectMake(rect.size.width - CFXF_Button_Width_XFXG, rect.size.height-kBottomMenuHeight-SAFEAREA_BOTTOM_MARGIM_V-CFXF_Bottom_Space_Height_XFXG-CFXF_Button_Height_XFXG, CFXF_Button_Width_XFXG, CFXF_Button_Height_XFXG);\n    [_xfxgHideBtn changeTheme];\n}\n\n@synthesize stockDetailContextModel = _stockDetailContextModel;\n@synthesize stockDetailViewController = _stockDetailViewController;\n@synthesize moduleDynamicUIDelegate = _moduleDynamicUIDelegate;\n\n- (void)loadWithModel:(HXStockDetailContextModel *)model {\n    _stockDetailContextModel = model;\n    _screenShotTool = [[HXUserScreenShotTool alloc] init];\n    _screenShotTool.stockDetailContextModel = model;\n    _screenShotTool.presentVC = self;\n    _screenShotTool.pageContainerView = _pageContainerView;\n    _screenShotTool.stockDetailViewController = _stockDetailViewController;\n}\n\n- (void)setStockDetailVC:(HXBaseViewController<HXStockDetailModulesDelegate> *)stockDetailViewController {\n    [stockDetailViewController.view addSubview:self.xfxgBtn];\n    [stockDetailViewController.view addSubview:self.xfxgHideBtn];\n    \n    _stockDetailViewController = stockDetailViewController;\n}\n\n- (void)contentViewWillDisPlay{\n    id<HXFSPeriodContentViewProtocol> content = (id<HXFSPeriodContentViewProtocol>)[_pageContainerView currentPageContent];\n    if ([content respondsToSelector:@selector(contentViewWillDisPlay)]) {\n        [content contentViewWillDisPlay];\n    }\n}\n\n///用户截图\n- (void)userDidTakeScreenShot:(NSNotification *)notification {\n    [_screenShotTool userDidTakeScreenShot:notification];\n}\n\n#pragma mark - HXFenshiPeriodViewProtocol presenter数据回调\n\n- (void)reloadDataWithSelectedIndex:(NSInteger)index{\n    _segmentView.titleArray = [self getTitleArray];\n    _segmentView.typeArray = _presenter.typeArray;\n    [self changeDataSource];\n    if (_internalPeriodView.hidden || _internalPeriodView.selectedIndex == -1) {\n        [_segmentView reloadDataWithIndex:index];\n    } else {\n        [_segmentView reloadMoreDataWithSelectIndex:kOuter_count reloadIndex:_internalPeriodView.selectedIndex+kOuter_count];\n    }\n}\n\n- (void)changeDataSource {\n    _dataSourceType = [self curDataSourceType];\n    //移除多余模块 修改数据源 重载\n    [_presenter removeInvalidContent];\n    if (_dataSourceType == PeriodDataSourceTypeOneMoreLast) {\n        [_presenter addContentWithIdentify:kIdentify_placeholder];\n    } else if (_dataSourceType == PeriodDataSourceTypeOneMoreNotLast) {\n        [_presenter addContentWithIdentify:[_presenter.tabKeyHideConfigs safetyObjectAtIndex:_internalPeriodView.selectedIndex+1]];\n    }\n}\n\n- (void)reloadMorePeriod {\n    [_internalPeriodView reloadData];\n}\n\n- (void)reloadTitleAtIndex:(NSInteger)index{\n    _segmentView.titleArray = [self getTitleArray];\n    _segmentView.typeArray = _presenter.typeArray;\n    if (index == kOuter_count) {\n        [_segmentView reloadItemImmediatelyAtIndex:index];\n    } else {\n        [_segmentView reloadItemAtIndex:index];\n    }\n}\n\n- (void)updateHeightAndReload:(BOOL)animated {\n    [self updateHeight];\n    [_moduleDynamicUIDelegate up","relevantFile":"","relevantFileList":[],"filePath":"HXFenshiPeriodView.mm","template":"objective-cpp","multiRes":{"hipilot":"ge, self, nil, nil, YES, completionHandler:^(BOOL success, NSError * _Nullable error) {\n        NSLog(@\"xzq---图片保存:%d\",success);\n    });\n    \n    if (!snapshotImage) {\n       ","deepseek-chat-lite":"ge, nil, @selector(image:didFinishSavingWithError:contextInfo:), nil);","CodeQwen2.5-7B":"ge, self, nil, nil);","copilot":"ge, self, @selector\n}\n\n- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo {\n    if (error) {\n        NSLog(@\"xzq---保存失败 %@\", error.localiz"}},{"prefix":"                [luaManagerWeak openOrClosePushProcessor:NO];\n                return;\n            }\n        }\n        [AMUIPublicProxy showTipAutoClose:@\"lua热更新失败\"];\n        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:WTDebugForceUpdateConfigFile];\n    }];\n}\n\n//重置本地Lua文件\n- (void)resetLocalLua {\n    [HXWTModuleResourceFilesManager copyWTMoudleBundleResource];\n}\n\n- (void)changeWtModuleDebugLogStatus {\n\n    if (bOpenWtModuleDebugLog) {\n        AM_UI_Public_Proxy::ShowTipAutoCloseNs(@\"已关闭主站debug日志\");\n    } else {\n        AM_UI_Public_Proxy::ShowTipAutoCloseNs(@\"已开启主站debug日志\");\n    }\n    bOpenWtModuleDebugLog = !bOpenWtModuleDebugLog;\n}\n\n- (void)changedirectBarState {\n    HXWTModuleStateControl *control = [HXWTModuleStateControl shareInstance];\n    if (!control.running) {\n        [control start];\n    } else {\n        [control close];\n    }\n}\n\n//打开客户端日志上传\n- (void)sendHXNewLog {\n    [[HXNewLogManager shareInstance] sendHXNewLog];\n}\n#endif\n\n// 把日志输出到console\n- (void)redirectConsoleLogToDocumentFolder\n{\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *logPath = [documentsDirectory stringByAppendingPathComponent:@\"console_log.txt\"];\n    freopen([logPath cStringUsingEncoding:NSASCIIStringEncoding],\"a+\",stderr);\n}\n\n// 全速盘口忽略开盘时间\n- (void)ignoreOpenQuotationTime {\n    [FullSpeedManager shareManager].ignoreOpenQuotationTime = ![FullSpeedManager shareManager].ignoreOpenQuotationTime;\n}\n\n// 全速盘口本地状态记录重置\n- (void)resetOpenQuotationLocalStatus {\n    [FullSpeedManager resetLocalState];\n}\n\n// DNS解析信息\n- (void)dnsAnalyticInfo {\n    if (_dnsInfoVC) {\n        _dnsInfoVC = nil;\n    }\n    _dnsInfoVC = [[DNSInfoViewController alloc] init];\n    _dnsInfoVC.delegate = self;\n    UIViewController* vc = (UIViewController*)[((AMUITabFm*)[AMUIFrameWork shareingUIFramework]) getCurStackController];\n    [vc presentViewController:_dnsInfoVC animated:YES completion:nil];\n}\n\n#ifdef _DEBUG\n//打印请求结果\n- (void)showFetchResult {\n    [HXSocketFetcher fetchLogDebug];\n}\n\n// 显示捕获到的盈亏异常数据\n- (void)showProfitAndLossAbnormityInfo {\n    YingkuiOutliersView *outliers = [[YingkuiOutliersView alloc] init];\n    [g_eqWindow addSubview:outliers];\n}\n\n- (void)showFilter{\n    [WTAMLogFilterView show];\n    [self showLog];\n}\n#endif\n\n// HXAMlog实时日志\n- (void)showLog {\n    if (EQGetAppFrame() == NULL) {\n        return;\n    }\n    CEQEvent* pEvent = EQGetAppFrame()->GetNewEventObj();\n    pEvent->SetEventType(EQEVT_SELF);\n    CEQAffairAnalyzer* pAffairAnalyzer = EQGetAffairAnalyzer()    ;\n    if(pAffairAnalyzer) {\n        pAffairAnalyzer->LogAverageRequestTime();\n        pAffairAnalyzer->WriteLogRightNow();\n    }\n    pEvent->SetEventId(EQEVT_ID_SHOW_NETLOG);\n    EQGetAppFrame()->PostMsg(pEvent);\n}\n#ifdef _DEBUG\n- (void)autoShowLog {\n    [[HXLogViewController shared] changeAutoOpenLog];\n}\n#endif\n\n// HXAMlog日志列表\n- (void)goToHXAMLogList {\n    HXAMLogFileListViewController *listVC = [[HXAMLogFileListViewController alloc] init];\n    UIViewController* tabBarVC = (UIViewController*)[((AMUITabFm*)[AMUIFrameWork shareingUIFramework]) getCurStackController];\n    NavigationControllEx * nav = [[NavigationControllEx alloc] initWithRootViewController:listVC];\n    [tabBarVC presentViewController:nav animated:YES completion:nil];\n}\n\n/// 展示统一链路日志视图\n- (void)openHXECLogView {\n    [HXECService showTestView];\n}\n\n// 开启日志\n- (void)openLog {\n    g_bPringLog = YES;\n}\n\n// 关闭日志\n- (void)closeLog {\n    g_bPringLog = NO;\n}\n\n#ifdef _DEBUG\n// 显示本地缓存的流水数据\n- (void)showLocalCacheData {\n    liushuiScrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, Screen_height)];\n    [liushuiScrollView setBackgroundColor:[UIColor whiteColor]];\n    liushuiScrollView.contentSize = CGSizeMake(Screen_width, Screen_height);\n    [g_eqWindow addSubview:liushuiScrollView];\n    \n    //读取本地数据\n    WTAccountInfor *curAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    NSDictionary *liushuiData = curAccount.isRZRQ ? [TJiaoYiRiSearchModel readRZRQChengJiaoLiushuiFromLocalWithAccount:curAccount.account] : [TJiaoYiRiSearchModel readChengJiaoLiushuiFromLocalWithAccount:curAccount.account];\n    \n    if ([liushuiData isKindOfClass:[NSDictionary class]]) {\n        NSString *saveDateStr = liushuiData[@\"date\"];\n        NSString *cacheTimeStr = [liushuiData thsStringForKey:@\"cacheTime\"];\n        NSString *queryIndexString = [liushuiData thsStringForKey:@\"34057\"];\n        NSArray *stockCodes = liushuiData[@2102];\n        NSArray *stockNames = liushuiData[@2103];\n        NSArray *dealNumbers = liushuiData[@2128];\n        NSArray *dealPervalue = liushuiData[@2129];\n        NSArray *dealTypes = liushuiData[@2109];\n        NSArray *dealValue = liushuiData[@2131];\n        NSArray *dealTimes = liushuiData[@2142];\n        NSArray *tradeMarkets = liushuiData[@2130];\n        NSArray *gdAccouunts = liushuiData[@2106];\n        NSArray *htNums = curAccount.isRZRQ ? liushuiData[@2135] : liushuiData[@2144];\n        NSArray *cjNums = curAccount.isRZRQ ? liushuiData[@2130] : liushuiData[@2145];\n        \n        UILabel *timeLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 40, Screen_width, 40)];\n        timeLabel.font = [UIFont systemFontOfSize:17.0];\n        timeLabel.textColor = [UIColor redColor];\n        timeLabel.text = [NSString stringWithFormat:@\"流水数据时间：%@--%@--%@\", saveDateStr, cacheTimeStr, queryIndexString];\n        [timeLabel setTextAlignment:NSTextAlignmentCenter];\n        [liushuiScrollView addSubview:timeLabel];\n        UILabel *shuzu = [[UILabel alloc] initWithFrame:CGRectMake(0, 85, Screen_width, 40)];\n        shuzu.font = [UIFont systemFontOfSize:17.0];\n        shuzu.textColor = [UIColor redColor];\n        shuzu.text = [NSString stringWithFormat:@\"流水数据一共%lu条\", (unsigned long)stockNames.count];\n        [shuzu setTextAlignment:NSTextAlignmentCenter];\n        [liushuiScrollView addSubview:shuzu];\n        if (stockCodes.count == stockNames.count\n            && stockCodes.count == dealNumbers.count\n            && stockCodes.count == dealPervalue.count\n            && stockCodes.count == dealTypes.count\n            && stockCodes.count == dealValue.count) {\n            liushuiScrollView.contentSize = CGSizeMake(Screen_width, 160 + stockCodes.count * 90);\n            for (int i = 0; i < stockCodes.count; i++) {\n                UILabel *stock = [[UILabel alloc] initWithFrame:CGRectMake(0, 130 + i * 90, Screen_width, 30)];\n                stock.font = [UIFont systemFontOfSize:15.0];\n                stock.textColor = [UIColor blackColor];\n                stock.text = [NSString stringWithFormat:@\"第 %i 条流水数据\", i + 1];\n                [stock setTextAlignment:NSTextAlignmentCenter];\n                [liushuiScrollView addSubview:stock];\n                UILabel *stockData = [[UILabel alloc] initWithFrame:CGRectMake(0, 160 + i * 90, Screen_width, 60)];\n                stockData.font = [UIFont systemFontOfSize:13.0];\n                stockData.textColor = [UIColor blackColor];\n                stockData.text = [NSString stringWithFormat:@\"操作: %@      代码: %@      名称: %@      交易价格: %@      交易数量: %@      交易总价: %@  成交时间：%@  交易市场：%@  股东账号：%@  合同编号：%@  成交编号：%@\", dealTypes[i], stockCodes[i], stockNames[i], dealPervalue[i], dealNumbers[i], dealValue[i], [dealTimes safetyObjectAtIndex:i], [tradeMarkets safetyObjectAtIndex:i], [gdAccouunts safetyObjectAtIndex:i], [htNums safetyObjectAtIndex:i], [cjNums safetyObjectAtIndex:i]];\n                [stockData setTextAlignment:NSTextAlignmentCenter];\n                stockData.numberOfLines = 0;\n                stockData.lineBreakMode = NSLineBreakByWordWrapping;\n                [liushuiScrollView addSubview:stockData];\n            }\n        }\n    }\n\n    UIButton* btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [btn setTitle:@\"返回\" forState:UIControlStateNormal];\n    [btn addTarget:self action:@selector(dismissLiushuiScrollView) f","infill":"NSString *message = isTestEnvironment ? @\"切换为测试环境\" : @\"切换为正式环境\";\r\n  ","suffix":"  [AMUIPublicProxy showTipAutoClose:message];\r\n    \r\n}\r\n\r\n- (void)showDataMonitor {\r\n    if (!self.monitorController) {\r\n        self.monitorController = [[DataMonitorContainerController alloc] initWithType:DataMonitorContainerTypeSingle];\r\n        __weak __typeof(self) weakSelf = self;\r\n        self.monitorController.closeCallback = ^{\r\n            [weakSelf closeDataMonitor];\r\n        };\r\n        [g_eqWindow.rootViewController addChildViewController:self.monitorController];\r\n        [g_eqWindow.rootViewController.view addSubview:self.monitorController.view];\r\n        [self.monitorController didMoveToParentViewController:g_eqWindow.rootViewController];\r\n        CGFloat ratio = 0.8;\r\n        CGSize size = g_eqWindow.bounds.size;\r\n        NSInteger y = size.height * (1.0 - ratio) / 2.0 + 1;\r\n        NSInteger height = size.height * ratio + 1;\r\n        self.monitorController.view.frame = CGRectMake(0, y, size.width, height);\r\n    }\r\n}\r\n\r\n- (void)closeDataMonitor {\r\n    [DataMonitorManager enableDataMonitor:NO];\r\n    [DataMonitorManager clearData];\r\n    if (self.monitorController) {\r\n        [self.monitorController willMoveToParentViewController:nil];\r\n        [self.monitorController.view removeFromSuperview];\r\n        [self.monitorController removeFromParentViewController];\r\n        self.monitorController = nil;\r\n    }\r\n}\r\n\r\n- (void)removeBrokerBackUpDebugInfoView {\r\n    [brokerBackUpDebugInfo removeFromSuperview];\r\n}\r\n\r\n- (void)deleteAndRemoveBrokerView {\r\n    [HXBrokerInfoLogManager deleteLog];\r\n    [self removeBrokerBackUpDebugInfoView];\r\n}\r\n#endif\r\n\r\n- (void)removeNotificationView {\r\n    [localNotificationSetView removeFromSuperview];\r\n}\r\n\r\n- (void)receiveStuffData:(NSDictionary *)stuffData\r\n{\r\n    void* data = [[stuffData objectForKey:@\"dispatch_stuff_data\"] pointerValue];\r\n    CEQString16* text = ((CEQStuffTextStruct*)data)->GetStrText();\r\n    NSString* str = [NSString stringWithEQString16:text];\r\n    \r\n    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:str,@\"strKey\",@\"hq1\",@\"source\", nil];\r\n    [[NSNotificationCenter defaultCenter] postNotificationName:@\"debugMenu_receive\" object:nil userInfo:dic];\r\n    \r\n}\r\n\r\n- (void)dnsInfoViewClose {\r\n    _dnsInfoVC.delegate = nil;\r\n    _dnsInfoVC = nil;\r\n}\r\n\r\n#ifdef _DEBUG\r\n- (void)dismissLiushuiScrollView {\r\n    [liushuiScrollView removeFromSuperview];\r\n}\r\n\r\n- (void)clearCompetitorAPPStat {\r\n    [[NSUserDefaults standardUserDefaults] removeObjectForKey:kLastTimeKey];\r\n}\r\n#endif\r\n- (NSMutableArray *)backLocalURL:(NSString *)fileName originArray:(NSMutableArray *)originArray{\r\n    NSString *strSourcePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:fileName];\r\n    NSData *fileData = [[NSData alloc] initWithContentsOfFile:strSourcePath];\r\n    if (fileData == nil) {\r\n        return originArray;\r\n    }\r\n    NSDictionary *localUrlDic = [NSJSONSerialization JSONObjectWithData:fileData options:NSJSONReadingAllowFragments error:nil];\r\n    \r\n    [localUrlDic enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {\r\n        [originArray addObject:obj];\r\n    }];\r\n    return originArray;\r\n}\r\n\r\n- (void)showMessageTips:(NSString *)message {\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"\" message:message preferredStyle:UIAlertControllerStyleAlert];\r\n    UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n    }];\r\n    [alert addAction:confirmAction];\r\n    [vc presentViewController:alert animated:YES completion:nil];\r\n}\r\n\r\n#ifdef _DEBUG\r\n\r\n- (void)showChangeZiXuanScrollParams {\r\n    UIAlertController *contentAlert = [UIAlertController alertControllerWithTitle:@\"设置自选滑动参数\" message:nil preferredStyle:UIAlertControllerStyleAlert];\r\n    [contentAlert addAction:[UIAlertAction actionWithTitle:@\"clear\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\r\n        if (contentAlert.textFields.count > 0) {\r\n            UITextField * textField = contentAlert.textFields[0];\r\n            textField.text = @\"\";\r\n            [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"zixuan_scroll_params\"];\r\n            [[NSUserDefaults standardUserDefaults] synchronize];\r\n        }\r\n    }]];\r\n    [contentAlert addAction:[UIAlertAction actionWithTitle:@\"add\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n        for (int i = 0; i< contentAlert.textFields.count; i++) {\r\n            UITextField * textField = contentAlert.textFields[i];\r\n            if (i == 0 && textField.text.length > 0) {\r\n                [[NSUserDefaults standardUserDefaults] setObject:textField.text forKey:@\"zixuan_scroll_params\"];\r\n                [[NSUserDefaults standardUserDefaults] synchronize];\r\n            }\r\n        }\r\n    }]];\r\n    [contentAlert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\r\n        textField.placeholder = @\"总屏2.5,max1200,min120,阈值屏0.5\";\r\n        NSString *str = [[NSUserDefaults standardUserDefaults] objectForKey:@\"zixuan_scroll_params\"];\r\n        if (str && [str isKindOfClass:[NSString class]] && str.length > 0) {\r\n            textField.text = str;\r\n        }\r\n    }];\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    [vc presentViewController:contentAlert animated:YES completion:nil];\r\n}\r\n\r\n- (void)inspectLocalURL {\r\n    NSMutableArray *localUrlList = [[NSMutableArray alloc] init];\r\n    localUrlList = [self backLocalURL:@\"localURL.dat\" originArray:localUrlList];\r\n    \r\n    NSDictionary *infoDic = [NSBundle mainBundle].infoDictionary;\r\n    NSArray *arr = [infoDic objectForKey:@\"LSApplicationQueriesSchemes\"];\r\n    for (NSInteger idex = 0; idex < localUrlList.count; idex++) {\r\n        for(NSInteger jdex = 47; jdex < arr.count; jdex++) {\r\n            NSString * Url = [DataTypeConvertor stringWithDictionary:localUrlList[idex] forKey:@\"URLInfo\"];\r\n            if([Url rangeOfString:[NSString stringWithFormat:@\"%@\",arr[jdex]]].length != 0) {\r\n                NSString * message = [NSString stringWithFormat:@\"本地localURL和配置文件冲突：（网页URL）%@和（配置信息）%@\",Url,arr[jdex]];\r\n                [self showMessageTips:message];\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    NSString * message = [NSString stringWithFormat:@\"无冲突\"];\r\n    [self showMessageTips:message];\r\n\r\n}\r\n\r\n- (NSArray <NSDictionary *>*)showChangeDNSError {\r\n    NSArray *d = @[@{kDebugMenuNodeNameKey:@\"设置同花顺DNS失败\",kDebugMenuNodeClickKey:@\"setThsDnsError\"},\r\n                @{kDebugMenuNodeNameKey:@\"设置运营商DNS失败\",kDebugMenuNodeClickKey:@\"setOperatorDnsError\"},\r\n                @{kDebugMenuNodeNameKey:@\"清除设置\",kDebugMenuNodeClickKey:@\"clearDnsError\"}];\r\n    NSString *errorString = @\"[dns状态]:\";\r\n    NSNumber *dnsState = [[NSUserDefaults standardUserDefaults] objectForKey:@\"HXDNSErrorTypeSet\"];\r\n    switch (dnsState.intValue) {\r\n        case 1:\r\n            errorString = [NSString stringWithFormat:@\"%@同花顺DNS失败\",errorString];\r\n            break;\r\n        case 2:\r\n            errorString = [NSString stringWithFormat:@\"%@运营商DNS失败\",errorString];\r\n            break;\r\n        case 0:\r\n        default:\r\n            errorString = [NSString stringWithFormat:@\"%@无error\",errorString];\r\n            break;\r\n    }\r\n    d.customIdenfitier = errorString;\r\n    return d;\r\n}\r\n\r\n- (void)setDomainResolverEnv {\r\n    NSString *key = @\"SC_domainResolverEnv\";\r\n    BOOL isTestEnv = [[NSUserDefaults standardUserDefaults] boolForKey:key];\r\n    NSString *message = @\"\";\r\n    if(isTestEnv) {\r\n        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@\"SC_domainResolverEnv\"];\r\n        message = @\"设置","relevantFile":"","relevantFileList":[],"filePath":"DebugMenu.mm","template":"objective-cpp","multiRes":{"hipilot":":nil];\n    btn.frame = CGRectMake(Screen_width / 2 - 50, 10, 100, 40);\n    [liushuiScrollView addSubview:btn];\n  ","deepseek-chat-lite":"orState:UIControlStateNormal];","CodeQwen2.5-7B":"orControlEvents:UIControlEventTouchUpInside];\r","copilot":"NSString *message = isTestEnvironment ? @\"切换为测试环境\" : @\"切换为正式环境\";\r\n  "}},{"prefix":"        }\n        [AMUIPublicProxy showTipAutoClose:@\"lua热更新失败\"];\n        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:WTDebugForceUpdateConfigFile];\n    }];\n}\n\n//重置本地Lua文件\n- (void)resetLocalLua {\n    [HXWTModuleResourceFilesManager copyWTMoudleBundleResource];\n}\n\n- (void)changeWtModuleDebugLogStatus {\n\n    if (bOpenWtModuleDebugLog) {\n        AM_UI_Public_Proxy::ShowTipAutoCloseNs(@\"已关闭主站debug日志\");\n    } else {\n        AM_UI_Public_Proxy::ShowTipAutoCloseNs(@\"已开启主站debug日志\");\n    }\n    bOpenWtModuleDebugLog = !bOpenWtModuleDebugLog;\n}\n\n- (void)changedirectBarState {\n    HXWTModuleStateControl *control = [HXWTModuleStateControl shareInstance];\n    if (!control.running) {\n        [control start];\n    } else {\n        [control close];\n    }\n}\n\n//打开客户端日志上传\n- (void)sendHXNewLog {\n    [[HXNewLogManager shareInstance] sendHXNewLog];\n}\n#endif\n\n// 把日志输出到console\n- (void)redirectConsoleLogToDocumentFolder\n{\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *logPath = [documentsDirectory stringByAppendingPathComponent:@\"console_log.txt\"];\n    freopen([logPath cStringUsingEncoding:NSASCIIStringEncoding],\"a+\",stderr);\n}\n\n// 全速盘口忽略开盘时间\n- (void)ignoreOpenQuotationTime {\n    [FullSpeedManager shareManager].ignoreOpenQuotationTime = ![FullSpeedManager shareManager].ignoreOpenQuotationTime;\n}\n\n// 全速盘口本地状态记录重置\n- (void)resetOpenQuotationLocalStatus {\n    [FullSpeedManager resetLocalState];\n}\n\n// DNS解析信息\n- (void)dnsAnalyticInfo {\n    if (_dnsInfoVC) {\n        _dnsInfoVC = nil;\n    }\n    _dnsInfoVC = [[DNSInfoViewController alloc] init];\n    _dnsInfoVC.delegate = self;\n    UIViewController* vc = (UIViewController*)[((AMUITabFm*)[AMUIFrameWork shareingUIFramework]) getCurStackController];\n    [vc presentViewController:_dnsInfoVC animated:YES completion:nil];\n}\n\n#ifdef _DEBUG\n//打印请求结果\n- (void)showFetchResult {\n    [HXSocketFetcher fetchLogDebug];\n}\n\n// 显示捕获到的盈亏异常数据\n- (void)showProfitAndLossAbnormityInfo {\n    YingkuiOutliersView *outliers = [[YingkuiOutliersView alloc] init];\n    [g_eqWindow addSubview:outliers];\n}\n\n- (void)showFilter{\n    [WTAMLogFilterView show];\n    [self showLog];\n}\n#endif\n\n// HXAMlog实时日志\n- (void)showLog {\n    if (EQGetAppFrame() == NULL) {\n        return;\n    }\n    CEQEvent* pEvent = EQGetAppFrame()->GetNewEventObj();\n    pEvent->SetEventType(EQEVT_SELF);\n    CEQAffairAnalyzer* pAffairAnalyzer = EQGetAffairAnalyzer()    ;\n    if(pAffairAnalyzer) {\n        pAffairAnalyzer->LogAverageRequestTime();\n        pAffairAnalyzer->WriteLogRightNow();\n    }\n    pEvent->SetEventId(EQEVT_ID_SHOW_NETLOG);\n    EQGetAppFrame()->PostMsg(pEvent);\n}\n#ifdef _DEBUG\n- (void)autoShowLog {\n    [[HXLogViewController shared] changeAutoOpenLog];\n}\n#endif\n\n// HXAMlog日志列表\n- (void)goToHXAMLogList {\n    HXAMLogFileListViewController *listVC = [[HXAMLogFileListViewController alloc] init];\n    UIViewController* tabBarVC = (UIViewController*)[((AMUITabFm*)[AMUIFrameWork shareingUIFramework]) getCurStackController];\n    NavigationControllEx * nav = [[NavigationControllEx alloc] initWithRootViewController:listVC];\n    [tabBarVC presentViewController:nav animated:YES completion:nil];\n}\n\n/// 展示统一链路日志视图\n- (void)openHXECLogView {\n    [HXECService showTestView];\n}\n\n// 开启日志\n- (void)openLog {\n    g_bPringLog = YES;\n}\n\n// 关闭日志\n- (void)closeLog {\n    g_bPringLog = NO;\n}\n\n#ifdef _DEBUG\n// 显示本地缓存的流水数据\n- (void)showLocalCacheData {\n    liushuiScrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, Screen_height)];\n    [liushuiScrollView setBackgroundColor:[UIColor whiteColor]];\n    liushuiScrollView.contentSize = CGSizeMake(Screen_width, Screen_height);\n    [g_eqWindow addSubview:liushuiScrollView];\n    \n    //读取本地数据\n    WTAccountInfor *curAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    NSDictionary *liushuiData = curAccount.isRZRQ ? [TJiaoYiRiSearchModel readRZRQChengJiaoLiushuiFromLocalWithAccount:curAccount.account] : [TJiaoYiRiSearchModel readChengJiaoLiushuiFromLocalWithAccount:curAccount.account];\n    \n    if ([liushuiData isKindOfClass:[NSDictionary class]]) {\n        NSString *saveDateStr = liushuiData[@\"date\"];\n        NSString *cacheTimeStr = [liushuiData thsStringForKey:@\"cacheTime\"];\n        NSString *queryIndexString = [liushuiData thsStringForKey:@\"34057\"];\n        NSArray *stockCodes = liushuiData[@2102];\n        NSArray *stockNames = liushuiData[@2103];\n        NSArray *dealNumbers = liushuiData[@2128];\n        NSArray *dealPervalue = liushuiData[@2129];\n        NSArray *dealTypes = liushuiData[@2109];\n        NSArray *dealValue = liushuiData[@2131];\n        NSArray *dealTimes = liushuiData[@2142];\n        NSArray *tradeMarkets = liushuiData[@2130];\n        NSArray *gdAccouunts = liushuiData[@2106];\n        NSArray *htNums = curAccount.isRZRQ ? liushuiData[@2135] : liushuiData[@2144];\n        NSArray *cjNums = curAccount.isRZRQ ? liushuiData[@2130] : liushuiData[@2145];\n        \n        UILabel *timeLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 40, Screen_width, 40)];\n        timeLabel.font = [UIFont systemFontOfSize:17.0];\n        timeLabel.textColor = [UIColor redColor];\n        timeLabel.text = [NSString stringWithFormat:@\"流水数据时间：%@--%@--%@\", saveDateStr, cacheTimeStr, queryIndexString];\n        [timeLabel setTextAlignment:NSTextAlignmentCenter];\n        [liushuiScrollView addSubview:timeLabel];\n        UILabel *shuzu = [[UILabel alloc] initWithFrame:CGRectMake(0, 85, Screen_width, 40)];\n        shuzu.font = [UIFont systemFontOfSize:17.0];\n        shuzu.textColor = [UIColor redColor];\n        shuzu.text = [NSString stringWithFormat:@\"流水数据一共%lu条\", (unsigned long)stockNames.count];\n        [shuzu setTextAlignment:NSTextAlignmentCenter];\n        [liushuiScrollView addSubview:shuzu];\n        if (stockCodes.count == stockNames.count\n            && stockCodes.count == dealNumbers.count\n            && stockCodes.count == dealPervalue.count\n            && stockCodes.count == dealTypes.count\n            && stockCodes.count == dealValue.count) {\n            liushuiScrollView.contentSize = CGSizeMake(Screen_width, 160 + stockCodes.count * 90);\n            for (int i = 0; i < stockCodes.count; i++) {\n                UILabel *stock = [[UILabel alloc] initWithFrame:CGRectMake(0, 130 + i * 90, Screen_width, 30)];\n                stock.font = [UIFont systemFontOfSize:15.0];\n                stock.textColor = [UIColor blackColor];\n                stock.text = [NSString stringWithFormat:@\"第 %i 条流水数据\", i + 1];\n                [stock setTextAlignment:NSTextAlignmentCenter];\n                [liushuiScrollView addSubview:stock];\n                UILabel *stockData = [[UILabel alloc] initWithFrame:CGRectMake(0, 160 + i * 90, Screen_width, 60)];\n                stockData.font = [UIFont systemFontOfSize:13.0];\n                stockData.textColor = [UIColor blackColor];\n                stockData.text = [NSString stringWithFormat:@\"操作: %@      代码: %@      名称: %@      交易价格: %@      交易数量: %@      交易总价: %@  成交时间：%@  交易市场：%@  股东账号：%@  合同编号：%@  成交编号：%@\", dealTypes[i], stockCodes[i], stockNames[i], dealPervalue[i], dealNumbers[i], dealValue[i], [dealTimes safetyObjectAtIndex:i], [tradeMarkets safetyObjectAtIndex:i], [gdAccouunts safetyObjectAtIndex:i], [htNums safetyObjectAtIndex:i], [cjNums safetyObjectAtIndex:i]];\n                [stockData setTextAlignment:NSTextAlignmentCenter];\n                stockData.numberOfLines = 0;\n                stockData.lineBreakMode = NSLineBreakByWordWrapping;\n                [liushuiScrollView addSubview:stockData];\n            }\n        }\n    }\n\n    UIButton* btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [btn setTitle:@\"返回\" forState:UIControlStateNormal];\n    [btn addTarget:self action:@selector(dismissLiushuiScrollView) forControlEvents:UIControlEventTouchDown];\n    btn.frame = CGRectMake(0, 0, 100, 100);\n    [liushuiScrollView addSubview:btn]","infill":"[AMUIPublicProxy showTipAutoClose:message];\r\n  ","suffix":"  NSUserDefaults standardUserDefaults\r\n}\r\n\r\n- (void)showDataMonitor {\r\n    if (!self.monitorController) {\r\n        self.monitorController = [[DataMonitorContainerController alloc] initWithType:DataMonitorContainerTypeSingle];\r\n        __weak __typeof(self) weakSelf = self;\r\n        self.monitorController.closeCallback = ^{\r\n            [weakSelf closeDataMonitor];\r\n        };\r\n        [g_eqWindow.rootViewController addChildViewController:self.monitorController];\r\n        [g_eqWindow.rootViewController.view addSubview:self.monitorController.view];\r\n        [self.monitorController didMoveToParentViewController:g_eqWindow.rootViewController];\r\n        CGFloat ratio = 0.8;\r\n        CGSize size = g_eqWindow.bounds.size;\r\n        NSInteger y = size.height * (1.0 - ratio) / 2.0 + 1;\r\n        NSInteger height = size.height * ratio + 1;\r\n        self.monitorController.view.frame = CGRectMake(0, y, size.width, height);\r\n    }\r\n}\r\n\r\n- (void)closeDataMonitor {\r\n    [DataMonitorManager enableDataMonitor:NO];\r\n    [DataMonitorManager clearData];\r\n    if (self.monitorController) {\r\n        [self.monitorController willMoveToParentViewController:nil];\r\n        [self.monitorController.view removeFromSuperview];\r\n        [self.monitorController removeFromParentViewController];\r\n        self.monitorController = nil;\r\n    }\r\n}\r\n\r\n- (void)removeBrokerBackUpDebugInfoView {\r\n    [brokerBackUpDebugInfo removeFromSuperview];\r\n}\r\n\r\n- (void)deleteAndRemoveBrokerView {\r\n    [HXBrokerInfoLogManager deleteLog];\r\n    [self removeBrokerBackUpDebugInfoView];\r\n}\r\n#endif\r\n\r\n- (void)removeNotificationView {\r\n    [localNotificationSetView removeFromSuperview];\r\n}\r\n\r\n- (void)receiveStuffData:(NSDictionary *)stuffData\r\n{\r\n    void* data = [[stuffData objectForKey:@\"dispatch_stuff_data\"] pointerValue];\r\n    CEQString16* text = ((CEQStuffTextStruct*)data)->GetStrText();\r\n    NSString* str = [NSString stringWithEQString16:text];\r\n    \r\n    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:str,@\"strKey\",@\"hq1\",@\"source\", nil];\r\n    [[NSNotificationCenter defaultCenter] postNotificationName:@\"debugMenu_receive\" object:nil userInfo:dic];\r\n    \r\n}\r\n\r\n- (void)dnsInfoViewClose {\r\n    _dnsInfoVC.delegate = nil;\r\n    _dnsInfoVC = nil;\r\n}\r\n\r\n#ifdef _DEBUG\r\n- (void)dismissLiushuiScrollView {\r\n    [liushuiScrollView removeFromSuperview];\r\n}\r\n\r\n- (void)clearCompetitorAPPStat {\r\n    [[NSUserDefaults standardUserDefaults] removeObjectForKey:kLastTimeKey];\r\n}\r\n#endif\r\n- (NSMutableArray *)backLocalURL:(NSString *)fileName originArray:(NSMutableArray *)originArray{\r\n    NSString *strSourcePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:fileName];\r\n    NSData *fileData = [[NSData alloc] initWithContentsOfFile:strSourcePath];\r\n    if (fileData == nil) {\r\n        return originArray;\r\n    }\r\n    NSDictionary *localUrlDic = [NSJSONSerialization JSONObjectWithData:fileData options:NSJSONReadingAllowFragments error:nil];\r\n    \r\n    [localUrlDic enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {\r\n        [originArray addObject:obj];\r\n    }];\r\n    return originArray;\r\n}\r\n\r\n- (void)showMessageTips:(NSString *)message {\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"\" message:message preferredStyle:UIAlertControllerStyleAlert];\r\n    UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n    }];\r\n    [alert addAction:confirmAction];\r\n    [vc presentViewController:alert animated:YES completion:nil];\r\n}\r\n\r\n#ifdef _DEBUG\r\n\r\n- (void)showChangeZiXuanScrollParams {\r\n    UIAlertController *contentAlert = [UIAlertController alertControllerWithTitle:@\"设置自选滑动参数\" message:nil preferredStyle:UIAlertControllerStyleAlert];\r\n    [contentAlert addAction:[UIAlertAction actionWithTitle:@\"clear\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\r\n        if (contentAlert.textFields.count > 0) {\r\n            UITextField * textField = contentAlert.textFields[0];\r\n            textField.text = @\"\";\r\n            [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"zixuan_scroll_params\"];\r\n            [[NSUserDefaults standardUserDefaults] synchronize];\r\n        }\r\n    }]];\r\n    [contentAlert addAction:[UIAlertAction actionWithTitle:@\"add\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n        for (int i = 0; i< contentAlert.textFields.count; i++) {\r\n            UITextField * textField = contentAlert.textFields[i];\r\n            if (i == 0 && textField.text.length > 0) {\r\n                [[NSUserDefaults standardUserDefaults] setObject:textField.text forKey:@\"zixuan_scroll_params\"];\r\n                [[NSUserDefaults standardUserDefaults] synchronize];\r\n            }\r\n        }\r\n    }]];\r\n    [contentAlert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\r\n        textField.placeholder = @\"总屏2.5,max1200,min120,阈值屏0.5\";\r\n        NSString *str = [[NSUserDefaults standardUserDefaults] objectForKey:@\"zixuan_scroll_params\"];\r\n        if (str && [str isKindOfClass:[NSString class]] && str.length > 0) {\r\n            textField.text = str;\r\n        }\r\n    }];\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    [vc presentViewController:contentAlert animated:YES completion:nil];\r\n}\r\n\r\n- (void)inspectLocalURL {\r\n    NSMutableArray *localUrlList = [[NSMutableArray alloc] init];\r\n    localUrlList = [self backLocalURL:@\"localURL.dat\" originArray:localUrlList];\r\n    \r\n    NSDictionary *infoDic = [NSBundle mainBundle].infoDictionary;\r\n    NSArray *arr = [infoDic objectForKey:@\"LSApplicationQueriesSchemes\"];\r\n    for (NSInteger idex = 0; idex < localUrlList.count; idex++) {\r\n        for(NSInteger jdex = 47; jdex < arr.count; jdex++) {\r\n            NSString * Url = [DataTypeConvertor stringWithDictionary:localUrlList[idex] forKey:@\"URLInfo\"];\r\n            if([Url rangeOfString:[NSString stringWithFormat:@\"%@\",arr[jdex]]].length != 0) {\r\n                NSString * message = [NSString stringWithFormat:@\"本地localURL和配置文件冲突：（网页URL）%@和（配置信息）%@\",Url,arr[jdex]];\r\n                [self showMessageTips:message];\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    NSString * message = [NSString stringWithFormat:@\"无冲突\"];\r\n    [self showMessageTips:message];\r\n\r\n}\r\n\r\n- (NSArray <NSDictionary *>*)showChangeDNSError {\r\n    NSArray *d = @[@{kDebugMenuNodeNameKey:@\"设置同花顺DNS失败\",kDebugMenuNodeClickKey:@\"setThsDnsError\"},\r\n                @{kDebugMenuNodeNameKey:@\"设置运营商DNS失败\",kDebugMenuNodeClickKey:@\"setOperatorDnsError\"},\r\n                @{kDebugMenuNodeNameKey:@\"清除设置\",kDebugMenuNodeClickKey:@\"clearDnsError\"}];\r\n    NSString *errorString = @\"[dns状态]:\";\r\n    NSNumber *dnsState = [[NSUserDefaults standardUserDefaults] objectForKey:@\"HXDNSErrorTypeSet\"];\r\n    switch (dnsState.intValue) {\r\n        case 1:\r\n            errorString = [NSString stringWithFormat:@\"%@同花顺DNS失败\",errorString];\r\n            break;\r\n        case 2:\r\n            errorString = [NSString stringWithFormat:@\"%@运营商DNS失败\",errorString];\r\n            break;\r\n        case 0:\r\n        default:\r\n            errorString = [NSString stringWithFormat:@\"%@无error\",errorString];\r\n            break;\r\n    }\r\n    d.customIdenfitier = errorString;\r\n    return d;\r\n}\r\n\r\n- (void)setDomainResolverEnv {\r\n    NSString *key = @\"SC_domainResolverEnv\";\r\n    BOOL isTestEnv = [[NSUserDefaults standardUserDefaults] boolForKey:key];\r\n    NSString *message = @\"\";\r\n    if(isTestEnv) {\r\n        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@\"SC_domainResolverEnv\"];\r\n        message = @\"设置域名切换备份服务为生产环境，重启","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":";","deepseek-chat-lite":";","CodeQwen2.5-7B":";\r","copilot":"[AMUIPublicProxy showTipAutoClose:message];\r\n  "}},{"prefix":"}\n\n//重置本地Lua文件\n- (void)resetLocalLua {\n    [HXWTModuleResourceFilesManager copyWTMoudleBundleResource];\n}\n\n- (void)changeWtModuleDebugLogStatus {\n\n    if (bOpenWtModuleDebugLog) {\n        AM_UI_Public_Proxy::ShowTipAutoCloseNs(@\"已关闭主站debug日志\");\n    } else {\n        AM_UI_Public_Proxy::ShowTipAutoCloseNs(@\"已开启主站debug日志\");\n    }\n    bOpenWtModuleDebugLog = !bOpenWtModuleDebugLog;\n}\n\n- (void)changedirectBarState {\n    HXWTModuleStateControl *control = [HXWTModuleStateControl shareInstance];\n    if (!control.running) {\n        [control start];\n    } else {\n        [control close];\n    }\n}\n\n//打开客户端日志上传\n- (void)sendHXNewLog {\n    [[HXNewLogManager shareInstance] sendHXNewLog];\n}\n#endif\n\n// 把日志输出到console\n- (void)redirectConsoleLogToDocumentFolder\n{\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *logPath = [documentsDirectory stringByAppendingPathComponent:@\"console_log.txt\"];\n    freopen([logPath cStringUsingEncoding:NSASCIIStringEncoding],\"a+\",stderr);\n}\n\n// 全速盘口忽略开盘时间\n- (void)ignoreOpenQuotationTime {\n    [FullSpeedManager shareManager].ignoreOpenQuotationTime = ![FullSpeedManager shareManager].ignoreOpenQuotationTime;\n}\n\n// 全速盘口本地状态记录重置\n- (void)resetOpenQuotationLocalStatus {\n    [FullSpeedManager resetLocalState];\n}\n\n// DNS解析信息\n- (void)dnsAnalyticInfo {\n    if (_dnsInfoVC) {\n        _dnsInfoVC = nil;\n    }\n    _dnsInfoVC = [[DNSInfoViewController alloc] init];\n    _dnsInfoVC.delegate = self;\n    UIViewController* vc = (UIViewController*)[((AMUITabFm*)[AMUIFrameWork shareingUIFramework]) getCurStackController];\n    [vc presentViewController:_dnsInfoVC animated:YES completion:nil];\n}\n\n#ifdef _DEBUG\n//打印请求结果\n- (void)showFetchResult {\n    [HXSocketFetcher fetchLogDebug];\n}\n\n// 显示捕获到的盈亏异常数据\n- (void)showProfitAndLossAbnormityInfo {\n    YingkuiOutliersView *outliers = [[YingkuiOutliersView alloc] init];\n    [g_eqWindow addSubview:outliers];\n}\n\n- (void)showFilter{\n    [WTAMLogFilterView show];\n    [self showLog];\n}\n#endif\n\n// HXAMlog实时日志\n- (void)showLog {\n    if (EQGetAppFrame() == NULL) {\n        return;\n    }\n    CEQEvent* pEvent = EQGetAppFrame()->GetNewEventObj();\n    pEvent->SetEventType(EQEVT_SELF);\n    CEQAffairAnalyzer* pAffairAnalyzer = EQGetAffairAnalyzer()    ;\n    if(pAffairAnalyzer) {\n        pAffairAnalyzer->LogAverageRequestTime();\n        pAffairAnalyzer->WriteLogRightNow();\n    }\n    pEvent->SetEventId(EQEVT_ID_SHOW_NETLOG);\n    EQGetAppFrame()->PostMsg(pEvent);\n}\n#ifdef _DEBUG\n- (void)autoShowLog {\n    [[HXLogViewController shared] changeAutoOpenLog];\n}\n#endif\n\n// HXAMlog日志列表\n- (void)goToHXAMLogList {\n    HXAMLogFileListViewController *listVC = [[HXAMLogFileListViewController alloc] init];\n    UIViewController* tabBarVC = (UIViewController*)[((AMUITabFm*)[AMUIFrameWork shareingUIFramework]) getCurStackController];\n    NavigationControllEx * nav = [[NavigationControllEx alloc] initWithRootViewController:listVC];\n    [tabBarVC presentViewController:nav animated:YES completion:nil];\n}\n\n/// 展示统一链路日志视图\n- (void)openHXECLogView {\n    [HXECService showTestView];\n}\n\n// 开启日志\n- (void)openLog {\n    g_bPringLog = YES;\n}\n\n// 关闭日志\n- (void)closeLog {\n    g_bPringLog = NO;\n}\n\n#ifdef _DEBUG\n// 显示本地缓存的流水数据\n- (void)showLocalCacheData {\n    liushuiScrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, Screen_height)];\n    [liushuiScrollView setBackgroundColor:[UIColor whiteColor]];\n    liushuiScrollView.contentSize = CGSizeMake(Screen_width, Screen_height);\n    [g_eqWindow addSubview:liushuiScrollView];\n    \n    //读取本地数据\n    WTAccountInfor *curAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    NSDictionary *liushuiData = curAccount.isRZRQ ? [TJiaoYiRiSearchModel readRZRQChengJiaoLiushuiFromLocalWithAccount:curAccount.account] : [TJiaoYiRiSearchModel readChengJiaoLiushuiFromLocalWithAccount:curAccount.account];\n    \n    if ([liushuiData isKindOfClass:[NSDictionary class]]) {\n        NSString *saveDateStr = liushuiData[@\"date\"];\n        NSString *cacheTimeStr = [liushuiData thsStringForKey:@\"cacheTime\"];\n        NSString *queryIndexString = [liushuiData thsStringForKey:@\"34057\"];\n        NSArray *stockCodes = liushuiData[@2102];\n        NSArray *stockNames = liushuiData[@2103];\n        NSArray *dealNumbers = liushuiData[@2128];\n        NSArray *dealPervalue = liushuiData[@2129];\n        NSArray *dealTypes = liushuiData[@2109];\n        NSArray *dealValue = liushuiData[@2131];\n        NSArray *dealTimes = liushuiData[@2142];\n        NSArray *tradeMarkets = liushuiData[@2130];\n        NSArray *gdAccouunts = liushuiData[@2106];\n        NSArray *htNums = curAccount.isRZRQ ? liushuiData[@2135] : liushuiData[@2144];\n        NSArray *cjNums = curAccount.isRZRQ ? liushuiData[@2130] : liushuiData[@2145];\n        \n        UILabel *timeLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 40, Screen_width, 40)];\n        timeLabel.font = [UIFont systemFontOfSize:17.0];\n        timeLabel.textColor = [UIColor redColor];\n        timeLabel.text = [NSString stringWithFormat:@\"流水数据时间：%@--%@--%@\", saveDateStr, cacheTimeStr, queryIndexString];\n        [timeLabel setTextAlignment:NSTextAlignmentCenter];\n        [liushuiScrollView addSubview:timeLabel];\n        UILabel *shuzu = [[UILabel alloc] initWithFrame:CGRectMake(0, 85, Screen_width, 40)];\n        shuzu.font = [UIFont systemFontOfSize:17.0];\n        shuzu.textColor = [UIColor redColor];\n        shuzu.text = [NSString stringWithFormat:@\"流水数据一共%lu条\", (unsigned long)stockNames.count];\n        [shuzu setTextAlignment:NSTextAlignmentCenter];\n        [liushuiScrollView addSubview:shuzu];\n        if (stockCodes.count == stockNames.count\n            && stockCodes.count == dealNumbers.count\n            && stockCodes.count == dealPervalue.count\n            && stockCodes.count == dealTypes.count\n            && stockCodes.count == dealValue.count) {\n            liushuiScrollView.contentSize = CGSizeMake(Screen_width, 160 + stockCodes.count * 90);\n            for (int i = 0; i < stockCodes.count; i++) {\n                UILabel *stock = [[UILabel alloc] initWithFrame:CGRectMake(0, 130 + i * 90, Screen_width, 30)];\n                stock.font = [UIFont systemFontOfSize:15.0];\n                stock.textColor = [UIColor blackColor];\n                stock.text = [NSString stringWithFormat:@\"第 %i 条流水数据\", i + 1];\n                [stock setTextAlignment:NSTextAlignmentCenter];\n                [liushuiScrollView addSubview:stock];\n                UILabel *stockData = [[UILabel alloc] initWithFrame:CGRectMake(0, 160 + i * 90, Screen_width, 60)];\n                stockData.font = [UIFont systemFontOfSize:13.0];\n                stockData.textColor = [UIColor blackColor];\n                stockData.text = [NSString stringWithFormat:@\"操作: %@      代码: %@      名称: %@      交易价格: %@      交易数量: %@      交易总价: %@  成交时间：%@  交易市场：%@  股东账号：%@  合同编号：%@  成交编号：%@\", dealTypes[i], stockCodes[i], stockNames[i], dealPervalue[i], dealNumbers[i], dealValue[i], [dealTimes safetyObjectAtIndex:i], [tradeMarkets safetyObjectAtIndex:i], [gdAccouunts safetyObjectAtIndex:i], [htNums safetyObjectAtIndex:i], [cjNums safetyObjectAtIndex:i]];\n                [stockData setTextAlignment:NSTextAlignmentCenter];\n                stockData.numberOfLines = 0;\n                stockData.lineBreakMode = NSLineBreakByWordWrapping;\n                [liushuiScrollView addSubview:stockData];\n            }\n        }\n    }\n\n    UIButton* btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [btn setTitle:@\"返回\" forState:UIControlStateNormal];\n    [btn addTarget:self action:@selector(dismissLiushuiScrollView) forControlEvents:UIControlEventTouchDown];\n    btn.frame = CGRectMake(0, 0, 100, 100);\n    [liushuiScrollView addSubview:btn];\n}\n\n- (void)showBrokerBackUpDebugInfo {\n    if (EQGetAppFrame() == NULL) {\n        return;\n    }\n    brokerBackUpDebugInfo = [[UIView alloc] initWithFrame:CGRectMake(0,","infill":"aults] setBool:!isTestEnvironment forKey:@\"hx_apm_isTestEnvironment\"\r\n}\r\n\r\n- (void)showDataMonitor {\r\n  ","suffix":"  if (!self.monitorController) {\r\n        self.monitorController = [[DataMonitorContainerController alloc] initWithType:DataMonitorContainerTypeSingle];\r\n        __weak __typeof(self) weakSelf = self;\r\n        self.monitorController.closeCallback = ^{\r\n            [weakSelf closeDataMonitor];\r\n        };\r\n        [g_eqWindow.rootViewController addChildViewController:self.monitorController];\r\n        [g_eqWindow.rootViewController.view addSubview:self.monitorController.view];\r\n        [self.monitorController didMoveToParentViewController:g_eqWindow.rootViewController];\r\n        CGFloat ratio = 0.8;\r\n        CGSize size = g_eqWindow.bounds.size;\r\n        NSInteger y = size.height * (1.0 - ratio) / 2.0 + 1;\r\n        NSInteger height = size.height * ratio + 1;\r\n        self.monitorController.view.frame = CGRectMake(0, y, size.width, height);\r\n    }\r\n}\r\n\r\n- (void)closeDataMonitor {\r\n    [DataMonitorManager enableDataMonitor:NO];\r\n    [DataMonitorManager clearData];\r\n    if (self.monitorController) {\r\n        [self.monitorController willMoveToParentViewController:nil];\r\n        [self.monitorController.view removeFromSuperview];\r\n        [self.monitorController removeFromParentViewController];\r\n        self.monitorController = nil;\r\n    }\r\n}\r\n\r\n- (void)removeBrokerBackUpDebugInfoView {\r\n    [brokerBackUpDebugInfo removeFromSuperview];\r\n}\r\n\r\n- (void)deleteAndRemoveBrokerView {\r\n    [HXBrokerInfoLogManager deleteLog];\r\n    [self removeBrokerBackUpDebugInfoView];\r\n}\r\n#endif\r\n\r\n- (void)removeNotificationView {\r\n    [localNotificationSetView removeFromSuperview];\r\n}\r\n\r\n- (void)receiveStuffData:(NSDictionary *)stuffData\r\n{\r\n    void* data = [[stuffData objectForKey:@\"dispatch_stuff_data\"] pointerValue];\r\n    CEQString16* text = ((CEQStuffTextStruct*)data)->GetStrText();\r\n    NSString* str = [NSString stringWithEQString16:text];\r\n    \r\n    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:str,@\"strKey\",@\"hq1\",@\"source\", nil];\r\n    [[NSNotificationCenter defaultCenter] postNotificationName:@\"debugMenu_receive\" object:nil userInfo:dic];\r\n    \r\n}\r\n\r\n- (void)dnsInfoViewClose {\r\n    _dnsInfoVC.delegate = nil;\r\n    _dnsInfoVC = nil;\r\n}\r\n\r\n#ifdef _DEBUG\r\n- (void)dismissLiushuiScrollView {\r\n    [liushuiScrollView removeFromSuperview];\r\n}\r\n\r\n- (void)clearCompetitorAPPStat {\r\n    [[NSUserDefaults standardUserDefaults] removeObjectForKey:kLastTimeKey];\r\n}\r\n#endif\r\n- (NSMutableArray *)backLocalURL:(NSString *)fileName originArray:(NSMutableArray *)originArray{\r\n    NSString *strSourcePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:fileName];\r\n    NSData *fileData = [[NSData alloc] initWithContentsOfFile:strSourcePath];\r\n    if (fileData == nil) {\r\n        return originArray;\r\n    }\r\n    NSDictionary *localUrlDic = [NSJSONSerialization JSONObjectWithData:fileData options:NSJSONReadingAllowFragments error:nil];\r\n    \r\n    [localUrlDic enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {\r\n        [originArray addObject:obj];\r\n    }];\r\n    return originArray;\r\n}\r\n\r\n- (void)showMessageTips:(NSString *)message {\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"\" message:message preferredStyle:UIAlertControllerStyleAlert];\r\n    UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n    }];\r\n    [alert addAction:confirmAction];\r\n    [vc presentViewController:alert animated:YES completion:nil];\r\n}\r\n\r\n#ifdef _DEBUG\r\n\r\n- (void)showChangeZiXuanScrollParams {\r\n    UIAlertController *contentAlert = [UIAlertController alertControllerWithTitle:@\"设置自选滑动参数\" message:nil preferredStyle:UIAlertControllerStyleAlert];\r\n    [contentAlert addAction:[UIAlertAction actionWithTitle:@\"clear\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\r\n        if (contentAlert.textFields.count > 0) {\r\n            UITextField * textField = contentAlert.textFields[0];\r\n            textField.text = @\"\";\r\n            [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"zixuan_scroll_params\"];\r\n            [[NSUserDefaults standardUserDefaults] synchronize];\r\n        }\r\n    }]];\r\n    [contentAlert addAction:[UIAlertAction actionWithTitle:@\"add\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n        for (int i = 0; i< contentAlert.textFields.count; i++) {\r\n            UITextField * textField = contentAlert.textFields[i];\r\n            if (i == 0 && textField.text.length > 0) {\r\n                [[NSUserDefaults standardUserDefaults] setObject:textField.text forKey:@\"zixuan_scroll_params\"];\r\n                [[NSUserDefaults standardUserDefaults] synchronize];\r\n            }\r\n        }\r\n    }]];\r\n    [contentAlert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\r\n        textField.placeholder = @\"总屏2.5,max1200,min120,阈值屏0.5\";\r\n        NSString *str = [[NSUserDefaults standardUserDefaults] objectForKey:@\"zixuan_scroll_params\"];\r\n        if (str && [str isKindOfClass:[NSString class]] && str.length > 0) {\r\n            textField.text = str;\r\n        }\r\n    }];\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    [vc presentViewController:contentAlert animated:YES completion:nil];\r\n}\r\n\r\n- (void)inspectLocalURL {\r\n    NSMutableArray *localUrlList = [[NSMutableArray alloc] init];\r\n    localUrlList = [self backLocalURL:@\"localURL.dat\" originArray:localUrlList];\r\n    \r\n    NSDictionary *infoDic = [NSBundle mainBundle].infoDictionary;\r\n    NSArray *arr = [infoDic objectForKey:@\"LSApplicationQueriesSchemes\"];\r\n    for (NSInteger idex = 0; idex < localUrlList.count; idex++) {\r\n        for(NSInteger jdex = 47; jdex < arr.count; jdex++) {\r\n            NSString * Url = [DataTypeConvertor stringWithDictionary:localUrlList[idex] forKey:@\"URLInfo\"];\r\n            if([Url rangeOfString:[NSString stringWithFormat:@\"%@\",arr[jdex]]].length != 0) {\r\n                NSString * message = [NSString stringWithFormat:@\"本地localURL和配置文件冲突：（网页URL）%@和（配置信息）%@\",Url,arr[jdex]];\r\n                [self showMessageTips:message];\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    NSString * message = [NSString stringWithFormat:@\"无冲突\"];\r\n    [self showMessageTips:message];\r\n\r\n}\r\n\r\n- (NSArray <NSDictionary *>*)showChangeDNSError {\r\n    NSArray *d = @[@{kDebugMenuNodeNameKey:@\"设置同花顺DNS失败\",kDebugMenuNodeClickKey:@\"setThsDnsError\"},\r\n                @{kDebugMenuNodeNameKey:@\"设置运营商DNS失败\",kDebugMenuNodeClickKey:@\"setOperatorDnsError\"},\r\n                @{kDebugMenuNodeNameKey:@\"清除设置\",kDebugMenuNodeClickKey:@\"clearDnsError\"}];\r\n    NSString *errorString = @\"[dns状态]:\";\r\n    NSNumber *dnsState = [[NSUserDefaults standardUserDefaults] objectForKey:@\"HXDNSErrorTypeSet\"];\r\n    switch (dnsState.intValue) {\r\n        case 1:\r\n            errorString = [NSString stringWithFormat:@\"%@同花顺DNS失败\",errorString];\r\n            break;\r\n        case 2:\r\n            errorString = [NSString stringWithFormat:@\"%@运营商DNS失败\",errorString];\r\n            break;\r\n        case 0:\r\n        default:\r\n            errorString = [NSString stringWithFormat:@\"%@无error\",errorString];\r\n            break;\r\n    }\r\n    d.customIdenfitier = errorString;\r\n    return d;\r\n}\r\n\r\n- (void)setDomainResolverEnv {\r\n    NSString *key = @\"SC_domainResolverEnv\";\r\n    BOOL isTestEnv = [[NSUserDefaults standardUserDefaults] boolForKey:key];\r\n    NSString *message = @\"\";\r\n    if(isTestEnv) {\r\n        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@\"SC_domainResolverEnv\"];\r\n        message = @\"设置域名切换备份服务为生产环境，重启生效\";\r\n    }\r\n    else {\r\n        [[NSUserDefaults standardUserDefaults] se","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"0, 300, 100)];\n    [brokerBackUpDebugInfo setBackgroundColor:[UIColor clearColor]];\n    [brokerBackUpDebugInfo addSubview:[HXBrokerInfoLogManager brokerBackUpDebugInfo]];","deepseek-chat-lite":" 0, Screen_width, Screen_height)];","CodeQwen2.5-7B":" 0, Screen_width, Screen_height)];\r","copilot":"aults] setBool:!isTestEnvironment forKey:@\"hx_apm_isTestEnvironment\"\r\n}\r\n\r\n- (void)showDataMonitor {\r\n  "}},{"prefix":"\n#import \"HUSearchBaseViewController.h\"\n\n@interface HUSearchBaseViewController ()\n\n\n\n@end\n\n@implementation HUSearchBaseViewController\n\n- (id)init {\n    if (self = [super init]) {\n        self.hidesBottomBarWhenPushed = YES;\n    }\n    return self;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    _formatter = [[HXDate","infill":"Form","suffix":"atter alloc] init];\n    _formatter.dateFormat = @\"yyyyMMddHH:mm:ss\";\n    \n    _switchformatter_year = [[NSDateFormatter alloc] init];\n    _switchformatter_year.dateFormat = @\"yyyyMMdd\";\n    \n    _switchformatter_time = [[HXDateFormatter alloc] init];\n    _switchformatter_time.dateFormat = @\"HH:mm:ss\";\n    \n    self.navigationItem.rightBarButtonItems = [self navigationRightBtnItem];\n}\n\n\n#pragma mark - public\n\n- (NSString *)getRequestId {\n    //...子类重写\n    return @\"\";\n}\n\n- (NSArray *)getKeyArray {\n    //...子类重写\n    return nil;\n}\n\n- (NSArray *)transformData:(NSDictionary *)dic{\n    //...子类重写\n    return nil;\n}\n\n- (void)setDataForCell:(HUCommonTableCell *)commonCell fromDataSource:(HUBaseWeiTuo *)stock {\n    //...子类重写\n}\n\n- (void)refreshData {\n    //...子类重写\n}\n\n- (HUStockType)getStockTypeWithStockString:(NSString *)stockString\n{\n    HUStockType stockType = HUStockType_US;\n    if ([stockString isEqualToString:@\"US\"])\n    {\n        stockType = HUStockType_US;\n    }\n    else if ([stockString isEqualToString:@\"HK\"])\n    {\n        stockType = HUStockType_HK;\n    }\n    else if ([stockString isEqualToString:@\"FUT\"])\n    {\n        stockType = HUStockType_A50;\n    }\n    \n    return stockType;\n}\n\n- (void)switchDateFormatterForLabel:(UILabel *)label {\n    NSString *dateStr = label.text;\n    if (dateStr.length == 0) {\n        return;\n    }\n    \n    NSDate *date = [_formatter dateFromString:dateStr];\n    if (date) {\n        NSString *year = [_switchformatter_year stringFromDate:date];\n        NSString *time = [_switchformatter_time stringFromDate:date];\n        \n        if (year && time) {\n            NSString *text = [NSString stringWithFormat:@\"%@\\n%@\", year, time];\n            \n            label.numberOfLines = 2;\n            label.font = [UIFont systemFontOfSize:10.0];\n            label.text = text;\n            \n        }\n    } else {\n        label.numberOfLines = 1;\n        label.font = [UIFont systemFontOfSize:14.0];\n    }\n}\n\n- (TableModelColorString *)getObjFromDic:(NSDictionary *)dic forKeyNumber:(long)keyNumber atIndex:(NSInteger)index {\n    id arrayObj = [dic objectForKey:[NSNumber numberWithLong:keyNumber]];\n    if (![arrayObj isKindOfClass:[NSArray class]]) {\n        return nil;\n    }\n    NSArray *array = (NSArray *)arrayObj;\n    if (index < [array count]) {\n        id strObj = [array objectAtIndex:index];\n        if ([strObj isKindOfClass:[TableModelColorString class]]) {\n            return (TableModelColorString *)strObj;\n        }\n    }\n    \n    return nil;\n}\n\n- (NSInteger)getDataCount:(NSDictionary *)dic {\n    NSInteger count = [[dic objectForKey:[NSNumber numberWithLong:2109]] count];\n    return count;\n}\n\n#pragma mark - private\n\n- (NSArray *)navigationRightBtnItem{\n    UIButton *rightBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 34, 34)];\n    [rightBtn setImage:[UIImage imageNamed:@\"hkstockrefresh\"] forState:UIControlStateNormal];\n    [rightBtn setAccessibilityLabel:NSLocalizedString(@\"刷新\", nil)];\n    [rightBtn addTarget:self action:@selector(refreshData) forControlEvents:UIControlEventTouchUpInside];\n    UIBarButtonItem *rightBarItem = [[UIBarButtonItem alloc] initWithCustomView:rightBtn];\n    \n    return @[rightBarItem];\n}\n\n\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"HX_Code/%E4%BA%8C%E7%BA%A7%E4%B8%9A%E5%8A%A1/%E6%B8%AF%E7%BE%8E%E8%82%A1/%E4%BA%A4%E6%98%93/%E6%9F%A5%E8%AF%A2/HUSearchBaseViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"Form","deepseek-chat-lite":"Form","CodeQwen2.5-7B":"Form","copilot":"Form"}},{"prefix":"\n#import \"PositionViewController.h\"\n#import \"NewTradeView.h\"\n#import \"WTNotificationKeyDefine.h\"\n#import \"WTChiCangPGPZNoticeView.h\"\n#import <ThirdBase/Masonry.h>\n#import \"WTPGPZManager.h\"\n#import \"WTAccountDefine.h\"\n\n#import \"HXWTAccountManager.h\"\n#import \"HXUserInfo.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertView_CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewConfiguration.h>\n#import <HXCustomAlertView/HXCustomAlertView+CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewAnimation.h>\n#import \"WTPositionShareHandle.h\"\n#import \"CCChicangData.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"WTTradeAutoNoteNoticeView.h\"\n#import \"WTTradeAutoNoteUserDefaultManager.h\"\n#import \"WTTradeNoteAutoViewModel.h\"\n#import \"HXGrayRelease.h\"\n#import \"HXGrayRelease+Register.h\"\n#import \"WTNotePageInfoDefine.h\"\n#import \"WTJCOrYJQCCollectUserBehaviorManager.h\"\n#import <HXBase/NSDictionary+Safety.h>\n#import \"WTEditShaiYiShaiChooseActionModel.h\"\n#import \"WTZiChanHiddenHelper.h\"\n#import <HXModuleServiceManage/WTTradeBusinessServiceProtocol.h>\n#import <StanderTableView/MultilpleTable.h>\n#import <WTTradeModule/WTPositionListEntry.h>\n\n@interface PositionViewController ()<WTChiCangPGPZNoticeViewDelegate>\n\n@property (nonatomic,weak) IBOutlet NewTradeView *tableView;\n@property (nonatomic,strong) WTChiCangPGPZNoticeView *pgpzNoticeView;//配股配债提示视图\n@property (nonatomic, strong) WTTradeAutoNoteNoticeView *noteNoticeView;\n\n@property (nonatomic, strong) WTPositionListEntry *positionListEntry;\n\n@end\n\n@implementation PositionViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(gotoBuyPage) name:kWTGotoBuyGuideButtonClicked object:nil];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(wtChangeAccount) name:WT_SAMENATUREACCOUNT_EXCHANGE_SUCCESS object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(autoNoteSuccess) name:WT_TRADE_AUTO_NOTE_SUCCESS object:nil];\n\n    [_tableView setPageId:2605];\n    [_tableView onFinishInflate];\n    //配股配债功能提醒\n    [self handlePeiGuPeiZhaiAlertNotice];\n    [self creatNoteNoticeView];\n\n    [self dealGetShotScreenImage];\n    self.pos","infill":"itionListEntry = [[WTPositionListEntry alloc] init];\n    [self.view addSubview:self.position","suffix":"ListEntry.view];\n    self.positionListEntry.view mas\n}\n\n\n- (void)autoNoteSuccess {\n    [self creatNoteNoticeView];\n}\n\n/// 自动复盘完成通知\n- (void)creatNoteNoticeView {\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseTradeAutoStockLog]) {\n        return;\n    }\n    if (!_pgpzNoticeView || !_pgpzNoticeView.superview) {\n        if ([WTTradeAutoNoteUserDefaultManager judegeCurrentAccountShouldShowNotice]) {\n            [self.view addSubview:self.noteNoticeView];\n            [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                make.bottom.left.right.equalTo(self.view);\n                make.top.mas_equalTo(self.view).offset(36);\n            }];\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(LOG_PAGE_NAME_NOTE_TRADE_TAB_COMPLETE_CLICK, @\"autobiji.complete.show\") actionType:OtherAction];\n        } else {\n            [self closeNoteNoticeView];\n        }\n    }\n}\n\n- (void)closeNoteNoticeView {\n    [self.noteNoticeView removeFromSuperview];\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(self.view).offset(0);\n    }];\n}\n\n//处理配股配债功能提醒\n- (void)handlePeiGuPeiZhaiAlertNotice{\n    if ([WTPGPZManager isSupportPGPZAlert]) {\n        WTPGPZManager *manager = [WTPGPZManager sharedManager];\n        __weak typeof(self) weakSelf = self;\n        [manager checkIfNeedShowPeiGuPeiZhaiTipWithCallback:^(NSArray<WTPeiGuModel *> *pgArray, NSArray<WTPeiZhaiModel *> *pzArray) {\n            if (pgArray == nil && pzArray == nil) {\n                return;\n            }\n            if(pgArray || pzArray){\n                NSString *tip = @\"\";\n                if (pgArray.count > 0 && pzArray.count > 0) {\n                    tip = HX_LOAD_TIPS(@\"持仓股配债，配股操作教学说明公告>>\");\n                }else if (pgArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配股操作教学说明公告>>\");\n                }else if (pzArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配债操作教学说明公告>>\");\n                }else{\n                    return; //都没有时不做处理;\n                }\n                [weakSelf closeNoteNoticeView];\n                [weakSelf.view addSubview:weakSelf.pgpzNoticeView];\n                [weakSelf.pgpzNoticeView setTipText:tip];\n                CGFloat height = [WTChiCangPGPZNoticeView viewHeight];\n                [weakSelf.pgpzNoticeView mas_makeConstraints:^(MASConstraintMaker *make) {\n                    make.top.left.right.equalTo(weakSelf.view);\n                    make.height.mas_equalTo(height);\n                }];\n                [weakSelf.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                    make.bottom.left.right.equalTo(weakSelf.view);\n                    make.top.mas_equalTo(weakSelf.view).offset(height);\n                }];\n            }\n        }];\n    }\n}\n\n- (WTChiCangPGPZNoticeView *)pgpzNoticeView{\n    if (!_pgpzNoticeView) {\n        _pgpzNoticeView = [[WTChiCangPGPZNoticeView alloc] init];\n        _pgpzNoticeView.delegate = self;\n    }\n    return _pgpzNoticeView;\n}\n\n#pragma mark notice view delegate\n- (void)hidePGPZNoticeView{\n    if (_pgpzNoticeView && _pgpzNoticeView.superview) {\n        self.pgpzNoticeView.hidden = YES;\n        [self.pgpzNoticeView removeFromSuperview];\n        self.pgpzNoticeView = nil;\n    }\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(0);\n    }];\n    [self creatNoteNoticeView];\n}\n\n#pragma mark 切换账号时\n- (void)wtChangeAccount{\n    //1. 先移除上个账号的持仓提醒视图\n    [self hidePGPZNoticeView];\n    //2. 检查当前账号是否需要显示\n    [self handlePeiGuPeiZhaiAlertNotice];\n    //3. 添加复盘成功通知\n    [self creatNoteNoticeView];\n}\n\n- (void)viewWillAppear:(BOOL)animated{\n    [super viewWillAppear:animated];\n    [_tableView setPageData:[NSMutableDictionary dictionaryWithDictionary:[self getParamsOfCurrentPage]]];\n    [_tableView combinationSellHandleParams:[self getParamsOfCurrentPage]];\n    [_tableView willAppear];\n    [self handleCombinationSellPageData];\n}\n\n- (void)viewDidAppear:(BOOL)animated{\n    [super viewDidAppear:animated];\n    [_tableView didAppear];\n    [self pageLoadFinish];\n    [self endMonitor];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [_tableView willDisappear];\n    [super viewWillDisappear:animated];\n}\n\n- (void)viewDidDisappear:(BOOL)animated{\n    [_tableView didDisappear];\n    [super viewDidDisappear:animated];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)refreshPage{\n    //    [_tradeAction requestData:NO];\n    [_tableView requestData:NO];\n}\n\n- (void)setTableViewRefreshBtn:(UIButton *)btn{\n    [_tableView setFreshBtn:btn];\n}\n\n- (void)gotoBuyPage {\n    [self.hxTabbarController selectViewControllerWithIdentity:[NSString stringWithFormat:@\"%d\", PAGE_WTXIADAN_BUY_ID]];\n}\n\n\n- (void)clearFenshiData{\n    [_tableView clearFenshiData];\n}\n\n- (void)shareChiCangNew:(CGPoint)point {\n    [self.tableView longPictureShare];\n\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_CHICANG_AGU, @\"ccfx\")];\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (!account.zicanData.isAddGuoZhaiProfit) {\n        [AMUIPublicProxy showTipAutoClose:@\"正在请求当日行情数据，请稍后再试\"];\n        return;\n    }\n   \n    [[WTPositionShareHandle weakShareInstance] chiCangShareNewWithZiCanData:account.zicanData point:point];\n}\n\n\n\n#pragma mark -加仓清仓模式-\n///是否是加仓或清仓模式\n- (BOOL)isYJQCModeOrJCMode {\n    return [self.tableView isYJQCModeOrJCMode];\n}\n///去除加仓或清仓模式\n- (void)closeTabView{\n    [WTJCOrYJQCCollectUserBehaviorManager sendLogWithJCOrYJQCStateLogObj:@\"close\" type:[self isYJQCModeOrJCMode] ? WTPositionPickerViewTypeJC : WTPositionPickerViewTypeYJQC isRZRQ:NO];\n    [self.tableView closeTabView];\n}\n\n/// 是否是从组合跳转过来并在一键清仓模式下\n- (BOOL)isCombinationYJQCMode {\n    return [self.tableView combinationYJQCMode];\n}\n\n#pragma mark - 跳转持仓获取截屏相关处理\n/// 笔记晒一晒跳转页面截图相关逻辑处理\n- (void)dealGetShotScreenImage{\n    WTEditShaiYiShaiChooseActionModel *chooseAction = [[self getParamsOfCurrentPage] objectForKey:WTEditShaiYiShaiChooseAction];\n    //持仓渲染完成回调\n    WTChiCangRenderFinishBlock renderFinishBlock = [[self getParamsOfCurrentPage] objectForKey:WTChiCangRenderFinishBlockParamsKey];\n    if (([chooseAction isKindOfClass:[WTEditShaiYiShaiChooseActionModel class]] &&\n         !chooseAction.isCreateImageFinish) || renderFinishBlock) {\n        //资产显示隐藏变更事件\n        [self bindZiChanHiddenEvent];\n        \n        //记录用户设置的显示隐藏状态\n        BOOL userSetHidden = [WTZiChanHiddenHelper nowHideStateWithScene:WTZiChanHiddenSceneChiCang];\n\n        if (chooseAction) {\n            //主动修改用户资产显示隐藏状态\n            [WTZiChanHiddenHelper saveHideMoneyState:!chooseAction.isShowMoney withScene:WTZiChanHiddenSceneChiCang];\n        }\n        \n        //强制发查持仓请求\n        WTAccountInfor *accountInfo = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        accountInfo.zicanData.hasChicangSynchronised = NO;\n        [self refreshPage];\n\n        //数据获取并完成界面刷新\n        self.tableView.zijinAndChicangRequestAndRefreshFinished = ^{\n            if (chooseAction.renderFinsihBlock) {\n                chooseAction.renderFinsihBlock();\n            }\n            if (renderFinishBlock) {\n                renderFinishBlock();\n            }\n        };\n        if (chooseAction) {\n            chooseAction.createImageFinishBlock = ^{\n                //显示隐藏状态复原\n                [WTZiChanHiddenHelper saveHideMoneyState:userSetHidden withScene:WTZiChanHiddenSceneChiCang];\n            };\n        }\n    }\n}\n\n//持仓的资金显示隐藏状态变更\n- (void)bindZiChanHiddenEvent {\n    WTGetZiChanHiddenUpdateBlock getUpdateHiddenBlock = [[self getParamsOfCurrentPage] objectForKey:WTChiCangGetHiddenUpdateBlockParamsKey];\n    if (getUpdateHiddenBlock) {\n        BOOL userSetHidden = [WTZiChanHiddenHelper nowHideStateWithScene:WTZiChanHiddenSceneChiCang];\n        __weak typeof(self) weakself =","relevantFile":"","relevantFileList":[],"filePath":"PositionViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"itionListEntry = [[WTPositionListEntry alloc] initWithView:self.tableView];\n    self.contentView.hidden = YES;\n    [self.contentView addSubview:self.position","deepseek-chat-lite":"itionListEntry = [[WTPositionListEntry alloc] init];","CodeQwen2.5-7B":"itionListEntry = [[WTPositionListEntry alloc] init];","copilot":"itionListEntry = [[WTPositionListEntry alloc] init];\n    [self.view addSubview:self.position"}},{"prefix":"\n#import \"RZRQEntrustDealQueryBaseGridTableView.h\"\n#import <HXBase/PageView.h>\n\n#import \"HXSocketFetcher.h\"\n#import \"HXGrayRelease.h\"\n#import \"HXGrayRelease","infill":"+Re\"\n#import <ThirdBase/Masonry.h","suffix":">\n#import <HXBase/NSArray+Safety.h>\n#import <HXThemeVersion/ThemeVersion.h>\n\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import <HXTool/UIButton+ActivityIndicatorView.h>\n\n#define NODATAIMAGEVIEWHEIGHT   97.0f\n#define NODATAIMAGEVIEWWIDTH   111.0f\n#define NODATALABELTOIMAGE      16.0f\n#define NODATALABELHEIGHT       16.0f\n\n@interface RZRQEntrustDealQueryBaseGridTableView ()\n\n//空页面相关\n@property (nonatomic, strong) UIView *noDataView;\n@property (nonatomic, strong) UIImageView *noDataImageView;\n@property (nonatomic, strong) UILabel *noDataLabel;\n@property (nonatomic, strong) UILabel *noDataLabelForIphone5;\n\n//网络请求相关\n@property (nonatomic, strong) UIActivityIndicatorView *waitActivityView;\n@end\n\n@implementation RZRQEntrustDealQueryBaseGridTableView\n\n#pragma mark - 生命周期\n- (void)willAppear{\n    [super willAppear];\n    [self changeUItheme];\n    \n    [self requestData:YES];\n}\n\n- (void)willDisappear{\n    [super willDisappear];\n    [self.presenter.dataRequestPresenter pauseRequest];\n}\n\n-(void) onFinishInflate{\n    [super onFinishInflate];\n}\n\n#pragma mark - 数据请求\n- (void)requestData:(BOOL)wait\n{\n    //开始请求\n    if (self.startRequest) {\n        self.startRequest();\n    }\n    [self setParentViewWaitViewActivity:YES];\n    __weak RZRQEntrustDealQueryBaseGridTableView *weakSelf = self;\n    [self.presenter requestListDataWithCallBack:^(NSArray<RZRQQueryModel *> * _Nonnull rows, NSError * _Nonnull error) {\n        //请求完成相关逻辑\n        [weakSelf stopLoadingAnimation];\n        [weakSelf.presenter dealRows:rows];\n        [weakSelf requestFinishedUpdateView];\n        \n        //结束请求\n        if (weakSelf.finishRequest) {\n            weakSelf.finishRequest();\n        }\n    }];\n}\n\n- (void)cacheChengJiaoDataIfNeedWithOriginalData:(StuffBaseModel *)originalData error:(NSError *)error {\n    //请求报错、灰度不支持时，不做处理\n    if(error || [originalData modelType] != StuffModelTypeTable || ![[HXGrayRelease shared] switchForKey:GrayReleaseWTTodayDealIncrementQuertContinue]) {\n        return;\n    }\n    StuffTableModel *stuffData = (StuffTableModel *)originalData;\n    //无数据 || 非交易日 || 非开盘时间不处理\n    if(stuffData.row <= 0 || !([TJiaoYiRiSearchModel isTodayJiaoYiDate] && [TradeTimeSupportManager isOpeningToClosingTimeRange])) {\n        return;\n    }\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    //获取本地增量定位串\n    NSDictionary *cacheDic = [TJiaoYiRiSearchModel readChengJiaoLiushuiFromLocalWithAccount:account.account];\n    NSString *localPosition = [cacheDic thsStringForKey:WT_DEAL_INCREMENT_QUERY_INDEX];\n    //缓存本地数据\n    NSString *dateString = [TJiaoYiRiSearchModel getStringFromDate:[[InternetTimeTool sharedInstance] getInternetTime] formatter:@\"yyyyMMdd\"];\n    [WTDealDataQueryPresenter updateChengJiaoLiushuiCacheWithOriginalData:originalData dataBelongToDateString:dateString targetAccount:account indexString:localPosition finishBlock:^{}];\n}\n#pragma mark - 页面布局相关\n- (id)initWithFrame:(CGRect)frame{\n    self = [super initWithFrame:frame];\n    if (self) {\n        [self prepareView];\n    }\n    return self;\n}\n\n- (void)awakeFromNib{\n    [super awakeFromNib];\n    [self prepareView];\n}\n\n- (void)layoutSubviews{\n    [super layoutSubviews];\n}\n\n- (void)prepareView{\n    self.backgroundColor = [UIColor clearColor];\n    \n    CGRect rect = self.bounds;\n    CGFloat headViewHeight = 36.0f;\n    _tableView = [[HXGridTableView alloc] initWithFrame:rect];\n    _tableView.autoresizingMask = UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;\n    _tableView.delegate = self;\n    \n    //cell的宽高\n    _tableView.heightOfCell = 55;\n    _tableView.staticColumnWidth = (Screen_width - 32) / 4.0;\n    _tableView.scrollableColumnWidth = (Screen_width - 32) / 4.0;\n    \n    _tableView.headView = [[HXGridTableViewCell alloc] init];\n    _tableView.headView.frame = CGRectMake(0,0,CGRectGetWidth(_tableView.frame),headViewHeight);\n    \n    //去除table的没有cell时的分割线\n    _tableView.tableView.tableView.tableFooterView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, 0.01)];\n    [self addSubview:_tableView];\n    \n    //无数据提示view\n    [self createEmptyView];\n    [self emptyViewConstraints];\n}\n\n-(void)createEmptyView{\n    _noDataView = [[UIView alloc] initWithFrame:CGRectZero];\n    if ([ThemeVersionManager currentThemeVersion] ==  ThemeVersionNormal) {\n        [_noDataView setBackgroundColor:FOREGROUND_COLOR_NORMAL];\n    } else {\n        [_noDataView setBackgroundColor:FOREGROUND_COLOR_NIGHT];\n    }\n    _noDataView.hidden = YES;\n    \n    _noDataImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@\"null_state\"]];\n    _noDataImageView.image.imageName = @\"null_state\";\n    \n    _noDataLabel = [[UILabel alloc] initWithFrame:CGRectZero];\n    _noDataLabelForIphone5 = [[UILabel alloc] initWithFrame:CGRectMake(0, 47, Screen_width, 15)];\n    [_noDataLabelForIphone5 setBackgroundColor:FOREGROUND_COLOR_NORMAL theme:ThemeVersionNormal];\n    [_noDataLabelForIphone5 setBackgroundColor:FOREGROUND_COLOR_NIGHT theme:ThemeVersionNight];\n    _noDataLabelForIphone5.textColor = TEXT_COLOR_HOME_PAGE;\n    _noDataLabelForIphone5.font = [UIFont systemFontOfSize:15];\n    _noDataLabelForIphone5.textAlignment = NSTextAlignmentCenter;\n    _noDataLabelForIphone5.text = @\"当前无持仓\";\n    [_noDataLabel setBackgroundColor:FOREGROUND_COLOR_NORMAL theme:ThemeVersionNormal];\n    [_noDataLabel setBackgroundColor:FOREGROUND_COLOR_NIGHT theme:ThemeVersionNight];\n    _noDataLabel.textColor = TEXT_COLOR_HOME_PAGE;\n    _noDataLabel.font = [UIFont systemFontOfSize:15];\n    _noDataLabel.textAlignment = NSTextAlignmentCenter;\n    _noDataLabel.text = @\"当前无持仓\";\n    \n    [_noDataView addSubview:_noDataImageView];\n    [_noDataView addSubview:_noDataLabel];\n    [_tableView addSubview:_noDataView];\n    [_tableView addSubview:_noDataLabelForIphone5];\n    _noDataLabelForIphone5.hidden = YES;\n}\n\n- (void)emptyViewConstraints{\n    __weak __typeof(self)WeakSelf = self;\n    \n    if (!IS_SYSTEM_BEYOND_IOS9) {\n        _noDataView.frame = CGRectMake(0, TABBAR_HEIGHT, Screen_width, Screen_height - STATUSBAR_AND_NAVIGATIONBAR_HEIGHT - 2 * TABBAR_HEIGHT - STATUSBAR_AND_NAVIGATIONBAR_HEIGHT);\n    } else {\n        [_noDataView mas_makeConstraints:^(MASConstraintMaker *make) {\n            make.width.mas_equalTo(WeakSelf.tableView.tableView.tableView.mas_width);\n            make.height.mas_equalTo(WeakSelf.tableView.tableView.tableView.mas_height);\n            make.centerX.equalTo(WeakSelf.tableView.tableView.tableView.mas_centerX);\n            make.centerY.equalTo(WeakSelf.tableView.tableView.tableView.mas_centerY);\n        }];\n    }\n    \n    \n    if (@available(iOS 13.0, *)) {\n        [_noDataImageView mas_makeConstraints:^(MASConstraintMaker *make) {\n            make.width.mas_equalTo(NODATAIMAGEVIEWWIDTH);\n            make.height.mas_equalTo(NODATAIMAGEVIEWHEIGHT);\n            make.top.mas_equalTo(WeakSelf.noDataView.mas_top).mas_offset(30*Screen_widthScale);\n            make.centerX.mas_equalTo(WeakSelf.noDataView.mas_centerX);\n        }];\n    }else{\n        [_noDataImageView mas_makeConstraints:^(MASConstraintMaker *make) {\n            make.width.mas_equalTo(NODATAIMAGEVIEWWIDTH);\n            make.height.mas_equalTo(NODATAIMAGEVIEWHEIGHT);\n            make.centerY.mas_equalTo(WeakSelf.noDataView.mas_centerY).offset(-NODATALABELTOIMAGE);\n            \n            make.centerX.mas_equalTo(WeakSelf.noDataView.mas_centerX);\n        }];\n    }\n    \n    [_noDataLabel mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.centerX.mas_equalTo(WeakSelf.noDataView.mas_centerX);\n        make.top.mas_equalTo(WeakSelf.noDataImageView.mas_bottom).with.offset(NODATALABELTOIMAGE);\n        make.width.mas_equalTo(WeakSelf.mas_width);\n        make.height.mas_equalTo(NODATALABELHEIGHT);\n    }];\n}\n\n#pragma mark - 界面刷新\n- (void)setParentViewWaitViewActivity:(BOOL) activity{\n    if (activity) {\n        if (_waitActivityView == nil) {\n            _waitActivityView = [[UIActivityIndicatorView alloc]initWithActivityIndicatorStyle:UIActivity","relevantFile":"<file_path>RRQueryViewController.mm\n//\n//  RRQueryViewController.m\n//  AMHexin\n//\n//  Created by zhu on 17/4/1.\n//  Copyright © 2017年 Hexin. All rights reserved.\n//\n\n#import \"RRQueryViewController.h\"\n#import \"HXChedanOrSearchDataLevel.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import \"WtLoginUtil.h\"\n#import \"NSString+AM.h\"\n#import <HXTool/NSString+EmptyAndWhitespace.h>\n#import \"WTRRStockCodeManager.h\"\n#import \"HXRiskNoticeManager.h\"\n#import \"ViewTrace.h\"\n#import \"RRBuyTabExchangeAccountProtocol.h\"\n#import \"RRQueryView.h\"\n#import \"MyStockJournalNoDataView.h\"\n#import \"WTTradeDealViewModel.h\"\n#import \"WTTradeTodayDealModel.h\"\n#import <ThirdBase/Masonry.h>\n#import \"AMLocalIdDef.h\"\n\n\n#define RRChaXunPrefix          @\"jiaoyi_guozhai_chaxun\"\n\n@interface RRQueryViewController ()<ViewTraceInfo,RRBuyTabExchangeAccountProtocol>\n\n@property (nonatomic, strong) WTTradeDealViewModel *viewModel;\n@property (nonatomic, strong) RRQueryView *queryView;   /**成交列表视图*/\n@property (nonatomic, strong) MyStockJournalNoDataView *queryEmptyView;    /**空数据视图*/\n//数据处理帮助类\n@property (nonatomic, strong) HXTodaydealDataProcess *dataProcessHelper;\n@property (nonatomic, copy) NSArray *rrStockCodeArray;\n@property (nonatomic, assign) BOOL isRefreshing;\n@end\n\n@implementation RRQueryViewController\n\n- (void)dealloc{\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self createUI];\n    [self addConstraint];\n    self.rrStockCodeArray = [[WTRRStockCodeManager sharedInstance] getStockCodeArray];\n}\n\n- (void)createUI{\n    [self.view setBackgroundColor:BACKGROUND_COLOR_NORMAL];\n    [self.view setBackgroundColor:BACKGROUND_COLOR_NORMAL theme:ThemeVersionNormal];\n    [self.view setBackgroundColor:BACKGROUND_COLOR_NIGHT theme:ThemeVersionNight];\n    [self.view changeTheme];\n    [self.view addSubview:self.queryView];\n    [self.view addSubview:self.queryEmptyView];\n}\n<file_path>WTEntrustDealQueryDataRequestPresenter.mm\n//\n//  WTEntrustDealQueryDataRequestPresenter.m\n//  AMHexin\n//\n//  Created by ths_wangjiajia2 on 2023/2/27.\n//  Copyright © 2023 Hexin. All rights reserved.\n//\n\n#import \"WTEntrustDealQueryDataRequestPresenter.h\"\n\n#import \"EQLocaIdDef.h\"\n#import \"HXChedanOrSearchDataLevel.h\"\n\n#import <HXBase/HXBaseVC.h>\n#import <HXBase/NSArray+Safety.h>\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n\n@interface WTEntrustDealQueryDataRequestPresenter ()\n\n/// 请求管理器\n@property (strong, nonatomic) HXTodayweituoDataProcess *dataProcess;\n\n@end\n\n@implementation WTEntrustDealQueryDataRequestPresenter\n\n/// 当日委托数据获取\n/// - Parameters:\n///   - isShowNetWorkingTip: 是否展示网络请求指示器\n///   - callBack: 数据回调\n- (void)requestTodayEntrustQueryDataWithShowNetWorkingTip:(BOOL)isShowNetWorkingTip callBack:(WTDataRequestFinishBlock)callBack{\n    if (!callBack) {\n        return;\n    }\n    \n    SEL selector = @selector(requestDataWithBeginDate:\n                             endDate:\n                             needFillArrayList:\n                             requestPage:\n                             onePageCount:\n                             wait:\n                             isRefresh:\n                             reslutBlock:);\n    if (![self.dataProcess respondsToSelector:selector]) {\n        callBack(@[], nil);\n        return;\n    }\n\n    NSMutableArray *fillArrayList = [NSMutableArray arrayWithCapacity:14];\n    for (NSInteger i = 0; i < 14; i++) {\n        [fillArrayList addObject:[NSMutableArray array]];\n    }\n    [[AMUIPublicProxy getCurHXBaseViewController] showNetWorkingTip:isShowNetWorkingTip indicatorStyle:IS_NIGHT_THEME ? UIActivityIndicatorViewStyleWhite : UIActivityIndicatorViewStyleGray];\n    WeakObj(self);\n    [self.dataProcess requestDataWithBeginDate:nil\n                                        endDate:nil\n                              needFillArrayList:fillArrayList\n                                    requestPage:0\n                                   onePageCount:CHEDANORSEARCHPAGENUMBER\n                                           wait:NO\n\n RZRQEntrustDealQueryBaseGridTableView.m\n EQHexin\n\n Created by ths_wj on 2021/5/26.\n Copyright © 2021 Hexin. All rights reserved.","relevantFileList":[],"filePath":"RZRQEntrustDealQueryBaseGridTableView.mm","template":"objective-cpp","multiRes":{"hipilot":"Enum.h\"","deepseek-chat-lite":"Manager.h\"","CodeQwen2.5-7B":"WTTodayDealIncrementQuertContinue.h\"","copilot":"+Re\"\n#import <ThirdBase/Masonry.h"}},{"prefix":"                calAmount = [NSDecimalNumberCalculate deimalNumberOperation:CalculateOperationTypeDivde value1:cangStr value2:m_pPrice.text];\n            }\n            nowAmount = [NSString stringWithFormat:@\"%lld\",([calAmount longLongValue]/distance) * distance];\n            nowAmount = [self finalAmountAfterCalculate:nowAmount];\n            break;\n        }\n        default:\n            break;\n    }\n    //设置数量输入框数量\n    m_pAmount.text = nowAmount;\n    [self changeNeedMoney:m_pAmount];\n}\n\n// 自定义仓位计算出数量后的特殊处理\n// 包括金额仓位、股数、总资产仓位\n- (NSString *)finalAmountAfterCalculate:(NSString *)amount {\n    // 如果单位为手，则除以10\n    NSString *finalAmount = amount;\n    if([[_m_pAbleAmountView.text string] containsString:@\"手\"]){\n        finalAmount = [NSString stringWithFormat:@\"%lld\",[amount longLongValue]/10];\n    }\n    return finalAmount;\n}\n\n//获取当前可买卖数量\n- (NSNumber *)getAbleAmountNumber {\n    HXAttributeLabel *ableAmountField = _m_pAbleAmountView;\n    if (ableAmountField && ableAmountField.text != nil) {\n        NSAttributedString *ableAmountAttrStr = ableAmountField.text;\n        NSString *ableAmount = ableAmountAttrStr.string;\n        if ([ableAmount rangeOfString:@\"-\"].length != 0) {\n            return nil;\n        }\n        if ([ableAmount rangeOfString:@\"可买\"].length != 0) {\n            ableAmount = [ableAmount stringByReplacingOccurrencesOfString:@\"可买\" withString:@\"\"];\n        }\n        if ([ableAmount rangeOfString:@\"可卖\"].length != 0) {\n            ableAmount = [ableAmount stringByReplacingOccurrencesOfString:@\"可卖\" withString:@\"\"];\n        }\n        if ([ableAmount rangeOfString:@\"股\"].length != 0) {\n            ableAmount = [ableAmount stringByReplacingOccurrencesOfString:@\"股\" withString:@\"\"];\n        }\n        if ([ableAmount rangeOfString:@\"份\"].length != 0) {\n            ableAmount = [ableAmount stringByReplacingOccurrencesOfString:@\"份\" withString:@\"\"];\n        }\n        if ([ableAmount rangeOfString:@\"张\"].length != 0) {\n            ableAmount = [ableAmount stringByReplacingOccurrencesOfString:@\"张\" withString:@\"\"];\n        }\n        if ([ableAmount rangeOfString:@\"手\"].length != 0) {\n            ableAmount = [ableAmount stringByReplacingOccurrencesOfString:@\"手\" withString:@\"\"];\n        }\n        if ([ableAmount integerValue] < 0) {\n           return nil;\n        }\n        if (ableAmount.length > BuyOrSellMaxAmountLength) {\n           return nil;\n        }\n        \n        NSNumber *ableAmountNum = [NSNumber numberWithInteger:[ableAmount integerValue]];\n        return ableAmountNum;\n    }\n    return nil;\n}\n\n- (WTTradeSetDefaultModel *)getTradeSetDefaultModel {\n    NSString *stockCode = wt_MaiMaiPan.curCode;\n    return [[WTTradeSetArchiverManager shareManager] getTradeSetDefaultModelWithStockMarket:self.selectStockMarket stockCode:stockCode stockName:self.m_pStockName.text nowPrice:self.nowPrice normalBuyPrice:[self getNormalTradeSetBuyPrice] normalSellPrice:[self getNormalTradeSetSellPrice] bondBuyPrice:[self getBondTradeSetBuyPrice] bondSellPrice:[self getBondTradeSetSellPrice] fundBuyPrice:[self getFundTradeSetBuyPrice] fundSellPrice:[self getFundTradeSetSellPrice] ableAmount:self.oldAbleAmount isBuy:[self bTradeTypeIsBuy] riseStopPrice:m_pRiseStopPrice.text fallStopPrice:m_pFallStopPrice.text];\n}\n\n//科创板限价提醒需求,JIRA-19906\n- (void)handleHQDataWithBuyPrice1:(NSString *)buyPrice1 sellPrice1:(NSString *)sellPrice1 newPrice:(NSString *)newPrice preClosePrice:(NSString *)preClosePrice{\n    WTPriceLimitManager *manager = [WTPriceLimitManager sharedManager];\n    manager.buyPrice1 = buyPrice1;\n    manager.sellPrice1 = sellPrice1;\n    manager.nowPrice = newPrice;\n    manager.preClosePrice = preClosePrice;\n    if (self.isSupportLimitPrice && self.isOpenShowPriceLimit) {\n        [self handleUpdatePriceLimit];\n    }\n}\n\n- (void)updateRisePriceBtnFrameWithIsSupportLimitPrice:(BOOL)isSupportLimitPrice {\n    CGSize riseNumberSize = [m_pRiseStopPrice.text boundingRectWithSize:CGSizeMake(99999, 0) options:NSStringDrawingTruncatesLastVisibleLine | NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:m_pRiseStopPrice.font} context:nil].size;\n    CGRect tempFrame = self.risePriceBtn.frame;\n    tempFrame.size.width = 25 + riseNumberSize.width + 10;\n    tempFrame.origin.x = m_pStockCode.frame.origin.x + m_pStockCode.frame.size.width - tempFrame.size.width;\n    if (isSupportLimitPrice) {\n        tempFrame.origin.x -= 18;\n    }\n    self.risePriceBtn.frame = tempFrame;\n    \n    tempFrame = m_pRiseStopPrice.frame;\n    tempFrame.origin.x = 25+6;\n    m_pRiseStopPrice.frame = tempFrame;\n    \n    tempFrame = _riseStop.frame;\n    tempFrame.origin.x = 4;\n    _riseStop.frame = tempFrame;\n}\n\n- (void)handleUpdatePriceLimit {\n    BOOL isBuy = [self bTradeTypeIsBuy];\n    WTPriceLimitManager *manager =  [WTPriceLimitManager sharedManager];\n    \n    if ([WTPriceLimitManager isCurrentTimeAndBussinessSupportLimitPrice]) {\n        NSString *limitPriceStr = [WTPriceLimitManager getPriceLimitIsBuy:isBuy buyPrice1:manager.buyPrice1 sellPrice1:manager.sellPrice1 newPrice:manager.nowPrice preClosePrice:manager.preClosePrice stopPrice:isBuy?manager.riseStopPrice:manager.fallStopPrice WithStockCode:self.m_pStockCode.text withMarketId:self.selectStockMarket];\n        \n        limitPriceStr= limitPriceStr?:@\"--\";\n        \n        if (isBuy) {\n            m_pRiseStopPrice.text = limitPriceStr;\n        }else {\n            m_pFallStopPrice.text = limitPriceStr;\n        }\n        \n        if (![_riseStop.text isEqualToString:@\"上限\"]) {\n            _riseStop.text = @\"上限\";\n            _fallStop.text = @\"下限\";\n            [self resetRiseAndFallBackWithButton:_fallPriceBtn];\n            [self resetRiseAndFallBackWithButton:_risePriceBtn];\n            _kcbPriceInfoBtn.hidden = NO;\n            [self updateRisePriceBtnFrameWithIsSupportLimitPrice:YES];\n        }\n        \n    }else {\n        if (![_riseStop.text isEqualToString:@\"涨停\"]) {\n            m_pRiseStopPrice.text = self.riseStopPrice;\n            m_pFallStopPrice.text = self.fallStopPrice;\n            _riseStop.text = @\"涨停\";\n            _fallStop.text = @\"跌停\";\n            [self resetRiseAndFallBackWithButton:_fallPriceBtn];\n            [self resetRiseAndFallBackWithButton:_risePriceBtn];\n            _kcbPriceInfoBtn.hidden = YES;\n            [self updateRisePriceBtnFrameWithIsSupportLimitPrice:NO];\n        }\n\n    }\n}\n\n//是否开启明日涨跌停,非市价委托\n- (BOOL)isTomorrowMoveOpen{\n    return [self.shouKaiPanState isEqualToString:@\"6\"] && !self.isSJWT;\n}\n\n- (void)updateTomorrowLabelLayout{\n    if (self.m_TradeType == RZRQ_Trade_Type_RQMC) {\n        [self.tomorrowLabel mas_remakeConstraints:^(MASConstraintMaker *make) {\n            make.centerY.equalTo(_risePriceBtn);\n            make.width.height.mas_equalTo(28);\n            make.height.height.mas_equalTo(19);\n            make.right.equalTo(_risePriceBtn.mas_left).offset(-6);\n        }];\n    }else{\n        [self.tomorrowLabel mas_remakeConstraints:^(MASConstraintMaker *make) {\n            make.centerY.equalTo(_risePriceBtn);\n            make.width.height.mas_equalTo(28);\n            make.height.height.mas_equalTo(19);\n            make.left.equalTo(m_pStockCode.mas_left);\n        }];\n    }\n}\n\n- (void)ProcessTipAndSwitchId:(CEQStuffTextStruct* )pStuffData\n{\n    if (pStuffData != NULL) {\n        StuffTextModel *textModel = (StuffTextModel *)pStuffData->StuffModelOutput();\n        [self textRequestDataFinished:textModel needShowTip:YES];\n    }\n}\n\n- (void)handleBuySellSuccessTip:(NSString *)string rzrqTradeType:(RZRQ_Trade_Type)rzrqTradeType{\n    NSString *orderId = [WTTradeCheckOrderManager fetchOrderIdWithTextString:string];\n    if (orderId) {\n        BOOL isBuy = [self bTradeTypeIsBuy];\n        WeakObj(self);\n        [self.orderManager requestTodayWTType:WTTradeCheckOrderStandeRZRQ orderId:orderId marketId:self.selectStockMarket successHandle:^(QuickBuyOrSellTodayWTModal * _Nonnull model, StuffBaseModel * _Nonnull data) {\n            [[WTStockPriceMonitoringManager sharedInstance","infill":"stockInfoArray;\n    // self.tempRZZQStockInfo","suffix":"Array = stockInfoArray;\n    self.tempRZZQStockInfoArray\n}\n\n#pragma mark -WTTradeSearchStockViewDelegate\n- (void)dealWithTheResultStockInfo:(HXSearchStockInfo *)stockInfo tradeHQModel:(WTTradeHQModel *)hqModel {\n    [self clearDataWithNeedClearStock:YES];\n    [self.wt_MaiMaiPan clearAllLabelDate];\n    m_pStockCode.text = stockInfo.stockCode;\n    NSDictionary *dic;\n    if(stockInfo.stockMarket.length <= 0 && stockInfo.stType.length > 0) {\n        dic = hqModel.data ? [NSDictionary dictionaryWithObjectsAndKeys:stockInfo.stockCode ?:@\"\",WTSEARCH_FAILED_CODE,stockInfo.stType,WTSEARCH_FAILED_STTYPE,hqModel.data,@\"hqDataModel\",nil]:[NSDictionary dictionaryWithObjectsAndKeys:stockInfo.stockCode ?:@\"\",WTSEARCH_FAILED_CODE,stockInfo.stType,WTSEARCH_FAILED_STTYPE,nil];\n    } else {\n        dic = [NSDictionary dictionaryWithObjectsAndKeys:stockInfo.stockCode ?:@\"\",@\"code\",stockInfo.stockMarket,@\"market\", nil];\n    }\n\n    [self requestFromStock:dic wait:NO];\n    [self hideSearchView];\n}\n\n- (TradeActionRequest *)getNowRequest {\n    return _tradeRequest;\n}\n\n- (NSDictionary *)getHQRequestOtherInfo {\n    NSDictionary *otherInfo = [NSDictionary dictionary];\n    if (self.isSJWT) {\n        NSDictionary *sjwtInfo = [[HXWTAccountManager sharedInstance] getCurAccountInfor].sjwtInfo;\n        NSArray *arr = [sjwtInfo objectForKey:[NSString stringWithFormat:@\"clkey_index%d\",m_nMarketIndex]];\n        if ([arr count] > _m_rzrqActionSheetIndex) {\n            otherInfo = @{TradeActionReq_SJCL_Key : [arr objectAtIndex:_m_rzrqActionSheetIndex]};\n        }\n    }\n    return otherInfo;\n}\n\n- (void) clearStockData{\n    [self clearDataWithNeedClearStock:YES];\n    [self.wt_MaiMaiPan clearAllLabelDate];\n    NSString *strKey = @\"GPCode\";\n    NSString *marketKey = @\"GPMarket\";\n    AM_UI_Public_Proxy::SetPublicValue(strKey,@\"\");\n    AM_UI_Public_Proxy::SetPublicValue(marketKey, @\"\");\n    \n    if([WTPositonFunctionManager isOpenChicangMark] && [self.rzrqTradeStateDelegate respondsToSelector:@selector(updateStockInfoForCell)]){\n                [self.rzrqTradeStateDelegate updateStockInfoForCell];\n            }\n  \n    \n}\n\n- (void)closeSearchView {\n    [self hideSearchView];\n}\n\n- (void)changeLayoutToType:(int)type {\n    BOOL needUpdateImg = self.isKeChuangBanWithStockCode && type != 3;\n    if (needUpdateImg) {\n        [wt_MaiMaiPan.imageViewTeXiao removeFromSuperview];\n    }\n    switch (type) {\n        case 3:\n        {\n            [self layoutChangeToKCBSJ];\n        }\n            break;\n        case 2:\n        {\n            [self layoutChangeToSJ];\n        }\n            break;\n            \n        default:{\n            [self layoutChangeToXJ];\n        }\n            break;\n    }\n    if ([self.rzrqTradeActionDelegate respondsToSelector:@selector(rzrqTradeAction:heightChangeAction:)]) {\n        CGFloat height = _submitBtn.maxY + 8;\n        [self.rzrqTradeActionDelegate rzrqTradeAction:self heightChangeAction:height];\n    }\n}\n\n#pragma mark - JHModeHandleProtocol\n- (void)handleJHModeWithParam:(NSDictionary *)param{\n    [self.jhModeManager handleJHModeLogicWithParam:param];\n}\n\n- (JHModeManager *)jhModeManager{\n    if (!_jhModeManager) _jhModeManager = [[JHModeManager alloc] init];\n    \n    return _jhModeManager;\n}\n\n#pragma mark - KCBLayout\n\n- (void)layoutChangeToKCBSJ {\n    _m_pProtectionPrice.width = m_pAmount.width;\n    _m_pProtectionPrice.centerY = m_pPrice.centerY + 8 + m_pPrice.height;\n    \n    m_pAmount.centerY = _m_pProtectionPrice.centerY + 8 + _m_pProtectionPrice.height;\n    _m_pAbleAmountView.minY = m_pAmount.maxY + 2;\n    _debtLabel.minY = _m_pAbleAmountView.minY;\n    self.fastOderAmountLabel.hxct_y = _m_pAbleAmountView.hxct_y + (_m_pAbleAmountView.hxct_h - self.fastOderAmountLabel.hxct_h)/2;\n\n    [self changeCangWeiLayout];\n}\n\n- (void)layoutChangeToSJ {\n    m_pAmount.minY = _sjwtPriceLabel.maxY + 5;\n    _m_pAbleAmountView.minY = m_pAmount.maxY + 2;\n    _debtLabel.minY = _m_pAbleAmountView.minY;\n    self.fastOderAmountLabel.hxct_y = _m_pAbleAmountView.hxct_y + (_m_pAbleAmountView.hxct_h - self.fastOderAmountLabel.hxct_h)/2;\n\n    [self changeCangWeiLayout];\n}\n\n//另外这边还需要通知 controller 进行 UI 处理\n- (void)layoutChangeToXJ {\n    m_pAmount.minY = _sjwtPriceLabel.maxY + 5;\n    _m_pAbleAmountView.minY = m_pAmount.maxY + 2;\n    _debtLabel.minY = _m_pAbleAmountView.minY;\n    self.fastOderAmountLabel.hxct_y = _m_pAbleAmountView.hxct_y + (_m_pAbleAmountView.hxct_h - self.fastOderAmountLabel.hxct_h)/2;\n\n    [self changeCangWeiLayout];\n}\n\n- (void)changeCangWeiLayout {\n    //再加上全仓的宽\n    _submitBtn.minY = _m_pAbleAmountView.maxY + 4 + 20 + 8;\n    self.cangWeiListView.minY = _m_pAbleAmountView.maxY + 4;\n}\n\n+ (NSString *)hasValidChinese:(NSString *)string {\n    NSString* regular = [NSString stringWithFormat:@\"[\\u4e00-\\u9fa5]\"];\n    //    NSPredicate* regexMatcheMobile = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\",regular];\n    NSError *error;\n    NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:regular options:0 error:&error];\n    if (!error) {\n        NSArray *array = [regex matchesInString:string options:0 range:NSMakeRange(0, string.length)];\n        if ([array count] == 1) {\n            NSRange range = [array[0] range];\n            NSString *mStr = [string substringWithRange:range];\n            return mStr;\n        }\n    }\n    return @\"股\";\n}\n\n//是否支持保护限价\n//规则：1.科创板  2.沪深上下限灰度开启并且是上海股票+基金\n- (BOOL)isSupportProtectPrice{\n    if(self.isKeChuangBanWithStockCode){\n        return YES;\n    }\n    BOOL isMarketSupport = [self.selectStockMarket isEqualToString:SHANGHAI_A_MARKET_17] || [self.selectStockMarket isEqualToString:FUND_SHANGHAI_MARKET_20];\n    return [WTPriceLimitManager isGrayReleaseOpenHSLimitPrice] && isMarketSupport;\n}\n\n#pragma mark - 买卖预设\n// 普通买入价格\n- (NSString *)getNormalTradeSetBuyPrice {\n    WTTradeSetNormalModel *normalModel = [WTTradeSetArchiverManager shareManager].rzrqNormalModel;\n    //涨停买入适配上下限\n    if (normalModel.buyPrice == WTTradeSetNormalBuyPriceZTPrice) {\n        NSString *buyLimitPrice = [self getNormalLimitTradeSetPrice];\n        if(![NSString wtIsBlankString:buyLimitPrice]){\n            return buyLimitPrice;\n        }\n    }\n    NSArray *array = [self getTradeSetBuyPriceWithIsBond:NO];\n    return [self safetyPriceAtIndex:normalModel.buyPrice withArry:array];\n}\n\n// 普通卖出价格\n- (NSString *)getNormalTradeSetSellPrice {\n    WTTradeSetNormalModel *normalModel = [WTTradeSetArchiverManager shareManager].rzrqNormalModel;\n    //跌停卖出适配上下限\n    if (normalModel.sellPrice == WTTradeSetNormalSellPriceDTPrice) {\n        NSString *sellLimitPrice = [self getNormalLimitTradeSetPrice];\n        if(![NSString wtIsBlankString:sellLimitPrice]){\n            return sellLimitPrice;\n        }\n    }\n    NSArray *array = [self getTradeSetSellPriceWithIsBond:NO];\n    return [self safetyPriceAtIndex:normalModel.sellPrice withArry:array];\n}\n\n-(NSString *)getNormalLimitTradeSetPrice{\n\n    if (!self.isSupportLimitPrice || ![WTPriceLimitManager isCurrentTimeAndBussinessSupportLimitPrice]) {\n        // 没有limit价格\n        return @\"\";\n    }\n    BOOL isBuy = [self bTradeTypeIsBuy];\n  \n    WTPriceLimitManager *manager =  [WTPriceLimitManager sharedManager];\n    //买卖预设涨跌停价取买卖行情返回后存储的，防止manager中的还没有赋值;\n    NSString *limitPriceStr = [WTPriceLimitManager getPriceLimitIsBuy:isBuy buyPrice1:manager.buyPrice1 sellPrice1:manager.sellPrice1 newPrice:manager.nowPrice preClosePrice:manager.preClosePrice stopPrice:isBuy?self.riseStopPrice:self.fallStopPrice WithStockCode:self.m_pStockCode.text withMarketId:self.selectStockMarket];\n    \n    if (!limitPriceStr) {\n        return @\"\";\n    }\n    \n    return limitPriceStr;\n\n}\n\n// 可转债买入价格\n- (NSString *)getBondTradeSetBuyPrice {\n    WTTradeSetBondModel *bondModel = [WTTradeSetArchiverManager shareManager].rzrqBondModel;\n    NSArray *array = [self getTradeSetBuyPriceWithIsBond:YES];\n    return [self safetyPriceAtIndex:bondModel.buyPrice withArry:array];\n}\n\n// 可转债卖出价格\n- (NSString *)getBondTradeSetSellPrice {","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"sharedInstance] setCacheWithMarketID:self.selectStockMarket andStockCode:self.m_pStockCode.text andRQData:nil];","deepseek-chat-lite":"] updateOrderId:orderId orderType:isBuy?WTOrderTypeBuy:WTOrderTypeSell orderStatus:model.orderStatus];","CodeQwen2.5-7B":"] updateTodayWTType:WTTradeCheckOrderStandeRZRQ orderId:orderId marketId:self.selectStockMarket successHandle:^(QuickBuyOrSellTodayWTModal * _Nonnull model, StuffBaseModel * _Nonnull data) {","copilot":"stockInfoArray;\n    // self.tempRZZQStockInfo"}},{"prefix":"\n#import \"HXTabBarControllerExBusiness.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import \"HXiOS13DarkModelTipManager.h\"\n#import \"TabBarControllerEx+HXBusiness.h\"\n#import \"HXFirstPageAutoRefreshManager.h\"\n#import <HXModuleServiceManage/HXAMFrontPageDefines.h>\n#import \"ApplicationCallsManager.h\"\n#import \"AMPublicInterface.h\"\n#import \"WTJumpManager.h\"\n#import \"AMPublicInterface.h\"\n#import \"WTJumpOptManager.h\"\n#import \"AM_UI_VarKeyString.h\"\n#import \"WtLoginCollectUserBehaviorTool.h\"\n#import \"WtLoginUtil.h\"\n#import \"AMSettingVarsProxy.h\"\n#import \"UITabBar+HXBadge.h\"\n#import \"AMLocalIdDef.h\"\n#import <HXBase/NavigationControllEx.h>\n#import \"HXBaseViewController.h\"\n#import \"HXStoreReview.h\"\n#import \"EQCommunicationManager.h\"\n#import \"CoverViewHideManageCenter.h\"\n#import \"HXUserInfo.h\"\n#import \"TradeLoginTimeTip.h\"\n#import \"HXCustomAlertViewIdentifier.h\"\n#import \"HXUserTrackManager.h\"\n#import \"HXTradeDetainAlertManager.h\"\n#import \"HXCommunicateBusiness.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"HXTradeProductsGuideManager.h\"\n#import \"HXFinancingConfigManager.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"IHexin-Swift.h\"\n#import \"HXTabSwitchAPMRecordManager.h\"\n#import <WTTradeModule/TradeToolRequestLimit.h>\n#import <HXBase/HXGoToParser.h>\n\n#define   CLICK_TO_TRADE  @\"clickToTrade\" // 用户是否是点击tabbar进入交易\n\n@interface HXTabBarControllerExBusiness ()\n@property (nonatomic, strong) HXTradeDetainAlertManager *tradeDetainAlert; // 交易挽留弹窗\n@end\n\n@implementation HXTabBarControllerExBusiness\n\n#pragma mark - HXTabBarControllerExBusinessProtocol\n\n- (void)tabBarControllerEx:(TabBarControllerEx *)tabBar traitCollectionDidChange:(UITraitCollection *)previousTraitCollection {\n    if (@available(iOS 13.0, *)) {\n        NSString *type = [[NSUserDefaults standardUserDefaults] objectForKey:CURRENT_THEME_USER_CHOSEN_TYPE_KEY];\n        #if TARGET_IPHONE_SIMULATOR\n        type = @\"2\";\n        #endif\n            \n        if (type.integerValue == 2 && [[UITraitCollection currentTraitCollection] hasDifferentColorAppearanceComparedToTraitCollection:previousTraitCollection]) {\n            UIUserInterfaceStyle userInterfaceStyle = [UITraitCollection currentTraitCollection].userInterfaceStyle;\n            ThemeVersion currentVersion = ThemeVersionNormal;\n            if (userInterfaceStyle == UIUserInterfaceStyleLight) {\n                currentVersion = ThemeVersionNormal;\n            }else if (userInterfaceStyle == UIUserInterfaceStyleDark) {\n                currentVersion = ThemeVersionNight;\n            }\n            [ThemeVersionManager setCurrentTheme:currentVersion];\n            [tabBar debugLog];\n        }\n    } else {\n        // Fallback on earlier versions\n    }\n    [HXiOS13DarkModelTipManager showTips];\n}\n\n- (void)tabBarControllerExViewDidLoad:(TabBarControllerEx *)tabBar {\n    [tabBar addKVOObserver];\n    [tabBar addNotifyObserver];\n}\n\n- (BOOL)tabBarControllerEx:(TabBarControllerEx *)tabBar shouldSelectViewController:(UIViewController *)viewController {\n    NSArray* aryController = tabBar.viewControllers;\n    int nIndex = (int)[aryController indexOfObject:viewController];\n\n    if (tabBar.curSelectIndex == nIndex) {\n        if (nIndex == 0) {\n            [[NSNotificationCenter defaultCenter] postNotificationName:TabBarClickFirstTabNotify object:nil];\n        }\n    } else {\n        if (nIndex != 0 && tabBar.curSelectIndex == 0) {\n            [HXFirstPageAutoRefreshManager setCheckpoint];\n        }\n    }\n\n    if (tabBar.selectedIndex == [AMUIPublicProxy tradeIndexInTabbarVC] && nIndex != [AMUIPublicProxy tradeIndexInTabbarVC]) {\n       //#JIRA-23045 交易挽留弹窗\n       BOOL flag = [HXTradeDetainAlertManager isNeedShowTradeDetainAlert];\n       if (flag) {\n           [self.tradeDetainAlert showTradeTabDetainAlert];\n           return NO;\n       }\n       [HXCustomAlertViewStackIdentifierManager dimissTradeStack];\n       //离开交易页时\n       [HXStoreReview requestReviewIfNeeded];\n    }\n    if ((tabBar.curSelectIndex != [AMUIPublicProxy zixuanIndexInTabbarVC] && nIndex == [AMUIPublicProxy zixuanIndexInTabbarVC]) ||\n        (tabBar.curSelectIndex != [AMUIPublicProxy tradeIndexInTabbarVC] && nIndex == [AMUIPublicProxy tradeIndexInTabbarVC])) { //  记录点击自选次数\n        [HXTradeDetainAlertManager saveClickNumber];\n        if (tabBar.curSelectIndex != [AMUIPublicProxy tradeIndexInTabbarVC] && nIndex == [AMUIPublicProxy tradeIndexInTabbarVC]) {\n            [HXTradeDetainAlertManager requestOpenAccountStatus];\n        }\n    }\n    \n    // 切换tab时，不需要跳回其他应用了\n    [[ApplicationCallsManager sharedInstance] clearData];\n    //切换tab时，清空keyPageID的环境变量\n    AM_UI_Public_Proxy::RemovePublicValue(@\"keyPageID\");\n    \n    [[WTJumpManager sharedInstance] clearData];\n    //切换tab 清除跳转交易切换tab变量\n    [WTJumpOptManager clearTabIndexInfo];\n    AM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_NEWS_STOCKNAME_DOWN, 0);   //取消资讯正文股票跳转到分时的状态\n    \n    NSInteger currentIndex = tabBar.curSelectIndex;\n    tabBar.curSelectIndex = nIndex;\n    AM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_SELECT_Tab_Index, nIndex);\n\n    if (nIndex == [AMUIPublicProxy tradeIndexInTabbarVC]) {\n        //如果tab切换到交易下 就尝试自动登录\n        NSString *loginBehaviorObj = [WtLoginCollectUserBehaviorTool getLoginBehaviorWithType:@\"unactive\" reason:@\"autoLoginType2\"];\n        [WtLoginUtil processAutoWtLogin:NO toPage:PAGE_WT_START loginBehaviorObj:loginBehaviorObj];\n        [AMSettingVarsProxy setStringVariableValue:@\"1\" forKey:CLICK_TO_TRADE];\n        [[HXTradeProductsGuideManager shareInstance] clickTabLog];\n    }\n    \n    [self sendTabSelectedBehaviorObjFrom:currentIndex toIndex:nIndex];\n    \n    if (nIndex == [AMUIPublicProxy zixuanIndexInTabbarVC]) {\n        NSArray* ary = [[tabBar tabBar] items];\n        \n        if ([ary count] > 3) {\n            id obj = [ary objectAtIndex:nIndex];\n            if ([obj isKindOfClass:[UITabBarItem class]]) {\n                [(UITabBarItem*)obj setBadgeValue:nil];\n            }\n        }\n        \n    }\n    \n    //是否收集发送CBAS数据,委托页面不发送CBAS数据\n    if (nIndex == [AMUIPublicProxy tradeIndexInTabbarVC])\n    {\n        AM_Middle_Public_Proxy::IsSendCBASData(EQFALSE);\n        //切换用户会清除委托账户\n        if([[HXWTAccountManager sharedInstance] getCurAccountInfor]== nil && [HUAccountManager sharedManager].loginAccount == nil)\n        {\n            [[NSNotificationCenter defaultCenter] postNotificationName:WT_LOGIN_FIRST object:nil];\n        }\n              \n        if (currentIndex == nIndex) {\n            [[NSNotificationCenter defaultCenter] postNotificationName:WT_TABCLICK_TWICE object:nil];\n        }\n            \n        if (currentIndex != nIndex) {\n            [HXCustomAlertViewStackIdentifierManager changeToTradeStack];\n        }\n        \n    } else {\n        AM_Middle_Public_Proxy::IsSendCBASData([[HXCommunicateBusiness sharedInstance] getUploadCBAS]);\n    }\n    \n    [tabBar.tabBar hideBadgeOnItemIndex:nIndex]; //add 9.99.01  fangxiaomin\n    [tabBar.tabBar hideTradePopBtn:nIndex];\n    [[CoverViewHideManageCenter shareCenter] contextChanged:@{CurrentTabBarIndex:@(nIndex)}];\n    if (currentIndex != nIndex) {\n        [[HXVCSwitchNotifyManager shareInstance] newVCWillShow:@{CurrentTabBarIndex:@(nIndex)}];\n    }\n    [TradeToolRequestLimit updateQuotationCheckEnable:NO];\n    return YES;\n}\n\n- (void)tabBarControllerEx:(TabBarControllerEx *)tabBar didSelectViewController:(UIViewController *)viewController {\n    if ([AMUIPublicProxy tradeIndexInTabbarVC] == tabBar.curSelectIndex) {\n        [[TradeLoginTimeTip sharedInstance] tryShowTip];\n    }\n    [[HXTabSwitchAPMRecordManager shareInstance] recordPageWithIndex:tabBar.selectedIndex];\n    [TradeToolRequestLimit updateQuotationCheckEnable:YES];\n}\n\n- (void)tabBarControllerEx:(TabBarControllerEx *)tabBar didSetSelectIndex:(NSUInt","infill":"\n        if ([[HXGrayRelease shared] switchForKey:GrayReleaseWTTabBarShow] &","suffix":"& selectIndex == [AMUIPublicProxy tradeIndexInTabbarVC]) {\n            // GrayReleaseWTTabBarShow灰度开启 && selectIndex为交易页\n            int pageId = [[AMUIPublicProxy currentPageControl] pageID];\n            NSString *configValue = [HXGoToParser hideBottomConfigValueWithPageID:pageId];\n            BOOL hidesBottomBarWhenPushed = [HXGoToParser isHideBottomBarWhenPushedWithConfigValue:configValue];\n            tabBar.tabBar.hidden = hidesBottomBarWhenPushed;\n        }\n    }\n    [[HXVCSwitchNotifyManager shareInstance] newVCWillShow:@{CurrentTabBarIndex:@(selectIndex)}];\n}\n\n+ (NSString *)tabBarObjWithIndex:(NSInteger)tabIndex {\n    return [self tabBarObjWithIndex:tabIndex isFrom:NO];\n}\n#pragma mark - private\n\n+ (NSString *)tabBarObjWithIndex:(NSInteger)tabIndex isFrom:(BOOL)isfrom{\n    if ([HXFinancingConfigManager didShowFinancing]) {\n        return [self tabBarDiscoverObjWithIndex:tabIndex];\n    }\n    switch (tabIndex) {\n        case 0:\n            return @\"shouye\";\n        case 1:\n            return @\"hangqing\";\n        case 2:\n            return @\"zixuan\";\n        case 3:\n            return @\"jiaoyi\";\n        case 4:\n            return @\"zixun\";\n        default:\n            return @\"shouye\";\n    }\n}\n\n+ (NSString *)tabBarDiscoverObjWithIndex:(NSInteger)tabIndex {\n    switch (tabIndex) {\n        case 0:\n            return @\"shouye\";\n        case 1:\n            return @\"hangqing\";\n        case 2:\n            return @\"zixuan\";\n        case 3:\n            return @\"jiaoyi\";\n        case 4:\n            return @\"zixun\";\n        case 5:\n            return @\"licai\";\n        default:\n            return @\"shouye\";\n    }\n}\n\n+ (NSString *)getAllTabBehaviorLogWithTabbar:(TabBarControllerEx *)tabBar {\n    NSString *tabLog = @\"tab_\";\n    NSInteger count = tabBar.viewControllers.count;\n    for (int i = 0; i < count; i++) {\n        tabLog = [tabLog stringByAppendingString:[HXTabBarControllerExBusiness tabBarObjWithIndex:i isFrom:YES]];\n        if (i != count - 1) {// 不是最后一个追加分隔符\n            tabLog = [tabLog stringByAppendingString:@\".\"];\n        }\n    }\n    \n    return tabLog;\n}\n\n- (void)sendTabSelectedBehaviorObjFrom:(NSInteger)fromIndext toIndex:(NSInteger)toIndex {\n    if (fromIndext == toIndex) {\n        return;\n    }\n    \n    NSString *fromTabBarObj = [HXTabBarControllerExBusiness tabBarObjWithIndex:fromIndext isFrom:YES];\n    NSString *toTabBarObj = [HXTabBarControllerExBusiness tabBarObjWithIndex:toIndex isFrom:NO];\n    \n    NSString *obj = [NSString stringWithFormat:@\"%@.%@\", fromTabBarObj, toTabBarObj];\n    [ClientUserBehaviorLog sendLogWithLogobject:obj actionType:ClickAction];\n}\n\n- (HXTradeDetainAlertManager *)tradeDetainAlert {\n    if (!_tradeDetainAlert) {\n        _tradeDetainAlert = [[HXTradeDetainAlertManager alloc] init];\n    }\n    return _tradeDetainAlert;\n}\n\n\n@end\n\n","relevantFile":"","relevantFileList":[],"filePath":"HXTabBarControllerExBusiness.mm","template":"objective-cpp","multiRes":{"hipilot":"eger selectIndex","deepseek-chat-lite":"eger)selectIndex {","CodeQwen2.5-7B":"eger)selectIndex {","copilot":"\n        if ([[HXGrayRelease shared] switchForKey:GrayReleaseWTTabBarShow] &"}},{"prefix":"\n#import \"HXTabBarControllerExBusiness.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import \"HXiOS13DarkModelTipManager.h\"\n#import \"TabBarControllerEx+HXBusiness.h\"\n#import \"HXFirstPageAutoRefreshManager.h\"\n#import <HXModuleServiceManage/HXAMFrontPageDefines.h>\n#import \"ApplicationCallsManager.h\"\n#import \"AMPublicInterface.h\"\n#import \"WTJumpManager.h\"\n#import \"AMPublicInterface.h\"\n#import \"WTJumpOptManager.h\"\n#import \"AM_UI_VarKeyString.h\"\n#import \"WtLoginCollectUserBehaviorTool.h\"\n#import \"WtLoginUtil.h\"\n#import \"AMSettingVarsProxy.h\"\n#import \"UITabBar+HXBadge.h\"\n#import \"AMLocalIdDef.h\"\n#import <HXBase/NavigationControllEx.h>\n#import \"HXBaseViewController.h\"\n#import \"HXStoreReview.h\"\n#import \"EQCommunicationManager.h\"\n#import \"CoverViewHideManageCenter.h\"\n#import \"HXUserInfo.h\"\n#import \"TradeLoginTimeTip.h\"\n#import \"HXCustomAlertViewIdentifier.h\"\n#import \"HXUserTrackManager.h\"\n#import \"HXTradeDetainAlertManager.h\"\n#import \"HXCommunicateBusiness.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"HXTradeProductsGuideManager.h\"\n#import \"HXFinancingConfigManager.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"IHexin-Swift.h\"\n#import \"HXTabSwitchAPMRecordManager.h\"\n#import <WTTradeModule/TradeToolRequestLimit.h>\n#import <HXBase/HXGoToParser.h>\n\n#define   CLICK_TO_TRADE  @\"clickToTrade\" // 用户是否是点击tabbar进入交易\n\n@interface HXTabBarControllerExBusiness ()\n@property (nonatomic, strong) HXTradeDetainAlertManager *tradeDetainAlert; // 交易挽留弹窗\n@end\n\n@implementation HXTabBarControllerExBusiness\n\n#pragma mark - HXTabBarControllerExBusinessProtocol\n\n- (void)tabBarControllerEx:(TabBarControllerEx *)tabBar traitCollectionDidChange:(UITraitCollection *)previousTraitCollection {\n    if (@available(iOS 13.0, *)) {\n        NSString *type = [[NSUserDefaults standardUserDefaults] objectForKey:CURRENT_THEME_USER_CHOSEN_TYPE_KEY];\n        #if TARGET_IPHONE_SIMULATOR\n        type = @\"2\";\n        #endif\n            \n        if (type.integerValue == 2 && [[UITraitCollection currentTraitCollection] hasDifferentColorAppearanceComparedToTraitCollection:previousTraitCollection]) {\n            UIUserInterfaceStyle userInterfaceStyle = [UITraitCollection currentTraitCollection].userInterfaceStyle;\n            ThemeVersion currentVersion = ThemeVersionNormal;\n            if (userInterfaceStyle == UIUserInterfaceStyleLight) {\n                currentVersion = ThemeVersionNormal;\n            }else if (userInterfaceStyle == UIUserInterfaceStyleDark) {\n                currentVersion = ThemeVersionNight;\n            }\n            [ThemeVersionManager setCurrentTheme:currentVersion];\n            [tabBar debugLog];\n        }\n    } else {\n        // Fallback on earlier versions\n    }\n    [HXiOS13DarkModelTipManager showTips];\n}\n\n- (void)tabBarControllerExViewDidLoad:(TabBarControllerEx *)tabBar {\n    [tabBar addKVOObserver];\n    [tabBar addNotifyObserver];\n}\n\n- (BOOL)tabBarControllerEx:(TabBarControllerEx *)tabBar shouldSelectViewController:(UIViewController *)viewController {\n    NSArray* aryController = tabBar.viewControllers;\n    int nIndex = (int)[aryController indexOfObject:viewController];\n\n    if (tabBar.curSelectIndex == nIndex) {\n        if (nIndex == 0) {\n            [[NSNotificationCenter defaultCenter] postNotificationName:TabBarClickFirstTabNotify object:nil];\n        }\n    } else {\n        if (nIndex != 0 && tabBar.curSelectIndex == 0) {\n            [HXFirstPageAutoRefreshManager setCheckpoint];\n        }\n    }\n\n    if (tabBar.selectedIndex == [AMUIPublicProxy tradeIndexInTabbarVC] && nIndex != [AMUIPublicProxy tradeIndexInTabbarVC]) {\n       //#JIRA-23045 交易挽留弹窗\n       BOOL flag = [HXTradeDetainAlertManager isNeedShowTradeDetainAlert];\n       if (flag) {\n           [self.tradeDetainAlert showTradeTabDetainAlert];\n           return NO;\n       }\n       [HXCustomAlertViewStackIdentifierManager dimissTradeStack];\n       //离开交易页时\n       [HXStoreReview requestReviewIfNeeded];\n    }\n    if ((tabBar.curSelectIndex != [AMUIPublicProxy zixuanIndexInTabbarVC] && nIndex == [AMUIPublicProxy zixuanIndexInTabbarVC]) ||\n        (tabBar.curSelectIndex != [AMUIPublicProxy tradeIndexInTabbarVC] && nIndex == [AMUIPublicProxy tradeIndexInTabbarVC])) { //  记录点击自选次数\n        [HXTradeDetainAlertManager saveClickNumber];\n        if (tabBar.curSelectIndex != [AMUIPublicProxy tradeIndexInTabbarVC] && nIndex == [AMUIPublicProxy tradeIndexInTabbarVC]) {\n            [HXTradeDetainAlertManager requestOpenAccountStatus];\n        }\n    }\n    \n    // 切换tab时，不需要跳回其他应用了\n    [[ApplicationCallsManager sharedInstance] clearData];\n    //切换tab时，清空keyPageID的环境变量\n    AM_UI_Public_Proxy::RemovePublicValue(@\"keyPageID\");\n    \n    [[WTJumpManager sharedInstance] clearData];\n    //切换tab 清除跳转交易切换tab变量\n    [WTJumpOptManager clearTabIndexInfo];\n    AM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_NEWS_STOCKNAME_DOWN, 0);   //取消资讯正文股票跳转到分时的状态\n    \n    NSInteger currentIndex = tabBar.curSelectIndex;\n    tabBar.curSelectIndex = nIndex;\n    AM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_SELECT_Tab_Index, nIndex);\n\n    if (nIndex == [AMUIPublicProxy tradeIndexInTabbarVC]) {\n        //如果tab切换到交易下 就尝试自动登录\n        NSString *loginBehaviorObj = [WtLoginCollectUserBehaviorTool getLoginBehaviorWithType:@\"unactive\" reason:@\"autoLoginType2\"];\n        [WtLoginUtil processAutoWtLogin:NO toPage:PAGE_WT_START loginBehaviorObj:loginBehaviorObj];\n        [AMSettingVarsProxy setStringVariableValue:@\"1\" forKey:CLICK_TO_TRADE];\n        [[HXTradeProductsGuideManager shareInstance] clickTabLog];\n    }\n    \n    [self sendTabSelectedBehaviorObjFrom:currentIndex toIndex:nIndex];\n    \n    if (nIndex == [AMUIPublicProxy zixuanIndexInTabbarVC]) {\n        NSArray* ary = [[tabBar tabBar] items];\n        \n        if ([ary count] > 3) {\n            id obj = [ary objectAtIndex:nIndex];\n            if ([obj isKindOfClass:[UITabBarItem class]]) {\n                [(UITabBarItem*)obj setBadgeValue:nil];\n            }\n        }\n        \n    }\n    \n    //是否收集发送CBAS数据,委托页面不发送CBAS数据\n    if (nIndex == [AMUIPublicProxy tradeIndexInTabbarVC])\n    {\n        AM_Middle_Public_Proxy::IsSendCBASData(EQFALSE);\n        //切换用户会清除委托账户\n        if([[HXWTAccountManager sharedInstance] getCurAccountInfor]== nil && [HUAccountManager sharedManager].loginAccount == nil)\n        {\n            [[NSNotificationCenter defaultCenter] postNotificationName:WT_LOGIN_FIRST object:nil];\n        }\n              \n        if (currentIndex == nIndex) {\n            [[NSNotificationCenter defaultCenter] postNotificationName:WT_TABCLICK_TWICE object:nil];\n        }\n            \n        if (currentIndex != nIndex) {\n            [HXCustomAlertViewStackIdentifierManager changeToTradeStack];\n        }\n        \n    } else {\n        AM_Middle_Public_Proxy::IsSendCBASData([[HXCommunicateBusiness sharedInstance] getUploadCBAS]);\n    }\n    \n    [tabBar.tabBar hideBadgeOnItemIndex:nIndex]; //add 9.99.01  fangxiaomin\n    [tabBar.tabBar hideTradePopBtn:nIndex];\n    [[CoverViewHideManageCenter shareCenter] contextChanged:@{CurrentTabBarIndex:@(nIndex)}];\n    if (currentIndex != nIndex) {\n        [[HXVCSwitchNotifyManager shareInstance] newVCWillShow:@{CurrentTabBarIndex:@(nIndex)}];\n    }\n    [TradeToolRequestLimit updateQuotationCheckEnable:NO];\n    return YES;\n}\n\n- (void)tabBarControllerEx:(TabBarControllerEx *)tabBar didSelectViewController:(UIViewController *)viewController {\n    if ([AMUIPublicProxy tradeIndexInTabbarVC] == tabBar.curSelectIndex) {\n        [[TradeLoginTimeTip sharedInstance] tryShowTip];\n    }\n    [[HXTabSwitchAPMRecordManager shareInstance] recordPageWithIndex:tabBar.selectedIndex];\n    [TradeToolRequestLimit updateQuotationCheckEnable:YES];\n}\n\n- (void)tabBarControllerEx:(TabBarControllerEx *)tabBar didSetSelectIndex:(NSUInt","infill":"        // iOS18.0在调用[UITabBarController selectedIndex]方法时，不会更新tabBar的hidd","suffix":"en，故需要手动调用\n        UINavigationController *nav = tabBar.viewControllers[selectIndex];\n        if ([[HXGrayRelease shared] switchForKey:GrayReleaseWTTabBarShow] && selectIndex == [AMUIPublicProxy tradeIndexInTabbarVC] && ) {\n            // GrayReleaseWTTabBarShow灰度开启 && selectIndex为交易页\n            int pageId = [[AMUIPublicProxy currentPageControl] pageID];\n            NSString *configValue = [HXGoToParser hideBottomConfigValueWithPageID:pageId];\n            BOOL hidesBottomBarWhenPushed = [HXGoToParser isHideBottomBarWhenPushedWithConfigValue:configValue];\n            tabBar.tabBar.hidden = hidesBottomBarWhenPushed;\n        }\n    }\n}\n\n+ (NSString *)tabBarObjWithIndex:(NSInteger)tabIndex {\n    return [self tabBarObjWithIndex:tabIndex isFrom:NO];\n}\n#pragma mark - private\n\n+ (NSString *)tabBarObjWithIndex:(NSInteger)tabIndex isFrom:(BOOL)isfrom{\n    if ([HXFinancingConfigManager didShowFinancing]) {\n        return [self tabBarDiscoverObjWithIndex:tabIndex];\n    }\n    switch (tabIndex) {\n        case 0:\n            return @\"shouye\";\n        case 1:\n            return @\"hangqing\";\n        case 2:\n            return @\"zixuan\";\n        case 3:\n            return @\"jiaoyi\";\n        case 4:\n            return @\"zixun\";\n        default:\n            return @\"shouye\";\n    }\n}\n\n+ (NSString *)tabBarDiscoverObjWithIndex:(NSInteger)tabIndex {\n    switch (tabIndex) {\n        case 0:\n            return @\"shouye\";\n        case 1:\n            return @\"hangqing\";\n        case 2:\n            return @\"zixuan\";\n        case 3:\n            return @\"jiaoyi\";\n        case 4:\n            return @\"zixun\";\n        case 5:\n            return @\"licai\";\n        default:\n            return @\"shouye\";\n    }\n}\n\n+ (NSString *)getAllTabBehaviorLogWithTabbar:(TabBarControllerEx *)tabBar {\n    NSString *tabLog = @\"tab_\";\n    NSInteger count = tabBar.viewControllers.count;\n    for (int i = 0; i < count; i++) {\n        tabLog = [tabLog stringByAppendingString:[HXTabBarControllerExBusiness tabBarObjWithIndex:i isFrom:YES]];\n        if (i != count - 1) {// 不是最后一个追加分隔符\n            tabLog = [tabLog stringByAppendingString:@\".\"];\n        }\n    }\n    \n    return tabLog;\n}\n\n- (void)sendTabSelectedBehaviorObjFrom:(NSInteger)fromIndext toIndex:(NSInteger)toIndex {\n    if (fromIndext == toIndex) {\n        return;\n    }\n    \n    NSString *fromTabBarObj = [HXTabBarControllerExBusiness tabBarObjWithIndex:fromIndext isFrom:YES];\n    NSString *toTabBarObj = [HXTabBarControllerExBusiness tabBarObjWithIndex:toIndex isFrom:NO];\n    \n    NSString *obj = [NSString stringWithFormat:@\"%@.%@\", fromTabBarObj, toTabBarObj];\n    [ClientUserBehaviorLog sendLogWithLogobject:obj actionType:ClickAction];\n}\n\n- (HXTradeDetainAlertManager *)tradeDetainAlert {\n    if (!_tradeDetainAlert) {\n        _tradeDetainAlert = [[HXTradeDetainAlertManager alloc] init];\n    }\n    return _tradeDetainAlert;\n}\n\n\n@end\n\n","relevantFile":"","relevantFileList":[],"filePath":"HXTabBarControllerExBusiness.mm","template":"objective-cpp","multiRes":{"hipilot":"eger)selectIndex {\n    if (selectIndex < tabBar.viewControllers.count) { // 防止在viewControllers数组中间位置被移除","deepseek-chat-lite":"eger)selectIndex {","CodeQwen2.5-7B":"eger)selectIndex {","copilot":"        // iOS18.0在调用[UITabBarController selectedIndex]方法时，不会更新tabBar的hidd"}},{"prefix":"\n#import \"WTTradeSearchStockView.h\"\n#import \"HXSearchStockManager.h\"\n#import \"HXSearchStockList.h\"\n#import \"WTTradeSearchStockTextFieldView.h\"\n#import <ThirdBase/Masonry.h>\n#import <HXBase/CustomKeyboard.h>\n#import <HXBase/UIColor+Colours.h>\n#import \"WTSearchChicangViewController.h\"\n#import \"HXWTAccountManager.h\"\n#import \"CCChicangData.h\"\n#import \"HXStockMarketManager.h\"\n#import \"HXRZRQStockInfo.h\"\n#import <HXThemeVersion/ThemeVersionManager.h>\n#import \"WTTradeRepeatModel.h\"\n#import \"WTCloudSearchFailedManager.h\"\n#import \"WTTradeHQModel.h\"\n#import \"AMUIPublicProxy+CurveLine.h\"\n#import \"UIFont+HXFont.h\"\n#import <HXBase/UIColor+Colours.h>\n\n@interface WTTradeSearchStockView() <WTTradeSearchStockTextFieldViewDelegate,HXSearchStockListDelegate,UIGestureRecognizerDelegate>\n\n@property (nonatomic,strong) WTTradeSearchStockTextFieldView *stockInputView;\n\n@property (nonatomic,strong) HXSearchStockManager *searchManager;\n\n@property (nonatomic,strong) HXSearchStockList *resultList;\n\n@property (nonatomic,strong) CustomKeyboard *customKeyBoard;\n\n@property (nonatomic,strong) UIView *middleView;\n\n@property (nonatomic,strong) UILabel *titleLabel;\n\n@property (nonatomic,strong) UIButton *closeBtn;\n\n@property (nonatomic,strong) UIView *textFieldBackView;\n\n@property (nonatomic,strong) UIImageView *imageView;\n\n@property (nonatomic,assign) TradePageType pageType;\n\n@property (nonatomic,strong) UIActivityIndicatorView *activity;\n\n@property (nonatomic,strong) UILabel *nodataAlertTipLabel;\n\n@property (nonatomic,strong) UIView *nodataview;\n\n@property (nonatomic,strong) UIImageView *nodataImageView;\n\n@property (nonatomic, assign) BOOL isInput;    // 是否是输入\n\n@property (nonatomic, assign) BOOL isDelete;\n\n@property (nonatomic, assign) BOOL isNotUseChiCangData;\n\n@property (nonatomic,strong) UIButton *cancelButton;\n\n@property (nonatomic,strong) UIView *mainView;\n\n\n@end\n\n@implementation WTTradeSearchStockView\n\n- (id) initWithFrame:(CGRect)frame\n            withType:(TradePageType) type\n              isRzrq:(BOOL)isRzrq{\n    self = [super initWithFrame:frame];\n    if (self) {\n        self.backgroundColor = [UIColor colorWithRed:0 green:0 blue:0 alpha:0.6];\n        self.pageType       = type;\n        self.isRzrq         = isRzrq;\n        self.isDelete = NO;\n        self.isHQSearch = NO;\n        [self initSubComponent];\n        [self changeTheme];\n    }\n    return self;\n}\n\n- (void)initSubComponent{\n//    UIGestureRecognizer *tap = [[UIGestureRecognizer alloc] initWithTarget:self action:@selector(closeTheView)];\n//    [self addGestureRecognizer:tap];\n    self.frame = CGRectMake(0, 0, Screen_width, Screen_height);\n    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(closeTheView)];\n    tap.delegate = self;\n    [self addGestureRecognizer:tap];\n    [self addSubview:self.mainView];\n    [self bringSubviewToFront:self.mainView];\n    self.mainView.layer.cornerRadius = 12;\n    self.mainView.layer.maskedCorners = kCALayerMinXMinYCorner | kCALayerMaxXMinYCorner;\n    self.searchManager = [[HXSearchStockManager alloc] init];\n    self.resultList = [[HXSearchStockList alloc] initListWithFrameWithoutAddorDel:CGRectZero];\n    _resultList.listDelegate = self;\n    _resultList.showListRigthBtn = NO;\n    [_resultList showHistoryClearBtn:NO];\n    self.middleView = [[UIView alloc] initWithFrame:CGRectZero];\n    self.textFieldBackView = [[UIView alloc] initWithFrame:CGRectZero];\n    self.nodataAlertTipLabel = [[UILabel alloc] initWithFrame:CGRectZero];\n    self.nodataAlertTipLabel.text = @\"很抱歉，您搜索的股票不存在\";\n    self.nodataAlertTipLabel.textAlignment = NSTextAlignmentCenter;\n    self.nodataAlertTipLabel.font = [UIFont systemFontOfSize:14.0];\n    \n    self.stockInputView = [[WTTradeSearchStockTextFieldView alloc] init];\n    self.stockInputView.textFieldViewDelegate = self;\n    self.nodataview = [[UIView alloc] initWithFrame:CGRectZero];\n    self.nodataImageView = [[UIImageView alloc] initWithFrame:CGRectZero];\n    [self.mainView addSubview:_resultList];\n    [self.mainView addSubview:_stockInputView];\n    [self.mainView addSubview:_middleView];\n    [self.mainView addSubview:_nodataAlertTipLabel];\n\n    [self.mainView bringSubviewToFront:_stockInputView];\n    \n    [self.middleView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(_stockInputView.mas_bottom).offset(10);\n        make.left.right.equalTo(self.mainView);\n        make.height.equalTo(@35);\n    }];\n    [self.middleView addSubview:self.titleLabel];\n    [self.middleView setNormalBackgroundColor:BG_COLOR_LEVEL2_NORMAL nightBackgroundColor:BG_COLOR_LEVEL3_NIGHT];\n    [self.middleView changeTheme];\n    [self.resultList setNormalBackgroundColor:BG_COLOR_LEVEL2_NORMAL nightBackgroundColor:BG_COLOR_LEVEL3_NIGHT];\n    [self.resultList changeTheme];\n    [self.mainView addSubview:self.cancelButton];\n    [self.cancelButton mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.right.mas_equalTo(self.mainView.mas_right).offset(-10);\n        make.top.mas_equalTo(self.mainView.mas_top).offset(15.5);\n        make.left.mas_equalTo(self.stockInputView.mas_right).offset(10);\n        make.height.mas_equalTo(36.5);\n    }];\n    [_titleLabel mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.equalTo(_middleView.mas_left).offset(16);\n        make.top.equalTo(_middleView.mas_top).offset(6);\n        make.width.lessThanOrEqualTo(@140);\n        make.height.equalTo(@22.5);\n    }];\n    self.titleLabel.text = @\"搜索结果\";\n\n    [_resultList mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(_middleView.mas_bottom);\n        make.left.right.equalTo(self);\n        make.bottom.equalTo(self.mas_bottom);\n    }];\n    [self.mainView addSubview:_nodataview];\n    [self bringSubviewToFront:_nodataview];\n    [_nodataview mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(_resultList.mas_top).offset(45);\n        make.width.equalTo(_resultList.mas_width);\n        make.centerX.equalTo(_resultList.mas_centerX);\n        make.bottom.equalTo(_resultList.mas_bottom);\n    }];\n    [_nodataview addSubview:_nodataImageView];\n    [self.nodataview setNormalBackgroundColor:BG_COLOR_LEVEL2_NORMAL nightBackgroundColor:BG_COLOR_LEVEL3_NIGHT];\n    [self.nodataview changeTheme];\n    [_nodataImageView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.width.height.equalTo(@86);\n        make.top.equalTo(_nodataview.mas_top);\n        make.centerX.equalTo(_nodataview.mas_centerX);\n    }];\n    [_nodataview addSubview:_nodataAlertTipLabel];\n    [_nodataAlertTipLabel mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.centerX.equalTo(_nodataview.mas_centerX);\n        make.top.equalTo(_nodataImageView.mas_bottom).offset(16);\n        make.height.equalTo(@14);\n        make.width.equalTo(_nodataview.mas_width);\n    }];\n    _activity = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];\n    _activity.hidden = YES;\n    [self.mainView addSubview:_activity];\n    [_activity mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.centerX.equalTo(self);\n        make.centerY.equalTo(self);\n        make.width.equalTo(@(_activity.frame.size.width));\n        make.height.equalTo(@(_activity.frame.size.height));\n    }];\n    \n}\n\n- (void)showWithStockCode:(NSString *)stockCode {\n    if (_bgView) {\n        [_bgView addSubview:self];\n        [_bgView bringSubviewToFront:self];\n        [self appearWithSearchStock:stockCode fromView:nil];\n    }\n}\n\n\n- (void)setIsQH:(BOOL)isQH {\n    _isQH = isQH;\n    self.stockInputView.placeholder = isQH ? @\"   期货代码/名称/简拼\" : @\"   股票代码/简拼\";\n    self.stockInputView.accessibilityIdentifier = isQH ? @\"期货代码/名称/简拼\" : @\"股票代码/简拼\";\n}\n\n- (void)appearAndSearchStock:(NSString *)stockCode{\n ","infill":")gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch {\n    if ([touch.view isDescendantOfView:self.mainView] ) {\n        return NO;\n    }\n    return YES;\n}\n\n\n#pragma mark lazy\n\n- (UI","suffix":"Button *)cancelButton {\n    if (!_cancelButton) {\n        _cancelButton = [[UIButton alloc] initWithFrame:CGRectZero];\n        [_cancelButton setTitle:@\"取消\" forState:UIControlStateNormal];\n        [_cancelButton addTarget:self action:@selector(closeTheView) forControlEvents:UIControlEventTouchUpInside];\n        _cancelButton.titleLabel.font = [UIFont hxf_pfscRegular:16];\n        [_cancelButton setTitleColor:TEXT_COLOR_LEVEL1_NORMAL state:UIControlStateNormal theme:ThemeVersionNormal];\n        [_cancelButton setTitleColor:TEXT_COLOR_LEVEL1_NIGHT state:UIControlStateNormal theme:ThemeVersionNight];\n        _cancelButton.contentEdgeInsets = UIEdgeInsetsMake(7,6,7,6);\n        [_cancelButton changeTheme];\n    }\n    return _cancelButton;\n}\n\n- (UILabel *)titleLabel {\n    if (!_titleLabel) {\n        _titleLabel = [[UILabel alloc] init];\n        _titleLabel.font = [UIFont hxf_pfscMedium:16];\n        [_titleLabel setTextColor:TEXT_COLOR_LEVEL1_NORMAL theme:ThemeVersionNormal];\n        [_titleLabel setTextColor:TEXT_COLOR_LEVEL1_NIGHT theme:ThemeVersionNight];\n        [_titleLabel changeTheme];\n    }\n    return _titleLabel;\n}\n\n- (UIView *)mainView {\n    if (!_mainView) {\n        _mainView = [[UIView alloc] initWithFrame:CGRectMake(0, 137, Screen_width, Screen_height - 137)];\n        _mainView.backgroundColor = FOREGROUND_COLOR_NORMAL;\n        [_mainView setNormalBackgroundColor:FOREGROUND_COLOR_NORMAL nightBackgroundColor:BG_COLOR_LEVEL3_NIGHT];\n        [_mainView changeTheme];\n    }\n    return _mainView;\n}\n\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"WTTradeSearchStockView.mm","template":"objective-cpp","multiRes":{"hipilot":"[self appearWithSearchStock:stockCode fromView:nil];\n}\n\n- (UI","deepseek-chat-lite":"   if (_bgView) {","CodeQwen2.5-7B":"   [self appearWithSearchStock:stockCode fromView:nil];","copilot":")gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch {\n    if ([touch.view isDescendantOfView:self.mainView] ) {\n        return NO;\n    }\n    return YES;\n}\n\n\n#pragma mark lazy\n\n- (UI"}},{"prefix":"\n#import \"NewChicang.h\"\n#import \"AM_UI_VarKeyString.h\"\n#import \"WeiTuoClickedNavigationItem.h\"\n#import <HXBase/PageView.h>\n#import <HXBase/ViewControllerEx.h>\n#import \"HXWTAccountManager.h\"\n#import \"WTAccountInfor.h\"\n#import <HXBase/AMUITabFm.h>\n#import \"EQAppFrame.h\"\n#import \"EQTools.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import <HXTool/UIView+Uilities.h>\n#import \"ClientUserBehaviorLog.h\"\n#import <ThirdBase/Masonry.h>\n#import <HXRouterCenter/HXBaseSubject.h>\n#import \"SecuritySDKManager.h\"\n#import \"CBASDefines.h\"\n#import \"WTNotificationKeyDefine.h\"\n#import \"HXChiCangFenShiManager.h\"\n// #import <WTTradeModule/WTTradePageControl.h>\n#im","infill":"port <WTTradeModule/WTTradePageControl.h\n\n#d","suffix":"efine CHI_CANG_SCROLL_TIP @\"ChiCangCangWeiScrollTip\"\n\nextern CEQAppFrame* EQGetAppFrame();\n\ntypedef NS_ENUM(NSUInteger, WTChicangState) {\n    WTChicangStateNone,\n    WTChicangStateOnlyRMB,\n    WTChicangStateGGT,\n    WTChicangStateGGTAndUS,\n    WTChicangStateGGTAndHK,\n    WTChicangStateUS,\n    WTChicangStateHK,\n    WTChicangStateUSAndHK,\n    WTChicangStateAll\n};\n\ntypedef NSString * WTChicangAssetType;\nstatic WTChicangAssetType const WTChicangAssetTypeRMB = @\"RMB\";\nstatic WTChicangAssetType const WTChicangAssetTypeGGT = @\"GGT\";\nstatic WTChicangAssetType const WTChicangAssetTypeUS = @\"US\";\nstatic WTChicangAssetType const WTChicangAssetTypeHK = @\"HK\";\n\n@interface NewChicang () <WTQuitViewModelDelegate, WTChiCangShowStatusDelegate , WTGGTChiCangShowStatusDelegate>\n\n@property (nonatomic, strong) WtGGTChicang *ggtChicang;\n@property (nonatomic, copy) NSString *zjzh; //前面资金账号\n@property (nonatomic, copy) NSString *yybId;\n\n@property (nonatomic, strong) NSArray *typesArray;  //存储当前显示的资金栏类型\n\n@property (nonatomic, assign) BOOL chicangFenShiCBASSended;//控制分时埋点发送次数;\n\n@property (nonatomic, assign) int curIndex;\n\n/// 进入调用当前选中类型次数\n@property (nonatomic, assign) int changCurIndexCount;\n\n@property (nonatomic, strong) WTTradePageControl *pageControl;\n\n@property (nonatomic, assign) BOOL isFirstAppeared;\n\n@end\n\n@implementation NewChicang\n\n- (void)dealloc\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    [[WTQuitViewModel shareInstance] unRegisterObject:self];\n    [[HXWTAccountManager sharedInstance] removeAccountChangeObserver:self];\n    \n    //JIRA-11798 尝试修复voiceOver在 iOS 9 上的崩溃\n    _scrollview.isAccessibilityElement = NO;\n    _scrollview.delegate = nil;\n    \n    if (!IS_SYSTEM_BEYOND_IOS10) {\n        UIScrollView *sv = _scrollview;\n        dispatch_async(dispatch_get_main_queue(), ^{\n            sv.tag = 20000;\n        });\n    }\n\n}\n\n- (void)onFinishInflate\n{\n    [[SecuritySDKManager shareInstance] quickCheckWithClass:[self class] shouldExit:YES completion:nil];\n    \n    self.backgroundColor = BACKGROUND_COLOR_NORMAL;\n    self.autoresizesSubviews = NO;\n    \n    [self initSubViews];\n    [self autoLayoutSubViews];\n    \n    self.curIndex = -1;\n    \n    [_rmbChicang onFinishInflate];\n    [_ggtChicang onFinishInflate];\n    [_gbChicang onFinishInflate];\n    [_dollarChicang onFinishInflate];\n\n    [_rmbChicang setPageId:PAGE_CHICHANG_ID];\n    [_ggtChicang setPageId:PAGE_GanGuTong_TableList];\n    [_dollarChicang setPageId:PAGE_DO_CHICANG];\n    [_gbChicang setPageId:PAGE_GB_CHICANG];\n    \n    [[WTQuitViewModel shareInstance] registerObject:self];\n    [[HXWTAccountManager sharedInstance] addAccountChangeObserver:self];\n    \n    _rmbChicang.delegate = self;\n    _ggtChicang.delegate = self;\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(clearData) name:WT_LOGIN_FIRST object:nil];\n}\n\n- (void)initSubViews\n{\n    _scrollview.pagingEnabled = YES;\n    _scrollview.showsHorizontalScrollIndicator = NO;\n    _scrollview.contentSize = CGSizeMake([EQTools getRealFloat:1280.f], [self heightForChicangView]);\n    \n    _ggtChicang = [[WtGGTChicang alloc] initWithFrame:CGRectMake(0.f, 0.f, Screen_width, _scrollview.height)];\n    _ggtChicang.clipsToBounds = YES;\n    [_scrollview addSubview:_ggtChicang];\n    \n    WTPageConfig *config = [[WTPageConfig alloc] init];\n    self.pageControl = [[WTTradePageControl alloc] initWithFrame:CGRectZero config:config];\n    self.pageControl.numberOfPages = [self numberOfPage];\n    self.pageControl.userInteractionEnabled = NO;\n    self.pageControl.currentPage = 0;\n    [self addSubview:self.pageControl];\n    \n    [self.pageControl mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.mas_equalTo(self.mas_bottom).mas_offset(-11.f);\n        make.height.mas_equalTo(5.f);\n        make.centerX.equalTo(self);\n    }];\n    [self setupTypeArrayAndSubviews];\n}\n\n- (void)autoLayoutSubViews\n{\n    [_scrollview mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.left.mas_equalTo(0.f);\n        make.top.mas_equalTo(0.f);\n        make.width.mas_equalTo(Screen_width);\n        make.height.mas_equalTo([self heightForChicangView]);\n    }];\n    \n    [_rmbChicang mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.left.mas_equalTo(0.f);\n        make.top.mas_equalTo(0.f);\n        make.width.equalTo(_scrollview.mas_width);\n        make.height.equalTo(_scrollview.mas_height);\n    }];\n    [_ggtChicang mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.left.equalTo(_rmbChicang.mas_right);\n        make.top.mas_equalTo(0.f);\n        make.width.equalTo(_scrollview.mas_width);\n        make.height.equalTo(_scrollview.mas_height);\n    }];\n    \n    MASViewAttribute *dollarChicang_left = _ggtChicang.mas_right;\n    BOOL dontHasGGT = ![_typesArray containsObject:WTChicangAssetTypeGGT];\n    if (dontHasGGT) {\n        dollarChicang_left = _rmbChicang.mas_right;\n    }\n    [_dollarChicang mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.left.equalTo(dollarChicang_left);\n        make.top.mas_equalTo(0.f);\n        make.width.equalTo(_scrollview.mas_width);\n        make.height.equalTo(_scrollview.mas_height);\n    }];\n    \n    MASViewAttribute *gbChicang_left = _dollarChicang.mas_right;\n    BOOL dontHasUS = ![_typesArray containsObject:WTChicangAssetTypeUS];\n    BOOL hasGGT = !dontHasGGT;\n    if (dontHasUS && hasGGT) {\n        gbChicang_left = _ggtChicang.mas_right;\n    } else if (dontHasUS && dontHasGGT) {\n        gbChicang_left = _rmbChicang.mas_right;\n    }\n    [_gbChicang mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.left.equalTo(gbChicang_left);\n        make.top.mas_equalTo(0.f);\n        make.width.equalTo(_scrollview.mas_width);\n        make.height.equalTo(_scrollview.mas_height);\n    }];\n}\n\n- (void)willAppear\n{\n    [self changeTheme];\n    [self.ggtChicang willAppear];\n    \n    if(self.isFirstAppeared){\n        [_rmbChicang cleanTheValue];\n        [_dollarChicang cleanTheValue];\n        [_gbChicang cleanTheValue];\n    }\n    self.isFirstAppeared = YES;\n    \n    int index = (int)_pageControl.currentPage;\n    self.curIndex = index;\n    [_scrollview setContentOffset:CGPointMake(_scrollview.frame.size.width * index, 0)];\n    [[self currentPage] willAppear];\n}\n\n- (void)didAppear\n{\n    [self didAppearZiCanLan];\n    [[self currentPage] didAppear];\n    [ClientUserBehaviorLog initializeViewLogAttributes:self marketId:nil];\n    [ClientUserBehaviorLog sendLogWithLogobject:WT_CBAS_OBJ_CHICANG_AGU actionType:NoneAction];\n    //#jira-25688 补充持仓分时开关状态埋点; 每次初始化只发一次\n    if (!_chicangFenShiCBASSended) {\n        NSString *logObj = [HXChiCangFenShiManager isOpenChiCangFenShi]?@\"hqopen\":@\"hqclose\";\n        [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_CHICANG_AGU, logObj) actionType:NoneAction];\n        _chicangFenShiCBASSended = YES;\n    }\n}\n\n- (void)requestData:(BOOL)wait\n{\n    int index = (int)_pageControl.currentPage;\n    [[self currentPage] requestData:wait];\n    self.curIndex = index;\n}\n\n#pragma mark - HXObserverProtocol\n- (void)observedChange:(HXSubjectInfo *)context\n{\n    [self didAppearZiCanLan];\n}\n\n#pragma mark - WTQuitViewModelDelegate\n- (void)clearData:(WTQuitViewModel *)quitViewModel\n{\n    [self clearData];\n}\n\n- (void)willDisappear\n{\n    [_rmbChicang willDisappear];\n    [_ggtChicang willDisappear];\n    [_dollarChicang willDisappear];\n    [_gbChicang willDisappear];\n    \n    if (self.page._titleItem && [self.page._titleItem isKindOfClass:[WeiTuoClickedNavigationItem class]]) {\n        WeiTuoClickedNavigationItem *titleItem = (WeiTuoClickedNavigationItem*)self.page._titleItem;\n        [titleItem hideAccountListView];\n    }\n}\n\n- (void)didDisappear\n{\n    [_rmbChicang didDisappear];\n    [_ggtChicang didDisappear];\n    [_dollarChicang didDisappear];\n    [_gbChicang didDisappear];\n}\n\n- (CompView *)currentPage\n{\n    return (CompView *)[self pageForIndex:_pageControl.currentPage];\n}\n\n- (void)setCangWeiVa","relevantFile":"","relevantFileList":[],"filePath":"NewChicang.mm","template":"objective-cpp","multiRes":{"hipilot":"port \"WTPageConfig.h\"\n#d","deepseek-chat-lite":"port \"WTTradePageControl.h\"","CodeQwen2.5-7B":"port \"WTTradePageControl.h\"","copilot":"port <WTTradeModule/WTTradePageControl.h\n\n#d"}},{"prefix":"\n#import \"XGSGDataProvider.h\"\n#import \"XGSGNewStockModel.h\"\n#import \"XGSGNewStockCache.h\"\n#import \"XGSGCacheModelAdapter.h\"\n#import \"XGSGDebugKeyDefine.h\"\n#import \"XGSGAssertMarco.h\"\n#import \"XGSGDataProvider+Debug.h\"\n#import \"XGSGBaseDataContext.h\"\n\n#import <WTTradeModule/WTSaveIdentifyTool.h>\n#import <WTTradeModule/WTBaseAccountManager.h>\n#import <WTTradeModule/TradeActionDefine.h>\n\n#import <EQFoundation/EQMobileProtocalIndependentDefine.h>\n#import <HXModuleService/HXModuleService.h>\n#import <HXModuleServiceManage/WTLoginUtilServiceProtocol.h>\n#import <HXCommunicateMiddleware/HXSocketFetcher.h>\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXStuffDataModel/StuffTextModel.h>\n\n#import <objc/runtime.h>\n\nFOUNDATION_IMPORT NSString * const kXGSGXinGu100MD5Key;\n\nNSString * const kXGSGRequestObserverIdentifier = @\"kXGSGRequestObserverIdentifier\";\n\n@interface XGSGRequestBaseInfo()\n\n@property(nonatomic, strong) NSMutableDictionary<NSString *, NSMutableArray<XGSGResponseBlock> *> *requestObservers;\n\n@end\n\n@implementation XGSGRequestBaseInfo\n\n+ (instancetype)infoWithType:(XGSGRequestDataType)type normalProtocolID:(int)normalProtocolID rzrqProtocolID:(int)rzrqProtocolID params:(NSDictionary *)params responseModelClass:(Class)responseModelClass {\n    XGSGRequestBaseInfo *info = [[XGSGRequestBaseInfo alloc] init];\n    info.type = type;\n    info.normalProtocolID = normalProtocolID;\n    info.rzrqProtocolID = rzrqProtocolID;\n    info.params = params;\n    info.responseModelClass = responseModelClass;\n    info.requestObservers = [NSMutableDictionary dictionary];\n    return info;\n}\n\n@end\n\n@interface XGSGDataProvider()\n\n// 注册的请求类型 key: 请求类型 value: 协议id 参数 等信息\n@property(nonatomic, class, strong, readonly) NSMutableDictionary<NSNumber *, XGSGRequestBaseInfo *> *registedRequestInfos;\n\n@property(nonatomic, class, strong, readonly) NSMutableDictionary<NSString *, XGSGDataProvider *> *dataProviderHolder;\n\n@property(nonatomic, copy) NSString *identifier;\n\n@property(nonatomic, class, assign, readonly) NSInteger autoIncrementNumber;\n\n@end\n\n@implementation XGSGDataProvider\n\n+ (void)initialize {\n    // 查 新股/债信息\n    [XGSGDataProvider.registedRequestInfos setObject:[XGSGRequestBaseInfo infoWithType:XGSGRequestDataTypeIPOInfo\n                                                             normalProtocolID:KTradeActionProtocalID_XGSG_IPOInfo\n                                                               rzrqProtocolID:KTradeActionProtocalID_XGSG_RZRQ_IPOInfo\n                                                                       params:@{}\n                                                           responseModelClass:[XGSGIPOInfoModel class]]\n                                     forKey:@(XGSGRequestDataTypeIPOInfo)];\n    // 查 当日中签\n    [XGSGDataProvider.registedRequestInfos setObject:[XGSGRequestBaseInfo infoWithType:XGSGRequestDataTypeZhongQianToday\n                                                             normalProtocolID:KTradeActionProtocalID_XGSG_ZhongQian\n                                                               rzrqProtocolID:KTradeActionProtocalID_XGSG_RZRQ_ZhongQian\n                                                                       params:@{ @\"reqtype\": @\"196608\", @\"queryType\" : @\"today\" }\n                                                           responseModelClass:[XGSGIPOInfoModel class]]\n                                     forKey:@(XGSGRequestDataTypeZhongQianToday)];\n    // 查 历史中签\n    [XGSGDataProvider.registedRequestInfos setObject:[XGSGRequestBaseInfo infoWithType:XGSGRequestDataTypeZhongQianHistory\n                                                             normalProtocolID:KTradeActionProtocalID_XGSG_ZhongQian\n                                                               rzrqProtocolID:KTradeActionProtocalID_XGSG_RZRQ_ZhongQian\n                                                                       params:@{ @\"reqtype\": @\"196608\", @\"queryType\" : @\"history\" }\n                                                           responseModelClass:[XGSGIPOInfoModel class]]\n                                     forKey:@(XGSGRequestDataTypeZhongQianHistory)];\n    // 查 额度\n    [XGSGDataProvider.registedRequestInfos setObject:[XGSGRequestBaseInfo infoWithType:XGSGRequestDataTypeQuota\n                                                             normalProtocolID:KTradeActionProtocalID_XGSG_Quota\n                                                               rzrqProtocolID:KTradeActionProtocalID_XGSG_RZRQ_Quota\n                                                                       params:@{}\n                                                           responseModelClass:[XGSGQuotaModel class]]\n                                     forKey:@(XGSGRequestDataTypeQuota)];\n}\n\n+ (NSMutableDictionary<NSString *,XGSGDataProvider *> *)dataProviderHolder {\n    static dispatch_once_t onceToken;\n    static NSMutableDictionary *_dataProviderHolder;\n    dispatch_once(&onceToken, ^{\n        _dataProviderHolder = [NSMutableDictionary dictionary];\n    });\n    return _dataProviderHolder;\n}\n\n+ (NSMutableDictionary<NSNumber *, XGSGRequestBaseInfo *> *)registedRequestInfos {\n    static dispatch_once_t onceToken;\n    static NSMutableDictionary *_registedRequestInfos;\n    dispatch_once(&onceToken, ^{\n        _registedRequestInfos = [NSMutableDictionary dictionary];\n    });\n    return _registedRequestInfos;\n}\n\n+ (NSInteger)autoIncrementNumber {\n    static NSInteger number = 0;\n    return number++;\n}\n\n+ (instancetype)provider {\n    XGSGDataProvider *provider = [[XGSGDataProvider alloc] init];\n    if (provider) {\n        provider.identifier = [NSString stringWithFormat:@\"%ld\", XGSGDataProvider.autoIncrementNumber];\n    }\n    return provider;\n}\n\n/// @return 异步返回 0，同步返回 1\n- (NSInteger)fetchSingleInfoWithType:(XGSGRequestDataType)type useCache:(BOOL)useCache useNetwork:(BOOL)useNetwork completion:(XGSGResponseBlock)completion {\n    NSString *msg = [NSString stringWithFormat:@\"如需组合 XGSGRequestDataType 请使用数组，而不要使用按位或。type=%lu\", type];\n    XGSGAssert((type & (type - 1)) == 0, msg);\n    \n    XGSGNewStockCache *cache = [XGSGNewStockCache cacheWithWTAccount:[[WTBaseAccountManager sharedInstance] getCurAccountInfor]];\n    id<XGSGDataModelProtocol> model;\n    if (useCache) {\n        model = cache.isValid ? [[XGSGCacheModelAdapter shared] modelFromDataContext:cache type:type] : nil;\n    }\n    \n    if (model.isValid) {\n        // 从缓存中取数据\n        WTAMLogInfo(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"缓存有效, 将从缓存获取新股数据, type=%lu\", type);\n        completion(type, model, YES, nil, YES);\n        return 1;\n    } else if (useNetwork) {\n        WTAMLogInfo(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"缓存无效, 将从请求获取新股数据, type=%lu, useCache=%d\", type, useCache);\n        [self requestInfoWithType:type cache:cache completion:completion];\n        return 0;\n    } else {\n        // 能走到这说明 缓存无效 且 不从网络请求获取\n        WTAMLogDebug(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"本次 fetch 不从网络请求获取新股数据, type=%lu\", type);\n        HXLogClientInfo(@\"cache_invalid_no_use_network\", @\"wt_new_stock_\");\n        completion(type, nil, NO, nil, YES);\n        return 1;\n    }\n}\n\n+ (NSInteger)fetchDataWithTypes:(NSArray<NSNumber *> *)types strategy:(XGSGDataFetchStrategy)strategy completion:(XGSGDataFetchingResponseBlock)completions {\n    XGSGDataProvider *dataProvider = [XGSGDataProvider provider];\n    [XGSGDataProvider.dataProviderHolder setObject:dataProvider forKey:dataProvider.identifier];\n    return [dataProvider fetchDataWithTypes:types strategy:strategy completion:completions];\n}\n\n- (NSInteger)fetchDataWithTypes:(NSArray<NSNumber *> *)types strategy:(XGSGDataFetchStrategy)strategy completion:(XGSGDataFetchingResponseBlock)completion {\n    NSAssert(completion != nil, @\"completions 不能为空\");\n    __block NSInteger syncCount = 0;\n    __block NSInteger asyncCount = 0;\n    __block XGSGBas","infill":"// 通用校验1: 请求前后账号不一致\n   ","suffix":" if (![[WTBaseAccountManager sharedInstance] judgeAccount:account isEqualTo:currentAccount]) {\n        // WTAMLogError(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"请求前后账号不一致: %@_%@\", [currentAccount getHideAccount], [account getHideAccount]);\n        WTAMLogError(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"请求前后账号不一致: %@_%@\", [currentAccount getHideAccount], [account getHideAccount]\n        HXLogClientInfo(@\"fetchxginfo_accexp_agu_unmatch_account\", @\"wt_new_stock_\");\n        return NO;\n    }\n    \n    \n    // 通用校验2: 请求报错 或 数据格式异常\n    if (error || data.modelType != StuffModelTypeText || ((StuffTextModel *)data).subModelType != StuffModelTypeJSON) {\n        WTAMLogError(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"应答报错或数据格式异常: %@, type=%lu\", error, type);\n        HXLogClientInfo(@\"fetchxginfo_accexp_agu_req_error\", @\"wt_new_stock_\");\n        return NO;\n    }\n    return YES;\n}\n\n@end\n\n","relevantFile":"","relevantFileList":[],"filePath":"XGSGDataProvider.mm","template":"objective-cpp","multiRes":{"hipilot":"eDataContext *dataContext = [[XGSGBaseDataContext alloc] initWithStrategy:strategy];\n    for (NSNumber *type in types) {\n        NSInteger code = [self fetchSingleInfoWithType:type useCache:YES useNetwork:YES completion:^(","deepseek-chat-lite":"eDataContext *dataContext = nil;","CodeQwen2.5-7B":"eDataContext *context = nil;","copilot":"// 通用校验1: 请求前后账号不一致\n   "}},{"prefix":"\n#import \"XGSGDataProvider.h\"\n#import \"XGSGNewStockModel.h\"\n#import \"XGSGNewStockCache.h\"\n#import \"XGSGCacheModelAdapter.h\"\n#import \"XGSGDebugKeyDefine.h\"\n#import \"XGSGAssertMarco.h\"\n#import \"XGSGDataProvider+Debug.h\"\n#import \"XGSGBaseDataContext.h\"\n\n#import <WTTradeModule/WTSaveIdentifyTool.h>\n#import <WTTradeModule/WTBaseAccountManager.h>\n#import <WTTradeModule/TradeActionDefine.h>\n\n#import <EQFoundation/EQMobileProtocalIndependentDefine.h>\n#import <HXModuleService/HXModuleService.h>\n#import <HXModuleServiceManage/WTLoginUtilServiceProtocol.h>\n#import <HXCommunicateMiddleware/HXSocketFetcher.h>\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXStuffDataModel/StuffTextModel.h>\n\n#import <objc/runtime.h>\n\nFOUNDATION_IMPORT NSString * const kXGSGXinGu100MD5Key;\n\nNSString * const kXGSGRequestObserverIdentifier = @\"kXGSGRequestObserverIdentifier\";\n\n@interface XGSGRequestBaseInfo()\n\n@property(nonatomic, strong) NSMutableDictionary<NSString *, NSMutableArray<XGSGResponseBlock> *> *requestObservers;\n\n@end\n\n@implementation XGSGRequestBaseInfo\n\n+ (instancetype)infoWithType:(XGSGRequestDataType)type normalProtocolID:(int)normalProtocolID rzrqProtocolID:(int)rzrqProtocolID params:(NSDictionary *)params responseModelClass:(Class)responseModelClass {\n    XGSGRequestBaseInfo *info = [[XGSGRequestBaseInfo alloc] init];\n    info.type = type;\n    info.normalProtocolID = normalProtocolID;\n    info.rzrqProtocolID = rzrqProtocolID;\n    info.params = params;\n    info.responseModelClass = responseModelClass;\n    info.requestObservers = [NSMutableDictionary dictionary];\n    return info;\n}\n\n@end\n\n@interface XGSGDataProvider()\n\n// 注册的请求类型 key: 请求类型 value: 协议id 参数 等信息\n@property(nonatomic, class, strong, readonly) NSMutableDictionary<NSNumber *, XGSGRequestBaseInfo *> *registedRequestInfos;\n\n@property(nonatomic, class, strong, readonly) NSMutableDictionary<NSString *, XGSGDataProvider *> *dataProviderHolder;\n\n@property(nonatomic, copy) NSString *identifier;\n\n@property(nonatomic, class, assign, readonly) NSInteger autoIncrementNumber;\n\n@end\n\n@implementation XGSGDataProvider\n\n+ (void)initialize {\n    // 查 新股/债信息\n    [XGSGDataProvider.registedRequestInfos setObject:[XGSGRequestBaseInfo infoWithType:XGSGRequestDataTypeIPOInfo\n                                                             normalProtocolID:KTradeActionProtocalID_XGSG_IPOInfo\n                                                               rzrqProtocolID:KTradeActionProtocalID_XGSG_RZRQ_IPOInfo\n                                                                       params:@{}\n                                                           responseModelClass:[XGSGIPOInfoModel class]]\n                                     forKey:@(XGSGRequestDataTypeIPOInfo)];\n    // 查 当日中签\n    [XGSGDataProvider.registedRequestInfos setObject:[XGSGRequestBaseInfo infoWithType:XGSGRequestDataTypeZhongQianToday\n                                                             normalProtocolID:KTradeActionProtocalID_XGSG_ZhongQian\n                                                               rzrqProtocolID:KTradeActionProtocalID_XGSG_RZRQ_ZhongQian\n                                                                       params:@{ @\"reqtype\": @\"196608\", @\"queryType\" : @\"today\" }\n                                                           responseModelClass:[XGSGIPOInfoModel class]]\n                                     forKey:@(XGSGRequestDataTypeZhongQianToday)];\n    // 查 历史中签\n    [XGSGDataProvider.registedRequestInfos setObject:[XGSGRequestBaseInfo infoWithType:XGSGRequestDataTypeZhongQianHistory\n                                                             normalProtocolID:KTradeActionProtocalID_XGSG_ZhongQian\n                                                               rzrqProtocolID:KTradeActionProtocalID_XGSG_RZRQ_ZhongQian\n                                                                       params:@{ @\"reqtype\": @\"196608\", @\"queryType\" : @\"history\" }\n                                                           responseModelClass:[XGSGIPOInfoModel class]]\n                                     forKey:@(XGSGRequestDataTypeZhongQianHistory)];\n    // 查 额度\n    [XGSGDataProvider.registedRequestInfos setObject:[XGSGRequestBaseInfo infoWithType:XGSGRequestDataTypeQuota\n                                                             normalProtocolID:KTradeActionProtocalID_XGSG_Quota\n                                                               rzrqProtocolID:KTradeActionProtocalID_XGSG_RZRQ_Quota\n                                                                       params:@{}\n                                                           responseModelClass:[XGSGQuotaModel class]]\n                                     forKey:@(XGSGRequestDataTypeQuota)];\n}\n\n+ (NSMutableDictionary<NSString *,XGSGDataProvider *> *)dataProviderHolder {\n    static dispatch_once_t onceToken;\n    static NSMutableDictionary *_dataProviderHolder;\n    dispatch_once(&onceToken, ^{\n        _dataProviderHolder = [NSMutableDictionary dictionary];\n    });\n    return _dataProviderHolder;\n}\n\n+ (NSMutableDictionary<NSNumber *, XGSGRequestBaseInfo *> *)registedRequestInfos {\n    static dispatch_once_t onceToken;\n    static NSMutableDictionary *_registedRequestInfos;\n    dispatch_once(&onceToken, ^{\n        _registedRequestInfos = [NSMutableDictionary dictionary];\n    });\n    return _registedRequestInfos;\n}\n\n+ (NSInteger)autoIncrementNumber {\n    static NSInteger number = 0;\n    return number++;\n}\n\n+ (instancetype)provider {\n    XGSGDataProvider *provider = [[XGSGDataProvider alloc] init];\n    if (provider) {\n        provider.identifier = [NSString stringWithFormat:@\"%ld\", XGSGDataProvider.autoIncrementNumber];\n    }\n    return provider;\n}\n\n/// @return 异步返回 0，同步返回 1\n- (NSInteger)fetchSingleInfoWithType:(XGSGRequestDataType)type useCache:(BOOL)useCache useNetwork:(BOOL)useNetwork completion:(XGSGResponseBlock)completion {\n    NSString *msg = [NSString stringWithFormat:@\"如需组合 XGSGRequestDataType 请使用数组，而不要使用按位或。type=%lu\", type];\n    XGSGAssert((type & (type - 1)) == 0, msg);\n    \n    XGSGNewStockCache *cache = [XGSGNewStockCache cacheWithWTAccount:[[WTBaseAccountManager sharedInstance] getCurAccountInfor]];\n    id<XGSGDataModelProtocol> model;\n    if (useCache) {\n        model = cache.isValid ? [[XGSGCacheModelAdapter shared] modelFromDataContext:cache type:type] : nil;\n    }\n    \n    if (model.isValid) {\n        // 从缓存中取数据\n        WTAMLogInfo(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"缓存有效, 将从缓存获取新股数据, type=%lu\", type);\n        completion(type, model, YES, nil, YES);\n        return 1;\n    } else if (useNetwork) {\n        WTAMLogInfo(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"缓存无效, 将从请求获取新股数据, type=%lu, useCache=%d\", type, useCache);\n        [self requestInfoWithType:type cache:cache completion:completion];\n        return 0;\n    } else {\n        // 能走到这说明 缓存无效 且 不从网络请求获取\n        WTAMLogDebug(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"本次 fetch 不从网络请求获取新股数据, type=%lu\", type);\n        HXLogClientInfo(@\"cache_invalid_no_use_network\", @\"wt_new_stock_\");\n        completion(type, nil, NO, nil, YES);\n        return 1;\n    }\n}\n\n+ (NSInteger)fetchDataWithTypes:(NSArray<NSNumber *> *)types strategy:(XGSGDataFetchStrategy)strategy completion:(XGSGDataFetchingResponseBlock)completions {\n    XGSGDataProvider *dataProvider = [XGSGDataProvider provider];\n    [XGSGDataProvider.dataProviderHolder setObject:dataProvider forKey:dataProvider.identifier];\n    return [dataProvider fetchDataWithTypes:types strategy:strategy completion:completions];\n}\n\n- (NSInteger)fetchDataWithTypes:(NSArray<NSNumber *> *)types strategy:(XGSGDataFetchStrategy)strategy completion:(XGSGDataFetchingResponseBlock)completion {\n    NSAssert(completion != nil, @\"completions 不能为空\");\n    __block NSInteger callBackCount = 0;\n    __block XGSGBaseDataContext *resultModel = [[XGSGB","infill":"DataWithTypes:(NSArray<NSNumber *> *)types strategy:(XGSGDataFetchStrategy)strategy {\n    __block XGSGBaseDataContext *resultModel = [[XGSGBaseDataContext alloc] init];\n    dispatch_group_t group = dispatch_group_create();\n    for (NSNumber *typeNumber in types) {\n        XGSGRequestDataType type = (XGSGRequestDataType)typeNumber.unsignedIntegerValue;\n\n        [self fetchSingleInfoWithType:type\n                             useCache:strategy & XGSGDataFetchStrategyUseCache\n                           useNetwork:strategy & XGSGDataFetchStrategyUseNetwork\n                           completion:^(XGSGRequestDataType type, id<XGSGDataModelProtocol>  _Nullable data, BOOL isSuccess, NSError * _Nullable error, BOOL isSync) {\n            dispatch_group_leave(group);\n            if (isSuccess) {\n                [resultModel addData:data type:type];\n            }\n        }];\n    }\n\n    return resultModel;\n}\n\n- (void)requestInfoWithType:(XGSGRequestDataType)type cache:(XGSGNewStockCache *)cache completion:(XGSGResponseBlock)compl","suffix":"etion  {\n    id<WTBaseAccountProtocol> accountBeforeRequesting = [[WTBaseAccountManager sharedInstance] getCurAccountInfor];\n    // 相同账号 相同类型的新股请求 不必重复发\n    BOOL needSendRequest = [self addRequestObserverWithAccount:accountBeforeRequesting type:type block:completion];\n    // 不需要发请求时 将回调加入观察队列 等到请求回来的时候一起回调出去\n    if (!needSendRequest) {\n        return;\n    }\n    \n    HXWTSocketRequest *request = [self requestWithType:type isRZRQ:accountBeforeRequesting.isRZRQ];\n    request.timeoutInterval = 20.0;\n    WeakObj(self);\n    HXSocketFetcher *fetcher = [HXSocketFetcher fetcherWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        [selfWeak finishRequestWithData:data error:error type:type accountBeforeRequesting:accountBeforeRequesting cache:cache];\n    }];\n    [fetcher start];\n}\n\n- (void)finishRequestWithData:(StuffBaseModel *)data error:(NSError *)error type:(XGSGRequestDataType)type accountBeforeRequesting:(id<WTBaseAccountProtocol>)accountBeforeRequesting cache:(XGSGNewStockCache *)cache {\n    id<XGSGDataModelProtocol> resultModel;\n    // model.textId == MSG_ID_LOGIN_FIRST 时 去触发交易登录并且认为这次请求失败\n    if ([self wtLoginIfNeededWithStuffModel:data]) {\n        [self invokeCompletionsWithAccount:accountBeforeRequesting type:type data:nil isSuccess:NO error:error isSync:NO];\n        return;\n    }\n    \n    WTAMLogInfo(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"新股申购请求结束, type=%lu, error=%@\", type, error);\n    resultModel = [self modelWithRequestType:type stuffModel:data error:error beforeRequestingAccount:accountBeforeRequesting];\n    if (!resultModel) {\n        // 数据解析错误\n        [self invokeCompletionsWithAccount:accountBeforeRequesting type:type data:nil isSuccess:NO error:error isSync:NO];\n        return;\n    }\n    // 数据解析成功 更新到内存\n    [[XGSGCacheModelAdapter shared] updateContext:cache withModel:resultModel type:type];\n    resultModel.isValid = YES;\n    [cache syncronize];\n    [self invokeCompletionsWithAccount:accountBeforeRequesting type:type data:resultModel isSuccess:YES error:nil isSync:NO];\n}\n\n- (BOOL)wtLoginIfNeededWithStuffModel:(StuffBaseModel *)data {\n    if (!data || [data modelType] != StuffModelTypeText) {\n        return NO;\n    }\n    StuffTextModel *model = (StuffTextModel *)data;\n    // 主站请求通用逻辑 让客户端进行委托登录\n    if (model.textId == MSG_ID_LOGIN_FIRST) {\n        [HXModuleService(WTLoginUtilServiceProtocol) processLoginFirstMsg];\n        return YES;\n    }\n    return NO;\n}\n\n/// 同一账户同一类型的新股请求是幂等的 这里采用观察者模式组织回调 以避免请求多发\n/// @return 返回值含义表示是否需要发请求。观察者 从无到有 返回 1；从有到有 返回 0\n- (BOOL)addRequestObserverWithAccount:(id<WTBaseAccountProtocol>)account type:(XGSGRequestDataType)type block:(XGSGResponseBlock)block {\n    BOOL needSendRequest = NO;\n    NSString *key = [WTSaveIdentifyTool getSaveKeyWithAccount:account identify:kXGSGRequestObserverIdentifier];\n    NSMutableArray *requestObservers = [XGSGDataProvider.registedRequestInfos[@(type)].requestObservers objectForKey:key];\n    if (!requestObservers) {\n        requestObservers = [NSMutableArray array];\n        [XGSGDataProvider.registedRequestInfos[@(type)].requestObservers setObject:requestObservers forKey:key];\n        needSendRequest = YES;\n    }\n    [requestObservers addObject:block];\n    return needSendRequest;\n}\n\n- (void)invokeCompletionsWithAccount:(id<WTBaseAccountProtocol>)account type:(XGSGRequestDataType)type data:(id<XGSGDataModelProtocol> _Nullable)data isSuccess:(BOOL) isSuccess error:(NSError * _Nullable)error isSync:(BOOL)isSync {\n    NSString *key = [WTSaveIdentifyTool getSaveKeyWithAccount:account identify:kXGSGRequestObserverIdentifier];\n    NSArray<XGSGResponseBlock> *observerBlocks = [XGSGDataProvider.registedRequestInfos[@(type)].requestObservers objectForKey:key];\n    [observerBlocks enumerateObjectsUsingBlock:^(XGSGResponseBlock  _Nonnull observerBlock, NSUInteger idx, BOOL * _Nonnull stop) {\n        observerBlock(type, data, isSuccess, error, isSync);\n    }];\n    // 回调完之后 删除所有观察者\n    [XGSGDataProvider.registedRequestInfos[@(type)].requestObservers removeObjectForKey:key];\n}\n\n- (HXWTSocketRequest *)requestWithType:(XGSGRequestDataType)type isRZRQ:(BOOL)isRZRQ {\n    XGSGRequestBaseInfo *requestBaseInfo = XGSGDataProvider.registedRequestInfos[@(type)];\n    int protocolID = isRZRQ ? requestBaseInfo.rzrqProtocolID : requestBaseInfo.normalProtocolID;\n    NSDictionary *params = requestBaseInfo.params;\n    return [HXWTSocketRequest requestWithProtocolId:protocolID paramsDict:params pageId:self.pageID == 0 ? PAGE_XGSG_SHENGGOU : self.pageID];\n}\n\n// DEBUG 模式 返回模拟数据\n// RELEASE 模式 返回空\n- (id)mockedDataWithType:(XGSGRequestDataType)type {\n    id data = nil;\n#ifdef _DEBUG\n    BOOL isUseMockedData = [NSUserDefaults.standardUserDefaults boolForKey:@{\n        @(XGSGRequestDataTypeIPOInfo): kXGSGDebugSimulatedIPOInfo,\n        @(XGSGRequestDataTypeZhongQianToday): kXGSGDebugSimulatedZhongQianToday,\n        @(XGSGRequestDataTypeZhongQianHistory): kXGSGDebugSimulatedZhongQianHistory,\n        @(XGSGRequestDataTypeQuota): kXGSGDebugSimulatedQuota\n    }[@(type)]];\n    if (isUseMockedData) {\n        data = [XGSGDataProvider debug_simulatedDataWithType:type];\n    }\n#endif\n    return data;\n}\n\n// 解析 stuffModel 为 XGSGDataModelProtocol\n- (id<XGSGDataModelProtocol>)modelWithRequestType:(XGSGRequestDataType)type stuffModel:(StuffBaseModel *)data error:(NSError *)error beforeRequestingAccount:(id<WTBaseAccountProtocol>)account {\n    id json = [self mockedDataWithType:type];\n    // json 为空表示不使用模拟数据而时使用请求应答数据\n    if (!json) {\n        // 校验请求前后账号是否一致 & 校验应答数据格式\n        if (![self checkRequestStatusWithData:data error:error beforeRequestingAccount:account type:(XGSGRequestDataType)type]) {\n            return nil;\n        } else {\n            json = [NSJSONSerialization JSONObjectWithData:[((StuffJSONModel *)data).stringObj dataUsingEncoding:NSUTF8StringEncoding] options:NSJSONReadingMutableLeaves | NSJSONReadingMutableContainers error:nil];\n        }\n    }\n    \n    id<XGSGDataModelProtocol> model = nil;\n    XGSGAssert([json isKindOfClass:[NSDictionary class]], @\"应答数据格式不是字典\");\n    if (![json isKindOfClass:[NSDictionary class]]) {\n        return nil;\n    }\n    \n    Class modelClass = XGSGDataProvider.registedRequestInfos[@(type)].responseModelClass;\n    model = [[modelClass alloc] initWithDictionary:json];\n    return model;\n}\n\n- (BOOL)checkRequestStatusWithData:(StuffBaseModel *)data error:(NSError *)error beforeRequestingAccount:(id<WTBaseAccountProtocol>)account type:(XGSGRequestDataType)type {\n    id<WTBaseAccountProtocol> currentAccount = [[WTBaseAccountManager sharedInstance] getCurAccountInfor];\n    // 通用校验1: 请求前后账号不一致\n    if (![[WTBaseAccountManager sharedInstance] judgeAccount:account isEqualTo:currentAccount]) {\n        WTAMLogError(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"请求前后账号不一致: %@_%@\", [currentAccount getHideAccount], [account getHideAccount]);\n        HXLogClientInfo(@\"fetchxginfo_accexp_agu_unmatch_account\", @\"wt_new_stock_\");\n        return NO;\n    }\n    \n    // 通用校验2: 请求报错 或 数据格式异常\n    if (error || data.modelType != StuffModelTypeText || ((StuffTextModel *)data).subModelType != StuffModelTypeJSON) {\n        WTAMLogError(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"应答报错或数据格式异常: %@, type=%lu\", error, type);\n        HXLogClientInfo(@\"fetchxginfo_accexp_agu_req_error\", @\"wt_new_stock_\");\n        return NO;\n    }\n    return YES;\n}\n\n@end\n\n","relevantFile":"","relevantFileList":[],"filePath":"XGSGDataProvider.mm","template":"objective-cpp","multiRes":{"hipilot":"aseDataContext alloc] initWithTypes:types];\n    [self fetchDataWithTypes:types strategy:strategy completion:^(XGSGRequestDataType type, id<XGSGDataModelProtocol> data, BOOL isSuccess, NSError *error, BOOL isSync)","deepseek-chat-lite":"aseDataContext alloc] init];","CodeQwen2.5-7B":"aseDataContext alloc] init];","copilot":"DataWithTypes:(NSArray<NSNumber *> *)types strategy:(XGSGDataFetchStrategy)strategy {\n    __block XGSGBaseDataContext *resultModel = [[XGSGBaseDataContext alloc] init];\n    dispatch_group_t group = dispatch_group_create();\n    for (NSNumber *typeNumber in types) {\n        XGSGRequestDataType type = (XGSGRequestDataType)typeNumber.unsignedIntegerValue;\n\n        [self fetchSingleInfoWithType:type\n                             useCache:strategy & XGSGDataFetchStrategyUseCache\n                           useNetwork:strategy & XGSGDataFetchStrategyUseNetwork\n                           completion:^(XGSGRequestDataType type, id<XGSGDataModelProtocol>  _Nullable data, BOOL isSuccess, NSError * _Nullable error, BOOL isSync) {\n            dispatch_group_leave(group);\n            if (isSuccess) {\n                [resultModel addData:data type:type];\n            }\n        }];\n    }\n\n    return resultModel;\n}\n\n- (void)requestInfoWithType:(XGSGRequestDataType)type cache:(XGSGNewStockCache *)cache completion:(XGSGResponseBlock)compl"}},{"prefix":"\n#import \"XGSGDataProvider.h\"\n#import \"XGSGNewStockModel.h\"\n#import \"XGSGNewStockCache.h\"\n#import \"XGSGCacheModelAdapter.h\"\n#import \"XGSGDebugKeyDefine.h\"\n#import \"XGSGAssertMarco.h\"\n#import \"XGSGDataProvider+Debug.h\"\n#import \"XGSGBaseDataContext.h\"\n\n#import <WTTradeModule/WTSaveIdentifyTool.h>\n#import <WTTradeModule/WTBaseAccountManager.h>\n#import <WTTradeModule/TradeActionDefine.h>\n\n#import <EQFoundation/EQMobileProtocalIndependentDefine.h>\n#import <HXModuleService/HXModuleService.h>\n#import <HXModuleServiceManage/WTLoginUtilServiceProtocol.h>\n#import <HXCommunicateMiddleware/HXSocketFetcher.h>\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXStuffDataModel/StuffTextModel.h>\n\n#import <objc/runtime.h>\n\nFOUNDATION_IMPORT NSString * const kXGSGXinGu100MD5Key;\n\nNSString * const kXGSGRequestObserverIdentifier = @\"kXGSGRequestObserverIdentifier\";\n\n@interface XGSGRequestBaseInfo()\n\n@property(nonatomic, strong) NSMutableDictionary<NSString *, NSMutableArray<XGSGResponseBlock> *> *requestObservers;\n\n@end\n\n@implementation XGSGRequestBaseInfo\n\n+ (instancetype)infoWithType:(XGSGRequestDataType)type normalProtocolID:(int)normalProtocolID rzrqProtocolID:(int)rzrqProtocolID params:(NSDictionary *)params responseModelClass:(Class)responseModelClass {\n    XGSGRequestBaseInfo *info = [[XGSGRequestBaseInfo alloc] init];\n    info.type = type;\n    info.normalProtocolID = normalProtocolID;\n    info.rzrqProtocolID = rzrqProtocolID;\n    info.params = params;\n    info.responseModelClass = responseModelClass;\n    info.requestObservers = [NSMutableDictionary dictionary];\n    return info;\n}\n\n@end\n\n@interface XGSGDataProvider()\n\n// 注册的请求类型 key: 请求类型 value: 协议id 参数 等信息\n@property(nonatomic, class, strong, readonly) NSMutableDictionary<NSNumber *, XGSGRequestBaseInfo *> *registedRequestInfos;\n\n@property(nonatomic, class, strong, readonly) NSMutableDictionary<NSString *, XGSGDataProvider *> *dataProviderHolder;\n\n@property(nonatomic, copy) NSString *identifier;\n\n@property(nonatomic, class, assign, readonly) NSInteger autoIncrementNumber;\n\n@end\n\n@implementation XGSGDataProvider\n\n+ (void)initialize {\n    // 查 新股/债信息\n    [XGSGDataProvider.registedRequestInfos setObject:[XGSGRequestBaseInfo infoWithType:XGSGRequestDataTypeIPOInfo\n                                                             normalProtocolID:KTradeActionProtocalID_XGSG_IPOInfo\n                                                               rzrqProtocolID:KTradeActionProtocalID_XGSG_RZRQ_IPOInfo\n                                                                       params:@{}\n                                                           responseModelClass:[XGSGIPOInfoModel class]]\n                                     forKey:@(XGSGRequestDataTypeIPOInfo)];\n    // 查 当日中签\n    [XGSGDataProvider.registedRequestInfos setObject:[XGSGRequestBaseInfo infoWithType:XGSGRequestDataTypeZhongQianToday\n                                                             normalProtocolID:KTradeActionProtocalID_XGSG_ZhongQian\n                                                               rzrqProtocolID:KTradeActionProtocalID_XGSG_RZRQ_ZhongQian\n                                                                       params:@{ @\"reqtype\": @\"196608\", @\"queryType\" : @\"today\" }\n                                                           responseModelClass:[XGSGIPOInfoModel class]]\n                                     forKey:@(XGSGRequestDataTypeZhongQianToday)];\n    // 查 历史中签\n    [XGSGDataProvider.registedRequestInfos setObject:[XGSGRequestBaseInfo infoWithType:XGSGRequestDataTypeZhongQianHistory\n                                                             normalProtocolID:KTradeActionProtocalID_XGSG_ZhongQian\n                                                               rzrqProtocolID:KTradeActionProtocalID_XGSG_RZRQ_ZhongQian\n                                                                       params:@{ @\"reqtype\": @\"196608\", @\"queryType\" : @\"history\" }\n                                                           responseModelClass:[XGSGIPOInfoModel class]]\n                                     forKey:@(XGSGRequestDataTypeZhongQianHistory)];\n    // 查 额度\n    [XGSGDataProvider.registedRequestInfos setObject:[XGSGRequestBaseInfo infoWithType:XGSGRequestDataTypeQuota\n                                                             normalProtocolID:KTradeActionProtocalID_XGSG_Quota\n                                                               rzrqProtocolID:KTradeActionProtocalID_XGSG_RZRQ_Quota\n                                                                       params:@{}\n                                                           responseModelClass:[XGSGQuotaModel class]]\n                                     forKey:@(XGSGRequestDataTypeQuota)];\n}\n\n+ (NSMutableDictionary<NSString *,XGSGDataProvider *> *)dataProviderHolder {\n    static dispatch_once_t onceToken;\n    static NSMutableDictionary *_dataProviderHolder;\n    dispatch_once(&onceToken, ^{\n        _dataProviderHolder = [NSMutableDictionary dictionary];\n    });\n    return _dataProviderHolder;\n}\n\n+ (NSMutableDictionary<NSNumber *, XGSGRequestBaseInfo *> *)registedRequestInfos {\n    static dispatch_once_t onceToken;\n    static NSMutableDictionary *_registedRequestInfos;\n    dispatch_once(&onceToken, ^{\n        _registedRequestInfos = [NSMutableDictionary dictionary];\n    });\n    return _registedRequestInfos;\n}\n\n+ (NSInteger)autoIncrementNumber {\n    static NSInteger number = 0;\n    return number++;\n}\n\n+ (instancetype)provider {\n    XGSGDataProvider *provider = [[XGSGDataProvider alloc] init];\n    if (provider) {\n        provider.identifier = [NSString stringWithFormat:@\"%ld\", XGSGDataProvider.autoIncrementNumber];\n    }\n    return provider;\n}\n\n/// @return 异步返回 0，同步返回 1\n- (NSInteger)fetchSingleInfoWithType:(XGSGRequestDataType)type useCache:(BOOL)useCache useNetwork:(BOOL)useNetwork completion:(XGSGResponseBlock)completion {\n    NSString *msg = [NSString stringWithFormat:@\"如需组合 XGSGRequestDataType 请使用数组，而不要使用按位或。type=%lu\", type];\n    XGSGAssert((type & (type - 1)) == 0, msg);\n    \n    XGSGNewStockCache *cache = [XGSGNewStockCache cacheWithWTAccount:[[WTBaseAccountManager sharedInstance] getCurAccountInfor]];\n    id<XGSGDataModelProtocol> model;\n    if (useCache) {\n        model = cache.isValid ? [[XGSGCacheModelAdapter shared] modelFromDataContext:cache type:type] : nil;\n    }\n    \n    if (model.isValid) {\n        // 从缓存中取数据\n        WTAMLogInfo(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"缓存有效, 将从缓存获取新股数据, type=%lu\", type);\n        completion(type, model, YES, nil, YES);\n        return 1;\n    } else if (useNetwork) {\n        WTAMLogInfo(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"缓存无效, 将从请求获取新股数据, type=%lu, useCache=%d\", type, useCache);\n        [self requestInfoWithType:type cache:cache completion:completion];\n        return 0;\n    } else {\n        // 能走到这说明 缓存无效 且 不从网络请求获取\n        WTAMLogDebug(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"本次 fetch 不从网络请求获取新股数据, type=%lu\", type);\n        HXLogClientInfo(@\"cache_invalid_no_use_network\", @\"wt_new_stock_\");\n        completion(type, nil, NO, nil, YES);\n        return 1;\n    }\n}\n\n+ (NSInteger)fetchDataWithTypes:(NSArray<NSNumber *> *)types strategy:(XGSGDataFetchStrategy)strategy completion:(XGSGDataFetchingResponseBlock)completions {\n    XGSGDataProvider *dataProvider = [XGSGDataProvider provider];\n    [XGSGDataProvider.dataProviderHolder setObject:dataProvider forKey:dataProvider.identifier];\n    return [dataProvider fetchDataWithTypes:types strategy:strategy completion:completions];\n}\n\n- (NSInteger)fetchDataWithTypes:(NSArray<NSNumber *> *)types strategy:(XGSGDataFetchStrategy)strategy completion:(XGSGDataFetchingResponseBlock)completion {\n    NSAssert(completion != nil, @\"completions 不能为空\");\n    __block NSInteger callBackCount = 0;\n    __block XGSGBaseDataContext *resultModel = [[XGSGB","infill":"f (cache.isValid) {\n        resultModel.ipoInfo = cache.ipoInfo;\n        resultModel.quota = cache.quota;\n        resultModel.zqInfo = cac","suffix":"he.zqInfo;\n    }\n    return resultModel;\n}\n\n- (void)requestInfoWithType:(XGSGRequestDataType)type cache:(XGSGNewStockCache *)cache completion:(XGSGResponseBlock)completion  {\n    id<WTBaseAccountProtocol> accountBeforeRequesting = [[WTBaseAccountManager sharedInstance] getCurAccountInfor];\n    // 相同账号 相同类型的新股请求 不必重复发\n    BOOL needSendRequest = [self addRequestObserverWithAccount:accountBeforeRequesting type:type block:completion];\n    // 不需要发请求时 将回调加入观察队列 等到请求回来的时候一起回调出去\n    if (!needSendRequest) {\n        return;\n    }\n    \n    HXWTSocketRequest *request = [self requestWithType:type isRZRQ:accountBeforeRequesting.isRZRQ];\n    request.timeoutInterval = 20.0;\n    WeakObj(self);\n    HXSocketFetcher *fetcher = [HXSocketFetcher fetcherWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n        [selfWeak finishRequestWithData:data error:error type:type accountBeforeRequesting:accountBeforeRequesting cache:cache];\n    }];\n    [fetcher start];\n}\n\n- (void)finishRequestWithData:(StuffBaseModel *)data error:(NSError *)error type:(XGSGRequestDataType)type accountBeforeRequesting:(id<WTBaseAccountProtocol>)accountBeforeRequesting cache:(XGSGNewStockCache *)cache {\n    id<XGSGDataModelProtocol> resultModel;\n    // model.textId == MSG_ID_LOGIN_FIRST 时 去触发交易登录并且认为这次请求失败\n    if ([self wtLoginIfNeededWithStuffModel:data]) {\n        [self invokeCompletionsWithAccount:accountBeforeRequesting type:type data:nil isSuccess:NO error:error isSync:NO];\n        return;\n    }\n    \n    WTAMLogInfo(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"新股申购请求结束, type=%lu, error=%@\", type, error);\n    resultModel = [self modelWithRequestType:type stuffModel:data error:error beforeRequestingAccount:accountBeforeRequesting];\n    if (!resultModel) {\n        // 数据解析错误\n        [self invokeCompletionsWithAccount:accountBeforeRequesting type:type data:nil isSuccess:NO error:error isSync:NO];\n        return;\n    }\n    // 数据解析成功 更新到内存\n    [[XGSGCacheModelAdapter shared] updateContext:cache withModel:resultModel type:type];\n    resultModel.isValid = YES;\n    [cache syncronize];\n    [self invokeCompletionsWithAccount:accountBeforeRequesting type:type data:resultModel isSuccess:YES error:nil isSync:NO];\n}\n\n- (BOOL)wtLoginIfNeededWithStuffModel:(StuffBaseModel *)data {\n    if (!data || [data modelType] != StuffModelTypeText) {\n        return NO;\n    }\n    StuffTextModel *model = (StuffTextModel *)data;\n    // 主站请求通用逻辑 让客户端进行委托登录\n    if (model.textId == MSG_ID_LOGIN_FIRST) {\n        [HXModuleService(WTLoginUtilServiceProtocol) processLoginFirstMsg];\n        return YES;\n    }\n    return NO;\n}\n\n/// 同一账户同一类型的新股请求是幂等的 这里采用观察者模式组织回调 以避免请求多发\n/// @return 返回值含义表示是否需要发请求。观察者 从无到有 返回 1；从有到有 返回 0\n- (BOOL)addRequestObserverWithAccount:(id<WTBaseAccountProtocol>)account type:(XGSGRequestDataType)type block:(XGSGResponseBlock)block {\n    BOOL needSendRequest = NO;\n    NSString *key = [WTSaveIdentifyTool getSaveKeyWithAccount:account identify:kXGSGRequestObserverIdentifier];\n    NSMutableArray *requestObservers = [XGSGDataProvider.registedRequestInfos[@(type)].requestObservers objectForKey:key];\n    if (!requestObservers) {\n        requestObservers = [NSMutableArray array];\n        [XGSGDataProvider.registedRequestInfos[@(type)].requestObservers setObject:requestObservers forKey:key];\n        needSendRequest = YES;\n    }\n    [requestObservers addObject:block];\n    return needSendRequest;\n}\n\n- (void)invokeCompletionsWithAccount:(id<WTBaseAccountProtocol>)account type:(XGSGRequestDataType)type data:(id<XGSGDataModelProtocol> _Nullable)data isSuccess:(BOOL) isSuccess error:(NSError * _Nullable)error isSync:(BOOL)isSync {\n    NSString *key = [WTSaveIdentifyTool getSaveKeyWithAccount:account identify:kXGSGRequestObserverIdentifier];\n    NSArray<XGSGResponseBlock> *observerBlocks = [XGSGDataProvider.registedRequestInfos[@(type)].requestObservers objectForKey:key];\n    [observerBlocks enumerateObjectsUsingBlock:^(XGSGResponseBlock  _Nonnull observerBlock, NSUInteger idx, BOOL * _Nonnull stop) {\n        observerBlock(type, data, isSuccess, error, isSync);\n    }];\n    // 回调完之后 删除所有观察者\n    [XGSGDataProvider.registedRequestInfos[@(type)].requestObservers removeObjectForKey:key];\n}\n\n- (HXWTSocketRequest *)requestWithType:(XGSGRequestDataType)type isRZRQ:(BOOL)isRZRQ {\n    XGSGRequestBaseInfo *requestBaseInfo = XGSGDataProvider.registedRequestInfos[@(type)];\n    int protocolID = isRZRQ ? requestBaseInfo.rzrqProtocolID : requestBaseInfo.normalProtocolID;\n    NSDictionary *params = requestBaseInfo.params;\n    return [HXWTSocketRequest requestWithProtocolId:protocolID paramsDict:params pageId:self.pageID == 0 ? PAGE_XGSG_SHENGGOU : self.pageID];\n}\n\n// DEBUG 模式 返回模拟数据\n// RELEASE 模式 返回空\n- (id)mockedDataWithType:(XGSGRequestDataType)type {\n    id data = nil;\n#ifdef _DEBUG\n    BOOL isUseMockedData = [NSUserDefaults.standardUserDefaults boolForKey:@{\n        @(XGSGRequestDataTypeIPOInfo): kXGSGDebugSimulatedIPOInfo,\n        @(XGSGRequestDataTypeZhongQianToday): kXGSGDebugSimulatedZhongQianToday,\n        @(XGSGRequestDataTypeZhongQianHistory): kXGSGDebugSimulatedZhongQianHistory,\n        @(XGSGRequestDataTypeQuota): kXGSGDebugSimulatedQuota\n    }[@(type)]];\n    if (isUseMockedData) {\n        data = [XGSGDataProvider debug_simulatedDataWithType:type];\n    }\n#endif\n    return data;\n}\n\n// 解析 stuffModel 为 XGSGDataModelProtocol\n- (id<XGSGDataModelProtocol>)modelWithRequestType:(XGSGRequestDataType)type stuffModel:(StuffBaseModel *)data error:(NSError *)error beforeRequestingAccount:(id<WTBaseAccountProtocol>)account {\n    id json = [self mockedDataWithType:type];\n    // json 为空表示不使用模拟数据而时使用请求应答数据\n    if (!json) {\n        // 校验请求前后账号是否一致 & 校验应答数据格式\n        if (![self checkRequestStatusWithData:data error:error beforeRequestingAccount:account type:(XGSGRequestDataType)type]) {\n            return nil;\n        } else {\n            json = [NSJSONSerialization JSONObjectWithData:[((StuffJSONModel *)data).stringObj dataUsingEncoding:NSUTF8StringEncoding] options:NSJSONReadingMutableLeaves | NSJSONReadingMutableContainers error:nil];\n        }\n    }\n    \n    id<XGSGDataModelProtocol> model = nil;\n    XGSGAssert([json isKindOfClass:[NSDictionary class]], @\"应答数据格式不是字典\");\n    if (![json isKindOfClass:[NSDictionary class]]) {\n        return nil;\n    }\n    \n    Class modelClass = XGSGDataProvider.registedRequestInfos[@(type)].responseModelClass;\n    model = [[modelClass alloc] initWithDictionary:json];\n    return model;\n}\n\n- (BOOL)checkRequestStatusWithData:(StuffBaseModel *)data error:(NSError *)error beforeRequestingAccount:(id<WTBaseAccountProtocol>)account type:(XGSGRequestDataType)type {\n    id<WTBaseAccountProtocol> currentAccount = [[WTBaseAccountManager sharedInstance] getCurAccountInfor];\n    // 通用校验1: 请求前后账号不一致\n    if (![[WTBaseAccountManager sharedInstance] judgeAccount:account isEqualTo:currentAccount]) {\n        WTAMLogError(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"请求前后账号不一致: %@_%@\", [currentAccount getHideAccount], [account getHideAccount]);\n        HXLogClientInfo(@\"fetchxginfo_accexp_agu_unmatch_account\", @\"wt_new_stock_\");\n        return NO;\n    }\n    \n    // 通用校验2: 请求报错 或 数据格式异常\n    if (error || data.modelType != StuffModelTypeText || ((StuffTextModel *)data).subModelType != StuffModelTypeJSON) {\n        WTAMLogError(WT_LOG_MODULE_XGSG, WT_LOG_KEYWORDS_XG_SEARCH, @\"应答报错或数据格式异常: %@, type=%lu\", error, type);\n        HXLogClientInfo(@\"fetchxginfo_accexp_agu_req_error\", @\"wt_new_stock_\");\n        return NO;\n    }\n    return YES;\n}\n\n@end\n\n","relevantFile":"","relevantFileList":[],"filePath":"XGSGDataProvider.mm","template":"objective-cpp","multiRes":{"hipilot":"GBaseDataContext alloc] initWithTypes:types];\n    __block NSError *error = nil;\n    for (NSNumber *type in types) {\n        XGSGRequestBaseInfo *requestBaseInfo = XGSGDataProvider.registedRequestInfos[type];\n","deepseek-chat-lite":"aseDataContext alloc] init];","CodeQwen2.5-7B":"aseDataContext alloc] init];","copilot":"f (cache.isValid) {\n        resultModel.ipoInfo = cache.ipoInfo;\n        resultModel.quota = cache.quota;\n        resultModel.zqInfo = cac"}},{"prefix":"        [self showConfirmViewWithText:confirmStr];\n        return;\n    }\n    //设置页面等待view\n    HXBaseViewController *viewController = (HXBaseViewController *)[self viewController];\n    [viewController showNetWorkingTip:YES];\n    \n    int  componentProtocolId = KProtocalID_SELL;\n    int  nReqctrlId = KReqctrlID_Sell;\n    int  nAmountId = SELL_AMOUNT;\n\n    //获取硬件信息\n    NSString* deviceInfo = @\"\";\n    CEQAppFrame* pFrame = EQGetAppFrame();\n    if (pFrame != NULL && pFrame->GetDeviceManager() != NULL)\n    {\n        deviceInfo = [pFrame->GetDeviceManager() getDeviceInfoForTrade];\n    }\n    self.jiechuPrice = strDealPrice;\n    self.jiechuAmount = strAmount;\n    NSString *params = [NSString stringWithFormat:\n                        @\"id=%d\\r\\n\\r\\nreqctrl=%d\\r\\nctrlcount=4\\r\\nctrlid_0=%d\\r\\nctrlvalue_0=%@\\r\\nctrlid_1=%d\\r\\nctrlvalue_1=%@\\r\\nctrlid_2=%d\\r\\nctrlvalue_2=%@\\r\\nctrlid_3=%d\\r\\nctrlvalue_3=%@\\r\\nctrlid_4=2108\\r\\nctrlvalue_4=%@\\r\\n%@\"\n                        , componentProtocolId\n                        ,nReqctrlId\n                        ,STOCKCODE\n                        ,_stockCode\n                        ,STOCK_DEAL_PRICE\n                        ,strDealPrice\n                        ,nAmountId\n                        ,strAmount,\n                        GZNHG_MONEY,\n                        loadAmount\n                        ,_stockMarket\n                        ,deviceInfo];\n    [self.sellInfoRequest requestData:params waitMode:NO pageId:PAGE_GZNHG_TRADE];\n}\n\n//根据金额计算出委托数量\n- (NSString *)calculateAmountWithMoney:(NSString *)wtMoney{\n    int unit = 100; //默认数量=(借出金额/100)\n    WTAccountInfor *accountInfo = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if(_stockType == HSGZ_STOCKTYPE && [[WTChicangFlagInfo sharedInfo] isHuShiGuoZhaiShouUnitWithQsId:accountInfo.yybId]){\n        //沪市国债&&在配置中的券商，单位是手,数量=金额/1000\n        unit = 1000;\n    }\n    NSString* strAmount = [NSString stringWithFormat:@\"%ld\",(NSInteger)[wtMoney integerValue]/unit];\n    return strAmount;\n}\n\n- (IBAction)feedBackClick:(id)sender {\n    //跳转到交易帮助页面\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(RRHuiGouPrefix, @\"feedback\") actionType:ClickAction toPageid:PAGE_HOMEPAGE_WEBVIEW toResourceid:@\"free_help_feedback_trade\"];\n\n    [WTUniversalJumpManager gotoFeedBackWithTradePageType:@\"jynhg\"];\n}\n\n- (IBAction)mingxiClicked:(UIControl *)sender {\n    NSString *object = [NSString stringWithFormat:@\"%@.shouyimingxi\", RRHuiGouPrefix];\n    [ClientUserBehaviorLog sendLogWithLogobject:object actionType:ClickAction];\n    \n    [[[UIApplication sharedApplication] keyWindow] endEditing:YES];\n    \n    ProfitDetailView *pDView = [ProfitDetailView view];\n    AMUIFrameWork *tabFm = [AMUIFrameWork shareingUIFramework];\n    UIView *tabRootView = [tabFm getMainView];\n    [pDView setFrame:[UIScreen mainScreen].bounds];\n    [tabRootView addSubview:pDView];\n\n    [pDView refresh];\n}\n\n#pragma mark - confirmView delegate\n- (void)didSumbitOk{\n    [WTTradeLog commitEvent:@\"10004\" desc:@\"国债逆回购-回购页面-借出资金确认弹框-点击确认借出按钮\"];\n    \n    NSString *object = [NSString stringWithFormat:@\"%@.ok\", RRHuiGouPrefix];\n    [ClientUserBehaviorLog sendLogWithLogobject:object actionType:ClickAction];\n    \n    [[HXCustomTradePopManager sharedInstance] dismissTradePopViewWithAnimated:YES];\n    \n    if(self.isSkipFirstConfirmReq){\n        //走免一次借出请求\n        HXBaseViewController *viewController = (HXBaseViewController *)[self viewController];\n        [viewController showNetWorkingTip:YES];\n        WeakObj(self);\n        [self.tradeRequest requestDirectJHSTwiceSubmitWithStockCode:self.stockCode stType:self.stockSTType wtPrice:self.jiechuPrice wtCount:self.jiechuAmount otherInfo:nil skipReplaceMsg:NO orderSource:nil callBack:^(StuffBaseModel *data, NSError *error) {\n            \n            HXBaseViewController *viewController = (HXBaseViewController *)[selfWeak viewController];\n            [viewController showNetWorkingTip:NO];\n            \n            if(!error && data.modelType == StuffModelTypeText){\n                StuffTextModel *textModel = (StuffTextModel *)data;\n                [selfWeak ProcessTipAndSwitchId:textModel];\n            }\n        }];\n        return;\n    }\n    int componentProtocolId = KProtocalID_Confirm_Sell;\n    int reqctrl = KReqctrlID_Sell;\n    \n    NSString* deviceInfo = @\"\";\n    CEQAppFrame* pFrame = EQGetAppFrame();\n    if (pFrame != NULL && pFrame->GetDeviceManager() != NULL) {\n        deviceInfo = [pFrame->GetDeviceManager() getDeviceInfoForTrade];\n    }\n    NSString *params = [NSString  stringWithFormat:\n                        @\"id=%d\\r\\nreqctrl=%d\\r\\n%@\"\n                        , componentProtocolId\n                        , reqctrl,deviceInfo];\n    \n    [self.sellRequest requestData:params waitMode:NO pageId:PAGE_GZNHG_TRADE];\n}\n\n- (void)didSumbitCancel{\n    [[HXCustomTradePopManager sharedInstance] dismissTradePopViewWithAnimated:YES];\n}\n\n#pragma mark - CustomKeyBoardDelgate\n\n-(BOOL)keyBoardtextField:(id)sender shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string withParam:(id)param\n{\n   return [self textField:(UITextField *)sender shouldChangeCharactersInRange:range replacementString:string];\n}\n\n-(void) numKeyboardLeftButtonClick:(id)sender {\n    [self btnKeyBoardClick:(id)sender];\n}\n\n-(void) charKeyboardRightButtonClick:(id)sender {\n    [self hideKeyBoard];\n}\n\n\n-(void) leftButtonsClick:(int)row{\n    [self cangChangedWithRow:row isKeyBoard:YES];\n}\n\n- (void)cangChangedWithRow:(int)row isKeyBoard:(BOOL)isKeyBoard{\n    NSString *divisorStr = @\"1\";\n    int cangNumber = 100;\n    switch (row) {\n        case 1:\n            divisorStr = @\"2.0\";\n            cangNumber = 50;\n            break;\n        case 2:\n            divisorStr = @\"3.0\";\n            cangNumber = 33;\n            break;\n        case 3:\n            divisorStr = @\"4.0\";\n            cangNumber = 25;\n            break;\n        case 0:\n        default:\n            break;\n    }\n    \n    NSString *object = nil;\n    if (isKeyBoard) {\n        object = [NSString stringWithFormat:@\"%@.input.cang%i\", RRHuiGouPrefix, cangNumber];\n    } else {\n        object = [NSString stringWithFormat:@\"%@.number.cang%i\", RRHuiGouPrefix, cangNumber];\n    }\n    [ClientUserBehaviorLog sendLogWithLogobject:object actionType:ClickAction];\n    long long amount = [[self.canBorrowMoney stringByDev:divisorStr] longLongValue];\n    amount = (self.stockType == HSGZ_STOCKTYPE) ? (long long)(amount/self.hsMinMoney)*self.hsMinMoney:(long long)(amount/self.ssMinMoney)*self.ssMinMoney;\n    \n    _jcMoneyTextField.text = [NSString stringWithFormat:@\"%lld\",amount];\n    _mirrorView.mirrorLabel.realNum = _jcMoneyTextField.text;\n    [self resizeMirrorView];\n    [RRBuyDataManager sharedInstance].loadAmountMoney = _jcMoneyTextField.text;\n    [[RRBuyDataManager sharedInstance] calucateTotal];\n    \n    [_jcMoneyTextField changeTheme];\n    \n    [self refreshMingXiControl];\n}\n\n- (void)btnKeyBoardClick:(id)sender\n{\n    if ([_nhsylTextField isFirstResponder]){\n        if ([TradeToolUtility tradePriceIsLimitInputPoint:_nhsylTextField.text]) {\n            return;\n        }\n        NSMutableString* text = [[NSMutableString alloc]initWithString:_nhsylTextField.text] ;\n        [text appendString:@\".\"];\n        _nhsylTextField.text = text;\n        text = nil;\n    } else if([_jcMoneyTextField isFirstResponder]) {\n        NSMutableString* text = [[NSMutableString alloc]initWithString:_jcMoneyTextField.text];\n        \n        if ([text length] > SellTextFieldMaxLength) {\n            return;\n        } else {\n            if ([text length] <= 5) {\n                [text appendString:@\"000\"];\n            } else if ([text length] <= 6) {\n                [text appendString:@\"00\"];\n            } else if ([text length] <= 7) {\n                [text appendString:@\"0\"];\n            }\n        }\n        \n        \n        _jcMoneyTextField.text = text;\n        _mir","infill":"self.ssMinMoney)*self.ssMinMoney];\n                /","suffix":"/如果借出金额为空，且可借金额不为0，则默认借出金额为可借金额的整数倍\n                if(_jcMoneyTextField.text.length < 1 && [result intValue] != 0) {\n                    _jcMoneyTextField.text = [NSString stringWithFormat:@\"%lli\",([canUse longLongValue]/self.ssMinMoney)*self.ssMinMoney];\n                }\n            }\n            _mirrorView.mirrorLabel.realNum = _jcMoneyTextField.text;\n            [RRBuyDataManager sharedInstance].loadAmountMoney = _jcMoneyTextField.text;\n            [RRBuyDataManager sharedInstance].annualYield = [NSString stringWithFormat:@\"%f\",[_nhsylTextField.text doubleValue]/100.0];\n            [[RRBuyDataManager sharedInstance] calucateTotal];\n            \n            [self refreshMingXiControl];\n            \n            if (result.length > 0) {\n                self.canJieMoneyLabel.text = result;\n                [self.canJieMoneyLabel sizeToFit];\n                [self.canJieMoneyLabel setTop:self.canJieTipLabel.top];\n                [self.canJieMoneyLabel setLeft:self.canJieTipLabel.right + 2];\n                if (self.canJieMoneyLabel.right > self.nhsylTextField.right - 78) {\n                    self.canJieMoneyLabel.width = self.nhsylTextField.right - 78 - self.canJieMoneyLabel.left;\n                }\n                [self.canJieMoneyLabel changeTheme];\n            }\n            [self resizeMirrorView];\n            _mirrorView.hidden = _jcMoneyTextField.text.length < 1 ? YES:NO;\n        }\n    }\n    else {\n        if (request.errorMessage.length > 0) {\n            AM_UI_Public_Proxy::ShowTipAutoCloseNsOnView(self.viewController.view, request.errorMessage);\n        }\n    }\n}\n\n- (void)sellRequestFinishData:(HXRequet *)request\n{\n    HXBaseViewController *viewController = (HXBaseViewController *)[self viewController];\n    [viewController showNetWorkingTip:NO];\n    \n    CEQStuffBaseStruct *stuffData = request.stuffData;\n    \n    if( stuffData != NULL && stuffData->IsComplexTextData())\n    {\n        CEQStuffTextStruct * textData = (CEQStuffTextStruct*) stuffData;\n        StuffTextModel *textModel = textData -> StuffTextModelOutput();\n        [self ProcessTipAndSwitchId:textModel];\n    }\n}\n\n\n//根据股票代码判断是否是沪市国债还是深市国债\n- (StockType)judgeStockeType:(NSString *)stockCode\n{\n    if (stockCode.length < 6) {\n        return NOT_STOCK;\n    }\n    \n    if ([stockCode hasPrefix:SHANGHAI_STOCK_GZ_PREFIX]) {\n        return HSGZ_STOCKTYPE;\n    }else if ([stockCode hasPrefix:SHENZHEN_STOCK_GZ_PREFIX])\n    {\n        return SSGZ_STOCKTYPE;\n    }else\n    {\n        return NOTGZ_STOCKTYPE;\n    }\n}\n\n\n- (void)clearData\n{\n    _nhsylTextField.text = nil;\n    _jcMoneyTextField.text = nil;\n    \n}\n\n//国债借出请求\n- (TradeActionRequest *)tradeRequest{\n    if(!_tradeRequest){\n        _tradeRequest = [TradeActionRequest createTradeActionRequestWithType:TradeActionTypeNormal reqType:TradeActionReqType_Sell pageId:PAGE_WTXIADAN_SELL_ID];\n    }\n    return _tradeRequest;\n}\n\n#pragma mark - KVO callback\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context\n{\n    if ([keyPath isEqualToString:@\"text\"]) {\n        NSString *text = (NSString *)[change objectForKey:NSKeyValueChangeNewKey];\n        _mirrorView.hidden = text.length < 1;\n    }\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"GZNHGMiddleView.mm","template":"objective-cpp","multiRes":{"hipilot":"rorView.mirrorLabel.realNum = _jcMoneyTextField.text;\n        [self resizeMirrorView];\n        \n        [self refreshMingXiControl];\n    }\n}\n\n- (void)sellInfoRequestFinishData:(HXRequ","deepseek-chat-lite":"rorView.mirrorLabel.realNum = _jcMoneyTextField.text;","CodeQwen2.5-7B":"rorView.mirrorLabel.realNum = _jcMoneyTextField.text;","copilot":"self.ssMinMoney)*self.ssMinMoney];\n                /"}},{"prefix":"\n#import \"JSGetHQInfoEvent.h\"\n#import \"HXSocketFetcher.h\"\n#import \"HXDataDispatchManager.h\"\n#import <HXCore/EQCurveObj.h>\n#import <HXStuffDataModel/HXStuffDataModel.h>\n\n/// 获取行情信息协议字段\nstatic NSString * const kGetHqInfoStr = @\"getHQInfo\";\n/// 返回行情信息key\nstatic NSString * const kHqInfoStr = @\"hqInfo\";\n\n@interface JSGetHQInfoEvent()\n\n@property (nonatomic, copy) Callback resultCallback;\n@property (nonatomic, strong) HXSocketFetcher *fetcher;\n\n@end\n\n@implementation JSGetHQInfoEvent\n\n@synthesize webView;\n\n+ (NSString *)methodName {\n    return kGetHqInfoStr;\n}\n\n- (id)doSomething:(id)data callBack:(void (^)(id responseData))callBack {\n    self.resultCallback = callBack;\n    [self getMarketTransmit];\n    return nil;\n}\n\n// 获取行情站点信息\n- (void)getMarketTransmit {\n    if (_fetcher == nil) {\n        WEAKSELF\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:1256\n                                                               paramsDict:@{}\n                                                                   pageId:7001];\n        _fetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n            if (!error) {\n                if ([data modelType] == StuffModelTypeText) {\n                    [weakSelf dealReceiveData:data];\n                }\n            } else {\n                if (weakSelf.resultCallback) {\n                    weakSelf.resultCallback(@{kHqInfoStr : @\"\"});\n                }\n            }\n            \n        }];\n        [_fe","infill":"tcher start];\n    } else {\n        _fetcher.request.paramsDict = @{};\n        [_fetcher pause];\n ","suffix":"       [_fetcher resume];\n    }\n}\n\n- (void)dealReceiveData:(StuffTextModel *)data {\n    NSString *hqStr = data.text ? data.text : @\"\";\n    NSString *hqRetStr = [hqStr stringByReplacingOccurrencesOfString:@\"\\r\\n\" withString:@\" \"];\n    NSDictionary *dic = @{kHqInfoStr : hqRetStr};\n    if (self.resultCallback) {\n        self.resultCallback(dic);\n    }\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"JSGetHQInfoEvent.mm","template":"objective-cpp","multiRes":{"hipilot":"rcher start];\n ","deepseek-chat-lite":"tcher resume];","CodeQwen2.5-7B":"tcher resume];","copilot":"tcher start];\n    } else {\n        _fetcher.request.paramsDict = @{};\n        [_fetcher pause];\n "}},{"prefix":"\n#import <HXKLineModule/HXKLine.h>\n#import \"HXFenshiPeriodView.h\"\n#import <HXDataTypeConvertor/HXDataTypeConvertor.h>\n#import <HXBase/NSArray+Safety.h>\n#import <HXTool/InternetTimeTool.h>\n#import <HXFinanceMasterMoudle/NSDate+Extend.h>\n#import <HXEventBus/HXEventBus.h>\n#import <HXKLineModule/HXFenshiHistoryEvent.h>\n#import <HexColors/HexColors.h>\n#import <ThirdBase/Masonry.h>\n#import \"HXFenshiPeriodPresenter.h\"\n\n#import \"HXFenshiSetting.h\"\n#import \"HXKLineSetting.h\"\n#import \"USDropDownPopView.h\"\n#import \"AMSettingVarsProxy.h\"\n#import \"UIFont+HXFont.h\"\n\n#import <HXShowTipComponent/ToastView.h>\n#import \"HXHQTabsView.h\"\n#import \"HXHQFenShiPeriodCollectionViewCell.h\"\n#import \"HXHQListConfig.h\"\n#import \"AMUIPublicProxy+CurveLine.h\"\n#import \"HXUserInfo+SpecialServiceOrdered.h\"\n#import <HXBase/HXBaseMarketTools+TechCondition.h>\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"FortunePioneerStockSelectionView.h\"\n#import \"AMLocalIdDef.h\"\n#import \"HXRecordStockPeriodManager.h\"\n#import \"YYTextWeakProxy.h\"\n#import <HXKLineModule/HXKlinePublicProxy.h>\n#import \"NSDKPreAfterTool.h\"\n\n#import \"HXHQFenShiPeriodSortViewCell.h\"\n#import \"HXSnapShotNavigationController.h\"\n#import <HXThemeVersion/UINavigationBar+ChangeTheme.h>\n\n#import \"HXStrategySignalManager.h\"\n#import <HXKLineModule/HXKlinePublicProxy.h>\n#import <HXKLineModule/HXKlineSettingEvent.h>\n#import \"HXUserConfigCloudManager.h\"\n#import \"HXFenshiContentViewTradePresenter.h\"\n#import \"HXKlineContentViewTradePresenter.h\"\n#import \"HXFenshiPeriodView+PeriodDelegate.h\"\n\nextern NSString *const kNSDKTradeType;\nextern NSString *const kUSMarketOpenPrePost;\nextern CGFloat const kBottomMenuHeight;\n\nCGFloat const kFenShiPeriodSpaceHeight = 4;\nCGFloat const kFenShiPeriodBottomSpaceHeight = 8;\nCGFloat const kFenShiPeriodSegmentTitleHeight = 36;\n\nstatic CGFloat const kFenShiPeriodMore = 36;\nstatic CGFloat const CFXF_Button_Width_XFXG = 24; //按钮宽度\nstatic CGFloat const CFXF_Button_Height_XFXG = 52; //按钮高度\nstatic CGFloat const CFXF_Bottom_Space_Height_XFXG = 46; //按钮下方空隙\nstatic CGFloat const CFXF_Right_Space_Height_XFXG = 12; //按钮右侧空隙\nstatic CGFloat const kSettingMore = 40;\n\n// 引导相关\nstatic NSString *const kPeriodSwitchSlideGuideFlag = @\"periodSwitchSlideGuideFlag\";\nstatic NSString *const kPeriodSwitchClickInfo = @\"periodSwitchClickInfo\";\nstatic NSString *const kDateKey = @\"date\";\nstatic NSString *const kDayCountKey = @\"dayCount\";\nstatic NSUInteger const kDayCount = 5; //触发引导的日点击次数\nNSString * const kWaitForPeriodSwitchSlideGuide = @\"waitForPeriodSwitchSlideGuide\";\n\nstatic NSString *const FuncStockDetailScrollToFenShiTopNotify = @\"FuncStockDetailScrollToFenShiTopNotify\"; //跳转到详情页顶部通知，即section为0\n\n@interface HXFenshiPeriodView ()<HXPageContainerViewDataSource,HXPageContainerViewDelegate,HXFenshiPeriodViewProtocol, HXHQTabsViewDelegate, HXHQTabsViewDataSource>\n@property (nonatomic, strong) UIView *upSpaceView;\n@property (nonatomic, strong) UIView *lineView;\n\n@property (nonatomic, strong) UIView *spaceView;\n@property (nonatomic, strong) UIView *downSpaceView;\n\n@property (nonatomic, strong) HXFenshiSetting *fenshiSetting;\n@property (nonatomic, strong) HXKLineSetting *klineSetting;\n\n@property (nonatomic, strong) NSTimer *openTimer;\n\n@end\n\n@implementation HXFenshiPeriodView\n\n- (void)dealloc {\n    if (_openTimer) {\n        [_openTimer invalidate];\n        _openTimer = nil;\n    }\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (instancetype)init{\n    self = [super init];\n    if (self) {\n        HXFenshiPeriodPresenter *presenter = [[HXFenshiPeriodPresenter alloc] init];\n        presenter.view = self;\n        self.presenter = presenter;\n        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(userDidTakeScreenShot:) name:UIApplicationUserDidTakeScreenshotNotification object:nil];\n        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(openXianfengxuangu) name:@\"DealWithJCMM\" object:nil];\n        \n        //进入分时页面清除价格画线数据，使用分时页面价格\n        [HXFenshiContentViewTradePresenter shareInstance].priceParams = nil;\n        [HXKlineContentViewTradePresenter shareInstance].priceParams = nil;\n    }\n    return self;\n}\n\n/// 手势拦截 不切换股票\n- (void)gesture{}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = FOREGROUND_COLOR_NORMAL;\n    [self.view setBackgroundColor:FOREGROUND_COLOR_NORMAL theme:ThemeVersionNormal];\n    [self.view setBackgroundColor:FOREGROUND_COLOR_NIGHT theme:ThemeVersionNight];\n    [self.view addSubview:self.periodContainer];\n    [self.periodContainer addSubview:self.upSpaceView];\n    [self.periodContainer addSubview:self.segmentEditContainer];\n    [self.periodContainer addSubview:self.internalPeriodView];\n    [self.periodContainer addSubview:self.lineView];\n    [self.periodContainer addSubview:self.pageContainerView];\n    [self.periodContainer addSubview:self.spaceView];\n    [self.periodContainer addSubview:self.downSpaceView];\n    [self setupLayout];\n    [ThemeVersionManager changeTheme:self.view];\n    [self.upSpaceView changeTheme];\n    /// 手势拦截 不切换股票\n    UIPanGestureRecognizer *gesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(gesture)];\n    [self.view addGestureRecognizer:gesture];\n    if ([self.internalPeriodView conformsToProtocol:@protocol(HXFenshiMorePeriodViewDelegate)]) {\n        self.morePeriodViewDelegate =(id<HXFenshiMorePeriodViewDelegate>)self.internalPeriodView; //更多周期视图tab代理\n    }\n}\n\n- (void)setupLayout {\n    [_periodContainer mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.edges.equalTo(self.view);\n    }];\n    [_upSpaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSpaceHeight);\n    }];\n    [_segmentEditContainer mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.upSpaceView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSegmentTitleHeight);\n    }];\n    [_internalPeriodView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.segmentEditContainer.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSegmentTitleHeight);\n    }];\n    [_lineView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.internalPeriodView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(0.5);\n    }];\n    [_pageContainerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.lineView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n    }];\n    [_spaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.pageContainerView.mas_bottom);\n        make.left.right.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodBottomSpaceHeight);\n    }];\n    [_downSpaceView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.spaceView.mas_bottom);\n        make.left.right.bottom.equalTo(self.periodContainer);\n        make.height.mas_equalTo(kFenShiPeriodSpaceHeight);\n    }];\n}\n\n- (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n    // 放在willappear 股票切换需要同步一些状态\n    [_presenter loadWithStockDetailContextModel:_stockDetailContextModel];\n    // 同步更多的状态\n    [self setMorePeriodSelectedIndexWithIndex:[_presenter selectedHideItemIndex]];\n    // 本次进程内获取更多周期开启状态\n    BOOL isOpen = [HXKlinePublicProxy isMorePeriodOnOpen];\n    _internalPeriodView.hidden = !isOpen;\n\n    // 重载数据源\n    [self reloadDataWithSelectedIndex:_presenter.memorySelectedIndex];\n    \n    [_internalPeriodView reload","infill":"：%@\", periodKey);\n    NSLog(\"当前分时","suffix":"类型：%@\", \n    [_screenShotTool userDidTakeScreenShot:notification];\n}\n\n#pragma mark - HXFenshiPeriodViewProtocol presenter数据回调\n\n- (void)reloadDataWithSelectedIndex:(NSInteger)index{\n    _segmentView.titleArray = [self getTitleArray];\n    _segmentView.typeArray = _presenter.typeArray;\n    [self changeDataSource];\n    if (_internalPeriodView.hidden || _internalPeriodView.selectedIndex == -1) {\n        [_segmentView reloadDataWithIndex:index];\n    } else {\n        [_segmentView reloadMoreDataWithSelectIndex:kOuter_count reloadIndex:_internalPeriodView.selectedIndex+kOuter_count];\n    }\n}\n\n- (void)changeDataSource {\n    _dataSourceType = [self curDataSourceType];\n    //移除多余模块 修改数据源 重载\n    [_presenter removeInvalidContent];\n    if (_dataSourceType == PeriodDataSourceTypeOneMoreLast) {\n        [_presenter addContentWithIdentify:kIdentify_placeholder];\n    } else if (_dataSourceType == PeriodDataSourceTypeOneMoreNotLast) {\n        [_presenter addContentWithIdentify:[_presenter.tabKeyHideConfigs safetyObjectAtIndex:_internalPeriodView.selectedIndex+1]];\n    }\n}\n\n- (void)reloadMorePeriod {\n    [_internalPeriodView reloadData];\n}\n\n- (void)reloadTitleAtIndex:(NSInteger)index{\n    _segmentView.titleArray = [self getTitleArray];\n    _segmentView.typeArray = _presenter.typeArray;\n    if (index == kOuter_count) {\n        [_segmentView reloadItemImmediatelyAtIndex:index];\n    } else {\n        [_segmentView reloadItemAtIndex:index];\n    }\n}\n\n- (void)updateHeightAndReload:(BOOL)animated {\n    [self updateHeight];\n    [_moduleDynamicUIDelegate updateContent:self animated:animated];\n}\n\n#pragma mark - private\n\n- (void)_settingButtonAction:(UIButton *)sender {\n    id<HXFSPeriodContentViewProtocol> obj = (id<HXFSPeriodContentViewProtocol>)[_pageContainerView currentPageContent];\n    NSString *periodKey = obj.moduleIdentify;\n    BOOL supportBarrageSetting = [obj respondsToSelector:@selector(supportBarrageSetting)] && [obj supportBarrageSetting];\n    CGPoint startPoint = [sender convertPoint:CGPointMake(sender.bounds.size.width / 2.0, sender.bounds.size.height) toView:nil];\n    if ([periodKey isEqualToString:kIdentify_fenshi]) {\n        [self.fenshiSetting openSettingWithPageData:_stockDetailContextModel.pageParams page:_stockDetailContextModel.pageId periodIdentify:periodKey supportBarrage: supportBarrageSetting startPoint:startPoint];\n    } else {\n        [self.klineSetting openSettingWithPageData:_stockDetailContextModel.pageParams page:_stockDetailContextModel.pageId periodIdentify:periodKey supportBarrage:supportBarrageSetting startPoint:startPoint];\n    }\n}\n\n/// 切换周期\n- (void)switchPeriodWith:(nonnull NSString *)periodIdentify withType:(nonnull NSString *)type {\n    NSString *oldPeriodIdentify = _stockDetailContextModel.memoryStatusModel.periodIdentify;\n    /// 点击的是“我知道了”，周期不切换\n    if ([type isEqualToString:@\"ISee\"]) {\n        if ([oldPeriodIdentify isEqualToString:kIdentify_1d]) {\n            ///当前周期为日k，刷新插件\n            [self handleKlineSettingEvent];\n        }\n        return;\n    }\n    \n    /// 如果是日k，点击goto，直接刷新策略信号\n    if ([oldPeriodIdentify isEqualToString:kIdentify_1d] && ![type isEqualToString:@\"ISee\"]) {\n        ///当前周期为日k，刷新插件\n        [self handleKlineSettingEvent];\n        /// 个股详情页滚动到顶部\n        [[NSNotificationCenter defaultCenter] postNotificationName:FuncStockDetailScrollToFenShiTopNotify object:nil];\n        return;\n    }\n    \n    /// 其他场景都走周期切换\n    _stockDetailContextModel.memoryStatusModel.periodIdentify = periodIdentify;\n    // 股票切换需要同步一些状态\n    [_presenter loadWithStockDetailContextModel:_stockDetailContextModel];\n    // 同步更多的状态\n    [self setMorePeriodSelectedIndexWithIndex:[_presenter selectedHideItemIndex]];\n    // 重载数据源\n    [self reloadDataWithSelectedIndex:_presenter.memorySelectedIndex];\n    [_internalPeriodView reloadData]; // 内部周期tab\n    \n    ///jira 36741 修改周期切换后k线指标遮挡问题\n    [self openXianfengxuangu];\n    [self updateHeightAndReload:YES];\n    /// 个股详情页滚动到顶部\n    [[NSNotificationCenter defaultCenter] postNotificationName:FuncStockDetailScrollToFenShiTopNotify object:nil];\n}\n\n/// 云存储设置更新后，刷新当前周期\n- (void)refreshCurrentPeriod {\n    // 股票切换需要同步一些状态\n    [_presenter loadWithStockDetailContextModel:_stockDetailContextModel];\n    // 同步更多的状态\n    [self setMorePeriodSelectedIndexWithIndex:[_presenter selectedHideItemIndex]];\n    // 重载数据源\n    [self reloadDataWithSelectedIndex:_presenter.memorySelectedIndex];\n    [_internalPeriodView reloadData]; // 内部周期tab\n}\n\n- (void)handleKlineSettingEvent {\n    HXKlineSettingEvent *klineSetting = [HXKLine klineSettingWithStockCode:_stockDetailContextModel.stockCode marketCode:_stockDetailContextModel.marketId];\n    klineSetting.isShowAIBandRandar = [AMUIPublicProxy aiBandRadarState];\n    klineSetting.isMagic9 = [AMUIPublicProxy magicSeqState];\n    [klineSetting resetChanged];\n    klineSetting.isChangePlugin = YES;\n    klineSetting.marketCode = _stockDetailContextModel.marketId;\n    klineSetting.stockCode = _stockDetailContextModel.stockCode;\n    klineSetting.klineperiod = AnalisysForDay;\n    klineSetting.pageId = _stockDetailContextModel.pageId;\n    [[HXEventBus defaultEventBus] postEvent:klineSetting];\n}\n\n- (void)updateHeight {\n    id<HXFSPeriodContentViewProtocol> pageContent = [self getPeriodCurrentContent];\n    if (!pageContent) {\n        // 点击切换股票 股票详情已经layout触发willAppear时周期willAppear还未调用 没有周期数据\n        // 只是记录_dynamicHeight 等待willAppear触发\n        return;\n    }\n    if (self.dynamicHeight == 0) {\n        // push 滑动切换股票 周期已经willAppear有内容，股票详情layout后设置模块高度，计算周期高度\n        // 等待股票详情layout触发\n        return;\n    }\n    // 根据dynamicHeight计算当前模块的高度\n    pageContent.dynamicHeight = [self calculatePageContentDynamicHeight:self.dynamicHeight];\n    CGFloat pageContainerViewHeight = [pageContent hx_contentViewHeight];\n    _height = [self calculateHeightWithContentHeight:pageContainerViewHeight];\n}\n\n- (CGFloat)calculatePageContentDynamicHeight:(CGFloat)dynamicHeight {\n    CGFloat periodMoreHeight = 0.0;\n    if (!self.internalPeriodView.isHidden) {\n        periodMoreHeight = kFenShiPeriodMore;\n    }\n    return dynamicHeight - kFenShiPeriodSpaceHeight * 2 - kFenShiPeriodBottomSpaceHeight - kFenShiPeriodSegmentTitleHeight - periodMoreHeight;\n}\n\n- (CGFloat)calculateHeightWithContentHeight:(CGFloat)contentHeight{\n    CGFloat periodMoreHeight = 0.0;\n    if (!self.internalPeriodView.isHidden) {\n        periodMoreHeight = kFenShiPeriodMore;\n    }\n    return kFenShiPeriodSpaceHeight + kFenShiPeriodSegmentTitleHeight + periodMoreHeight + contentHeight + kFenShiPeriodBottomSpaceHeight + kFenShiPeriodSpaceHeight;\n}\n\n/// 是否为排序下标\n- (BOOL)isSortIndex:(NSIndexPath *)indexPath {\n    if (indexPath == nil) {\n        return NO;\n    }\n    NSUInteger sortIndex = [_presenter.tabKeyHideConfigs indexOfObject:kIdentify_sort];\n    return  sortIndex != NSNotFound && indexPath.row == sortIndex;\n}\n\n- (void)setMorePeriodSelectedIndexWithIndex:(NSInteger)index {\n    [_internalPeriodView setSelectedIndex:index];\n}\n\n#pragma mark Period change\n\n/// 美股盘前盘后盘中切换\n/// 刷新标题 由_presenter监听回调刷新\n/// 分时 盘口页面已监听通知\n- (void)changeFenShiItemAtIndex:(NSInteger)index {\n    if ([NSDKPreAfterTool supportUSPreAfter:_stockDetailContextModel.marketId] == NO) {\n        [[[ToastView alloc] initWithText:@\"OTC暂不支持盘前盘后切换\"] show];\n        return;\n    }\n    \n    NSArray<NSNumber *> *usTypeArray = @[@(PreMarket_TimeZone),@(Intraday_TimeZone),@(AfterHours_TimeZone)];\n    NSMutableArray *modelArray = [NSMutableArray arrayWithCapacity:usTypeArray.count];\n    NSString *defaultCode = @\"\";\n    for (NSNumber *obj in usTypeArray) {\n        TradeTimeZone tradeTimeZone = (TradeTimeZone)[obj integerValue];\n        NSString *code = [NSString stringWithFormat:@\"%ld\",[obj integerValue]];\n        if (_presenter.tradeType == tradeTimeZone) {\n            defaultCode = code;\n        }\n        NSString *name = [_presenter innerTitleForNSDKTradeType:tradeTimeZone];\n        HUOptionModel *model = [HUOptionModel modelWithName:name code:code params:nil];\n        [modelArray safetyAddObject:model];\n    }\n    ","relevantFile":"","relevantFileList":[],"filePath":"HXFenshiPeriodView.mm","template":"objective-cpp","multiRes":{"hipilot":"data]; // 内部周期tab\n}\n\n- (void)userDidTakeScreenShot:(NSNotification *)notification {\n    NSLog(@\"用户截屏  模块","deepseek-chat-lite":"Data]; // 内部周期tab","CodeQwen2.5-7B":"Data];","copilot":"：%@\", periodKey);\n    NSLog(\"当前分时"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\n// ","infill":"static const double LJMarketUniversalRequestTimeout ","suffix":"= 10;\nstatic const double LJMarketUniversalRequestTimeout = 10\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (void)queryMarketWithCodeList:(NSArray *)codeList\n                     marketList:(NSArray *)marketList\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    if (codeList == nil || codeList.count == 0) {\n        return;\n    }\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                               @\"20,21,69,70\"];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int) self.nProtocolID paramsDict:requestDic pageId:(int) self.nPageID];\n        request.timeoutInterval = 10;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n","relevantFile":"<file_path>HXTCPBusiness.mm\n//\n//  HXTCPBusiness.m\n//  HXFutures\n//\n//  Created by hexin on 15/12/16.\n//  Copyright (c) 2015年 hexin. All rights reserved.\n//\n\n#import \"HXTCPBusiness.h\"\n#import <EQSettingVariables/SettingVariables.h>\n#import \"EQMobileProtocal.h\"\n#import \"LJCustomizedUITools.h\"\n#import \"HXEnvConfigManager.h\"\n#import <HXCore/EQCurveObj.h>\n\nstatic NSString * const kFailedConnectServer = @\"连接同步服务器失败\";\n\nstatic NSString * const kNetworkDisconnect = @\"网络连接已断开\";\n\n#define INVALIDE_VALUE\t0xFFFF\n\nextern NSString* CopyEQStringToNsString(CEQString16* pEQsrc);\n\n@implementation HXTCPBusiness\n\n#pragma mark - life cycle\n- (instancetype)init {\n    if(self = [super init]) {\n        _instanceId = INVALIDE_VALUE;\n        _businessType = BUSINESS_NONE;\n        //注册通知，如果网络连接断开，那么需要告诉我\n        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleNetworkOP:) name:NETWORK_TYPE object:nil];\n    }\n    \n    return self;\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n#pragma mark - Public Methods\n- (void)handleNetworkOP:(NSNotification *)notice {\n    NetworkType networkType = NetworkErrorTypeNone;\n    NSDictionary *param = notice.userInfo;\n    if(param && [param isKindOfClass:[NSDictionary class]]) {\n        networkType = (NetworkType)[[NSString safeGetValue:param[NETWORK_TYPE]] integerValue];\n    }\n    if(networkType == NetworkErrorTypeDisconnect) {\n        [[UIApplication sharedApplication].delegate.window makeToast:NetworkDisconnect duration:2 position:CSToastPositionCenter title:nil];\n    } else if(networkType == NetworkErrorTypeConnectAllServerFailed) {\n        [[UIApplication sharedApplication].delegate.window makeToast:kFailedConnectServer duration:2 position:CSToastPositionCenter title:nil];\n    }\n}\n\n- (BOOL)ProcessTipAndSwitchId:(void *)pData {\n    CEQStuffTextStruct* pStuffData = (CEQStuffTextStruct *)pData;\n    if(pStuffData != NULL) {\n        CEQString16* pContent = pStuffData->GetStrText();\n        //        EQINT\tnId = pStuffData->GetTextId();\n\n LJMarketUniversalRequest.m\n HXFutures\n\n Created by lilubin on 2024/6/28.\n Copyright © 2024 hexin. All rights reserved.","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"static const int LJMarketUniversalRequestTryCount ","deepseek-chat-lite":"static const int LJMarketUniversalRequestTimeout ","CodeQwen2.5-7B":"static const int LJMarketUniversalRequestProtocolID = 4106;","copilot":"static const double LJMarketUniversalRequestTimeout "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList","infill":"\n                    columnArray:(NSArray<NSString *> ","suffix":"*)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    // if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0\n        return;\n    }\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                               @\"20,21,69,70\"];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n","relevantFile":"<file_path>HXTCPBusiness.mm\n//\n//  HXTCPBusiness.m\n//  HXFutures\n//\n//  Created by hexin on 15/12/16.\n//  Copyright (c) 2015年 hexin. All rights reserved.\n//\n\n#import \"HXTCPBusiness.h\"\n#import <EQSettingVariables/SettingVariables.h>\n#import \"EQMobileProtocal.h\"\n#import \"LJCustomizedUITools.h\"\n#import \"HXEnvConfigManager.h\"\n#import <HXCore/EQCurveObj.h>\n\nstatic NSString * const kFailedConnectServer = @\"连接同步服务器失败\";\n\nstatic NSString * const kNetworkDisconnect = @\"网络连接已断开\";\n\n#define INVALIDE_VALUE\t0xFFFF\n\nextern NSString* CopyEQStringToNsString(CEQString16* pEQsrc);\n\n@implementation HXTCPBusiness\n\n#pragma mark - life cycle\n- (instancetype)init {\n    if(self = [super init]) {\n        _instanceId = INVALIDE_VALUE;\n        _businessType = BUSINESS_NONE;\n        //注册通知，如果网络连接断开，那么需要告诉我\n        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleNetworkOP:) name:NETWORK_TYPE object:nil];\n    }\n    \n    return self;\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n#pragma mark - Public Methods\n- (void)handleNetworkOP:(NSNotification *)notice {\n    NetworkType networkType = NetworkErrorTypeNone;\n    NSDictionary *param = notice.userInfo;\n    if(param && [param isKindOfClass:[NSDictionary class]]) {\n        networkType = (NetworkType)[[NSString safeGetValue:param[NETWORK_TYPE]] integerValue];\n    }\n    if(networkType == NetworkErrorTypeDisconnect) {\n        [[UIApplication sharedApplication].delegate.window makeToast:NetworkDisconnect duration:2 position:CSToastPositionCenter title:nil];\n    } else if(networkType == NetworkErrorTypeConnectAllServerFailed) {\n        [[UIApplication sharedApplication].delegate.window makeToast:kFailedConnectServer duration:2 position:CSToastPositionCenter title:nil];\n    }\n}\n\n- (BOOL)ProcessTipAndSwitchId:(void *)pData {\n    CEQStuffTextStruct* pStuffData = (CEQStuffTextStruct *)pData;\n    if(pStuffData != NULL) {\n        CEQString16* pContent = pStuffData->GetStrText();\n        //        EQINT\tnId = pStuffData->GetTextId();\n\n LJMarketUniversalRequest.m\n HXFutures\n\n Created by lilubin on 2024/6/28.\n Copyright © 2024 hexin. All rights reserved.","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":":(NSArray<NSString *>","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"\n                    columnArray:(NSArray<NSString *> "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                    columnArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {","infill":"[self doneBusiness:DOBUSINESS_FAILED];\n       ","suffix":" return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString' '\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                               @\"20,21,69,70\"];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n","relevantFile":"<file_path>HXTCPBusiness.mm\n//\n//  HXTCPBusiness.m\n//  HXFutures\n//\n//  Created by hexin on 15/12/16.\n//  Copyright (c) 2015年 hexin. All rights reserved.\n//\n\n#import \"HXTCPBusiness.h\"\n#import <EQSettingVariables/SettingVariables.h>\n#import \"EQMobileProtocal.h\"\n#import \"LJCustomizedUITools.h\"\n#import \"HXEnvConfigManager.h\"\n#import <HXCore/EQCurveObj.h>\n\nstatic NSString * const kFailedConnectServer = @\"连接同步服务器失败\";\n\nstatic NSString * const kNetworkDisconnect = @\"网络连接已断开\";\n\n#define INVALIDE_VALUE\t0xFFFF\n\nextern NSString* CopyEQStringToNsString(CEQString16* pEQsrc);\n\n@implementation HXTCPBusiness\n\n#pragma mark - life cycle\n- (instancetype)init {\n    if(self = [super init]) {\n        _instanceId = INVALIDE_VALUE;\n        _businessType = BUSINESS_NONE;\n        //注册通知，如果网络连接断开，那么需要告诉我\n        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleNetworkOP:) name:NETWORK_TYPE object:nil];\n    }\n    \n    return self;\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n#pragma mark - Public Methods\n- (void)handleNetworkOP:(NSNotification *)notice {\n    NetworkType networkType = NetworkErrorTypeNone;\n    NSDictionary *param = notice.userInfo;\n    if(param && [param isKindOfClass:[NSDictionary class]]) {\n        networkType = (NetworkType)[[NSString safeGetValue:param[NETWORK_TYPE]] integerValue];\n    }\n    if(networkType == NetworkErrorTypeDisconnect) {\n        [[UIApplication sharedApplication].delegate.window makeToast:NetworkDisconnect duration:2 position:CSToastPositionCenter title:nil];\n    } else if(networkType == NetworkErrorTypeConnectAllServerFailed) {\n        [[UIApplication sharedApplication].delegate.window makeToast:kFailedConnectServer duration:2 position:CSToastPositionCenter title:nil];\n    }\n}\n\n- (BOOL)ProcessTipAndSwitchId:(void *)pData {\n    CEQStuffTextStruct* pStuffData = (CEQStuffTextStruct *)pData;\n    if(pStuffData != NULL) {\n        CEQString16* pContent = pStuffData->GetStrText();\n        //        EQINT\tnId = pStuffData->GetTextId();\n\n LJMarketUniversalRequest.m\n HXFutures\n\n Created by lilubin on 2024/6/28.\n Copyright © 2024 hexin. All rights reserved.","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"\\\n       ","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"[self doneBusiness:DOBUSINESS_FAILED];\n       "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                    columnArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = ","infill":"\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString","suffix":" *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                               @\"20,21,69,70\"];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"[LJMarketUniversalRequest getColumnParamStringWithArray:columnArray];\n    \n    if (self.contentString.length == 0) {\n        [self requestRemoteDataWithCodeListString:codeListString columnArray:columnNoParamString];\n    } else {\n","deepseek-chat-lite":"[columnArray componentsJoinedByString:@\",\"];","CodeQwen2.5-7B":"[Tools combineColumnArray:columnArray];","copilot":"\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                               @\"20,21,69,70\"];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self que","infill":"ryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:@[@\"20\", @\"21\", @\"69\", @\"70\"]\n                    ","suffix":" successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"ryMarketWithCodeList:codeList\n                     marketList:marketList\n                  columnNoArray:@[@\"2\",@\"4\",@\"6\",@\"32\",@\"34\",@\"36\",@\"38\",@\"40\",@\"64","deepseek-chat-lite":"ryMarketWithCodeList:codeList","CodeQwen2.5-7B":"ryMarketWithCodeList:codeList","copilot":"ryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:@[@\"20\", @\"21\", @\"69\", @\"70\"]\n                    "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                               @\"20,21,69,70\"];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeL","infill":"ist:(nonnull NSArray<NSString *> *)codeList \n                     mar","suffix":"ketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"ist:(nonnull NSArray<NSString *> *)codeList\n                     mar","deepseek-chat-lite":"ist:(nonnull NSArray<NSString *> *)codeList","CodeQwen2.5-7B":"ist:(nonnull NSArray<NSString *> *)codeList","copilot":"ist:(nonnull NSArray<NSString *> *)codeList \n                     mar"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                               @\"20,21,69,70\"];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// ","infill":"\nstatic NSArray * const columnN","suffix":"oArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"dataitem 为 20,21,69,70 的组合 1：持仓情况 2：当日收益 3：历史收益 4：风险水平\nstatic NSArray<NSString *> *columnN","deepseek-chat-lite":"默认列","CodeQwen2.5-7B":"请求数据：20,21,69,70","copilot":"\nstatic NSArray * const columnN"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    \n    NSMuta","infill":"bleDictionary<NSString *, NSString *> *resultMap","suffix":" = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"bleDictionary *resultMap","deepseek-chat-lite":"bleDictionary *resultMap","CodeQwen2.5-7B":"bleDictionary *resultMap<|file_sep|><|fim_prefix|>/HexinJiaoyi/HexinJiaoyi/HexinJiaoyi/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model/Model","copilot":"bleDictionary<NSString *, NSString *> *resultMap"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    f","infill":"or (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *codeListString = codeDictionary[market];\n        if (codeListString.length == 0) {\n            codeListString = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            codeListString = [codeListString stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [codeDictionary setObject:codeListString forKey:market];\n    }\n    ","suffix":"\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        [codeDictionary setObject:@\"\" forKey:code];\n    }","deepseek-chat-lite":"or (NSString *code in codeList) {","CodeQwen2.5-7B":"or (NSString *code in codeList) {","copilot":"or (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *codeListString = codeDictionary[market];\n        if (codeListString.length == 0) {\n            codeListString = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            codeListString = [codeListString stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [codeDictionary setObject:codeListString forKey:market];\n    }\n    "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;","infill":"marketList = codeDictionary.allValues;\n   ","suffix":" \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n@end\n","relevantFile":"<file_path>HXTCPBusiness.mm\n    if(param && [param isKindOfClass:[NSDictionary class]]) {\n        networkType = (NetworkType)[[NSString safeGetValue:param[NETWORK_TYPE]] integerValue];\n    }\n    if(networkType == NetworkErrorTypeDisconnect) {\n        [[UIApplication sharedApplication].delegate.window makeToast:NetworkDisconnect duration:2 position:CSToastPositionCenter title:nil];\n    } else if(networkType == NetworkErrorTypeConnectAllServerFailed) {\n        [[UIApplication sharedApplication].delegate.window makeToast:kFailedConnectServer duration:2 position:CSToastPositionCenter title:nil];\n    }\n}\n\n- (BOOL)ProcessTipAndSwitchId:(void *)pData {\n    CEQStuffTextStruct* pStuffData = (CEQStuffTextStruct *)pData;\n    if(pStuffData != NULL) {\n        CEQString16* pContent = pStuffData->GetStrText();\n        //        EQINT\tnId = pStuffData->GetTextId();\n        EQINT\ttype = pStuffData->GetType();\n        //处理状态跳转，弹出提示框\n        if(type == TEXT_TIP ||type == TEXT_DLG) {\n            if(pContent != NULL && pContent->GetLength() > 0) {\n                NSString *tipStr = CopyEQStringToNsString(pContent);\n                if ((tipStr != nil) && (![tipStr isKindOfClass:[NSNull class]]) && ([tipStr length] > 0)) {\n                    [LJCustomizedUITools alertControllerWithTitle:@\"提示\" message:tipStr cancelTitle:@\"\" OKTitle:@\"我知道了\" cancelHandler:nil OKHandler:^(UIAlertAction *action) {\n                    } target:nil];\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\n- (void)doneBusiness:(NSInteger)returnStatus {\n    if (returnStatus == DOBUSINESS_SUCCESS) {\n        if (self.successBlock) {\n            self.successBlock();\n        }\n    } else if (returnStatus == DOBUSINESS_FAILED) {\n        if (self.failedBlock) {\n            self.failedBlock();\n        }\n    }\n    \n    if([self.delegate respondsToSelector:@selector(DoneBusiness:status:)]) {\n        [self.delegate DoneBusiness:_businessType status:returnStatus];\n    }\n}\n\n- (unsigned short) getInstanceId {\n    if(_instanceId == INVALIDE_VALUE) {\n        _instanceId = [HXEnvConfigManager getComponentInstanceId];\n    }\n    \n    return _instanceId;\n}\n\n- (void)unRegisterRealData {\n    //什么都不做，子类具体实现\n}\n\n- (void)setReceivebData:(StuffTableModel *)tableModel {\n\n LJMarketUniversalRequest.m\n HXFutures\n\n Created by lilubin on 2024/6/28.\n Copyright © 2024 hexin. All rights reserved.","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"codeList = [codeList arrayByAddingObjectsFromArray:codeList];","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"marketList = codeDictionary.allValues;\n   "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {","infill":"  if (self.marketDic == nil) {\n        return @[];\n   ","suffix":" }\n    \n    \n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"return nil;","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"  if (self.marketDic == nil) {\n        return @[];\n   "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {","infill":" if (self.marketDic == nil) {\n        return @[];\n    }\n    \n    NSArray *sto\n}\n\n- (void)queryMark","suffix":"etWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"\n    NSMutableArray *array = [NSMutableArray array];\n    for (NSString *column in columnNoArray) {\n        [array addObject:[self.marketDic objectForKey:column]];\n    }\n    \n    return [NSArray arrayWithArray:array","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":" if (self.marketDic == nil) {\n        return @[];\n    }\n    \n    NSArray *sto\n}\n\n- (void)queryMark"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];","infill":"if (index == NSNotFound) {\n        return @[];\n    }\n   ","suffix":" \n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    \n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"if (index == NSNotFound) {\n        return @[];\n    }","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"if (index == NSNotFound) {\n        return @[];\n    }\n   "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];","infill":"for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n   ","suffix":" \n    return r;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"for (NSString *columnNo in columnNoArray) {\n        NSString *r = [self.marketDic thsObjectForKey:columnNo];\n        [resultArray addObject:r];\n    }","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n   "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    ","infill":"NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n   ","suffix":" \n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in columnNoArray) {\n        NSArray *array = [self.marketDic thsArrayForKey:columnNo];\n       ","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n   "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = ","infill":"[self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) ","suffix":"{\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n    \n    return resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"[self.marketDic thsArrayForKey:@\"1\"];\n    if (showCodeArray == nil)","deepseek-chat-lite":"[showCode componentsSeparatedByString:@\".\"];","CodeQwen2.5-7B":"[self.contentString thsArrayForKey:@\"showcode\"];","copilot":"[self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArra","infill":"y.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArra","suffix":"y *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n    \n    return resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"y.containsObject:showCode) {\n        int index = [showCodeArray indexOfObject:showCode];\n        return [self getRspValueWithColumnNoArray:columnNoArray index:index];\n    }\n    \n    return nil;\n}\n\n- (NSArray","deepseek-chat-lite":"y.count == 0) {","CodeQwen2.5-7B":"y.count == 0) {","copilot":"y.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArra"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArray","infill":" *resultArray = [[NSMut","suffix":"ableArray alloc] initWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n    \n    return resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"*resultArray = [[NSMut","deepseek-chat-lite":" *resultArray = [[NSMut","CodeQwen2.5-7B":" *resultArray = [[NSMut<|file_sep|><|fim_prefix|>/HexinSDK/HexinSDK/Classes/Model/Market/LJMarketRequestForClearPosition.h","copilot":" *resultArray = [[NSMut"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n    \n    return resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBl","infill":"return result;\n}\n\n","suffix":"@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"ock:(void (^)(void))successBlock \n                    failedBlock:(void (^)(void))failedBlock {\n    [self queryMarketWithCodeList:codeList\n                  marketList:marketList\n               columnNoArray:columnNoArray\n              successBlock:successBlock\n               failed","deepseek-chat-lite":"ock:(nonnull void (^)(void))successBlock ","CodeQwen2.5-7B":"ock:(void (^ _Nullable)(NSArray<NSArray *> * _Nonnull))successBlock","copilot":"return result;\n}\n\n"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n    \n    return resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n@interface LJMarketClearPositionRspModel : NSObject\n\n@prope","infill":"rty (copy, nonatomic) NSString *showCode;\n\n\n\n","suffix":"@end\n\n@implementation LJMarketClearPositionRspModel\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n- (nonnull NSArray<NSArray *> *)getRspValueWithCodeList:(nonnull NSArray<NSString *> *)codeList {\n    NSArray *result = [self getRspValueWithColumnNoArray:columnNoArray codeList:codeList];\n    return result;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"rty (nonatomic, assign) int buyPrice;   // 买价\n@property (nonatomic, assign) int sellPrice;  // 卖价\n@property (nonatomic, assign) int tingPrice;  // 涨停价\n@property (nonatomic, assign)","deepseek-chat-lite":"rty (nonatomic, strong) NSArray *dataArray;","CodeQwen2.5-7B":"rty (nonatomic, strong) NSArray<NSString *> *buyPriceArray;","copilot":"rty (copy, nonatomic) NSString *showCode;\n\n\n\n"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n    \n    return resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n@interface LJMarketClearPositionRspModel : NSObject","infill":"@property (copy, nonatomic) NSString *showCode;\n","suffix":"/// 20:买价 21:卖价 69:涨停价 70:跌停价\n\n@property (copy, nonatomic) NSString *buyPrice;\n\n@property (copy, nonatomic) NSString *sellPrice;\n\n@property (copy, nonatomic) NSString *upLimitPrice;\n\n\n\n\n@end\n\n@implementation LJMarketClearPositionRspModel\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n- (nonnull NSArray<NSArray *> *)getRspValueWithCodeList:(nonnull NSArray<NSString *> *)codeList {\n    NSArray *result = [self getRspValueWithColumnNoArray:columnNoArray codeList:codeList];\n    return result;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"@property (copy, nonatomic) NSString *showCode;\n"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n    \n    return resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n@interface LJMarketClearPositionRspModel : NSObject\n\n@property (copy, nonatomic) NSString *showCode;\n/// 20:买价\n@property (copy, nona","infill":"tomic) NSString *buyPrice;\n/// 21:卖价\n@property ","suffix":"(copy, nonatomic) NSString *sellPrice;\n///  69:涨停价\n@property (copy, nonatomic) NSString *upLimitPrice;\n/// 70:跌停价\n@property (copy, nonatomic) NSString *downLimitPrice;\n\n\n@end\n\n@implementation LJMarketClearPositionRspModel\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n- (nonnull NSArray<NSArray *> *)getRspValueWithCodeList:(nonnull NSArray<NSString *> *)codeList {\n    NSArray *result = [self getRspValueWithColumnNoArray:columnNoArray codeList:codeList];\n    return result;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"tomic) NSString *buyPrice;\n/// 21:卖价","deepseek-chat-lite":"tomic) NSString *buyPrice;","CodeQwen2.5-7B":"tomic) NSString *buyPrice;","copilot":"tomic) NSString *buyPrice;\n/// 21:卖价\n@property "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n    \n    return resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n@interface LJMarketClearPositionRspModel : NSObject\n\n@property (copy, nonatomic) NSString *showCode;\n/// 20:买价\n@property (copy, nonatomic) NSString *buyPrice;\n/// 21:卖价\n@property (copy, nonatomic) NSString *sellPrice;\n/// 涨停价\n@property (copy, nonatomic) NSString *upLimitPrice;\n/// 跌停","infill":"价(70)\n@property (copy, nonatomic) NSString *downLimit","suffix":"Price;\n\n\n@end\n\n@implementation LJMarketClearPositionRspModel\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n- (nonnull NSArray<NSArray *> *)getRspValueWithCodeList:(nonnull NSArray<NSString *> *)codeList {\n    NSArray *result = [self getRspValueWithColumnNoArray:columnNoArray codeList:codeList];\n    return result;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"价","deepseek-chat-lite":"价","CodeQwen2.5-7B":"价","copilot":"价(70)\n@property (copy, nonatomic) NSString *downLimit"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n    \n    return resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n@interface LJMarketClearPositionRspModel : NSObject\n\n@property (copy, nonatomic) NSString *showCode;\n/// 20:买价\n@property (copy, nonatomic) NSString *buyPrice;\n/// 21:卖价\n@property (copy, nonatomic) NSString *sellPrice;\n///  69:涨停价\n@","infill":"property (copy, nonatomic) NSString *upLimitPrice;\n","suffix":"/// 跌停价(70)\n@property (copy, nonatomic) NSString *downLimitPrice;\n\n\n@end\n\n@implementation LJMarketClearPositionRspModel\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n- (nonnull NSArray<NSArray *> *)getRspValueWithCodeList:(nonnull NSArray<NSString *> *)codeList {\n    NSArray *result = [self getRspValueWithColumnNoArray:columnNoArray codeList:codeList];\n    return result;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"property (copy, nonatomic) NSString *limitPrice;","deepseek-chat-lite":"property (copy, nonatomic) NSString *upLimitPrice;","CodeQwen2.5-7B":"property (copy, nonatomic) NSString *upLimitPrice;","copilot":"property (copy, nonatomic) NSString *upLimitPrice;\n"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n    \n    return resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n@interface LJMarketClearPositionRspModel : NSObject\n\n@property (copy, nonatomic) NSString *showCode;\n/// 20:买价\n@property (copy, nonatomic) NSString *buyPrice;\n/// 21:卖价\n@property (c","infill":"opy, nonatomic) NSString *sellPrice;\n///  69:涨停价","suffix":"\n@property (copy, nonatomic) NSString *upLimitPrice;\n// /// 跌停价\n/// \n@property (copy, nonatomic) NSString *downLimitPrice;\n\n\n@end\n\n@implementation LJMarketClearPositionRspModel\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n- (nonnull NSArray<NSArray *> *)getRspValueWithCodeList:(nonnull NSArray<NSString *> *)codeList {\n    NSArray *result = [self getRspValueWithColumnNoArray:columnNoArray codeList:codeList];\n    return result;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"copy, nonatomic) NSString *sellPrice;\n// /// 涨停价","deepseek-chat-lite":"opy, nonatomic) NSString *sellPrice;","CodeQwen2.5-7B":"opy, nonatomic) NSString *sellPrice;","copilot":"opy, nonatomic) NSString *sellPrice;\n///  69:涨停价"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n    \n    return resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n@interface LJMarketClearPositionRspModel : NSObject\n\n@property (copy, nonatomic) NSString *showCode;\n/// 买价(20)\n@property (copy, nonatomic) NSString *buyPrice;\n/// 卖价(21)\n@property (copy, nonatomic) NSString *sellPrice;\n/// 涨停价(69)\n@property (copy, nonatomic) NSString *upLimitPrice;\n/// 跌停价(70)\n@property (copy, nonatomic) NSString","infill":"NSMutableArray *modelArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n   ","suffix":" \n    \n    return result;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"*downLimitPrice;\n\n- (instancetype)initWithShowCode:(NSString *)showCode buyPrice:(NSString *)buyPrice sellPrice:(NSString *)sellPrice upLimitPrice:(NSString *)upLimitPrice downLimitPrice:(NSString *)downLimitPrice;","deepseek-chat-lite":" *downLimitPrice;","CodeQwen2.5-7B":" *downLimitPrice;","copilot":"NSMutableArray *modelArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n   "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n    \n    return resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n@interface LJMarketClearPositionRspModel : NSObject\n\n@property (copy, nonatomic) NSString *showCode;\n/// 买价(20)\n@property (copy, nonatomic) NSString *buyPrice;\n/// 卖价(21)\n@property (copy, nonatomic) NSString *sellPrice;\n/// 涨停价(69)\n@property (copy, nonatomic) NSString *upLimitPrice;\n/// 跌停价(70)\n@property (copy, nonatomic) NSString","infill":"i < codeList.count; i++) {\n        NSArray *rspValueArray = resultData[i];\n        LJMarketClearPositionRspModel *model = [[LJMarketClearPositionRspModel alloc] init];\n        model.showCode = codeList[i];\n        model.buyPrice = rspValueArray[0];\n        model.sellPrice = rspValueArray[1];\n        model.upLimitPrice = rspValueArray[2];\n        model.downLimitPrice = rspValueArray[3];\n        [modelArray addObject:model];\n    }\n    \n    return mo","suffix":"delArray;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"*downLimitPrice;\n\n+ (NSArray<LJMarketClearPositionRspModel *> *)parseWithRspContent:(NSString *)rspContent {\n    NSArray *modelArray = [LJMarketUniversalRequest parseUniversalRspWithRspContent:","deepseek-chat-lite":" *downLimitPrice;","CodeQwen2.5-7B":" *downLimitPrice;","copilot":"i < codeList.count; i++) {\n        NSArray *rspValueArray = resultData[i];\n        LJMarketClearPositionRspModel *model = [[LJMarketClearPositionRspModel alloc] init];\n        model.showCode = codeList[i];\n        model.buyPrice = rspValueArray[0];\n        model.sellPrice = rspValueArray[1];\n        model.upLimitPrice = rspValueArray[2];\n        model.downLimitPrice = rspValueArray[3];\n        [modelArray addObject:model];\n    }\n    \n    return mo"}},{"prefix":"\n#import \"FuturesJiaoYiViewController.h\"\n\n#import \"BindTokenTipManager.h\"\n#import \"BuyOrSellActionView.h\"\n#import \"ConfirmXiaDanRequest.h\"\n#import \"FuturesNewMaiMaiPan.h\"\n#import \"GoldTradeConfirmView.h\"\n#import \"HXSearchStockViewController.h\"\n#import \"InputActionView.h\"\n#import \"JiaoYiTitleView.h\"\n#import \"LJHQDetailController.h\"\n#import \"SimulatedTradeRequestManager.h\"\n#import \"UserComment.h\"\n#import \"UserDefaultsPoolKeys.h\"\n#import \"WKWebViewController.h\"\n#import \"ZhiYingZhiSunAddOrModifyViewController.h\"\n#import <LJSelfStockManager/LJSelfStockManager.h>\n#import \"HXFuturesJiaoYiGeGuHangQingView.h\"\n#import \"HXHttpNetwork.h\"\n#import \"HXSwiftHeader.h\"\n#import \"HXTradeAccountRequest.h\"\n#import \"HXTradeRequestManager.h\"\n#import \"HXTradeRequestUtil.h\"\n#import <LJQuotation/LJBaoJiaFetcher.h>\n#import \"HXJumpModuleManager.h\"\n#import \"HXViewController+Protocols.h\"\n#import \"HangQingNewPriceForYingKuiRequest.h\"\n#import \"IQKeyboardManager.h\"\n#import \"LJBadgeManager.h\"\n#import \"LJBaojiaFetcher.h\"\n#import \"LJHQStandardPriceSetManager.h\"\n#import \"LJLocalURLConfig.h\"\n#import \"LJSceneWakeManager.h\"\n#import \"LJSystemGeneralContent.h\"\n#import \"LJTradeGeneralTools.h\"\n#import \"LJTradeTimerManage.h\"\n#import \"LJTradeTimerView.h\"\n#import \"PopMessageAddContractView.h\"\n#import \"QHTTimerTarget.h\"\n#import \"SimulateDealMaskManage.h\" //引导蒙版\n#import \"UIViewController+QMUI.h\"\n\n#import <HXBaseViewController/NavigationControllerEx.h>\n#import <HXDeviceInfo/HXDeviceDefine.h>\n#import <LJCategoryKit/NSDate+Utilities.h>\n#import <LJCategoryKit/UIScrollView+LJAdd.h>\n#import <LJConditionBindingManager/LJConditionBindingManager.h>\n#import <LJRedDotManager/LJRedDotManager.h>\n#import <LJSelfStockManager/LJSelfStockTool.h>\n#import <LJStockCodeTable/LJStockCodeTable.h>\n#import <LJStockCodeTable/LJStockInfoProvider.h>\n#import <LJUIKit/LJBadgeKit.h>\n#import <LJTradeRequest/HXTradeLoginManager.h>\n\n@import CTMediator;\n@import LJNumberTool;\n@import LJContractManager;\n@import LJDateTool;\n@import LJTradeUIComponent;\n@import LJTradeFunctionManager;\n@import LJContractManager;\n@import LJDynamicAlert;\n@import LJStockCodeTable;\n@import LJGridTrade_Category;\n@import LJTradeUIComponent;\n@import HXTradeDataManager;\n@import HXTradeDaily;\n@import LJTradeOrderService;\n@import LJTradeBusinessModel;\n@import LJTradeSetting;\n@import LJUserDefaultsPool;\n@import LJTradeSpecification;\n@import LJTradeAccountManager;\n@import HXAccountAnalysisPlugin;\n@import LJTradeManagement;\n@import LJContractChooseControl;\n@import LJTradeSettingPlugin;\n@import LJTradeManagementPlugin;\n@import LJDrawLineConditionPlugin;\n@import LJTradeLoginModulePlugin;\n@import LJEventDispatcher;\n\n#define XiaDanTitleViewHeight ((IS_IPHONE5) ? SW(26) : 26)\n#define InputViewHeight ((IS_IPHONE4 || IS_IPHONE5) ? SW(140) : 140)\n#define MaiMaiPanHeight ((IS_IPHONE4 || IS_IPHONE5) ? SW(90) : 90)\n#define TransactionHeight ((IS_IPHONE4 || IS_IPHONE5) ? SW(46) : 46)\n\n// 下拉分时\nconst CGFloat hangQingViewHeight = 128;\nconst CGFloat inputViewTop = 10;\n\nstatic NSString *const kPriceInvalid = @\"--\";\n\n/**\n 警告内容：函数未被使用\n 忽略原因：函数在宏定义中使用，但是Xcode没有检测出来\n */\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wunused-function\"\n\n/// 状态栏（含安全区域）和导航栏高度\nstatic CGFloat HXContainerHeight() {\n    return [LJDeviceHelper screenHeight] - [LJDeviceHelper statusBarAndNavigationBarHeight] - [HXDeviceDefine tabbarHeight];\n}\n\n#pragma clang diagnostic pop\n\n// 下拉分时\n#define FUNCTIONTABLETOP_Y (inputViewTop + InputViewHeight + 15 + TransactionHeight + 15 + hangQingViewHeight)\n\nstatic NSString *const simulateToast = @\"已切换至模拟大赛账号\";\nstatic NSString *const kOrderHandsCanNotBeZero = @\"下单手数不能为0\";\nstatic NSString *const kOrderPriceCanNotBeZero = @\"下单价格不能为0\";\nstatic NSString *const kNotAvaliablePosition = @\"该合约无持仓可平\";\nstatic NSString *const kGetPriceFailed = @\"获取价格失败\";\nstatic NSString *const kStopLossToOpenTip = @\"现已支持止损开仓\";\nstatic NSString *const kOptionUnSupportStopLossTip = @\"期权暂不支持止损开仓\";\nstatic NSString *const kArbitrageUnSupportStopLossTip = @\"标准套利暂不支持止损开仓\";\nstatic NSString *const kHadOrdered = @\"委托已提交\";\nstatic NSString *const kUnSupportStopLossToOpen = @\"当前账户暂不支持止损开仓\";\n/// 当前品种暂不支持创建止盈止损\nstatic NSString *const kCurrentVarietyNotSupportCreateStopLossProfit = @\"当前品种暂不支持创建止盈止损\";\n\nstatic CGFloat const kBadgeWidthHeight = 8.0;\n\nstatic NSString *const kConfirm = @\"确认\";\nstatic NSString *const kCancel = @\"取消\";\nstatic NSString *const kChooseStock = @\"选择合约\";\n\ntypedef NS_ENUM(NSInteger, RemoveNavigationSubview) {\n    kRemoveSubviewRefreshButton = 1, // 移除导航刷新按钮\n    kRemoveSubviewAll,               // 移除导航标题和转账子视图\n};\n\n/// 当前用户离开交易界面时的key值\nNS_INLINE NSString *HXTradeLeavingDateKey() {\n    HXTradeAccount *account = [HXTradeLoginManager currentAccount];\n    return [NSString stringWithFormat:@\"leaving.date.%@.%@\", account.qsid, account.accountId];\n}\n\n/// 线材合约代码\nstatic NSString *const kWR9999 = @\"wr9999\";\n/// 已经使用或者引导过 下单止损开仓功能\nstatic NSString *const kDidUseOrGuideStopLossToOpenKey = @\"didUseOrGuideStopLossToOpen\";\n/// 止损开仓功能上次是否显示\nstatic NSString *const kIsShowStopLossOpenLastTimeKey = @\"isShowStopLossOpenLastTime\";\n\n\n@interface FuturesJiaoYiViewController () <JiaoYiDelegate,\n                                           DoneBusinessDelegate,\n                                           HXSelectWuDangDataDelegate,\n                                           SelectTransactionTypeDelegate,\n                                           HXJiaoYiGeGuHangQingDelegate,\n                                           UIScrollViewDelegate,\n                                           HXNavigationControllerProtocol,\n                                           LJTradeTimerViewDelegate,\n                                           LJTradeTimerManageDelegate,\n                                           LJBaoJiaFetcherDelegate>\n\n/// 账号信息视图\n@property (nonatomic, strong) HXTradeAccountTitleView *accountTitleView;\n/// 导航栏操作视图\n@property (nonatomic, strong) UIView *navOperationView;\n\n/// 止损开仓提示气泡\n@property (nonatomic, strong) TipBubble *stopLossToOpenTipBubble;\n/// 是否需要进行 “止损开仓” 功能提示\n@property (nonatomic, assign) BOOL shouldGuideStopLossToOpen;\n\n/// 是否显示账号菜单\n@property (nonatomic, assign) BOOL isShowAccountListView;\n\n/// 行情视图\n@property (nonatomic, strong) HXFuturesJiaoYiGeGuHangQingView *hangQingView;\n/// 交易操作视图\n@property (nonatomic, strong) UIView *orderContainerView;\n/// 止损策略视图\n@property (nonatomic, strong) HXStopLossToOpenSetView *stopLossToOpenSetView;\n\n/// 期货、期权、套利同一个下单页时的仓位列表\n@property (nonatomic, strong) HXTradeListContainerViewController *tradeDatasContainerVc;\n/// 期货、期权、套利独立下单页面状态时的仓位列表\n@property (nonatomic, strong) HXTradeTypeListContainerController *listContentVC;\n\n/// 合约展示代码\n@property (nonatomic, copy) NSString *showCode;\n/// 合约名称\n@property (nonatomic, copy) NSString *stockName;\n/// 市场Id\n@property (nonatomic, copy) NSString *marketId;\n/// 是否是期权\n@property (nonatomic, assign, readonly) BOOL isOption;\n/// 期货合约\n@property (nonatomic, assign, readonly) BOOL isFutures;\n/// 是否是套利\n@property (nonatomic, assign) BOOL isArbitrage;\n/// 交易头部数据栏\n@property (nonatomic, strong) JiaoYiTitleView *assetTitleView;\n/// 整体视图容器 ScrollView\n@property (nonatomic, strong) UIScrollView *containerScrollView;\n/// 整体视图的容器视图\n@property (nonatomic, strong) UIView *containerView;\n/// 交易内容容器视图\n@property (nonatomic, strong) UIView *tradeContentView;\n/// 买多、卖空、平仓\n@property (nonatomic, strong) BuyOrSellActionView *transactionActionView;\n/// 买卖数据输入 操作视图 和 买卖盘\n@property (nonatomic, strong) InputActionView *orderInfoView;\n/// 买卖盘数据视图\n@property (nonatomic, strong) FuturesNewMaiMaiPan *marketInfoView;\n\n/// 确认下单请求接口\n@property (nonatomic, strong) ConfirmXiaDanRequest *confirmXiadanRequest;\n\n@property (nonatomic, strong) HXTradeBridgeViewModel *bridgeViewMode","infill":" [IQKeyboardManager sharedManager].enab","suffix":"le = NO;\n    self.navigationController.interactivePopGestureRecognizer.enabled = NO;\n    self.navigationController.interactivePopGestureRecognizer.delegate = nil;\n    if (_popWindowTimer && self.pauseDate && self.fireDate) {\n        float pauseTime = -1 * [self.pauseDate timeIntervalSinceNow];\n        [self.popWindowTimer setFireDate:[NSDate dateWithTimeInterval:pauseTime sinceDate:self.fireDate]];\n        self.pauseDate = nil;\n        self.fireDate = nil;\n    }\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(receivedTransactionReturn:) name:NOTIFI_TRANSACTION_RETURN_FIRST_RECEIVED object:nil];\n    if (TransactionSettings.promptAutoAddPositionToSelfStockStatus == PromptAddPositionToSelfStockStatuePromptWhenAppearPage) {\n        if (!TransactionSettings.autoAddContract) {\n            [self promptAddContract];\n        } else {\n            TransactionSettings.promptAutoAddPositionToSelfStockStatus = PromptAddPositionToSelfStockStatueDidPrompt;\n        }\n    }\n    // 进入页面开启屏幕常亮\n    UserDefaultsPool *userDedault = [UserDefaultsPool sharedUserDefaultsPool];\n    NSString *screenLight = [userDedault objectForKey:KEY_OPEN_SCREEN_LIGHT];\n    if (![screenLight isEqualToString:@\"1\"]) {\n        [[UIApplication sharedApplication] setIdleTimerDisabled:YES];\n    }\n    self.disappearred = NO;\n    if (self.triggerdInDisappear) {\n        [self.untriggerBadge showTriggered];\n        self.triggerdInDisappear = NO;\n    }\n\n    TradeUserDefault.enterTradeOrderPage = NO;\n    \n    // 是否可用交易该合约\n    if (IsNSStringNotEmpty(self.showCode) && self.marketId &&\n        ![HXTradeFunctionManager shouldTradeForShowCode:self.showCode marketId:self.marketId]) {\n        [HXDynamicAlertTool showCustomErrorWithCode:HXTradeCustomErrorCodeTransactionNotSupportForStockCode];\n    }\n    \n    [self.assetTitleView updateClientEquityTitleIfNeeded];\n\n    [ClientUserBehaviorLog sendLogWithLogobject:[self pageLog]];\n}\n\n- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    if ([self.navigationController isKindOfClass:[NavigationControllerEx class]]) {\n        [(NavigationControllerEx *) self.navigationController versionOneNavigationTheme];\n    }\n    self.allowRequestMarkets = NO;\n    self.isBringStockInfo = NO;\n    [LJContractChooseManager closeTradeSheet];\n    [self unRegisterObjectKey];\n    [self hideNavigationIndicatorView];\n    [LEEAlert closeWithCompletionBlock:nil];\n    [self.goldTradeConfirmView removeFromSuperview];\n    // 离开页面关闭屏幕常亮\n    [[UIApplication sharedApplication] setIdleTimerDisabled:NO];\n    // 关闭蒙版\n    [[SimulateDealMaskManage shareInstance] hideMaskView];\n    [self.stopLossToOpenTipBubble dismiss];\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:NOTIFI_TRANSACTION_RETURN_FIRST_RECEIVED object:nil];\n    if (_stopLossToOpenSetView) {\n        [self.stopLossToOpenSetView endKeyboardEditing];\n    }\n    // 键盘收起及IQKeyboardManager 必须最后调用，防止键盘未收起时页面转场导致视图异常（跳转交易管理页）\n    [[IQKeyboardManager sharedManager] resignFirstResponder];\n    [IQKeyboardManager sharedManager].enable = YES;\n}\n\n- (void)viewDidDisappear:(BOOL)animated {\n    [super viewDidDisappear:animated];\n    if (_popWindowTimer) {\n        self.pauseDate = [NSDate dateWithTimeIntervalSinceNow:0];\n        self.fireDate = [self.popWindowTimer fireDate];\n        [self.popWindowTimer setFireDate:[NSDate distantFuture]];\n    }\n    [self.tradeTimerManage invalidateTradeTimer];\n\n    BOOL isPush = self.navigationController != nil;\n    if (isPush) {\n        [self saveCurrentSelectStockCode];\n    } else {\n        [self clearSelectStockCodeRecord];\n    }\n\n    self.disappearred = YES;\n    [self updateCacheLeavingDate];\n}\n\n// FIXME: Tory Need fix - 待修改：以下问题待处理\n// 场景：打开app后进入闪电下单登录交易，然后点击“去交易”进入交易，FuturesJiaoYiViewController 会被创建两次，第一次创建的 FuturesJiaoYiViewController 会被释放执行 dealloc\n- (void)dealloc {\n    TradeDebugPrint(@\"[dealloc][trade list] %s\", __func__);\n    if (_popWindowTimer) {\n        [_popWindowTimer invalidate];\n        _popWindowTimer = nil;\n    }\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    [self unRegisterObjectKey];\n}\n\n- (UIInterfaceOrientationMask)supportedInterfaceOrientations {\n    return UIInterfaceOrientationMaskPortrait;\n}\n\n/// 合约选择记录，带入都条件单创建\n- (void)saveCurrentSelectStockCode {\n    UserDefaultsPool *userDefaults = [UserDefaultsPool sharedUserDefaultsPool];\n    if (IsNSStringNotEmpty(self.showCode) && IsNSStringNotEmpty(self.marketId)) {\n        [userDefaults setObject:self.showCode forKey:KEY_TRANSACTION_JUMPTO_CLOUDCONDITION_HEYUE];\n        [userDefaults setObject:self.marketId forKey:KEY_TRANSACTION_JUMPTO_CLOUDCONDITION_MARKET];\n        [userDefaults setObject:self.stockName forKey:KEY_TRANSACTION_JUMPTO_CLOUDCONDITION_STOCK_NAME];\n    } else {\n        [userDefaults setObject:@\"--\" forKey:KEY_TRANSACTION_JUMPTO_CLOUDCONDITION_HEYUE];\n    }\n}\n\n- (void)clearSelectStockCodeRecord {\n    UserDefaultsPool *userDefaults = [UserDefaultsPool sharedUserDefaultsPool];\n    [userDefaults removeObjectForKey:KEY_TRANSACTION_JUMPTO_CLOUDCONDITION_HEYUE];\n    [userDefaults removeObjectForKey:KEY_TRANSACTION_JUMPTO_CLOUDCONDITION_MARKET];\n    [userDefaults removeObjectForKey:KEY_TRANSACTION_JUMPTO_CLOUDCONDITION_STOCK_NAME];\n}\n\n- (void)updateCacheLeavingDate {\n    [[NSUserDefaults standardUserDefaults] setObject:[NSDate date] forKey:HXTradeLeavingDateKey()];\n    [[NSUserDefaults standardUserDefaults] synchronize];\n}\n\n- (void)didUseOrGuideStopLossToOpen {\n    self.shouldGuideStopLossToOpen = NO;\n    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:kDidUseOrGuideStopLossToOpenKey];\n    [[NSUserDefaults standardUserDefaults] synchronize];\n}\n\n#pragma mark - 数据处理\n\n/// 合约选择（切换合约）\n- (void)chooseStock:(NSString *)showCode stockName:(NSString *)stockName marketId:(NSString *)marketId {\n    [self.orderInfoView setSelectedStateWithInputViewTag:1 isSelected:NO];\n    [ClientUserBehaviorLog sendLogWithLogobject:[NSString stringWithFormat:@\"%@%@\", [self pageLogPrefix], LOG_FUI_HEYUELAN_ZIXUAN] actionType:ClickAction];\n\n    [self resetShowCode:showCode marketId:marketId stockName:stockName];\n    // 切换合约清空闪电下单手数\n    if (IsNSStringNotEmpty(showCode)) {\n        [[UserDefaultsPool sharedUserDefaultsPool] setObject:nil forKey:KEY_QUICK_BUYORSELL_HANDS];\n        [self updateHandsTextField:showCode marketId:marketId];\n    }\n}\n\n- (void)resetToChooseStock {\n    [self resetShowCode:@\"\" marketId:@\"\" stockName:kChooseStock];\n}\n\n/// 下拉分时\n- (void)jiaoYiPriceViewTitleSelectCodeStringHasChange {\n    if (IsNSStringNotEmpty(self.stockCode) &&\n        IsNSStringNotEmpty(self.marketId) &&\n        !self.containerScrollView.bounces &&\n        ![SimulateDealMaskManage shareInstance].showSimuJiaoYiLead) {\n        NSNumber *isOpen = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_LAST_OPEN_HANGQING];\n        if (isOpen.boolValue) {\n            [self showMarketQuotations:YES];\n        }\n        if (!self.hasShowSimuJiaoYiLead) {\n            NSNumber *isOk = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_FRIST_OPEN_HANGQING];\n            if (!isOk.boolValue) {\n                [self showMarketQuotations:YES];\n            }\n        }\n    }\n}\n\n// 下拉分时\n- (void)showMarketQuotations:(BOOL)show {\n    [self.hangQingView changeShowButtonSelect:show stockCode:self.stockCode stockMarket:self.marketId];\n    [UIView animateWithDuration:0.2\n                     animations:^{\n                         CGFloat inset = -(inputViewTop + hangQingViewHeight);\n                         if (show) {\n                             self.containerScrollView.contentInset = UIEdgeInsetsMake(0, 0, inset, 0);\n                         } else {\n                             self.containerScrollView.contentInset = UIEdgeInsetsMake(inset, 0, 0, 0);\n                         }\n                     }];\n\n    [self resetContainVcTableViewBottomInsetWithShowMarketQuotations:show];\n}\n\n- (void)resetContainVcTableViewBottomInset {\n    [self resetContainVcTableViewBottomInsetWithSh","relevantFile":"","relevantFileList":[],"filePath":"FuturesJiaoYiViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"l","deepseek-chat-lite":"l;","CodeQwen2.5-7B":"l;","copilot":" [IQKeyboardManager sharedManager].enab"}},{"prefix":"#import \"LJTest.h\"\n\n@interface LJTest ()\n\n@end\n\n@implementation LJTest\n\n#pragma mark - Lifecycle\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        // Initialization code\n        // create button\n        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];\n        [button setTitle:@\"Button\" forState:UIControlStateNormal];\n        [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];","infill":"[button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];\n        [self addSubview:button];\n        ","suffix":"\n    }\n    return self;\n}\n\n- (void)dealloc {\n    // Clean up any resources here\n}\n\n#pragma mark - Public Methods\n\n#pragma mark - Private Methods\n\n#pragma mark - Getters and Setters\n\n@end","relevantFile":"","relevantFileList":[],"filePath":"HXFutures/%E6%98%BE%E7%A4%BA%E5%B1%82/%E8%A1%8C%E6%83%85/%E6%96%B0%E7%89%88%E5%88%86%E6%97%B6K%E7%BA%BF/Views/%E6%96%B0%E9%97%BBView/LJTest.mm","template":"objective-cpp","multiRes":{"hipilot":"button.frame = CGRectMake(0, 0, 100, 50);\n        [button addTarget:self action:@selector(buttonPressed:) forControlEvents:UIControlEventTouchUpInside];\n        \n        // add button to view\n        [","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"[button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];\n        [self addSubview:button];\n        "}},{"prefix":"#import \"LJTest.h\"\n\n@interface LJTest ()\n\n@end\n\n@implementation LJTest\n\n#pragma mark - Lifecycle\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        // Initialization code\n        // create button\n        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];","infill":"[button setTitle:@\"Button\" forState:UIControlStateNormal];\n        [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n        [button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];\n        [self addSubview:button];\n        ","suffix":"\n    }\n    return self;\n}\n\n- (void)dealloc {\n    // Clean up any resources here\n}\n\n#pragma mark - Public Methods\n\n#pragma mark - Private Methods\n\n#pragma mark - Getters and Setters\n\n@end","relevantFile":"","relevantFileList":[],"filePath":"HXFutures/%E6%98%BE%E7%A4%BA%E5%B1%82/%E8%A1%8C%E6%83%85/%E6%96%B0%E7%89%88%E5%88%86%E6%97%B6K%E7%BA%BF/Views/%E6%96%B0%E9%97%BBView/LJTest.mm","template":"objective-cpp","multiRes":{"hipilot":"[button setImage:[UIImage imageNamed:@\"button_normal\"] forState:UIControlStateNormal];\n        [button addTarget:self action:@selector(buttonPressed) forControlEvents:UIControlEventTouchUpInside];\n        \n        [self addSubview:button","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"[button setTitle:@\"Button\" forState:UIControlStateNormal];\n        [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n        [button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];\n        [self addSubview:button];\n        "}},{"prefix":"#import \"LJTest.h\"\n\n@interface LJTest ()\n\n@end\n\n@implementation LJTest\n\n#pragma mark - Lifecycle\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        // Initialization code\n        // create button\n        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];\n        [button setTitle:@\"Button\" forState:UIControlStateNormal];\n        [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n        [button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];","infill":"[self addSubview:button];\n        ","suffix":"\n    }\n    return self;\n}\n\n- (void)dealloc {\n    // Clean up any resources here\n}\n\n#pragma mark - Public Methods\n\n#pragma mark - Private Methods\n\n#pragma mark - Getters and Setters\n\n@end","relevantFile":"","relevantFileList":[],"filePath":"HXFutures/%E6%98%BE%E7%A4%BA%E5%B1%82/%E8%A1%8C%E6%83%85/%E6%96%B0%E7%89%88%E5%88%86%E6%97%B6K%E7%BA%BF/Views/%E6%96%B0%E9%97%BBView/LJTest.mm","template":"objective-cpp","multiRes":{"hipilot":"[self.view addSubview:button];\n        [button.titleLabel setFont:[UIFont fontWithName:@\"HelveticaNeue-Medium\" size:15]];\n        button.frame = CGRectMake(100, 200, ","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"[self addSubview:button];\n        "}},{"prefix":"\n#import \"RZRQBuyViewController.h\"\n#import \"RZRQAction.h\"\n#import \"WeiTuoMaiMaiPan.h\"\n#import \"RZRQChicangGridTableView.h\"\n#import <HXTool/UIView+RelativeLayout.h>\n#import <HXThemeVersion/ThemeVersion.h>\n#import <ThirdBase/Masonry.h>\n#import \"HXRZRQTradeHeader.h\"\n#import \"WTHangqingStatusBarView.h\"\n#import \"WTTradeTopNoticeView.h\"\n#import \"TradeBuyOrSellViewModel.h\"\n#import <HXBase/HXBaseMarketTools.h>\n#import \"AMUIPublicProxy+CurveLine.h\"\n#import \"WTNoticeModelView.h\"\n#import \"WTAccountInfor.h\"\n#import \"HXWTAccountManager.h\"\n#import \"SurveyModel.h\"\n#import \"HUNormalFunction.h\"\n#import \"HXSelectAccount.h\"\n#import \"HXAccountTypeSwitchManager.h\"\n#import \"HXRzrqZhicanInfo.h\"\n#import \"HXAdvertisingTradeModel.h\"\n#import \"HXSocketFetcher.h\"\n#import <HXStuffDataModel/TableModelColorString.h>\n#import <WTTradeModule/TradeBuyOrSellDefine.h>\n#import <HXBase/NSDictionary+Safety.h>\n#import <HXBase/NSArray+Safety.h>\n#import \"WTAccountDefine.h\"\n#import \"WTTradePositionView.h\"\n#import \"WTTradePostionManager.h\"\n#import \"TradeChiCangModel.h\"\n#import <HXTool/UIView+Uilities.h>\n#import \"NSString+TradeDataCal.h\"\n#import <HXTool/InternetTimeTool.h>\n#import <HXTool/NSArray+SafetyOperation.h>\n#import <HXDataTypeConvertor/NSArray+HXDataTypeConvertor.h>\n#import \"HXWTWaterMarkViewManager.h\"\n#import \"WTAccountInformationDisplayManager.h\"\n#import \"WTTradeMMSetLogManager.h\"\n#import \"WTPositonFunctionManager.h\"\n#import \"HXGrayRelease+Register.h\"\n#import \"NSString+WTTradeSafety.h\"\n#import \"WTDateSafeFormatter.h\"\n#import \"WTTradeFenshiView.h\"\n#import \"HXKLineTechDelegate.h\"\n#import \"HXSimpleQuotationModuleDelegate.h\"\n#import \"HXKLineModuleDelegate.h\"\n#import \"WTTradeChiCangBuySellPointManager.h\"\n#import \"WTTradePerformOptManager.h\"\n#import <HXCategoryTool/NSMutableDictionary+HXSafety.h>\n\n#define PostionViewHeight 22\n\n\nNSString *const SCRZRQHasPullDownTradeFenshi = @\"SCRZRQHasPullDownTradeFenshi\";\n#define kProtocolId 1269\n#define KVOKeyPath_HANGQINGSTATUS @\"directionDown\"\n#define STOCKISCLICKED @1\n#define STATEDOWN @1\n\n@interface RZRQBuyViewController ()<rzrqTradeActionDelegate,RZRQScrollViewDragDelegate,WTNoticeModelViewDelegate, RZRQChicangGridTableViewDelegate, RZRQTradeStateChangeDelegate, WTTradeFenshiViewDelegate>\n@property (nonatomic, weak) IBOutlet UIView *tradeActionBackgroundView;\n@property (weak, nonatomic) IBOutlet UIView *tradeActionBackView;\n@property (nonatomic, weak) IBOutlet RZRQAction *tradeAction;\n@property (nonatomic, weak) IBOutlet WeiTuoMaiMaiPan *maiMaiPan;\n@property (nonatomic,strong) HXWTMMPanCommon *maiMaiPanCommon;\n@property (nonatomic, assign) BOOL useMaiMaiPancCommon;//是否使用通用买卖盘模块\n\n@property (nonatomic, weak) IBOutlet RZRQChicangGridTableView *tableView;\n@property (weak, nonatomic) IBOutlet UIScrollView *scrollview;\n@property (nonatomic,assign) WTRZRQTradeScrollState scrollState;\n@property (nonatomic, weak) WTHangqingStatusBarView *hangqingStatus;    //行情状态栏\n@property (nonatomic, strong) WTTradeTopNoticeView *topNoticeView;  //顶部停靠视图\n@property (nonatomic,assign) BOOL topViewHasShow;\n@property (nonatomic, copy) NSString *selectStockCode;              //当前选中的股票代码\n@property (nonatomic, copy) NSString *selectStockMarket;            //当前选中的市场代码\n@property (nonatomic, strong) WTNoticeModelView * noticeModelView;  //广告运营位\n@property (nonatomic, strong) HXSocketFetcher *hqFetcher;\n@property (nonatomic,strong) NSMutableDictionary *hqParams;\n@property (nonatomic, assign) BOOL isFirstInPage;  //切换账号、撤单、持仓、查询、卖出、首页第一次进入页面\n@property (nonatomic, assign) BOOL isHasNoticeView; //是否有公告位，在reloadViewWithNotice方法中根据是否显示公告位对其修改\n@property (nonatomic, assign) BOOL isFirstPageType; //页面类型，第一种进入页面无公告位，第二种进入页面有公告位\n@property (nonatomic,assign) BOOL isOnlyShow;   //仅调用tradeActionDidClearStock方法清除股票\n@property (nonatomic, strong) WTAccountInfor *oldAccountInfor;  //登录保存用户信息；注意：refreshpage保存后立即使用持仓数据为空\n@property (nonatomic, strong) WTTradePositionView *positionView;    //个股和总仓位显示栏\n@property (nonatomic, assign) BOOL isTenPan;\n@property (nonatomic,strong) TradeChiCangModel *chiCangData;\n@property (nonatomic,strong) HXRzrqZhicanInfo *rzrqZicanData;       //得到rzrq资产信息\n@property (nonatomic, strong) WTTradeFenshiView *fenshiView;\n\n@end\n\n@implementation RZRQBuyViewController\n\n- (void)dealloc{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n    [self.hangqingStatus removeObserver:self forKeyPath:@\"directionDown\"];\n}\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self registerKlineDelegate];\n    [self initUI];\n    [self.hangqingStatus addObserver:self forKeyPath:KVOKeyPath_HANGQINGSTATUS options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:nil];\n    [self makeConstraints];\n}\n\n- (void)registerKlineDelegate {\n    HXKLineTechDelegate *delegate = [[HXKLineTechDelegate alloc] init];\n    HXSimpleQuotationModuleDelegate *quotationDelegate = [[HXSimpleQuotationModuleDelegate alloc] init];\n    HXKLineModuleDelegate *klineDelegate = [[HXKLineModuleDelegate alloc] init];\n    NSDictionary *dic = @{\n        @\"HXTechDelegate\" : delegate,\n        @\"HXSimpleQuotationDelegate\": quotationDelegate,\n        @\"HXKLineDelegate\": klineDelegate\n    };\n    [HXKLine registerKLineDelegates:dic];\n}\n\n- (void)initUI{\n    self.scrollState = [[AMUIPublicProxy GetPublicValue:@\"RZRQFenShiShowStatus\"] isEqual:@1] ? WTRZRQTradeScrollStateShow : WTRZRQTradeScrollStateDismiss;\n    [self.tradeAction onFinishInflate];\n    [self.scrollview addSubview:self.fenshiView];\n    [self.scrollview.superview addSubview:self.topNoticeView];\n    self.scrollview.alwaysBounceVertical = YES;\n    //SCJYIIP-121 修复交易下单价格加减按钮点击不高亮问题\n    self.scrollview.delaysContentTouches = NO;\n    _tradeAction.rzrqTradeActionDelegate = self;\n    _tradeAction.rzrqTradeStateChangeDelegate = self;\n    _tableView.rzrqTradeScrollDelegate = self;\n    _tableView.rzrqChicangGridTableViewdelegate = self;\n    _scrollview.showsVerticalScrollIndicator = NO;\n    _isFirstInPage = YES;\n    _isFirstPageType = YES;\n    _isHasNoticeView = NO;\n    _oldAccountInfor = [[HXWTAccountManager sharedInstance] getCurAccountInfor];//登陆保存账号信息\n    [_maiMaiPan onFinishInflate];\n    [_tableView onFinishInflate];\n    [_tradeAction setPageId:2843];\n    [_maiMaiPan setPageId:2843];\n    [_tableView setPageId:2843];\n    _tableView.autoresizingMask = UIViewAutoresizingNone;\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(adjustFrame) name:UIApplicationDidChangeStatusBarFrameNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(themeChange) name:ThemeVersionNotification object:nil];\n    //设置行情栏\n    self.hangqingStatus = self.topNoticeView.hangqingStatusBar;\n    self.hangqingStatus.userInteractionEnabled = YES;\n    self.hangqingStatus.logObject = WT_CBAS_OBJ_MAIRU_RZRQ;\n    _topViewHasShow = NO;\n    WeakObj(self);\n    [self.hangqingStatus setClickHandler:^(BOOL directDown) {\n        StrongObj(selfWeak);\n        [selfWeakStrong changeFenShiViewState];\n    }];\n    [self initNoticeView];\n    \n    //添加仓位栏\n    self.isTenPan = [WTTradePostionManager isTenPan];\n    CGFloat tradeActionWidth = IS_IPHONE_WIDTH_SMALL ? 195 : 189 * Screen_width / 320;\n    self.positionView = [[WTTradePositionView alloc] initWithFrame:CGRectMake(0, _tradeAction.frame.origin.y + _tradeAction.getQuickBuyOrSellButtonBottom, Screen_width, PostionViewHeight)];\n    \n    [self updatePositionViewType];\n    \n    [self.scrollview addSubview:self.positionView];\n    [self.positionView setLeftAlignment:16 rightAlignment:tradeActionWidth-9]; //设置仓位 label 的左右对齐点\n    self.positionView.alpha = 0;\n    self.positionView.hidden = YES;\n    \n    self.useMaiMaiPancCommon = [WTTradePostionManager useMaiMaiPanCommon];\n}\n\n- (void)initNoticeView {\n    self.noticeModelView = [[WTNoticeModelView alloc","infill":"noticeHeight = 0;\n    if ","suffix":"(self.noticeModelView.hidden || !_isHasNoticeView) {\n        [self.tradeAction setPosition:CGPointMake(self.tradeAction.position.x, 12)];\n        [self.maiMaiPan setPosition:CGPointMake(self.maiMaiPan.position.x, 17)];\n        [self.tradeActionBackView setPosition:CGPointMake(self.tradeActionBackView.position.x, 10)];\n        [self.tableView setPosition:CGPointMake(self.tableView.position.x, self.tradeActionBackView.maxY + 12)];\n        self.tableView.originTableRect = CGRectMake(self.tableView.position.x, self.tradeActionBackView.maxY + 12, Screen_width, self.tableView.height);\n        _isFirstPageType = YES;\n    } else {\n        [self.tradeAction setPosition:CGPointMake(self.tradeAction.position.x, 52)];\n        [self.maiMaiPan setPosition:CGPointMake(self.maiMaiPan.position.x, 57)];\n        [self.tradeActionBackView setPosition:CGPointMake(self.tradeActionBackView.position.x, 50)];\n        self.tableView.originTableRect = CGRectMake(self.tableView.position.x, self.tradeActionBackView.maxY + 12, Screen_width, self.tableView.height);\n        _isFirstPageType = NO;\n    }\n    \n    [self.tradeAction setPosition:CGPointMake(self.tradeAction.position.x, 52)];\n    [self.maiMaiPan setPosition:CGPointMake(self.maiMaiPan.position.x, 57)];\n    [self.tradeActionBackView setPosition:CGPointMake(self.tradeActionBackView.position.x, 50)];\n    self.tableView.originTableRect = CGRectMake(self.tableView.position.x, self.tradeActionBackView.maxY + 12, Screen_width, self.tableView.height);\n}\n\n- (void)makeConstraints{\n    [self.fenshiView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.mas_equalTo(0);\n        make.top.mas_equalTo(-200);\n        make.width.mas_equalTo(Screen_width);\n        make.height.mas_equalTo(200);\n    }];\n}\n\n- (void)themeChange{\n    [self.tableView.tableView.tableView.tableView reloadData];\n}\n\n- (void)viewWillAppear:(BOOL)animated{\n    [super viewWillAppear:animated];\n    [self registerKlineDelegate];\n    _isFirstInPage = YES;\n    self.scrollState = [[AMUIPublicProxy GetPublicValue:@\"RZRQFenShiShowStatus\"] isEqual:@1] ? WTRZRQTradeScrollStateShow : WTRZRQTradeScrollStateDismiss;\n    [_tradeAction setPageData:[NSMutableDictionary dictionaryWithDictionary:[self getParamsOfCurrentPage]]];\n    [_tradeAction willAppear];\n    [_maiMaiPan willAppear];\n    [_tableView willAppear];\n    if (self.scrollState == WTRZRQTradeScrollStateDismiss && _topViewHasShow) {\n        [self tradeActionDidClearStock:nil];\n    }\n    [self.noticeModelView reloadNoticeData];\n    [self.noticeModelView willAppear];\n    [self reloadViewWithNotice];\n    self.rzrqZicanData = nil;\n    self.chiCangData = nil;\n}\n\n- (void)viewDidAppear:(BOOL)animated{\n    [super viewDidAppear:animated];\n    [_tradeAction didAppear];\n    [_maiMaiPan didAppear];\n    [_tableView didAppear];\n\n    if (self.tableView.frame.origin.y == 260 && [self reloadViewWithNotice] && _selectStockCode == nil){\n        [self changeTableView];\n    }\n    [self updatePositionViewStatus];\n    //模拟炒股 -- 添加水印\n    [HXWTWaterMarkViewManager showWaterMarkViewIfNeeded:self.view];\n    \n    //买卖预设的埋点\n    [WTTradeMMSetLogManager logMMSetInfoWithPageName:WT_CBAS_OBJ_MAIRU_RZRQ isRZRQ:YES];\n    [self pageLoadFinish];\n    [self endMonitor];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [_tradeAction willDisappear];\n    [_maiMaiPan willDisappear];\n    [_tableView willDisappear];\n    if (!self.hangqingStatus.directionDown) {\n        [self.fenshiView tradeHQStopRequest];\n    } else if (self.hqFetcher) {\n        [self.hqFetcher pause];\n    }\n    [super viewWillDisappear:animated];\n    if (self.tradeAction) {\n        if (self.scrollState == WTRZRQTradeScrollStateShow&&AM_UI_Public_Proxy::GetPublicValue(@\"GPCode\")) {\n            [AMUIPublicProxy SetPublicValue:@1 Key:@\"RZRQFenShiShowStatus\"];\n        } else {\n            [AMUIPublicProxy SetPublicValue:@0 Key:@\"RZRQFenShiShowStatus\"];\n        }\n    }\n    [self.noticeModelView willDisappear];\n}\n\n- (void)viewDidDisappear:(BOOL)animated{\n    [[WTAccountInformationDisplayManager sharedInstance] clearStockInfo];\n    [_tradeAction didDisappear];\n    [_maiMaiPan didDisappear];\n    [_tableView didDisappear];\n    [super viewDidDisappear:animated];\n}\n\n- (void)refreshPage{\n    if (![WTTradePerformOptManager getRZRQBuySellOptimizeGray]) {\n        [_tableView resetTableView];\n    }\n    [_tradeAction requestData:NO];\n    [_tableView willAppear];\n    if ([_tradeAction isMQHQAction]) {\n        [_tradeAction requestDataByChangeNeedRiskShow:YES];\n    }\n    HXSelectAccount *selectAccount = [[HXAccountTypeSwitchManager sharedInstance] getSelectAccount];\n    if ([[HXWTAccountManager sharedInstance] currentAccountIsRZRQ] &&\n        ![HUNormalFunction isHUQsid:selectAccount.qsId]) {\n        //如果切换账号时需要刷新运营位，设置成当前账号的运营位信息。\n        WTAccountInfor* currentAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        [self.noticeModelView setShowNoticeLogin:YES brokerId:currentAccount.yybId];\n        //切换账号刷新广告，刷新按钮不刷新广告\n        if (_oldAccountInfor == nil || ![currentAccount isEqualToAccount:_oldAccountInfor]) {\n            [self.noticeModelView reloadNoticeData];\n            [self reloadViewWithNotice];\n            _oldAccountInfor = currentAccount;\n        }\n    }\n    CGFloat noticeY = self.noticeModelView.frame.origin.y;\n    if (!self.noticeModelView.hidden && self.topNoticeView.hqStatusBarShowed && noticeY == 0) {\n        [self.noticeModelView setPosition:CGPointMake(self.noticeModelView.position.x, self.noticeModelView.position.y+12)];\n        if(self.tableView.frame.origin.y == 260){\n            [self changeTableView];\n        }\n    } else if (!_isFirstPageType && self.tableView.frame.origin.y == 260){\n        [self changeTableView];\n    }\n    [self updatePositionViewUI];\n    //模拟炒股 -- 添加水印\n    [HXWTWaterMarkViewManager showWaterMarkViewIfNeeded:self.view];\n    [_tradeAction resetJiaoYiType];\n}\n\n- (void)changeTableView{\n    [self.tableView setPosition:CGPointMake(self.tableView.position.x, self.tradeActionBackView.maxY + 12)];\n}\n\n- (void)setTableViewRefreshBtn:(UIButton *)btn{\n    _tableView.reFreshButton = btn;\n}\n\n#pragma mark - PositionView Update and Animation\n- (void)updatePositionViewStatus {\n    if (self.selectStockCode.length > 0 && [self isSupportMarket:self.selectStockMarket]) {\n        if( self.positionView.hidden == YES){\n            [self positionViewShow:YES];\n        }\n        [self calculatePositionAndUpdate];\n        [self updatePositionViewCostAndProfit];\n    } else {\n        if (!self.isTenPan) {\n            [self positionViewShow:NO];\n        }else{\n            [self.positionView updatePositionWithStockPosition:-2 totalPosition:-2];\n        }\n    }\n}\n\n- (void)calculatePositionAndUpdate {\n    //总资产为nil时，显示--\n    if (self.rzrqZicanData.tmp_totalValue == nil) {\n        [self.positionView updatePositionWithStockPosition:-2 totalPosition:-2];\n        return;\n    }\n    \n    //判断是否为卖券还券获取的数据,显示--\n    if ([_tradeAction isMQHQAction]) {\n        [self.positionView updatePositionWithStockPosition:-2 totalPosition:-2];\n        [self.positionView updateEstimateCostWithCost:@\"--\"];\n        return;\n    }\n    \n    //总资产为 0 时，不计算\n    CGFloat totalValue = [self.rzrqZicanData.tmp_totalValue doubleValue];\n    if ([self isDoubleValueZero:totalValue]) {\n        [self.positionView updatePositionWithStockPosition:0 totalPosition:0];\n        return;\n    }\n    \n    //仓位显示可转债先展示--，后续再修改算法后再展示数值\n    if ([HXBaseMarketTools isBondMarket:self.selectStockMarket]) {\n        [self.positionView updatePositionWithStockPosition:-2 totalPosition:-2];\n        return;\n    }\n    \n    \n    NSString  *stockPositon = @\"0\";\n    NSString  *totalPosition = self.rzrqZicanData.cangWei;\n    CGFloat totalCangwei = [totalPosition isEqualToString:@\"--\"] ? -2 : totalPosition.floatValue;\n    CGFloat geguCangwei = 0;\n    //当前股票对应下标，小于0说明未持有\n    NSInteger index = [self getIndexWithStockCode:self.selectStockCode];\n    if (index < 0) {\n        [self.positionView updatePositionWithStockPosition:","relevantFile":"","relevantFileList":[],"filePath":"RZRQBuyViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"] initWithFrame:CGRectMake(0, 0, Screen_width, 40)];\n    [self.noticeModelView setDelegate:self];\n    [self.scrollview.superview addSubview:self.noticeModelView];\n}\n\n-","deepseek-chat-lite":"] initWithFrame:CGRectMake(0, 0, Screen_width, 44)];","CodeQwen2.5-7B":"] initWithFrame:CGRectMake(0, 0, Screen_width, 44)];","copilot":"noticeHeight = 0;\n    if "}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n//        self.marketDic = [[NSMutableDictionary alloc] init];\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultArray addObject:@\"\"];\n        }\n    }\n    \n    return resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n@implementation LJMarketClearPositionRspModel\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArr","infill":"el.limitDown\n        [modelArray addObject:model];\n    }\n    \n    ","suffix":"return modelArray;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"<NSString *> *)marketList \n                   successBlock:(nullable void (^)(void))successBlock \n                    failedBlock:(nullable void (^)(void))failedBlock {\n    \n    [self queryMarketWithCodeList:codeList\n                  marketList:marketList\n              ","deepseek-chat-lite":"ay<NSString *> *)marketList ","CodeQwen2.5-7B":"ay<NSString *> *)marketList ","copilot":"el.limitDown\n        [modelArray addObject:model];\n    }\n    \n    "}},{"prefix":"\n#import \"WTWebViewController.h\"\n#import \"CWebview+CWebview_API.h\"\n#import \"CWebview+HXCommunityWebJS.h\"\n#import \"WebServiceProvider.h\"\n#import \"HXWebEventManager.h\"\n#import <HXDataTypeConvertor/NSDictionary+HXDataTypeConvertor.h>\n#import <HXBase/AMUIFrameWork.h>\n#import \"HXStoreReview.h\"\n#import \"HXGetFeedbackInfo.h\"\n#import \"JSNotifyWebHandleEvent.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import \"InputView.h\"\n#import <ThirdBase/Masonry.h>\n#import <HXBase/NSDictionary+Safety.h>\n#import \"HXBaseViewController.h\"\n#import <HXBase/HXStatusBarManager.h>\n#import <HXBase/NSArray+Safety.h>\n#import \"AM_UI_VarKeyString.h\"\n\n@interface WTWebViewController () <WebViewProcessDelegate, InputViewDelegate, UIGestureRecognizerDelegate>\n\n@property (nonatomic, assign) ThemeVersion themeMode;\n@property (nonatomic, assign) BOOL launched; // 是否已加载网页， default：NO\n\n@property (nonatomic, strong) UIButton *dismissKeyBoardButton;   //用于关闭评论框的遮罩\n@property (nonatomic) BOOL canShowInputBox;              //是否能显示评论输入框\n@property (nonatomic) NSUInteger isCloseFromZheZhao;           // 0:自动关闭(系统弹框/点击发送等) 1:按遮罩关闭的输入框 2:按关闭按钮关闭的弹框\n@property (nonatomic) BOOL isCloseFromManual;            //0:系统弹框引起的输入框关闭。 1:点击关闭／发送或遮罩关闭输入框\n@property (nonatomic, strong) InputView *inputBox;\n@property (nonatomic, strong) UIButton *closeButton;\n\n\n@end\n\n@implementation WTWebViewController\n\n#pragma mark - life cycle\n- (void)dealloc\n{\n    [self removeNotifications];\n    \n    [_webView removeAndRealse];\n    \n    self.navPanTarget = nil;\n    self.navigationController.interactivePopGestureRecognizer.delegate = nil;\n}\n\n- (instancetype)initWithCoder:(NSCoder *)aDecoder\n{\n    if (self = [super initWithCoder:aDecoder]) {\n        \n    }\n    return self;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view.\n    \n    self.navigationController.interactivePopGestureRecognizer.delegate = self;\n    NSMutableArray *gestureTargets = [self.navigationController.interactivePopGestureRecognizer valueForKey:@\"_targets\"];\n    id gestureTarget = [gestureTargets firstObject];\n    self.navPanTarget = [gestureTarget valueForKey:@\"_target\"];\n    \n    self.view.backgroundColor = [self getBackgroundColorForCurrentTheme];\n    \n    NSString *title = [self.pageData thsStringForKey:@\"title\"];\n    if (title && title.length > 0) {\n        [self setCurTitle:title subTitle:nil];\n    }\n    \n    NSString *unReplaceTitle = [self.pageData thsStringForKey:@\"unReplaceTitle\"];\n    if (unReplaceTitle && unReplaceTitle.length > 0) {\n        _webView.unReplaceTitle = unReplaceTitle;\n    }\n    \n    NSNumber *showClose = [self.pageData thsNumberForKey:@\"showClose\"];\n    if (showClose && showClose.boolValue) {\n        [_webView alwaysShowCloseBtn];\n    }\n    \n    //记录当前黑白板\n    _themeMode = CURRENT_THEME;\n    \n    [_webView.webEventManager didWhenWebDidLoad];\n    \n    [self p_setupWebView];\n    \n    [self addNotifications];\n}\n\n- (void)viewWillAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n    \n    if ([self.pageData[@\"gobackAndRefresh\"] isEqualToString:@\"1\"]) {\n        [self.webView stopLoading];\n    } else if (self.pageData[@\"url\"] != nil) {\n        [self.webView stopLoading];\n    }\n    \n    //默认是yes。增加参数。根据传参设置是否显示关闭按钮\n    if ([self.pageData[@\"notNeedShowLeftCloseBtn\"] isEqualToString:@\"YES\"]) {\n            _webView.isNeedShowLeftCloseBtn = NO;\n        }\n    \n    //拍照退出ImagePicker后，系统会将statusbar隐藏，此处强行将状态栏设置回来\n    [HXStatusBarManager sharedInstance].hidden = NO;\n    \n    //jira6238,在IOS7和IOS8上，意见反馈选择照片的页面puphotosviewcontroller在willappear调用setStatusBarStyle: animated:方法修改了状态栏文字颜色，由于是系统方法无法修改，因此只能在网页显示的时候，将状态栏恢复成白色。\n    if ([[UIApplication sharedApplication] statusBarStyle] != UIStatusBarStyleLightContent) {\n        [HXStatusBarManager sharedInstance].style = UIStatusBarStyleLightContent;;\n    }\n    \n    if (self.pageData[@\"url\"] != nil) {\n        [_webView stopLoading];\n        self.needFreshWebview = YES;\n    }\n    \n    //判断是否发生变化\n    if (_themeMode != CURRENT_THEME) {\n        [_webView refreshWebview];\n        _themeMode = CURRENT_THEME;\n    }\n    \n    [[_webView fetchHoldingWebView] HX_JSE_executeJS:@\"onShow\" data:nil callback:nil];\n    [_webView.webEventManager didWhenWebWillAppear];\n    \n    if (!self.launched) {\n        [self p_extractDataFromParams];\n        [WebServiceProvider refreshViewController:self ofWebview:_webView];\n        [self requestWeb];\n        self.launched = YES;\n    }\n    [self changeBackButton];\n\n}\n\n- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewDidAppear:animated];\n    \n    //允许滑动返回\n    UINavigationController *nav = self.navigationController;\n    [nav.interactivePopGestureRecognizer setEnabled:YES];\n    \n    // region\n    // 多次加载网页后，再摇出语音助手后导致关闭按钮消失，设置按钮出现\n    if ([_webView canGoBack] && !_webView.ignoreNavItemSet) {\n        [self addNavigationRightBtns:nil];\n    } else {\n        [self initUIBarButtonItemViewAndShow];\n    }\n    [_webView setCloseBtn];\n    // end region\n    if (_webView == nil) {\n        [self p_setupWebView];\n    }\n    else {\n        [WebServiceProvider refreshViewController:self ofWebview:_webView];\n    }\n    \n    if ([[self.pageData thsStringForKey:@\"refreshTitleByListenerEnable\"] boolValue]) {\n        _webView.refreshTitleByListenerEnable = YES;\n    }\n    \n    WeakObj(self);\n    [_webView getTitleOfWebView:^(NSString *title) {\n        StrongObj(selfWeak);\n        if ([title length] == 0) {\n            title = selfWeakStrong.webView.defaultTitle;\n        }\n        \n        [selfWeakStrong setNavigationTitle:title];\n    }];\n    \n    if ([[self.pageData objectForKey:@\"unReplaceTitle\"] length] > 0) {\n        _webView.unReplaceTitle = [self.pageData objectForKey:@\"unReplaceTitle\"];\n    }\n    \n    [_webView.webEventManager didWhenWebDidAppear];\n    \n    [_inputBox dismissInputView];\n    [_inputBox setDelegate:self];\n    \n    [_webView setBackButton];\n    [_webView didAppear];\n}\n\n- (void)viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n    \n    [self showNetWorkingTip:NO];\n    [[_webView fetchHoldingWebView] HX_JSE_executeJS:@\"onHide\" data:nil callback:nil];\n    if (_webView.hasCommunityAction) { //有社区交互业务的需要调用对应的Disappear方法\n        [_webView communityWebWillDisappear];\n    }\n    \n    [_webView.webEventManager didWhenWebWillDisappear];\n}\n\n- (void)viewDidDisappear:(BOOL)animated\n{\n    [super viewDidDisappear:animated];\n    \n    if (self.navigationController == nil) {\n        [_webView stopLoading];\n    }\n    \n    _inputBox.delegate = nil;\n    \n    BOOL hasEnter = [[[AMUIFrameWork shareingUIFramework] getPublicValue:@\"userHasEnterXinGuZhongQianPage\"] boolValue];\n    if (hasEnter) {\n        [[AMUIFrameWork shareingUIFramework] setPublicValue:@\"userHasEnterXinGuZhongQianPage\" value:@(NO)];\n        [HXStoreReview requestReview];\n    }\n    \n    [_webView.webEventManager didWhenWebDidDisappear];\n}\n\n#pragma mark -\n- (void)p_setupWebView\n{\n    _webView = [WebServiceProvider webViewShowingOnViewController:self isSupportPopGesture:YES withDelegate:self];\n    NSNumber *showClose = self.pageData[@\"showClose\"];\n    if (showClose != nil && showClose.boolValue) {\n        [_webView alwaysShowCloseBtn];\n    }\n    if ([self needShowNavCloseBtn]) {\n        _webView.canSetBackBtn = NO;\n    }\n    _webView.isSkipErrorJumpHandle = YES;\n    [_webView setTitle:@\"\"];\n    [_webView supportScale:YES];\n    [self.view addSubview:_webView];\n    [self makeWebConstraints];\n}\n\n- (void)p_extractDataFromParams\n{\n    if (!self.pageData) {\n        return;\n    }\n    NSString* strTitle = [self.pageData objectForKey:@\"title\"];\n    if (strTitle != nil && [strTitle length] > 0) {\n        [self setNavigationTitle:strTitle];\n    }\n}\n\n- (void)initUIBarButtonItemViewAndSh","infill":"if (!_closeButton) {\n        _closeButton = [UIButton buttonWithType:UIButtonTypeCustom];\n        [_closeButton setTitle:@\"关闭\" forState:UIControlStateNormal];\n        [_closeButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n        [_closeButton addTarget:self action:@selector(navCloseAction) forControlEvents:UIControlEventTouchUpInside];\n    }\n    return _closeButton;\n}\n\n","suffix":"@end\n","relevantFile":"","relevantFileList":[],"filePath":"WTWebViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"ow","deepseek-chat-lite":"ow","CodeQwen2.5-7B":"ow","copilot":"if (!_closeButton) {\n        _closeButton = [UIButton buttonWithType:UIButtonTypeCustom];\n        [_closeButton setTitle:@\"关闭\" forState:UIControlStateNormal];\n        [_closeButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n        [_closeButton addTarget:self action:@selector(navCloseAction) forControlEvents:UIControlEventTouchUpInside];\n    }\n    return _closeButton;\n}\n\n"}},{"prefix":"\n#import \"WTWebViewController.h\"\n#import \"CWebview+CWebview_API.h\"\n#import \"CWebview+HXCommunityWebJS.h\"\n#import \"WebServiceProvider.h\"\n#import \"HXWebEventManager.h\"\n#import <HXDataTypeConvertor/NSDictionary+HXDataTypeConvertor.h>\n#import <HXBase/AMUIFrameWork.h>\n#import \"HXStoreReview.h\"\n#import \"HXGetFeedbackInfo.h\"\n#import \"JSNotifyWebHandleEvent.h\"\n#import <HXThemeVersion/ThemeVersion.h>\n#import \"InputView.h\"\n#import <ThirdBase/Masonry.h>\n#import <HXBase/NSDictionary+Safety.h>\n#import \"HXBaseViewController.h\"\n#import <HXBase/HXStatusBarManager.h>\n#import <HXBase/NSArray+Safety.h>\n#import \"AM_UI_VarKeyString.h\"\n\n@interface WTWebViewController () <WebViewProcessDelegate, InputViewDelegate, UIGestureRecognizerDelegate>\n\n@property (nonatomic, assign) ThemeVersion themeMode;\n@property (nonatomic, assign) BOOL launched; // 是否已加载网页， default：NO\n\n@property (nonatomic, strong) UIButton *dismissKeyBoardButton;   //用于关闭评论框的遮罩\n@property (nonatomic) BOOL canShowInputBox;              //是否能显示评论输入框\n@property (nonatomic) NSUInteger isCloseFromZheZhao;           // 0:自动关闭(系统弹框/点击发送等) 1:按遮罩关闭的输入框 2:按关闭按钮关闭的弹框\n@property (nonatomic) BOOL isCloseFromManual;            //0:系统弹框引起的输入框关闭。 1:点击关闭／发送或遮罩关闭输入框\n@property (nonatomic, strong) InputView *inputBox;\n@property (nonatomic, strong) UIButton *closeButton;\n\n\n@end\n\n@implementation WTWebViewController\n\n#pragma mark - life cycle\n- (void)dealloc\n{\n    [self removeNotifications];\n    \n    [_webView removeAndRealse];\n    \n    self.navPanTarget = nil;\n    self.navigationController.interactivePopGestureRecognizer.delegate = nil;\n}\n\n- (instancetype)initWithCoder:(NSCoder *)aDecoder\n{\n    if (self = [super initWithCoder:aDecoder]) {\n        \n    }\n    return self;\n}\n\n- (BOOL)prefersStatusBarHidden {\n    return NO;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view.\n    \n    self.navigationController.interactivePopGestureRecognizer.delegate = self;\n    NSMutableArray *gestureTargets = [self.navigationController.interactivePopGestureRecognizer valueForKey:@\"_targets\"];\n    id gestureTarget = [gestureTargets firstObject];\n    self.navPanTarget = [gestureTarget valueForKey:@\"_target\"];\n    \n    self.view.backgroundColor = [self getBackgroundColorForCurrentTheme];\n    \n    NSString *title = [self.pageData thsStringForKey:@\"title\"];\n    if (title && title.length > 0) {\n        [self setCurTitle:title subTitle:nil];\n    }\n    \n    NSString *unReplaceTitle = [self.pageData thsStringForKey:@\"unReplaceTitle\"];\n    if (unReplaceTitle && unReplaceTitle.length > 0) {\n        _webView.unReplaceTitle = unReplaceTitle;\n    }\n    \n    NSNumber *showClose = [self.pageData thsNumberForKey:@\"showClose\"];\n    if (showClose && showClose.boolValue) {\n        [_webView alwaysShowCloseBtn];\n    }\n    \n    //记录当前黑白板\n    _themeMode = CURRENT_THEME;\n    \n    [_webView.webEventManager didWhenWebDidLoad];\n    \n    [self p_setupWebView];\n    \n    [self p_setUpCloseBtn];\n    \n    [self addNotifications];\n}\n\n- (void)viewWillAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n    self.navigationController.navigationBar.hidden = YES;\n    [self.naviga","infill":"tionController set];\n    if ([self.pa","suffix":"geData[@\"gobackAndRefresh\"] isEqualToString:@\"1\"]) {\n        [self.webView stopLoading];\n    } else if (self.pageData[@\"url\"] != nil) {\n        [self.webView stopLoading];\n    }\n    \n    //默认是yes。增加参数。根据传参设置是否显示关闭按钮\n    if ([self.pageData[@\"notNeedShowLeftCloseBtn\"] isEqualToString:@\"YES\"]) {\n            _webView.isNeedShowLeftCloseBtn = NO;\n        }\n    \n    //拍照退出ImagePicker后，系统会将statusbar隐藏，此处强行将状态栏设置回来\n    [HXStatusBarManager sharedInstance].hidden = NO;\n    \n    //jira6238,在IOS7和IOS8上，意见反馈选择照片的页面puphotosviewcontroller在willappear调用setStatusBarStyle: animated:方法修改了状态栏文字颜色，由于是系统方法无法修改，因此只能在网页显示的时候，将状态栏恢复成白色。\n    if ([[UIApplication sharedApplication] statusBarStyle] != UIStatusBarStyleLightContent) {\n        [HXStatusBarManager sharedInstance].style = UIStatusBarStyleLightContent;;\n    }\n    \n    if (self.pageData[@\"url\"] != nil) {\n        [_webView stopLoading];\n        self.needFreshWebview = YES;\n    }\n    \n    //判断是否发生变化\n    if (_themeMode != CURRENT_THEME) {\n        [_webView refreshWebview];\n        _themeMode = CURRENT_THEME;\n    }\n    \n    [[_webView fetchHoldingWebView] HX_JSE_executeJS:@\"onShow\" data:nil callback:nil];\n    [_webView.webEventManager didWhenWebWillAppear];\n    \n    if (!self.launched) {\n        [self p_extractDataFromParams];\n        [WebServiceProvider refreshViewController:self ofWebview:_webView];\n        [self requestWeb];\n        self.launched = YES;\n    }\n    [self changeBackButton];\n\n}\n\n- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewDidAppear:animated];\n    \n    //允许滑动返回\n    UINavigationController *nav = self.navigationController;\n    [nav.interactivePopGestureRecognizer setEnabled:YES];\n    \n    // region\n    // 多次加载网页后，再摇出语音助手后导致关闭按钮消失，设置按钮出现\n    if ([_webView canGoBack] && !_webView.ignoreNavItemSet) {\n        [self addNavigationRightBtns:nil];\n    } else {\n        [self initUIBarButtonItemViewAndShow];\n    }\n    [_webView setCloseBtn];\n    // end region\n    if (_webView == nil) {\n        [self p_setupWebView];\n    }\n    else {\n        [WebServiceProvider refreshViewController:self ofWebview:_webView];\n    }\n    \n    if ([[self.pageData thsStringForKey:@\"refreshTitleByListenerEnable\"] boolValue]) {\n        _webView.refreshTitleByListenerEnable = YES;\n    }\n    \n    WeakObj(self);\n    [_webView getTitleOfWebView:^(NSString *title) {\n        StrongObj(selfWeak);\n        if ([title length] == 0) {\n            title = selfWeakStrong.webView.defaultTitle;\n        }\n        \n        [selfWeakStrong setNavigationTitle:title];\n    }];\n    \n    if ([[self.pageData objectForKey:@\"unReplaceTitle\"] length] > 0) {\n        _webView.unReplaceTitle = [self.pageData objectForKey:@\"unReplaceTitle\"];\n    }\n    \n    [_webView.webEventManager didWhenWebDidAppear];\n    \n    [_inputBox dismissInputView];\n    [_inputBox setDelegate:self];\n    \n    [_webView setBackButton];\n    [_webView didAppear];\n}\n\n- (void)viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n    \n    [self showNetWorkingTip:NO];\n    [[_webView fetchHoldingWebView] HX_JSE_executeJS:@\"onHide\" data:nil callback:nil];\n    if (_webView.hasCommunityAction) { //有社区交互业务的需要调用对应的Disappear方法\n        [_webView communityWebWillDisappear];\n    }\n    \n    [_webView.webEventManager didWhenWebWillDisappear];\n}\n\n- (void)viewDidDisappear:(BOOL)animated\n{\n    [super viewDidDisappear:animated];\n    \n    if (self.navigationController == nil) {\n        [_webView stopLoading];\n    }\n    \n    _inputBox.delegate = nil;\n    \n    BOOL hasEnter = [[[AMUIFrameWork shareingUIFramework] getPublicValue:@\"userHasEnterXinGuZhongQianPage\"] boolValue];\n    if (hasEnter) {\n        [[AMUIFrameWork shareingUIFramework] setPublicValue:@\"userHasEnterXinGuZhongQianPage\" value:@(NO)];\n        [HXStoreReview requestReview];\n    }\n    \n    [_webView.webEventManager didWhenWebDidDisappear];\n}\n\n#pragma mark -\n- (void)p_setupWebView\n{\n    _webView = [WebServiceProvider webViewShowingOnViewController:self isSupportPopGesture:YES withDelegate:self];\n    NSNumber *showClose = self.pageData[@\"showClose\"];\n    if (showClose != nil && showClose.boolValue) {\n        [_webView alwaysShowCloseBtn];\n    }\n    if ([self needShowNavCloseBtn]) {\n        _webView.canSetBackBtn = NO;\n    }\n    _webView.isSkipErrorJumpHandle = YES;\n    [_webView setTitle:@\"\"];\n    [_webView supportScale:YES];\n    [self.view addSubview:_webView];\n    [self makeWebConstraints];\n}\n\n- (void)p_setUpCloseBtn{\n    [_webView addSubview:self.closeButton];\n    [self.closeButton mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(_webView).offset(12);\n        make.right.equalTo(_webView).offset(-12);\n        make.width.equalTo(@43);\n        make.height.equalTo(@44);\n    }];\n}\n\n- (void)p_extractDataFromParams\n{\n    if (!self.pageData) {\n        return;\n    }\n    NSString* strTitle = [self.pageData objectForKey:@\"title\"];\n    if (strTitle != nil && [strTitle length] > 0) {\n        [self setNavigationTitle:strTitle];\n    }\n}\n\n- (void)initUIBarButtonItemViewAndShow\n{\n    if ([[self.pageData objectForKey:@\"setRightBtnId\"] length] > 0) {\n        [_webView setShowRightBarButtonId:[[self.pageData objectForKey:@\"setRightBtnId\"] intValue]];\n        return;\n    }else if ([[self.pageData objectForKey:WTWEB_RIGHT_BAR_BTN_IMAGE_NAME] length] > 0) {\n        NSString *rightBarBtnImageName = [self.pageData thsStringForKey:WTWEB_RIGHT_BAR_BTN_IMAGE_NAME];\n        NSString *rightBarBtnImageNameNight = [NSString stringWithFormat:@\"%@_night\", rightBarBtnImageName];\n        UIBarButtonItem *rightBarItem = [[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:IS_NIGHT_THEME ? rightBarBtnImageNameNight : rightBarBtnImageName] style:UIBarButtonItemStylePlain target:self action:@selector(clickRightBarItem)];\n        [self.navigationItem setRightBarButtonItem:rightBarItem];\n    }\n}\n\n- (void)makeWebConstraints\n{\n    [_webView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.left.width.height.equalTo(self.view);\n    }];\n}\n\n#pragma mark - request\n- (void)getLastLinkUrl\n{\n    NSString *linkUrl = [self.pageData thsStringForKey:@\"url\"];\n    if (linkUrl != nil && [linkUrl length] > 0) {\n        _lastLinkUrl = linkUrl;\n    }\n}\n\n//请求数据\n- (void)requestWeb\n{\n    [self getLastLinkUrl];\n    \n    if(_lastLinkUrl == nil || _lastLinkUrl.length == 0) {\n        return;\n    }\n    \n    //jira6653,页面打开url时，如果url里的参数有中文需要encode转码操作，但是部分url里带有#结尾的（XXX.html#jscsy）,这个#是\n    //不能转码的，因此和后台开发梅刘俊沟通，对于#特殊处理，#不进行encode操作\n    NSMutableCharacterSet *set = [NSMutableCharacterSet characterSetWithCharactersInString:@\"\"];\n    [set formUnionWithCharacterSet:[NSCharacterSet URLQueryAllowedCharacterSet]];\n\n    //jira18165：广告要求不要对%做encode，为了不影响其它业务，通过参数encodeDeal做判断\n    NSString *linkUrl = nil;\n    NSURL *url = [NSURL URLWithString:_lastLinkUrl];\n    if(url == nil) {\n        [set addCharactersInString:@\"#\"];\n        linkUrl = [_lastLinkUrl stringByAddingPercentEncodingWithAllowedCharacters:set];\n    }else {\n        linkUrl = _lastLinkUrl;\n    }\n\n    WTAMLogDebug(WT_LOG_MODULE_PUBLIC, WT_LOG_KEYWORDS_PUBLIC, @\"linkUrl=%@\", linkUrl);\n    [WebServiceProvider webview:_webView loadRequest:linkUrl];\n}\n\n- (void)refreshViewController\n{\n    [[_webView fetchHoldingWebView] HX_JSE_executeJS:@\"onShow\" data:nil callback:nil];\n}\n\n#pragma mark - Navigation Item\n- (void)setNavigationTitle:(NSString *)title\n{\n    if (_webView.hasCommunityAction) {\n        if (![_webView didTitleUpdateTo:title]) {\n            self.navigationItem.title = title;\n        }\n    } else {\n        self.navigationItem.title = title;\n    }\n}\n\n#pragma mark - WebViewProcessDelegate\n- (BOOL)webView:(CWebview *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(WKNavigationType)navigationType\n{\n    [self changeBackButton];\n    if (_inputBox) {\n        [_inputBox dismissInputView];   //重新加载网页，则收起评论框\n    }\n    return YES;\n}\n\n- (void)webViewDidStartLoad:(CWebview *)webVie","relevantFile":"","relevantFileList":[],"filePath":"WTWebViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"tionController.interactivePopGestureRecognizer setEnabled:YES];\n    \n    if (self.pa","deepseek-chat-lite":"tionController setNavigationBarHidden:YES animated:YES];","CodeQwen2.5-7B":"tionController.navigationBar setTintColor:[UIColor whiteColor]];","copilot":"tionController set];\n    if ([self.pa"}},{"prefix":"                            [self setRZRQActionSheetSelected:m_pCLArr[_m_rzrqActionSheetIndex]];\n                        } else {\n                            [btnSJCL setTitle:@\"不支持市价委托\" forState:UIControlStateNormal];\n                        }\n                        [_rzrqActionSheet refresh];\n                        if (self.m_TradeType != RZRQ_Trade_Type_RQMC) {\n                            btnSJWT.enabled = YES;\n                        }\n\n                    }\n                }\n                break;\n            case RISE_STOP_PRICE:\n                if (tp == CLIENT_NODE_CTRL_TYPE_CTYPE_STATIC)\n                {\n                    NSString *str = [pTextStr stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n                    if ([str length] > 0) {\n                        self.riseStopPrice = str;\n                        [m_pRiseStopPrice setText:str];\n                        if (self.isSupportLimitPrice){\n                            [[WTPriceLimitManager sharedManager] setRiseStopPrice:str];\n                        }\n                        \n                        [self resetRiseOrFallBtnAccessibility];\n                    }\n                }\n                \n                break;\n            case NOWPRICE: // 融券卖出页面显示的是现价\n            {\n                if (tp == CLIENT_NODE_CTRL_TYPE_CTYPE_STATIC && self.m_TradeType == RZRQ_Trade_Type_RQMC) {\n                    if (_needModifyDealPrice)\n                    {\n                        NSString *str = [pTextStr stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n                        _sjwtPriceLabel.hidden = NO;\n                        _fallPriceBtn.hidden = YES;\n                        if (str && [str length] > 0) {\n                            [self nowPriceLabelFrame:str];\n                        }\n                        else {\n                            [self nowPriceLabelFrame:@\"--\"];\n                        }\n                    }\n                }\n                break;\n            }\n            case FALL_STOP_PRICE:\n                if (tp == CLIENT_NODE_CTRL_TYPE_CTYPE_STATIC && self.m_TradeType != RZRQ_Trade_Type_RQMC)\n                {\n                    NSString *str = [pTextStr stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n                    if ([str length] > 0) {\n                        self.fallStopPrice = str;\n                        [m_pFallStopPrice setText:str];\n                        if (self.isSupportLimitPrice) {\n                            [[WTPriceLimitManager sharedManager] setFallStopPrice:str];\n                        }\n                        [self resetRiseOrFallBtnAccessibility];\n                    }\n                }\n                \n                break;\n            case TRADE_TIME_STATE:\n                if (tp == CLIENT_NODE_CTRL_TYPE_CTYPE_STATIC)\n                {\n                    NSString *str = [pTextStr stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n                    if ([str length] > 0) {\n                        self.shouKaiPanState = str;\n                    }\n                }\n                break;\n            case STOCK_DEAL_PRICE: // 2127\n            {\n                if (tp == CLIENT_NODE_CTRL_TYPE_CTYPE_EDIT)\n                {\n                    price = [pTextStr stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n                    if (_needModifyDealPrice)\n                    {\n                        is_EditingChangedFromSetData = YES;\n                        if ([price length] > 0)\n                        {\n                            curStockPrice = price;\n                            m_pPrice.text = curStockPrice;\n                            [[WTPriceLimitManager sharedManager] setNowPrice:price];\n                            self.nowPrice = [NSString wtIsBlankString:self.nowPrice] ? curStockPrice : self.nowPrice;\n                        }\n                        [self SetPlusAndMinusDecimalCount];\n                    }\n                }\n                \n                \n            }\n                break;\n            case BUY_AMOUNT:\n                \n                //\t[m_pBuyAmount setText:pTextStr];\n                break;\n            case ABLE_BUY_AMOUNT:\n            case ABLE_SELL_AMOUNT:\n            {\n                if (tp == CLIENT_NODE_CTRL_TYPE_CTYPE_STATIC)\n                {\n                    EQWCHAR w[2];\n                    w[0] = '\\n';\n                    w[1] = '\\0';\n                    CEQString16 strTemp;\n                    CEQString16 strClr;\n                    //strGT.FormatChar(\"\\t\");\n                    pStrData->Print();\n                    pStrData->TrimLeft();\n                    \n                    int nPos = pStrData->Find(w, 1,1);\n                    if(nPos > 0)\n                    {\n                        strTemp.Empty();\n                        strTemp.Append((EQWCHAR*)pStrData->Ptr(),nPos);\n\n                    }\n                    hasAbleAmount = YES;\n                    \n                    canWTAmountString = [RZRQAction hasValidChinese:pTextStr];//股\n                    \n                    ableAmount = [CopyEQStringToNsString(&strTemp) stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n                }\n            }\n                break;\n            case PERCENT:\n                if (tp == CLIENT_NODE_CTRL_TYPE_CTYPE_STATIC)\n                {\n                    NSString *tmp = [pTextStr stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n                    //JIRA-22706 主站针对可转债返回36648字段步长,\n                    //备注:36648字段android端两融之前并未使用,而iOS端交易两融有代码使用,实际可能已经没有用处，\n                    //为减少影响,改部分代码先保留;\n                    self.amountStep = tmp;\n                    if(tmp != nil && [tmp length] > 0 && m_pCollRation != nil)\n                    {\n                        [m_pCollRation setText:tmp];\n                        float v = [[tmp stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@\"\\n %\"]] floatValue];\n                        if (v > 300.00)\n                        {\n                            m_pCollRation.textColor = [UIColor blueColor];\n                        }\n                        else if (v < 150.00)\n                        {\n                            m_pCollRation.textColor = [UIColor redColor];\n                        }\n                        else {\n                            m_pCollRation.textColor = [UIColor blackColor];\n                        }\n                    }\n                }\n                break;\n            case SAFEMONEY:\n                if (tp == CLIENT_NODE_CTRL_TYPE_CTYPE_STATIC)\n                {\n                    NSString *tmp = [pTextStr stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n                    if(tmp != nil && [tmp length] > 0 && m_pSafeMoney != nil)\n                    {\n                        [m_pSafeMoney setText:tmp];\n                    }\n                }\n                break;\n            case ABLEMONEY:\n                if (tp == CLIENT_NODE_CTRL_TYPE_CTYPE_STATIC)\n                {\n                    NSString *tmp = [pTextStr stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n                    if(tmp != nil && [tmp length] > 0 && m_pAbleMoney != nil)\n                    {\n                        [m_pAbleMoney setText:tmp];\n                    }\n                }\n                break;\n            case TOTALLIABILITIES:\n                if (tp == CLIENT_NODE_CTRL_TYPE_CTYPE_STATIC)\n                {\n                    NSString *tmp = pTextStr;\n                    if(tmp != nil && m_totalLiabilities != nil)\n                    {\n                        [m_totalLiabilities setText:[tmp stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]]","infill":"stockCode = self.wt_MaiMaiPanCommon.curCode;\n    }\n    els","suffix":"e{\n        \n    \n    return [[WTTradeSetArchiverManager shareManager] getTradeSetDefaultModelWithStockMarket:self.selectStockMarket stockCode:stockCode stockName:self.m_pStockName.text nowPrice:self.nowPrice normalBuyPrice:[self getNormalTradeSetBuyPrice] normalSellPrice:[self getNormalTradeSetSellPrice] bondBuyPrice:[self getBondTradeSetBuyPrice] bondSellPrice:[self getBondTradeSetSellPrice] fundBuyPrice:[self getFundTradeSetBuyPrice] fundSellPrice:[self getFundTradeSetSellPrice] ableAmount:self.oldAbleAmount isBuy:[self bTradeTypeIsBuy] riseStopPrice:m_pRiseStopPrice.text fallStopPrice:m_pFallStopPrice.text];\n}\n\n//科创板限价提醒需求,JIRA-19906\n- (void)handleHQDataWithBuyPrice1:(NSString *)buyPrice1 sellPrice1:(NSString *)sellPrice1 newPrice:(NSString *)newPrice preClosePrice:(NSString *)preClosePrice{\n    WTPriceLimitManager *manager = [WTPriceLimitManager sharedManager];\n    manager.buyPrice1 = buyPrice1;\n    manager.sellPrice1 = sellPrice1;\n    manager.nowPrice = newPrice;\n    manager.preClosePrice = preClosePrice;\n    if (self.isSupportLimitPrice && self.isOpenShowPriceLimit) {\n        [self handleUpdatePriceLimit];\n    }\n}\n\n- (void)updateRisePriceBtnFrameWithIsSupportLimitPrice:(BOOL)isSupportLimitPrice {\n    CGSize riseNumberSize = [m_pRiseStopPrice.text boundingRectWithSize:CGSizeMake(99999, 0) options:NSStringDrawingTruncatesLastVisibleLine | NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:m_pRiseStopPrice.font} context:nil].size;\n    CGRect tempFrame = self.risePriceBtn.frame;\n    tempFrame.size.width = 25 + riseNumberSize.width + 10;\n    tempFrame.origin.x = m_pStockCode.frame.origin.x + m_pStockCode.frame.size.width - tempFrame.size.width;\n    if (isSupportLimitPrice) {\n        tempFrame.origin.x -= 18;\n    }\n    self.risePriceBtn.frame = tempFrame;\n    \n    tempFrame = m_pRiseStopPrice.frame;\n    tempFrame.origin.x = 25+6;\n    m_pRiseStopPrice.frame = tempFrame;\n    \n    tempFrame = _riseStop.frame;\n    tempFrame.origin.x = 4;\n    _riseStop.frame = tempFrame;\n}\n\n- (void)handleUpdatePriceLimit {\n    BOOL isBuy = [self bTradeTypeIsBuy];\n    WTPriceLimitManager *manager =  [WTPriceLimitManager sharedManager];\n    \n    if ([WTPriceLimitManager isCurrentTimeAndBussinessSupportLimitPrice]) {\n        NSString *limitPriceStr = [WTPriceLimitManager getPriceLimitIsBuy:isBuy buyPrice1:manager.buyPrice1 sellPrice1:manager.sellPrice1 newPrice:manager.nowPrice preClosePrice:manager.preClosePrice stopPrice:isBuy?manager.riseStopPrice:manager.fallStopPrice WithStockCode:self.m_pStockCode.text withMarketId:self.selectStockMarket];\n        \n        limitPriceStr= limitPriceStr?:@\"--\";\n        \n        if (isBuy) {\n            m_pRiseStopPrice.text = limitPriceStr;\n        }else {\n            m_pFallStopPrice.text = limitPriceStr;\n        }\n        \n        if (![_riseStop.text isEqualToString:@\"上限\"]) {\n            _riseStop.text = @\"上限\";\n            _fallStop.text = @\"下限\";\n            [self resetRiseAndFallBackWithButton:_fallPriceBtn];\n            [self resetRiseAndFallBackWithButton:_risePriceBtn];\n            _kcbPriceInfoBtn.hidden = NO;\n            [self updateRisePriceBtnFrameWithIsSupportLimitPrice:YES];\n        }\n        \n    }else {\n        if (![_riseStop.text isEqualToString:@\"涨停\"]) {\n            m_pRiseStopPrice.text = self.riseStopPrice;\n            m_pFallStopPrice.text = self.fallStopPrice;\n            _riseStop.text = @\"涨停\";\n            _fallStop.text = @\"跌停\";\n            [self resetRiseAndFallBackWithButton:_fallPriceBtn];\n            [self resetRiseAndFallBackWithButton:_risePriceBtn];\n            _kcbPriceInfoBtn.hidden = YES;\n            [self updateRisePriceBtnFrameWithIsSupportLimitPrice:NO];\n        }\n\n    }\n}\n\n//是否开启明日涨跌停,非市价委托\n- (BOOL)isTomorrowMoveOpen{\n    return [self.shouKaiPanState isEqualToString:@\"6\"] && !self.isSJWT;\n}\n\n- (void)updateTomorrowLabelLayout{\n    if (self.m_TradeType == RZRQ_Trade_Type_RQMC) {\n        [self.tomorrowLabel mas_remakeConstraints:^(MASConstraintMaker *make) {\n            make.centerY.equalTo(_risePriceBtn);\n            make.width.height.mas_equalTo(28);\n            make.height.height.mas_equalTo(19);\n            make.right.equalTo(_risePriceBtn.mas_left).offset(-6);\n        }];\n    }else{\n        [self.tomorrowLabel mas_remakeConstraints:^(MASConstraintMaker *make) {\n            make.centerY.equalTo(_risePriceBtn);\n            make.width.height.mas_equalTo(28);\n            make.height.height.mas_equalTo(19);\n            make.left.equalTo(m_pStockCode.mas_left);\n        }];\n    }\n}\n\n- (void)ProcessTipAndSwitchId:(CEQStuffTextStruct* )pStuffData\n{\n    if (pStuffData != NULL) {\n        StuffTextModel *textModel = (StuffTextModel *)pStuffData->StuffModelOutput();\n        [self textRequestDataFinished:textModel needShowTip:YES];\n    }\n}\n\n- (void)handleBuySellSuccessTip:(NSString *)string rzrqTradeType:(RZRQ_Trade_Type)rzrqTradeType{\n    NSString *orderId = [WTTradeCheckOrderManager fetchOrderIdWithTextString:string];\n    if (orderId) {\n        BOOL isBuy = [self bTradeTypeIsBuy];\n        WeakObj(self);\n        [self.orderManager requestTodayWTType:WTTradeCheckOrderStandeRZRQ orderId:orderId marketId:self.selectStockMarket successHandle:^(QuickBuyOrSellTodayWTModal * _Nonnull model, StuffBaseModel * _Nonnull data) {\n            [[WTStockPriceMonitoringManager sharedInstance] startDealMonitorWithTodayWtModel:model stockMarket:selfWeak.selectStockMarket isBuyOrSell:isBuy rzrqTradeType:rzrqTradeType];\n        } errorHandle:nil textHandle:nil completeHandle:nil];\n    }\n}\n\n- (void)textRequestDataFinished:(StuffTextModel *)textModel needShowTip:(BOOL)needShowTip\n{\n    if (!textModel || [textModel modelType] != StuffModelTypeText) {\n        return;\n    }\n\n    if ([textModel isKindOfClass:[StuffJSONModel class]]) {\n        NSDictionary *dic = [(StuffJSONModel *)textModel JSONObjectFromUTF8Data];\n        if (!dic) {\n            dic = [(StuffJSONModel *)textModel JSONObjectFromGBKData];\n        }\n        NSMutableDictionary *params = [NSMutableDictionary dictionaryWithDictionary:dic];\n        [params setObject:@(YES) forKey:WTRiskBuyAlertViewTwiceBuyKey];\n        [self handleRiskAlert:params];\n        return;\n    }\n\n    \n    NSString *contentStr = textModel.text;\n    CEQString16 *pContent = new CEQString16;\n    CopyNSStringToEQString(contentStr, *pContent);\n    int nId = textModel.textId;\n    int type = textModel.type;\n    BOOL needShowAlert = YES;\n    BOOL isWTFail = NO;\n    NSString *wtAmount = @\"\";\n    switch (nId)\n    {\n        case MSG_ID_LOGIN_FIRST:\n        {\n            [WtLoginUtil processLoginFirstMsg];\n            break;\n        }\n        case MSG_ID_BUY_SUCC:\n        {\n            [self RZRQAddStockToSSG]; //买入成功加入自选股\n        }\n        case MSG_ID_SELL_SUCC:\n        {\n            RZRQ_Trade_Type tradeType = [self.fastOrderPresenter getRealTradeTypeWithOldTradeType:self.m_TradeType];\n            if(![WTTradeCheckOrderManager shouldHandleFailedTip:self.selectStockMarket]){\n                NSNumber *wtType = @(1);\n                if ([self bTradeTypeIsBuy]) {\n                    wtType = @(0);\n                }\n                //如果不支持废单提示，则委托成功后添加到监控队列，支持的等到查委托结果之后再添加监控;\n                [[WTStockPriceMonitoringManager sharedInstance] startDealMonitorWithStockCode:self.tradeConfirm.twiceConfirmStockCode wtPrice:self.tradeConfirm.twiceConfirmWTPrice wtOrderData:textModel stockName:self.m_pStockName.text amount:self.tradeConfirm.twiceConfirmWTCount wtType:wtType rzrqTradeType:tradeType];//直连成交推送监控\n            }\n            [self handleBuySellSuccessTip:textModel.text rzrqTradeType:tradeType];\n            //委托买入卖出成功\n            if (![WTKeChuangBanHandler isShouPanDingJia]&&(self.m_TradeType != RZRQ_Trade_Type_MQHK && self.m_TradeType != RZRQ_Trade_Type_MQHQ)){\n                [self clearOnlyAmountNeedChangeAbleAmount:YES customSubAmount:nil tradeType:tradeType];\n            }else{\n                [self clearDataWithNeedClearStock:YES];\n            }\n            \n            //买入卖出成功后，如果是市价的情况","relevantFile":"","relevantFileList":[],"filePath":"RZRQAction.mm","template":"objective-cpp","multiRes":{"hipilot":"]];\n                    }","deepseek-chat-lite":";","CodeQwen2.5-7B":";","copilot":"stockCode = self.wt_MaiMaiPanCommon.curCode;\n    }\n    els"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n    \n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:columnNoArray.count];\n    \n    NSMutableDictionary *resultDictionary","infill":" = [[NSMutableDictionary alloc] initWithCapacity:columnNoArray.count];\n    \n    for (NSString *columnNo in colu","suffix":"mnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultDictionary setObject:columnArray[index] forKey:columnNo];\n            [resultArray addObject:columnArray[index]];\n        } else {\n            [resultDictionary setObject:columnArray[index] forKey:columnNo];\n            [resultArray addObject:@\"\"];\n        }\n    }\n    \n    return resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray \n                                            codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n@implementation LJMarketClearPositionRspModel\n\n@synthesize yesterdayClosePrice;\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\", @\"10\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n- (nonnull NSArray<NSArray *> *)getRspValueWithCodeList:(nonnull NSArray<NSString *> *)codeList {\n    NSArray *resultData = [self getRspValueWithColumnNoArray:columnNoArray codeList:codeList];\n    \n    NSMutableArray *modelArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    \n    for(int i = 0; i < codeList.count; i++) {\n        NSArray *rspValueArray = resultData[i];\n        LJMarketClearPositionRspModel *model = [[LJMarketClearPositionRspModel alloc] init];\n        model.stockCode = codeList[i];\n        model.buyPrice = [rspValueArray thsStringAtIndex:0];\n        model.sellPrice = [rspValueArray thsStringAtIndex:1];\n        model.limitUpPrice = [rspValueArray thsStringAtIndex:2];\n        model.limitDownPrice = [rspValueArray thsStringAtIndex:3];\n        [modelArray addObject:model];\n    }\n    \n    return modelArray;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"= [NSMutableDictionary dictionaryWithCapacity:columnNoArray.count];\n    for (NSString *columnNo in colu","deepseek-chat-lite":" = [NSMutableDictionary new];","CodeQwen2.5-7B":" = [[NSMutableDictionary alloc] initWithCapacity:columnNoArray.count];","copilot":" = [[NSMutableDictionary alloc] initWithCapacity:columnNoArray.count];\n    \n    for (NSString *columnNo in colu"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n    }\n    return self;\n}\n\n- (NSArray *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @[];\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @[];\n    }\n        \n    NSMutableDictionary *resultDictionary = [[NSMutableDictionary alloc] initWithCapacity:columnNoArray.count];\n    \n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultDictionary setObject:columnArray[index] forKey:columnNo];\n        } else {\n            [res","infill":"ultDictionary setObject:@\"\" forKey:columnNo];\n        }\n    }\n    \n    retur","suffix":"n resultArray;\n}\n\n- (NSArray<NSArray *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray \n                                            codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    for (NSString *code in codeList) {\n        NSArray *rspValueArray = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:rspValueArray];\n    }\n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n@implementation LJMarketClearPositionRspModel\n\n@synthesize yesterdayClosePrice;\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"20\", @\"21\", @\"69\", @\"70\", @\"10\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n- (nonnull NSArray<NSArray *> *)getRspValueWithCodeList:(nonnull NSArray<NSString *> *)codeList {\n    NSArray *resultData = [self getRspValueWithColumnNoArray:columnNoArray codeList:codeList];\n    \n    NSMutableArray *modelArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    \n    for(int i = 0; i < codeList.count; i++) {\n        NSArray *rspValueArray = resultData[i];\n        LJMarketClearPositionRspModel *model = [[LJMarketClearPositionRspModel alloc] init];\n        model.stockCode = codeList[i];\n        model.buyPrice = [rspValueArray thsStringAtIndex:0];\n        model.sellPrice = [rspValueArray thsStringAtIndex:1];\n        model.limitUpPrice = [rspValueArray thsStringAtIndex:2];\n        model.limitDownPrice = [rspValueArray thsStringAtIndex:3];\n        [modelArray addObject:model];\n    }\n    \n    return modelArray;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"ultDictionary setObject:@\"\" forKey:columnNo];\n        }\n    }\n    \n    NSArray *resultArray = [resultDictionary allValues];\n    retur","deepseek-chat-lite":"ultDictionary setObject:@\"\" forKey:columnNo];","CodeQwen2.5-7B":"ultDictionary setObject:@\"\" forKey:columnNo];","copilot":"ultDictionary setObject:@\"\" forKey:columnNo];\n        }\n    }\n    \n    retur"}},{"prefix":"/*\n *  AMPublicInterface.c\n *  AMHexin\n *\n *  Created by agui on 3/23/11.\n *  Copyright 2011 agui. All rights reserved.\n *\n */\n\n#include \"AMPublicInterface.h\"\n#import \"AMUITabFm+HXBusiness.h\"\n#import \"PageView+HXBusiness.h\"\n#import \"AlertViewBusiness.h\"\n#import <AMIphoneBase/NewsFlagManager.h>\n#import \"AM_UI_VarKeyString.h\"\n#include \"EQAppFrame.h\"\n#import <EQConfigModul/EQSettingManager.h>\n#include \"EQFrameSwitchManager.h\"\n#include \"EQLocaIdDef.h\"\n#import <EQCommuModul/CompInstanceManager.h>\n#include \"AppUpdateModule.h\"\n#include \"ActionManager.h\"\n\n#include \"LoginLater.h\"\n#import \"DoRequestXML.h\"\n#import <AMIphoneBase/NewsImageCache.h>\n\n#import \"EQWebManage.h\"\n#import <EQFoundation/EQColor.h>\n#import \"ApplicationCallsManager.h\"\n#import \"AMPublicVarName.h\"\n#import <HXBase/HXBaseViewControllerProtocol.h>\n#import \"HUAccountManager.h\"\n#import \"EnvironmentVariableManager.h\"\n#import \"HXHttpNetwork.h\"\n\n#import \"WTPasswordTypeModel.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXUserInfo.h\"\n#import \"HXSocketFetcher+Acknowledging.h\"\n#import \"__HXPageControl.h\"\n#import \"HXWTAccountManager.h\"\n#import \"WTChicangFlagInfo.h\"\n#import \"CrashReporterLogsManager.h\"\n#import \"AMSQLPublicProxy.h\"\n#import \"SystemAlertView.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import \"HXCommunicateBusiness.h\"\n#import \"HXTCPCommuniSwitch.h\"\n#import <HXCore/HXQSCoreAPI.h>\n#import \"HXRequestDataTool.h\"\n#import <HXCommunicateCenter/HXCommunicateCenter.h>\n#import \"HXParseDataTool.h\"\n#import <HXServerManager/HXQSServerConnectManager.h>\n#import <HXCommunicateCenter/OsInfo.h>\n#import \"HXAppCommuni.h\"\n#import \"HXWTModuleProxy.h\"\n#import \"MultiAccountRequestModel.h\"\n#import <HXBase/HXBaseMarketTools.h>\n#import \"HXGrayRelease+Register.h\"\n#import <HXELKLog/HXBusinessELKLog.h>\n#import \"THSPageListManager.h\"\n#import <HXNetWorkMonitor/HXNetWorkMonitor.h>\n#ifdef _DUBUG\n#i","infill":"mport ","suffix":"\"DataMonitorManager.h\"\r\n#import \"HXSocketRquestHook.h\"\r\n#endif\r\n\r\nextern OsInfo* g_osInfo;\r\nextern int g_curPageid;\r\nextern bool g_bCollectActionDetail;\r\nextern BOOL g_bCollectNetWorkInfo;\r\nextern CEQAppFrame* EQGetAppFrame();\r\nextern CEQCommunicationManager* EQGetCommuniManager();\r\nextern NSString* CopyEQStringToNsString(CEQString16* pEQsrc);\r\nextern EQBOOL CopyNSStringToEQString(NSString* pNsStr,CEQString16& pEQStringSave);\r\nextern CEQNodeManager* EQGetNodeManager();\r\nextern EQWebManage * g_pWebManage;\r\n\r\n//跳转到指定的页面 id\r\nBOOL AM_UI_Public_Proxy::GogoPageWithId(int nPageId,NSString* strCode)\r\n{\r\n    NSMutableDictionary* dic = [NSMutableDictionary dictionaryWithCapacity:1];\r\n    if(strCode != nil)\r\n    {\r\n        [dic setObject:strCode forKey:STR_UI_FRAMEWORK_STOCK_CODE];\r\n    }\r\n    return [[AMUIFrameWork shareingUIFramework] goToPageWithId:nPageId param:dic needPop:NO needDelete:YES];\r\n}\r\n\r\nBOOL AM_UI_Public_Proxy::IsWeituoPage(int pageId)\r\n{\r\n    static int const PAGE_IDS_WEITUO[] = {\r\n        PAGE_WTXIADAN_BUY_ID,\r\n        PAGE_WTXIADAN_SELL_ID,\r\n        PAGE_WT_BUY_COMFIRM_ID,\r\n        PAGE_WT_SELL_COMFIRM_ID,\r\n        PAGE_CHICHANG_ID,\r\n        PAGE_CHEDAN_ID,\r\n        PAGE_DO_CHICANG,\r\n        PAGE_GB_CHICANG,\r\n        PAGE_WT_SEARCH_ID,\r\n        EQLOCAL_NODE_ID_TRADE_SEARCH_TODAY,\r\n        EQLOCAL_NODE_ID_ENTRUST_SEARCH_TODAY,\r\n        EQLOCAL_NODE_ID_TRADE_SEARCH,\r\n        EQLOCAL_NODE_ID_ENTRUST_SEARCH,\r\n        PAGE_B2Q_COMFIRM_ID,\r\n        PAGE_WT_SETTING_ID,\r\n        PAGE_WTLOGIN_ID};\r\n    \r\n    for (int i=0; i<sizeof(PAGE_IDS_WEITUO)/sizeof(int); i++) {\r\n        if (PAGE_IDS_WEITUO[i] == pageId) {\r\n            return YES;\r\n        }\r\n    }\r\n    return NO;\r\n}\r\n\r\nBOOL AM_UI_Public_Proxy::GotoWeituoPage(int pageId, NSDictionary* params)\r\n{\r\n    NSString *segmentIndexStr = [params objectForKey:@\"segmentIndex\"];\r\n    if(segmentIndexStr.length > 0 && [segmentIndexStr isEqualToString:@\"1\"])\r\n    {//说明是港美股的委托\r\n        if ([HUAccountManager sharedManager].isLogin)\r\n        {\r\n            return GogoPageWithIdAndParams(pageId, params);\r\n        }\r\n        else\r\n        {\r\n            return GogoPageWithIdAndParams(PAGE_WTLOGIN_ID, params);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        EQINT nWTLogin = -1;\r\n        if (AM_Setting_Vars_Proxy::GetVariableValue((EQCHAR*)KEY_WTLOGIN, nWTLogin))\r\n        {\r\n            [[HXWTAccountManager sharedInstance] checkKeyWTLoginAndBLogin:nWTLogin sence:KeyWTLoginCheckSenceGoWTPage];\r\n            if (nWTLogin == 1)\r\n            {\r\n                if (pageId == PAGE_WTLOGIN_ID)\r\n                {\r\n                    GotoDefaultPageInTabBar([AMUIPublicProxy tradeIndexInTabbarVC], params);\r\n                    return YES;\r\n                }\r\n                else\r\n                {\r\n                    return GogoPageWithIdAndParams(pageId, params);\r\n                }\r\n            }\r\n            else if (nWTLogin == -1 && ![[HXGrayRelease shared] switchForKey:GrayReleaseWTLoginOpt])\r\n            {\r\n                WTPasswordTypeModel *communicatePassword = [WTPasswordTypeModel getPasswordTypeModelWithPassword:WTCommunicatePasswordForce];\r\n                return [AMUIPublicProxy gotoPageWithId:EQLOCAL_NODE_ID_FRAME_JIAOYI params:@{ChangePasswordTypesKey:@[communicatePassword]}];\r\n            }\r\n            else\r\n            {\r\n                return GogoPageWithIdAndParams(PAGE_WTLOGIN_ID, params);\r\n            }\r\n        }\r\n        else {\r\n            GotoDefaultPageInTabBar([AMUIPublicProxy tradeIndexInTabbarVC],params);\r\n            return YES;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n 跳转到指定的页面 id ，并传递一定的参数\r\n @param int nPageId 页面id\r\n @param NSDictionary* params  键值对的参数\r\n */\r\nBOOL AM_UI_Public_Proxy::GogoPageWithIdAndParams(int nPageId,NSDictionary* params)\r\n{\r\n\tNSMutableDictionary* dic = [NSMutableDictionary dictionaryWithDictionary:params];\r\n\treturn [[AMUIFrameWork shareingUIFramework] goToPageWithId:nPageId param:dic needPop:NO needDelete:YES];\r\n}\r\n\r\n//特殊的页面跳转，如果是弹出页面，调用这个方法跳转，会当做普通页面压栈处理，用于处理消息中心的列表点击跳转\r\nBOOL AM_UI_Public_Proxy::GogoPageWithIdAndParamsAndNeedPop(int nPageId,NSDictionary* params)\r\n{\r\n    NSMutableDictionary* dic = [NSMutableDictionary dictionaryWithDictionary:params];\r\n    return [[AMUIFrameWork shareingUIFramework] goToPageWithId:nPageId param:dic needPop:YES  needDelete:YES];\r\n}\r\n\r\n//搜索页面跳转不需要压栈，因此needDelete是NO\r\nBOOL AM_UI_Public_Proxy::GogoPageWithIdAndParamsAndDonotDelete(int nPageId,NSDictionary* params)\r\n{\r\n    NSMutableDictionary* dic = [NSMutableDictionary dictionaryWithDictionary:params];\r\n    return [[AMUIFrameWork shareingUIFramework] goToPageWithId:nPageId param:dic needPop:YES  needDelete:NO];\r\n}\r\n\r\n//得到当前显示的页面\r\nPageView* AM_UI_Public_Proxy::GetCurPage()\r\n{\r\n\treturn\t(PageView*)[[AMUIFrameWork shareingUIFramework] getCurPageView];\r\n}\r\n\r\n//获取使用HXBaseViewController创建的页面\r\nHXBaseViewController *AM_UI_Public_Proxy::GetCurHXBaseViewController()\r\n{\r\n    return [[AMUIFrameWork shareingUIFramework] getCurHXBaseViewController];\r\n}\r\n\r\n//刷新当前显示的指数条\r\nvoid AM_UI_Public_Proxy::RefreshIndexCurPage()\r\n{\r\n\t[[AMUIFrameWork shareingUIFramework] refreshIndexPage];\r\n}\r\n\r\n\r\n//得到当前显示的页面的股票代码\r\nNSString* AM_UI_Public_Proxy::GetCurPageStockCode()\r\n{\r\n    PageView* view = (PageView*)[[AMUIFrameWork shareingUIFramework] getCurPage];\r\n\tNSString* stockCode = [[view getPageData] objectForKey:STR_UI_FRAMEWORK_STOCK_CODE];\r\n    return\tstockCode;\r\n}\r\n\r\n//得到当前显示的页面(在 tabBar 里面)\r\nPageView* AM_UI_Public_Proxy::GetCurPageInTabBar()\r\n{\r\n\tAMUIFrameWork* pFm = [AMUIFrameWork shareingUIFramework];\r\n\tif([pFm isKindOfClass:[AMUITabFm class]])\r\n\t{\r\n\t\treturn\t[(AMUITabFm*)pFm getCurPageInTabBar];\r\n\t}\r\n\treturn nil;\r\n}\r\n\r\n//得到当前显示的页面的 id (在 tabBar 里面)\r\nint AM_UI_Public_Proxy::GetCurPageIdInTabBar()\r\n{\r\n\tPageView* pv = AM_UI_Public_Proxy::GetCurPageInTabBar();\r\n\treturn [pv getPageId];\r\n}\r\n\r\n//跳转到指定栈的默认页面 (在 tabBar 里面)，即点击tabbar的切换效果\r\nvoid AM_UI_Public_Proxy::GotoDefaultPageInTabBar(int nNavIndex, NSDictionary* dicParams)\r\n{\r\n\tAMUIFrameWork* pFm = [AMUIFrameWork shareingUIFramework];\r\n\tif([pFm isKindOfClass:[AMUITabFm class]])\r\n\t{\r\n\t\t[(AMUITabFm*)pFm gotoDefPageInNavIndex:nNavIndex withParams:dicParams];\r\n\t}\r\n}\r\n\r\n\r\n//查找是否为横屏页面\r\nBOOL AM_UI_Public_Proxy::isLandscapePopPage(int nPageId)\r\n{\r\n    CEQNodeManager* pNodelMgr = EQGetNodeManager();\r\n    if(pNodelMgr != nil)\r\n    {\r\n       return  pNodelMgr->IsPopLandscapeNodeID(nPageId);\r\n    }\r\n    \r\n    return NO;\r\n}\r\n\r\nint AM_UI_Public_Proxy::GetCurSelectedTabIndex()\r\n{\r\n\treturn [(AMUITabFm*)[AMUIFrameWork shareingUIFramework] getCurSelectedTabIndex];\r\n}\r\n\r\n// 设置添加自选的提示\r\nvoid AM_UI_Public_Proxy::ShowAddSelfStockTipOnTabBar()\r\n{\r\n\t[(AMUITabFm*)[AMUIFrameWork shareingUIFramework] ShowAddSelfStockTipOnTabBar];\r\n}\r\n\r\nvoid AM_UI_Public_Proxy::ClearTipOnTabBar()\r\n{\r\n\t[(AMUITabFm*)[AMUIFrameWork shareingUIFramework] ClearTipOnTabBar];\r\n}\r\n\r\n// 通知更新标题\r\nBOOL AM_UI_Public_Proxy::UpdateCurPageTitle()\r\n{\r\n    if([[NSThread currentThread]isMainThread])\r\n    {\r\n        [[AMUIFrameWork shareingUIFramework] updateCurPageTitle];\r\n    }\r\n    else\r\n    {\r\n        [[AMUIFrameWork shareingUIFramework] performSelectorOnMainThread:@selector(updateCurPageTitle) withObject:nil waitUntilDone:NO];\r\n    }\r\n\treturn YES;\r\n}\r\n\r\nvoid AM_UI_Public_Proxy::SetScrollableTitlesWithFocus(int nFocus,\r\n\t\t\t\t\t\t\t\t\t\t  NSMutableArray* aryTitles,\r\n\t\t\t\t\t\t\t\t\t\t  NSMutableArray* aryCodes)\r\n{\r\n\treturn [[AMUIFrameWork shareingUIFramework] setScrollableTitlesWithFocus:nFocus titles:aryTitles codes:aryCodes];\r\n}\r\n// 设置当前标题\r\nvoid AM_UI_Public_Proxy::SetCurTitle(NSString* strTitle, NSString* strSubTitle)\r\n{\r\n    return [[AMUIFrameWork shareingUIFramework] setCurTitle:strTitle subTitle:strSubTitle];\r\n}\r\n\r\nUIBarButtonItem* ","relevantFile":"","relevantFileList":[],"filePath":"AMPublicInterface.mm","template":"objective-cpp","multiRes":{"hipilot":"mport ","deepseek-chat-lite":"mport \"DataMonitorManager.h\"","CodeQwen2.5-7B":"nclude \"HXNetWorkMonitor.h\"\r","copilot":"mport "}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXBase/ViewControllerEx.h>\n\n@interface HXSocketRequestHook () <HXVCSwitchNotifyProtocol>\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, assign) int frameId;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        self.pageId = [AMUIPublicProxy currentPageControl].pageID;\n        [[HXVCSwitchNotifyManager shareInstance] registerNotifyObj:self];\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_frameId == protocolInfo.pageId || _pageId == protocolInfo.pageId) { // pageId和frameId有可能一样\n        return;\n    }\n    if (_frameId == 0) { // 当前页面行情段未知，把第一次的行情段请求frameId认为是页面对应的行情段frameId\n        _frameId = protocolInfo.pageId;\n        return;\n    }\n    [HXShowTipProxy showTip:[NSString stringWithFormat:@\"行情段请求冲突，protocolId: %d, instanceId: %d, pageId: %d\", protocolInfo.protocolId, protocolInfo.instanceId, protocolInfo.pageId]];\n}\n\n#pragma mark - HXVCSwitchNotifyProtocol\n\n/// 必须实现，不然无法注册切换页面的观察者\n- (void)newVCWillShow:(NSDictionary *)VCHashDic {\n    [self reset];\n}\n\n- (void)newVCDidAppear:(ViewControllerEx *)VC {\n    self.pageId = [VC getFocusPageId];\n}\n\n- (void)VCWillDisappear:(ViewControllerEx *)VC {\n    [self reset];\n}\n\n- (void)newSubVCDidAppear:(int)pageId {\n    self.pageId = pageId;\n}\n\n#pragma mark - setter\n\n- (void)setPageId:(int)pageId {\n    if (pageId <= 0) {\n        return;\n    }\n    _pageId = pageId;\n    _frameId = [[self.class frameIdDict] thsNumberForKey:@(_pageId)].intValue;\n}\n\n#pragma mark - private\n\n+ (NSDictionary *)frameIdDict {\n    return @{\n        @2790:@2210, //首页\n        @2312:@2312, //大盘\n        @2313:@2313, //板块\n        @2383:@2383, //个股\n        @2378:@2378, //港股\n        @3225:@2378, //港股etf\n        @2382:@2382, //美股\n        @2386:@2382, //美股etf\n        @2406:@2406, //期货国内行情\n        @2407:@2407, //期货国外行情\n        @2501:@2501, //ETF\n        @2269:@2442, //可转债\n        @2205:@2267, //分时\n    };\n}\n\n- (void)reset {","infill":"   _pageId = 0;\n    _frameId = 0;\n}\n\n@end\n\n#endif\n","suffix":"","relevantFile":"<file_path>HXNavigationControllExBusiness.mm\n#import \"CoverViewHideManageCenter.h\"\n#import \"AM_UI_VarKeyString.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n\n@interface HXNavigationControllExBusiness ()\n\n@property (nonatomic) BOOL popView;\n\n@end\n\n@implementation HXNavigationControllExBusiness\n\n#pragma mark - HXNavigationControllExBusinessProtocol\n\n- (void)navigationControllerEx:(NavigationControllEx *)navigationControllerEx willShowViewController:(UIViewController *)viewController animated:(BOOL)animated {\n    \n    // 处理网页通过saveExtraStatInfo保存到本地的值\n    NSDictionary *webLogInfo = [EnvironmentVariableManager sharedInstance].webLogDictionary;\n    ViewTrace *instance = [ViewTrace shareViewTrace];\n    if ([webLogInfo[from_objectKey] isKindOfClass:[NSString class]]) {\n        instance.currentViewID.logObject = webLogInfo[from_objectKey];\n    }\n    \n    //判断当前页面是客户端页面还是网页页面\n    NSArray *webPageIdArr = [EQWebManage getNewsWebViewPageId];\n    NSString *currentPageId = [ViewTrace shareViewTrace].currentViewID.pageId;\n    if([webPageIdArr containsObject:currentPageId])\n    {\n        if ([webLogInfo[ResourceidInURLKey] isKindOfClass:[NSString class]]) {\n            instance.currentViewID.resourceId = webLogInfo[ResourceidInURLKey];\n        }else if ([webLogInfo[from_resourcesidKey] isKindOfClass:[NSString class]]) {\n            instance.currentViewID.resourceId = webLogInfo[from_resourcesidKey];\n        }\n    }\n    \n    [[EnvironmentVariableManager sharedInstance].webLogDictionary removeAllObjects];\n    \n    // 处理客户端页面是否返回\n    ViewBackward *viewBackward = [ViewBackward shareViewBackward];\n    if (viewBackward.backwardAction == BackwardAssigned) {\n        viewBackward.isBack = AppearBackwardInButton;\n    }else if (viewBackward.backwardAction == BackwardUnassigned && _popView){\n        viewBackward.isBack = AppearBackwardInGesture;\n    }else{\n        viewBackward.isBack = AppearForward;\n    }\n    _popView = NO;\n    viewBackward.backwardAction = BackwardUnassigned;\n    [[HXVCSwitchNotifyManager shareInstance] newVCWillShow:@{CurrentNavTopVC:[NSString stringWithFormat:@\"%lu\",(unsigned long)viewController.hash]}];\n}\n\n- (void)navigationControllerEx:(NavigationControllEx *)navigationControllerEx didShowViewController:(UIViewController *)viewController animated:(BOOL)animated {\n    [[CoverViewHideManageCenter shareCenter] contextChanged:@{CurrentNavTopVC:[NSString stringWithFormat:@\"%lu\",(unsigned long)viewController.hash]}];\n}\n\n- (void)navigationControllerEx:(NavigationControllEx *)navigationControllerEx didPopViewControllerAnimated:(BOOL)animated {\n    AM_Setting_Vars_Proxy::SetVariableValue((EQCHAR*)KEY_NEWS_STOCKNAME_DOWN, 0);\n    _popView = YES;\n}\n\n HXSocketRequestHook.m\n EQHexin\n\n Created by cjqths on 2024/7/19.\n Copyright © 2024 Hexin. All rights reserved.","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"_frameId = 0;\n}","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"   _pageId = 0;\n    _frameId = 0;\n}\n\n@end\n\n#endif\n"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXBase/ViewControllerEx.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, assign) int frameId;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        self.pageId = [AMUIPublicProxy currentPageControl].pageID;\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_frameId == protocolInfo.pageId) { // 请求的pageId和当前的frameId一致，无冲突\n        return;\n    }\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (self.pageId != currentPageId) { // 页面发生了切换，更新pageId和frameId\n        self.pageId = currentPageId;\n        if (self.frameId == 0) { // 当前页面行情段未知，把第一次的行情段请求frameId认为是页面对应的行情段frameId\n            self.frameId = protocolInfo.pageId;\n            return;\n        }\n        \n    }\n    //","infill":" 当前页面行情段已知，但是请求的行情段和当前页面行情段不一致，提示冲突\n    [HXSh","suffix":"owTipProxy showTip:[NSString stringWithFormat:@\"行情段请求冲突，protocolId: %d, instanceId: %d, pageId: %d\", protocolInfo.protocolId, protocolInfo.instanceId, protocolInfo.pageId]];\n}\n\n#pragma mark - setter\n\n- (void)setPageId:(int)pageId {\n    if (pageId <= 0) {\n        return;\n    }\n    _pageId = pageId;\n    _frameId = [[self.class frameIdDict] thsNumberForKey:@(_pageId)].intValue;\n}\n\n#pragma mark - private\n\n+ (NSDictionary *)frameIdDict {\n    return @{\n        @2790:@2210, //首页\n        @2312:@2312, //大盘\n        @2313:@2313, //板块\n        @2383:@2383, //个股\n        @2378:@2378, //港股\n        @3225:@2378, //港股etf\n        @2382:@2382, //美股\n        @2386:@2382, //美股etf\n        @2406:@2406, //期货国内行情\n        @2407:@2407, //期货国外行情\n        @2501:@2501, //ETF\n        @2269:@2442, //可转债\n        @2205:@2267, //分时\n    };\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"请求的pageId和当前的frameId不一致，说明请求的是另一个行情段，抛出警告信息\n    [HXSh","deepseek-chat-lite":" 请求的pageId和当前的frameId不一致，说明请求冲突","CodeQwen2.5-7B":" 请求的pageId和当前的frameId不一致，说明发生了行情段请求冲突","copilot":" 当前页面行情段已知，但是请求的行情段和当前页面行情段不一致，提示冲突\n    [HXSh"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXBase/ViewControllerEx.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, assign) int frameId;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        self.pageId = [AMUIPublicProxy currentPageControl].pageID;\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_frameId == protocolInfo.pageId) { // 请求的pageId和当前的frameId一致，无冲突\n        return;\n    }\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (self.pageId != currentPageId) { // 页面发生了切换，更新pageId和frameId\n        self.pageId = currentPageId;\n        if (self.frameId == protocolInfo.pageId) {\n            return;\n        }\n        if (self.frameId == 0) { // 当前页面行情段未知，把第一次的行情段请求frameId认为是页面对应的行情段frameId\n            self.frameId = protocolInfo.pageId;\n            return;\n        }\n        // 当前页面行情段已知，但是请求的行情段和当前页面行情段不一致，提示冲突\n        [HXShowTipProxy showTip:[NSString stringWithFormat:@\"行情段请求冲突，protocolId: %d, instanceId: %d, pageId: %d\", protocolInfo.protocolId, protocolInfo.instanceId, protocolInfo.pageId]];\n        return;\n    }","infill":"// 页面未发生切换\n    if (","suffix":"self.frameId == 0) { // 当前页面行情段未知，把第一次的行情段请求frameId认为是页面对应的行情段frameId\n        self.frameId = protocolInfo.pageId;\n        return;\n    }\n\n}\n\n#pragma mark - setter\n\n- (void)setPageId:(int)pageId {\n    if (pageId <= 0) {\n        return;\n    }\n    _pageId = pageId;\n    _frameId = [[self.class frameIdDict] thsNumberForKey:@(_pageId)].intValue;\n}\n\n#pragma mark - private\n\n+ (NSDictionary *)frameIdDict {\n    return @{\n        @2790:@2210, //首页\n        @2312:@2312, //大盘\n        @2313:@2313, //板块\n        @2383:@2383, //个股\n        @2378:@2378, //港股\n        @3225:@2378, //港股etf\n        @2382:@2382, //美股\n        @2386:@2382, //美股etf\n        @2406:@2406, //期货国内行情\n        @2407:@2407, //期货国外行情\n        @2501:@2501, //ETF\n        @2269:@2442, //可转债\n        @2205:@2267, //分时\n    };\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"if (","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"// 页面未发生切换\n    if ("}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXBase/ViewControllerEx.h>\n\n@interface HXSocketRequestHook () <HXVCSwitchNotifyProtocol>\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, assign) int frameId;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];","infill":"   [[HXVCSwitchNotifyManager shareInstance] registerNotifyObj:self];\n    });\n    re","suffix":"turn instance;\n}\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        self.pageId = [AMUIPublicProxy currentPageControl].pageID;\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (self.frameId == protocolInfo.pageId) { // 请求的pageId和当前的frameId一致，无冲突\n        return;\n    }\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (self.pageId != currentPageId) { // 页面发生了切换，更新pageId和frameId\n        self.pageId = currentPageId;\n        if (self.frameId == protocolInfo.pageId) {\n            return;\n        }\n        if (self.frameId == 0) { // 当前页面行情段未知，把第一次的行情段请求frameId认为是页面对应的行情段frameId\n            self.frameId = protocolInfo.pageId;\n            return;\n        }\n    }\n    // 当前页面行情段已知，但是请求的行情段和当前页面行情段不一致，提示冲突\n    [HXShowTipProxy showTip:[NSString stringWithFormat:@\"行情段请求冲突，protocolId: %d, instanceId: %d, pageId: %d\", protocolInfo.protocolId, protocolInfo.instanceId, protocolInfo.pageId]];\n}\n\n#pragma mark - setter\n\n- (void)setPageId:(int)pageId {\n    if (pageId <= 0) {\n        return;\n    }\n    _pageId = pageId;\n    _frameId = [[self.class frameIdDict] thsNumberForKey:@(_pageId)].intValue;\n}\n\n#pragma mark - private\n\n+ (NSDictionary *)frameIdDict {\n    return @{\n        @2790:@2210, //首页\n        @2312:@2312, //大盘\n        @2313:@2313, //板块\n        @2383:@2383, //个股\n        @2378:@2378, //港股\n        @3225:@2378, //港股etf\n        @2382:@2382, //美股\n        @2386:@2382, //美股etf\n        @2406:@2406, //期货国内行情\n        @2407:@2407, //期货国外行情\n        @2501:@2501, //ETF\n        @2269:@2442, //可转债\n        @2205:@2267, //分时\n    };\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"// 创建单例对象\n    });\n    re","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"   [[HXVCSwitchNotifyManager shareInstance] registerNotifyObj:self];\n    });\n    re"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXBase/ViewControllerEx.h>\n\n@interface HXSocketRequestHook () <HXVCSwitchNotifyProtocol>\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, assign) int frameId;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        self.pageId = [AMUIPublicProxy currentPageControl].pageID;\n        [[HXVCSwitchNotifyManager shareInstance] registerNotifyObj:self];\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (self.frameId == protocolInfo.pageId) { // 请求的pageId和当前的frameId一致，无冲突\n        return;\n    }\n    if (self.pageId == 0) { // 切换了页面但是还没有","infill":"\n        \n    }\n    int currentPageId = [AMUIPublicProxy currentPageCon","suffix":"trol].pageID;\n    if (self.pageId != currentPageId) { // 页面发生了切换，更新pageId和frameId\n        self.pageId = currentPageId;\n        if (self.frameId == protocolInfo.pageId) {\n            return;\n        }\n        if (self.frameId == 0) { // 当前页面行情段未知，把第一次的行情段请求frameId认为是页面对应的行情段frameId\n            self.frameId = protocolInfo.pageId;\n            return;\n        }\n    }\n    // 当前页面行情段已知，但是请求的行情段和当前页面行情段不一致，提示冲突\n    [HXShowTipProxy showTip:[NSString stringWithFormat:@\"行情段请求冲突，protocolId: %d, instanceId: %d, pageId: %d\", protocolInfo.protocolId, protocolInfo.instanceId, protocolInfo.pageId]];\n}\n\n#pragma mark - HXVCSwitchNotifyProtocol\n- (void)newVCWillShow:(NSDictionary *)VCHashDic {\n    [self reset];\n}\n\n- (void)newVCDidAppear:(ViewControllerEx *)VCNew {\n    self.pageId = [VCNew getFocusPageId];\n}\n\n- (void)VCWillDisappear:(ViewControllerEx *)VC {\n    [self reset];\n}\n\n- (void)newSubVCWillAppear {\n    [self reset];\n}\n\n- (void)newSubVCDidAppear:(int)pageId {\n    self.pageId = pageId;\n}\n\n#pragma mark - setter\n\n- (void)setPageId:(int)pageId {\n    if (pageId <= 0) {\n        return;\n    }\n    _pageId = pageId;\n    _frameId = [[self.class frameIdDict] thsNumberForKey:@(_pageId)].intValue;\n}\n\n#pragma mark - private\n\n- (void)reset {\n    _pageId = 0;\n    _frameId = 0;\n}\n\n+ (NSDictionary *)frameIdDict {\n    return @{\n        @2790:@2210, //首页\n        @2312:@2312, //大盘\n        @2313:@2313, //板块\n        @2383:@2383, //个股\n        @2378:@2378, //港股\n        @3225:@2378, //港股etf\n        @2382:@2382, //美股\n        @2386:@2382, //美股etf\n        @2406:@2406, //期货国内行情\n        @2407:@2407, //期货国外行情\n        @2501:@2501, //ETF\n        @2269:@2442, //可转债\n        @2205:@2267, //分时\n    };\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"接收到frameId，不处理\n        return;\n    }\n    \n    int currentPageId = [AMUIPublicProxy currentPage","deepseek-chat-lite":"获取到新的pageId，不处理","CodeQwen2.5-7B":"切换行情段，把第一次的行情段请求frameId认为是页面对应的行情段frameId","copilot":"\n        \n    }\n    int currentPageId = [AMUIPublicProxy currentPageCon"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXBase/ViewControllerEx.h>\n\n@interface HXSocketRequestHook () <HXVCSwitchNotifyProtocol>\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, assign) int frameId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *protocolInfo;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        [self updateWithPageId:[AMUIPublicProxy currentPageControl].pageID];\n        [[HXVCSwitchNotifyManager shareInstance] registerNotifyObj:self];\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_frameId == protocolInfo.pageId) { // 请求的pageId和当前的frameId一致\n        return;\n    }\n    if (_pageId == 0) { // 切换了页面但是还没有获取到pageId，记下请求后续再处理\n        _protocolInfo = protocolInfo;\n        return;\n    }\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId != currentPageId) { // 页面发生了切换，更新pageId和frameId\n        [self updateWithPageId:currentPageId];\n        if (_frameId == protocolInfo.pageId) {\n            return;\n        }\n        if (_frameId == 0) { // 当前页面行情段未知，把第一次的行情段请求frameId认为是页面对应的行情段frameId\n            _frameId = protocolInfo.pageId;\n            return;\n        }\n    }\n    [self showTipWithRequestInfo:protocolInfo];\n}\n\n#pragma mark - HXVCSwitchNotifyProtocol\n- (void)newVCWillShow:(NSDictionary *)VCHashDic {\n    [self reset];\n}\n\n- (void)newSubVCWillAppear {\n    [self reset];\n}\n\n#pragma mark - private\n\n- (void)reset {\n    _pageId = 0;\n    _frameId = 0;\n}\n\n- (void)updateWithPageId:(int)pageId {\n    if (pageId <= 0 || _pageId == pageId) {\n        return;\n    }\n    _pageId = pageId;\n    int frameId = [[self.class frameIdDict] thsNumberForKey:@(_pageId)].intValue;\n    if (!_protocolInfo) {\n        _frameId = frameId;\n        return;\n    }\n    if (frameId == 0) {\n        _frameId = _protocolInfo.pageId;\n        return;\n    }\n    _frameId = frameId;\n    if (frameId != _protocolInfo.pageId) {\n        [self showTipWithRequestInfo:_protocolInfo];\n    }\n}\n\n/// 当前页面行情段已知，但是请求的行情段和当前页面行情段不一致，提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    [HXShowTipProxy showTip:[NSStrin","infill":"g stringWithFormat:@\"行情段请求冲突，protocolId: %d, instan","suffix":"ceId: %d, pageId: %d\", protocolInfo.protocolId, protocolInfo.instanceId, protocolInfo.pageId]];\n}\n\n+ (NSDictionary *)frameIdDict {\n    return @{\n        @2790:@2210, //首页\n        @2312:@2312, //大盘\n        @2313:@2313, //板块\n        @2383:@2383, //个股\n        @2378:@2378, //港股\n        @3225:@2378, //港股etf\n        @2382:@2382, //美股\n        @2386:@2382, //美股etf\n        @2406:@2406, //期货国内行情\n        @2407:@2407, //期货国外行情\n        @2501:@2501, //ETF\n        @2269:@2442, //可转债\n        @2205:@2267, //分时\n    };\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"gstringWithFormat:@\"协议冲突，当前页面行情段和请求的行情段不符，协议号: %d, instan","deepseek-chat-lite":"g stringWithFormat:@\"请求的行情段与当前页面行情段不一致，protocolId: %d, instan","CodeQwen2.5-7B":"g stringWithFormat:@\"请求的行情段和当前页面行情段不一致，请求的行情段为：%d，当前页面行情段为：%d\", protocolInfo.pageId, _frameId]];","copilot":"g stringWithFormat:@\"行情段请求冲突，protocolId: %d, instan"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXBase/ViewControllerEx.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, assign) int frameId;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        \n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_frameId == protocolInfo.pageId) { // 请求的pageId和当前的frameId一致\n        return;\n    }\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId != currentPageId) { // 页面发生了切换，更新pageId和frameId\n        return [self updateWithPageId:currentPageId andRequestInfo:protocolInfo];\n    }\n    // 未切换过页面，","infill":"提示冲突\n    [self sho","suffix":"wTipWithRequestInfo:protocolInfo];\n}\n\n//#pragma mark - HXVCSwitchNotifyProtocol\n//- (void)newVCWillShow:(NSDictionary *)VCHashDic {\n//    [self reset];\n//}\n//\n//- (void)newSubVCWillAppear {\n//    [self reset];\n//}\n//\n//- (void)newSubVCDidAppear:(int)pageId {\n//\n//}\n\n#pragma mark - private\n\n- (void)reset {\n    _pageId = 0;\n    _frameId = 0;\n}\n\n- (void)updateWithPageId:(int)pageId andRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (pageId <= 0) {\n        return;\n    }\n    _pageId = pageId;\n    _frameId = protocolInfo.pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    [HXShowTipProxy showTip:[NSString stringWithFormat:@\"行情段请求冲突，protocolId: %d, instanceId: %d, pageId: %d\", protocolInfo.protocolId, protocolInfo.instanceId, protocolInfo.pageId]];\n}\n\n//+ (NSDictionary *)frameIdDict {\n//    return @{\n//        @2790:@2210, //首页\n//        @2312:@2312, //大盘\n//        @2313:@2313, //板块\n//        @2383:@2383, //个股\n//        @2378:@2378, //港股\n//        @3225:@2378, //港股etf\n//        @2382:@2382, //美股\n//        @2386:@2382, //美股etf\n//        @2406:@2406, //期货国内行情\n//        @2407:@2407, //期货国外行情\n//        @2501:@2501, //ETF\n//        @2269:@2442, //可转债\n//        @2205:@2267, //分时\n//    };\n// //}\n//\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"不做提示","deepseek-chat-lite":"更新frameId","CodeQwen2.5-7B":"直接提示","copilot":"提示冲突\n    [self sho"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXBase/ViewControllerEx.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的pageId和当前的frameId一致\n        return;\n    }\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId != currentPageId) { // 页面发生了切换，更新pageId和frameId\n        return [self updateWithPageId:currentPageId andRequestInfo:protocolInfo];\n    }\n    // 未切换过页面，提示冲突\n    [self showTipWithRequestInfo:protocolInfo];\n}\n\n//#pragma mark - HXVCSwitchNotifyProtocol\n//- (void)newVCWillShow:(NSDictionary *)VCHashDic {\n//    [self reset];\n//}\n//\n//- (void)newSubVCWillAppear {\n//    [self reset];\n//}\n//\n//- (void)newSubVCDidAppear:(int)pageId {\n//\n//}\n\n#pragma mark - private\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n- (void)updateWithPageId:(int)pageId andRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (pageId <= 0) {\n        return;\n    }\n    _pageId = pageId;\n    _lastProtocolInfo = protocolInfo;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    [HXShowTipProxy showTip:[NSString stringWithFormat:@\"行情段请求冲突，protocolId: %d, pageId: %d\\r\\nprotocolId: %d, pageId: %d\", protocolInfo.protocolId, protocolInfo.pageId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId]];\n}\n\n//+ (NSDictionary *)frameIdDict {\n//    re","infill":"turn @{\n//        @2790:@2210, //首页\n//        @2312:@2312, //大盘\n//        @2313:@2313, //板块\n//        @2383:@2383, //个股\n//        @2378:@2378, //港股\n//        @3225:@2378, //港股etf\n//        @2382:@2382, //美股\n//        @2386:@2","suffix":"382, //美股etf\n//        @2406:@2406, //期货国内行情\n//        @2407:@2407, //期货国外行情\n//        @2501:@2501, //ETF\n//        @2269:@2442, //可转债\n//        @2205:@2267, //分时\n//    };\n//}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"turn @{\n//        @2382:@2","deepseek-chat-lite":"turn @{","CodeQwen2.5-7B":"turn @{","copilot":"turn @{\n//        @2790:@2210, //首页\n//        @2312:@2312, //大盘\n//        @2313:@2313, //板块\n//        @2383:@2383, //个股\n//        @2378:@2378, //港股\n//        @3225:@2378, //港股etf\n//        @2382:@2382, //美股\n//        @2386:@2"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXBase/ViewControllerEx.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的pageId一致，不做处理\n        return;\n    }\n    // 判断","infill":"是否发生了页面切换\n    int ","suffix":"currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId != currentPageId) { // 页面发生了切换，更新pageId和请求pageId\n        return [self updateWithPageId:currentPageId andRequestInfo:protocolInfo];\n    }\n    // 未切换过页面，提示冲突\n    [self showTipWithRequestInfo:protocolInfo];\n}\n\n//#pragma mark - HXVCSwitchNotifyProtocol\n//- (void)newVCWillShow:(NSDictionary *)VCHashDic {\n//    [self reset];\n//}\n//\n//- (void)newSubVCWillAppear {\n//    [self reset];\n//}\n//\n//- (void)newSubVCDidAppear:(int)pageId {\n//\n//}\n\n#pragma mark - private\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n-\n\n- (void)updateWithPageId:(int)pageId andRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (pageId <= 0) {\n        return;\n    }\n    _pageId = pageId;\n    _lastProtocolInfo = protocolInfo;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    [HXShowTipProxy showTip:[NSString stringWithFormat:@\"行情段请求冲突，protocolId: %d, pageId: %d\\r\\nprotocolId: %d, pageId: %d\", protocolInfo.protocolId, protocolInfo.pageId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId]];\n}\n\n//+ (NSDictionary *)frameIdDict {\n//    return @{\n//        @2790:@2210, //首页\n//        @2312:@2312, //大盘\n//        @2313:@2313, //板块\n//        @2383:@2383, //个股\n//        @2378:@2378, //港股\n//        @3225:@2378, //港股etf\n//        @2382:@2382, //美股\n//        @2386:@2382, //美股etf\n//        @2406:@2406, //期货国内行情\n//        @2407:@2407, //期货国外行情\n//        @2501:@2501, //ETF\n//        @2269:@2442, //可转债\n//        @2205:@2267, //分时\n//    };\n//}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"当前页面是否是行情页面\n    int ","deepseek-chat-lite":"是否是行情段","CodeQwen2.5-7B":"是否切换过页面","copilot":"是否发生了页面切换\n    int "}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXBase/ViewControllerEx.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的pageId一致","infill":"，不做处理\n        return;\n    }\n    // 判断\n    int currentPageId = [AMUIPublicProxy","suffix":" currentPageControl].pageID;\n    if (_pageId != currentPageId) { // 页面发生了切换，更新pageId和请求pageId\n        return [self updateWithPageId:currentPageId andRequestInfo:protocolInfo];\n    }\n    // 未切换过页面，提示冲突\n    [self showTipWithRequestInfo:protocolInfo];\n}\n\n//#pragma mark - HXVCSwitchNotifyProtocol\n//- (void)newVCWillShow:(NSDictionary *)VCHashDic {\n//    [self reset];\n//}\n//\n//- (void)newSubVCWillAppear {\n//    [self reset];\n//}\n//\n//- (void)newSubVCDidAppear:(int)pageId {\n//\n//}\n\n#pragma mark - private\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n- (void)updateWithPageId:(int)pageId andRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (pageId <= 0) {\n        return;\n    }\n    _pageId = pageId;\n    _lastProtocolInfo = protocolInfo;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    [HXShowTipProxy showTip:[NSString stringWithFormat:@\"行情段请求冲突，protocolId: %d, pageId: %d\\r\\nprotocolId: %d, pageId: %d\", protocolInfo.protocolId, protocolInfo.pageId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId]];\n}\n\n//+ (NSDictionary *)frameIdDict {\n//    return @{\n//        @2790:@2210, //首页\n//        @2312:@2312, //大盘\n//        @2313:@2313, //板块\n//        @2383:@2383, //个股\n//        @2378:@2378, //港股\n//        @3225:@2378, //港股etf\n//        @2382:@2382, //美股\n//        @2386:@2382, //美股etf\n//        @2406:@2406, //期货国内行情\n//        @2407:@2407, //期货国外行情\n//        @2501:@2501, //ETF\n//        @2269:@2442, //可转债\n//        @2205:@2267, //分时\n//    };\n//}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"，直接返回，不作处理\n        return;\n    }\n    int currentPageId = [AMUIPublicProxy","deepseek-chat-lite":"，提示冲突","CodeQwen2.5-7B":"，不做处理","copilot":"，不做处理\n        return;\n    }\n    // 判断\n    int currentPageId = [AMUIPublicProxy"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXBase/ViewControllerEx.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype","infill":")init {\n    if (self = [super init]) {\n        _pageId = [AMUIPublicProxy currentPageControl].pageID;\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo","suffix":":(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的pageId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求pageId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n//#pragma mark - HXVCSwitchNotifyProtocol\n//- (void)newVCWillShow:(NSDictionary *)VCHashDic {\n//    [self reset];\n//}\n//\n//- (void)newSubVCWillAppear {\n//    [self reset];\n//}\n//\n//- (void)newSubVCDidAppear:(int)pageId {\n//\n//}\n\n#pragma mark - private\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    [HXShowTipProxy showTip:[NSString stringWithFormat:@\"行情段请求冲突，protocolId: %d, pageId: %d\\r\\nprotocolId: %d, pageId: %d\", protocolInfo.protocolId, protocolInfo.pageId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId]];\n}\n\n//+ (NSDictionary *)frameIdDict {\n//    return @{\n//        @2790:@2210, //首页\n//        @2312:@2312, //大盘\n//        @2313:@2313, //板块\n//        @2383:@2383, //个股\n//        @2378:@2378, //港股\n//        @3225:@2378, //港股etf\n//        @2382:@2382, //美股\n//        @2386:@2382, //美股etf\n//        @2406:@2406, //期货国内行情\n//        @2407:@2407, //期货国外行情\n//        @2501:@2501, //ETF\n//        @2269:@2442, //可转债\n//        @2205:@2267, //分时\n//    };\n//}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":")init","deepseek-chat-lite":")init {","CodeQwen2.5-7B":")init {","copilot":")init {\n    if (self = [super init]) {\n        _pageId = [AMUIPublicProxy currentPageControl].pageID;\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXBase/ViewControllerEx.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *temp","infill":"ProtocolInfo;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark -","suffix":" Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的pageId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求pageId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        _tempProtocolInfo = protocolInfo;\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    [HXShowTipProxy showTip:[NSString stringWithFormat:@\"行情段请求冲突，protocolId: %d, pageId: %d\\r\\nprotocolId: %d, pageId: %d\", protocolInfo.protocolId, protocolInfo.pageId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId]];\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"ProtocolInfo;\n\n@end\n\n#pragma mark -","deepseek-chat-lite":"ProtocolInfo;","CodeQwen2.5-7B":"ProtocolInfo;","copilot":"ProtocolInfo;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark -"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"HXVCSwitchNotifyManager.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n#import <HXBase/ViewControllerEx.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *tempProtocolInfo;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype","infill":")init {\n    if (self = [super init]) {\n        [[HXVCSwitchNotifyManager shareInstance] registerNoti","suffix":"fyObj:self];\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的pageId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求pageId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        _tempProtocolInfo = protocolInfo;\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    [HXShowTipProxy showTip:[NSString stringWithFormat:@\"行情段请求冲突，protocolId: %d, pageId: %d\\r\\nprotocolId: %d, pageId: %d\", protocolInfo.protocolId, protocolInfo.pageId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId]];\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":")init {\n    if (self == [self shareInstance]) {\n        [super init];\n        [HXVCSwitchNotifyManager sharedInstance].registerNoti","deepseek-chat-lite":")init {","CodeQwen2.5-7B":")init {","copilot":")init {\n    if (self = [super init]) {\n        [[HXVCSwitchNotifyManager shareInstance] registerNoti"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, cop)\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的pageId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求pageId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 判断当前页面对应的pageId，减少排障信息\n    int requestPageId","infill":" = [self.class requestPageIdDict objectForKey:@(protocolInfo.pageId)].intValue;\n    NSStr","suffix":"ing *msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\nprotocolId: %d, pageId: %d\\r\\nprotocolId: %d, pageId: %d\\r\\nps：部分页面会提前请求导致误报，如行情-ETF首次加载，请确认\", protocolInfo.protocolId, protocolInfo.pageId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId];\n    [HXShowTipProxy showTip:msg clickHandler:^(UIAlertAction * _Nonnull action) {\n        if ([self ifSwitchPage]) { // 二次确认\n            _lastProtocolInfo = protocolInfo;\n        }\n    }];\n}\n\n/// 页面pageId对应的请求pageId\n+ (NSDictionary *)requestPageIdDict {\n    return @{\n        @2790:@2210, //首页\n        @2312:@2312, //大盘\n        @2313:@2313, //板块\n        @2383:@2383, //个股\n        @2378:@2378, //港股\n        @3225:@2378, //港股etf\n        @2382:@2382, //美股\n        @2386:@2382, //美股etf\n        @2406:@2406, //期货国内行情\n        @2407:@2407, //期货国外行情\n        @2501:@2501, //ETF\n        @2269:@2442, //可转债\n        @2205:@2267, //分时\n    };\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":" = [self.requestPageIdDict objectForKey:[NSNumber numberWithInteger:protocolInfo.pageId]];\n    NSStr","deepseek-chat-lite":" = [DataTypeConvertor intValue:protocolInfo.pageId fromDict:[self requestPageIdDict]];","CodeQwen2.5-7B":" = [self requestPageIdWithPageId:protocolInfo.pageId];","copilot":" = [self.class requestPageIdDict objectForKey:@(protocolInfo.pageId)].intValue;\n    NSStr"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary *","infill":"requestPageIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n","suffix":"\n#pragma mark - Public\n\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的pageId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求pageId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 判断当前页面对应的pageId，减少排障信息\n    int requestPageId = [self.class requestPageIdDict objectForKey:@(protocolInfo.pageId)].intValue;\n    NSString *msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\nprotocolId: %d, pageId: %d\\r\\nprotocolId: %d, pageId: %d\\r\\nps：部分页面会提前请求导致误报，如行情-ETF首次加载，请确认\", protocolInfo.protocolId, protocolInfo.pageId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId];\n    [HXShowTipProxy showTip:msg clickHandler:^(UIAlertAction * _Nonnull action) {\n        if ([self ifSwitchPage]) { // 二次确认\n            _lastProtocolInfo = protocolInfo;\n        }\n    }];\n}\n\n/// 页面pageId对应的请求pageId\n- (NSDictionary *)requestPageIdDict {\n    if (!_requestPageIdDict) {\n        \n    }\n    retu\n    return @{\n        @2790:@2210, //首页\n        @2312:@2312, //大盘\n        @2313:@2313, //板块\n        @2383:@2383, //个股\n        @2378:@2378, //港股\n        @3225:@2378, //港股etf\n        @2382:@2382, //美股\n        @2386:@2382, //美股etf\n        @2406:@2406, //期货国内行情\n        @2407:@2407, //期货国外行情\n        @2501:@2501, //ETF\n        @2269:@2442, //可转债\n        @2205:@2267, //分时\n    };\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"requestPageIdDict;","deepseek-chat-lite":"requestPageIdDict;","CodeQwen2.5-7B":"_requestPageIdDict;","copilot":"requestPageIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n"}},{"prefix":"}\n\n// 全速盘口本地状态记录重置\n- (void)resetOpenQuotationLocalStatus {\n    [FullSpeedManager resetLocalState];\n}\n\n// DNS解析信息\n- (void)dnsAnalyticInfo {\n    if (_dnsInfoVC) {\n        _dnsInfoVC = nil;\n    }\n    _dnsInfoVC = [[DNSInfoViewController alloc] init];\n    _dnsInfoVC.delegate = self;\n    UIViewController* vc = (UIViewController*)[((AMUITabFm*)[AMUIFrameWork shareingUIFramework]) getCurStackController];\n    [vc presentViewController:_dnsInfoVC animated:YES completion:nil];\n}\n\n#ifdef _DEBUG\n//打印请求结果\n- (void)showFetchResult {\n    [HXSocketFetcher fetchLogDebug];\n}\n\n// 显示捕获到的盈亏异常数据\n- (void)showProfitAndLossAbnormityInfo {\n    YingkuiOutliersView *outliers = [[YingkuiOutliersView alloc] init];\n    [g_eqWindow addSubview:outliers];\n}\n\n- (void)showFilter{\n    [WTAMLogFilterView show];\n    [self showLog];\n}\n#endif\n\n// HXAMlog实时日志\n- (void)showLog {\n    if (EQGetAppFrame() == NULL) {\n        return;\n    }\n    CEQEvent* pEvent = EQGetAppFrame()->GetNewEventObj();\n    pEvent->SetEventType(EQEVT_SELF);\n    CEQAffairAnalyzer* pAffairAnalyzer = EQGetAffairAnalyzer()    ;\n    if(pAffairAnalyzer) {\n        pAffairAnalyzer->LogAverageRequestTime();\n        pAffairAnalyzer->WriteLogRightNow();\n    }\n    pEvent->SetEventId(EQEVT_ID_SHOW_NETLOG);\n    EQGetAppFrame()->PostMsg(pEvent);\n}\n#ifdef _DEBUG\n- (void)autoShowLog {\n    [[HXLogViewController shared] changeAutoOpenLog];\n}\n#endif\n\n// HXAMlog日志列表\n- (void)goToHXAMLogList {\n    HXAMLogFileListViewController *listVC = [[HXAMLogFileListViewController alloc] init];\n    UIViewController* tabBarVC = (UIViewController*)[((AMUITabFm*)[AMUIFrameWork shareingUIFramework]) getCurStackController];\n    NavigationControllEx * nav = [[NavigationControllEx alloc] initWithRootViewController:listVC];\n    [tabBarVC presentViewController:nav animated:YES completion:nil];\n}\n\n/// 展示统一链路日志视图\n- (void)openHXECLogView {\n    [HXECService showTestView];\n}\n\n// 开启日志\n- (void)openLog {\n    g_bPringLog = YES;\n}\n\n// 关闭日志\n- (void)closeLog {\n    g_bPringLog = NO;\n}\n\n#ifdef _DEBUG\n// 显示本地缓存的流水数据\n- (void)showLocalCacheData {\n    liushuiScrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, Screen_height)];\n    [liushuiScrollView setBackgroundColor:[UIColor whiteColor]];\n    liushuiScrollView.contentSize = CGSizeMake(Screen_width, Screen_height);\n    [g_eqWindow addSubview:liushuiScrollView];\n    \n    //读取本地数据\n    WTAccountInfor *curAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    NSDictionary *liushuiData = curAccount.isRZRQ ? [TJiaoYiRiSearchModel readRZRQChengJiaoLiushuiFromLocalWithAccount:curAccount.account] : [TJiaoYiRiSearchModel readChengJiaoLiushuiFromLocalWithAccount:curAccount.account];\n    \n    if ([liushuiData isKindOfClass:[NSDictionary class]]) {\n        NSString *saveDateStr = liushuiData[@\"date\"];\n        NSString *cacheTimeStr = [liushuiData thsStringForKey:@\"cacheTime\"];\n        NSString *queryIndexString = [liushuiData thsStringForKey:@\"34057\"];\n        NSArray *stockCodes = liushuiData[@2102];\n        NSArray *stockNames = liushuiData[@2103];\n        NSArray *dealNumbers = liushuiData[@2128];\n        NSArray *dealPervalue = liushuiData[@2129];\n        NSArray *dealTypes = liushuiData[@2109];\n        NSArray *dealValue = liushuiData[@2131];\n        NSArray *dealTimes = liushuiData[@2142];\n        NSArray *tradeMarkets = liushuiData[@2130];\n        NSArray *gdAccouunts = liushuiData[@2106];\n        NSArray *htNums = curAccount.isRZRQ ? liushuiData[@2135] : liushuiData[@2144];\n        NSArray *cjNums = curAccount.isRZRQ ? liushuiData[@2130] : liushuiData[@2145];\n        \n        UILabel *timeLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 40, Screen_width, 40)];\n        timeLabel.font = [UIFont systemFontOfSize:17.0];\n        timeLabel.textColor = [UIColor redColor];\n        timeLabel.text = [NSString stringWithFormat:@\"流水数据时间：%@--%@--%@\", saveDateStr, cacheTimeStr, queryIndexString];\n        [timeLabel setTextAlignment:NSTextAlignmentCenter];\n        [liushuiScrollView addSubview:timeLabel];\n        UILabel *shuzu = [[UILabel alloc] initWithFrame:CGRectMake(0, 85, Screen_width, 40)];\n        shuzu.font = [UIFont systemFontOfSize:17.0];\n        shuzu.textColor = [UIColor redColor];\n        shuzu.text = [NSString stringWithFormat:@\"流水数据一共%lu条\", (unsigned long)stockNames.count];\n        [shuzu setTextAlignment:NSTextAlignmentCenter];\n        [liushuiScrollView addSubview:shuzu];\n        if (stockCodes.count == stockNames.count\n            && stockCodes.count == dealNumbers.count\n            && stockCodes.count == dealPervalue.count\n            && stockCodes.count == dealTypes.count\n            && stockCodes.count == dealValue.count) {\n            liushuiScrollView.contentSize = CGSizeMake(Screen_width, 160 + stockCodes.count * 90);\n            for (int i = 0; i < stockCodes.count; i++) {\n                UILabel *stock = [[UILabel alloc] initWithFrame:CGRectMake(0, 130 + i * 90, Screen_width, 30)];\n                stock.font = [UIFont systemFontOfSize:15.0];\n                stock.textColor = [UIColor blackColor];\n                stock.text = [NSString stringWithFormat:@\"第 %i 条流水数据\", i + 1];\n                [stock setTextAlignment:NSTextAlignmentCenter];\n                [liushuiScrollView addSubview:stock];\n                UILabel *stockData = [[UILabel alloc] initWithFrame:CGRectMake(0, 160 + i * 90, Screen_width, 60)];\n                stockData.font = [UIFont systemFontOfSize:13.0];\n                stockData.textColor = [UIColor blackColor];\n                stockData.text = [NSString stringWithFormat:@\"操作: %@      代码: %@      名称: %@      交易价格: %@      交易数量: %@      交易总价: %@  成交时间：%@  交易市场：%@  股东账号：%@  合同编号：%@  成交编号：%@\", dealTypes[i], stockCodes[i], stockNames[i], dealPervalue[i], dealNumbers[i], dealValue[i], [dealTimes safetyObjectAtIndex:i], [tradeMarkets safetyObjectAtIndex:i], [gdAccouunts safetyObjectAtIndex:i], [htNums safetyObjectAtIndex:i], [cjNums safetyObjectAtIndex:i]];\n                [stockData setTextAlignment:NSTextAlignmentCenter];\n                stockData.numberOfLines = 0;\n                stockData.lineBreakMode = NSLineBreakByWordWrapping;\n                [liushuiScrollView addSubview:stockData];\n            }\n        }\n    }\n\n    UIButton* btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [btn setTitle:@\"返回\" forState:UIControlStateNormal];\n    [btn addTarget:self action:@selector(dismissLiushuiScrollView) forControlEvents:UIControlEventTouchDown];\n    btn.frame = CGRectMake(0, 0, 100, 100);\n    [liushuiScrollView addSubview:btn];\n}\n\n- (void)showBrokerBackUpDebugInfo {\n    if (EQGetAppFrame() == NULL) {\n        return;\n    }\n    brokerBackUpDebugInfo = [[UIView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, Screen_height)];\n    [brokerBackUpDebugInfo setBackgroundColor:[UIColor whiteColor]];\n    [g_eqWindow addSubview:brokerBackUpDebugInfo];\n    \n    UIButton *btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [btn setTitle:@\"返回\" forState:UIControlStateNormal];\n    [btn addTarget:self action:@selector(removeBrokerBackUpDebugInfoView) forControlEvents:UIControlEventTouchDown];\n    btn.frame = CGRectMake(0, 20, Screen_width / 2, 40);\n    [brokerBackUpDebugInfo addSubview:btn];\n    UIButton *deleteBut = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [deleteBut setTitle:@\"删除并返回\" forState:UIControlStateNormal];\n    [deleteBut addTarget:self action:@selector(deleteAndRemoveBrokerView) forControlEvents:UIControlEventTouchDown];\n    deleteBut.frame = CGRectMake(Screen_width / 2, 20, Screen_width / 2, 40);\n    [brokerBackUpDebugInfo addSubview:deleteBut];\n    \n    UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 60, Screen_width, Screen_height - 60)];\n    NSString *log = [HXBrokerInfoLogManager getStringFromFile];\n    UILabel *logLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 60, Screen_width, 15)];\n    logLabel.font = [UIFont systemFontOfSize:13];\n    [logLabel hx_autoAdaptionHeightWithText:log];\n    scrollVie","infill":"TipAutoClose:@];\r\n        }\r\n        \r\n    }];\r\n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@\"取消","suffix":"\" style:UIAlertActionStyleCancel handler:nil];\r\n    [alert addAction:cancelAction];\r\n    [alert addAction:okAction];\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    [vc presentViewController:alert animated:YES completion:NULL];\r\n}\r\n\r\n- (void)sendTCPRequestWithPageId:(int)pageId {\r\n    NSDictionary *params = @{\r\n        @\"marketcode\":@\"16\",\r\n        @\"stockcode\":@\"1A0001\"\r\n    };\r\n    WeakObj(self);\r\n    if (_statefetcher == nil ) {\r\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:4051 paramsDict:params pageId:pageId];\r\n        _statefetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\r\n            if (error) {\r\n                return;\r\n            }\r\n            [selfWeak parseStateDataWithData:data completion:competionBlock];\r\n        }];\r\n        [_statefetcher start];\r\n    } else {\r\n        _statefetcher.request.paramsDict = params;\r\n        [_statefetcher pause];\r\n        [_statefetcher resume];\r\n    }\r\n}\r\n\r\n- (void)closeDataMonitor {\r\n    [DataMonitorManager enableDataMonitor:NO];\r\n    [DataMonitorManager clearData];\r\n    if (self.monitorController) {\r\n        [self.monitorController willMoveToParentViewController:nil];\r\n        [self.monitorController.view removeFromSuperview];\r\n        [self.monitorController removeFromParentViewController];\r\n        self.monitorController = nil;\r\n    }\r\n}\r\n\r\n- (void)removeBrokerBackUpDebugInfoView {\r\n    [brokerBackUpDebugInfo removeFromSuperview];\r\n}\r\n\r\n- (void)deleteAndRemoveBrokerView {\r\n    [HXBrokerInfoLogManager deleteLog];\r\n    [self removeBrokerBackUpDebugInfoView];\r\n}\r\n#endif\r\n\r\n- (void)removeNotificationView {\r\n    [localNotificationSetView removeFromSuperview];\r\n}\r\n\r\n- (void)receiveStuffData:(NSDictionary *)stuffData\r\n{\r\n    void* data = [[stuffData objectForKey:@\"dispatch_stuff_data\"] pointerValue];\r\n    CEQString16* text = ((CEQStuffTextStruct*)data)->GetStrText();\r\n    NSString* str = [NSString stringWithEQString16:text];\r\n    \r\n    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:str,@\"strKey\",@\"hq1\",@\"source\", nil];\r\n    [[NSNotificationCenter defaultCenter] postNotificationName:@\"debugMenu_receive\" object:nil userInfo:dic];\r\n    \r\n}\r\n\r\n- (void)dnsInfoViewClose {\r\n    _dnsInfoVC.delegate = nil;\r\n    _dnsInfoVC = nil;\r\n}\r\n\r\n#ifdef _DEBUG\r\n- (void)dismissLiushuiScrollView {\r\n    [liushuiScrollView removeFromSuperview];\r\n}\r\n\r\n- (void)clearCompetitorAPPStat {\r\n    [[NSUserDefaults standardUserDefaults] removeObjectForKey:kLastTimeKey];\r\n}\r\n#endif\r\n- (NSMutableArray *)backLocalURL:(NSString *)fileName originArray:(NSMutableArray *)originArray{\r\n    NSString *strSourcePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:fileName];\r\n    NSData *fileData = [[NSData alloc] initWithContentsOfFile:strSourcePath];\r\n    if (fileData == nil) {\r\n        return originArray;\r\n    }\r\n    NSDictionary *localUrlDic = [NSJSONSerialization JSONObjectWithData:fileData options:NSJSONReadingAllowFragments error:nil];\r\n    \r\n    [localUrlDic enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {\r\n        [originArray addObject:obj];\r\n    }];\r\n    return originArray;\r\n}\r\n\r\n- (void)showMessageTips:(NSString *)message {\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"\" message:message preferredStyle:UIAlertControllerStyleAlert];\r\n    UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n    }];\r\n    [alert addAction:confirmAction];\r\n    [vc presentViewController:alert animated:YES completion:nil];\r\n}\r\n\r\n#ifdef _DEBUG\r\n\r\n- (void)showChangeZiXuanScrollParams {\r\n    UIAlertController *contentAlert = [UIAlertController alertControllerWithTitle:@\"设置自选滑动参数\" message:nil preferredStyle:UIAlertControllerStyleAlert];\r\n    [contentAlert addAction:[UIAlertAction actionWithTitle:@\"clear\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\r\n        if (contentAlert.textFields.count > 0) {\r\n            UITextField * textField = contentAlert.textFields[0];\r\n            textField.text = @\"\";\r\n            [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"zixuan_scroll_params\"];\r\n            [[NSUserDefaults standardUserDefaults] synchronize];\r\n        }\r\n    }]];\r\n    [contentAlert addAction:[UIAlertAction actionWithTitle:@\"add\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n        for (int i = 0; i< contentAlert.textFields.count; i++) {\r\n            UITextField * textField = contentAlert.textFields[i];\r\n            if (i == 0 && textField.text.length > 0) {\r\n                [[NSUserDefaults standardUserDefaults] setObject:textField.text forKey:@\"zixuan_scroll_params\"];\r\n                [[NSUserDefaults standardUserDefaults] synchronize];\r\n            }\r\n        }\r\n    }]];\r\n    [contentAlert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\r\n        textField.placeholder = @\"总屏2.5,max1200,min120,阈值屏0.5\";\r\n        NSString *str = [[NSUserDefaults standardUserDefaults] objectForKey:@\"zixuan_scroll_params\"];\r\n        if (str && [str isKindOfClass:[NSString class]] && str.length > 0) {\r\n            textField.text = str;\r\n        }\r\n    }];\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    [vc presentViewController:contentAlert animated:YES completion:nil];\r\n}\r\n\r\n- (void)inspectLocalURL {\r\n    NSMutableArray *localUrlList = [[NSMutableArray alloc] init];\r\n    localUrlList = [self backLocalURL:@\"localURL.dat\" originArray:localUrlList];\r\n    \r\n    NSDictionary *infoDic = [NSBundle mainBundle].infoDictionary;\r\n    NSArray *arr = [infoDic objectForKey:@\"LSApplicationQueriesSchemes\"];\r\n    for (NSInteger idex = 0; idex < localUrlList.count; idex++) {\r\n        for(NSInteger jdex = 47; jdex < arr.count; jdex++) {\r\n            NSString * Url = [DataTypeConvertor stringWithDictionary:localUrlList[idex] forKey:@\"URLInfo\"];\r\n            if([Url rangeOfString:[NSString stringWithFormat:@\"%@\",arr[jdex]]].length != 0) {\r\n                NSString * message = [NSString stringWithFormat:@\"本地localURL和配置文件冲突：（网页URL）%@和（配置信息）%@\",Url,arr[jdex]];\r\n                [self showMessageTips:message];\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    NSString * message = [NSString stringWithFormat:@\"无冲突\"];\r\n    [self showMessageTips:message];\r\n\r\n}\r\n\r\n- (NSArray <NSDictionary *>*)showChangeDNSError {\r\n    NSArray *d = @[@{kDebugMenuNodeNameKey:@\"设置同花顺DNS失败\",kDebugMenuNodeClickKey:@\"setThsDnsError\"},\r\n                @{kDebugMenuNodeNameKey:@\"设置运营商DNS失败\",kDebugMenuNodeClickKey:@\"setOperatorDnsError\"},\r\n                @{kDebugMenuNodeNameKey:@\"清除设置\",kDebugMenuNodeClickKey:@\"clearDnsError\"}];\r\n    NSString *errorString = @\"[dns状态]:\";\r\n    NSNumber *dnsState = [[NSUserDefaults standardUserDefaults] objectForKey:@\"HXDNSErrorTypeSet\"];\r\n    switch (dnsState.intValue) {\r\n        case 1:\r\n            errorString = [NSString stringWithFormat:@\"%@同花顺DNS失败\",errorString];\r\n            break;\r\n        case 2:\r\n            errorString = [NSString stringWithFormat:@\"%@运营商DNS失败\",errorString];\r\n            break;\r\n        case 0:\r\n        default:\r\n            errorString = [NSString stringWithFormat:@\"%@无error\",errorString];\r\n            break;\r\n    }\r\n    d.customIdenfitier = errorString;\r\n    return d;\r\n}\r\n\r\n- (void)setDomainResolverEnv {\r\n    NSString *key = @\"SC_domainResolverEnv\";\r\n    BOOL isTestEnv = [[NSUserDefaults standardUserDefaults] boolForKey:key];\r\n    NSString *message =","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"w.contentSize = CGSizeMake(Screen_width, logLabel.textureSize.height + 10);\n    [scrollView addSubview:logLabel];\n    [brokerBackUpDebugInfo addSubview:scrollView];","deepseek-chat-lite":"w.contentSize = CGSizeMake(Screen_width, 15 + log.length * 15);","CodeQwen2.5-7B":"w.contentSize = CGSizeMake(Screen_width, logLabel.frame.size.height + 10);\r","copilot":"TipAutoClose:@];\r\n        }\r\n        \r\n    }];\r\n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@\"取消"}},{"prefix":"    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *logPath = [documentsDirectory stringByAppendingPathComponent:@\"console_log.txt\"];\n    freopen([logPath cStringUsingEncoding:NSASCIIStringEncoding],\"a+\",stderr);\n}\n\n// 全速盘口忽略开盘时间\n- (void)ignoreOpenQuotationTime {\n    [FullSpeedManager shareManager].ignoreOpenQuotationTime = ![FullSpeedManager shareManager].ignoreOpenQuotationTime;\n}\n\n// 全速盘口本地状态记录重置\n- (void)resetOpenQuotationLocalStatus {\n    [FullSpeedManager resetLocalState];\n}\n\n// DNS解析信息\n- (void)dnsAnalyticInfo {\n    if (_dnsInfoVC) {\n        _dnsInfoVC = nil;\n    }\n    _dnsInfoVC = [[DNSInfoViewController alloc] init];\n    _dnsInfoVC.delegate = self;\n    UIViewController* vc = (UIViewController*)[((AMUITabFm*)[AMUIFrameWork shareingUIFramework]) getCurStackController];\n    [vc presentViewController:_dnsInfoVC animated:YES completion:nil];\n}\n\n#ifdef _DEBUG\n//打印请求结果\n- (void)showFetchResult {\n    [HXSocketFetcher fetchLogDebug];\n}\n\n// 显示捕获到的盈亏异常数据\n- (void)showProfitAndLossAbnormityInfo {\n    YingkuiOutliersView *outliers = [[YingkuiOutliersView alloc] init];\n    [g_eqWindow addSubview:outliers];\n}\n\n- (void)showFilter{\n    [WTAMLogFilterView show];\n    [self showLog];\n}\n#endif\n\n// HXAMlog实时日志\n- (void)showLog {\n    if (EQGetAppFrame() == NULL) {\n        return;\n    }\n    CEQEvent* pEvent = EQGetAppFrame()->GetNewEventObj();\n    pEvent->SetEventType(EQEVT_SELF);\n    CEQAffairAnalyzer* pAffairAnalyzer = EQGetAffairAnalyzer()    ;\n    if(pAffairAnalyzer) {\n        pAffairAnalyzer->LogAverageRequestTime();\n        pAffairAnalyzer->WriteLogRightNow();\n    }\n    pEvent->SetEventId(EQEVT_ID_SHOW_NETLOG);\n    EQGetAppFrame()->PostMsg(pEvent);\n}\n#ifdef _DEBUG\n- (void)autoShowLog {\n    [[HXLogViewController shared] changeAutoOpenLog];\n}\n#endif\n\n// HXAMlog日志列表\n- (void)goToHXAMLogList {\n    HXAMLogFileListViewController *listVC = [[HXAMLogFileListViewController alloc] init];\n    UIViewController* tabBarVC = (UIViewController*)[((AMUITabFm*)[AMUIFrameWork shareingUIFramework]) getCurStackController];\n    NavigationControllEx * nav = [[NavigationControllEx alloc] initWithRootViewController:listVC];\n    [tabBarVC presentViewController:nav animated:YES completion:nil];\n}\n\n/// 展示统一链路日志视图\n- (void)openHXECLogView {\n    [HXECService showTestView];\n}\n\n// 开启日志\n- (void)openLog {\n    g_bPringLog = YES;\n}\n\n// 关闭日志\n- (void)closeLog {\n    g_bPringLog = NO;\n}\n\n#ifdef _DEBUG\n// 显示本地缓存的流水数据\n- (void)showLocalCacheData {\n    liushuiScrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, Screen_height)];\n    [liushuiScrollView setBackgroundColor:[UIColor whiteColor]];\n    liushuiScrollView.contentSize = CGSizeMake(Screen_width, Screen_height);\n    [g_eqWindow addSubview:liushuiScrollView];\n    \n    //读取本地数据\n    WTAccountInfor *curAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    NSDictionary *liushuiData = curAccount.isRZRQ ? [TJiaoYiRiSearchModel readRZRQChengJiaoLiushuiFromLocalWithAccount:curAccount.account] : [TJiaoYiRiSearchModel readChengJiaoLiushuiFromLocalWithAccount:curAccount.account];\n    \n    if ([liushuiData isKindOfClass:[NSDictionary class]]) {\n        NSString *saveDateStr = liushuiData[@\"date\"];\n        NSString *cacheTimeStr = [liushuiData thsStringForKey:@\"cacheTime\"];\n        NSString *queryIndexString = [liushuiData thsStringForKey:@\"34057\"];\n        NSArray *stockCodes = liushuiData[@2102];\n        NSArray *stockNames = liushuiData[@2103];\n        NSArray *dealNumbers = liushuiData[@2128];\n        NSArray *dealPervalue = liushuiData[@2129];\n        NSArray *dealTypes = liushuiData[@2109];\n        NSArray *dealValue = liushuiData[@2131];\n        NSArray *dealTimes = liushuiData[@2142];\n        NSArray *tradeMarkets = liushuiData[@2130];\n        NSArray *gdAccouunts = liushuiData[@2106];\n        NSArray *htNums = curAccount.isRZRQ ? liushuiData[@2135] : liushuiData[@2144];\n        NSArray *cjNums = curAccount.isRZRQ ? liushuiData[@2130] : liushuiData[@2145];\n        \n        UILabel *timeLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 40, Screen_width, 40)];\n        timeLabel.font = [UIFont systemFontOfSize:17.0];\n        timeLabel.textColor = [UIColor redColor];\n        timeLabel.text = [NSString stringWithFormat:@\"流水数据时间：%@--%@--%@\", saveDateStr, cacheTimeStr, queryIndexString];\n        [timeLabel setTextAlignment:NSTextAlignmentCenter];\n        [liushuiScrollView addSubview:timeLabel];\n        UILabel *shuzu = [[UILabel alloc] initWithFrame:CGRectMake(0, 85, Screen_width, 40)];\n        shuzu.font = [UIFont systemFontOfSize:17.0];\n        shuzu.textColor = [UIColor redColor];\n        shuzu.text = [NSString stringWithFormat:@\"流水数据一共%lu条\", (unsigned long)stockNames.count];\n        [shuzu setTextAlignment:NSTextAlignmentCenter];\n        [liushuiScrollView addSubview:shuzu];\n        if (stockCodes.count == stockNames.count\n            && stockCodes.count == dealNumbers.count\n            && stockCodes.count == dealPervalue.count\n            && stockCodes.count == dealTypes.count\n            && stockCodes.count == dealValue.count) {\n            liushuiScrollView.contentSize = CGSizeMake(Screen_width, 160 + stockCodes.count * 90);\n            for (int i = 0; i < stockCodes.count; i++) {\n                UILabel *stock = [[UILabel alloc] initWithFrame:CGRectMake(0, 130 + i * 90, Screen_width, 30)];\n                stock.font = [UIFont systemFontOfSize:15.0];\n                stock.textColor = [UIColor blackColor];\n                stock.text = [NSString stringWithFormat:@\"第 %i 条流水数据\", i + 1];\n                [stock setTextAlignment:NSTextAlignmentCenter];\n                [liushuiScrollView addSubview:stock];\n                UILabel *stockData = [[UILabel alloc] initWithFrame:CGRectMake(0, 160 + i * 90, Screen_width, 60)];\n                stockData.font = [UIFont systemFontOfSize:13.0];\n                stockData.textColor = [UIColor blackColor];\n                stockData.text = [NSString stringWithFormat:@\"操作: %@      代码: %@      名称: %@      交易价格: %@      交易数量: %@      交易总价: %@  成交时间：%@  交易市场：%@  股东账号：%@  合同编号：%@  成交编号：%@\", dealTypes[i], stockCodes[i], stockNames[i], dealPervalue[i], dealNumbers[i], dealValue[i], [dealTimes safetyObjectAtIndex:i], [tradeMarkets safetyObjectAtIndex:i], [gdAccouunts safetyObjectAtIndex:i], [htNums safetyObjectAtIndex:i], [cjNums safetyObjectAtIndex:i]];\n                [stockData setTextAlignment:NSTextAlignmentCenter];\n                stockData.numberOfLines = 0;\n                stockData.lineBreakMode = NSLineBreakByWordWrapping;\n                [liushuiScrollView addSubview:stockData];\n            }\n        }\n    }\n\n    UIButton* btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [btn setTitle:@\"返回\" forState:UIControlStateNormal];\n    [btn addTarget:self action:@selector(dismissLiushuiScrollView) forControlEvents:UIControlEventTouchDown];\n    btn.frame = CGRectMake(0, 0, 100, 100);\n    [liushuiScrollView addSubview:btn];\n}\n\n- (void)showBrokerBackUpDebugInfo {\n    if (EQGetAppFrame() == NULL) {\n        return;\n    }\n    brokerBackUpDebugInfo = [[UIView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, Screen_height)];\n    [brokerBackUpDebugInfo setBackgroundColor:[UIColor whiteColor]];\n    [g_eqWindow addSubview:brokerBackUpDebugInfo];\n    \n    UIButton *btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [btn setTitle:@\"返回\" forState:UIControlStateNormal];\n    [btn addTarget:self action:@selector(removeBrokerBackUpDebugInfoView) forControlEvents:UIControlEventTouchDown];\n    btn.frame = CGRectMake(0, 20, Screen_width / 2, 40);\n    [brokerBackUpDebugInfo addSubview:btn];\n    UIButton *deleteBut = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [deleteBut setTitle:@\"删除并返回\" forState:UIControlStateNormal];\n    [deleteBut addTarget:self action:@selector(deleteAndRemoveBrokerView) forControlEvents:UIControlEventTouchDown];\n    deleteBut.frame = CGRectMake(Screen_width / 2, 20, Screen_width / 2, 40);\n    [brokerB","infill":"一致的行情段请求pageId\";\r\n        textField.placeholder = @\"请输入与当前页面fra","suffix":"meId不一致的行情段请求pageId\r\n    }];\r\n    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n        UITextField *textField = alert.textFields.firstObject;\r\n        int pageId = textField.text.intValue;\r\n        // 判断一下是否是行情段PageID\r\n        if ([[THSPageListManager sharedInstance] isQuotationFrameSwitch:pageId]) {\r\n            [self sendTCPRequestWithPageId:pageId];\r\n        } else {\r\n            [AMUIPublicProxy showTipAutoClose:@\"非行情段请求\"];\r\n        }\r\n    }];\r\n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:nil];\r\n    [alert addAction:cancelAction];\r\n    [alert addAction:okAction];\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    [vc presentViewController:alert animated:YES completion:NULL];\r\n}\r\n\r\n- (void)sendTCPRequestWithPageId:(int)pageId {\r\n    NSDictionary *params = @{\r\n        @\"marketcode\":@\"16\",\r\n        @\"stockcode\":@\"1A0001\"\r\n    };\r\n    WeakObj(self);\r\n    if (_socketFetcher == nil) {\r\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:4051 paramsDict:params pageId:pageId];\r\n        _socketFetcher = [[HXSocketFetcher alloc] initWithRequest:request callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\r\n            selfWeak.socketFetcher = nil;\r\n        }];\r\n        [_socketFetcher start];\r\n    }\r\n}\r\n\r\n- (void)closeDataMonitor {\r\n    [DataMonitorManager enableDataMonitor:NO];\r\n    [DataMonitorManager clearData];\r\n    if (self.monitorController) {\r\n        [self.monitorController willMoveToParentViewController:nil];\r\n        [self.monitorController.view removeFromSuperview];\r\n        [self.monitorController removeFromParentViewController];\r\n        self.monitorController = nil;\r\n    }\r\n}\r\n\r\n- (void)removeBrokerBackUpDebugInfoView {\r\n    [brokerBackUpDebugInfo removeFromSuperview];\r\n}\r\n\r\n- (void)deleteAndRemoveBrokerView {\r\n    [HXBrokerInfoLogManager deleteLog];\r\n    [self removeBrokerBackUpDebugInfoView];\r\n}\r\n#endif\r\n\r\n- (void)removeNotificationView {\r\n    [localNotificationSetView removeFromSuperview];\r\n}\r\n\r\n- (void)receiveStuffData:(NSDictionary *)stuffData\r\n{\r\n    void* data = [[stuffData objectForKey:@\"dispatch_stuff_data\"] pointerValue];\r\n    CEQString16* text = ((CEQStuffTextStruct*)data)->GetStrText();\r\n    NSString* str = [NSString stringWithEQString16:text];\r\n    \r\n    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:str,@\"strKey\",@\"hq1\",@\"source\", nil];\r\n    [[NSNotificationCenter defaultCenter] postNotificationName:@\"debugMenu_receive\" object:nil userInfo:dic];\r\n    \r\n}\r\n\r\n- (void)dnsInfoViewClose {\r\n    _dnsInfoVC.delegate = nil;\r\n    _dnsInfoVC = nil;\r\n}\r\n\r\n#ifdef _DEBUG\r\n- (void)dismissLiushuiScrollView {\r\n    [liushuiScrollView removeFromSuperview];\r\n}\r\n\r\n- (void)clearCompetitorAPPStat {\r\n    [[NSUserDefaults standardUserDefaults] removeObjectForKey:kLastTimeKey];\r\n}\r\n#endif\r\n- (NSMutableArray *)backLocalURL:(NSString *)fileName originArray:(NSMutableArray *)originArray{\r\n    NSString *strSourcePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:fileName];\r\n    NSData *fileData = [[NSData alloc] initWithContentsOfFile:strSourcePath];\r\n    if (fileData == nil) {\r\n        return originArray;\r\n    }\r\n    NSDictionary *localUrlDic = [NSJSONSerialization JSONObjectWithData:fileData options:NSJSONReadingAllowFragments error:nil];\r\n    \r\n    [localUrlDic enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {\r\n        [originArray addObject:obj];\r\n    }];\r\n    return originArray;\r\n}\r\n\r\n- (void)showMessageTips:(NSString *)message {\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"\" message:message preferredStyle:UIAlertControllerStyleAlert];\r\n    UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n    }];\r\n    [alert addAction:confirmAction];\r\n    [vc presentViewController:alert animated:YES completion:nil];\r\n}\r\n\r\n#ifdef _DEBUG\r\n\r\n- (void)showChangeZiXuanScrollParams {\r\n    UIAlertController *contentAlert = [UIAlertController alertControllerWithTitle:@\"设置自选滑动参数\" message:nil preferredStyle:UIAlertControllerStyleAlert];\r\n    [contentAlert addAction:[UIAlertAction actionWithTitle:@\"clear\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\r\n        if (contentAlert.textFields.count > 0) {\r\n            UITextField * textField = contentAlert.textFields[0];\r\n            textField.text = @\"\";\r\n            [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"zixuan_scroll_params\"];\r\n            [[NSUserDefaults standardUserDefaults] synchronize];\r\n        }\r\n    }]];\r\n    [contentAlert addAction:[UIAlertAction actionWithTitle:@\"add\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n        for (int i = 0; i< contentAlert.textFields.count; i++) {\r\n            UITextField * textField = contentAlert.textFields[i];\r\n            if (i == 0 && textField.text.length > 0) {\r\n                [[NSUserDefaults standardUserDefaults] setObject:textField.text forKey:@\"zixuan_scroll_params\"];\r\n                [[NSUserDefaults standardUserDefaults] synchronize];\r\n            }\r\n        }\r\n    }]];\r\n    [contentAlert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\r\n        textField.placeholder = @\"总屏2.5,max1200,min120,阈值屏0.5\";\r\n        NSString *str = [[NSUserDefaults standardUserDefaults] objectForKey:@\"zixuan_scroll_params\"];\r\n        if (str && [str isKindOfClass:[NSString class]] && str.length > 0) {\r\n            textField.text = str;\r\n        }\r\n    }];\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    [vc presentViewController:contentAlert animated:YES completion:nil];\r\n}\r\n\r\n- (void)inspectLocalURL {\r\n    NSMutableArray *localUrlList = [[NSMutableArray alloc] init];\r\n    localUrlList = [self backLocalURL:@\"localURL.dat\" originArray:localUrlList];\r\n    \r\n    NSDictionary *infoDic = [NSBundle mainBundle].infoDictionary;\r\n    NSArray *arr = [infoDic objectForKey:@\"LSApplicationQueriesSchemes\"];\r\n    for (NSInteger idex = 0; idex < localUrlList.count; idex++) {\r\n        for(NSInteger jdex = 47; jdex < arr.count; jdex++) {\r\n            NSString * Url = [DataTypeConvertor stringWithDictionary:localUrlList[idex] forKey:@\"URLInfo\"];\r\n            if([Url rangeOfString:[NSString stringWithFormat:@\"%@\",arr[jdex]]].length != 0) {\r\n                NSString * message = [NSString stringWithFormat:@\"本地localURL和配置文件冲突：（网页URL）%@和（配置信息）%@\",Url,arr[jdex]];\r\n                [self showMessageTips:message];\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    NSString * message = [NSString stringWithFormat:@\"无冲突\"];\r\n    [self showMessageTips:message];\r\n\r\n}\r\n\r\n- (NSArray <NSDictionary *>*)showChangeDNSError {\r\n    NSArray *d = @[@{kDebugMenuNodeNameKey:@\"设置同花顺DNS失败\",kDebugMenuNodeClickKey:@\"setThsDnsError\"},\r\n                @{kDebugMenuNodeNameKey:@\"设置运营商DNS失败\",kDebugMenuNodeClickKey:@\"setOperatorDnsError\"},\r\n                @{kDebugMenuNodeNameKey:@\"清除设置\",kDebugMenuNodeClickKey:@\"clearDnsError\"}];\r\n    NSString *errorString = @\"[dns状态]:\";\r\n    NSNumber *dnsState = [[NSUserDefaults standardUserDefaults] objectForKey:@\"HXDNSErrorTypeSet\"];\r\n    switch (dnsState.intValue) {\r\n        case 1:\r\n            errorString = [NSString stringWithFormat:@\"%@同花顺DNS失败\",errorString];\r\n            break;\r\n        case 2:\r\n            errorString = [NSString stringWithFormat:@\"%@运营商DNS失败\",errorString];\r\n            break;\r\n      ","relevantFile":"","relevantFileList":[],"filePath":"DebugMenu.mm","template":"objective-cpp","multiRes":{"hipilot":"ackUpDebugInfo addSubview:deleteBut];\n    \n    NSString *debugInfo = [HXBrokerInfoLogManager brokerBackUpDebugInfo];\n    UITextView *textView = [[UITextView alloc] initWithFrame:CGRectMake(0, ","deepseek-chat-lite":"ackUpDebugInfo addSubview:deleteBut];","CodeQwen2.5-7B":"ackUpDebugInfo addSubview:deleteBut];\r","copilot":"一致的行情段请求pageId\";\r\n        textField.placeholder = @\"请输入与当前页面fra"}},{"prefix":"\n#import \"AppDelegate.h\"\n#import \"CoredataManager.h\"\n#import \"HXUIFrmPool.h\"\n#import \"UserDefaultsPoolKeys.h\"\n#import <objc/runtime.h>\n#import \"LJLocalURLConfig.h\"\n#import \"MePool.h\"\n#import <HXBaseViewController/HXViewController.h>\n#import \"HXPushedMsgInfo.h\"\n#import \"WKWebViewController.h\"\n#import \"LJHQDetailController.h\"\n#import \"SurveyModel.h\"\n#import \"ReadAndWriteFile.h\"\n#import \"AppBanBenDef.h\"\n#import \"LJLocalURLConfig.h\"\n#import \"GCXPageIdDefine.h\"\n#import \"CustomIOSAlertView.h\"\n\n#import \"LaunchCrashProtection.h\"\n#ifdef NSFoundationVersionNumber_iOS_9_x_Max\n#import <UserNotifications/UserNotifications.h>\n#endif\n#import \"HXDBObjectManager.h\"\n#import \"JumpTool.h\"\n#import \"HXTools.h\"\n#import \"HXShareSDK+Set.h\"\n#import \"HXHTTPDetector.h\"\n#import \"ReturnWindow.h\"\n#import <LJMobiPush/LJMobiPushManager.h>\n#import \"TradePushMessage.h\"\n#import \"ModelMainView.h\"\n#import \"AM_UI_VarKeyString.h\"\n#import \"NetWorkEvnMonitor.h\"\n//#import <HXIMClientSDK/HXIMClientSDK.h>\n#import \"UIView+Toast.h\"\n#import \"HXURLProtocol.h\"\n#import \"RegisRemotePushBus.h\"\n#import \"CurveSettingManager.h\"\n#import \"LJTechDataManage.h\"\n#import \"IQKeyboardManager.h\"\n\n#import \"HXTradeLoginManager.h\"\n#import \"HXHttpNetwork.h\"\n#import \"LJUserAgentManager.h\"\n\n#import \"HXSwiftHeader.h\"\n#import \"LJSwitchManager.h\"\n\n#if (defined ADHOC) || (defined DEBUG) //#ifdef ADHOC\n#import \"HXPerformanceCenter.h\"\n#import \"HXHangDetectMoniter.h\"\n#import \"BuryPointWindow.h\"\n#endif\n\n#import \"CrashReporter.h\"\n#import \"SwitchAccountListView.h\"\n#import <LJSelfStockManager/LJSelfStockManager.h>\n#import \"LJSelfStockGroupManager.h\"\n#import \"CompanyPushManager.h\"\n\n#import <HsFutuSystemInfo/HsSysInfoUtils.h>\n#import \"AXSystemInfo.h\"\n#import <CoreTelephony/CTCellularData.h>\n#include <arpa/inet.h>\n#import \"LJPrivacyManage.h\"\n#import \"SimulatedTradeGameListData.h\"\n#import \"HXLoginManager.h\"\n#import \"ChannelViewModel.h\"\n#import \"FUSwitchManage.h\"\n#import \"HXFuturesScreenShotShareManager.h\"\n#import \"JiaoYiLoginPool.h\"\n#import \"FUCommonSwitchModel.h\"\n#import \"CrashReporterLogsManager.h\"\n#import \"LJAppInfo.h\"\n#import \"PhoneNumLoginManager.h\"\n#import \"OneKeyBindController.h\"\n#import \"FeedBackManager.h\"\n#import \"WKHorizontalScreenWebViewController.h\"\n#import \"OpenAccountManager.h\"\n#import \"KeyManager.h\"\n#import \"UIStatusBarManager+HandleTapAction.h\"\n#import \"HXLevel2PowerManager.h\"\n#import \"HXAddValueCheckTool.h\"\n#import \"HotStockRequestManager.h\"\n#import \"LJLiveHardcodedString.h\"\n#import \"LJAdPushManage.h\"\n#import \"CTMediator+SocketFetcherHandler.h\"\n#import \"ToastManagerPool.h\"\n#import \"LJTCPLogManager.h\"\n#import \"HXTopInformationPopUpWindow.h\"\n#import \"THSDomainResolver.h\"\n#import \"LJNetProxyStatusCheckTool.h\"\n#import \"EQUIWindow.h\"\n#import \"LJDrawLinePushManage.h\"\n#import \"HXLogPushManager.h\"\n#import \"LJStockCodeTablePush.h\"\n#import \"LJDrawLineManager.h\"\n#import \"LJAdPagePushManager.h\"\n#import \"DataBaseService.h\"\n#import \"LJIndicatorPushManage.h\"\n\n#if DEBUGTOOL\n#import <HXCoverageReport/HXCoverageReportService.h>\n#endif\n#import \"UIApplication+info.h\"\n#import \"LJCrashService.h\"\n#import <HXAPMonitor/HXAPMonitor.h>\n#import <LJDrawLineCloudStore/LJDLPlanDataManage.h>\n#import \"HXDeviceManager.h\"\n#import \"LJAppStoreLaunchEffectMonitor.h\"\n#import \"ZiXunTitleView.h\"\n#import <LJCategoryKit/LJCategory.h>\n#import \"LJTradeGeneralTools.h\"\n#import \"LJCustomizedUITools.h\"\n#import \"LJWebClientIdentification.h\"\n#import <EQConfigModul/EQConfigManager.h>\n#import <HXCore/HXCoreConfig.h>\n#import \"HXEnvManager.h\"\n#import \"LJRouter+JumpTool.h\"\n#import \"LJUserPermissionPushManager.h\"\n#import \"HXSERVGrayReleaseRegister.h\"\n#import <LJCategoryKit/UIViewController+LJAdd.h>\n#import \"HXCommandManager.h\"\n#import \"AMCollectUserBehavior.h\"\n#import \"HXCapitalLuaUpdateManager.h\"\n#import \"HXViewController+Protocols.h\"\n#import <LJViewTrace/LJViewControllerProtocol.h>\n#import <HXCommand/HXHangMonitorExecutor.h>\n#import <HXTradeDevelopTool/HXTradeDevelopTool.h>\n#import <LJTradeFunctionManager/AllCloudCondictionCompanyManager.h>\n#import <LJDomainChangeObserver/LJDomainChangeObserver.h>\n#import <LJDeviceHelper/LJDeviceHelper.h>\n#import <LJTradeClientSDK/HXTradeClientSDK.h>\n#import \"LJNWPackageManager.h\"\n\n#pragma mark - Launch\n#import \"HXLaunchAppConfiguration.h\"\n#import \"LJCommunicateRegister.h\"\n#import \"HomeViewController.h\"\n#import \"LJThemeRegister.h\"\n#import \"LJHummerRegister.h\"\n#import \"LJNetworkMonitorRegister.h\"\n#import \"LJStockCodeRegister.h\"\n#import \"LJPasteboardRegister.h\"\n#import \"LJAuditedVersionControlRegister.h\"\n#import \"LJScreenShotRegister.h\"\n#import \"LJFUActionManagerRegister.h\"\n#import \"LJUserNotificationRegister.h\"\n#import \"LJDrawLineRegister.h\"\n#import \"LJDrawLineShareRegister.h\"\n#import \"LJUserAgentRegister.h\"\n#import \"LJLaunchGrayScaleManager.h\"\n\n#if DEBUGTOOL\n#import <FunctionProfiler/TimeProfiler.h>\n#endif\n\n#import <HXLauncher/HXLAppLifeLauncher.h>\n\n#import <LJCommunication/AMCommunicationManager.h>\n#import <HXAPMonitor/HXAPMLaunchPlugin.h>\n#import <TYSwizzle/TYLoggerManager.h>\n\n@import CTMediator;\n@import LJContractManager;\n@import LJStockCodeTable;\n@import LJGridTrade_Category;\n@import LJTradeOrderService;\n@import LJTradeSpecificationPushType;\n@import HXTradeDailyDataNotification;\n@import LJIAPManager;\n@import LogManager;\n@import LJFRouter;\n\n#define BanBenKongZhi @\"banbenkongzhi.plist\"\n#define TAG_ALERT_PUSH 232323\n\n//手抄授权登录回调\n#define HXTHSAuthRes @\"HXTHSAuthRes\"\n\nEQINT g_bInForground = 1;//是否在前台\n\nstatic NSString * const kAppId = @\"\"; //@\"<appId>\";\nstatic NSString * const kAppSecret = @\"\"; //@\"<appSecret>\";\nstatic NSString * const kTHSDomainResolver = @\"70kf1j0q\";\n\nextern NSString * const ClickStatusBar;\n//extern EQUIWindow* g_eqWindow;\nextern EQINT g_bLocalApp; //是否为本地应用(主应用)，1:是主应用，0:被其他应用作为静态库编译进去了。\n\nNSString * const kAppDelegateNotificationReceivedNotification = @\"AppDelegateNotificationReceived\";\n\nstatic NSString *const kAppDidReceiveMemoryWarning = @\"APP_DID_RECEIVE_MEMORY_WARNING\";\nstatic NSString *const kAppWillTerminateLog = @\"APP_WILL_TERMINATE\";\n\n/// 讯息图标\nstatic NSString *const kTouGuIcon = @\"TouGu\";\n/// 讯息标题\nstatic NSString *const kTouGuTitleStr = @\"讯息\";\n/// 意见反馈回复图标\nstatic NSString *const kFeedbackReplyIcon = @\"YiJianHuiFu\";\n/// 意见反馈回复标题\nstatic NSString *const kFeedbackReplyTitleStr = @\"意见反馈回复\";\n/// client跳转协议前缀\nstatic NSString *const kClientHtml = @\"client.html\";\nstatic NSString *const kUnableToViewMarketData = @\"您所用网络环境可能无法查看部分行情数据\";\nstatic NSString *const kRequestTimeoutErrorMessage = @\"请求超时，请稍后重试\";\n///universal link 链接跳转配置\nstatic NSString *const kClipboardKey = @\"clipboardkey=\";\nstatic NSString *const kClipLinkKey = @\"cliplinkkey=\";\n\n@interface AppDelegate () <UNUserNotificationCenterDelegate>\n\n\n/// 通过aler弹框展示的推送消息对象\n@property (nonatomic, strong) HXPushedMsgInfo *infoMsgPushToAlert;\n@property (nonatomic, strong) LJHQDetailController *geGuViewController;\n\n@end\n\n@implementation AppDelegate\n\n- (void)dealloc {\n    \n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)initRootViewController {\n    self.window = [HXEnvManager shareInstance].appWindow;\n    MainTabbarController *tabbar = [[MainTabbarController alloc] init];\n    [HXEnvManager shareInstance].appWindow.rootViewController = tabbar;\n    [[HXEnvManager shareInstance].appWindow makeKeyAndVisible];\n}\n\n#pragma mark - APP life cycle\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // NS","infill":"Log(@\"=== [test] path: %@\", [NSSearchPathForDirecto","suffix":"riesInDomains(NSDocumentDirectory,NSUserDomainMask, YES) firstObject]);\n    NSLog(@\"=== \n    \n#if DEBUGTOOL\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:KEY_CHANGE_TIME_PROFILER]) {\n        [[TimeProfiler shareInstance] TPStartTrace:(char *)[@\"StartUp\" UTF8String]];\n    }\n#endif\n\n    //didFinishLaunchingWithOptions增加初始化功能，需要在配置文件LaunchConfig中补充initialize类\n    if ([LJLaunchGrayScaleManager isLaunchGrayEnable] && [HXLAppLifeLauncher checkLastLaunchValid]) {\n        self.isUsedLauncher = YES;\n        [HXLAppLifeLauncher setConfigurationFile:HXLaunchConfigFileName];\n        [HXLAppLifeLauncher setAppLaunchOptions:launchOptions];\n        [HXLAppLifeLauncher setAppConfiguration:[HXLaunchAppConfiguration new]];\n        [HXLAppLifeLauncher sharedInstance].noforever = YES;\n        [HXLAppLifeLauncher sharedInstance].waitAsync = NO;\n        [[HXLAppLifeLauncher sharedInstance] appDidFinishLaunching];\n        return YES;\n    }\n    \n#if DEBUGTOOL // 检查 factory 服务是否注入完整\n    [FactoryServiceCheck check];\n#endif\n    \n#if (defined ADHOC) || (defined DEBUG)\n    // 测试环境如果配置了启动就展示窗口\n    NSString *isShowUrl = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_IS_SHOW_URL];\n    if ([isShowUrl isEqualToString:isOK]) {\n        [[BuryPointWindow sharedViewer] needShowUrl:YES withType:ShowDefultUrl];\n    }\n#endif\n    \n    /// 设置通行证存储路径\n    EQSetPassportSavePathAndEncryptKey([NSHomeDirectory() stringByAppendingFormat:@\"/Documents\"], STR_BundleName);\n    /// 不转换单位\n    [HXCoreConfigManager shareInstance].config.isUseCustomUnitConvert = NO;\n    /// 初始化运行环境，确保配置使用的时候已经全部初始化\n    [HXEnvManager shareInstance];\n    // 主站通讯注册\n    [[LJCommunicateRegister sharedInstance] registerCommunication];\n    \n    /// 设置首页控制器，用于启动监控统计\n    [HXAPMLaunchPlugin hookFirstPageLifeCycle:NSStringFromClass([HomeViewController class])];\n\n    /// 日志&APM初始化（‼️1.初始化中需要用到uid，期货项目需要在[self registCommunication]之后进行，确保能正常获取uid 2.苹果支付依赖logManager采集日志，所以需要在支付管理类之前初始化，请勿移动代码）\n    LogConfig *logConfig = [[LogConfig alloc] init];\n#ifndef DEBUGTOOL\n    logConfig.isTest = NO;\n#elif DEBUG\n    logConfig.isTest = YES;\n#else\n    BOOL hasKey = [[UserDefaultsPool sharedUserDefaultsPool] objectForKey:KEY_CHANGE_APM_ENV];\n    // 默认用测试环境\n    logConfig.isTest = hasKey ? [[UserDefaultsPool sharedUserDefaultsPool] boolForKey:KEY_CHANGE_APM_ENV] : YES;\n#endif\n    NSLog(@\"[test] apm env: %@\", logConfig.isTest ? @\"测试环境\" : @\"正式环境\");\n    [[LogManager shared] logWithConfigWithLogConfig:logConfig];\n    [TYLoggerManager setLogFunction: ^(NSString *_Nonnull log){\n        TradeElkLog(log, nil);\n    }];\n    \n    // ‼️苹果支付管理类需要在入口初始化监听未完成的支付行为，请勿移动代码\n    (void)[LJIAPManager shared];\n    \n    // 启动离线包引擎\n    [[LJNWPackageManager sharedInstance] launchHXNativeWebEngine];\n    \n#if DEBUGTOOL\n    // 代码覆盖率工具初始化\n    NSString *bundleID = [[[NSBundle mainBundle] infoDictionary] objectForKey:(NSString*)kCFBundleIdentifierKey];\n    NSString *commitId = [UIApplication hx_commitID];\n    [[HXCoverageReportService shareInstance] registCoverageWithAppIdentify:bundleID commitId:commitId];\n#endif\n    \n    // 域名备份组件注册和启用\n    self.hostOverrideIsEnable = NO;\n    HXLogInfo(kQHGlobal, @\"Domain hostOverrideIsEnable N\");\n    NSString *domainUserId = [[MePool sharedMePool] getUserID] ?: @\"\";\n    [THSDomainResolver registerApp:kTHSDomainResolver userid:domainUserId];\n    [THSDomainResolver updateUserid:^NSString * _Nullable{\n        return [[MePool sharedMePool] getUserID] ?: @\"\";\n    }];\n    [THSDomainResolver setHostOverrideEnableState:YES configEnableNotify:^{\n        // 当配置已经启用的通知,业务可以进行特殊的处理\n        HXLogInfo(kQHGlobal, @\"Domain hostOverrideIsEnable Y\");\n        self.hostOverrideIsEnable = YES;\n        [HXURLProtocol start];\n        [[LJDomainChangeObserver sharedInstance] domainChanged];\n    }];\n    \n#if (defined ADHOC) || (defined DEBUG)\n    [THSDomainResolver setIsTestEnvironment:YES];\n#endif\n    // 设置\n    [[HXDeviceManager shareInstance] setDefaultAccessGroup:AM_SERVICE_NAME];\n    [LJDeviceHelper setDefaultAccessGroup:AM_SERVICE_NAME];\n    \n    self.window.backgroundColor = THEMECOLOR(BackgroundTwoAppColorNew);\n    \n    g_bLocalApp = 1;\n    \n    // 主题初始化\n    [[LJThemeRegister sharedInstance] initTheme];\n    // 初始化hummer\n    [LJHummerRegister initHummerEngine];\n    \n    //初始化默认内部版本号\n    [[LJAppInfo shareInstance] initWithAppletVersion:STR_AppletVersion_default userAgentPlatform:APP_User_Agent_Platform appId:APP_ID];\n    [[NSUserDefaults standardUserDefaults] setObject:STR_AppletVersion_default forKey:STR_APPLET_VERSION];\n    \n    [[LJPasteboardRegister sharedInstance] analysisPasteboard];\n    dispatch_async([LJPasteboardRegister sharedInstance].analysisQueue, ^{\n        NSString *origin = [MePool sharedMePool].belongTo;\n        if ([[MePool sharedMePool] isBelongToEmpty]) {\n            origin = [MePool sharedMePool].origin;\n        }\n        [ClientUserBehaviorLog sendLogWithLogobject:[NSString stringWithFormat:@\"start.%@\",origin.lowercaseString] actionType:NoneAction];\n    });\n    \n    //启动连续崩溃清除缓存\n    [LaunchCrashProtection launchContinuousCrashProtect];\n\n    //UFX获取设备信息初始化\n    [HsSysInfoUtils initSysInfo];\n    //顶点获取位置信息\n    [AXSystemInfo startUpdatingLocation];\n\n    // 1.获取网络权限 根据权限进行人机交互\n    [LJNetworkMonitorRegister networkStatus:application\n              didFinishLaunchingWithOptions:launchOptions];\n\n    self.urlCache = [[NSURLCacheEx alloc] initWithMemoryCapacity:1024*1024*10 diskCapacity:1024*1024*60 diskPath:nil];\n    [NSURLCache setSharedURLCache:self.urlCache];\n\n    // 注册分享\n    [self registerShareAction];\n\n    [HXSERVGrayReleaseRegister registerMethods];\n    \n    [self registerForRemoteNotification];\n    [[SurveyModel shareSurveyModel] parserData:[ReadAndWriteFile getDicDataFromLocalWithPath:BanBenKongZhi]];\n    \n    [[FUSwitchManage sharedFUSwitchManage] registerSwitchProcessor:^{\n        //模块都先注册好\n        [FUCommonSwitchModel sharedFUCommonSwitchModel];\n    }];\n    [[UserDefaultsPool sharedUserDefaultsPool] setObject:@\"0\" forKey:KEY_LAUNCH_WITH_NOTIFI];\n    \n    [[LJDomainChangeObserver sharedInstance] addObserverPreExecute:YES callBack:^{\n        // 初始化合约代码表\n        [LJStockCodeRegister registerStockCodeTable];\n        // 审核开关请求\n        [LJAuditedVersionControlRegister requestAuditedVersionControl];\n    }];\n    \n    [self registerItems];\n    application.applicationIconBadgeNumber = 0; //set to zero\n\n    [LJSwitchManager sharedInstance];\n    [[LJMobiPushManager shareInstance] addLoginNotification];\n    [TradePushMessage shareInstance];\n    [MainViewRequestObj shareInstance];\n    [LJStockCodeTablePush sharedInstance];\n    [HXCommandManager sharedManager];\n    [LJSelfStockManager sharedSelfStockManager];\n    [LJSelfStockGroupManager sharedSelfStockGroupManager];\n    [CompanyPushManager share];\n    [AllCloudCondictionCompanyManager share];\n    //隐私\n    [LJPrivacyManage shared];\n    [ChannelViewModel shareInstance];\n    [HXHTTPDetector sharedInstance];\n    [LJAdPushManage sharedInstance];\n    [HXLogPushManager sharedInstance];\n    [LJAdPagePushManager sharedInstance];\n    // appstore投放效果监控\n    [LJAppStoreLaunchEffectMonitor sharedInstance];\n    \n    // 新版灰度\n    (void)[LJGrayScaleOCManager shared];\n    // 启动器状态监控\n    [LJLaunchGrayScaleManager addLauncherStatusGrayObserver];\n    \n    // 交易预设，云存储更新通知监听\n    [[HXTransactionPreSettingManager shared] registerPushNoti];\n\n    [NetWorkEvnMonitor startNetWorkEvnMonitor:^(AFNetworkReachabilityStatus status) {\n        HXLogInfo(kQHGlobal, @\"network status change %ld\", (long)status);\n    }];\n\n    [HXFuturesScreenShotShareManager sharedManager];\n    [HXLevel2PowerManager shareInstance];\n    [HXAddValueCheckTool shareInstance];\n    // 注册一键登录\n    [PhoneNumLoginManager registerApp];\n    // web和客户端唯一值获取\n    [LJWebClientIdentification sharedInstance];\n    // 行情日志监控\n    [LJTCPLogManager shareInstance];\n    // 自定义用户权限\n    [[LJUserPermissionPushManager shared] registerPush];\n    // 交易日志\n    (void)[HXTradeDailyDataManager shared];\n    (void)[HXTradePushDailyDataManager","relevantFile":"","relevantFileList":[],"filePath":"AppDelegate.mm","template":"objective-cpp","multiRes":{"hipilot":"String *path = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, YES) firstObject];\n    // NSLog(@\"AppDelegate::applicationDidFinishLaunchingWithOptions::document path:%@\",path);\n    \n    NS","deepseek-chat-lite":"Log(@\"%@\", [NSHomeDirectory() stringByAppendingFormat:@\"/Documents\"]);","CodeQwen2.5-7B":"HomeDirectory() stringByAppendingPathComponent:[NSSearchPathForDirecto<|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|><|fim_pad|>","copilot":"Log(@\"=== [test] path: %@\", [NSSearchPathForDirecto"}},{"prefix":"}\n\n- (void)showFilter{\n    [WTAMLogFilterView show];\n    [self showLog];\n}\n#endif\n\n// HXAMlog实时日志\n- (void)showLog {\n    if (EQGetAppFrame() == NULL) {\n        return;\n    }\n    CEQEvent* pEvent = EQGetAppFrame()->GetNewEventObj();\n    pEvent->SetEventType(EQEVT_SELF);\n    CEQAffairAnalyzer* pAffairAnalyzer = EQGetAffairAnalyzer()    ;\n    if(pAffairAnalyzer) {\n        pAffairAnalyzer->LogAverageRequestTime();\n        pAffairAnalyzer->WriteLogRightNow();\n    }\n    pEvent->SetEventId(EQEVT_ID_SHOW_NETLOG);\n    EQGetAppFrame()->PostMsg(pEvent);\n}\n#ifdef _DEBUG\n- (void)autoShowLog {\n    [[HXLogViewController shared] changeAutoOpenLog];\n}\n#endif\n\n// HXAMlog日志列表\n- (void)goToHXAMLogList {\n    HXAMLogFileListViewController *listVC = [[HXAMLogFileListViewController alloc] init];\n    UIViewController* tabBarVC = (UIViewController*)[((AMUITabFm*)[AMUIFrameWork shareingUIFramework]) getCurStackController];\n    NavigationControllEx * nav = [[NavigationControllEx alloc] initWithRootViewController:listVC];\n    [tabBarVC presentViewController:nav animated:YES completion:nil];\n}\n\n/// 展示统一链路日志视图\n- (void)openHXECLogView {\n    [HXECService showTestView];\n}\n\n// 开启日志\n- (void)openLog {\n    g_bPringLog = YES;\n}\n\n// 关闭日志\n- (void)closeLog {\n    g_bPringLog = NO;\n}\n\n#ifdef _DEBUG\n// 显示本地缓存的流水数据\n- (void)showLocalCacheData {\n    liushuiScrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, Screen_height)];\n    [liushuiScrollView setBackgroundColor:[UIColor whiteColor]];\n    liushuiScrollView.contentSize = CGSizeMake(Screen_width, Screen_height);\n    [g_eqWindow addSubview:liushuiScrollView];\n    \n    //读取本地数据\n    WTAccountInfor *curAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    NSDictionary *liushuiData = curAccount.isRZRQ ? [TJiaoYiRiSearchModel readRZRQChengJiaoLiushuiFromLocalWithAccount:curAccount.account] : [TJiaoYiRiSearchModel readChengJiaoLiushuiFromLocalWithAccount:curAccount.account];\n    \n    if ([liushuiData isKindOfClass:[NSDictionary class]]) {\n        NSString *saveDateStr = liushuiData[@\"date\"];\n        NSString *cacheTimeStr = [liushuiData thsStringForKey:@\"cacheTime\"];\n        NSString *queryIndexString = [liushuiData thsStringForKey:@\"34057\"];\n        NSArray *stockCodes = liushuiData[@2102];\n        NSArray *stockNames = liushuiData[@2103];\n        NSArray *dealNumbers = liushuiData[@2128];\n        NSArray *dealPervalue = liushuiData[@2129];\n        NSArray *dealTypes = liushuiData[@2109];\n        NSArray *dealValue = liushuiData[@2131];\n        NSArray *dealTimes = liushuiData[@2142];\n        NSArray *tradeMarkets = liushuiData[@2130];\n        NSArray *gdAccouunts = liushuiData[@2106];\n        NSArray *htNums = curAccount.isRZRQ ? liushuiData[@2135] : liushuiData[@2144];\n        NSArray *cjNums = curAccount.isRZRQ ? liushuiData[@2130] : liushuiData[@2145];\n        \n        UILabel *timeLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 40, Screen_width, 40)];\n        timeLabel.font = [UIFont systemFontOfSize:17.0];\n        timeLabel.textColor = [UIColor redColor];\n        timeLabel.text = [NSString stringWithFormat:@\"流水数据时间：%@--%@--%@\", saveDateStr, cacheTimeStr, queryIndexString];\n        [timeLabel setTextAlignment:NSTextAlignmentCenter];\n        [liushuiScrollView addSubview:timeLabel];\n        UILabel *shuzu = [[UILabel alloc] initWithFrame:CGRectMake(0, 85, Screen_width, 40)];\n        shuzu.font = [UIFont systemFontOfSize:17.0];\n        shuzu.textColor = [UIColor redColor];\n        shuzu.text = [NSString stringWithFormat:@\"流水数据一共%lu条\", (unsigned long)stockNames.count];\n        [shuzu setTextAlignment:NSTextAlignmentCenter];\n        [liushuiScrollView addSubview:shuzu];\n        if (stockCodes.count == stockNames.count\n            && stockCodes.count == dealNumbers.count\n            && stockCodes.count == dealPervalue.count\n            && stockCodes.count == dealTypes.count\n            && stockCodes.count == dealValue.count) {\n            liushuiScrollView.contentSize = CGSizeMake(Screen_width, 160 + stockCodes.count * 90);\n            for (int i = 0; i < stockCodes.count; i++) {\n                UILabel *stock = [[UILabel alloc] initWithFrame:CGRectMake(0, 130 + i * 90, Screen_width, 30)];\n                stock.font = [UIFont systemFontOfSize:15.0];\n                stock.textColor = [UIColor blackColor];\n                stock.text = [NSString stringWithFormat:@\"第 %i 条流水数据\", i + 1];\n                [stock setTextAlignment:NSTextAlignmentCenter];\n                [liushuiScrollView addSubview:stock];\n                UILabel *stockData = [[UILabel alloc] initWithFrame:CGRectMake(0, 160 + i * 90, Screen_width, 60)];\n                stockData.font = [UIFont systemFontOfSize:13.0];\n                stockData.textColor = [UIColor blackColor];\n                stockData.text = [NSString stringWithFormat:@\"操作: %@      代码: %@      名称: %@      交易价格: %@      交易数量: %@      交易总价: %@  成交时间：%@  交易市场：%@  股东账号：%@  合同编号：%@  成交编号：%@\", dealTypes[i], stockCodes[i], stockNames[i], dealPervalue[i], dealNumbers[i], dealValue[i], [dealTimes safetyObjectAtIndex:i], [tradeMarkets safetyObjectAtIndex:i], [gdAccouunts safetyObjectAtIndex:i], [htNums safetyObjectAtIndex:i], [cjNums safetyObjectAtIndex:i]];\n                [stockData setTextAlignment:NSTextAlignmentCenter];\n                stockData.numberOfLines = 0;\n                stockData.lineBreakMode = NSLineBreakByWordWrapping;\n                [liushuiScrollView addSubview:stockData];\n            }\n        }\n    }\n\n    UIButton* btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [btn setTitle:@\"返回\" forState:UIControlStateNormal];\n    [btn addTarget:self action:@selector(dismissLiushuiScrollView) forControlEvents:UIControlEventTouchDown];\n    btn.frame = CGRectMake(0, 0, 100, 100);\n    [liushuiScrollView addSubview:btn];\n}\n\n- (void)showBrokerBackUpDebugInfo {\n    if (EQGetAppFrame() == NULL) {\n        return;\n    }\n    brokerBackUpDebugInfo = [[UIView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, Screen_height)];\n    [brokerBackUpDebugInfo setBackgroundColor:[UIColor whiteColor]];\n    [g_eqWindow addSubview:brokerBackUpDebugInfo];\n    \n    UIButton *btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [btn setTitle:@\"返回\" forState:UIControlStateNormal];\n    [btn addTarget:self action:@selector(removeBrokerBackUpDebugInfoView) forControlEvents:UIControlEventTouchDown];\n    btn.frame = CGRectMake(0, 20, Screen_width / 2, 40);\n    [brokerBackUpDebugInfo addSubview:btn];\n    UIButton *deleteBut = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [deleteBut setTitle:@\"删除并返回\" forState:UIControlStateNormal];\n    [deleteBut addTarget:self action:@selector(deleteAndRemoveBrokerView) forControlEvents:UIControlEventTouchDown];\n    deleteBut.frame = CGRectMake(Screen_width / 2, 20, Screen_width / 2, 40);\n    [brokerBackUpDebugInfo addSubview:deleteBut];\n    \n    UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 60, Screen_width, Screen_height - 60)];\n    NSString *log = [HXBrokerInfoLogManager getStringFromFile];\n    UILabel *logLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 60, Screen_width, 15)];\n    logLabel.font = [UIFont systemFontOfSize:13];\n    [logLabel hx_autoAdaptionHeightWithText:log];\n    scrollView.contentSize = CGSizeMake(Screen_width, logLabel.frame.size.height + 60);\n    [scrollView setContentOffset:CGPointMake(0, logLabel.frame.size.height + 120 - Screen_height)];\n    [scrollView addSubview:logLabel];\n    [brokerBackUpDebugInfo addSubview:scrollView];\n}\n\n- (void)startToShowCDRLoginAlert {\n    BOOL isOpen = [[NSUserDefaults standardUserDefaults] boolForKey:JH_MODE_StartToShowCDRLoginAlert_KEY];\n    [[NSUserDefaults standardUserDefaults] setBool:!isOpen forKey:JH_MODE_StartToShowCDRLoginAlert_KEY];\n    [[NSUserDefaults standardUserDefaults] synchronize];\n}\n\n- (void)autoLoginPasswordError {\n    BOOL isOpen = [[NSUserDefaults standardUserDefaults] boolForKey:SC_AUTOLOGINPASSWORDERROR_KEY];\n    [[NSUserDefaults standardUserDefau","infill":"BOOL isOpen = [[NSUserDefaults standardUserDefaults] boolForKey:@\"HX_TCPRequestInterruptDetect\"];\r\n    [[NSUserDefaults standardUserDefaults] setBool:!isOpen forKey:@\"HX_TCPRequestInterruptDetect\"];\r\n    [AMUIPublicProxy showTipAutoClose:[NSString stringWithFormat:@\"TCP请求中断检测:%@\",!isOpen?@\"开启\":@\"关闭\"]];\r\n","suffix":"}\r\n\r\n- (void)closeDataMonitor {\r\n    [DataMonitorManager enableDataMonitor:NO];\r\n    [DataMonitorManager clearData];\r\n    if (self.monitorController) {\r\n        [self.monitorController willMoveToParentViewController:nil];\r\n        [self.monitorController.view removeFromSuperview];\r\n        [self.monitorController removeFromParentViewController];\r\n        self.monitorController = nil;\r\n    }\r\n}\r\n\r\n- (void)removeBrokerBackUpDebugInfoView {\r\n    [brokerBackUpDebugInfo removeFromSuperview];\r\n}\r\n\r\n- (void)deleteAndRemoveBrokerView {\r\n    [HXBrokerInfoLogManager deleteLog];\r\n    [self removeBrokerBackUpDebugInfoView];\r\n}\r\n#endif\r\n\r\n- (void)removeNotificationView {\r\n    [localNotificationSetView removeFromSuperview];\r\n}\r\n\r\n- (void)receiveStuffData:(NSDictionary *)stuffData\r\n{\r\n    void* data = [[stuffData objectForKey:@\"dispatch_stuff_data\"] pointerValue];\r\n    CEQString16* text = ((CEQStuffTextStruct*)data)->GetStrText();\r\n    NSString* str = [NSString stringWithEQString16:text];\r\n    \r\n    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:str,@\"strKey\",@\"hq1\",@\"source\", nil];\r\n    [[NSNotificationCenter defaultCenter] postNotificationName:@\"debugMenu_receive\" object:nil userInfo:dic];\r\n    \r\n}\r\n\r\n- (void)dnsInfoViewClose {\r\n    _dnsInfoVC.delegate = nil;\r\n    _dnsInfoVC = nil;\r\n}\r\n\r\n#ifdef _DEBUG\r\n- (void)dismissLiushuiScrollView {\r\n    [liushuiScrollView removeFromSuperview];\r\n}\r\n\r\n- (void)clearCompetitorAPPStat {\r\n    [[NSUserDefaults standardUserDefaults] removeObjectForKey:kLastTimeKey];\r\n}\r\n#endif\r\n- (NSMutableArray *)backLocalURL:(NSString *)fileName originArray:(NSMutableArray *)originArray{\r\n    NSString *strSourcePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:fileName];\r\n    NSData *fileData = [[NSData alloc] initWithContentsOfFile:strSourcePath];\r\n    if (fileData == nil) {\r\n        return originArray;\r\n    }\r\n    NSDictionary *localUrlDic = [NSJSONSerialization JSONObjectWithData:fileData options:NSJSONReadingAllowFragments error:nil];\r\n    \r\n    [localUrlDic enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {\r\n        [originArray addObject:obj];\r\n    }];\r\n    return originArray;\r\n}\r\n\r\n- (void)showMessageTips:(NSString *)message {\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"\" message:message preferredStyle:UIAlertControllerStyleAlert];\r\n    UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n    }];\r\n    [alert addAction:confirmAction];\r\n    [vc presentViewController:alert animated:YES completion:nil];\r\n}\r\n\r\n#ifdef _DEBUG\r\n\r\n- (void)showChangeZiXuanScrollParams {\r\n    UIAlertController *contentAlert = [UIAlertController alertControllerWithTitle:@\"设置自选滑动参数\" message:nil preferredStyle:UIAlertControllerStyleAlert];\r\n    [contentAlert addAction:[UIAlertAction actionWithTitle:@\"clear\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\r\n        if (contentAlert.textFields.count > 0) {\r\n            UITextField * textField = contentAlert.textFields[0];\r\n            textField.text = @\"\";\r\n            [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"zixuan_scroll_params\"];\r\n            [[NSUserDefaults standardUserDefaults] synchronize];\r\n        }\r\n    }]];\r\n    [contentAlert addAction:[UIAlertAction actionWithTitle:@\"add\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n        for (int i = 0; i< contentAlert.textFields.count; i++) {\r\n            UITextField * textField = contentAlert.textFields[i];\r\n            if (i == 0 && textField.text.length > 0) {\r\n                [[NSUserDefaults standardUserDefaults] setObject:textField.text forKey:@\"zixuan_scroll_params\"];\r\n                [[NSUserDefaults standardUserDefaults] synchronize];\r\n            }\r\n        }\r\n    }]];\r\n    [contentAlert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\r\n        textField.placeholder = @\"总屏2.5,max1200,min120,阈值屏0.5\";\r\n        NSString *str = [[NSUserDefaults standardUserDefaults] objectForKey:@\"zixuan_scroll_params\"];\r\n        if (str && [str isKindOfClass:[NSString class]] && str.length > 0) {\r\n            textField.text = str;\r\n        }\r\n    }];\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    [vc presentViewController:contentAlert animated:YES completion:nil];\r\n}\r\n\r\n- (void)inspectLocalURL {\r\n    NSMutableArray *localUrlList = [[NSMutableArray alloc] init];\r\n    localUrlList = [self backLocalURL:@\"localURL.dat\" originArray:localUrlList];\r\n    \r\n    NSDictionary *infoDic = [NSBundle mainBundle].infoDictionary;\r\n    NSArray *arr = [infoDic objectForKey:@\"LSApplicationQueriesSchemes\"];\r\n    for (NSInteger idex = 0; idex < localUrlList.count; idex++) {\r\n        for(NSInteger jdex = 47; jdex < arr.count; jdex++) {\r\n            NSString * Url = [DataTypeConvertor stringWithDictionary:localUrlList[idex] forKey:@\"URLInfo\"];\r\n            if([Url rangeOfString:[NSString stringWithFormat:@\"%@\",arr[jdex]]].length != 0) {\r\n                NSString * message = [NSString stringWithFormat:@\"本地localURL和配置文件冲突：（网页URL）%@和（配置信息）%@\",Url,arr[jdex]];\r\n                [self showMessageTips:message];\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    NSString * message = [NSString stringWithFormat:@\"无冲突\"];\r\n    [self showMessageTips:message];\r\n\r\n}\r\n\r\n- (NSArray <NSDictionary *>*)showChangeDNSError {\r\n    NSArray *d = @[@{kDebugMenuNodeNameKey:@\"设置同花顺DNS失败\",kDebugMenuNodeClickKey:@\"setThsDnsError\"},\r\n                @{kDebugMenuNodeNameKey:@\"设置运营商DNS失败\",kDebugMenuNodeClickKey:@\"setOperatorDnsError\"},\r\n                @{kDebugMenuNodeNameKey:@\"清除设置\",kDebugMenuNodeClickKey:@\"clearDnsError\"}];\r\n    NSString *errorString = @\"[dns状态]:\";\r\n    NSNumber *dnsState = [[NSUserDefaults standardUserDefaults] objectForKey:@\"HXDNSErrorTypeSet\"];\r\n    switch (dnsState.intValue) {\r\n        case 1:\r\n            errorString = [NSString stringWithFormat:@\"%@同花顺DNS失败\",errorString];\r\n            break;\r\n        case 2:\r\n            errorString = [NSString stringWithFormat:@\"%@运营商DNS失败\",errorString];\r\n            break;\r\n        case 0:\r\n        default:\r\n            errorString = [NSString stringWithFormat:@\"%@无error\",errorString];\r\n            break;\r\n    }\r\n    d.customIdenfitier = errorString;\r\n    return d;\r\n}\r\n\r\n- (void)setDomainResolverEnv {\r\n    NSString *key = @\"SC_domainResolverEnv\";\r\n    BOOL isTestEnv = [[NSUserDefaults standardUserDefaults] boolForKey:key];\r\n    NSString *message = @\"\";\r\n    if(isTestEnv) {\r\n        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@\"SC_domainResolverEnv\"];\r\n        message = @\"设置域名切换备份服务为生产环境，重启生效\";\r\n    }\r\n    else {\r\n        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@\"SC_domainResolverEnv\"];\r\n        message = @\"设置域名切换备份服务为测试环境，重启生效\";\r\n    }\r\n    UIAlertController *contentAlert = [UIAlertController alertControllerWithTitle:@\"设置\" message:message preferredStyle:UIAlertControllerStyleAlert];\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    [vc presentViewController:contentAlert animated:YES completion:nil];\r\n}\r\n\r\n- (void)setThsDnsError {\r\n    [[NSUserDefaults standardUserDefaults] setObject:@(1) forKey:@\"HXDNSErrorTypeSet\"];\r\n    [[NSUserDefaults standardUserDefaults] synchronize];\r\n}\r\n\r\n- (void)setOperatorDnsError {\r\n    [[NSUserDefaults standardUserDefaults] setObject:@(2) forKey:@\"HXDNSErrorTypeSet\"];\r\n    [[NSUserDefaults standardUserDefaults] synchronize];\r\n}\r\n\r\n- (void)clearDnsError {\r\n    [[NSUserDefaults standardUserDefaults] removeOb","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"ts","deepseek-chat-lite":"lts] setBool:!isOpen forKey:SC_AUTOLOGINPASSWORDERROR_KEY];","CodeQwen2.5-7B":"lts] setBool:!isOpen forKey:SC_AUTOLOGINPASSWORDERROR_KEY];\r","copilot":"BOOL isOpen = [[NSUserDefaults standardUserDefaults] boolForKey:@\"HX_TCPRequestInterruptDetect\"];\r\n    [[NSUserDefaults standardUserDefaults] setBool:!isOpen forKey:@\"HX_TCPRequestInterruptDetect\"];\r\n    [AMUIPublicProxy showTipAutoClose:[NSString stringWithFormat:@\"TCP请求中断检测:%@\",!isOpen?@\"开启\":@\"关闭\"]];\r\n"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary<NSNumber *, NSNumber *> *requestFrameIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的frameId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求frameId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 有明确frameId的直接返回，否则返回pageId\n- (int)getFrameId {\n    int frameId = [self.requestFrameIdDict thsNumberForKey:@(_pageId)].intValue;\n    if (frameId != 0) {\n        return frameId;\n    }\n    return _pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 判断当前页面对应的frameId，减少排障信息\n    int frameId = [self getFrameId];\n    NSString *msg;\n    if (_lastProtocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, protocolInfo.protocolId, protocolInfo.pageId];\n    } else if (protocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId];\n    } else {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId, protocolInfo.protocolId, protocolInfo.pageId];\n    }\n    [HXShowTipProxy showTip:msg clickHandler:^(UIAlertAction * _Nonnull action) {\n        if ([self ifSwitchPage]) { // 二次确认\n            _lastProtocolInfo = protocolInfo;\n        }\n    }];\n}\n\n#pragma mark - setter && getter\n\n- (void)setIsClose:(BOOL)isClose {\n    _isClose = isClose;\n}\n\n- (BOOL","infill":")\n\n/// 页面有对应的frameId，该页面请求的frameId必须与其相同","suffix":"，否则同一页面的请求会相互打断\n/// 不同的页面可能有相同的frameId，目前无法全部确认，仅把已知的列出\n- (NSDictionary<NSNumber *, NSNumber *> *)requestFrameIdDict {\n    if (!_requestFrameIdDict) {\n        _requestFrameIdDict = @{ @2790:@2210, //首页\n                                @2312:@2312, //大盘\n                                @2313:@2313, //板块\n                                @2383:@2383, //个股\n                                @2378:@2378, //港股\n                                @3225:@2378, //港股etf\n                                @2382:@2382, //美股\n                                @2386:@2382, //美股etf\n                                @2405:@2405, //期货期货综合\n                                @2406:@2406, //期货国内行情\n                                @2407:@2407, //期货国外行情\n                                @2501:@2501, //ETF\n                                @2269:@2442, //可转债\n                                @2205:@2267, //分时\n        };\n    }\n    return _requestFrameIdDict;\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":")isClose {\n    return _isClose;\n}","deepseek-chat-lite":")isClose {","CodeQwen2.5-7B":")isClose {","copilot":")\n\n/// 页面有对应的frameId，该页面请求的frameId必须与其相同"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary<NSNumber *, NSNumber *> *requestFrameIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的frameId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求frameId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 有明确frameId的直接返回，否则返回pageId\n- (int)getFrameId {\n    int frameId = [self.requestFrameIdDict thsNumberForKey:@(_pageId)].intValue;\n    if (frameId != 0) {\n        return frameId;\n    }\n    return _pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 判断当前页面对应的frameId，减少排障信息\n    int frameId = [self getFrameId];\n    NSString *msg;\n    if (_lastProtocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, protocolInfo.protocolId, protocolInfo.pageId];\n    } else if (protocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId];\n    } else {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId, protocolInfo.protocolId, protocolInfo.pageId];\n    }\n    [HXShowTipProxy showTip:msg clickHandler:^(UIAlertAction * _Nonnull action) {\n        if ([self ifSwitchPage]) { // 二次确认\n            _lastProtocolInfo = protocolInfo;\n        }\n    }];\n}\n\n#pragma mark - setter && getter\n\n- (void)setCl","infill":"ose:(BOOL)close {\n    \n}\n\n//","suffix":"/ 页面有对应的frameId，该页面请求的frameId必须与其相同，否则同一页面的请求会相互打断\n/// 不同的页面可能有相同的frameId，目前无法全部确认，仅把已知的列出\n- (NSDictionary<NSNumber *, NSNumber *> *)requestFrameIdDict {\n    if (!_requestFrameIdDict) {\n        _requestFrameIdDict = @{ @2790:@2210, //首页\n                                @2312:@2312, //大盘\n                                @2313:@2313, //板块\n                                @2383:@2383, //个股\n                                @2378:@2378, //港股\n                                @3225:@2378, //港股etf\n                                @2382:@2382, //美股\n                                @2386:@2382, //美股etf\n                                @2405:@2405, //期货期货综合\n                                @2406:@2406, //期货国内行情\n                                @2407:@2407, //期货国外行情\n                                @2501:@2501, //ETF\n                                @2269:@2442, //可转债\n                                @2205:@2267, //分时\n        };\n    }\n    return _requestFrameIdDict;\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"assistantId:(int)assistantId {\n    _assistantId = assistantId;\n}\n\n//","deepseek-chat-lite":"ientFrameIdDict:(NSDictionary<NSNumber *, NSNumber *> *)clientFrameIdDict {","CodeQwen2.5-7B":"ientId:(NSString *)clientId {","copilot":"ose:(BOOL)close {\n    \n}\n\n//"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary<NSNumber *, NSNumber *> *requestFrameIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的frameId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求frameId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 有明确frameId的直接返回，否则返回pageId\n- (int)getFrameId {\n    int frameId = [self.requestFrameIdDict thsNumberForKey:@(_pageId)].intValue;\n    if (frameId != 0) {\n        return frameId;\n    }\n    return _pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 判断当前页面对应的frameId，减少排障信息\n    int frameId = [self getFrameId];\n    NSString *msg;\n    if (_lastProtocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, protocolInfo.protocolId, protocolInfo.pageId];\n    } else if (protocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId];\n    } else {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId, protocolInfo.protocolId, protocolInfo.pageId];\n    }\n    [HXShowTipProxy showTip:msg clickHandler:^(UIAlertAction * _Nonnull action) {\n        if ([self ifSwitchPage]) { // 二次确认\n            _lastProtocolInfo = protocolInfo;\n        }\n    }];\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(BOOL)close {\n    _close = close;\n    [self reset];\n}\n\n- (void)reset {","infill":"    _pageId = 0;\n    _lastProtocolInfo ","suffix":"= nil;\n}\n\n/// 页面有对应的frameId，该页面请求的frameId必须与其相同，否则同一页面的请求会相互打断\n/// 不同的页面可能有相同的frameId，目前无法全部确认，仅把已知的列出\n- (NSDictionary<NSNumber *, NSNumber *> *)requestFrameIdDict {\n    if (!_requestFrameIdDict) {\n        _requestFrameIdDict = @{ @2790:@2210, //首页\n                                @2312:@2312, //大盘\n                                @2313:@2313, //板块\n                                @2383:@2383, //个股\n                                @2378:@2378, //港股\n                                @3225:@2378, //港股etf\n                                @2382:@2382, //美股\n                                @2386:@2382, //美股etf\n                                @2405:@2405, //期货期货综合\n                                @2406:@2406, //期货国内行情\n                                @2407:@2407, //期货国外行情\n                                @2501:@2501, //ETF\n                                @2269:@2442, //可转债\n                                @2205:@2267, //分时\n        };\n    }\n    return _requestFrameIdDict;\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"_lastProtocolInfo","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"    _pageId = 0;\n    _lastProtocolInfo "}},{"prefix":"}\n\n- (void)showFilter{\n    [WTAMLogFilterView show];\n    [self showLog];\n}\n#endif\n\n// HXAMlog实时日志\n- (void)showLog {\n    if (EQGetAppFrame() == NULL) {\n        return;\n    }\n    CEQEvent* pEvent = EQGetAppFrame()->GetNewEventObj();\n    pEvent->SetEventType(EQEVT_SELF);\n    CEQAffairAnalyzer* pAffairAnalyzer = EQGetAffairAnalyzer()    ;\n    if(pAffairAnalyzer) {\n        pAffairAnalyzer->LogAverageRequestTime();\n        pAffairAnalyzer->WriteLogRightNow();\n    }\n    pEvent->SetEventId(EQEVT_ID_SHOW_NETLOG);\n    EQGetAppFrame()->PostMsg(pEvent);\n}\n#ifdef _DEBUG\n- (void)autoShowLog {\n    [[HXLogViewController shared] changeAutoOpenLog];\n}\n#endif\n\n// HXAMlog日志列表\n- (void)goToHXAMLogList {\n    HXAMLogFileListViewController *listVC = [[HXAMLogFileListViewController alloc] init];\n    UIViewController* tabBarVC = (UIViewController*)[((AMUITabFm*)[AMUIFrameWork shareingUIFramework]) getCurStackController];\n    NavigationControllEx * nav = [[NavigationControllEx alloc] initWithRootViewController:listVC];\n    [tabBarVC presentViewController:nav animated:YES completion:nil];\n}\n\n/// 展示统一链路日志视图\n- (void)openHXECLogView {\n    [HXECService showTestView];\n}\n\n// 开启日志\n- (void)openLog {\n    g_bPringLog = YES;\n}\n\n// 关闭日志\n- (void)closeLog {\n    g_bPringLog = NO;\n}\n\n#ifdef _DEBUG\n// 显示本地缓存的流水数据\n- (void)showLocalCacheData {\n    liushuiScrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, Screen_height)];\n    [liushuiScrollView setBackgroundColor:[UIColor whiteColor]];\n    liushuiScrollView.contentSize = CGSizeMake(Screen_width, Screen_height);\n    [g_eqWindow addSubview:liushuiScrollView];\n    \n    //读取本地数据\n    WTAccountInfor *curAccount = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    NSDictionary *liushuiData = curAccount.isRZRQ ? [TJiaoYiRiSearchModel readRZRQChengJiaoLiushuiFromLocalWithAccount:curAccount.account] : [TJiaoYiRiSearchModel readChengJiaoLiushuiFromLocalWithAccount:curAccount.account];\n    \n    if ([liushuiData isKindOfClass:[NSDictionary class]]) {\n        NSString *saveDateStr = liushuiData[@\"date\"];\n        NSString *cacheTimeStr = [liushuiData thsStringForKey:@\"cacheTime\"];\n        NSString *queryIndexString = [liushuiData thsStringForKey:@\"34057\"];\n        NSArray *stockCodes = liushuiData[@2102];\n        NSArray *stockNames = liushuiData[@2103];\n        NSArray *dealNumbers = liushuiData[@2128];\n        NSArray *dealPervalue = liushuiData[@2129];\n        NSArray *dealTypes = liushuiData[@2109];\n        NSArray *dealValue = liushuiData[@2131];\n        NSArray *dealTimes = liushuiData[@2142];\n        NSArray *tradeMarkets = liushuiData[@2130];\n        NSArray *gdAccouunts = liushuiData[@2106];\n        NSArray *htNums = curAccount.isRZRQ ? liushuiData[@2135] : liushuiData[@2144];\n        NSArray *cjNums = curAccount.isRZRQ ? liushuiData[@2130] : liushuiData[@2145];\n        \n        UILabel *timeLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 40, Screen_width, 40)];\n        timeLabel.font = [UIFont systemFontOfSize:17.0];\n        timeLabel.textColor = [UIColor redColor];\n        timeLabel.text = [NSString stringWithFormat:@\"流水数据时间：%@--%@--%@\", saveDateStr, cacheTimeStr, queryIndexString];\n        [timeLabel setTextAlignment:NSTextAlignmentCenter];\n        [liushuiScrollView addSubview:timeLabel];\n        UILabel *shuzu = [[UILabel alloc] initWithFrame:CGRectMake(0, 85, Screen_width, 40)];\n        shuzu.font = [UIFont systemFontOfSize:17.0];\n        shuzu.textColor = [UIColor redColor];\n        shuzu.text = [NSString stringWithFormat:@\"流水数据一共%lu条\", (unsigned long)stockNames.count];\n        [shuzu setTextAlignment:NSTextAlignmentCenter];\n        [liushuiScrollView addSubview:shuzu];\n        if (stockCodes.count == stockNames.count\n            && stockCodes.count == dealNumbers.count\n            && stockCodes.count == dealPervalue.count\n            && stockCodes.count == dealTypes.count\n            && stockCodes.count == dealValue.count) {\n            liushuiScrollView.contentSize = CGSizeMake(Screen_width, 160 + stockCodes.count * 90);\n            for (int i = 0; i < stockCodes.count; i++) {\n                UILabel *stock = [[UILabel alloc] initWithFrame:CGRectMake(0, 130 + i * 90, Screen_width, 30)];\n                stock.font = [UIFont systemFontOfSize:15.0];\n                stock.textColor = [UIColor blackColor];\n                stock.text = [NSString stringWithFormat:@\"第 %i 条流水数据\", i + 1];\n                [stock setTextAlignment:NSTextAlignmentCenter];\n                [liushuiScrollView addSubview:stock];\n                UILabel *stockData = [[UILabel alloc] initWithFrame:CGRectMake(0, 160 + i * 90, Screen_width, 60)];\n                stockData.font = [UIFont systemFontOfSize:13.0];\n                stockData.textColor = [UIColor blackColor];\n                stockData.text = [NSString stringWithFormat:@\"操作: %@      代码: %@      名称: %@      交易价格: %@      交易数量: %@      交易总价: %@  成交时间：%@  交易市场：%@  股东账号：%@  合同编号：%@  成交编号：%@\", dealTypes[i], stockCodes[i], stockNames[i], dealPervalue[i], dealNumbers[i], dealValue[i], [dealTimes safetyObjectAtIndex:i], [tradeMarkets safetyObjectAtIndex:i], [gdAccouunts safetyObjectAtIndex:i], [htNums safetyObjectAtIndex:i], [cjNums safetyObjectAtIndex:i]];\n                [stockData setTextAlignment:NSTextAlignmentCenter];\n                stockData.numberOfLines = 0;\n                stockData.lineBreakMode = NSLineBreakByWordWrapping;\n                [liushuiScrollView addSubview:stockData];\n            }\n        }\n    }\n\n    UIButton* btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [btn setTitle:@\"返回\" forState:UIControlStateNormal];\n    [btn addTarget:self action:@selector(dismissLiushuiScrollView) forControlEvents:UIControlEventTouchDown];\n    btn.frame = CGRectMake(0, 0, 100, 100);\n    [liushuiScrollView addSubview:btn];\n}\n\n- (void)showBrokerBackUpDebugInfo {\n    if (EQGetAppFrame() == NULL) {\n        return;\n    }\n    brokerBackUpDebugInfo = [[UIView alloc] initWithFrame:CGRectMake(0, 0, Screen_width, Screen_height)];\n    [brokerBackUpDebugInfo setBackgroundColor:[UIColor whiteColor]];\n    [g_eqWindow addSubview:brokerBackUpDebugInfo];\n    \n    UIButton *btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [btn setTitle:@\"返回\" forState:UIControlStateNormal];\n    [btn addTarget:self action:@selector(removeBrokerBackUpDebugInfoView) forControlEvents:UIControlEventTouchDown];\n    btn.frame = CGRectMake(0, 20, Screen_width / 2, 40);\n    [brokerBackUpDebugInfo addSubview:btn];\n    UIButton *deleteBut = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    [deleteBut setTitle:@\"删除并返回\" forState:UIControlStateNormal];\n    [deleteBut addTarget:self action:@selector(deleteAndRemoveBrokerView) forControlEvents:UIControlEventTouchDown];\n    deleteBut.frame = CGRectMake(Screen_width / 2, 20, Screen_width / 2, 40);\n    [brokerBackUpDebugInfo addSubview:deleteBut];\n    \n    UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 60, Screen_width, Screen_height - 60)];\n    NSString *log = [HXBrokerInfoLogManager getStringFromFile];\n    UILabel *logLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 60, Screen_width, 15)];\n    logLabel.font = [UIFont systemFontOfSize:13];\n    [logLabel hx_autoAdaptionHeightWithText:log];\n    scrollView.contentSize = CGSizeMake(Screen_width, logLabel.frame.size.height + 60);\n    [scrollView setContentOffset:CGPointMake(0, logLabel.frame.size.height + 120 - Screen_height)];\n    [scrollView addSubview:logLabel];\n    [brokerBackUpDebugInfo addSubview:scrollView];\n}\n\n- (void)startToShowCDRLoginAlert {\n    BOOL isOpen = [[NSUserDefaults standardUserDefaults] boolForKey:JH_MODE_StartToShowCDRLoginAlert_KEY];\n    [[NSUserDefaults standardUserDefaults] setBool:!isOpen forKey:JH_MODE_StartToShowCDRLoginAlert_KEY];\n    [[NSUserDefaults standardUserDefaults] synchronize];\n}\n\n- (void)autoLoginPasswordError {\n    BOOL isOpen = [[NSUserDefaults standardUserDefaults] boolForKey:SC_AUTOLOGINPASSWORDERROR_KEY];\n    [[NSUserDefaults standardUserDefau","infill":"BOOL isCloseed = [HXSocketRequestHook shareInstance].isClosed;\r\n    [HXSocketRequestHook shareInstance].close = !isCloseed;\r\n    [AMUIPublicProxy showTipAutoClose:[NSString stringWithFormat:@\"TCP请求中断检测:%@\",!isCloseed?@\"开启\":@\"关闭\"]];\r\n}\r\n\r\n- (void)closeDataMonitor {\r\n    [DataMonitorManager enableDataMonit","suffix":"or:NO];\r\n    [DataMonitorManager clearData];\r\n    if (self.monitorController) {\r\n        [self.monitorController willMoveToParentViewController:nil];\r\n        [self.monitorController.view removeFromSuperview];\r\n        [self.monitorController removeFromParentViewController];\r\n        self.monitorController = nil;\r\n    }\r\n}\r\n\r\n- (void)removeBrokerBackUpDebugInfoView {\r\n    [brokerBackUpDebugInfo removeFromSuperview];\r\n}\r\n\r\n- (void)deleteAndRemoveBrokerView {\r\n    [HXBrokerInfoLogManager deleteLog];\r\n    [self removeBrokerBackUpDebugInfoView];\r\n}\r\n#endif\r\n\r\n- (void)removeNotificationView {\r\n    [localNotificationSetView removeFromSuperview];\r\n}\r\n\r\n- (void)receiveStuffData:(NSDictionary *)stuffData\r\n{\r\n    void* data = [[stuffData objectForKey:@\"dispatch_stuff_data\"] pointerValue];\r\n    CEQString16* text = ((CEQStuffTextStruct*)data)->GetStrText();\r\n    NSString* str = [NSString stringWithEQString16:text];\r\n    \r\n    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:str,@\"strKey\",@\"hq1\",@\"source\", nil];\r\n    [[NSNotificationCenter defaultCenter] postNotificationName:@\"debugMenu_receive\" object:nil userInfo:dic];\r\n    \r\n}\r\n\r\n- (void)dnsInfoViewClose {\r\n    _dnsInfoVC.delegate = nil;\r\n    _dnsInfoVC = nil;\r\n}\r\n\r\n#ifdef _DEBUG\r\n- (void)dismissLiushuiScrollView {\r\n    [liushuiScrollView removeFromSuperview];\r\n}\r\n\r\n- (void)clearCompetitorAPPStat {\r\n    [[NSUserDefaults standardUserDefaults] removeObjectForKey:kLastTimeKey];\r\n}\r\n#endif\r\n- (NSMutableArray *)backLocalURL:(NSString *)fileName originArray:(NSMutableArray *)originArray{\r\n    NSString *strSourcePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:fileName];\r\n    NSData *fileData = [[NSData alloc] initWithContentsOfFile:strSourcePath];\r\n    if (fileData == nil) {\r\n        return originArray;\r\n    }\r\n    NSDictionary *localUrlDic = [NSJSONSerialization JSONObjectWithData:fileData options:NSJSONReadingAllowFragments error:nil];\r\n    \r\n    [localUrlDic enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {\r\n        [originArray addObject:obj];\r\n    }];\r\n    return originArray;\r\n}\r\n\r\n- (void)showMessageTips:(NSString *)message {\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"\" message:message preferredStyle:UIAlertControllerStyleAlert];\r\n    UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n    }];\r\n    [alert addAction:confirmAction];\r\n    [vc presentViewController:alert animated:YES completion:nil];\r\n}\r\n\r\n#ifdef _DEBUG\r\n\r\n- (void)showChangeZiXuanScrollParams {\r\n    UIAlertController *contentAlert = [UIAlertController alertControllerWithTitle:@\"设置自选滑动参数\" message:nil preferredStyle:UIAlertControllerStyleAlert];\r\n    [contentAlert addAction:[UIAlertAction actionWithTitle:@\"clear\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {\r\n        if (contentAlert.textFields.count > 0) {\r\n            UITextField * textField = contentAlert.textFields[0];\r\n            textField.text = @\"\";\r\n            [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"zixuan_scroll_params\"];\r\n            [[NSUserDefaults standardUserDefaults] synchronize];\r\n        }\r\n    }]];\r\n    [contentAlert addAction:[UIAlertAction actionWithTitle:@\"add\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\r\n        for (int i = 0; i< contentAlert.textFields.count; i++) {\r\n            UITextField * textField = contentAlert.textFields[i];\r\n            if (i == 0 && textField.text.length > 0) {\r\n                [[NSUserDefaults standardUserDefaults] setObject:textField.text forKey:@\"zixuan_scroll_params\"];\r\n                [[NSUserDefaults standardUserDefaults] synchronize];\r\n            }\r\n        }\r\n    }]];\r\n    [contentAlert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {\r\n        textField.placeholder = @\"总屏2.5,max1200,min120,阈值屏0.5\";\r\n        NSString *str = [[NSUserDefaults standardUserDefaults] objectForKey:@\"zixuan_scroll_params\"];\r\n        if (str && [str isKindOfClass:[NSString class]] && str.length > 0) {\r\n            textField.text = str;\r\n        }\r\n    }];\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    [vc presentViewController:contentAlert animated:YES completion:nil];\r\n}\r\n\r\n- (void)inspectLocalURL {\r\n    NSMutableArray *localUrlList = [[NSMutableArray alloc] init];\r\n    localUrlList = [self backLocalURL:@\"localURL.dat\" originArray:localUrlList];\r\n    \r\n    NSDictionary *infoDic = [NSBundle mainBundle].infoDictionary;\r\n    NSArray *arr = [infoDic objectForKey:@\"LSApplicationQueriesSchemes\"];\r\n    for (NSInteger idex = 0; idex < localUrlList.count; idex++) {\r\n        for(NSInteger jdex = 47; jdex < arr.count; jdex++) {\r\n            NSString * Url = [DataTypeConvertor stringWithDictionary:localUrlList[idex] forKey:@\"URLInfo\"];\r\n            if([Url rangeOfString:[NSString stringWithFormat:@\"%@\",arr[jdex]]].length != 0) {\r\n                NSString * message = [NSString stringWithFormat:@\"本地localURL和配置文件冲突：（网页URL）%@和（配置信息）%@\",Url,arr[jdex]];\r\n                [self showMessageTips:message];\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    NSString * message = [NSString stringWithFormat:@\"无冲突\"];\r\n    [self showMessageTips:message];\r\n\r\n}\r\n\r\n- (NSArray <NSDictionary *>*)showChangeDNSError {\r\n    NSArray *d = @[@{kDebugMenuNodeNameKey:@\"设置同花顺DNS失败\",kDebugMenuNodeClickKey:@\"setThsDnsError\"},\r\n                @{kDebugMenuNodeNameKey:@\"设置运营商DNS失败\",kDebugMenuNodeClickKey:@\"setOperatorDnsError\"},\r\n                @{kDebugMenuNodeNameKey:@\"清除设置\",kDebugMenuNodeClickKey:@\"clearDnsError\"}];\r\n    NSString *errorString = @\"[dns状态]:\";\r\n    NSNumber *dnsState = [[NSUserDefaults standardUserDefaults] objectForKey:@\"HXDNSErrorTypeSet\"];\r\n    switch (dnsState.intValue) {\r\n        case 1:\r\n            errorString = [NSString stringWithFormat:@\"%@同花顺DNS失败\",errorString];\r\n            break;\r\n        case 2:\r\n            errorString = [NSString stringWithFormat:@\"%@运营商DNS失败\",errorString];\r\n            break;\r\n        case 0:\r\n        default:\r\n            errorString = [NSString stringWithFormat:@\"%@无error\",errorString];\r\n            break;\r\n    }\r\n    d.customIdenfitier = errorString;\r\n    return d;\r\n}\r\n\r\n- (void)setDomainResolverEnv {\r\n    NSString *key = @\"SC_domainResolverEnv\";\r\n    BOOL isTestEnv = [[NSUserDefaults standardUserDefaults] boolForKey:key];\r\n    NSString *message = @\"\";\r\n    if(isTestEnv) {\r\n        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@\"SC_domainResolverEnv\"];\r\n        message = @\"设置域名切换备份服务为生产环境，重启生效\";\r\n    }\r\n    else {\r\n        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@\"SC_domainResolverEnv\"];\r\n        message = @\"设置域名切换备份服务为测试环境，重启生效\";\r\n    }\r\n    UIAlertController *contentAlert = [UIAlertController alertControllerWithTitle:@\"设置\" message:message preferredStyle:UIAlertControllerStyleAlert];\r\n    UIViewController *vc = [[AMUIPublicProxy currentPageControl] controller];\r\n    [vc presentViewController:contentAlert animated:YES completion:nil];\r\n}\r\n\r\n- (void)setThsDnsError {\r\n    [[NSUserDefaults standardUserDefaults] setObject:@(1) forKey:@\"HXDNSErrorTypeSet\"];\r\n    [[NSUserDefaults standardUserDefaults] synchronize];\r\n}\r\n\r\n- (void)setOperatorDnsError {\r\n    [[NSUserDefaults standardUserDefaults] setObject:@(2) forKey:@\"HXDNSErrorTypeSet\"];\r\n    [[NSUserDefaults standardUserDefaults] synchronize];\r\n}\r\n\r\n- (void)clearDnsError {\r\n    [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"HXDNSErrorTypeSet\"];\r\n    [[NSUserDefaults standardUserDefaul","relevantFile":"","relevantFileList":[],"template":"objective-cpp","multiRes":{"hipilot":"lts] setBool:!isOpen f","deepseek-chat-lite":"lts] setBool:!isOpen forKey:SC_AUTOLOGINPASSWORDERROR_KEY];","CodeQwen2.5-7B":"lts] setBool:!isOpen forKey:SC_AUTOLOGINPASSWORDERROR_KEY];\r","copilot":"BOOL isCloseed = [HXSocketRequestHook shareInstance].isClosed;\r\n    [HXSocketRequestHook shareInstance].close = !isCloseed;\r\n    [AMUIPublicProxy showTipAutoClose:[NSString stringWithFormat:@\"TCP请求中断检测:%@\",!isCloseed?@\"开启\":@\"关闭\"]];\r\n}\r\n\r\n- (void)closeDataMonitor {\r\n    [DataMonitorManager enableDataMonit"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary<NSNumber *, NSNumber *> *requestFrameIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype","infill":")init {\n    if (self = [super init]) {\n        _close = [[NSUserDefaults standardUserDefaults] boolForKey:@\"HX_TCPRequestInterruptDetect\"];\n    }\n    return self;\n}\n\n- (void)monit","suffix":"orDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的frameId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求frameId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 有明确frameId的直接返回，否则返回pageId\n- (int)getFrameId {\n    int frameId = [self.requestFrameIdDict thsNumberForKey:@(_pageId)].intValue;\n    if (frameId != 0) {\n        return frameId;\n    }\n    return _pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 判断当前页面对应的frameId，减少排障信息\n    int frameId = [self getFrameId];\n    NSString *msg;\n    if (_lastProtocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, protocolInfo.protocolId, protocolInfo.pageId];\n    } else if (protocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId];\n    } else {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId, protocolInfo.protocolId, protocolInfo.pageId];\n    }\n    [HXShowTipProxy showTip:msg clickHandler:^(UIAlertAction * _Nonnull action) {\n        if ([self ifSwitchPage]) { // 二次确认\n            _lastProtocolInfo = protocolInfo;\n        }\n    }];\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(BOOL)close {\n    _close = close;\n    [[NSUserDefaults standardUserDefaults] setBool:close forKey:@\"HX_TCPRequestInterruptDetect\"];\n    if (close) {\n        \n    }\n    [self reset];\n}\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n/// 页面有对应的frameId，该页面请求的frameId必须与其相同，否则同一页面的请求会相互打断\n/// 不同的页面可能有相同的frameId，目前无法全部确认，仅把已知的列出\n- (NSDictionary<NSNumber *, NSNumber *> *)requestFrameIdDict {\n    if (!_requestFrameIdDict) {\n        _requestFrameIdDict = @{ @2790:@2210, //首页\n                                @2312:@2312, //大盘\n                                @2313:@2313, //板块\n                                @2383:@2383, //个股\n                                @2378:@2378, //港股\n                                @3225:@2378, //港股etf\n                                @2382:@2382, //美股\n                                @2386:@2382, //美股etf\n                                @2405:@2405, //期货期货综合\n                                @2406:@2406, //期货国内行情\n                                @2407:@2407, //期货国外行情\n                                @2501:@2501, //ETF\n                                @2269:@2442, //可转债\n                                @2205:@2267, //分时\n        };\n    }\n    return _requestFrameIdDict;\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"{HXSocketRequestHook} )init {\n    self = [super init];\n    if (self) {\n        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@\"HX_TCPRequestInterruptDetect\"];\n        _close = YES","deepseek-chat-lite":")init {","CodeQwen2.5-7B":")init {","copilot":")init {\n    if (self = [super init]) {\n        _close = [[NSUserDefaults standardUserDefaults] boolForKey:@\"HX_TCPRequestInterruptDetect\"];\n    }\n    return self;\n}\n\n- (void)monit"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary<NSNumber *, NSNumber *> *requestFrameIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _close = [[NSUserDefaults standardUserDefaults] boolForKey:@\"HX_TCPRequestInterruptDetect\"];\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的frameId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求frameId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 有明确frameId的直接返回，否则返回pageId\n- (int)getFrameId {\n    int frameId = [self.requestFrameIdDict thsNumberForKey:@(_pageId)].intValue;\n    if (frameId != 0) {\n        return frameId;\n    }\n    return _pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 判断当前页面对应的frameId，减少排障信息\n    int frameId = [self getFrameId];\n    NSString *msg;\n    if (_lastProtocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, protocolInfo.protocolId, protocolInfo.pageId];\n    } else if (protocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId];\n    } else {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId, protocolInfo.protocolId, protocolInfo.pageId];\n    }\n    [HXShowTipProxy showTip:msg clickHandler:^(UIAlertAction * _Nonnull action) {\n        if ([self ifSwitchPage]) { // 二次确认\n            _lastProtocolInfo = protocolInfo;\n        }\n    }];\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(BOOL)close {\n    _close = close;\n    [[NSUserDefaults standardUserDefaults] setBool:close forKey:@\"HX_TCPRequestInterruptDetect\"];\n    if (close) {\n        [self reset];\n    }","infill":"}\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n/// 页面有对应的fra","suffix":"meId，该页面请求的frameId必须与其相同，否则同一页面的请求会相互打断\n/// 不同的页面可能有相同的frameId，目前无法全部确认，仅把已知的列出\n- (NSDictionary<NSNumber *, NSNumber *> *)requestFrameIdDict {\n    if (!_requestFrameIdDict) {\n        _requestFrameIdDict = @{ @2790:@2210, //首页\n                                @2312:@2312, //大盘\n                                @2313:@2313, //板块\n                                @2383:@2383, //个股\n                                @2378:@2378, //港股\n                                @3225:@2378, //港股etf\n                                @2382:@2382, //美股\n                                @2386:@2382, //美股etf\n                                @2405:@2405, //期货期货综合\n                                @2406:@2406, //期货国内行情\n                                @2407:@2407, //期货国外行情\n                                @2501:@2501, //ETF\n                                @2269:@2442, //可转债\n                                @2205:@2267, //分时\n        };\n    }\n    return _requestFrameIdDict;\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"(void)reset;","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"}\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n/// 页面有对应的fra"}},{"prefix":"\n#import \"PositionViewController.h\"\n#import \"NewTradeView.h\"\n#import \"WTNotificationKeyDefine.h\"\n#import \"WTChiCangPGPZNoticeView.h\"\n#import <ThirdBase/Masonry.h>\n#import \"WTPGPZManager.h\"\n#import \"WTAccountDefine.h\"\n\n#import \"HXWTAccountManager.h\"\n#import \"HXUserInfo.h\"\n#import <HXCustomAlertView/HXCustomAlertView.h>\n#import <HXCustomAlertView/HXCustomAlertView_CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewConfiguration.h>\n#import <HXCustomAlertView/HXCustomAlertView+CustomView.h>\n#import <HXCustomAlertView/HXCustomAlertViewAnimation.h>\n#import \"WTPositionShareHandle.h\"\n#import \"CCChicangData.h\"\n#import \"AMUIPublicProxy+GuideTip.h\"\n#import \"WTTradeAutoNoteNoticeView.h\"\n#import \"WTTradeAutoNoteUserDefaultManager.h\"\n#import \"WTTradeNoteAutoViewModel.h\"\n#import \"HXGrayRelease.h\"\n#import \"HXGrayRelease+Register.h\"\n#import \"WTNotePageInfoDefine.h\"\n#import \"WTJCOrYJQCCollectUserBehaviorManager.h\"\n#import <HXBase/NSDictionary+Safety.h>\n#import \"WTEditShaiYiShaiChooseActionModel.h\"\n#import \"WTZiChanHiddenHelper.h\"\n#import <HXModuleServiceManage/WTTradeBusinessServiceProtocol.h>\n#import <StanderTableView/MultilpleTable.h>\n#import <WTTradeModule/WTPositionListEntry.h>\n\n@interface PositionViewController ()<WTChiCangPGPZNoticeViewDelegate>\n\n@property (nonatomic,weak) IBOutlet NewTradeView *tableView;\n@property (nonatomic,strong) WTChiCangPGPZNoticeView *pgpzNoticeView;//配股配债提示视图\n@property (nonatomic, strong) WTTradeAutoNoteNoticeView *noteNoticeView;\n@property (nonatomic, strong) WTPositionListEntry *postionEntry;\n@end\n\n@implementation PositionViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    if ([WTPositionListEntry isPositionListRefactorOpen]) {\n        [self.view addSubview:self.postionEntry.view];\n        [self.postionEntry.vi","infill":"ew mas_makeConstraints:^(MASConstraintMaker *make) {\n                    make.edges.equalTo(self.view);\n        // }];\n        \n  ","suffix":"      return;\n    }\n    \n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(gotoBuyPage) name:kWTGotoBuyGuideButtonClicked object:nil];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(wtChangeAccount) name:WT_SAMENATUREACCOUNT_EXCHANGE_SUCCESS object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(autoNoteSuccess) name:WT_TRADE_AUTO_NOTE_SUCCESS object:nil];\n\n    [_tableView setPageId:2605];\n    [_tableView onFinishInflate];\n    //配股配债功能提醒\n    [self handlePeiGuPeiZhaiAlertNotice];\n    [self creatNoteNoticeView];\n\n    [self dealGetShotScreenImage];\n}\n\n\n- (void)autoNoteSuccess {\n    [self creatNoteNoticeView];\n}\n\n/// 自动复盘完成通知\n- (void)creatNoteNoticeView {\n    if (![[HXGrayRelease shared] switchForKey:GrayReleaseTradeAutoStockLog]) {\n        return;\n    }\n    if (!_pgpzNoticeView || !_pgpzNoticeView.superview) {\n        if ([WTTradeAutoNoteUserDefaultManager judegeCurrentAccountShouldShowNotice]) {\n            [self.view addSubview:self.noteNoticeView];\n            [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                make.bottom.left.right.equalTo(self.view);\n                make.top.mas_equalTo(self.view).offset(36);\n            }];\n            [ClientUserBehaviorLog sendLogWithLogobject:JOINT(LOG_PAGE_NAME_NOTE_TRADE_TAB_COMPLETE_CLICK, @\"autobiji.complete.show\") actionType:OtherAction];\n        } else {\n            [self closeNoteNoticeView];\n        }\n    }\n}\n\n- (void)closeNoteNoticeView {\n    [self.noteNoticeView removeFromSuperview];\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(self.view).offset(0);\n    }];\n}\n\n//处理配股配债功能提醒\n- (void)handlePeiGuPeiZhaiAlertNotice{\n    if ([WTPGPZManager isSupportPGPZAlert]) {\n        WTPGPZManager *manager = [WTPGPZManager sharedManager];\n        __weak typeof(self) weakSelf = self;\n        [manager checkIfNeedShowPeiGuPeiZhaiTipWithCallback:^(NSArray<WTPeiGuModel *> *pgArray, NSArray<WTPeiZhaiModel *> *pzArray) {\n            if (pgArray == nil && pzArray == nil) {\n                return;\n            }\n            if(pgArray || pzArray){\n                NSString *tip = @\"\";\n                if (pgArray.count > 0 && pzArray.count > 0) {\n                    tip = HX_LOAD_TIPS(@\"持仓股配债，配股操作教学说明公告>>\");\n                }else if (pgArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配股操作教学说明公告>>\");\n                }else if (pzArray.count > 0){\n                    tip = HX_LOAD_TIPS(@\"持仓股配债操作教学说明公告>>\");\n                }else{\n                    return; //都没有时不做处理;\n                }\n                [weakSelf closeNoteNoticeView];\n                [weakSelf.view addSubview:weakSelf.pgpzNoticeView];\n                [weakSelf.pgpzNoticeView setTipText:tip];\n                CGFloat height = [WTChiCangPGPZNoticeView viewHeight];\n                [weakSelf.pgpzNoticeView mas_makeConstraints:^(MASConstraintMaker *make) {\n                    make.top.left.right.equalTo(weakSelf.view);\n                    make.height.mas_equalTo(height);\n                }];\n                [weakSelf.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n                    make.bottom.left.right.equalTo(weakSelf.view);\n                    make.top.mas_equalTo(weakSelf.view).offset(height);\n                }];\n            }\n        }];\n    }\n}\n\n- (WTChiCangPGPZNoticeView *)pgpzNoticeView{\n    if (!_pgpzNoticeView) {\n        _pgpzNoticeView = [[WTChiCangPGPZNoticeView alloc] init];\n        _pgpzNoticeView.delegate = self;\n    }\n    return _pgpzNoticeView;\n}\n\n#pragma mark notice view delegate\n- (void)hidePGPZNoticeView{\n    if (_pgpzNoticeView && _pgpzNoticeView.superview) {\n        self.pgpzNoticeView.hidden = YES;\n        [self.pgpzNoticeView removeFromSuperview];\n        self.pgpzNoticeView = nil;\n    }\n    [self.tableView mas_remakeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.left.right.equalTo(self.view);\n        make.top.mas_equalTo(0);\n    }];\n    [self creatNoteNoticeView];\n}\n\n#pragma mark 切换账号时\n- (void)wtChangeAccount{\n    //1. 先移除上个账号的持仓提醒视图\n    [self hidePGPZNoticeView];\n    //2. 检查当前账号是否需要显示\n    [self handlePeiGuPeiZhaiAlertNotice];\n    //3. 添加复盘成功通知\n    [self creatNoteNoticeView];\n}\n\n- (void)viewWillAppear:(BOOL)animated{\n    [super viewWillAppear:animated];\n    [_tableView setPageData:[NSMutableDictionary dictionaryWithDictionary:[self getParamsOfCurrentPage]]];\n    [_tableView combinationSellHandleParams:[self getParamsOfCurrentPage]];\n    [_tableView willAppear];\n    [self handleCombinationSellPageData];\n}\n\n- (void)viewDidAppear:(BOOL)animated{\n    [super viewDidAppear:animated];\n    [_tableView didAppear];\n    [self pageLoadFinish];\n    [self endMonitor];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [_tableView willDisappear];\n    [super viewWillDisappear:animated];\n}\n\n- (void)viewDidDisappear:(BOOL)animated{\n    [_tableView didDisappear];\n    [super viewDidDisappear:animated];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n- (void)refreshPage{\n    //    [_tradeAction requestData:NO];\n    [_tableView requestData:NO];\n}\n\n- (void)setTableViewRefreshBtn:(UIButton *)btn{\n    [_tableView setFreshBtn:btn];\n}\n\n- (void)gotoBuyPage {\n    [self.hxTabbarController selectViewControllerWithIdentity:[NSString stringWithFormat:@\"%d\", PAGE_WTXIADAN_BUY_ID]];\n}\n\n\n- (void)clearFenshiData{\n    [_tableView clearFenshiData];\n}\n\n- (void)shareChiCangNew:(CGPoint)point {\n    [self.tableView longPictureShare];\n\n    [ClientUserBehaviorLog sendLogWithLogobject:JOINT(WT_CBAS_OBJ_CHICANG_AGU, @\"ccfx\")];\n    WTAccountInfor *account = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n    if (!account.zicanData.isAddGuoZhaiProfit) {\n        [AMUIPublicProxy showTipAutoClose:@\"正在请求当日行情数据，请稍后再试\"];\n        return;\n    }\n   \n    [[WTPositionShareHandle weakShareInstance] chiCangShareNewWithZiCanData:account.zicanData point:point];\n}\n\n\n\n#pragma mark -加仓清仓模式-\n///是否是加仓或清仓模式\n- (BOOL)isYJQCModeOrJCMode {\n    return [self.tableView isYJQCModeOrJCMode];\n}\n///去除加仓或清仓模式\n- (void)closeTabView{\n    [WTJCOrYJQCCollectUserBehaviorManager sendLogWithJCOrYJQCStateLogObj:@\"close\" type:[self isYJQCModeOrJCMode] ? WTPositionPickerViewTypeJC : WTPositionPickerViewTypeYJQC isRZRQ:NO];\n    [self.tableView closeTabView];\n}\n\n/// 是否是从组合跳转过来并在一键清仓模式下\n- (BOOL)isCombinationYJQCMode {\n    return [self.tableView combinationYJQCMode];\n}\n\n#pragma mark - 跳转持仓获取截屏相关处理\n/// 笔记晒一晒跳转页面截图相关逻辑处理\n- (void)dealGetShotScreenImage{\n    WTEditShaiYiShaiChooseActionModel *chooseAction = [[self getParamsOfCurrentPage] objectForKey:WTEditShaiYiShaiChooseAction];\n    //持仓渲染完成回调\n    WTChiCangRenderFinishBlock renderFinishBlock = [[self getParamsOfCurrentPage] objectForKey:WTChiCangRenderFinishBlockParamsKey];\n    if (([chooseAction isKindOfClass:[WTEditShaiYiShaiChooseActionModel class]] &&\n         !chooseAction.isCreateImageFinish) || renderFinishBlock) {\n        //资产显示隐藏变更事件\n        [self bindZiChanHiddenEvent];\n        \n        //记录用户设置的显示隐藏状态\n        BOOL userSetHidden = [WTZiChanHiddenHelper nowHideStateWithScene:WTZiChanHiddenSceneChiCang];\n\n        if (chooseAction) {\n            //主动修改用户资产显示隐藏状态\n            [WTZiChanHiddenHelper saveHideMoneyState:!chooseAction.isShowMoney withScene:WTZiChanHiddenSceneChiCang];\n        }\n        \n        //强制发查持仓请求\n        WTAccountInfor *accountInfo = [[HXWTAccountManager sharedInstance] getCurAccountInfor];\n        accountInfo.zicanData.hasChicangSynchronised = NO;\n        [self refreshPage];\n\n        //数据获取并完成界面刷新\n        self.tableView.zijinAndChicangRequestAndRefreshFinished = ^{\n            if (chooseAction.renderFinsihBlock) {\n                chooseAction.renderFinsihBlock();\n            }\n            if (renderFinishBlock) {\n                renderFinishBlock();\n            }\n        };\n        if (chooseA","relevantFile":"","relevantFileList":[],"filePath":"PositionViewController.mm","template":"objective-cpp","multiRes":{"hipilot":"synchronizeWithViewController:self];\n  ","deepseek-chat-lite":"ew mas_makeConstraints:^(MASConstraintMaker *make) {","CodeQwen2.5-7B":"ew mas_makeConstraints:^(MASConstraintMaker *make) {","copilot":"ew mas_makeConstraints:^(MASConstraintMaker *make) {\n                    make.edges.equalTo(self.view);\n        // }];\n        \n  "}},{"prefix":"/*\n *  AMDataBase.cpp\n *  AMHexin\n *\n *  Created by ZG on 3/21/11.\n *  Copyright 2011 __MyCompanyName__. All rights reserved.\n *\n */\n\n#include \"DataBaseService.h\"\n#include <EQFile/EQFile.h>\n#include <EQFoundation/EQDataTypeDef.h>\n#include <AMPublic/Id_refrence.h>\n#include <AMPublic/AMLocalIdDef.h>\n#include <HXCore/EQMobileDbFile.h>\n#include <EQFoundation/EQThread.h>\n#include \"HXHistoryStock.h\"\n\n\nextern CEQString16* CopyNSStringToNewEQString(NSString* pNsStr);\nextern EQINT g_bUpdateVersion;\n\n#define KEYSPIRIT_DBNAME  \"hexin.db\"\n#define KEYSPIRIT_CBAS_DBNAME  \"cbas.db\"\n\nCDataBaseService::CDataBaseService()\n{\n\tm_bDbOpen = EQFALSE;\n\tm_bCbasDbOpen = EQFALSE;\n//\tm_pArraySelfStock = NULL;\n\tm_pBaseData = NULL;\n    m_pThread = NULL;\n\tm_nCbasCount = -1;\n    _historyStocks = nil;\n    readHistoryStocksFromFile();\n\tInitAndOpenDataBase();\n//\tInitSeflStock();\n}\n\n\nCDataBaseService::~CDataBaseService()\n{\n\tCloseDataBase();\n\tCloseCbasDataBase();\n\t//ReleaseSelfStock();\n    EQFreeVar(m_pBaseData);\n    EQFreeVar(m_pThread);\n\n}\n\nvoid CDataBaseService::readHistoryStocksFromFile()\n{\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *path = [documentsDirectory stringByAppendingPathComponent:@\"HistoryStocks.dat\"];\n    \n    // 更新到期权版本，把历史搜索删了\n    if (g_bUpdateVersion) {\n        _historyStocks = [[NSMutableArray alloc] initWithCapacity:0];\n        writeHistoryStocksToLocal();\n    }\n    \n    NSData *data = [NSData dataWithContentsOfFile:path];\n    if(data) {\n        _historyStocks = [NSKeyedUnarchiver unarchiveObjectWithData:data];\n    }\n    if(_historyStocks!= nil &&![_historyStocks isKindOfClass:[NSMutableArray class]]) {\n        _historyStocks = nil;\n    }\n    \n    if(!_historyStocks) {\n        _historyStocks = [[NSMutableArray alloc] initWithCapacity:0];\n    }\n}\n\nvoid CDataBaseService::writeHistoryStocksToLocal()\n{\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *path = [documentsDirectory stringByAppendingPathComponent:@\"HistoryStocks.dat\"];\n    [NSKeyedArchiver archiveRootObject:_historyStocks toFile:path];\n}\n\nEQBOOL CDataBaseService::InitAndOpenDataBase()\n{\n\tif(ConvertCbasDbToMain() || m_CbasDB.InitializeDatabase((char*)KEYSPIRIT_CBAS_DBNAME))\n\t{\n\t\tm_bCbasDbOpen = EQTRUE;\n\t}\n\telse\n\t{\n\t\tm_bCbasDbOpen = EQFALSE;\n\t}\n\t\n\tif(ConvertTempDbToMain() || m_DB.InitializeDatabase((char*)KEYSPIRIT_DBNAME))\n\t{\n\t\tm_bDbOpen = EQTRUE;\n\t\treturn EQTRUE;\n\t}\n\t\n\tEQTRACE((EQCHAR*)\"Open Database Error\");\n\tm_bDbOpen = EQFALSE;\n\treturn EQFALSE;\n}\n\nEQVOID CDataBaseService::CloseDataBase()\n{\n\tm_DB.CloseDataBase();\n}\n\nEQVOID CDataBaseService::CloseCbasDataBase()\n{\n\tm_CbasDB.CloseDataBase();\n}\n\n//\nEQBOOL CDataBaseService::IsCbasDataBaseOpen()\n{\n\treturn m_bCbasDbOpen;\n}\n\nEQBOOL CDataBaseService::ConvertTempDbToMain()\n{\n\t//EQTRACE((EQCHAR*)\"CEQKeySpirit::ConvertTempDbToMain-- close m_DB begin\");\n\tm_DB.CloseDataBase();\n\t//EQTRACE((EQCHAR*)\"CEQKeySpirit::ConvertTempDbToMain-- close m_DB end\");\t\n\tEQCHAR* pTmepDbName = (EQCHAR*)\"dbTemp.db\";\n\tCEQFile file;\n\tif(file.CopyFile(pTmepDbName,KEYSPIRIT_DBNAME))\n\t{\n\t\tEQTRACE((EQCHAR*)\"copy dbTemp.db success\");\n\t\tfile.Remove(pTmepDbName);\n\t}\t\n\treturn m_DB.InitializeDatabase((EQCHAR*)KEYSPIRIT_DBNAME);\n}\n\n\nEQBOOL CDataBaseService::ConvertCbasDbToMain()\n{\n\t//EQTRACE((EQCHAR*)\"CEQKeySpirit::ConvertCbasDbToMain-- close m_DB begin\");\n\tm_CbasDB.CloseDataBase();\n\t//EQTRACE((EQCHAR*)\"CEQKeySpirit::ConvertCbasDbToMain-- close m_DB end\");\t\n\tEQCHAR* pTmepDbName = (EQCHAR*)\"dbTemp.db\";\n\tCEQFile file;\n\tif(file.CopyFile(pTmepDbName,KEYSPIRIT_CBAS_DBNAME))\n\t{\n\t\tEQTRACE((EQCHAR*)\"copy dbTemp.db success\");\n\t\tfile.Remove(pTmepDbName);\n\t}\t\n\treturn m_CbasDB.InitializeDatabase((EQCHAR*)KEYSPIRIT_CBAS_DBNAME);\n}\n\nEQBOOL   CDataBaseService::GetStockMarket(CEQString8& code,CEQString8& strMarket)\n{\n\tif(GetStockInfo(code,m_stockList)) {\n\t\tstrMarket = m_stockList.m_strMarket;\n\t\treturn EQTRUE;\n\t}\n\t\n\treturn EQFALSE;\t\t\n}\n\nEQBOOL   CDataBaseService::GetStockName(CEQString8& code,CEQString16& strName)\n{\n    if(GetStockInfo(code,m_stockList))\n    {\n        strName = m_stockList.m_strName;\n        return EQTRUE;\n    }\n    \n    return EQFALSE;\n}\n\nEQBOOL   CDataBaseService::GetStockName(CEQString8& code,CEQString8& market,CEQString16& strName)\n{\n    if(GetStockInfo(code,market,m_stockList))\n    {\n        strName = m_stockList.m_strName;\n        return EQTRUE;\n    }\n    \n    return EQFALSE;\n}\n\nEQBOOL   CDataBaseService::GetShowCode(CEQString8& code,CEQString16& strCode)\n{\n    if (GetStockInfo(code, m_stockList)) {\n        strCode = m_stockList.m_strShowCode;\n        return EQTRUE;\n    }\n    return EQFALSE;\n}\n\nEQBOOL CDataBaseService::GetStockInfo(CEQString8& code,DbStockList &stocklist)\n{\n    #define FOREACHTABLE_COUNT     1\n    \n\tEQBOOL b = EQFALSE;\n#ifdef DATABASESERVICE_STOCKLIST\n\tstocklist.Print();\n#endif\n\tif(stocklist.m_strCode == code)\n\t{\n\t\treturn EQTRUE;\n\t}\n\t\n\t\n\tCEQString8 strSql;\n\t//strSql.Format(\"SELECT * FROM %s WHERE code=\\\"%s\\\" GROUP BY code ORDER BY frequency DESC , market_order DESC, market ASC limit 1\", \"stocklist\", code.Ptr());//保持和搜索页面的查询字段一致，从后往前找，目的：即使出现两条相同的，后加的认为更新\n\t\n    /**********************modify by zhoubingquan 2014-5.21*********************/\n    //数据库表被拆分  需要 遍历4张表查找 股票代码\n    \n    strSql.Format(\"SELECT * FROM %s WHERE code=\\\"%s\\\"\", \"hx_stocklist\", code.Ptr());\n\tCEQStatement* pNewStatement = new CEQStatement();\n\tif(pNewStatement != NULL)\n\t{\n\t\tpNewStatement->InitWithDatabase(&m_DB);\n\t\t\n\t\tm_stockList.Empty();\n        \n        for (int i = 0; i < FOREACHTABLE_COUNT ; i++)\n        {\n            pNewStatement->Query((EQCHAR*)strSql.Ptr());\n            if(pNewStatement->NextResult() == EQ_SQL_RESULTS_HAS_NEXT_ROW)\n            {\n                pNewStatement->GetRecordContextOnCol(0,  m_stockList.m_strId);\n                pNewStatement->GetRecordContextOnCol(1,  m_stockList.m_strCode);\n                pNewStatement->GetRecordContextOnCol(2,  m_stockList.m_strName);\n                pNewStatement->GetRecordContextOnCol(3,  m_stockList.m_strPinYin);\n                pNewStatement->GetRecordContextOnCol(4,  m_stockList.m_strMarket);\n                pNewStatement->GetRecordContextOnCol(5,  m_stockList.m_strStar);\n                pNewStatement->GetRecordContextOnCol(6,  m_stockList.m_strFrequency);\n                pNewStatement->GetRecordContextOnCol(7,  m_stockList.m_strMarketOrder);\n                pNewStatement->GetRecordContextOnCol(8,  m_stockList.m_strShortKey);\n                pNewStatement->GetRecordContextOnCol(9,  m_stockList.m_strCodeKey);\n                pNewStatement->GetRecordContextOnCol(10, m_stockList.m_strShowCode);\n#ifdef DATABASESERVICE_STOCKLIST\n                m_stockList.Print();\n#endif\n                b = EQTRUE;\n                break;\n            }\n            \n//            switch (i) {\n//                case 0:\n//                {\n//                    strSql.Format(\"SELECT * FROM %s WHERE code=\\\"%s\\\"\", \"Otherstocklist\", code.Ptr());\n//                } break;\n//                case 1 :\n//                {\n//                    strSql.Format(\"SELECT * FROM %s WHERE code=\\\"%s\\\"\", \"HKstocklist\", code.Ptr());\n//                } break;\n//                case 2 :\n//                {\n//                    strSql.Format(\"SELECT * FROM %s WHERE code=\\\"%s\\\"\", \"USAstocklist\", code.Ptr());\n//                } break;\n//                default:\n//                    break;\n//            }\n//\n        }\n        \n\t\tpNewStatement->Finalize();\n\t\tEQFreeVar(pNewStatement);\n\t}\n    \n\t/*******************************end modify****************************************/\\","infill":" : [NSString stringWithFormat:@\"%@\", stock.market];\n        \n        NSString *extend = stock.extend;\n        if","suffix":" (extend == nil) {\n            extend = @\" \";\n        }\n        \n        NSString *label = stock.label;\n        if (label == nil) {\n            label = @\" \";\n        }\n        \n        NSString *showCode = stock.showCode;\n        if (showCode == nil) {\n            showCode = code;\n        }\n        \n        if(code == nil || [code length] == 0||name == nil || [name length] == 0 || market == nil || [market length] == 0) {\n            continue;\n        }\n        CEQArrayPtr<CEQString16>* pArrayString = new CEQArrayPtr<CEQString16>;\n        CEQString16 *strCode16 = CopyNSStringToNewEQString(code);\n        CEQString16 *strName16 = CopyNSStringToNewEQString(name);\n        CEQString16 *strPinyin16 = CopyNSStringToNewEQString(pinyin);\n        CEQString16 *strMarket16 = CopyNSStringToNewEQString(market);\n        CEQString16 *strExtend16 = CopyNSStringToNewEQString(extend);\n        CEQString16 *strLabel16 = CopyNSStringToNewEQString(label);\n        CEQString16 *strShowCode16 = CopyNSStringToNewEQString(showCode);\n        \n        pArrayString->Add(strName16);\n        pArrayString->Add(strCode16);\n        pArrayString->Add(strPinyin16);\n        pArrayString->Add(strMarket16);\n        pArrayString->Add(strExtend16);\n        pArrayString->Add(strLabel16);\n        pArrayString->Add(strShowCode16);\n        \n        hashTable.AddQueryDataOne(pArrayString);\n        pArrayString->DestroyAll();\n        delete pArrayString;\n    }\n    return EQTRUE;\n}\n\nvoid CDataBaseService::EmptyStockList()\n{\n    m_stockList.Empty();\n}\n\n//通过sql语句查询需要的hashTable数据集\n//默认为STOCKLIST_COUNT条数\n//返回值为数据的行数,如果小于0是错误值\n\nEQINT  CDataBaseService::QuerySQL(CEQString8& SQL,CSqlQueryData& hashTable,EQINT nLimit)\n{\n    //主动限制条数\n    FixSQLwithLimit(SQL,nLimit);\n    \n    hashTable.RemoveAll();\n    CEQStatement* pNewStatement = new CEQStatement();\n    //\n    //EQINT nError = -1;\n    EQINT nSqlRowCount = 0;\n    EQINT nSqlColCount = -1;\n    CEQString16 strHashKey;\n    if(pNewStatement != NULL)\n    {\n        pNewStatement->InitWithDatabase(&m_DB);\n        pNewStatement->Query((EQCHAR*)SQL.Ptr());\n        //nSqlRowCount = pNewStatement->GetRecordCount();\n        nSqlColCount = pNewStatement->GetColCount();\n        \n        //        if(nSqlRowCount < 0)\n        //        {\n        //            delete pNewStatement;\n        //            return nError;\n        //        }\n        BOOL bCreateCol = FALSE;\n        \n        while(pNewStatement->NextResult() == EQ_SQL_RESULTS_HAS_NEXT_ROW)\n        {\n            if(!bCreateCol)\n            {\n                bCreateCol = TRUE;\n                for (int i=0; i<nSqlColCount; i++)\n                {\n                    strHashKey.Empty();\n                    if(pNewStatement->GetFiledOnCol(i, strHashKey))\n                    {\n                        //strHashKey.Print();\n                        hashTable.AddFieldName(&strHashKey);\n                    }\n                }\n            }\n            \n            CEQArrayPtr<CEQString16>* pArrayString = new CEQArrayPtr<CEQString16>;\n            for (int j=0; j<nSqlColCount; j++)\n            {\n                CEQString16 *str16 = new CEQString16;\n                EQBOOL bContext = pNewStatement->GetRecordContextOnCol(j, *str16);\n                if(bContext)\n                {\n                    //str16->Print();\n                    pArrayString->Add(str16);\n                } else {\n                    NSString *str = @\" \";\n                    str16 = CopyNSStringToNewEQString(str);\n                    pArrayString->Add(str16);\n                }\n            }\n            hashTable.AddQueryDataOne(pArrayString);\n            pArrayString->DestroyAll();\n            delete pArrayString;\n            nSqlRowCount++;\n        }\n    }\n    \n    delete pNewStatement;\n    return nSqlRowCount;\n}\n\nEQVOID CDataBaseService::FixSQLwithLimit(CEQString8& str8,EQINT nLimit)\n{\n    // 这里改变了入参str8的大小写，导致表名为有大写的时候不能匹配，现在用临时变量来判断\n    CEQString8 strTmp = str8;\n    EQUCHAR *pLimit = (EQUCHAR*)\"limit\";\n    EQUCHAR *pSelect = (EQUCHAR*)\"select\";\n    strTmp.LowerCase();\n    if(strTmp.Find(pLimit,5) == -1 && strTmp.Find(pSelect,6) != -1)\n    {\n        CEQString8 strLimit;\n        strLimit.Format(\" limit %d\", nLimit);\n        str8.Append(strLimit);\n    }\n}\n\nEQBOOL CDataBaseService::InsertHistroySearch (HXHistoryStock *stock) {\n    if (stock == nil) {\n        return EQFALSE;\n    }\n    \n    //删除存在的\n    for(HXHistoryStock *tempStock in _historyStocks) {\n        if([tempStock.code isEqualToString:stock.code] && tempStock.market == stock.market) {\n            [_historyStocks removeObject:tempStock];\n            break;\n        }\n    }\n    \n    //只保留最近10只股票\n    //jira-6811:搜索记录改为可以记录50条\n    if([_historyStocks count] >= 50) {\n        [_historyStocks removeLastObject];\n    }\n    \n    [_historyStocks insertObject:stock atIndex:0];\n    return EQTRUE;\n}\n\n/**\n *清除搜索历史\n *update stocklist set frequency = 0 where frequency > 0\n */\nEQBOOL CDataBaseService::ClearSearchHistoryList()\n{\n    [_historyStocks removeAllObjects];\n    return EQTRUE;\n}\n","relevantFile":"","relevantFileList":[],"filePath":"DataBaseService.mm","template":"objective-cpp","multiRes":{"hipilot":"/\n    \n    return b;\n}\n\nEQBOOL CDataBaseService::GetStockList(CEQString8& market,CEQString8& strQueryStr,CSqlQueryData& hashTable)\n{\n    //通过market来查询对应的股票列","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":" : [NSString stringWithFormat:@\"%@\", stock.market];\n        \n        NSString *extend = stock.extend;\n        if"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary<NSNumber *, NSNumber *> *requestFrameIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _close = [[NSUserDefaults standardUserDefaults] boolForKey:@\"HX_TCPRequestInterruptDetect\"];\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (self.isClosed || ![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的frameId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求frameId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 有明确frameId的直接返回，否则返回pageId\n- (int)getFrameId {\n    int frameId = [self.requestFrameIdDict thsNumberForKey:@(_pageId)].intValue;\n    if (frameId != 0) {\n        return frameId;\n    }\n    return _pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 使用UIAler","infill":"tController提示\n    UIAlea\n   ","suffix":" \n\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(BOOL)close {\n    _close = close;\n    [[NSUserDefaults standardUserDefaults] setBool:close forKey:@\"HX_TCPRequestInterruptDetect\"];\n    if (close) {\n        [self reset];\n    }\n}\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n/// 页面有对应的frameId，该页面请求的frameId必须与其相同，否则同一页面的请求会相互打断\n/// 不同的页面可能有相同的frameId，目前无法全部确认，仅把已知的列出\n- (NSDictionary<NSNumber *, NSNumber *> *)requestFrameIdDict {\n    if (!_requestFrameIdDict) {\n        _requestFrameIdDict = @{ @2790:@2210, //首页\n                                @2312:@2312, //大盘\n                                @2313:@2313, //板块\n                                @2383:@2383, //个股\n                                @2378:@2378, //港股\n                                @3225:@2378, //港股etf\n                                @2382:@2382, //美股\n                                @2386:@2382, //美股etf\n                                @2405:@2405, //期货期货综合\n                                @2406:@2406, //期货国内行情\n                                @2407:@2407, //期货国外行情\n                                @2501:@2501, //ETF\n                                @2269:@2442, //可转债\n                                @2205:@2267, //分时\n        };\n    }\n    return _requestFrameIdDict;\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"t可以准确的展示，但是curry对其有阈值限制，且自身带有弹窗，目前还没找到很好的解决方案","deepseek-chat-lite":"tController提示","CodeQwen2.5-7B":"tController提示","copilot":"tController提示\n    UIAlea\n   "}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary<NSNumber *, NSNumber *> *requestFrameIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _close = [[NSUserDefaults standardUserDefaults] boolForKey:@\"HX_TCPRequestInterruptDetect\"];\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (self.isClosed || ![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的frameId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求frameId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 有明确frameId的直接返回，否则返回pageId\n- (int)getFrameId {\n    int frameId = [self.requestFrameIdDict thsNumberForKey:@(_pageId)].intValue;\n    if (frameId != 0) {\n        return frameId;\n    }\n    return _pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 使用UIAlertController提示","infill":"UIAlertController *alert = []\n    \n\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(BOOL)close {\n    _close = close;\n    [[NSUserDef","suffix":"aults standardUserDefaults] setBool:close forKey:@\"HX_TCPRequestInterruptDetect\"];\n    if (close) {\n        [self reset];\n    }\n}\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n/// 页面有对应的frameId，该页面请求的frameId必须与其相同，否则同一页面的请求会相互打断\n/// 不同的页面可能有相同的frameId，目前无法全部确认，仅把已知的列出\n- (NSDictionary<NSNumber *, NSNumber *> *)requestFrameIdDict {\n    if (!_requestFrameIdDict) {\n        _requestFrameIdDict = @{ @2790:@2210, //首页\n                                @2312:@2312, //大盘\n                                @2313:@2313, //板块\n                                @2383:@2383, //个股\n                                @2378:@2378, //港股\n                                @3225:@2378, //港股etf\n                                @2382:@2382, //美股\n                                @2386:@2382, //美股etf\n                                @2405:@2405, //期货期货综合\n                                @2406:@2406, //期货国内行情\n                                @2407:@2407, //期货国外行情\n                                @2501:@2501, //ETF\n                                @2269:@2442, //可转债\n                                @2205:@2267, //分时\n        };\n    }\n    return _requestFrameIdDict;\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"，不使用自定义的showTip方法，框架层已经做好了提示处理\n    if (_close) {\n        return;\n    }\n    \n    [HXShowTipProxy showTipWithRequestInfo:protocolInfo];\n    \n    [[NSUserDef","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"UIAlertController *alert = []\n    \n\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(BOOL)close {\n    _close = close;\n    [[NSUserDef"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary<NSNumber *, NSNumber *> *requestFrameIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _close = [[NSUserDefaults standardUserDefaults] boolForKey:@\"HX_TCPRequestInterruptDetect\"];\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (self.isClosed || ![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的frameId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求frameId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 有明确frameId的直接返回，否则返回pageId\n- (int)getFrameId {\n    int frameId = [self.requestFrameIdDict thsNumberForKey:@(_pageId)].intValue;\n    if (frameId != 0) {\n        return frameId;\n    }\n    return _pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 使用UIAlertController提示\n    // 判断当前页面对应的frameId\n    int frameId = [self getFrameId];\n    NSString *msg;\n    if (_lastProtocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, protocolInfo.protocolId, protocolInfo.pageId];\n    } else if (protocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId];\n    } else {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId, protocolInfo.protocolId, protocolInfo.pageId];\n    }\n    [HXShowTipProxy showTip:msg clickHandler:^(UIAlertAction * _Nonnull action) {\n        if ([self ifSwitchPage]) { // 二次确认\n            _lastProtocolInfo = protocolInfo;\n        }\n    }];\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"冲突！！！\" message:msg preferredStyle:UIAl","infill":"ertControllerStyleAlert];\n    UIAlertAction *noMoreAction = [UIAlertAction]\n    \n\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(BOOL","suffix":")close {\n    _close = close;\n    [[NSUserDefaults standardUserDefaults] setBool:close forKey:@\"HX_TCPRequestInterruptDetect\"];\n    if (close) {\n        [self reset];\n    }\n}\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n/// 页面有对应的frameId，该页面请求的frameId必须与其相同，否则同一页面的请求会相互打断\n/// 不同的页面可能有相同的frameId，目前无法全部确认，仅把已知的列出\n- (NSDictionary<NSNumber *, NSNumber *> *)requestFrameIdDict {\n    if (!_requestFrameIdDict) {\n        _requestFrameIdDict = @{ @2790:@2210, //首页\n                                @2312:@2312, //大盘\n                                @2313:@2313, //板块\n                                @2383:@2383, //个股\n                                @2378:@2378, //港股\n                                @3225:@2378, //港股etf\n                                @2382:@2382, //美股\n                                @2386:@2382, //美股etf\n                                @2405:@2405, //期货期货综合\n                                @2406:@2406, //期货国内行情\n                                @2407:@2407, //期货国外行情\n                                @2501:@2501, //ETF\n                                @2269:@2442, //可转债\n                                @2205:@2267, //分时\n        };\n    }\n    return _requestFrameIdDict;\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"AlertControllerStyleAlert","deepseek-chat-lite":"ertControllerStyleAlert];","CodeQwen2.5-7B":"ertControllerStyleAlert];","copilot":"ertControllerStyleAlert];\n    UIAlertAction *noMoreAction = [UIAlertAction]\n    \n\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(BOOL"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary<NSNumber *, NSNumber *> *requestFrameIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _close = [[NSUserDefaults standardUserDefaults] boolForKey:@\"HX_TCPRequestInterruptDetect\"];\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (self.isClosed || ![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的frameId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求frameId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 有明确frameId的直接返回，否则返回pageId\n- (int)getFrameId {\n    int frameId = [self.requestFrameIdDict thsNumberForKey:@(_pageId)].intValue;\n    if (frameId != 0) {\n        return frameId;\n    }\n    return _pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 使用UIAlertController提示\n    // 判断当前页面对应的frameId\n    int frameId = [self getFrameId];\n    NSString *msg;\n    if (_lastProtocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, protocolInfo.protocolId, protocolInfo.pageId];\n    } else if (protocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId];\n    } else {\n        msg = [NSString stringWithFormat:@\"行情段请求冲突\\r\\n当前页面，pageId: %d，frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId, protocolInfo.protocolId, protocolInfo.pageId];\n    }\n    [HXShowTipProxy showTip:msg clickHandler:^(UIAlertAction * _Nonnull action) {\n        if ([self ifSwitchPage]) { // 二次确认\n            _lastProtocolInfo = protocolInfo;\n        }\n    }];\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"冲突！！！\" message:msg preferredStyle:UIAlertControllerStyleAlert];\n    // UIAlertAction *noMoreAction = [UIAlertActi","infill":"on actionWithTitle:@\"不再提示\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n    UIAlertAction *noMoreAction = [UIAlertAction\n        self.close = YES;\n    }","suffix":"];\n    \n\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(BOOL)close {\n    _close = close;\n    [[NSUserDefaults standardUserDefaults] setBool:close forKey:@\"HX_TCPRequestInterruptDetect\"];\n    if (close) {\n        [self reset];\n    }\n}\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n/// 页面有对应的frameId，该页面请求的frameId必须与其相同，否则同一页面的请求会相互打断\n/// 不同的页面可能有相同的frameId，目前无法全部确认，仅把已知的列出\n- (NSDictionary<NSNumber *, NSNumber *> *)requestFrameIdDict {\n    if (!_requestFrameIdDict) {\n        _requestFrameIdDict = @{ @2790:@2210, //首页\n                                @2312:@2312, //大盘\n                                @2313:@2313, //板块\n                                @2383:@2383, //个股\n                                @2378:@2378, //港股\n                                @3225:@2378, //港股etf\n                                @2382:@2382, //美股\n                                @2386:@2382, //美股etf\n                                @2405:@2405, //期货期货综合\n                                @2406:@2406, //期货国内行情\n                                @2407:@2407, //期货国外行情\n                                @2501:@2501, //ETF\n                                @2269:@2442, //可转债\n                                @2205:@2267, //分时\n        };\n    }\n    return _requestFrameIdDict;\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"on alertActionWithTitle:@\"好的\" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {\n        \n    //}","deepseek-chat-lite":"on actionWithTitle:@\"不再提示\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {","CodeQwen2.5-7B":"on actionWithTitle:@\"不再提示\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {","copilot":"on actionWithTitle:@\"不再提示\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n    UIAlertAction *noMoreAction = [UIAlertAction\n        self.close = YES;\n    }"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary<NSNumber *, NSNumber *> *requestFrameIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _close = [[NSUserDefaults standardUserDefaults] boolForKey:@\"HX_TCPRequestInterruptDetect\"];\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (self.isClosed || ![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的frameId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求frameId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 有明确frameId的直接返回，否则返回pageId\n- (int)getFrameId {\n    int frameId = [self.requestFrameIdDict thsNumberForKey:@(_pageId)].intValue;\n    if (frameId != 0) {\n        return frameId;\n    }\n    return _pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 使用UIAlertController提示\n    // 判断当前页面对应的frameId\n    int frameId = [self getFrameId];\n    NSString *msg;\n    if (_lastProtocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, protocolInfo.protocolId, protocolInfo.pageId];\n    } else if (protocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId];\n    } else {\n        msg = [NSString stringWithFormat:@\"当前页面，pageId: %d，frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId, protocolInfo.protocolId, protocolInfo.pageId];\n    }\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"TCP行情段请求冲突！！！\" message:msg preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *noMoreAction = [UIAlertAction actionWithTitle:@\"不再提示\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        self.close = YES;\n    }];\n    UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        if ([self ifSwitchPage]) { // 二次确认\n            self.lastProtocolInfo = protocolInfo;\n        }\n    }];\n    [a","infill":"lert addAction:noMoreAction];\n    [","suffix":"alert addAction:confirmAction];\n    // [[AMUIPublicProxy getCurHXBaseViewController] presentViewController:alert animated:YES completion:nil];\n    [[AMUIPublicProxy getCurHXBaseViewController\n\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(BOOL)close {\n    _close = close;\n    [[NSUserDefaults standardUserDefaults] setBool:close forKey:@\"HX_TCPRequestInterruptDetect\"];\n    if (close) {\n        [self reset];\n    }\n}\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n/// 页面有对应的frameId，该页面请求的frameId必须与其相同，否则同一页面的请求会相互打断\n/// 不同的页面可能有相同的frameId，目前无法全部确认，仅把已知的列出\n- (NSDictionary<NSNumber *, NSNumber *> *)requestFrameIdDict {\n    if (!_requestFrameIdDict) {\n        _requestFrameIdDict = @{ @2790:@2210, //首页\n                                @2312:@2312, //大盘\n                                @2313:@2313, //板块\n                                @2383:@2383, //个股\n                                @2378:@2378, //港股\n                                @3225:@2378, //港股etf\n                                @2382:@2382, //美股\n                                @2386:@2382, //美股etf\n                                @2405:@2405, //期货期货综合\n                                @2406:@2406, //期货国内行情\n                                @2407:@2407, //期货国外行情\n                                @2501:@2501, //ETF\n                                @2269:@2442, //可转债\n                                @2205:@2267, //分时\n        };\n    }\n    return _requestFrameIdDict;\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"lert addAction:noMoreAction];\n    [","deepseek-chat-lite":"lert addAction:noMoreAction];","CodeQwen2.5-7B":"lert addAction:noMoreAction];","copilot":"lert addAction:noMoreAction];\n    ["}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary<NSNumber *, NSNumber *> *requestFrameIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _close = [[NSUserDefaults standardUserDefaults] boolForKey:@\"HX_TCPRequestInterruptDetect\"];\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (self.isClosed || ![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的frameId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求frameId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 有明确frameId的直接返回，否则返回pageId\n- (int)getFrameId {\n    int frameId = [self.requestFrameIdDict thsNumberForKey:@(_pageId)].intValue;\n    if (frameId != 0) {\n        return frameId;\n    }\n    return _pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 使用UIAlertController提示\n    // 判断当前页面对应的frameId\n    int frameId = [self getFrameId];\n    NSString *msg;\n    if (_lastProtocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, protocolInfo.protocolId, protocolInfo.pageId];\n    } else if (protocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId];\n    } else {\n        msg = [NSString stringWithFormat:@\"当前页面，pageId: %d，frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId, protocolInfo.protocolId, protocolInfo.pageId];\n    }\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"TCP行情段请求冲突！！！\" message:msg preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *noMoreAction = [UIAlertAction actionWithTitle:@\"不再提示\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        self.close = YES;\n    }];\n    UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        if ([self ifSwitchPage]) { // 二次确认\n            self.lastProtocolInfo = protocolInfo;\n        }\n    }];\n    [alert addAction:noMoreAction];","infill":"[alert addAction:confirmAction];\n    // [[AMUIPublicProxy getCurHXBaseViewController] presentViewController:alert animated:YES completion:n","suffix":"il];\n    [[AMUIPublicProxy getCurHXBaseViewController\n\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(BOOL)close {\n    _close = close;\n    [[NSUserDefaults standardUserDefaults] setBool:close forKey:@\"HX_TCPRequestInterruptDetect\"];\n    if (close) {\n        [self reset];\n    }\n}\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n/// 页面有对应的frameId，该页面请求的frameId必须与其相同，否则同一页面的请求会相互打断\n/// 不同的页面可能有相同的frameId，目前无法全部确认，仅把已知的列出\n- (NSDictionary<NSNumber *, NSNumber *> *)requestFrameIdDict {\n    if (!_requestFrameIdDict) {\n        _requestFrameIdDict = @{ @2790:@2210, //首页\n                                @2312:@2312, //大盘\n                                @2313:@2313, //板块\n                                @2383:@2383, //个股\n                                @2378:@2378, //港股\n                                @3225:@2378, //港股etf\n                                @2382:@2382, //美股\n                                @2386:@2382, //美股etf\n                                @2405:@2405, //期货期货综合\n                                @2406:@2406, //期货国内行情\n                                @2407:@2407, //期货国外行情\n                                @2501:@2501, //ETF\n                                @2269:@2442, //可转债\n                                @2205:@2267, //分时\n        };\n    }\n    return _requestFrameIdDict;\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"[alert addAction:confirmAction];\n    [[AMUIPublicProxy getCurHXBaseViewController navigationController] presentViewController:alert animated:YES completion:n","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"[alert addAction:confirmAction];\n    // [[AMUIPublicProxy getCurHXBaseViewController] presentViewController:alert animated:YES completion:n"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary<NSNumber *, NSNumber *> *requestFrameIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _close = [[NSUserDefaults standardUserDefaults] boolForKey:@\"HX_TCPRequestInterruptDetect\"];\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (self.isClosed || ![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的frameId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求frameId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 有明确frameId的直接返回，否则返回pageId\n- (int)getFrameId {\n    int frameId = [self.requestFrameIdDict thsNumberForKey:@(_pageId)].intValue;\n    if (frameId != 0) {\n        return frameId;\n    }\n    return _pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 使用UIAlertController提示\n    // 判断当前页面对应的frameId\n    int frameId = [self getFrameId];\n    NSString *msg;\n    if (_lastProtocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, protocolInfo.protocolId, protocolInfo.pageId];\n    } else if (protocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId];\n    } else {\n        msg = [NSString stringWithFormat:@\"当前页面，pageId: %d，frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId, protocolInfo.protocolId, protocolInfo.pageId];\n    }\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"TCP行情段请求冲突！！！\" message:msg preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *noMoreAction = [UIAlertAction actionWithTitle:@\"不再提示\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        self.close = YES;\n    }];\n    UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        if ([self ifSwitchPage]) { // 二次确认\n            self.lastProtocolInfo = protocolInfo;\n        }\n    }];\n    [alert addAction:confirmAction];\n    [alert addAction:noMoreAction];\n    [alert.view.subviews.firstObject.subviews[1] setValue:@(NSTextAlignmentLeft) forKey:@\"te","infill":"xtAlignment\"];\n    [[[AMUIPublicProxy currentPageControl] controller] presentViewController:alert animated","suffix":":YES completion:nil];\n\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(BOOL)close {\n    _close = close;\n    [[NSUserDefaults standardUserDefaults] setBool:close forKey:@\"HX_TCPRequestInterruptDetect\"];\n    if (close) {\n        [self reset];\n    }\n}\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n/// 页面有对应的frameId，该页面请求的frameId必须与其相同，否则同一页面的请求会相互打断\n/// 不同的页面可能有相同的frameId，目前无法全部确认，仅把已知的列出\n- (NSDictionary<NSNumber *, NSNumber *> *)requestFrameIdDict {\n    if (!_requestFrameIdDict) {\n        _requestFrameIdDict = @{ @2790:@2210, //首页\n                                @2312:@2312, //大盘\n                                @2313:@2313, //板块\n                                @2383:@2383, //个股\n                                @2378:@2378, //港股\n                                @3225:@2378, //港股etf\n                                @2382:@2382, //美股\n                                @2386:@2382, //美股etf\n                                @2405:@2405, //期货期货综合\n                                @2406:@2406, //期货国内行情\n                                @2407:@2407, //期货国外行情\n                                @2501:@2501, //ETF\n                                @2269:@2442, //可转债\n                                @2205:@2267, //分时\n        };\n    }\n    return _requestFrameIdDict;\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"xtAlignment\"","deepseek-chat-lite":"xtAlignment\"];","CodeQwen2.5-7B":"xtAlignment\"];","copilot":"xtAlignment\"];\n    [[[AMUIPublicProxy currentPageControl] controller] presentViewController:alert animated"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary<NSNumber *, NSNumber *> *requestFrameIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _close = [[NSUserDefaults standardUserDefaults] boolForKey:@\"HX_TCPRequestInterruptDetect\"];\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (self.isClosed || ![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的frameId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求frameId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 有明确frameId的直接返回，否则返回pageId\n- (int)getFrameId {\n    int frameId = [self.requestFrameIdDict thsNumberForKey:@(_pageId)].intValue;\n    if (frameId != 0) {\n        return frameId;\n    }\n    return _pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 使用UIAlertController提示\n    // 判断当前页面对应的frameId\n    int frameId = [self getFrameId];\n    NSString *msg;\n    if (_lastProtocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, protocolInfo.protocolId, protocolInfo.pageId];\n    } else if (protocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"当前页面，pageId: %d，frameId: %d\\r\\n冲突请求, protocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId];\n    } else {\n        msg = [NSString stringWithFormat:@\"当前页面，pageId: %d，frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nprotocolId: %d, frameId: %d\\r\\nps: 部分页面会提前请求导致误报，若提示中当前页面与实际页面pageId不同，请以实际页面为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId, protocolInfo.protocolId, protocolInfo.pageId];\n    }\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"TCP行情段请求冲突！！！\" message:msg preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *noMoreAction = [UIAlertAction actionWithTitle:@\"不再提示\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        self.close = YES;\n    }];\n    UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        if ([self ifSwitchPage]) { // 二次确认\n            self.lastProtocolInfo = protocolInfo;\n        }\n    }];\n    [alert addAction:confirmAction];\n    [alert addAction:noMoreAction];\n    [alert.view.subviews.firstObject.subviews[1] setValue:@(NSTextAlignmentLeft) forKey:@\"textAlignment\"];\n    [[[AMUIPublicProxy currentPageControl] controller] presentV","infill":"iewController:alert animated:YES completion:nil];\n\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(B","suffix":"OOL)close {\n    _close = close;\n    [[NSUserDefaults standardUserDefaults] setBool:close forKey:@\"HX_TCPRequestInterruptDetect\"];\n    if (close) {\n        [self reset];\n    }\n}\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n/// 页面有对应的frameId，该页面请求的frameId必须与其相同，否则同一页面的请求会相互打断\n/// 不同的页面可能有相同的frameId，目前无法全部确认，仅把已知的列出\n- (NSDictionary<NSNumber *, NSNumber *> *)requestFrameIdDict {\n    if (!_requestFrameIdDict) {\n        _requestFrameIdDict = @{ @2790:@2210, //首页\n                                @2312:@2312, //大盘\n                                @2313:@2313, //板块\n                                @2383:@2383, //个股\n                                @2378:@2378, //港股\n                                @3225:@2378, //港股etf\n                                @2382:@2382, //美股\n                                @2386:@2382, //美股etf\n                                @2405:@2405, //期货期货综合\n                                @2406:@2406, //期货国内行情\n                                @2407:@2407, //期货国外行情\n                                @2501:@2501, //ETF\n                                @2269:@2442, //可转债\n                                @2205:@2267, //分时\n        };\n    }\n    return _requestFrameIdDict;\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"iewControllerAnimated:YES completion:nil];\n}\n\n#pragma mark - Getter&Setter\n- (B","deepseek-chat-lite":"iewController:[AMUIPublicProxy currentPageControl] animated:YES completion:nil];","CodeQwen2.5-7B":"iewController:alert animated:YES completion:nil];","copilot":"iewController:alert animated:YES completion:nil];\n\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(B"}},{"prefix":"\n#ifdef _DEBUG\n\n#import \"HXSocketRequestHook.h\"\n#import \"THSPageListManager.h\"\n#import \"DataMonitorModel.h\"\n#import <HXShowTipComponent/HXShowTipProxy.h>\n#import \"AMUIPublicProxy.h\"\n#import \"AMUIPublicProxy+UserInterfaceRouter.h\"\n#import \"HXPageControlProtocol.h\"\n#import <HXDataTypeConvertor/DataTypeConvertor.h>\n\n@interface HXSocketRequestHook ()\n\n@property (nonatomic, assign) int pageId;\n@property (nonatomic, copy) HXDataMonitorProtocolInfo *lastProtocolInfo;\n@property (nonatomic, strong) NSDictionary<NSNumber *, NSNumber *> *requestFrameIdDict;\n\n@end\n\n@implementation HXSocketRequestHook\n\n#pragma mark - Public\n+ (instancetype)shareInstance {\n    static HXSocketRequestHook *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[self alloc] init];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _close = [[NSUserDefaults standardUserDefaults] boolForKey:@\"HX_TCPRequestInterruptDetect\"];\n    }\n    return self;\n}\n\n- (void)monitorDataSendWithProtocolInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    if (self.isClosed || ![[THSPageListManager sharedInstance] isQuotationFrameSwitch:protocolInfo.pageId]) { // 非行情段请求不做处理\n        return;\n    }\n    if (_lastProtocolInfo.pageId == protocolInfo.pageId) { // 请求的frameId一致，不做处理\n        return;\n    }\n    // 判断是否发生了页面切换\n    if ([self ifSwitchPage]) { // 页面发生了切换，更新pageId和请求frameId\n        _lastProtocolInfo = protocolInfo;\n    } else {\n        [self showTipWithRequestInfo:protocolInfo]; // 未切换过页面，提示冲突\n    }\n}\n\n#pragma mark - private\n- (BOOL)ifSwitchPage {\n    int currentPageId = [AMUIPublicProxy currentPageControl].pageID;\n    if (_pageId == currentPageId) {\n        return NO;\n    }\n    _pageId = currentPageId;\n    return YES;\n}\n\n/// 有明确frameId的直接返回，否则返回pageId\n- (int)getFrameId {\n    int frameId = [self.requestFrameIdDict thsNumberForKey:@(_pageId)].intValue;\n    if (frameId != 0) {\n        return frameId;\n    }\n    return _pageId;\n}\n\n/// 提示冲突\n- (void)showTipWithRequestInfo:(HXDataMonitorProtocolInfo *)protocolInfo {\n    // 判断当前页面对应的frameId\n    int frameId = [self getFrameId];\n    NSString *msg;\n    if (_lastProtocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"Page: pageId %d，frameId %d\\r\\nRequest: protocolId %d, frameId %d\\r\\nps: 部分页面会提前请求导致误报，若提示中的pageId与小白球中的不同，请以后者为准再次确认\", _pageId, frameId, protocolInfo.protocolId, protocolInfo.pageId];\n    } else if (protocolInfo.pageId == frameId) {\n        msg = [NSString stringWithFormat:@\"Page: pageId %d，frameId %d\\r\\nRequest: protocolId %d, frameId %d\\r\\nps: 部分页面会提前请求导致误报，若提示中的pageId与小白球中的不同，请以后者为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId];\n    } else {\n        msg = [NSString stringWithFormat:@\"Page: pageId %d，frameId %d\\r\\nprotocolId %d, frameId %d\\r\\nprotocolId %d, frameId %d\\r\\nps: 部分页面会提前请求导致误报，若提示中的pageId与小白球中的不同，请以后者为准再次确认\", _pageId, frameId, _lastProtocolInfo.protocolId, _lastProtocolInfo.pageId, protocolInfo.protocolId, protocolInfo.pageId];\n    }\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"TCP行情段请求冲突！！！\" message:msg preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:@\"确认\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        if ([self ifSwitchPage]) { // 二次确认\n            self.lastProtocolInfo = protocolInfo;\n        }\n    }];\n    UIAlertAction *noMoreAction = [UIAlertAction actionWithTitle:@\"不再提示\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        self.close = YES;\n        [H","infill":"XShowTipProxy showTip:@\"可在DEBUG工具中搜索\"];\n    }];\n    [alert addAction:confirmActio","suffix":"n];\n    [alert addAction:noMoreAction];\n    [[[AMUIPublicProxy currentPageControl] controller] presentViewController:alert animated:YES completion:nil];\n}\n\n#pragma mark - setter && getter\n\n- (void)setClose:(BOOL)close {\n    _close = close;\n    [[NSUserDefaults standardUserDefaults] setBool:close forKey:@\"HX_TCPRequestInterruptDetect\"];\n    if (close) {\n        [self reset];\n    }\n}\n\n- (void)reset {\n    _pageId = 0;\n    _lastProtocolInfo = nil;\n}\n\n/// 页面有对应的frameId，该页面请求的frameId必须与其相同，否则同一页面的请求会相互打断\n/// 不同的页面可能有相同的frameId，目前无法全部确认，仅把已知的列出\n- (NSDictionary<NSNumber *, NSNumber *> *)requestFrameIdDict {\n    if (!_requestFrameIdDict) {\n        _requestFrameIdDict = @{ @2790:@2210, //首页\n                                @2312:@2312, //大盘\n                                @2313:@2313, //板块\n                                @2383:@2383, //个股\n                                @2378:@2378, //港股\n                                @3225:@2378, //港股etf\n                                @2382:@2382, //美股\n                                @2386:@2382, //美股etf\n                                @2405:@2405, //期货期货综合\n                                @2406:@2406, //期货国内行情\n                                @2407:@2407, //期货国外行情\n                                @2501:@2501, //ETF\n                                @2269:@2442, //可转债\n                                @2205:@2267, //分时\n        };\n    }\n    return _requestFrameIdDict;\n}\n\n@end\n\n#endif\n","relevantFile":"","relevantFileList":[],"filePath":"HXSocketRequestHook.mm","template":"objective-cpp","multiRes":{"hipilot":"XShowTipProxy disableTip:kHSQuotationTip]","deepseek-chat-lite":"XShowTipProxy showTipWithText:@\"不再提示\" duration:1.0];","CodeQwen2.5-7B":"XShowTipProxy shareInstance].showTip = NO;","copilot":"XShowTipProxy showTip:@\"可在DEBUG工具中搜索\"];\n    }];\n    [alert addAction:confirmActio"}},{"prefix":"\n#import \"LJMarketUniversalRequest.h\"\n#import \"HXSocketFetcher.h\"\n#import \"StuffTextModel.h\"\n#import \"Tools.h\"\n#import \"LJSystemGeneralContent.h\"\n\n/**\n- 协议接口文档地址：http://cf.myhexin.com/pages/viewpage.action?pageId=1109460462\n- 应答数据格式（4，5，55，34338，36103为固定返回数据）：\n 4：合约代码\n 5：市场代码+合约代码\n 55：合约名称\n 34338：市场代码\n 34103：4字节市场兼容id\n- 其他应答数据：根据订阅数据自定义返回\n */\n\nstatic const double LJMarketUniversalRequestTimeout = 10;\n\n@interface LJMarketUniversalRequest ()\n\n@property (strong, nonatomic) HXSocketFetcher *requestFetcher;\n@property (copy, nonatomic) NSString *contentString;\n\n@property (nonatomic, strong) NSMutableDictionary *marketDic;\n\n@end\n\n@implementation LJMarketUniversalRequest\n\n\n- (instancetype)init {\n    if (self = [super init]) {\n        self.nPageID = JiaoYiHangQingFrameID;\n        self.nProtocolID = 4106;\n        self.businessType = BUSINESS_QUERY_MARKET_UNIVERSAL;\n    }\n    return self;\n}\n\n- (NSDictionary *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray showCode:(NSString *)showCode {\n    NSArray<NSString *> *showCodeArray = [self.marketDic thsArrayForKey:LJMarketRspKeyStockCode];\n    if (showCodeArray.count == 0) {\n        return @{};\n    }\n    \n    NSUInteger index = [showCodeArray indexOfObject:showCode];\n    if (index == NSNotFound) {\n        return @{};\n    }\n        \n    NSMutableDictionary *resultDictionary = [[NSMutableDictionary alloc] initWithCapacity:columnNoArray.count];\n    \n    for (NSString *columnNo in columnNoArray) {\n        NSArray<NSString *> *columnArray = [self.marketDic thsArrayForKey:columnNo];\n        if (columnArray.count > index) {\n            [resultDictionary thsSetObject:columnArray[index] forKey:columnNo];\n        }\n    }\n    \n    return resultDictionary;\n}\n\n- (NSArray<NSDictionary *> *)getRspValueWithColumnNoArray:(NSArray *)columnNoArray codeList:(NSArray<NSString *> *)codeList {\n    NSMutableArray *resultArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    \n    for (NSString *code in codeList) {\n        NSDictionary *result = [self getRspValueWithColumnNoArray:columnNoArray showCode:code];\n        [resultArray addObject:result];\n    }\n    \n    return resultArray;\n}\n\n- (void)queryMarketWithCodeList:(NSArray<NSString *> *)codeList\n                     marketList:(NSArray<NSString *> *)marketList\n                  columnNoArray:(NSArray<NSString *> *)columnArray\n                   successBlock:(void (^)(void))successBlock\n                    failedBlock:(void (^)(void))failedBlock {\n    \n    self.successBlock = successBlock;\n    self.failedBlock = failedBlock;\n    \n    if (codeList == nil || codeList.count == 0 || columnArray.count == 0) {\n        [self doneBusiness:DOBUSINESS_FAILED];\n        return;\n    }\n    \n    NSString *codeListString = [LJMarketUniversalRequest combineRequestStringWithCodeList:codeList marketList:marketList];\n    if (codeListString.length == 0) {\n        return;\n    }\n    \n    NSString *columnNoParamString = [columnArray componentsJoinedByString:@\",\"];\n    \n    if ([LJSystemGeneralContent isConnectionAvailable]) {\n        NSString *paramText = [[NSString alloc] initWithFormat:@\"codelist=%@\\r\\ndataitem=%@\\r\\nscenario=etfchicang\",\n                                                               codeListString,\n                                                                columnNoParamString];\n        NSDictionary *requestDic = @{[HXWTSocketRequest reservedKey]: paramText};\n        HXSocketRequest *request = [HXSocketRequest requestWithProtocolId:(int)self.nProtocolID \n                                                               paramsDict:requestDic\n                                                                   pageId:(int)self.nPageID];\n        request.timeoutInterval = LJMarketUniversalRequestTimeout;\n        WEAKSELF;\n        if (!self.requestFetcher) {\n            self.requestFetcher = [[HXSocketFetcher alloc] initWithRequest:request\n                                                                  callBack:^(HXSocketFetcher *fetcher, __kindof StuffBaseModel *data, NSError *error) {\n                                                                      if (data && ([data modelType] == StuffModelTypeText)) {\n                                                                          StuffTextModel *model = (StuffTextModel *) data;\n                                                                          if (model) {\n                                                                              weakSelf.contentString = model.text;\n                                                                          }\n                                                                          [weakSelf doneBusiness:DOBUSINESS_FAILED];\n                                                                      } else if (data && ([data modelType] == StuffModelTypeTable)) {\n                                                                          StuffTableModel *model = (StuffTableModel *) data;\n                                                                          [weakSelf setData:model];\n                                                                      }\n                                                                  }];\n        } else {\n            [self.requestFetcher pause];\n            self.requestFetcher.request = request;\n        }\n        [self.requestFetcher start];\n    }\n}\n\n- (void)setData:(StuffTableModel *)model {\n    NSDictionary *dict = model.bodyTextDict;\n    if (dict) {\n        self.marketDic = [NSMutableDictionary dictionaryWithDictionary:dict];\n        [self doneBusiness:DOBUSINESS_SUCCESS];\n    } else {\n        [self doneBusiness:DOBUSINESS_FAILED];\n    }\n}\n\n/// codelist拼接格式：market1(code1,code2,);market2(code3,code4,);\n+ (NSString *)combineRequestStringWithCodeList:(NSArray<NSString *> *)codeList marketList:(NSArray<NSString *> *)marketList {\n    if (codeList.count == 0 || marketList.count == 0 || codeList.count != marketList.count) {\n        return @\"\";\n    }\n    \n    // codeList去重\n    NSMutableDictionary<NSString *, NSString *> *codeDictionary = [[NSMutableDictionary alloc] initWithCapacity:codeList.count];\n    \n    for (int i = 0; i < codeList.count; i++) {\n        NSString *code = codeList[i];\n        NSString *market = marketList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        codeDictionary[code] = market;\n    }\n    \n    codeList = codeDictionary.allKeys;\n    marketList = codeDictionary.allValues;\n    \n    NSMutableDictionary<NSString *, NSString *> *resultMap = [NSMutableDictionary new];\n    for (int i = 0; i < marketList.count; i++) {\n        NSString *market = marketList[i];\n        NSString *code = codeList[i];\n        if (code.length == 0 || market.length == 0) {\n            continue;\n        }\n        \n        NSString *marketCodeList = resultMap[market];\n        if (marketCodeList.length == 0) {\n            marketCodeList = [NSString stringWithFormat:@\"%@,\", code];\n        } else {\n            marketCodeList = [marketCodeList stringByAppendingFormat:@\"%@,\", code];\n        }\n        \n        [resultMap setObject:marketCodeList forKey:market];\n    }\n    \n    NSString *result = @\"\";\n    for (NSString *market in resultMap.allKeys) {\n        NSString *marketCodeList = resultMap[market];\n        result = [result stringByAppendingFormat:@\"%@(%@);\", market, marketCodeList];\n    }\n    return result;\n}\n\n@end\n\n@implementation LJMarketClearPositionRspModel\n\n@synthesize yesterdayClosePrice;\n\n// description","infill":"- (NSString *)description {\n    // return [NSString stringWithFormat:@\"[log][trade] stockCode:%@, lastPrice:%@, buyPrice:%@, sellPrice:%@, limitUpPrice:%@, limitDownPrice:%@\",\n    return [NSString stringWithFormat:@\"[log][trade] \n            self.stockCode, self.lastPrice, sel","suffix":"f.buyPrice, self.sellPrice, self.limitUpPrice, self.limitDownPrice];\n}\n\n@end\n\n\n@implementation LJMarketRequestForClearPosition\n\n/// 10:最新价 20:买价 21:卖价 69:涨停价 70:跌停价\nstatic NSArray * const columnNoArray = @[@\"10\", @\"20\", @\"21\", @\"69\", @\"70\"];\n\n- (void)queryMarketWithCodeList:(nonnull NSArray<NSString *> *)codeList \n                     marketList:(nonnull NSArray<NSString *> *)marketList\n                   successBlock:(nonnull void (^)())successBlock\n                    failedBlock:(nonnull void (^)())failedBlock {\n    [self queryMarketWithCodeList:codeList\n                       marketList:marketList\n                    columnNoArray:columnNoArray\n                     successBlock:successBlock\n                      failedBlock:failedBlock];\n}\n\n- (nonnull NSArray<LJMarketClearPositionRspModel *> *)getRspValueWithCodeList:(nonnull NSArray<NSString *> *)codeList {\n    NSArray<NSDictionary *> *resultData = [self getRspValueWithColumnNoArray:columnNoArray codeList:codeList];\n    \n    NSMutableArray *modelArray = [[NSMutableArray alloc] initWithCapacity:codeList.count];\n    \n    for(int i = 0; i < codeList.count; i++) {\n        NSDictionary *response = resultData[i];\n        LJMarketClearPositionRspModel *model = [[LJMarketClearPositionRspModel alloc] init];\n        model.stockCode = codeList[i];\n        model.lastPrice = [response thsObjectForKey:@\"10\"];\n        model.buyPrice = [response thsObjectForKey:@\"20\"];\n        model.sellPrice = [response thsObjectForKey:@\"21\"];\n        model.limitUpPrice = [response thsObjectForKey:@\"69\"];\n        model.limitDownPrice = [response thsObjectForKey:@\"70\"];\n        [modelArray addObject:model];\n    }\n    \n    return modelArray;\n}\n\n@end\n","relevantFile":"","relevantFileList":[],"filePath":"LJMarketUniversalRequest.mm","template":"objective-cpp","multiRes":{"hipilot":"除开盘价外，其它字段都存在默认值，开盘价没有默认值，所以要用最新价减去1分钱，来计算开盘价","deepseek-chat-lite":"","CodeQwen2.5-7B":"","copilot":"- (NSString *)description {\n    // return [NSString stringWithFormat:@\"[log][trade] stockCode:%@, lastPrice:%@, buyPrice:%@, sellPrice:%@, limitUpPrice:%@, limitDownPrice:%@\",\n    return [NSString stringWithFormat:@\"[log][trade] \n            self.stockCode, self.lastPrice, sel"}}]