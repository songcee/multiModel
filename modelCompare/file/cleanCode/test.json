{"prefix":"import { getUrlParam } from '../utils';\nimport { CONSTANT, CN_EN_LANG } from '../constant'\nimport zh from '../../../locale/lang/zh.js'\nexport const template = 'FinancialStatements';\nconst userFilterType = 'lend_funds';\n\nlet fatherLevelDataTypeMap = new Map(), fatherLableMap = new Map(), dataTypeMap = {};\nfatherLevelDataTypeMap.set('list1', `1.${userFilterType}`);\n\nfatherLableMap.set(`1.${userFilterType}`, '1');\n\ndataTypeMap[CONSTANT.undisputed_profit.money] = zh.undisputed_profit.money;\nexport const pageConfig = {\n    template,\n    userFilterType,\n    projectName: CONSTANT.financial_assets_sold_for_repurchase.projectName,\n    fatherLevelDataType: [`1.${userFilterType}`],\n    fatherLevelDataTypeMap,\n    isExpand: true,\n    firstKey: 'dataType',\n    keyList: [],\n    fatherLableMap,\n    allChooseData: [\n        {label: CONSTANT.undisputed_profit.money, value: CONSTANT.undisputed_profit.money, prop: 'value', type:'money'},\n    ],\n    currencyChooseData: [\n        {label: CONSTANT.undisputed_profit.money, value: CONSTANT.undisputed_profit.money, prop: 'value', type:'money'},\n    ],\n    rateChooseData: [],\n    reportTypeData: [\n        {label: CONSTANT.reportType, value: CONSTANT.reportType, prop: 'pageType'}\n    ],\n    showDataType: false,\n    showFormType: true,\n    reportPageType: 'has_reporttype_has_datatype',\n    isCallApiByReportYear: false, \n    formTypeListData: [CONSTANT.reportType1, CONSTANT.reportType2],\n    isOldExportCode: true,\n    isDataReportTypeExpand: true,\n    dataTypeMap,\n    isSeExportCode: false,\n    isNewWayOfDealEcharts: true,\n    isProjectOfLinenameChange: true,\n    showDataZoomProject: true,\n    isUseNewLegendFormat: true,\n    resultInterceptor(vm, result, commonKeyWords) {\n      const keyList = [];\n      const fatherLevelDataType = [];\n      const fatherLevelDataTypeMap = new Map();\n      const fatherLableMap = ","infill":"new Map();","suffix":"\r\n      result = result.reduce((obj, curr) => {\r\n        const key = `list${curr.id}`;\r\n        obj[key] = curr.list;\r\n        keyList.push(key);\r\n        fatherLevelDataTypeMap.set(key, curr.segmentName);\r\n        fatherLevelDataType.push(key);\r\n        fatherLableMap.set(curr.segmentName, curr.segmentName);\r\n        return obj;\r\n      }, {});\r\n      Object.assign(commonKeyWords, { keyList });\r\n      return result;\r\n    },\r\n    onfinancial_assets_sold_for_repurchase: function(result, project){\r\n        const reportTypeMap = new Map();\r\n        reportTypeMap.set(CONSTANT.reportType1, 1);\r\n        reportTypeMap.set(CONSTANT.reportType2, 2);\r\n        reportTypeMap.set(CONSTANT.reportType3, 3);\r\n        reportTypeMap.set(CONSTANT.reportType4, 4);\r\n\r\n        const wanyuan = CN_EN_LANG == 'en'? 'K':'万元';\r\n        const dataTypeDataList = [\r\n            {label: CONSTANT.undisputed_profit.money, value: CONSTANT.undisputed_profit.money, prop: 'value', type:'money', unit:wanyuan },\r\n        ];\r\n    \r\n        let lineData = {}, list = [], propertyNames = [], pageTypeList = [], timeList = [];\r\n        lineData.lineName = result.lineName;\r\n        result.list.forEach(item => {\r\n            pageTypeList.push(item.pageType);\r\n            timeList.push(item.time);\r\n        })\r\n    \r\n        pageTypeList = [...new Set(pageTypeList)];\r\n        timeList = [...new Set(timeList)];\r\n        pageTypeList.sort((a,b) => {\r\n            return reportTypeMap.get(a) - reportTypeMap.get(b);\r\n        })\r\n        timeList.sort((a,b) => {\r\n            return a - b;\r\n        })\r\n    \r\n        pageTypeList.forEach((item,index) => {\r\n            dataTypeDataList.forEach(site => {\r\n                propertyNames.push({\r\n                    label:`${item}`,\r\n                    propertyName:`${site.prop}${index}`,\r\n                    unit:site.unit\r\n                })\r\n            })\r\n        })\r\n    \r\n        timeList.forEach(item => {\r\n            let obj = {};\r\n            result.list.forEach(site => {\r\n                const index = pageTypeList.indexOf(site.pageType);\r\n                obj.lineName = site.lineName;\r\n                if(item === site.time){\r\n                    obj.type = site.type;\r\n                    obj.reportName = site.reportName;\r\n                    dataTypeDataList.forEach(el => {\r\n                        obj[`${el.prop}${index}`] = site[`${el.prop}`]\r\n                    })\r\n                }\r\n            })\r\n            obj.time = item;\r\n            list.push(obj);\r\n        })\r\n        lineData.list = list;\r\n        lineData.propertyNames = propertyNames;\r\n        return lineData;\r\n    }\r\n};\r\n","relevantFile":"","relevantFileList":[],"filePath":"source/f9stock/f9HSStock/f9_bbfz/src/assets/js/condition/303.js","template":"javascript"}
{"prefix":"import ApiBase, { qs } from './apiBase.js';\nimport store from './state.js';\nimport { readonly } from 'vue';\nconst { state } = store;\nexport const ACTION = {\n  CREATE: 'create',\n  QUERY: 'query',\n  UPDATE: 'update',\n  UPDATE_PROP: 'update_prop',\n  DELETE: 'delete',\n  FEEDBACK: 'feedback',\n};\nexport const RESOURCE = {\n  PANEL: 'panel',\n  SECTION: 'section',\n};\nexport const APIURL = {\n  createPage: '/pluto/v1/analyze',\n  getPage: '/pluto/v1/analyze',\n  createModule: '/pluto/v1/analyze',\n  getModule: '/pluto/v1/analyze',\n  recommendcreatePage: '/pluto/v1/analyze',\n  recommendgetPage: '/pluto/v1/analyze',\n  recommendcreateModule: '/pluto/v1/analyze',\n  recommendgetModule: '/pluto/v1/analyze',\n  getQuestion: '/basicapi/visual/llm/mask/v1/generate_json',\n  verifier: '/basicapi/visual/logic_master/status/verifier',\n};\nfunction camelToUnderscore(obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj;\n  }\n\n  let result = {};\n  if (Array.isArray(obj)) {\n    result = [];\n  }\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (!['visual', 'queryContainsThsCode'].includes(key)) {\n        const newKey = key.replace(/[A-Z]/g, match => {\n          return `_${match.toLowerCase()}`;\n        });\n        result[newKey] = camelToUnderscore(obj[key]);\n      } else {\n        result[key] = obj[key];\n      }\n    }\n  }\n\n  return result;\n}\nexport default class ApiList extends ApiBase {\n  constructor() {\n    super(`/standardgwapi/api/f9service`);\n    this.timerMap = new Map();\n    this.timerArr = [];\n    this.promiseMap = new Map();\n  }\n  generateUrl(uri, params, isExport, prefix) {\n    if (!params) {\n      params = {};\n    }\n    params.thsCode = window.thsCode;\n    return super.generateUrl(uri, params, isExport, prefix);\n  }\n  cancelAll() {\n    super.cancelAll();\n    while (this.timerArr.length > 0) {\n      const timer = this.timerArr.pop();\n      window.clearTimeout(timer);\n    }\n    Array.from(this.promiseMap.keys()).forEach(key => this.cancelLoop(key));\n  }\n  commonGet(...args) {\n    return super.commonGet\n      .apply(this, args)\n      .then(data => camelToUnderscore(data));\n  }\n  createCard({ query, gid, pid }, sKey) {\n    const params = {\n      query,\n      gid,\n      pid,\n      action: ACTION.CREATE,\n      resource: RESOURCE.SECTION,\n    };\n    const engine = window.F10Utils.getUrlParams('engine');\n    if (engine) {\n      params['engine'] = engine;\n    }\n    console.log('create new card');\n    const url = this.generateUrl(APIURL.createModule, params);\n    return this.commonGet(url, sKey || `createCard-${qs.stringify(params)}`);\n  }\n  timeoutResolve(data, time = 0) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(data);\n      }, time);\n    });\n  }\n  getCardStepData(params) {\n    const sKey = `getCardStepData-${qs.stringify(params)}`;\n    const url = this.generateUrl(\n      APIURL[`${params.type || ''}getModule`],\n      params\n    );\n    return this.commonGet(url, sKey, true);\n  }\n  async getCardData({ pid, cardId, mode, query, type, refresh }, stepCallback) {\n    const params = {\n      resource: RESOURCE.SECTION,\n      action: mode,\n      sid: cardId,\n      pid,\n      query,\n      type,\n      refresh,\n    };\n    if (mode === ACTION.UPDATE) {\n      const engine = window.F10Utils.getUrlParams('engine');\n      if (engine) {\n        params['engine'] = engine;\n      }\n      console.log($t('08bfab6d9f'));\n      await this.getCardStepData(params);\n    }\n    params.action = ACTION.QUERY;\n    params.query = undefined;\n    const key = `${pid}-${cardId}`;\n    return this.commonLoop(key, params, 'getCardStepData', stepCallback);\n  }\n  cancelLoop(id) {\n    window.clearTimeout(this.timerMap.get(id));\n    this.promiseMap.get(id)?.reject?.('cancel');\n    this.promiseMap.delete(id);\n  }\n  getPageStepData(params) {\n    const sKey = `getPageStepData-${qs.stringify(params)}`;\n    const url = this.generateUrl(APIURL[`${params.type || ''}getPage`], params);\n    return this.commonGet(url, sKey);\n  }\n  commonLoop(id, params, method, cb) {\n    return new Promise((resolve, reject) => {\n      if (this.timerMap.get(id)) {\n        window.clearTimeout(this.timerMap.get(id));\n      }\n      const _handleGetData = async (filterRefresh) => {\n        if (filterRefresh && params","infill":") {\r\n          Reflect.deleteProperty(params, 'refresh');\r\n        }","suffix":"\r\n        try {\r\n          const res = await this[method](params);\r\n          console.log('loop ', id, res.status);\r\n          cb && cb(res);\r\n          if (['ready', 'error'].includes(res.status)) {\r\n            window.clearTimeout(this.timerMap.get(id));\r\n            res.status === 'ready' ? resolve(res) : reject(res);\r\n          } else {\r\n            const interval = 1500;\r\n            const timer = window.setTimeout(() => _handleGetData(true), interval);\r\n            this.timerMap.set(id, timer);\r\n            this.timerArr.push(timer);\r\n            this.promiseMap.set(id, { reject, resolve });\r\n          }\r\n        } catch (err) {\r\n          window.clearTimeout(this.timerMap.get(id));\r\n          console.log('getPageData err', err);\r\n          reject(err);\r\n        }\r\n      };\r\n      _handleGetData();\r\n    });\r\n  }\r\n  getPageData(pid, type) {\r\n    const params = {\r\n      resource: RESOURCE.PANEL,\r\n      pid: pid,\r\n      action: ACTION.QUERY,\r\n      type,\r\n    };\r\n    console.log(params);\r\n    return this.commonLoop(pid, params, 'getPageStepData', res => {\r\n      console.log(res);\r\n      state.currentStep = readonly(\r\n        Object.assign({}, state.currentStep, res?.step)\r\n      );\r\n      console.log(state.currentStep);\r\n    });\r\n  }\r\n  createPage(query, type) {\r\n    this.cancelAll();\r\n    const params = {\r\n      query,\r\n      resource: RESOURCE.PANEL,\r\n      action: ACTION.CREATE,\r\n      type,\r\n    };\r\n    const engine = window.F10Utils.getUrlParams('engine');\r\n    if (engine) {\r\n      params['engine'] = engine;\r\n    }\r\n    const url = this.generateUrl(APIURL[`${type || ''}createPage`], params);\r\n    return this.commonGet(url);\r\n  }\r\n}\r\n","relevantFile":"","relevantFileList":[],"filePath":"source/f9_pluto/src/assets/js/apiList.js","template":"javascript"}
{"prefix":"import { percentConfig } from \"../valueConfig/percentConfig.js\";\nimport { valueConfig } from \"../valueConfig/valueConfig.js\";\nimport { stockConfig, pcStockConfig } from \"../valueConfig/stockConfig.js\";\nimport { evaluateConfig } from \"../valueConfig/evaluateConfig.js\";\nimport { pcValueConfig } from \"../valueConfig/pcValueConfig.js\";\nimport { pcpercentConfig } from \"../valueConfig/pcpercentConfig.js\";\nimport { getLang } from \"@overseafront/utils\";\nimport { handleUnit, handleRetainNew } from \"./formatData.js\";\n\nconst Big = require(\"big.js\");\nconst LN_10 = 10;\nconst LN_100 = 100;\nconst DEFAULT_DECIMALI = 2;\n/**\n *@description [-0.0001----0.0001] 文本显示处理 或者及负数处理（添加'-'）\n *\n * @param {Number} result 第一次处理数字结果\n * @param {Array} secondConfig 匹配的config策略\n * @param {Boolean} inTheText   显示<还是小于\n * @param {Boolean} isNegative  是否负数\n * @returns\n */\nfunction handleNegativeAndLess(result, secondConfig, inTheText, isNegative) {\n  let val = \"\";\n  if (isNegative) {\n    val = \"-\" + result;\n  }\n  if (secondConfig.hasOwnProperty(\"text\")) {\n    //处理文本\n    val = inTheText ? secondConfig[\"text\"] : secondConfig[\"tableText\"];\n    //负数文本\n    if (isNegative) {\n      val = inTheText\n        ? secondConfig[\"negativeText\"]\n        : secondConfig[\"negativeTableText\"];\n    }\n  }\n  return val;\n}\n\n/**\n *@description 去除末尾的零 1.100-> 1.1  1.000->1\n *\n * @param {*} val\n * @returns\n */\nfunction handleTailZero(val) {\n  const valstr = String(val);\n  const dotIndex = valstr.indexOf(\".\");\n  let result = \"\";\n  let subTemp = \"\";\n  if (dotIndex > -1) {\n    const pre = valstr.slice(0, dotIndex);\n    const subfix = valstr.slice(dotIndex + 1);\n    for (let i = subfix.length - 1; i >= 0; i--) {\n      if (subfix[i] != \"0\") {\n        subTemp = subfix.slice(0, i + 1);\n        break;\n      }\n    }\n    return (result = subTemp.length > 0 ? pre + \".\" + subTemp : pre);\n  } else {\n    return val;\n  }\n}\n\n/**\n *@description 根据valueConfig 配置处理数据格式，现有金钱和股的配置\n *             通过val范围 选择配置 保留有效数字\n * @export\n * @param {Number|String} val\n * @param {string} [unit=\"元\"]\n * @param {boolean} [inTheText=true]\n * @returns\n */\nexport function formatMoney(val, inTheText = true, showYuan = false) {\n  if (val == 0) return { value: \"0.00\", unit: \"\" };\n  let isNegative = false;\n  if (val < 0) {\n    isNegative = true;\n    val = val.toString().replace(\"-\", \"\");\n  }\n  const typeConfig = valueConfig[\"Y\"];\n  for (let i = 0; i < typeConfig.length; i++) {\n    //第一层循环 判断大范围 rate 单位 ex: 9999.5-> range:[9999.5,99995000],rate:0.0001,unit:万\n    const firstConfig = typeConfig[i];\n    const range = firstConfig[\"range\"];\n    const floorNum = range[0];\n    const ceilNum = range[1];\n    if (val >= floorNum && val < ceilNum) {\n      const rate = firstConfig[\"rate\"];\n      const tempVal = new Big(val).times(rate);\n      let subfix = firstConfig[\"unit\"];\n      //第二层循环 判断小范围，保留位数（keep）range:[] keep:3\n      for (let j = 0; j < firstConfig[\"config\"].length; j++) {\n        const secondConfig = firstConfig[\"config\"][j];\n        const valRange = secondConfig[\"range\"];\n        const sfloorNum = valRange[0];\n        const sCeilNum = valRange[1];\n        if (tempVal >= sfloorNum && tempVal < sCeilNum) {\n          const keep = secondConfig[\"keep\"];\n          let result = new Big(tempVal).toFixed(keep);\n          if (showYuan && i == 0) {\n            subfix = \"元\";\n          }\n          // let result = handleRetain(tempVal, keep);\n          //处理负数或者文本\n          result =\n            secondConfig.hasOwnProperty(\"text\") || isNegative\n              ? handleNegativeAndLess(\n                  result,\n                  secondConfig,\n                  inTheText,\n                  isNegative\n                )\n              : result;\n          return { value: result + \"\", unit: subfix };\n        }\n      }\n    }\n  }\n\n  return { value: val, unit: \"\" };\n}\n\n/**\n *\n *\n * @export\n * @param {Number|String} val\n * @param {string} [unit=\"%\"]\n * @param {boolean} [inTheText=true]\n * @returns\n */\nexport function formatPercent(val, inTheText = true) {\n  if (val == 0) return { value: \"0.00\", unit: \"%\" };\n  if (!val) {\n    return { value: \"--\", unit: \"\" };\n  }\n  if (isNaN(Number(val))) {\n    return { value: val, unit: \"\" };\n  }\n\n  let isNegative = false;\n  if (val < 0) {\n    isNegative = true;\n    val = val.toStri","infill":"直接返回 --\r\n  if (!price || isNaN(Number(price))) {\r\n    return \"--\";\r\n  }","suffix":"\r\n  if (price < 1) {\r\n    return new Big(price).toFixed(4);\r\n  } else {\r\n    return new Big(price).toFixed(2);\r\n  }\r\n}\r\n","relevantFile":"<file_path>src/formatTime/formatTime.js\n * 格式化传入日期为指定格式\n * @param {string} fmt 格式化规范\n * @param {string | number} time 时间戳或者形如YYYYmmdd的参数YYYY mm dd 之间可以加任意符号分隔\n *\n */\nexport function dateFormat(time, fmt = \"YYYY-mm-dd\") {\n  let formatDate = fmt;\n  let date = time ? new Date(time) : new Date();\n  let ret = \"\";\n  // isNaN判断非法日期\n  if (isNaN(date.getTime())) {\n    throw new Error(\"Invalid Date\");\n  }\n  const opt = {\n    \"Y+\": date.getFullYear().toString(), // 年\n    \"m+\": (date.getMonth() + 1).toString(), // 月\n    \"d+\": date.getDate().toString(), // 日\n    \"H+\": date.getHours().toString(), // 时\n    \"M+\": date.getMinutes().toString(), // 分\n    \"S+\": date.getSeconds().toString(), // 秒\n    // 有其他格式化字符需求可以继续添加，必须转化成字符串\n  };\n  for (let k in opt) {\n    ret = new RegExp(\"(\" + k + \")\").exec(formatDate);\n    if (ret) {\n      formatDate = formatDate.replace(\n        ret[1],\n        parseInt(opt[k]) < 10 ? \"0\" + opt[k] : opt[k]\n      );\n    }\n  }\n  return formatDate;\n}\n\n/**\n * 格式化当前日期\n * seperator为'-' 输出 YYYY-MM-DD\n * @param {string} seperator 分隔符\n *\n */\nexport function formatNowDate(seperator = \"\") {\n  const formatStr = `YYYY${seperator}mm${seperator}dd`;\n  return dateFormat(\"\", formatStr);\n}\n\n/**\n * 国际化格式化当前日期\n *\n * @param {string} time  时间戳 1609725002000 或者合法时间格式 1999-9-19\n * @param {string } locale 当前语言\n * @param {boolean } config   使用特殊格式配置\n *                            useEnOther:boolean  英文下是否使用另一种格式（09/19/1999）默认false\n *                            hideYear:boolean 是否隐藏年份的返回  只返回09-19 Dec 9 09/19 默认false\n * return\n * 标准格式  中文 1999-09-19  英文 （Dec 9,1999）\n * 英文另一种格式09/19/1999\n * 隐藏年份 09-19 Dec 9 09/19\n * //默认（包括其他语言 德语等）返回中文的格式  中文的locale 分为zh和zh-hans 都支持\n */\n\n<file_path>src/formatData/formatData.js\n\n/**\n * 单位转换函数，转换为万/亿/万亿\n * @param {string / number} value 需要转换的值\n * \n * @return { value: 转换后的值, unit: 单位 }\n * @return 例 { value: '1.23', unit: '万' }\n */\nexport function handleUnit(value) {\n  if (value.toString().replace('-', '') / 10000 < 1) {\n    return {\n      value: value,\n      unit: ''\n    }\n  } else if (value.toString().replace('-', '') / 100000000 < 1) {\n    return {\n      value: value / 10000,\n      unit: '万'\n    }\n  } else if (value.toString().replace('-', '') / 1000000000000 < 1) {\n    return {\n      value: value / 100000000,\n      unit: '亿'\n    }\n  } else {\n    return {\n      value: value / 1000000000000,\n      unit: '万亿'\n    }\n  }\n}\n\n/**\n * 四舍五入保留小数函数\n * @param {string / number} value 需要转换的值\n * @param {number} digit 保留小数的位数\n */\nexport function handleRetain(value, digit) {\n  if (!digit) return Math.round(value)\n  var roundNum = Math.round(value * Math.pow(10, digit)) / Math.pow(10, digit);\n  var roundStr = roundNum.toString();\n  if (roundStr.indexOf('.') < 0) {\n    roundStr = roundStr + '.'\n  }\n  for (let i = 0; i < digit; i++) {\n    roundStr = roundStr + '0'\n  }\n  return roundStr.substr(0, roundStr.indexOf('.') + digit + 1)\n}\n\n/**\n * 判断是否为正数\n * @param {string / number} value 需要判断的值\n */\nexport function isPositive(value) {\n  return value.toString().indexOf('-') < 0\n}\n\nexport function handleRetainNew(value, digit) {\n  if (!digit) return new Big(value).toFixed(0)","relevantFileList":[],"filePath":"src/formatData/formatF10Data.js","template":"javascript"}
{"prefix":"import generateData, { filterDataByDate } from './generateData';\nimport generateVariable from './generateVariable';\nimport generateOption from './generateOption';\nimport generateDateRange from './generateDateRange';\nimport generateIndicators from './generateIndicators';\n\nconst TWO = 2;\n\nfunction calculateAverage(arrays) {\n  // eslint-disable-next-line prefer-destructuring\n  const length = arrays[0].length;\n  const result = [];\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < length; i++) {\n    let sum = 0;\n    let count = 0;\n    // eslint-disable-next-line no-restricted-syntax\n    for (const array of arrays) {\n      if (!array[i].value && i !== 0) {\n        array[i].value = array[i - 1].value;\n      }\n      const valueNumber = parseFloat(array[i].value);\n      // eslint-disable-next-line no-restricted-globals\n      if (!isNaN(valueNumber)) {\n        sum += valueNumber;\n        // eslint-disable-next-line no-plusplus\n        count++;\n      }\n    }\n    const average = count > 0 ? sum / count : 0;\n    const value = average.toFixed(TWO) === '0.00' ? '' : average.toFixed(TWO);\n    result.push({ value, lock: false });\n  }\n  return result;\n}\nconst generateChartOption = (indicators, soureData, chartOptionVariable, chartSize, updateDataRange = true, useIFindUI = true) => {\n  const { chartClassify, dateRange = {}, avgEnabled } = chartOptionVariable;\n  const seriesVariable = chartOptionVariable.series || [];\n  const chartData = generateData(chartClassify, soureData, indicators);\n  let newDateRange = {};\n  if (updateDataRange || JSON.stringify(dateRange) === '{}') {\n    newDateRange = generateDateRange(chartClassify, dateRange, chartData.dateRange);\n  } else {\n    newDateRange = dateRange;\n  }\n  const chartSeries = generateIndicators(chartClassify, indicators, newDateRange, seriesVariable, avgEnabled, chartData.x);\n  chartOptionVariable = generateVariable(chartSeries, chartOptionVariable);\n  const { xAxis, series } = filterDataByDate(chartClassify, newDateRange, chartData.x, chartData.ySeries);\n  if (chartClassify === 'season-chart' && chartOptionVariable.avgEnabled) {\n    series.push(calculateAverage(JSON.parse(JSON.stringify(series))));\n  }\n  let option = generateOption(chartOptionVariable, xAxis, series, chartSize);\n  if","infill":" (useIFindUI) {\r\n    option = { ...option, iFindUI: true };\r\n ","suffix":" }\r\n  return ;\r\n};\r\n\r\nexport default generateChartOption;\r\n","relevantFile":"<file_path>demo/src/main.js\nimport Vue from 'vue';\nimport App from './App.vue';\n\nVue.config.productionTip = false;\n\nnew Vue({\n  render: (h) => h(App),\n}).$mount('#app');\n<file_path>package/tool.js\n    return ['pie', serieType];\n  }\n  return [serieType || 'line'];\n};\n/**\n * 根据系列设置指标\n * @param {*} indicator\n * @param {*} serie\n * @returns\n */\nconst getNewIndicatorBySerie = (indicator, serie) => {\n  const serieType = getSerieTypeBySerie(serie);\n  const styleSetting = getStyleSetting(serieType);\n  const { yAxisIndex } = serie;\n  return {\n    ...indicator,\n    yAxisIndex: (yAxisIndex === 0 || yAxisIndex === 1) ? yAxisIndex : indicator.yAxisIndex,\n    styleSetting,\n    graphColor: serie.graphColor,\n  };\n};\n\nconst getIndicatorColor = (chartClassify, chartType) => {\n  const chartClassifyConfig = chartConfig[chartClassify];\n  const chartClassifyColor = chartClassifyConfig.color;\n  const chartTypeColor = chartClassifyConfig[chartType].color;\n  return chartTypeColor.length > 0 ? chartTypeColor : chartClassifyColor;\n}\n\n/**\n * 给指标包装 轴线 颜色 样式设置 是否选中参数\n * @param {*} indicator\n * @param {*} chartType\n * @returns\n */\nexport const packIndicator = (\n  chartClassify = cfInstance.getDefaultChartClassify(), \n  chartType = cfInstance.getDefaultChartType(), \n  indicator,\n) => {\n  const color = getIndicatorColor(chartClassify, chartType)\n  return {\n    ...indicator,\n    yAxisIndex: 0,\n    graphColor: color[0],\n    styleSetting: chartType.includes('pie') ? chartType : cfInstance.getDefaultChartType(),\n    checked: false,\n  }\n};\n\nexport const isTimeLock = (index, times, timeLength) => {\n  if (times === 'all') {\n    return true;\n  }\n  // eslint-disable-next-line no-param-reassign\n  times = Number(times);\n  if (times > 0) {\n    return index < times;\n  }\n  return index >= timeLength + times;\n<file_path>package/generateIndicators.js\n      unit: isEqual ? indicator.unit : '',\n      frequency: indicator.frequency,\n    });\n  });\n  return graphIndicators;\n};\n\nconst generateNonsequPieIndicators = (nonsequXAxisData, dateRange, indicator, seriesMap) => {\n  const graphIndicators = [];\n  const color = getIndicatorColor(CHART_CLASSIFY.NONSEQU_PIE, indicator.styleSetting[indicator.styleSetting.length - 1]);\n  for (let i = 0; i < nonsequXAxisData.length; i++) {\n    if (nonsequXAxisData[i].date === dateRange.date) {\n      nonsequXAxisData[i].value.forEach((xAxis, index) => {\n        let serieId = indicator.displayId;\n        serieId = `${serieId}-${xAxis}`;\n        graphIndicators.push({\n          name: xAxis,\n          styleSetting: indicator.styleSetting,\n          displayId: serieId,\n          yAxisIndex: seriesMap[serieId] ? seriesMap[serieId].yAxisIndex : index,\n          graphColor: seriesMap[serieId] ? seriesMap[serieId].graphColor : color[index % color.length],\n          unit: indicator.unit,\n          frequency: indicator.frequency,\n        });\n      });\n      break;\n    }\n  }\n  return graphIndicators;\n};\n\n/**\n * 生成图表系列\n * @param {*} chartClassify 图表分类\n * @param {*} indicators 指标\n * @param {*} dateRange 当前选中的时间范围\n * @returns\n */\nconst generateGraphIndicators = (\n  chartClassify,\n  indicators,\n  dateRange,\n  series,\n  addAvg,\n  nonsequXAxisData,\n) => {\n  if (!indicators.length) {\n    throw new Error('指标数据为空');\n  }\n  const seriesMap = {};\n  (series || []).forEach((serie) => {\n    seriesMap[serie.id] = serie;\n  });\n  let graphIndicators = [];\n  const indicator = indicators[0];\n  const isEqual = indicators.every((item) => item.unit === indicator.unit);\n  const { startDate = '', endDate = '', dateList = [] } = dateRange || {};\n  const fre = generateMinFrequency(indicators);\n  switch (chartClassify) {\n    case 'season-chart':","relevantFileList":[],"filePath":"package/generateChartOption.js","template":"javascript"}
{"prefix":"/* eslint-disable import/prefer-default-export */\nimport configInstance from './configInstance';\n\nconst cfInstance = configInstance.getInstance();\n\nconst chartConfig = cfInstance.getConfig();\n\n/**\n * 判断是否是相对值单位\n * @param {*} unit\n * @returns\n */\nexport const isRateUnit = (unit) => unit && (unit === '%' || unit === '点' || unit === '‰' || unit.indexOf('=100') > -1);\n\nexport const objectMerge = (object = {}, source = {}) => {\n  const obj = {};\n  const keys = Object.keys(object);\n  keys.forEach((key) => {\n    obj[key] = typeof(source[key]) === 'undefined' ? object[key] : source[key];\n  });\n  return obj;\n};\n/**\n * 根据系列获取完成的系列类型\n * @param {*} serie\n * @returns 图表类型\n */\nexport const getSerieTypeBySerie = (serie) => {\n  if (serie.type === 'line_area') {\n    if (serie.lineStyle === 'step') {\n      return 'line_area_step';\n    } if (serie.lineStyle === 'smooth') {\n      return 'line_area_smooth';\n    }\n    return 'line_area';\n  }\n  if (serie.type === 'line') {\n    if (serie.lineStyle === 'step') {\n      return 'line_step';\n    } if (serie.lineStyle === 'smooth') {\n      return 'line_smooth';\n    }\n    return 'line';\n  }\n  if (serie.type === 'line_area_stack') {\n    if (serie.lineStyle === 'step') {\n      return 'line_area_stack_step';\n    } if (serie.lineStyle === 'smooth') {\n      return 'line_area_stack_smooth';\n    }\n    return 'line_area_stack';\n  }\n  if (serie.type === 'line_area_percentstack') {\n    if (serie.lineStyle === 'step') {\n      return 'line_area_percentstack_step';\n    } if (serie.lineStyle === 'smooth') {\n      return 'line_area_percentstack_smooth';\n    }\n    return 'line_area_percentstack';\n  }\n  return serie.type;\n};\n\nexport const getStyleSetting = (serieType) => {\n  // line_area, line\n  if (serieType.indexOf('line_area') > -1) {\n    return ['line_area', serieType];\n  }\n  if (serieType.indexOf('line') > -1) {\n    return ['line', serieType];\n  }\n  if (serieType.indexOf('bar') > -1) {\n    return ['bar', serieType];\n  }\n  if (serieType.indexOf('pie') > -1) {\n    return ['pie', serieType];\n  }\n  return [serieType || 'line'];\n};\n/**\n * 根据系列设置指标\n * @param {*} indicator\n * @param {*} serie\n * @returns\n */\nconst getNewIndicatorBySerie = (indicator, serie) => {\n  const serieType = getSerieTypeBySerie(serie);\n  const styleSetting = getStyleSetting(serieType);\n  const { yAxisIndex } = serie;\n  return {\n    ...indicator,\n    yAxisIndex: (yAxisIndex === 0 || yAxisIndex === 1) ? yAxisIndex : indicator.yAxisIndex,\n    styleSetting,\n    graphColor: serie.graphColor,\n  };\n};\n\nconst getIndicatorColor = (chartClassify, chartType) => {\n  const chartClassifyConfig = chartConfig[chartClassify];\n  const chartClassifyColor = chartClassifyConfig.color;\n  const chartTypeColor = chartClassifyConfig[chartType].color;\n  return chartTypeColor.length > 0 ? chartTypeColor : chartClassifyColor;\n}\n\n/**\n * 给指标包装 轴线 颜色 样式设置 是否选中参数\n * @param {*} indicator\n * @param {*} chartType\n * @returns\n */\nexport const packIndicator = (\n  chartClassify = cfInstance.getDefaultChartClassify(), \n  chartType = cfInstance.getDefaultChartType(), \n  indicator,\n) => {\n  const color = getIndicatorColor(chartClassify, chartType)\n  return {\n    ...indicator,\n    yAxisIndex: 0,","infill":"s.map((serie) => serie.name), type: 'scroll' },\r\n    dataZoom: {show: true},\r\n    ","suffix":"\r\n  };\r\n};","relevantFile":"<file_path>package/generateChartOption.js\nimport generateData, { filterDataByDate } from './generateData';\nimport generateVariable from './generateVariable';\nimport generateOption from './generateOption';\nimport generateDateRange from './generateDateRange';\nimport generateIndicators from './generateIndicators';\n\nconst TWO = 2;\n\nfunction calculateAverage(arrays) {\n  // eslint-disable-next-line prefer-destructuring\n  const length = arrays[0].length;\n  const result = [];\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < length; i++) {\n    let sum = 0;\n    let count = 0;\n    // eslint-disable-next-line no-restricted-syntax\n    for (const array of arrays) {\n      if (!array[i].value && i !== 0) {\n        array[i].value = array[i - 1].value;\n      }\n      const valueNumber = parseFloat(array[i].value);\n      // eslint-disable-next-line no-restricted-globals\n      if (!isNaN(valueNumber)) {\n        sum += valueNumber;\n        // eslint-disable-next-line no-plusplus\n        count++;\n      }\n    }\n    const average = count > 0 ? sum / count : 0;\n    const value = average.toFixed(TWO) === '0.00' ? '' : average.toFixed(TWO);\n    result.push({ value, lock: false });\n  }\n  return result;\n}\nconst generateChartOption = (indicators, soureData, chartOptionVariable, chartSize, updateDataRange = true, useIFindUI = true) => {\n  const { chartClassify, dateRange = {}, avgEnabled } = chartOptionVariable;\n  const seriesVariable = chartOptionVariable.series || [];\n  const chartData = generateData(chartClassify, soureData, indicators);\n  let newDateRange = {};\n  if (updateDataRange || JSON.stringify(dateRange) === '{}') {\n    newDateRange = generateDateRange(chartClassify, dateRange, chartData.dateRange);\n  } else {\n    newDateRange = dateRange;\n  }\n  const chartSeries = generateIndicators(chartClassify, indicators, newDateRange, seriesVariable, avgEnabled, chartData.x);\n  chartOptionVariable = generateVariable(chartSeries, chartOptionVariable);\n  const { xAxis, series } = filterDataByDate(chartClassify, newDateRange, chartData.x, chartData.ySeries);\n  if (chartClassify === 'season-chart' && chartOptionVariable.avgEnabled) {\n    series.push(calculateAverage(JSON.parse(JSON.stringify(series))));\n  }\n  let option = generateOption(chartOptionVariable, xAxis, series, chartSize);\n  if (useIFindUI) {\n    option = { ...option, iFindUI: true };\n  }\n  return ;\n};\n\nexport default generateChartOption;\n<file_path>package/generateIndicators.js\n      styleSetting: ['bar', 'bar'],\n      displayId: serieId,\n      yAxisIndex: seriesMap[serieId] ? seriesMap[serieId].yAxisIndex : 0,\n      graphColor: seriesMap[serieId] ? seriesMap[serieId].graphColor : color[index % color.length],\n      unit: isEqual ? indicator.unit : '',\n      frequency: indicator.frequency,\n    });\n  });\n  return graphIndicators;\n};\n\nconst generateNonsequPieIndicators = (nonsequXAxisData, dateRange, indicator, seriesMap) => {\n  const graphIndicators = [];\n  const color = getIndicatorColor(CHART_CLASSIFY.NONSEQU_PIE, indicator.styleSetting[indicator.styleSetting.length - 1]);\n  for (let i = 0; i < nonsequXAxisData.length; i++) {\n    if (nonsequXAxisData[i].date === dateRange.date) {\n      nonsequXAxisData[i].value.forEach((xAxis, index) => {\n        let serieId = indicator.displayId;\n        serieId = `${serieId}-${xAxis}`;\n        graphIndicators.push({\n          name: xAxis,\n          styleSetting: indicator.styleSetting,\n          displayId: serieId,\n          yAxisIndex: seriesMap[serieId] ? seriesMap[serieId].yAxisIndex : index,\n          graphColor: seriesMap[serieId] ? seriesMap[serieId].graphColor : color[index % color.length],\n          unit: indicator.unit,\n          frequency: indicator.frequency,\n        });\n      });\n      break;\n    }\n  }\n  return graphIndicators;\n};\n\n/**\n * 生成图表系列\n * @param {*} chartClassify 图表分类\n * @param {*} indicators 指标\n * @param {*} dateRange 当前选中的时间范围\n * @returns\n */\nconst generateGraphIndicators = (\n  chartClassify,\n  indicators,\n  dateRange,\n  series,\n  addAvg,\n  nonsequXAxisData,\n) => {\n  if (!indicators.length) {\n    throw new Error('指标数据为空');\n  }\n  const seriesMap = {};\n  (series || []).forEach((serie) => {\n    seriesMap[serie.id] = serie;\n  });\n  let graphIndicators = [];\n  const indicator = indicators[0];\n  const isEqual = indicators.every((item) => item.unit === indicator.unit);","relevantFileList":[],"filePath":"package/tool.js","template":"javascript"}
{"prefix":"import i18n from './locale'\nimport Vue from 'vue'\nimport App from './App.vue'\n// import {Table,TableColumn} from 'element-ui'\n// import 'vxe-table/lib/style.css'\nimport { Spin, Empty, Select, Radio, Tabs,Tooltip,Button,ConfigProvider} from 'thsc-ifind-antdv'\nimport 'thsc-ifind-antdv/dist/antd.css'\n// import '@/assets/css/vxeCover.css'\n\nVue.config.productionTip = false\nwindow.$projectName = 'emp_and_salary'\n// import 'xe-utils'\n// import VXETable from 'vxe-table'\n// Vue.use(VXETable)\n// Vue.use(Table)\n// Vue.use(TableColumn)\nVue.use(Spin)\nVue.use(Empty)\nVue.use(Select)\nVue.use(Radio).use(Tooltip)\nVue.use(Tabs)\nVue.use(Button)\nVue.use(ConfigProvider)\n\nconst colorList = ['#4D5999', '#3DB4CC', '#F2A355', '#458BD1', '#F261AA', '#F2D755', '#705AE0', '#A6CA46', '#F26868', '#449CC2', '#AF4CE0', '#C5D962', '#363E6B', '#2A7E8F', '#A9723B', '#306191', '#A84376', '#A9963B', '#4E3F9D', '#738D30', '#A84848', '#2F6C87', '#7A359C', '#8A9844']\nclass ColorCache {\n  constructor() {\n    this.colorMap = {edu:{index: 0},major:{index: 0}}\n  }\n  clearCache() {\n    this.colorMap = {edu:{},major:{}}\n  }\n  getColor(type, name) {\n    return this.colorMap[type] && this.colorMap[type][name]\n  }\n  setColor(type, name) {\n    if (this.colorMap[type]) {\n      const colorIdx = this.colorMap[type].index;\n      this.colorMap[type][name] = colorList[colorIdx];\n      this.colorMap[type].index = (colorIdx + 1) ","infill":"% colorList.length;","suffix":"\r\n    }\r\n  }\r\n}\r\n// 缓存柱形图的颜色，按道理不应该写这儿\r\nVue.prototype.colorMap = new ColorCache()\r\nif (!Object.entries) {\r\n  Object.entries = function(obj) {\r\n      var ownProps = Object.keys(obj),\r\n          i = ownProps.length,\r\n          resArray = new Array(i);\r\n      while(i--) {\r\n          resArray[i] = [ownProps[i], obj[ownProps[i]]];\r\n      }\r\n      return resArray;\r\n  };\r\n}\r\nnew Vue({\r\n\ti18n,\r\n  render: h => h(App)\r\n}).$mount('#app')\r\n","relevantFile":"<file_path>source/f9stock/emp_and_salary/src/assets/js/config.js\nconst { $t } = window;\nexport const NAME_TYPE_LIST = [\n  {\n    value: '1',\n    label: $t('标准名称'),\n  },\n  {\n    value: '2',\n    label: $t('公布名称'),\n  }\n];\n<file_path>source/f9stock/emp_and_salary/src/api/apiList.js\n\nconst qs = require('querystring')\nimport {getThsCode} from '@/assets/js/util'\nconst thscode = getThsCode()\nexport default{\n    // 获取图表数据\n    getBarChartData(type) {\n        return `/standardgwapi/api/f9service/structure_and_salary/chart1?${qs.stringify({thscode,type})}`\n    },\n    // 获取图表数据\n    getLineChartData() {\n        return `/standardgwapi/api/f9service/structure_and_salary/chart2?${qs.stringify({thscode})}`\n    },\n    // 获取表格数据\n    getTable1Data: (type) => {\n        return `/standardgwapi/api/f9service/structure_and_salary/table1?${qs.stringify({thscode,type})}`\n    },\n    exportTable1Data(range, sortType) {\n        const params = {thscode, sortType}\n        if (range != 0) {\n            params.range = range\n        }\n        return `${window.location.protocol}//${window.location.host}/standardgwapi/api/f9service/structure_and_salary/export_table1?${qs.stringify(params)}`\n    }\n}","relevantFileList":[],"filePath":"source/f9stock/emp_and_salary/src/main.js","template":"javascript"}
{"prefix":"import CustomCanvasTable from \"./CustomCanvasTable\"\nimport ScrollView from \"./ScrollView\"\nfunction TouchEventToCanvasTableTouchEvent(event) {\n    const x = {changedTouches: [], touchs: []};\n    let i;\n    for (i = 0; i < event.changedTouches.length; i++) {\n        x.changedTouches.push({\n            pageX:","infill":" event.changedTouches[i].pageX,\n            pageY: event.changedTouches[i].pageY","suffix":"\n        });\n    }\n    for (i = 0; i < event.touches.length; i++) {\n        x.touches.push({\n            pageX: event.touches[i].pageX,\n            pageY: event.touches[i].pageY\n        });\n    }\n}\n\nexport default class CanvasTable extends CustomCanvasTable {\n    constructor(canvas, col, data, config) {\n        super(config)\n        this.data = data\n        this.canvas = (typeof canvas === 'string') ? document.getElementById(canvas) : canvas\n        const context = this.canvas.getContext('2d')\n        if (context === null) { throw new Error('context is null')}\n        this.setR(window.devicePixelRatio)\n        this.doResize(this.canvas.clientWidth, this.canvas.clientHeight)\n        this.context = context\n        this.scrollView = new ScrollView(\n            this.context, this,\n            config ? config.scrollView : undefined, \n            this.askForExtentedMouseMoveAndMaouseUp,\n            this.askForNormalMouseMoveAndMaouseUp,\n            this.scrollViewChange\n        )\n        this.calcIndex()\n\n        // event bind\n        this.canvas.addEventListener(\"blur\", this.canvasBlur);\n        this.canvas.addEventListener(\"focus\", this.canvasFocus);\n        this.canvas.addEventListener(\"wheel\", this.canvasWheel);\n        this.canvas.addEventListener(\"dblclick\", this.canvasDblClick);\n        this.canvas.addEventListener(\"mousedown\", this.canvasMouseDown);\n        this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        this.canvas.addEventListener(\"mouseup\", this.canvasMouseUp);\n        this.canvas.addEventListener(\"mouseleave\", this.canvasMouseLeave);\n        this.canvas.addEventListener(\"touchstart\", this.canvasTouchStart);\n        this.canvas.addEventListener(\"touchmove\", this.canvasTouchMove);\n        this.canvas.addEventListener(\"touchend\", this.canvasTouchEnd);\n        this.canvas.addEventListener(\"keydown\", this.canvasKeydown);\n        this.canvas.addEventListener(\"resize\", () => this.resize);\n        this.updateColumns(col)\n        window.addEventListener('resize', () => {\n            this.resize()\n        })\n    }\n    resize() {\n        this.setR(window.devicePixelRatio)\n        this.doResize(this.canvas.clientWidth, this.canvas.clientHeight)\n        this.askForReDraw()\n    }\n    scrollViewChange() {\n        console.log('滚动事件')\n    }\n    askForExtentedMouseMoveAndMaouseUp() {\n        this.canvas.removeEventListener(\"mousemove\", this.canvasMouseMove);\n        this.canvas.removeEventListener(\"mouseup\", this.canvasMouseUp);\n        window.addEventListener(\"mousemove\", this.canvasMouseMoveExtended);\n        window.addEventListener(\"mouseup\", this.canvasMouseUpExtended);\n    }\n    askForNormalMouseMoveAndMaouseUp() {\n        window.removeEventListener(\"mousemove\", this.canvasMouseMoveExtended);\n        window.removeEventListener(\"mouseup\", this.canvasMouseUpExtended);\n        this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        this.canvas.addEventListener(\"mouseup\", this.canvasMouseUp);\n    }\n    setCursor(cursor) {\n        this.canvas.style.cursor = cursor === undefined ? 'default' : cursor\n    }\n    setCanvasSize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n        super.setCanvasSize(width, height)\n    }\n    canvasFocus = (e) => {\n        this.setIsFocus(true)\n    }\n    canvasBlur = (e) => {\n        this.setIsFocus(false)\n    }\n    canvasKeydown = (e) => {\n        this.keydown(e.keyCode)\n    }\n    canvasTouchStart = (e) => {\n        e.preventDefault();\n        this.TouchStart(TouchEventToCanvasTableTouchEvent(e), this.canvas.offsetLeft, this.canvas.offsetTop);\n    }\n    canvasTouchMove = (e) => {\n        e.preventDefault();\n        this.TouchMove(TouchEventToCanvasTableTouchEvent(e), this.canvas.offsetLeft, this.canvas.offsetTop);\n    }\n    canvasTouchEnd = (e) => {\n        e.preventDefault();\n        this.TouchEnd(TouchEventToCanvasTableTouchEvent(e), this.canvas.offsetLeft, this.canvas.offsetTop);\n    }\n    canvasDblClick = (e) => {\n        e.preventDefault();\n        //  this.dblClick(e.clientX - this.canvas.offsetLeft, e.clientY - this.canvas.offsetTop);\n        this.dblClick(e.offsetX, e.offsetY);\n    }\n    canvasWheel = (e) => {\n        e.preventDefault();\n        this.wheel(e.deltaMode, e.deltaX, e.deltaY);\n    }\n    canvasMouseDown = (e) => {\n        e.preventDefault();\n        this.canvas.focus();\n        // this.mouseDown(e.clientX - this.canvas.offsetLeft, e.clientY - this.canvas.offsetTop);\n        this.mouseDown(e.offsetX, e.offsetY);\n    }\n    canvasMouseLeave = () => {\n        this.mouseLeave();\n    }\n    canvasMouseUp = (e) => {\n        e.preventDefault();\n        // this.mouseUp(e.clientX - this.canvas.offsetLeft, e.clientY - this.canvas.offsetTop);\n        this.mouseUp(e.offsetX, e.offsetY);\n    }\n    canvasMouseUpExtended = (e) => {\n        e.preventDefault();\n        this.mouseUpExtended(e.clientX - this.canvas.offsetLeft, e.clientY - this.canvas.offsetTop);\n    }\n    canvasMouseMoveExtended = (e) => {\n        e.preventDefault();\n        // this.mouseMoveExtended(e.clientX - this.canvas.offsetLeft, e.clientY - this.canvas.offsetTop);\n        this.mouseMoveExtended(e.offsetX, e.offsetY);\n    }\n    canvasMouseMove = (e) => {\n        e.preventDefault();\n        // this.mouseMove(e.clientX - this.canvas.offsetLeft, e.clientY - this.canvas.offsetTop);\n        this.mouseMove(e.offsetX, e.offsetY);\n    }\n}","relevantFile":"","relevantFileList":[],"filePath":"src/components/canvasTable/CanvasTable.js","template":"javascript"}
{"prefix":"import Vue from 'vue'\nimport CommandBox from '@/components/CommandBox/CommandBox.vue'\n\nexport default {\n  data () {\n    return {\n    }\n  },\n  created () {\n    this.commandBoxInstance = null\n  },\n  mounted () {\n    // this.openCommandBox()\n  },\n  beforeDestroy () {\n    this.closeCommandBox()\n    // this.commandBoxInstance = null\n  },\n  methods: {\n    // 触发命令框\n    triggerCommandBox (data) {\n      console.log('triggerCommandBox', data)\n      if (data.action === 'focusCommandBox') {\n        this.openCommandBox({\n          initMode: data.args,\n          initPosition: data.args === 'screen' ? { x: 0, y: 0 } : { left: 12, top: 108 }\n        })\n      }\n    },\n    openCommandBox ({ initMode, initPosition }) {\n      const CommandBoxComponent = Vue.extend(CommandBox)\n      const _this = this\n      this.commandBoxInstance = new CommandBoxComponent({\n        beforeCreate () {\n          this._i18n = _this._i18n \n        },\n        propsData: {\n          // ContainerRef: this\n          initMode,","infill":"initPosition,","suffix":"\r\n        }\r\n      })\r\n      let mountEl = document.createElement('div')\r\n      document.body.appendChild(mountEl)\r\n      this.commandBoxInstance.$mount(mountEl)\r\n    }\r\n  },\r\n  closeCommandBox () {\r\n    if (this.commandBoxInstance) {\r\n      this.commandBoxInstance.$destroy()\r\n      document.body.removeChild(this.commandBoxInstance.$el)\r\n      this.commandBoxInstance = null\r\n    }\r\n  },\r\n}\r\n","relevantFile":"","relevantFileList":[],"filePath":"src/pages/dashboard/mixins/commandBoxMixin.js","template":"javascript"}
{"prefix":"class DragController {\n  constructor({\n    el,\n    onPisitionChange,\n    // containerEl,\n  }) {\n    this.el = el\n    this.onPisitionChangeCb = onPisitionChange\n    // this.containerEl = containerEl\n    const elRect = this.el.getBoundingClientRect()\n    this.elSize = {\n      width: elRect.width,\n      height: elRect.height,\n    }\n    this.elPosition = {\n      left: elRect.left,\n      top: elRect.top,\n    }\n    this.autoLayout()\n    this.updateLayoutParam()\n    this.init()\n  }\n\n  init() {\n    const _this = this\n    // // 鼠标移到左下角或右下角，显示成拉伸箭头\n    // this.el.onmousemove = function (event) {\n    //   let dir = getDirection(event, this.elSize, this.elPosition);\n    //   if (dir) {\n    //     this.el.style.cursor = dir + '-resize';\n    //   } else if (findNodeUntilClass(event.target, 'ant-modal-header')) {\n    //     this.el.style.cursor = 'all-scroll';\n    //   } else {\n    //     this.el.style.cursor = 'default';\n    //   }\n    // };\n    // 监听鼠标mousedown事件，如果点击在拖拽、缩放的区域，则执行相应的逻辑\n    this.el.onmousedown = function (event) {\n      // let dir = getDirection(event, this.elSize, this.elPosition);\n      // if (dir) {\n      //   // 如果点击在左下、右下角上，执行resize逻辑\n      //   resizeHandler(event, dir);\n      // } else if (findNodeUntilClass(event.target, 'ant-modal-header')) {\n      //   // 如果点击在header上，执行拖拽逻辑\n      //   dragHandler(event);\n      // }\n      dragHandler(event);\n    };\n    \n    // // 监听window的resize事件，处理reisize后，弹窗自动调整位置及大小\n    // this.el[ctx].onWindowResize = function () {\n    //   autoLayout(this.elSize, this.elPosition, modalCenterPosition);\n    //   updateLayoutParam(this.el);\n    //   modalCenterPosition = getCenterXY(this.elSize, this.elPosition);\n    //   if (vnode.context && vnode.context[el[ctx].onResizeEnd]) {\n    //     vnode.context[el[ctx].onResizeEnd]({\n    //       ...this.elSize,\n    //       ...this.elPosition,\n    //       ...modalCenterPosition\n    //     });\n    //   }\n    // };\n    // window.addEventListener('resize', this.el[ctx].onWindowResize);\n    // 拖拽逻辑\n    function dragHandler(event) {\n      const ePositionBegin = {\n        x: event.clientX,\n        y: event.clientY\n      };\n      const positionBegin = {\n        x: _this.el.offsetLeft,\n        y: _this.el.offsetTop\n      };\n      const xMax = window.innerWidth - _this.elSize.width;\n      const yMax = window.innerHeight - _this.elSize.height;\n      document.onmousemove = function (event) {\n        // 计算新位置x\n        const xChange = event.clientX - ePositionBegin.x;\n        let xNew = positionBegin.x + xChange;\n        if (xNew < 0) {\n          xNew = 0;\n        }\n        if (xNew > xMax) {\n          xNew = xMax;\n        }\n        _this.elPosition.left = xNew;\n        // 计算新位置y\n        const yChange = event.clientY - ePositionBegin.y;\n        let yNew = positionBegin.y + yChange;\n        if (yNew < 0) {\n          yNew = 0;\n        }\n        if (yNew > yMax) {\n          yNew = yMax;\n        }\n        _this.elPosition.top = yNew;\n        // 更新this.el位置\n        _this.el.style.left = _this.elPosition.left + 'px';\n        _this.el.style.top = _this.elPosition.top + 'px';\n        _this.onPisitionChangeCb && _this.onPisitionChangeCb","infill":"(_this.elPosition)","suffix":"\r\n      };\r\n      // 结束逻辑\r\n      let onDragEnd = function () {\r\n        document.onmousemove = null;\r\n        document.onmouseup = null;\r\n        document.onmouseleave = null;\r\n        _this.el.onmouseleave = null;\r\n        // modalCenterPosition = getCenterXY(this.elSize, this.elPosition);\r\n        // if (vnode.context && vnode.context[el[ctx].onMoveEnd]) {\r\n        //   vnode.context[el[ctx].onMoveEnd]({\r\n        //     ...this.elSize,\r\n        //     ...this.elPosition,\r\n        //     ...modalCenterPosition\r\n        //   });\r\n        // }\r\n      };\r\n      document.onmouseup = onDragEnd;\r\n      document.onmouseleave = onDragEnd;\r\n      _this.el.onmouseleave = onDragEnd;\r\n    }\r\n    // // resize逻辑\r\n    // function resizeHandler(event, dir) {\r\n    //   const ePositionBegin = {\r\n    //     x: event.clientX,\r\n    //     y: event.clientY\r\n    //   };\r\n    //   const sizeBegin = {\r\n    //     width: this.elSize.width,\r\n    //     height: this.elSize.height\r\n    //   };\r\n    //   const positionBegin = {\r\n    //     x: this.el.offsetLeft,\r\n    //     y: this.el.offsetTop\r\n    //   };\r\n    //   document.onmousemove = function (event) {\r\n    //     // 计算新的宽度\r\n    //     if (dir.indexOf('e') > -1 || dir.indexOf('w') > -1) {\r\n    //       let widthNew;\r\n    //       let widthMaxCurrent;\r\n    //       if (dir.indexOf('e') > -1) {\r\n    //         // 在右侧拖\r\n    //         widthNew = sizeBegin.width + (event.clientX - ePositionBegin.x);\r\n    //         widthMaxCurrent = Math.min(sizeLimit.widthMax, window.innerWidth - positionBegin.x);\r\n    //       } else if (dir.indexOf('w') > -1) {\r\n    //         // 在左侧拖\r\n    //         widthNew = sizeBegin.width + (ePositionBegin.x - event.clientX);\r\n    //         widthMaxCurrent = Math.min(sizeLimit.widthMax, positionBegin.x + sizeBegin.width);\r\n    //       }\r\n    //       if (widthNew < sizeLimit.widthMin) {\r\n    //         widthNew = sizeLimit.widthMin;\r\n    //       }\r\n    //       if (widthNew > widthMaxCurrent) {\r\n    //         widthNew = widthMaxCurrent;\r\n    //       }\r\n    //       this.elSize.width = widthNew;\r\n    //       if (dir.indexOf('w') > -1) {\r\n    //         // 在左侧拖\r\n    //         this.elPosition.left = positionBegin.x - (widthNew - sizeBegin.width);\r\n    //       }\r\n    //     }\r\n    //     if (dir.indexOf('s') > -1 || dir.indexOf('n') > -1) {\r\n    //       let heightNew;\r\n    //       let heightMaxCurrent;\r\n    //       if (dir.indexOf('s') > -1) {\r\n    //         // 在下侧拖\r\n    //         heightNew = sizeBegin.height + (event.clientY - ePositionBegin.y);\r\n    //         heightMaxCurrent = Math.min(sizeLimit.heightMax, window.innerHeight - positionBegin.y);\r\n    //       } else if (dir.indexOf('n') > -1) {\r\n    //         // 在上侧拖\r\n    //         heightNew = sizeBegin.height + (ePositionBegin.y - event.clientY);\r\n    //         heightMaxCurrent = Math.min(sizeLimit.heightMax, positionBegin.y + sizeBegin.height);\r\n    //       }\r\n    //       if (heightNew < sizeLimit.heightMin) {\r\n    //         heightNew = sizeLimit.heightMin;\r\n    //       }\r\n    //       if (heightNew > heightMaxCurrent) {\r\n    //         heightNew = heightMaxCurrent;\r\n    //       }\r\n    //       this.elSize.height = heightNew;\r\n    //       if (dir.indexOf('n') > -1) {\r\n    //         // 在左侧拖\r\n    //         this.elPosition.top = positionBegin.y - (heightNew - sizeBegin.height);\r\n    //       }\r\n    //     }\r\n    //     // 更新this.el位置及大小\r\n    //     updateLayoutParam(this.el);\r\n    //   };\r\n    //   // 结束逻辑\r\n    //   let onDragEnd = function () {\r\n    //     document.onmousemove = null;\r\n    //     document.onmouseup = null;\r\n    //     document.onmouseleave = null;\r\n    //     modalCenterPosition = getCenterXY(this.elSize, this.elPosition);\r\n    //     if (vnode.context && vnode.context[el[ctx].onResizeEnd]) {\r\n    //       vnode.context[el[ctx].onResizeEnd]({\r\n    //         ...this.elSize,\r\n    //         ...this.elPosition,\r\n    //         ...modalCenterPosition\r\n    //       });\r\n    //     }\r\n    //   };\r\n    //   document.onmouseup = onDragEnd;\r\n    //   document.onmouseleave = onDragEnd;\r\n    // }\r\n  }\r\n\r\n  autoLayout() {\r\n    // const centerXY = {}\r\n    let elLeft = this.elPosition.left;\r\n    // if (centerXY.centerX) {\r\n    //   elLeft = Math.max(window.innerWidth * centerXY.centerX - this.elSize.width * 0.5, 0);\r\n    // } else {\r\n    //   elLeft = (window.innerWidth - this.elSize.width) / 2;\r\n    // }\r\n    if (elLeft < 0) {\r\n      elLeft = 0;\r\n    } else if (elLeft > window.innerWidth - this.elSize.width) {\r\n      elLeft = window.innerWidth - this.elSize.width;\r\n    }\r\n    let elTop = this.elPosition.top;\r\n    // if (centerXY.centerY) {\r\n    //   elTop = Math.max(window.innerHeight * centerXY.centerY - this.elSize.height * 0.5, 0);\r\n    // } else {\r\n    //   elTop = 100;\r\n    // }\r\n    if (elTop < 0) {\r\n      elTop = 0;\r\n    } else if (elTop > window.innerHeight - this.elSize.height) {\r\n      elTop = window.innerHeight - this.elSize.height;\r\n    }\r\n    this.elPosition.left = elLeft;\r\n    this.elPosition.top = elTop;\r\n  }\r\n\r\n  updateLayoutParam() {\r\n    // this.el.style.width = this.elSize.width + 'px'\r\n    // this.el.style.height = this.elSize.height + 'px'\r\n    this.el.style.left = this.elPosition.left + 'px'\r\n    this.el.style.top = this.elPosition.top + 'px'\r\n    _this.onPisitionChangeCb && _this.onPisitionChangeCb(_this.elPosition)\r\n  }\r\n\r\n  destroy() {\r\n    this.el.onmousemove = null\r\n    this.el.onmousedown = null\r\n    // window.removeEventListener('resize', elEl[ctx].onWindowResize)\r\n  }\r\n}\r\n\r\nexport default DragController","relevantFile":"<file_path>src/pages/dashboard/mixins/commandBoxMixin.js\n\nexport default {\n  data () {\n    return {\n    }\n  },\n  created () {\n    this.commandBoxInstance = null\n  },\n  mounted () {\n    // this.openCommandBox()\n  },\n  beforeDestroy () {\n    this.closeCommandBox()\n    // this.commandBoxInstance = null\n  },\n  methods: {\n    // 触发命令框\n    triggerCommandBox (data) {\n      // console.log('triggerCommandBox', data)\n      if (data.action === 'focusCommandBox') {\n        this.openCommandBox({\n          initMode: data.args,\n          // initPosition: data.args === 'screen' ? { x: 0, y: 0 } : { left: 10, top: 74 }\n          initPosition: data.args === 'screen' ? { x: 0, y: 0 } : { left: 10, top: 174 }\n        })\n      }\n    },\n    openCommandBox ({ initMode, initPosition }) {\n      const CommandBoxComponent = Vue.extend(CommandBox)\n      const _this = this\n      this.commandBoxInstance = new CommandBoxComponent({\n        beforeCreate () {\n          this._i18n = _this._i18n \n        },\n        propsData: {\n          // ContainerRef: this\n          initMode,\n          initPosition,\n        }\n      })\n      // this.commandBoxInstance.$on('hide', () => {\n      //   this.onCommandBoxHide()\n      // })\n      let mountEl = document.createElement('div')\n      document.body.appendChild(mountEl)\n      this.commandBoxInstance.$mount(mountEl)\n    },\n    // onCommandBoxHide () {\n    // },\n    closeCommandBox () {\n      if (this.commandBoxInstance) {\n        this.commandBoxInstance.$destroy()\n        document.body.removeChild(this.commandBoxInstance.$el)\n        this.commandBoxInstance = null\n      }\n    },\n  },\n}","relevantFileList":[],"filePath":"src/components/CommandBox/utils/DragController.js","template":"javascript"}
{"prefix":"const defaultConfig = {\n    backgroundColor: \"#181c21\",\n    font: \"arial\",\n    fontColor: \"#d0d1d2\",\n    fontSize: 14,\n    fontStyle: \"\",\n    groupItemArrowColor: \"black\",\n    groupItemBackgroundColor: \"#F9D3CB\",\n    groupItemFontColor: \"back\",\n    headerBackgroundColor: \"#181c21\",\n    headerDrawSortArrow: true,\n    headerDrawSortArrowColor: \"purple\",\n    headerFont: \"arial\",\n    headerFontColor: \"#d0d1d2\",\n    headerFontSize: 14,\n    headerFontStyle: \"bold\",\n    howerBackgroundColor: \"#1A2B46\",\n    lineColor: \"#2E2E33\",\n    rowGroupItemArrowColor: \"black\",\n    rowGroupItemBackgroundColor: \"#F9D3CB\",\n    rowGroupItemFontColor: \"black\",\n    selectLineColor: \"green\",\n    sepraBackgroundColor: \"#181c21\",\n}\n\nconst CanvasTableMode = {\n    RowMode: 1,\n    ColMode: 2\n}\n\nconst CanvasTableIndexType = {\n    GroupItems: 1,\n    Index: 2,\n    GroupRows: 3\n}\n\nconst Align = {\n    left: 0,\n    center: 1,\n    right: 2\n}\n\nexport default class CustomCanvasTable {\n    constructor(config) {\n        this.init()\n        this.updateConfig(config)\n    }\n    init() {\n        this.context = undefined\n        this.requestAnimationFrame = 0;\n        this.drawconf = undefined\n        this.r = 1;\n        this.data = []\n        \n        this.scrollView = undefined\n        this.headerHeight = 25\n        this.cellHeight = 30\n        this.dataIndex = undefined\n        this.config = undefined\n        this.column = [];\n        \n        this.eventDblClick = []\n        this.eventClick = []\n        this.eventClickHeader = []\n        this.eventReCalcForScrollView = []\n        \n        this.needToCalc = true\n        this.needToCalcFont = true\n\n        this.isFocus = false\n        this.minFontWidth = 1\n        this.maxFontWidth = 1\n        this.orgColum = []\n        this.customRowColStyle = undefined\n        this.customFilter = undefined\n        this.customSort = undefined\n        this.sortCol = undefined\n        this.overRowValue = undefined;\n        this.selectRowValue = undefined\n        this.selectColValue = undefined\n        this.columnResize = undefined\n        this.touchClick = undefined\n        \n        this.lastCursor = ''\n        this.canvasHeight = 0\n        this.canvasWidth = 0\n        this.editData = {}\n    }\n    updateConfig(config) {\n        this.config = {...defaultConfig, ...config}\n    }\n    getScrollView() {\n        return this.scrollView\n    }\n    isPlanToRedraw() {\n        if (!this.requestAnimationFrame) {\n            return false\n        }\n        return (this.drawconf !== undefined && this.drawconf.fulldraw)\n    }\n    setR(r) {\n        if (this.r === r) return\n        this.r = r\n        this.needToCalc = true\n        this.needToCalcFont = true \n    }\n    askForReDraw(config) {\n        if(config === undefined || (this.drawconf !== undefined && this.drawconf.fulldraw)) {\n            this.drawconf = {fulldraw: true}\n        } else {\n            if (this.drawconf === undefined) {\n                this.drawconf = {...config, ...{fulldraw: false}}\n            }\n        }\n        if (this.requestAnimationFrame) {\n            return\n        }\n        this.requestAnimationFrame = requestAnimationFrame(()=> {\n            console.time('drawCanvas')\n            this.drawCanvas()\n            console.timeEnd('drawCanvas')\n        })\n    }\n    askForReIndex() {\n        this.calcIndex()\n        this.askForReDraw()\n    }\n    resize() {}\n    doResize(width, height) {\n        this.setCanvasSize(width * this.r, height * this.r)\n    }\n    setCanva","infill":".r","suffix":"\n                while (pos < maxPos) {\n                    if (i < index.list.length) {\n                        this.drawRowItem(this.context, index.list[i], i, pos, posX, height,\n                                         offsetLeft, colStart, colEnd, drawConf)\n                    } else {\n                        break\n                    }\n\n                    pos += height\n                    i++\n                }\n\n                // this.context.beginPath()\n                // this.context.strokeStyle = '#181C21'\n                // const end = pos - height + 4 * this.r\n                // const firstLine = -this.scrollView.getPosX() + this.column[colStart].leftPos\n                // this.context.moveTo(firstLine, headderHeight)\n                // this.context.lineTo(firstLine, end)\n                // for (let col = colStart; col < colEnd; col++) {\n                //     const rightPos = -this.scrollView.getPosX() + this.column[col].rightPos\n                //     this.context.moveTo(rightPos, headderHeight)\n                //     this.context.lineTo(rightPos, end)\n                // }\n                // this.context.stroke()\n                break\n            default:\n                break\n        }\n        if (this.dataIndex.mode === CanvasTableMode.ColMode) {\n            // Headder\n            // pos = 14 * this.r\n            this.context.font = this.config.headerFontStyle + \" \" +\n                (this.config.headerFontSize * this.r) + \"px \" + this.config.headerFont\n            this.context.fillStyle = this.config.headerFontColor\n            this.context.clearRect(0, 0, this.canvasWidth, headderHeight)\n            this.context.beginPath()\n            this.context.strokeStyle = this.config.lineColor\n\n            // const leftPos = -this.scrollView.getPosX() + this.column[colStart].leftPos\n            // this.context.moveTo(leftPos, 0)\n            // this.context.lineTo(leftPos, headderHeight)\n\n            // for (let col = colStart; col < colEnd; col++) {\n            //     const rightPos = -this.scrollView.getPosX() + this.column[col].rightPos\n            //     this.context.moveTo(rightPos, 0)\n            //     this.context.lineTo(rightPos, headderHeight)\n            // }\n            // this.context.stroke()\n\n            this.context.textAlign = \"left\"\n            for (let col = colStart; col < colEnd; col++) {\n                let needClip\n                const colItem = this.column[col]\n                const colWidth = this.column[col].width * this.r - offsetLeft * 2\n                const data = this.column[col].header\n                if (colWidth > data.length * this.maxFontWidth) {\n                    needClip = false\n                } else if (colWidth < data.length * this.minFontWidth) {\n                    needClip = true\n                } else {\n                    needClip = colWidth < this.context.measureText(data).width\n                }\n\n                this.context.fillStyle = this.config.headerBackgroundColor\n                if (needClip) {\n                    this.context.fillRect(-posX + colItem.leftPos, 0,\n                        colItem.width * this.r, headderHeight)\n                    this.context.save()\n                    this.context.beginPath()\n                    this.context.rect(-this.scrollView.getPosX() + colItem.leftPos + offsetLeft, pos - height,\n                        colItem.width * this.r - offsetLeft * 2, height)\n                    this.context.clip()\n                    this.context.fillStyle = this.config.headerFontColor\n                    this.context.fillText(data, -this.scrollView.getPosX() + colItem.leftPos + offsetLeft, pos)\n                    this.context.restore()\n                } else {\n                    this.context.fillRect(-posX + colItem.leftPos, 0,\n                        colItem.width * this.r, headderHeight)\n                    this.context.fillStyle = this.config.headerFontColor\n                    this.context.fillText(data,  -this.scrollView.getPosX() + colItem.leftPos + offsetLeft, 20)\n                }\n\n                if (this.config.headerDrawSortArrow) {\n                    let sort = undefined\n                    if (this.sortCol) {\n                        let sortIndex\n                        for (sortIndex = 0; sortIndex < this.sortCol.length; sortIndex++) {\n                            if (this.sortCol[sortIndex].col === this.column[col].orginalCol) {\n                                sort = this.sortCol[sortIndex].sort\n                                break\n                            }\n                        }\n                    }\n                    if (sort) {\n                        this.context.fillStyle = this.config.headerDrawSortArrowColor\n                        const startX =  -this.scrollView.getPosX() + this.column[col].rightPos\n                        if (sort === Sort.ascending) {\n                            this.context.beginPath()\n                            this.context.moveTo(startX - 12 * this.r, 5 * this.r)\n                            this.context.lineTo(startX - 4 * this.r, 5 * this.r)\n                            this.context.lineTo(startX - 8 * this.r, 14 * this.r)\n                            this.context.fill()\n                        } else {\n                            this.context.beginPath()\n                            this.context.moveTo(startX - 8 * this.r, 5 * this.r)\n                            this.context.lineTo(startX - 12 * this.r, 14 * this.r)\n                            this.context.lineTo(startX - 4 * this.r, 14 * this.r)\n                            this.context.fill()\n                        }\n                    }\n                }\n            }\n\n            // this.context.beginPath()\n            // this.context.moveTo(0, pos + 4 * this.r)\n            // this.context.lineTo(\n            //     Math.min(-this.scrollView.getPosX() + this.column[this.column.length - 1].rightPos, this.canvasWidth),\n            //     pos + 4 * this.r)\n            // this.context.stroke()\n        }\n        this.scrollView.draw()\n    }\n    drawRowItem(context, indexId, i, pos, posX, height, offsetLeft, colStart, colEnd, drawConf) {\n        if (drawConf !== undefined && drawConf.drawOnly !== undefined) {\n            let found = false\n            let index\n            for (index = 0; index < drawConf.drawOnly.length; index++) {\n                if (drawConf.drawOnly[index] === indexId) {\n                    found = true\n                    break\n                }\n            }\n\n            if (!found) {\n                return\n            }\n        }\n        const isSelected = this.selectRowValue && this.selectRowValue.index === indexId ? true : false\n        const isOver = isSelected === false && this.overRowValue === indexId\n        const isSepra =  i % 2 === 0\n\n        for (let col = colStart; col < colEnd; col++) {\n            const colItem = this.column[col]\n            const data = this.getDrawData(colItem, indexId, i)\n\n            if (colItem.renderer) {\n                const left =  -posX + colItem.leftPos + 1\n                const top = pos - height + 4 * this.r + 1\n                const width = colItem.width * this.r - 2\n                const h = height - 2\n                context.save()\n                context.beginPath()\n                context.rect(left, top, width, h)\n                context.clip()\n                try {\n                    colItem.renderer(this, context, indexId, this.orgColum[col],\n                        left, top, left + width, top + h, width, h, this.r,\n                        data, this.data[indexId], this.data)\n                } catch (e) {\n                    this.logError(\"CanvasTable renderer\", colItem.header, e)\n                }\n\n                context.restore()\n                continue\n            }\n\n            let customStyle = null\n            if (this.customRowColStyle) {\n                try {\n                    customStyle = this.customRowColStyle(\n                        this.data, this.data[indexId], colItem.orginalCol, isO","relevantFile":"<file_path>src/components/canvasTable/CircularBuffer.js\nexport default class CircularBuffer {\n    constructor(length, allowOverFlow) {\n        this.length = length\n        this.allowOverFlow = allowOverFlow\n        this.buffer = new Array(this.length)\n    }\n    size() {\n        return this.count\n    }\n    pop() {\n        if (this.count === 0) {\n            throw new Error('empty')\n        }\n        const i = this.pointerRead\n        this.pointerRead = (this.length * this.pointerRead + 1) % this.length\n        this.count--\n        const temp = this.buffer[i]\n        if (temp === undefined) {\n            throw new Error('undefined')\n        }\n        this.buffer[i] = undefined\n        return temp\n    }\n    push(item) {\n        if (!this.allowOverFlow && this.count === this.length) {\n            throw new Error('overflow')\n        }\n        this.buffer[this.pointerWrite] = item\n        this.pointerWrite = (this.length + this.pointerWrite + 1) % this.length\n        if (this.count === this.length) {\n            this.pointerRead = this.pointerWrite\n        } else {\n            this.count++\n        }\n    }\n    clear() {\n        this.pointerRead = 0;\n        this.pointerWrite = 0;\n        this.count = 0;\n        this.buffer = new Array(this.length);\n    }\n    export() {\n        const result = [];\n        while (this.size() > 0) {\n            result[result.length] = this.pop();\n        }\n        return result;\n    }\n}\n<file_path>src/components/canvasTable/CanvasTable.js\n    const x = {changedTouches: [], touchs: []};\n    let i;\n    for (i = 0; i < event.changedTouches.length; i++) {\n        x.changedTouches.push({\n            pageX: event.changedTouches[i].pageX,\n            pageY: event.changedTouches[i].pageY\n        });\n    }\n    for (i = 0; i < event.touches.length; i++) {\n        x.touches.push({\n            pageX: event.touches[i].pageX,\n            pageY: event.touches[i].pageY\n        });\n    }\n}\n\nexport default class CanvasTable extends CustomCanvasTable {\n    constructor(canvas, col, data, config) {\n        super(config)\n        this.data = data\n        this.canvas = (typeof canvas === 'string') ? document.getElementById(canvas) : canvas\n        const context = this.canvas.getContext('2d')\n        if (context === null) { throw new Error('context is null')}\n        this.setR(window.devicePixelRatio)\n        this.doResize(this.canvas.clientWidth, this.canvas.clientHeight)\n        this.context = context\n        this.scrollView = new ScrollView(\n            this.context, this,\n            config ? config.scrollView : undefined, \n            this.askForExtentedMouseMoveAndMaouseUp,\n            this.askForNormalMouseMoveAndMaouseUp,\n            this.scrollViewChange\n        )\n        this.calcIndex()\n\n        // event bind\n        this.canvas.addEventListener(\"blur\", this.canvasBlur);\n        this.canvas.addEventListener(\"focus\", this.canvasFocus);\n        this.canvas.addEventListener(\"wheel\", this.canvasWheel);\n        this.canvas.addEventListener(\"dblclick\", this.canvasDblClick);\n        this.canvas.addEventListener(\"mousedown\", this.canvasMouseDown);\n        this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        this.canvas.addEventListener(\"mouseup\", this.canvasMouseUp);\n        this.canvas.addEventListener(\"mouseleave\", this.canvasMouseLeave);\n        this.canvas.addEventListener(\"touchstart\", this.canvasTouchStart);\n        this.canvas.addEventListener(\"touchmove\", this.canvasTouchMove);\n        this.canvas.addEventListener(\"touchend\", this.canvasTouchEnd);\n        this.canvas.addEventListener(\"keydown\", this.canvasKeydown);\n        this.canvas.addEventListener(\"resize\", () => this.resize);\n        this.updateColumns(col)\n        window.addEventListener('resize', () => {\n            this.resize()\n        })\n    }\n    resize() {\n        this.setR(window.devicePixelRatio)\n        this.doResize(this.canvas.clientWidth, this.canvas.clientHeight)\n        this.askForReDraw()\n    }\n    scrollViewChange() {","relevantFileList":[],"filePath":"src/components/canvasTable/CustomCanvasTable.js","template":"javascript"}
{"prefix":"export const TA_ID = {","infill":"'TA1': 'TA1',","suffix":"\r\n};","relevantFile":"","relevantFileList":[],"filePath":"src/constants.js","template":"javascript"}
{"prefix":"\nexport default {\n  data () {\n    return {\n    }\n  },\n  created () {\n    // 设置搜索模式\n    this.$edbStore.states.searchMode = 'commandBox'\n  },\n  methods: {\n    reactCommandBox(data) {\n      if (data.action === 'closeCommandBox') {\n        this.$edbStore.states.commandBoxState.active = false\n      } else if (data.action === 'locateIndex') {\n        this.locateIndex(data.args)\n      } else if (data.action === 'addIndex') {\n        this.batchAddIndex([data.args])        \n      } else if (data.action === 'addSubjectToDrawtool') {\n        this.addSubjectToDrawtool(","infill":"data.args)","suffix":"\r\n      }\r\n    },\r\n  }\r\n}","relevantFile":"<file_path>src/pages/dashboard/mixins/commandBoxMixin.js\n\nexport default {\n  data () {\n    return {\n    }\n  },\n  created () {\n    this.commandBoxInstance = null\n  },\n  mounted () {\n    // this.openCommandBox()\n  },\n  beforeDestroy () {\n    this.closeCommandBox()\n    // this.commandBoxInstance = null\n  },\n  methods: {\n    // 触发命令框\n    triggerCommandBox (data) {\n      // console.log('triggerCommandBox', data)\n      if (data.action === 'focusCommandBox') {\n        this.openCommandBox({\n          initMode: data.args,\n          // initPosition: data.args === 'screen' ? { x: 0, y: 0 } : { left: 10, top: 74 }\n          initPosition: data.args === 'screen' ? { x: 0, y: 0 } : { left: 10, top: 174 }\n        }).then(() => {\n          this.commandBoxInstance.focus()\n        })\n      } else if (data.action === 'switchCommandBoxMode') {\n        this.switchCommandBoxMode({\n          mode: data.args\n        })\n      }\n    },\n    openCommandBox ({ initMode, initPosition }) {\n      if (!this.commandBoxInstance) {\n        const CommandBoxComponent = Vue.extend(CommandBox)\n        const _this = this\n        this.commandBoxInstance = new CommandBoxComponent({\n          beforeCreate () {\n            this._i18n = _this._i18n \n          },\n          propsData: {\n            // ContainerRef: this\n            initMode,\n            initPosition,\n          }\n        })\n        // this.commandBoxInstance.$on('hide', () => {\n        //   this.onCommandBoxHide()\n        // })\n        let mountEl = document.createElement('div')\n        document.body.appendChild(mountEl)\n        this.commandBoxInstance.$mount(mountEl)\n        return this.$nextTick()\n      } else {\n        this.commandBoxInstance.open()\n        return Promise.resolve()\n      }\n    },","relevantFileList":[],"filePath":"src/views/Home/mixins/homeMixinCommandBox.js","template":"javascript"}
{"prefix":"module.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'jsdom',\n  transform: {\n    '^.+\\\\.vue$': '@vue/vue2-jest',\n    // q: 下面这个配置的含义","infill":"// a: 用ts-jest处理ts文件","suffix":"\n    '^.+\\\\.ts$': 'ts-jest'\n  },\n  moduleFileExtensions: ['vue', 'js', 'json', 'jsx', 'ts', 'tsx', 'node'],\n  coverageReporters: ['html', 'text-summary'],\n  collectCoverage: true,\n}\n","relevantFile":"","relevantFileList":[],"filePath":"jest.config.js","template":"javascript"}
{"prefix":"import CustomCanvasTable from \"./CustomCanvasTable\"\nimport ScrollView from \"./ScrollView\"\nimport debounce from \"lodash.debounce\";\nfunction TouchEventToCanvasTableTouchEvent(event) {\n    const x = {changedTouches: [], touchs: []};\n    let i;\n    for (i = 0; i < event.changedTouches.length; i++) {\n        x.changedTouches.push({\n            pageX: event.changedTouches[i].pageX,\n            pageY: event.changedTouches[i].pageY\n        });\n    }\n    for (i = 0; i < event.touches.length; i++) {\n        x.touches.push({\n            pageX: event.touches[i].pageX,\n            pageY: event.touches[i].pageY\n        });\n    }\n}\n\nexport default class CanvasTable extends CustomCanvasTable {\n    constructor(wrapper, col, data, config) {\n        super(config)\n        this.id = this.config.id\n        this.data = data\n        this.initData()\n        this.wrapper = (typeof wrapper === 'string') ? document.getElementById(wrapper) : wrapper\n        this.initCanvas()\n        this.setR(window.devicePixelRatio)\n        this.doResize(this.wrapper.clientWidth, this.wrapper.clientHeight)\n        this.updateThemeStyle()\n        this.scrollViewChange = debounce(this.scrollViewChange, 200)\n        this.scrollView = new ScrollView(\n            this.context,\n            this,\n            this.config.scrollView,\n            this.askForExtentedMouseMoveAndMaouseUp,\n            this.askForNormalMouseMoveAndMaouseUp,\n            this.scrollViewChange\n        )\n        this.calcIndex()\n\n        // event bind\n        this.canvas.addEventListener(\"blur\", this.canvasBlur);\n        this.canvas.addEventListener(\"focus\", this.canvasFocus);\n        this.canvas.addEventListener(\"wheel\", this.canvasWheel);\n        this.canvas.addEventListener(\"dblclick\", this.canvasDblClick);\n        this.canvas.addEventListener(\"mousedown\", this.canvasMouseDown);\n        this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        this.canvas.addEventListener(\"mouseup\", this.canvasMouseUp);\n        this.canvas.addEventListener(\"mouseleave\", this.canvasMouseLeave);\n        this.canvas.addEventListener(\"touchstart\", this.canvasTouchStart);\n        this.canvas.addEventListener(\"touchmove\", this.canvasTouchMove);\n        this.canvas.addEventListener(\"touchend\", this.canvasTouchEnd);\n        this.canvas.addEventListener(\"keydown\", this.canvasKeydown);\n        this.canvas.addEventListener(\"resize\", () => this.resize);\n        this.updateColumns(col)\n        this.createViewport()\n        this.autoRender()\n        window.addEventListener('resize', () => {\n            this.resize()\n        })\n        this.viewDataChange()\n    }\n    createViewport() {\n        this.dataViewport = document.createElement('div')\n        let height = this.data.length * this.cellHeight + this.headerHeight\n        let width = this.column.reduce((acc, cur) => acc + cur.width, 0)\n        this.dataViewport.style.height = height + 'px'\n        this.dataViewport.style.width = width + 'px'\n        this.wrapper.firstChild.insertB","infill":"efore(this.dataViewport, this.wrapper.firstChild)","suffix":"\n    }\n    initCanvas() {\n        let clientWidth = this.wrapper.clientWidth\n        let clientHeight = this.wrapper.clientHeight\n        this.backCanvas = this.createCanvas(clientWidth, clientHeight, 'back-canvas')\n        this.backContext = this.backCanvas.getContext('2d')\n        this.canvas = this.createCanvas(clientWidth, clientHeight, 'main-canvas')\n        this.context = this.canvas.getContext('2d')\n        this.hoverCanvas = this.createCanvas(clientWidth, clientHeight, 'hover-canvas')\n        this.hoverContext = this.hoverCanvas.getContext('2d')\n    }\n    createCanvas(clientWidth, clientHeight, className) {\n        let canvas = document.createElement('canvas')\n        canvas.setAttribute('class', className)\n        this.wrapper.appendChild(canvas)\n        canvas.style.width = clientWidth + 'px'\n        canvas.style.height = clientHeight + 'px'\n        return canvas\n    }\n    initData() {\n        // '代码' 需要抽取到配置中 mainField\n        this.dataMap = {}\n        this.data.forEach(item => {\n            this.dataMap[item['代码']] = item\n        })\n    }\n    autoRender() {\n        this.autoRenderFlag = setTimeout(()=> {\n            let fields = Object.keys(this.dataChangePool)\n            if (fields.length > 0){\n                this.askForReDraw('setAutoReDraw', { drawOnly: fields })\n            }\n            let blinkKeys = Object.keys(this.needBlinkConfig)\n            if (blinkKeys.length > 0) {\n                this.askForReDraw('setAutoReDraw', { drawOnly: blinkKeys })\n            }\n            this.autoRender()\n        }, this.config.autoRenderInterval)\n    }\n    refreshBlink() {\n        debugger\n        let blinkKeys = Object.keys(this.needBlinkConfig)\n        if (blinkKeys.length > 0) {\n            this.askForReDraw('setAutoReDraw', { drawOnly: blinkKeys })\n        }\n    }\n    updateThemeStyle() {\n        // this.wrapper.style.border = '1px solid ' + this.config.canvasBorderColor\n        this.wrapper.style.backgroundColor = this.config.backgroundColor\n    }\n    resize() {\n        let clientWidth = this.wrapper.clientWidth\n        let clientHeight = this.wrapper.clientHeight\n        this.canvas.style.width = clientWidth + 'px'\n        this.canvas.style.height = clientHeight + 'px'\n        this.hoverCanvas.style.width = clientWidth + 'px'\n        this.hoverCanvas.style.height = clientHeight + 'px'\n        this.backCanvas.style.width = clientWidth + 'px'\n        this.backCanvas.style.height = clientHeight + 'px'\n        this.setR(window.devicePixelRatio)\n        this.doResize(clientWidth, clientHeight)\n        this.askForReDraw()\n    }\n    scrollViewChange() {\n        console.log('滚动事件')\n        let range = this.getViewRange()\n        let rangeData = range.map(indexId => {\n            return {'代码': this.data[indexId]['代码']}\n        })\n        this.config.onViewDataChange.call(this, rangeData)\n    }\n    viewDataChange() {\n        this.scrollViewChange()\n    }\n    askForExtentedMouseMoveAndMaouseUp() {\n        this.canvas.removeEventListener(\"mousemove\", this.canvasMouseMove);\n        this.canvas.removeEventListener(\"mouseup\", this.canvasMouseUp);\n        window.addEventListener(\"mousemove\", this.canvasMouseMoveExtended);\n        window.addEventListener(\"mouseup\", this.canvasMouseUpExtended);\n    }\n    askForNormalMouseMoveAndMaouseUp() {\n        window.removeEventListener(\"mousemove\", this.canvasMouseMoveExtended);\n        window.removeEventListener(\"mouseup\", this.canvasMouseUpExtended);\n        this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        this.canvas.addEventListener(\"mouseup\", this.canvasMouseUp);\n    }\n    setCursor(cursor) {\n        this.canvas.style.cursor = cursor === undefined ? 'default' : cursor\n    }\n    setCanvasSize(width, height) {\n        this.canvas.width = width\n        this.canvas.height = height\n        this.hoverCanvas.width = width\n        this.hoverCanvas.height = height\n        this.backCanvas.width = width\n        this.backCanvas.height = height\n        super.setCanvasSize(width, height)\n    }\n    canvasFocus = (e) => {\n        this.setIsFocus(true)\n    }\n    canvasBlur = (e) => {\n        this.setIsFocus(false)\n    }\n    canvasKeydown = (e) => {\n        this.keydown(e.keyCode)\n    }\n    canvasTouchStart = (e) => {\n        e.preventDefault();\n        this.TouchStart(TouchEventToCanvasTableTouchEvent(e), this.canvas.offsetLeft, this.canvas.offsetTop);\n    }\n    canvasTouchMove = (e) => {\n        e.preventDefault();\n        this.TouchMove(TouchEventToCanvasTableTouchEvent(e), this.canvas.offsetLeft, this.canvas.offsetTop);\n    }\n    canvasTouchEnd = (e) => {\n        e.preventDefault();\n        this.TouchEnd(TouchEventToCanvasTableTouchEvent(e), this.canvas.offsetLeft, this.canvas.offsetTop);\n    }\n    canvasDblClick = (e) => {\n        e.preventDefault();\n        //  this.dblClick(e.clientX - this.canvas.offsetLeft, e.clientY - this.canvas.offsetTop);\n        this.dblClick(e.offsetX, e.offsetY);\n    }\n    canvasWheel = (e) => {\n        e.preventDefault();\n        this.wheel(e.deltaMode, e.deltaX, e.deltaY);\n    }\n    canvasMouseDown = (e) => {\n        e.preventDefault();\n        this.canvas.focus();\n        // this.mouseDown(e.clientX - this.canvas.offsetLeft, e.clientY - this.canvas.offsetTop);\n        this.mouseDown(e.offsetX, e.offsetY);\n    }\n    canvasMouseLeave = () => {\n        this.mouseLeave();\n    }\n    canvasMouseUp = (e) => {\n        e.preventDefault();\n        // this.mouseUp(e.clientX - this.canvas.offsetLeft, e.clientY - this.canvas.offsetTop);\n        this.mouseUp(e.offsetX, e.offsetY);\n    }\n    canvasMouseUpExtended = (e) => {\n        e.preventDefault();\n        this.mouseUpExtended(e.clientX - this.canvas.offsetLeft, e.clientY - this.canvas.offsetTop);\n    }\n    canvasMouseMoveExtended = (e) => {\n        e.preventDefault();\n        // this.mouseMoveExtended(e.clientX - this.canvas.offsetLeft, e.clientY - this.canvas.offsetTop);\n        this.mouseMoveExtended(e.offsetX, e.offsetY);\n    }\n    canvasMouseMove = (e) => {\n        e.preventDefault();\n        // this.mouseMove(e.clientX - this.canvas.offsetLeft, e.clientY - this.canvas.offsetTop);\n        this.mouseMove(e.offsetX, e.offsetY);\n    }\n}","relevantFile":"","relevantFileList":[],"filePath":"src/components/canvasTable/CanvasTable.js","template":"javascript"}
{"prefix":"export default {\n  '3daa15bb35': 'Subject rating',\n  '006ba68513': 'Implied rating, YY rating',\n  af974654fc: 'Long-term rating chart (%s) .png',\n  d5fdc12fbc: 'Other rating charts (%s) .png',\n  '21efd88b67': 'No data',\n  '443ebc9212': 'Historical rating',\n  a8b0c20416: 'All',\n  bfb4ec55f8: 'Main body',\n  fb6bf49f97: 'Bond rating',\n  '4533f4f68c': 'Debt',\n  '59f4ab6c90': 'Guarantor Rating',\n  b760f57afc: 'Guarantor',\n  e24ad82321: 'Only show rating changes',\n  cf81f36c12: 'Rating Criteria',\n  e8985fbae8: 'Rating date',\n  '7b2180c284': 'Release date',\n  '223fa3e5cf': 'Rating',\n  '75d4f02985': 'Outlook',\n  f5e255362d: 'Change direction',\n  '6bd2791d98': 'Rating agency',\n  '487d3c831b': 'Rating type',\n  '89b4025987': 'Rating report',\n  eac013be8e: 'Turn up',\n  '7bde48e462': 'Turn down',\n  '88d1e234ef': 'First',\n  cf75a04cc7: 'Credit Ratings-Historical Ratings',\n  '4c09181caf': 'Latest rating',\n  ef9072808b: 'Other ratings',\n  ef88dcebec: 'Latest rating date',\n  a4674996ce: 'Date of last rating change',\n  a9fa10127f: 'Last rating',\n  cec77bc5c5: 'Credit Rating-Latest Rating (%s) .xlsx',\n  '081abdd5b3': 'Maintain',\n  '49bba72e51':\n    \"Moody's Investors Service Moody's Investors Service Moody's Investors Service Moody's Investors Service\",\n  b301ef7585: 'Entity long-term credit rating',\n  '0122d2d049': 'Six words six words',\n  '42e40457b3': \"Moody's Investors Service\",\n  eae7542d95: 'China Chengxin Appraisal',\n  '5c50bccc64': 'China Chengxin Credit',\n  '3943a6301b': 'ChinaBond Implied Rating',\n  '9fd97f6408': 'CSI Implied Rating',\n  '164a41194f': 'YY rating',\n  dac952b0d4:\n    'Means Legal Means Immediately Fall in Love with Quantity Development is Means Legal Means Immediately Fall in Love with Quantity Development is',\n  '(长期有效)'","infill":": '(Long-term effective)',","suffix":"\r\n};\r\n","relevantFile":"<file_path>src/locale/index.js\n}\n\n// url读取配置\nconst getUrlParams = function (id) {\n    let params = window.location.search.slice(1);\n    params = params.split('&');\n    let urlParams = {};\n    params.forEach((item)=>{\n        item = item.split('=');\n        urlParams[item[0]] = item[1];\n    })\n    if (!id) return urlParams;\n    return urlParams[id];\n}\n\n// 多语言配置的读取顺序\n// url -> cookie -> zh \nlet lang = getUrlParams('lang');\nif (!lang) {\n  lang = getCookie('ifindlang');\n}\nif (!lang) lang = 'cn';\nwindow.lang = lang;\ndocument.body.classList.add(lang);\n\nconst i18n = new VueI18n({\n  locale: lang,\n  fallbackLocale:'cn',\n  messages: {\n    'cn': { ...cn },\n    'en': { ...en }\n  }\n})\n\n// 扩展多语言配置格式化\ni18n.$e = (key, values) => {\n  let result = i18n.t(key);\n  if (Array.isArray(values) && values.length) {\n    values.forEach((v)=> {\n        result = result.replace(/%s/, v);\n    });\n  }\n  return result;\n}\nwindow.$t = function(key) {\n  return i18n.t(key);\n};\nwindow.$extend = function(key, values) {return i18n.$e(key, values)};\nVue.prototype.$extend = function (key, values) {\n  const i18n = this.$i18n\n  return i18n.$e(key, values);\n}\nwindow.$if = function(s1, s2) {\n  if (window.lang === 'en') {\n    return s2;\n  } else {\n    return s1;\n  }\n}\nexport default i18n","relevantFileList":[],"filePath":"src/locale/lang/en.js","template":"javascript"}
