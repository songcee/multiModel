[
  {
    "prefix": "package com.myhexin.sre.change.event.deploy.modules.plane.infrastructure.db.dao;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.myhexin.sre.change.event.deploy.modules.plane.infrastructure.db.model.ChangeExePlanDo;\n\n/**\n * 变更执行计划",
    "infill": "mapper\n *\n * @a",
    "suffix": "uthor zhounan3@myhexin.com\n * @date 2024/06/24\n */\npublic interface ChangeExePlanDoMapper extends BaseMapper<ChangeExePlanDo> {\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/infrastructure/db/model/ChangeExePlanDo.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.infrastructure.db.model;\n\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport lombok.Data;\n\nimport java.time.LocalDateTime;\n\n@Data\n@TableName(\"change_exe_plan\")\npublic class ChangeExePlanDo {\n    /**\n     * 自增id\n     */\n    @TableId(type = IdType.ASSIGN_ID, value = \"id\")\n    private Long id;\n    /**\n     * 变更执行计划单创建人\n     */\n    private String creator;\n    /**\n     * 变更执行计划单执行人\n     */\n    private String executor;\n    /**\n     * 变更执行开始时间\n     */\n    private LocalDateTime startTime;\n    /**\n     * 变更执行完成时间\n     */\n    private LocalDateTime finishTime;\n    /**\n     * 变更原因\n     */\n    private String reason;\n    /**\n     * 变更环境\n     */\n    private String env;\n    /**\n     * 变更源变更工单/记录唯一ID\n     */\n    private String bizOrderId;\n    /**\n     * 变更场景码\n     */\n    private String sceneCode;\n    /**\n     * 变更源平台\n     */\n    private String platform;\n    /**\n     * 变更执行灰度标识\n     */\n    private Boolean grayFlag;\n    /**\n     * 变更执行需要的参数\n     */\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/repository/ChangeExePlanRepository.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.repository;\n\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.aggregates.ChangeExePlan;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.entity.ChangeExePlanId;\n\npublic interface ChangeExePlanRepository {\n    public ChangeExePlanId save(ChangeExePlan changeExePlan);\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/infrastructure/db/repository/ChangeExePlanRepositoryImpl.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.infrastructure.db.repository;\n\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.aggregates.ChangeExePlan;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.entity.ChangeExePlanId;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.repository.ChangeExePlanRepository;\n\npublic class ChangeExePlanRepositoryImpl implements ChangeExePlanRepository {\n    @Override\n    public ChangeExePlanId save(ChangeExePlan changeExePlan) {\n        return null;\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/risk/detected/deploy/modules/identify/infrastructure/db/dao/mapper/RuleExecuteRecordDoMapper.java\npackage com.myhexin.sre.change.risk.detected.deploy.modules.identify.infrastructure.db.dao.mapper;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.myhexin.sre.change.risk.detected.deploy.modules.identify.infrastructure.db.model.RuleExecuteRecordDo;\nimport org.apache.ibatis.annotations.Mapper;\n\n/**\n * 风险管控规则mapper\n *\n * @author zhounan3@myhexin.com\n * @since 2023/08/18\n */\n@Mapper\npublic interface RuleExecuteRecordDoMapper extends BaseMapper<RuleExecuteRecordDo> {\n\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/infrastructure/db/dao/ChangeExePlanDoMapper.java",
    "template": "java",
    "multiRes": {
      "hipilot": "数据访问接口\n *\n * @a",
      "CodeQwen2.5-7B": "表",
      "copilot": "mapper\n *\n * @a",
      "CodeQwen1.5-7B": " "
    }
  },
  {
    "prefix": "package com.myhexin.ifund.ranking.deploy.modules.ranking.domain.service.calpoint.fund;\n\nimport com.alibaba.fastjson.JSON;\nimport com.myhexin.ifund.ranking.deploy.common.utils.RankingUtils;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.EtfMetaType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.FundMetaType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.SceneCycle;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.EtfWeightConfig;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.MetaDataType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.Product;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.PublicWeightConfig;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.entity.ConfigData;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.entity.MetaData;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.service.AbstractCalPoint;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * 营销排名计算\n *\n * @author jiangliangjian\n */\n@Slf4j\n@Component\npublic class FundMarketRankingCalPoint extends AbstractCalPoint {\n\n\n    @Override\n    public String scene() {\n        return \"FUND\";\n    }\n\n    @Override\n    public MetaDataType targetMetaData() {\n        return MetaDataType.builder()\n                .sceneType(scene())\n                .metaDataType(FundMetaType.MARKETING_RANKING.name())\n                .build();\n    }\n\n    @Override\n    public List<MetaDataType> sourceMetaData() {\n\n        return Collections.singletonList(\n                MetaDataType.builder()\n                        .sceneType(scene())\n                        .metaDataType(FundMetaType.CONVERSION_RANKING.name())\n                        .build()\n        );\n    }\n\n    @Override\n    public List<String> sourceConfigData() {\n        return Collections.singletonList(\"publicWeight\");\n    }\n\n\n    @Override\n    public List<MetaData> calData(List<Product> productList, Map<String, Map<String, String>> sourceMetaData, Map<String, ConfigData> configData, SceneCycle sceneCycle) {\n        //详情",
    "infill": "页转化率排名\n        Map",
    "suffix": "<String, String> conversionRanking = sourceMetaData.get(EtfMetaType.CONVERSION_RANKING.name());\n        \n\n        //权重配置(营销统计流量限制-下限)\n        String publicWeight = configData.get(\"publicWeight\").getConfigValue();\n        PublicWeightConfig publicWeightConfig = JSON.parseObject(publicWeight, PublicWeightConfig.class);\n        \n        BigDecimal conversionRateRank = new BigDecimal(publicWeightConfig.getDetailConversionRateWeight()).divide(new BigDecimal(\"100\"), 6, RoundingMode.DOWN);\n        BigDecimal holderRank = new BigDecimal(publicWeightConfig.getProductHoldersWeight()).divide(new BigDecimal(\"100\"), 6, RoundingMode.DOWN);\n        BigDecimal scaleRank = new BigDecimal(publicWeightConfig.getProductScaleWeight()).divide(new BigDecimal(\"100\"), 6, RoundingMode.DOWN);\n\n        Map<String, BigDecimal> conversionRankingNormal = RankingUtils.normalization(conversionRanking);\n        \n        \n\n        List<MetaData> sumNormal = new ArrayList<>();\n        for (Product product : productList) {\n            String code = product.getCode();\n            BigDecimal sum = conversionRankingNormal.getOrDefault(code, new BigDecimal(\"0\")).multiply(conversionRateRank)\n                    .add(managerRankingNormal.getOrDefault(code, new BigDecimal(\"0\")).multiply(managerRank));\n            MetaData data = MetaData.builder()\n                    .code(code)\n                    .value(sum.toPlainString())\n                    .build();\n            sumNormal.add(data);\n        }\n\n        sumNormal = sumNormal.stream().sorted(Comparator.comparing(o -> new BigDecimal(o.getValue()))).collect(Collectors.toList());\n        return RankingUtils.rankingBySortedData(sumNormal, targetMetaData(), sceneCycle.getTime());\n    }\n\n\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/ifund/ranking/deploy/modules/ranking/domain/consts/EtfMetaType.java\npackage com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts;\n\npublic enum EtfMetaType {\n\n    /**\n     * 综合排名\n     */\n    RANKING,\n\n    /**\n     * 综合排名得分数据\n     */\n    RANKING_SCORE,\n\n    /**\n     * 产品营销排名\n     */\n    MARKETING_RANKING,\n\n    /**\n     * 机构排名\n     */\n    INSTITUTION_RANKING,\n\n    /**\n     * 机构营收\n     */\n    INSTITUTION_INCOME,\n\n    /**\n     * 是否合作\n     */\n    COOPERATE,\n\n    /**\n     * 托管收入\n     */\n    CUSTODY_INCOME,\n\n    /**\n     * 货币收入\n     */\n    CURRENCY_INCOME,\n\n    /**\n     * 非货收入\n     */\n    NON_CURRENCY_INCOME,\n\n    /**\n     * 委外收入\n     */\n    OUT_SOURING_INCOME,\n\n\n    /**\n     * 转化率排名\n     */\n    CONVERSION_RANKING,\n<file_path>deploy/src/main/java/com/myhexin/ifund/ranking/deploy/modules/ranking/domain/service/calpoint/fund/FundConversionRankingCalPoint.java\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.FundMetaType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.SceneCycle;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.*;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.entity.ConfigData;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.entity.MetaData;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.service.AbstractCalPoint;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * 转换率排名计算\n *\n * @author jiangliangjian\n */\n@Slf4j\n@Component\npublic class FundConversionRankingCalPoint extends AbstractCalPoint {\n\n    private final CbasQueryConfig queryConfig;\n\n    private final CbasFileService cbasFileService;\n\n    public FundConversionRankingCalPoint(CbasQueryConfig queryConfig, CbasFileService cbasFileService) {\n        this.queryConfig = queryConfig;\n        this.cbasFileService = cbasFileService;\n    }\n\n\n    @Override\n    public List<MetaData> calData(List<Product> productList, Map<String, Map<String, String>> sourceMetaData, Map<String, ConfigData> configData, SceneCycle sceneCycle) {\n        //权重配置(营销统计流量限制-下限)\n        String publicWeight = configData.get(\"publicWeight\").getConfigValue();\n        PublicWeightConfig publicWeightConfig = JSON.parseObject(publicWeight, PublicWeightConfig.class);\n        Integer marketTrafficLimit = Integer.parseInt(publicWeightConfig.getMarketTrafficLimit());\n\n        Map<String, ConversionData> map = queryConversionData(sceneCycle.getTime());\n\n        List<MetaData> conversion = new ArrayList<>();\n        List<MetaData> uvRes = new ArrayList<>();\n        List<MetaData> buyRes = new ArrayList<>();\n        for (Product product : productList) {\n            String code = product.getCode();\n            Integer uv = 0;\n            Integer buy = 0;\n\n            if (map.containsKey(code)) {\n                uv = map.get(code).getUv();\n                buy = map.get(code).getBuy();\n            }\n\n            //处理uv\n            MetaData uvData = MetaData.builder()\n                    .dataType(MetaDataType.builder()\n                            .sceneType(scene())\n                            .metaDataType(EtfMetaType.CONVERSION_UV.name())",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/ifund/ranking/deploy/modules/ranking/domain/service/calpoint/fund/FundMarketRankingCalPoint.java",
    "template": "java",
    "multiRes": {
      "hipilot": "转化率排名\n        Map",
      "CodeQwen2.5-7B": "数据",
      "copilot": "页转化率排名\n        Map",
      "CodeQwen1.5-7B": " 统计流量限制-下限"
    }
  },
  {
    "prefix": "package com.myhexin.sre.change.risk.detected.deploy.modules.audit.infrastructure.external.feign.service.impl;\n\nimport com.myhexin.sre.change.risk.detected.deploy.app.manager.dto.AuditCandidateConditionDTO;\nimport com.myhexin.sre.change.risk.detected.deploy.common.utils.SignParamMapUtils;\nimport com.myhexin.sre.change.risk.detected.deploy.common.utils.dto.ThsCommonParamDTO;\nimport com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.dto.OrganizeDTO;\nimport com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.dto.RoleDTO;\nimport com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.dto.ThsUserDTO;\nimport com.myhexin.sre.change.risk.detected.deploy.modules.audit.infrastructure.external.feign.dto.params.PaasMemberSearchParams;\nimport com.myhexin.sre.change.risk.detected.deploy.modules.audit.infrastructure.external.feign.dto.params.PaasTenantSearchParams;\nimport com.myhexin.sre.change.r",
    "infill": "\"调用PAASzu成员查询，入参：{}，返回：{}\", params, response);\n    }\n    @Overr",
    "suffix": "ide\n    public List<ThsUserDTO> getUserListByRole(AuditCandidateConditionDTO conditionDTO, Integer count) {\n        List<ThsUserDTO> result = new ArrayList<>();\n        //参数传递，获取单个租户的全量成员\n        PaasMemberSearchParams params = PaasMemberSearchParams.of()\n                .setEmailKey(conditionDTO.getKeyword())\n                .setRoleIds(conditionDTO.getRoleKeys())\n                .setTenantIds(conditionDTO.getOrganizeKey());\n        try {\n            PaasMemberListResult response = paasMemberFeign.pageUserSearch(params, getParamMap(null));\n            if (ObjectUtils.isEmpty(response)) {\n                log.warn(\"paasMemberFeign,pageUserSearch结果不存在，入参{}\", params);\n                return result;\n            }\n            if (ObjectUtils.isEmpty(response.getData()) || ObjectUtils.isEmpty(response.getData().getUserList())) {\n                log.debug(\"paasMemberFeign,pageUserSearch结果不存在，入参{}，结果{}\", params, response);\n                return result;\n            }\n            //结果列处理,同邮箱整合角色\n            List<PaasMember> memberList = response.getData().getUserList();\n            Map<String, List<RoleDTO>> maps = memberList.stream().collect(Collectors.groupingBy(\n                    PaasMember::getEmail,\n                    Collectors.mapping(\n                            member -> RoleDTO.of().setRoleKey(String.valueOf(member.getRoleId()))\n                                    .setRoleName(member.getRoleMemo()),\n                            Collectors.toList()\n                    )\n            ));\n            List<PaasMember> distinctMembers = memberList.stream().collect(\n                    Collectors.collectingAndThen(Collectors.toCollection(\n                            () -> new TreeSet<>(Comparator.comparing(PaasMember::getEmail))), ArrayList::new\n                    )\n            );\n            for (PaasMember paasMember : distinctMembers) {\n                ThsUserDTO oneDto = ThsUserDTO.of().setEmail(paasMember.getEmail()).setName(paasMember.getName());\n                if (maps.get(paasMember.getEmail()) != null) {\n                    oneDto.setRoleList(maps.get(paasMember.getEmail()));\n                }\n                //组装结果\n                result.add(oneDto);\n                if (count > 0 && result.size() == count) {\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"调用PAAS成员查询，异常{}，入参：{}\", e, params);\n        }\n        return result;\n    }\n\n    /**\n     * 获取展示的名称\n     *\n     * @param name 名称\n     * @param memo 描述\n     * @return string结果\n     * @author liangliang@myhexin.com\n     */\n    private static String getViewName(String name, String memo) {\n        Matcher matcher = PATTERN.matcher(name);\n        if (Boolean.TRUE.equals(matcher.find()) || ObjectUtils.isEmpty(memo)) {\n            return name;\n        }\n        return memo;\n    }\n\n    /**\n     * 使用ths内部加密签名生成参数\n     *\n     * @return 加密后的参数map\n     * @author liangliang@myhexin.com\n     */\n    private Map<String, Object> getParamMap(Object param) {\n        //通用系统参数\n        ThsCommonParamDTO commonParam = ThsCommonParamDTO.of().setAppKey(key).setSignMethod(SIGN_METHOD).setV(VERSION);\n        return SignParamMapUtils.assembleParamMaps(secret, commonParam, param);\n    }\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/sre/change/risk/detected/deploy/modules/audit/domain/service/AuditCandidateService.java\npackage com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.service;\n\nimport com.myhexin.sre.change.risk.detected.deploy.app.manager.dto.AuditCandidateConditionDTO;\nimport com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.dto.OrganizeDTO;\nimport com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.dto.RoleDTO;\nimport com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.dto.ThsUserDTO;\n\nimport java.util.List;\n\n/**\n * 待选审核人Service\n *\n * @author liangliang@myhexin.com\n * @date 2023/04/17\n */\npublic interface AuditCandidateService {\n\n    /**\n     * 获取接入的审核组织列表\n     *\n     * @return 组织列表（入业务部门列表、paas租户列表）\n     * @author liangliang@myhexin.com\n     */\n    List<OrganizeDTO> getOrganizes();\n\n    /**\n     * 根据组织标识获取其下角色列表\n     *\n     * @param organizeKey 组织唯一标识\n     * @return 角色列表\n     * @author liangliang@myhexin.com\n     */\n    List<RoleDTO> getRoles(String organizeKey);\n\n    /**\n     * 获取审核候选人列表\n     *\n     * @param conditionDTO 搜索条件\n     * @return List<ThsUserDTO> 人员及角色/身份列表\n     * @author liangliang@myhexin.com\n     */\n    List<ThsUserDTO> searchUsers(AuditCandidateConditionDTO conditionDTO);\n\n    /**\n     * 获取默认审核人员\n     *\n     * @param organizeKey 组织ID\n     * @param sort        节点序号\n     * @return 默认审核人员邮箱列表\n     * @author liangliang@myhexin.com\n     */\n    List<String> getOneStepDefaultAuditUsers(String organizeKey, Integer sort);\n\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/risk/detected/deploy/modules/audit/infrastructure/external/feign/inter/PaasMemberFeign.java\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\nimport java.util.Map;\n\n/**\n * Paas平台成员接口Feign\n *\n * @author liangliang@myhexin.com\n * @date 2023/04/17\n */\n@FeignClient(\n        name = \"PaasMemberFeign\",\n        url = \"${addr.paas}\",\n        configuration = ClientConfig.class,\n        fallbackFactory = ThsPaasFeignFallbackFactory.class\n)\npublic interface PaasMemberFeign {\n\n    /**\n     * 获取租户列表\n     *\n     * @param signKeyMap 参数map\n     * @return 租户列表\n     * @author liangliang@myhexin.com\n     */\n    @GetMapping(value = \"/basicapp/tenant/list\")\n    PaasTenantListResult getTenantList(@SpringQueryMap Map<String, Object> signKeyMap);\n\n    /**\n     * 获取租户角色列表\n     *\n     * @param signKeyMap 参数map\n     * @return paas角色列表结果\n     * @author liangliang@myhexin.com\n     */\n    @GetMapping(value = \"/basicapp/role\")\n    PaasRoleListResult getRoleList(@SpringQueryMap Map<String, Object> signKeyMap);\n\n    /**\n     * 通过用户角色查询用户\n     *\n     * @param params     请求参数\n     * @param signKeyMap 加密的参数map\n     * @return paas成员列表结果\n     * @author liangliang@myhexin.com\n     */\n    @PostMapping(value = \"/basicapp/user/userSearch\", headers = \"content-type=application/json\")\n    PaasMemberListResult pageUserSearch(\n            @RequestBody PaasMemberSearchParams params, @SpringQueryMap Map<String, Object> signKeyMap\n    );\n\n    class ClientConfig {\n        @Bean\n        Logger.Level feignLoggerLevel() {\n            return Logger.Level.FULL;\n        }\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/risk/detected/deploy/modules/audit/domain/dto/ThsUserDTO.java\npackage com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.dto;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\nimport org.apache.commons.lang3.ObjectUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * 同花顺用户\n *\n * @author liangliang@myhexin.com\n * @date 2023/04/17\n */\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class ThsUserDTO {\n    /**\n     * 成员姓名\n     */\n    private String name;\n    /**\n     * 成员邮箱\n     */\n    private String email;\n    /**\n     * 角色信息\n     */\n    private List<RoleDTO> roleList;\n\n    public List<RoleDTO> getRoleList() {\n        if (ObjectUtils.isEmpty(this.roleList)) {\n            return new ArrayList<>();\n        }\n        return this.roleList;\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/risk/detected/deploy/modules/audit/domain/service/impl/PaasMemberServiceImpl.java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * PAAS成员-待选审核人Service实现\n *\n * @author liangliang@myhexin.com\n * @date 2023/04/17\n */\n@Slf4j\n@Component(AuditorModeConstant.COMPONENT_PRE + AuditorModeConstant.PAAS)\n@RequiredArgsConstructor\npublic class PaasMemberServiceImpl implements AuditCandidateService {\n\n    /**\n     * 默认返回数量\n     */\n    private static final int DEFAULT_AUDITOR_COUNT = 2;\n\n    private final DefaultAuditRolesProperties defaultAuditRoles;\n\n    private final PaasMemberFeignService paasMemberFeignService;\n\n    @Override\n    public List<OrganizeDTO> getOrganizes() {\n        return paasMemberFeignService.getTenantList(\"\");\n    }\n\n    @Override\n    public List<RoleDTO> getRoles(String organizeKey) {\n        if (ObjectUtils.isEmpty(organizeKey)) {\n            return new ArrayList<>();\n        }\n        //过滤应用级别和不存在的角色类型\n        return paasMemberFeignService.getRoleList(Arrays.asList(\"application\", \"\"));\n    }\n\n    @Override\n    public List<ThsUserDTO> searchUsers(AuditCandidateConditionDTO conditionDTO) {\n        //搜索租户成员\n        if (ObjectUtils.isEmpty(conditionDTO.getOrganizeKey())) {\n            //没有指定租户\n            return new ArrayList<>();\n        }\n        return paasMemberFeignService.getUserListByRole(conditionDTO, 0);\n    }\n\n    @Override\n    public List<String> getOneStepDefaultAuditUsers(String tenantIdStr, Integer sort) {\n        log.info(\"传入的节点序号：{}，租户id：{}\", sort, tenantIdStr);\n        //根据节点顺序获取角色配置\n        String rolesConf = defaultAuditRoles.getPaas().get(sort);\n        if (ObjectUtils.isEmpty(rolesConf)) {\n            log.warn(\"PAAS来源，序号：{}，默认审核配置不存在\", sort);\n            return new ArrayList<>();\n        }\n        AuditCandidateConditionDTO conditionDTO = new AuditCandidateConditionDTO();\n        conditionDTO.setOrganizeKey(tenantIdStr);",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/sre/change/risk/detected/deploy/modules/audit/infrastructure/external/feign/service/impl/PaasMemberFeignServiceImpl.java",
    "template": "java",
    "multiRes": {
      "hipilot": "sre.change.risk.detected.deploy.modules.audit.infrastructure.external.feign.inter.PaasMemberFeign;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;",
      "CodeQwen2.5-7B": "isk.detected.deploy.modules.audit.infrastructure.external.feign.dto.result.PaasMemberListResult;",
      "copilot": "\"调用PAASzu成员查询，入参：{}，返回：{}\", params, response);\n    }\n    @Overr",
      "CodeQwen1.5-7B": "isk.detected.deploy.modules.audit.infrastructure.external.feign.dto.result.PaasMemberListResult;"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.interfaces.rest.query;\n\nimport lombok.Data;\n\n/**\n * 热点池内容查询条件\n * @author ningwenyu@myhexin.com\n * @date 2024/6/19 17:17\n */\n@Data\npublic class HotContentQuery {\n\n    /**\n     * 内容id\n     */\n    private String id;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n\n    /**\n     * 创建者\n     */\n    private String creator;\n\n    /**\n     * 当前页\n     */",
    "infill": "private Integer page;\n\n    /**\n     * 页大小\n     */\n    private Integer pageSize;\n\n    /**\n     * 榜单状态\n     */\n    private Integer status;\n}\n",
    "suffix": "",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/controller/HotContentOperatingController.java\npackage com.myhexin.community.operating.deploy.interfaces.rest.controller;\n\nimport com.myhexin.community.operating.deploy.app.manager.HotContentOperatingManager;\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.vo.BaseResponseVO;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * 内容池 -- Controller\n * @author ningwenyu@myhexin.com\n * @date 2024/6/17 21:50\n */\n@RestController\n@RequestMapping(\"/auth/api/hot_module/v1/hot_content\")\n@RequiredArgsConstructor\npublic class HotContentOperatingController {\n    private final HotContentOperatingManager hotContentOperatingManager;\n    \n    @GetMapping(\"get_hot_content_pool\")\n    public BaseResponseVO<HotContentDTO> getHotContentPool(@RequestBody HotContentQuery hotContentQuery) {\n        return null;\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/HotContentOperatingManager.java\npackage com.myhexin.community.operating.deploy.app.manager;\n\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Component;\n\n/**\n * Manager类\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 20:48\n */\n@Component\n@RequiredArgsConstructor\npublic class HotContentOperatingManager {\n    private final HotContentOperatingService hotContentOperatingService;\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/dto/hottopic/HotContentDTO.java\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 20:34\n */\n\n@Data\npublic class HotContentDTO {\n\n    /**\n     * 内容id\n     */\n    private String id;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n\n    /**\n     * 标题\n     */\n    private String title;\n\n    /**\n     * 内容描述\n     */\n    private String descripion;\n\n    /**\n     * 标签类型\n     */\n    private Integer labelType;\n\n    /**\n     * 标签的背景颜色\n     */\n    private String labelBackgroundColor;\n\n    /**\n     * 标签的文字颜色\n     */\n    private String labelWordColor;\n\n    /**\n     * 标签名称\n     */\n    private String labelName;\n\n    /**\n     * 内容跳转链接\n     */\n    private String jumpUrl;\n\n    /**\n     * 创建时间\n     */\n    private Long ctime;\n\n    /**\n     * 修改时间\n     */\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/infrastructure/db/model/HotContentDO.java\n * @author ningwenyu@myhexin.com\n * @date 2024/6/19 9:59\n */\n@Data\n@Document(\"hot_content\")\npublic class HotContentDO {\n\n    /**\n     * 主键Id\n     */\n    @Id\n    private String id;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n\n    /**\n     * 标题\n     */\n    private String title;\n\n    /**\n     * 内容描述\n     */\n    private String descripion;\n\n    /**\n     * 标签类型\n     */\n    private Integer labelType;\n\n    /**\n     * 标签的背景颜色\n     */\n    private String labelBackgroundColor;\n\n    /**\n     * 标签的文字颜色\n     */\n    private String labelWordColor;\n\n    /**\n     * 标签名称\n     */\n    private String labelName;\n\n    /**\n     * 内容跳转链接\n     */\n    private String jumpUrl;\n\n    /**\n     * 创建时间\n     */\n    private Long ctime;\n\n    /**\n     * 修改时间",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/query/HotContentQuery.java",
    "template": "java",
    "multiRes": {
      "hipilot": "private Integer page;",
      "CodeQwen2.5-7B": "",
      "copilot": "private Integer page;\n\n    /**\n     * 页大小\n     */\n    private Integer pageSize;\n\n    /**\n     * 榜单状态\n     */\n    private Integer status;\n}\n",
      "CodeQwen1.5-7B": " "
    }
  },
  {
    "prefix": "package com.myhexin.sre.change.event.deploy.modules.plane.domain.aggregates;\n\nimport com.myhexin.sre.change.event.deploy.interfaces.rest.query.ChangePlanStartRequest;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.entity.ChangeExePlanId;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.entity.ChangeExeScene;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.valueobjects.*;\nimport lombok.Data;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n/**\n * 变更执行计划单\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/22\n */\n@Data\npublic class ChangeExePlan {\n    /**\n     * 变更执行计划单ID\n     */\n    private ChangeExePlanId planId;\n    /**\n     * 变更执行计划单创建人\n     */\n    private String creator;\n    /**\n     * 变更执行开始时间\n     */\n    private LocalDateTime startTime;\n    /**\n     * 变更执行计划单执行人\n     */\n    private String executor;\n    /**\n     * 变更执行完成时间\n     */\n    private LocalDateTime finishTime;\n    /**\n     * 变更原因\n     */\n    private String reason;\n    /**\n     * 变更环境\n     */\n    private String env;\n    /**\n     * 变更源变更工单/记录唯一ID\n     */\n    private String bizOrderId;\n    /**\n     * 变更执行需要的参数\n     */\n    private String paramsJson;\n    /**\n     * 变更执行详情json\n     */\n    private String detailJson;\n    /**\n     * 变更执行场景\n     */\n    private ChangeExeScene scene;\n    /**\n     * 变更执行灰度信息\n     */\n    private ExePlanGrayInfo grayInfo;\n    /**\n     * 变更执行主体\n     */\n    private List<ExePlanInstance> instances;\n    /**\n     * 变更执行详情\n     */\n    private List<ExePlanDetailItem> detailItems;\n    /**\n     * 变更执行部署\n     */\n    private List<ExePlanDeployment> deployments;\n    /**\n     * 变更执行部门\n     */\n    private ExePlanDepartment department;\n    /**\n     * 变更执行状态\n     */\n    private ExePlanStatus status;\n\n    public ChangeExePlan(ChangePlanStartRequest request) {\n        this.creator = request.getCreator();\n        this.executor = request.getExecutor();\n        this.reason = request.getReason();\n        this.env = request.getEnv();\n        this.bizOrderId = request.getUni();\n        this.paramsJson",
    "infill": " = request.getParamsJson();\n        this.detailJson = request.getChangeDetailJson();\n        this.startTime",
    "suffix": " = LocalDateTime.parse(request.getStartTime());\n\n    }\n    \n    \n\n\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/query/ChangeBaseRequest.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\n\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Size;\n\n\n/**\n * 变更统一接入参数基类\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangeBaseRequest {\n    @NotNull(message = \"变更源不能为空\")\n    @Size(max = 32)\n    private String platform;\n    @NotNull(message = \"变更源记录ID不能为空\")\n    @Size(max = 256)\n    private String uni;\n    @NotNull(message = \"变更环境不能为空\")\n    @Size(max = 16)\n    private String env;\n    @NotNull(message = \"变更场景不能为空\")\n    @Size(max = 128)\n    private String sceneCode;\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/service/ChangeExePlanService.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.service;\n\nimport com.myhexin.sre.change.event.deploy.interfaces.rest.query.ChangePlanStartRequest;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.aggregates.ChangeExePlan;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.repository.ChangeExePlanRepository;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n@Slf4j\n@Service\n@RequiredArgsConstructor\npublic class ChangeExePlanService {\n\n    private final ChangeExePlanRepository changeExePlanRepositoryImpl;\n    public ChangeExePlan createChangeExePlan(ChangePlanStartRequest request) {\n        ChangeExePlan changeExePlan = new ChangeExePlan(request);\n        Long planId = changeExePlanRepositoryImpl.save(changeExePlan);\n        changeExePlan.getPlanId().setPlanId(planId);\n        return changeExePlan;\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/query/ChangePlanStartRequest.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport javax.validation.constraints.NotNull;\n\n\n/**\n * 变更执行单请求\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n\n@Data\n@EqualsAndHashCode(callSuper = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangePlanStartRequest extends ChangePlanRequest {\n    /**\n     * 变更开始时间\n     */\n    private String startTime;\n    /**\n     * 变更完成时间\n     */\n    private String finishTime;\n    /**\n     * 变更执行人\n     */\n    @NotNull(message = \"变更执行人不能为空\")\n    private String executor;\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/query/ChangePlanRequest.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Size;\n\n\n/**\n * 变更执行单请求\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n\n@Data\n@EqualsAndHashCode(callSuper = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangePlanRequest extends ChangeBaseRequest{\n    @Size(max = 256)\n    private String reason;\n    @NotNull(message = \"变更发起人不能为空\")\n    private String creator;\n    @Size(max = 512)\n    private String bizUrl;\n    @NotEmpty(message = \"变更主体实例不能为空\")\n    private ChangeInstance[] instances;\n    private ChangeDeployment[] deployments;\n    @NotNull(message = \"变更所属组织信息不能为空\")\n    private ChangeDepartment department;\n    private String changeParamsJson;\n    private String changeDetailJson;\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/aggregates/ChangeExePlan.java",
    "template": "java",
    "multiRes": {
      "hipilot": "= request.getChangeParamsJson();\n        this.detailJson = request.getChangeDetailJson();",
      "CodeQwen2.5-7B": " = request.getParamsJson();",
      "copilot": " = request.getParamsJson();\n        this.detailJson = request.getChangeDetailJson();\n        this.startTime",
      "CodeQwen1.5-7B": " =request.getParamsJson();"
    }
  },
  {
    "prefix": "package org.example.lx.test;\n\n/**\n * @author lixi\n * @since 2024/5/23 20:23\n * @description\n */\npublic class LxTest {\n\n    public static void main(String[] args) {\n        // 获取mac地址\n        String mac = getMac();\n    }\n    \n    // 获取mac地址",
    "infill": "public static String getMac() {\n        return \"00-00-00-00-00-00\";\n    }\n    \n   ",
    "suffix": " // 二分查找\n    public static int binarySearch(int[] arr, int target) {\n        int left = 0;\n        int right = arr.length - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (arr[mid] == target) {\n                return mid;\n            } else if (arr[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return -1;\n    }\n\n    // 快速排序\n    public static void quickSort(int[] arr, int left, int right) {\n        if (left >= right) {\n            return;\n        }\n        int pivot = partition(arr, left, right);\n        quickSort(arr, left, pivot - 1);\n        quickSort(arr, pivot + 1, right);\n    }\n\n    private static int partition(int[] arr, int left, int right) {\n        int pivot = arr[right];\n        int i = left;\n        for (int j = left; j < right; j++) {\n            if (arr[j] < pivot) {\n                swap(arr, i, j);\n                i++;\n            }\n        }\n        swap(arr, i, right);\n        return i;\n    }\n\n    private static void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n}\n",
    "relevantFile": "<file_path>src/main/java/org/example/Main.java\npackage org.example;\n\nimport org.apache.commons.codec.digest.DigestUtils;\nimport org.bouncycastle.jcajce.provider.digest.SHA3;\nimport org.bouncycastle.util.encoders.Hex;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Base64;\n\nimport static org.apache.commons.codec.digest.DigestUtils.sha3_256;\n\n/**\n * @author lixi\n * @since 2024/5/23 16:43\n * @description\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        String id = \"516a36d9-6a3b-46c9-a629-6e53f6496296\";\n        // 对id进行base64加密\n        String base64Id = Base64.getEncoder().encodeToString(id.getBytes());\n        System.out.println(base64Id);\n        // 对id用MD5加密\n        String md5Id = DigestUtils.md5Hex(id);\n        System.out.println(md5Id);\n        // sha-256\n        String sha256Id = sha256(id);\n        System.out.println(sha256Id);\n        String sha3Id = sha3_256(id);\n        System.out.println(sha3Id);\n    }\n\n    public static String sha3_256(String data) {\n        SHA3.DigestSHA3 digestSHA3 = new SHA3.Digest256();\n        byte[] digest = digestSHA3.digest(data.getBytes());\n        return Hex.toHexString(digest);\n    }\n\n\n    public static String sha256(String data) {\n        StringBuilder hexString = new StringBuilder();\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = digest.digest(data.getBytes(StandardCharsets.UTF_8));\n            for (byte b : hash) {\n                String hex = Integer.toHexString(0xff & b);\n                if (hex.length() == 1) hexString.append('0');\n                hexString.append(hex);\n            }\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return hexString.toString();\n    }\n\n    public static String sha384(String data) {\n        return hash(data, \"SHA-384\");",
    "relevantFileList": [],
    "filePath": "src/main/java/org/example/lx/test/LxTest.java",
    "template": "java",
    "multiRes": {
      "hipilot": "方法\n    public static String getMac() {\n        return \"\";\n    }",
      "CodeQwen2.5-7B": "",
      "copilot": "public static String getMac() {\n        return \"00-00-00-00-00-00\";\n    }\n    \n   ",
      "CodeQwen1.5-7B": " "
    }
  },
  {
    "prefix": "package com.myhexin.sre.change.event.deploy.modules.plane.domain.dto;\n\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.entity.ChangeInstance;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\npublic class ChangePlanModel {\n    private LocalDateTime startTime;\n    private LocalDateTime finishTime;\n    private String uni;\n    private String platform;\n    private String reason;\n    private String bizUrl;\n    private String env;\n    private String creator;\n    private String executor;\n    private Boolean grayFla",
    "infill": "g;\n    private List<ChangeIns",
    "suffix": "tance> changeInstances;\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/query/ChangeBaseRequest.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\n\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Size;\n\n\n/**\n * 变更统一接入参数基类\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangeBaseRequest {\n    @NotNull(message = \"变更源不能为空\")\n    @Size(max = 32)\n    private String platform;\n    @NotNull(message = \"变更源记录ID不能为空\")\n    @Size(max = 256)\n    private String uni;\n    @NotNull(message = \"变更环境不能为空\")\n    @Size(max = 16)\n    private String env;\n    @NotNull(message = \"变更场景不能为空\")\n    @Size(max = 128)\n    private String sceneCode;\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/risk/detected/deploy/modules/riskdetercted/infrastructure/external/feign/service/ThsCmdbFeignService.java\npackage com.myhexin.sre.change.risk.detected.deploy.modules.riskdetercted.infrastructure.external.feign.service;\n\nimport com.myhexin.sre.change.risk.detected.deploy.modules.riskdetercted.domain.dto.SecurityInfoDTO;\nimport com.myhexin.sre.change.risk.detected.deploy.modules.riskdetercted.infrastructure.external.feign.dto.result.CmdbDependenciesResult.DependenceData;\nimport com.myhexin.sre.change.risk.detected.deploy.modules.riskdetercted.infrastructure.external.feign.dto.result.CmdbProgramVersionResult.ProgramVersionData;\n\nimport java.util.List;\n\n/**\n * cmdb接口服务防腐层\n *\n * @author liangliang@myhexin.com\n * @date 2023/03/13\n */\npublic interface ThsCmdbFeignService {\n\n    /**\n     * 根据程序名获取版本数据\n     *\n     * @param pName 程序名\n     * @return 程序版本数据\n     * @author liangliang@myhexin.com\n     */\n    List<ProgramVersionData> getProgramVersion(String pName);\n\n    /**\n     * 根据程序名与版本号获取依赖关系\n     *\n     * @param pName   程序名\n     * @param version 版本号（program_version）\n     * @return 该版本的程序依赖关系\n     * @author liangliang@myhexin.com\n     */\n    List<DependenceData> getDependencies(String pName, String version);\n\n    /**\n     * 根据程序名与版本号获取安全扫描信息\n     * @param pName 程序名\n     * @param version 版本号\n     * @return 安全扫描信息\n     */\n    SecurityInfoDTO getSecurityInfo(String pName, String version);\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/query/ChangeInstance.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\n\nimport java.util.List;\n\n\n/**\n * 变更统一接入变管控G0-变更主体\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangeInstance {\n    private String instanceName;\n    private String instanceType;\n    private List<String> deploymentName;\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/entity/ChangeInstance.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.entity;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * 变更计划关联变更主体\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n@Data\npublic class ChangeInstance {\n    /**\n     * 主体名\n     */\n    private String name;\n    /**\n     * 主体类型\n     */\n    private String type;\n    /**\n     * 部署名称列表\n     */\n    private List<String> deploymentName;\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/dto/ChangePlanModel.java",
    "template": "java",
    "multiRes": {
      "hipilot": "g;\n    private String grayStrategy;",
      "CodeQwen2.5-7B": "g;",
      "copilot": "g;\n    private List<ChangeIns",
      "CodeQwen1.5-7B": "g;"
    }
  },
  {
    "prefix": "package com.myhexin.news.feign.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * 模型翻译的接口出参\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 22:44\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ModelTranslateRequest {\n    /**\n     * 参数\n     */",
    "infill": "\n    pri",
    "suffix": "vate String param;\n\n    public ModelTranslateRequest(String )\n}\n",
    "relevantFile": "<file_path>news-f10-service/src/main/java/com/myhexin/news/feign/fallback/ModelTranslateFeignFallbackFactory.java\npackage com.myhexin.news.feign.fallback;\n\nimport com.jqka.ovse.framework.common.bean.LogItem;\nimport com.jqka.ovse.framework.common.util.OvseStatsLog;\nimport com.myhexin.news.constant.LogMessage;\nimport com.myhexin.news.constant.NewsFlashConstant;\nimport com.myhexin.news.feign.ModelTranslateFeign;\nimport com.myhexin.news.feign.response.ModelTranslateResponse;\nimport org.springframework.cloud.openfeign.FallbackFactory;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author lihe2@myhexin.com\n * @date 2024/6/26 22:14\n *\n * TODO output的协议待完善\n */\n@Component\npublic class ModelTranslateFeignFallbackFactory implements FallbackFactory<ModelTranslateFeign> {\n    private static final ModelTranslateResponse DEFAULT_OUTPUT = new ModelTranslateResponse();\n\n    private static final ModelTranslateFeign FALLBACK = param -> DEFAULT_OUTPUT;\n\n    @Override\n    public ModelTranslateFeign create(Throwable throwable) {\n        LogItem instance = LogItem.getInstance();\n        instance.add(\"content\", \"ModelTranslateFeign:modelTranslate()模型翻译接口调用失败, 降级处理. msg = \" + throwable.getMessage());\n        OvseStatsLog.error(NewsFlashConstant.BUSINESS_NAME, LogMessage.NEWS_TRANSLATE, instance, throwable);\n        return FALLBACK;\n    }\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/feign/ModelTranslateFeign.java\npackage com.myhexin.news.feign;\n\nimport com.myhexin.news.feign.fallback.ModelTranslateFeignFallbackFactory;\nimport com.myhexin.news.feign.response.ModelTranslateResponse;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n/**\n * 模型翻译的feign\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 22:11\n *\n * TODO url的配置 待完善\n */\n@FeignClient(\n        name = \"modelTranslateFeign\",\n        url = \"${news.translate.url:http://speech.ths8.com:10020}\",\n        fallbackFactory = ModelTranslateFeignFallbackFactory.class\n)\npublic interface ModelTranslateFeign {\n\n    /**\n     * 模型翻译\n     *\n     * @param param 参数\n     * @return 返回\n     *\n     * TODO 接口的uri待完善\n     */\n    @PostMapping(value = \"${news.translate.api:/translateConnection/model/translate}\",\n            consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)\n    ModelTranslateResponse modelTranslate(@RequestParam(\"param\") String param);\n}\n<file_path>src/main/java/com/myhexin/zixun/application/manager/flash/news/external/feign/dto/TextSummaryInput.java\npackage com.myhexin.zixun.application.manager.flash.news.external.feign.dto;\n\nimport com.alibaba.fastjson.JSON;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\nimport java.io.Serializable;\n\n/**\n * 文本精简接口入参\n *\n * @author lihe2@myhexin.com\n * @date 2024/3/28 15:57\n */\n@Data\n@Accessors(chain = true)\npublic class TextSummaryInput implements Serializable {\n    private static final long serialVersionUID = -7123821614322339842L;\n    /**\n     * input入参\n     */\n    private String input;\n\n    public TextSummaryInput(String text) {\n        this.input = JSON.toJSONString(new TextSummaryInputBean(text));\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class TextSummaryInputBean implements Serializable {\n        private static final long serialVersionUID = 3929973689786768309L;\n        /**\n         * 文本入参\n         */\n        private String text;\n    }\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/feign/response/ModelTranslateResponse.java\npackage com.myhexin.news.feign.response;\n\nimport cn.hutool.core.util.StrUtil;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n/**\n * 模型翻译的接口出参\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 22:09\n */\n@Data\n@Accessors(chain = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class ModelTranslateResponse {\n    @JsonProperty(\"code\")\n    private Integer statusCode;\n\n    @JsonProperty(\"note\")\n    private String statusMsg;\n\n    private String data;\n\n    /**\n     * 是否失败\n     * @return 是否失败\n     */\n    public boolean failed() {\n        return !Integer.valueOf(0).equals(statusCode) || StrUtil.isEmpty(data);\n    }\n}",
    "relevantFileList": [],
    "filePath": "news-f10-service/src/main/java/com/myhexin/news/feign/request/ModelTranslateRequest.java",
    "template": "java",
    "multiRes": {
      "hipilot": "pri",
      "CodeQwen2.5-7B": "",
      "copilot": "\n    pri",
      "CodeQwen1.5-7B": ""
    }
  },
  {
    "prefix": "package com.myhexin.community.user.medal.deploy.interfaces.rest.converter;\n\nimport com.myhexin.community.user.medal.deploy.modules.historymedal.domain.dto.UserHistoryMedalDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.*;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.Medal;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalCategory;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalSeries;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.UserMedal;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.Named;\nimport org.mapstruct.factory.Mappers;\n\nimport java.util.Optional;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/4/24 20:16\n */\n@Mapper(imports = {Optional.class})\npublic interface MedalConvert {\n\n    MedalConvert INSTANCE = Mappers.getMapper(MedalConvert.class);\n\n    /**\n     * 用户勋章DTO转换\n     *\n     * @param userMedal 原始用户勋章信息\n     * @return 用户勋章DTO\n     */\n    UserMedalDTO toUserMedalDTO(UserMedal userMedal);\n\n    /**\n     * 勋章DTO转换\n     *\n     * @param medal 勋章\n     * @return 勋章DTO\n     */\n    MedalDTO toMedalDTO(Medal medal);\n\n    /**\n     * 勋章系列DTO转换\n     *\n     * @param medalSeries 勋章系列\n     * @return 勋章系列DTO\n     */\n    MedalSeriesDTO toMedalSeriesDTO(MedalSeries medalSeries);\n\n    /**\n     * ",
    "infill": "勋章类别DTO转换\n     *\n     *",
    "suffix": " @param medalCategory 勋章类别\n     * @return 勋章类别DTO\n     */\n    @Mapping(target = \"categoryRank\", expression = \"java(Optional.ofNullable(medalCategory.getCategoryRank()).orElse(0))\")\n    MedalCategoryDTO toMedalCategoryDTO(MedalCategory medalCategory);\n\n\n    /**\n     * 将历史勋章系列转换至新版返回值\n     *\n     * @param userHistoryMedalDTO 原始历史勋章信息\n     * @return 新版返回值\n     */\n    @Mapping(target = \"level\", source = \"medalLevel\", qualifiedByName = \"levelToInt\")\n    @Mapping(target = \"medalName\", source = \"medalName\")\n    @Mapping(target = \"logoUrl\", source = \"logoUrl\")\n    @Mapping(target = \"acquisitionTime\", source = \"acquiredMedalTime\")\n    @Mapping(target = \"acquisitionCriteria\", source = \"condition\")\n    UserMedalDetailResultDTO.UserMedalDetailInfo toUserMedalDetailInfo(UserHistoryMedalDTO userHistoryMedalDTO);\n\n    /**\n     * 将旧版勋章的level由拼接形式转换为纯等级形式\n     *\n     * @param level 等级\n     * @return int型等级\n     */\n    @Named(\"levelToInt\")\n    default Integer levelToInt(String level) {\n        if (level != null && level.contains(\"_\")) {\n            return Integer.parseInt(level.split(\"_\")[1]);\n        }\n        return null;\n    }\n}\n",
    "relevantFile": "<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/infrastructure/db/model/MedalCategory.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model;\n\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\n\n/**\n * 勋章类别表(com.myhexin.community.user.medal.deploy.modules.medal.domain.enums.MedalCategory)表实体类\n *\n * @author makejava\n * @since 2024-04-23 19:56:55\n */\n@Data\n@EqualsAndHashCode(callSuper = false)\n@SuppressWarnings(\"serial\")\npublic class MedalCategory extends Model<MedalCategory> {\n\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    /**\n     * 类别名称，如“股东勋章”\n     */\n    private String name;\n\n    /**\n     * 描述，勋章备注\n     */\n    private String description;\n\n    /**\n     * 勋章类别排序\n     */\n    private Integer categoryRank;\n\n    /**\n     * 勋章类别类型 common 普通勋章 gudong 股东勋章\n     */\n    private String type;\n\n    /**\n     * 勋章类别是否生效，有效（valid）、无效（invalid）\n     */\n    private String validStatus;\n\n    /**\n     * 创建时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 更新时间\n     */\n    private LocalDateTime utime;\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalDTO.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.dto;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.time.LocalDateTime;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 13:06\n */\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class MedalDTO {\n\n    /**\n     * id\n     */\n    private Integer medalId;\n\n    /**\n     * 获取条件\n     */\n    private String acquisitionCriteria;\n\n    /**\n     * 获取时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 描述\n     */\n    private String description;\n\n    /**\n     * 扩展字段\n     */\n    private String ext;\n\n    /**\n     * logo地址\n     */\n    private String logoUrl;\n\n    /**\n     * 等级\n     */\n    private Integer medalLevel;\n\n    /**\n     * 勋章名称\n     */\n    private String medalName;\n\n    /**\n     * 勋章系列id\n     */\n    private Integer seriesId;\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalCategoryDTO.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.dto;\n\nimport lombok.Data;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 11:10\n */\n@Data\npublic class MedalCategoryDTO {\n\n    /**\n     * 奖章类别ID\n     */\n    private Integer id;\n\n    /**\n     * 名称\n     */\n    private String name;\n    /**\n     * 类别描述\n     */\n    private String description;\n\n    /**\n     * 有效状态（valid：有效；invalid：无效）\n     */\n    private String validStatus;\n\n    /**\n     * 奖章类型（common：普通；activity：特殊）\n     */\n    private String medalType;\n\n    /**\n     * 勋章类别创建时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 勋章类别更新时间\n     */\n    private LocalDateTime utime;\n\n    /**\n     * 勋章系列列表\n     */\n    private List<MedalSeriesDTO> medalSeriesList;\n\n    /**\n     * 勋章类别排序\n     */\n    private Integer categoryRank;\n\n    /**\n     * 勋章类别类型 common 普通勋章 gudong 股东勋章\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalWallDTO.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.dto;\n\nimport com.myhexin.community.user.medal.deploy.interfaces.rest.converter.MedalConvert;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalCategory;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.po.MedalWallInfoPO;\nimport lombok.Data;\nimport org.apache.commons.lang3.math.NumberUtils;\n\nimport java.util.*;\n\n/**\n * 勋章墙DTO类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 15:08\n */\n@Data\npublic class MedalWallDTO {\n\n    /**\n     * 勋章类型列表\n     */\n    private List<MedalCategoryInfo> categoryList;\n\n    @Data\n    public static class MedalCategoryInfo {\n        /**\n         * 勋章类别详情\n         */\n        private MedalCategoryDTO medalCategoryDTO;\n\n        /**\n         * 勋章系列列表\n         */\n        List<MedalSeriesInfo> seriesList;\n\n        @Data\n        public static class MedalSeriesInfo {\n\n            /**\n             * 勋章系列详情\n             */\n            private MedalSeriesDTO medalSeriesDTO;\n\n            /**\n             * 勋章详情\n             */\n            private List<MedalDTO> medalList;\n        }\n    }\n\n\n    /**\n     * 转化为勋章墙格式\n     *\n     * @param medalCategoryList 所有勋章分类\n     * @param medalWallInfoList 连表查询返回值\n     * @return 勋章墙DTO对象\n     */\n    public static MedalWallDTO mapMedalsToWallDTO(List<MedalCategory> medalCategoryList,",
    "relevantFileList": [],
    "filePath": "src/main/java/com/myhexin/community/user/medal/deploy/interfaces/rest/converter/MedalConvert.java",
    "template": "java",
    "multiRes": {
      "hipilot": "勋章类别DTO转换\n     *\n     *",
      "CodeQwen2.5-7B": "勋章类别DTO转换",
      "copilot": "勋章类别DTO转换\n     *\n     *",
      "CodeQwen1.5-7B": " 勋章类别DTO转换"
    }
  },
  {
    "prefix": "package com.myhexin.community.user.medal.deploy.interfaces.rest.converter;\n\nimport com.myhexin.community.user.medal.deploy.modules.historymedal.domain.dto.UserHistoryMedalDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.*;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.Medal;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalCategory;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalSeries;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.UserMedal;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.Named;\nimport org.mapstruct.factory.Mappers;\n\nimport java.util.Optional;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/4/24 20:16\n */\n@Mapper(imports = {Optional.class})\npublic interface MedalConvert {\n\n    MedalConvert INSTANCE = Mappers.getMapper(MedalConvert.class);\n\n    /**\n     * 用户勋章DTO转换\n     *\n     * @param userMedal 原始用户勋章信息\n     * @return 用户勋章DTO\n     */\n    UserMedalDTO toUserMedalDTO(UserMedal userMedal);\n    \n    MedalDTO toMedalDTO(Medal medal);\n    \n    MedalSeriesDTO toMedalSeriesDTO(MedalSeries medalSeries);\n    \n    @Mapping(target = \"categoryRank\", expression = \"java(Optional.ofN",
    "infill": "ullable(medalCategory.getCategoryRank()).orElse(0))\")\n    MedalCategoryDTO toMedalCategoryDTO(MedalCategory medalCategory",
    "suffix": ");\n    \n\n    /**\n     * 将历史勋章系列转换至新版返回值\n     *\n     * @param userHistoryMedalDTO 原始历史勋章信息\n     * @return 新版返回值\n     */\n\n    @Mapping(target = \"level\", source = \"medalLevel\", qualifiedByName = \"levelToInt\")\n    @Mapping(target = \"medalName\", source = \"medalName\")\n    @Mapping(target = \"logoUrl\", source = \"logoUrl\")\n    @Mapping(target = \"acquisitionTime\", source = \"acquiredMedalTime\")\n    @Mapping(target = \"acquisitionCriteria\", source = \"condition\")\n    UserMedalDetailResultDTO.UserMedalDetailInfo toUserMedalDetailInfo(UserHistoryMedalDTO userHistoryMedalDTO);\n\n    /**\n     * 将旧版勋章的level由拼接形式转换为纯等级形式\n     *\n     * @param level 等级\n     * @return int型等级\n     */\n    @Named(\"levelToInt\")\n    default Integer levelToInt(String level) {\n        if (level != null && level.contains(\"_\")) {\n            return Integer.parseInt(level.split(\"_\")[1]);\n        }\n        return null;\n    }\n}\n",
    "relevantFile": "<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/infrastructure/db/model/MedalCategory.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model;\n\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\n\n/**\n * 勋章类别表(com.myhexin.community.user.medal.deploy.modules.medal.domain.enums.MedalCategory)表实体类\n *\n * @author makejava\n * @since 2024-04-23 19:56:55\n */\n@Data\n@EqualsAndHashCode(callSuper = false)\n@SuppressWarnings(\"serial\")\npublic class MedalCategory extends Model<MedalCategory> {\n\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    /**\n     * 类别名称，如“股东勋章”\n     */\n    private String name;\n\n    /**\n     * 描述，勋章备注\n     */\n    private String description;\n\n    /**\n     * 勋章类别排序\n     */\n    private Integer categoryRank;\n\n    /**\n     * 勋章类别类型 common 普通勋章 gudong 股东勋章\n     */\n    private String type;\n\n    /**\n     * 勋章类别是否生效，有效（valid）、无效（invalid）\n     */\n    private String validStatus;\n\n    /**\n     * 创建时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 更新时间\n     */\n    private LocalDateTime utime;\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalDTO.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.dto;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.time.LocalDateTime;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 13:06\n */\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class MedalDTO {\n\n    /**\n     * id\n     */\n    private Integer medalId;\n\n    /**\n     * 获取条件\n     */\n    private String acquisitionCriteria;\n\n    /**\n     * 获取时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 描述\n     */\n    private String description;\n\n    /**\n     * 扩展字段\n     */\n    private String ext;\n\n    /**\n     * logo地址\n     */\n    private String logoUrl;\n\n    /**\n     * 等级\n     */\n    private Integer medalLevel;\n\n    /**\n     * 勋章名称\n     */\n    private String medalName;\n\n    /**\n     * 勋章系列id\n     */\n    private Integer seriesId;\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalCategoryDTO.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.dto;\n\nimport lombok.Data;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 11:10\n */\n@Data\npublic class MedalCategoryDTO {\n\n    /**\n     * 奖章类别ID\n     */\n    private Integer id;\n\n    /**\n     * 名称\n     */\n    private String name;\n    /**\n     * 类别描述\n     */\n    private String description;\n\n    /**\n     * 有效状态（valid：有效；invalid：无效）\n     */\n    private String validStatus;\n\n    /**\n     * 奖章类型（common：普通；activity：特殊）\n     */\n    private String medalType;\n\n    /**\n     * 勋章类别创建时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 勋章类别更新时间\n     */\n    private LocalDateTime utime;\n\n    /**\n     * 勋章系列列表\n     */\n    private List<MedalSeriesDTO> medalSeriesList;\n\n    /**\n     * 勋章类别排序\n     */\n    private Integer categoryRank;\n\n    /**\n     * 勋章类别类型 common 普通勋章 gudong 股东勋章\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalWallDTO.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.dto;\n\nimport com.myhexin.community.user.medal.deploy.interfaces.rest.converter.MedalConvert;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalCategory;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.po.MedalWallInfoPO;\nimport lombok.Data;\nimport org.apache.commons.lang3.math.NumberUtils;\n\nimport java.util.*;\n\n/**\n * 勋章墙DTO类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 15:08\n */\n@Data\npublic class MedalWallDTO {\n\n    /**\n     * 勋章类型列表\n     */\n    private List<MedalCategoryInfo> categoryList;\n\n    @Data\n    public static class MedalCategoryInfo {\n        /**\n         * 勋章类别详情\n         */\n        private MedalCategoryDTO medalCategoryDTO;\n\n        /**\n         * 勋章系列列表\n         */\n        List<MedalSeriesInfo> seriesList;\n\n        @Data\n        public static class MedalSeriesInfo {\n\n            /**\n             * 勋章系列详情\n             */\n            private MedalSeriesDTO medalSeriesDTO;\n\n            /**\n             * 勋章详情\n             */\n            private List<MedalDTO> medalList;\n        }\n    }\n\n\n    /**\n     * 转化为勋章墙格式\n     *\n     * @param medalCategoryList 所有勋章分类\n     * @param medalWallInfoList 连表查询返回值\n     * @return 勋章墙DTO对象\n     */\n    public static MedalWallDTO mapMedalsToWallDTO(List<MedalCategory> medalCategoryList,",
    "relevantFileList": [],
    "filePath": "src/main/java/com/myhexin/community/user/medal/deploy/interfaces/rest/converter/MedalConvert.java",
    "template": "java",
    "multiRes": {
      "hipilot": "(medalCategory.getCategoryRank())",
      "CodeQwen2.5-7B": "ullable(medalCategory.getCategoryRank()).orElse(0))\")",
      "copilot": "ullable(medalCategory.getCategoryRank()).orElse(0))\")\n    MedalCategoryDTO toMedalCategoryDTO(MedalCategory medalCategory",
      "CodeQwen1.5-7B": " ullable(userMedal.getCategoryRank()).orElse(0))\")"
    }
  },
  {
    "prefix": "package com.myhexin.news.factory.translation;\n\nimport com.myhexin.news.common.dto.NewsTranslateResult;\nimport com.myhexin.news.common.util.spring.SpringContextHolder;\nimport com.myhexin.news.dto.translate.ModelTranslateRequestDTO;\nimport com.myhexin.news.dto.translate.ModelTranslateResultDTO;\nimport com.myhexin.news.feign.ModelTranslateFeign;\nimport com.myhexin.news.feign.request.ModelTranslateFeignRequest;\nimport com.myhexin.news.feign.response.ModelTranslateFeignResponse;\nimport com.myhexin.news.properties.NewsProperty;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.List;\n\n/**\n * 大模型翻译实现\n * 泰语、葡萄牙语、阿拉伯语 翻译的实现（直接继承此接口）\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:45\n */\npublic class ModelTranslateMode extends AbstractTranslateMode {\n    protected static NewsProperty newsProperty = SpringContextHolder.getBean(\"newsProperty\");\n\n    private static ModelTranslateFeign modelTranslateFeign = SpringContextHolder.getBean(\"modelTranslateFeign\");\n\n    @Override\n    public NewsTranslateResult translateData(List<String> content, int retry) {\n\n        ModelTranslateRequestDTO requestDTO = this.buildRequest(content);\n\n        final ModelTranslateResultDTO modelTranslateResultDTO = this.modelTranslate(requestDTO);\n\n        return this.buildResult(modelTranslateResultDTO);\n    }\n\n    /**\n     * 组装大模型接口请求的参数\n     * @param content 待翻译内容\n     * @return 大模型接口请求的参数\n     */\n    protected ModelTranslateRequestDTO buildRequest(List<String> content) {\n        // TODO: 2024/6/26 根据content组装构造text的值\n        final String text = null;\n        final String appId = ne",
    "infill": "\n            return null;\n        }\n        return buildResult(response);\n    }\n\n   ",
    "suffix": " /**\n     * 组装返回结果\n     * @param resultDTO 大模型接口返回的数据\n     * @return 返回结果\n     */\n    private NewsTranslateResult buildResult(@Nullable ModelTranslateFeignResponse response) {\n        if (resultDTO == null) {\n            return null;\n        }\n        // TODO: 2024/6/26 根据大模型接口返回的数据组装返回结果\n        return new NewsTranslateResult();\n    }\n}\n",
    "relevantFile": "<file_path>news-f10-service/src/main/java/com/myhexin/news/feign/ModelTranslateFeign.java\npackage com.myhexin.news.feign;\n\nimport com.myhexin.news.feign.fallback.ModelTranslateFeignFallbackFactory;\nimport com.myhexin.news.feign.request.ModelTranslateFeignRequest;\nimport com.myhexin.news.feign.response.ModelTranslateFeignResponse;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\n/**\n * 模型翻译的feign\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 22:11\n *\n * TODO url的配置 待完善\n */\n@FeignClient(\n        name = \"modelTranslateFeign\",\n        url = \"${news.translate.url:http://speech.ths8.com:10020}\",\n        fallbackFactory = ModelTranslateFeignFallbackFactory.class\n)\npublic interface ModelTranslateFeign {\n\n    /**\n     * 模型翻译\n     *\n     * @param request 请求\n     * @return 返回\n     *\n     * TODO 接口的uri待完善\n     */\n    @PostMapping(value = \"${news.translate.api:/translateConnection/model/translate}\",\n            consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)\n    ModelTranslateFeignResponse modelTranslate(@RequestBody ModelTranslateFeignRequest request);\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/factory/translation/AbstractTranslateMode.java\npackage com.myhexin.news.factory.translation;\n\n\nimport com.jqka.ovse.framework.base.json.OvseJson;\nimport com.jqka.ovse.framework.common.bean.LogItem;\nimport com.jqka.ovse.framework.common.http.client.DefaultOvseHttpClient;\nimport com.jqka.ovse.framework.common.http.client.OvseHttpClient;\nimport com.jqka.ovse.framework.common.http.client.OvseHttpParams;\nimport com.jqka.ovse.framework.common.http.client.OvseHttpResponse;\nimport com.jqka.ovse.framework.common.util.OvseStatsLog;\nimport com.myhexin.news.common.dto.NewsTranslateResult;\nimport com.myhexin.news.common.util.spring.SpringContextHolder;\nimport com.myhexin.news.constant.LogMessage;\nimport com.myhexin.news.constant.NewsFlashConstant;\nimport com.myhexin.news.metric.Metric;\nimport com.myhexin.news.properties.NewsProperty;\nimport org.apache.commons.codec.digest.DigestUtils;\nimport org.apache.http.Header;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.message.BasicHeader;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\n/**\n * @author xuzekui\n * @date 2022/9/7 9:16\n * @description\n */\npublic abstract class AbstractTranslateMode implements TranslationFactory {\n\n    protected static final String BIZ_NAME = \"translate\";\n\n    protected static final String APP_ID = \"appId\";\n    private static final String APP_KEY = \"appKey\";\n\n    protected static NewsProperty newsProperty = SpringContextHolder.getBean(\"newsProperty\");\n\n    private static Metric metric = SpringContextHolder.getBean(\"metric\");\n\n    static Properties translateProp = new Properties();\n\n    protected List<Header> headers = new ArrayList<>();\n\n    private OvseHttpClient httpClient = DefaultOvseHttpClient.getClient();\n\n    AbstractTranslateMode() {\n        translateProp.put(APP_ID, newsProperty.getAppId());\n        translateProp.put(APP_KEY, newsProperty.getAppKey());\n        translateProp.put(\"url\", newsProperty.getUrl());\n\n        headers.add(new BasicHeader(\"Content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\"));\n    }\n\n    public NewsTranslateResult translateContext(List<String> content, OvseHttpParams params, int retry) {\n        metric.getCounter().labels(BIZ_NAME, \"total\").inc();\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < retry; i++) {\n<file_path>news-f10-api/src/main/java/com/myhexin/news/dto/translate/ModelTranslateRequestDTO.java\npackage com.myhexin.news.dto.translate;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * 大模型翻译的请求协议\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:53\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ModelTranslateRequestDTO {\n    /**\n     * 目标语言\n     * tai-泰语\n     * pt-葡萄牙语\n     * ar-阿拉伯语\n     */\n    public static final String TARGET_LANG_TAI = \"tai\";\n    public static final String TARGET_LANG_PT = \"pt\";\n    public static final String TARGET_LANG_AR = \"ar\";\n\n    /**\n     * 待翻译内容\n     */\n    private String text;\n\n    private String appId;\n\n    private String domain;\n\n    private String from;\n\n    /**\n     * 目标语言\n     */\n    private String to;\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/feign/request/ModelTranslateFeignRequest.java\npackage com.myhexin.news.feign.request;\n\nimport com.alibaba.fastjson.JSON;\nimport com.myhexin.news.dto.translate.ModelTranslateRequestDTO;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * 模型翻译的接口出参\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 22:44\n */\n@Data\n@NoArgsConstructor\npublic class ModelTranslateFeignRequest {\n    /**\n     * 参数\n     */\n    private String param;\n\n\n    public ModelTranslateFeignRequest(ModelTranslateRequestDTO requestDTO) {\n        final ParamBean requestBean = new ParamBean(requestDTO);\n        this.param = JSON.toJSONString(requestBean);\n    }\n\n    @Data\n    @NoArgsConstructor\n    public static class ParamBean {\n        /**\n         * 待翻译内容\n         */\n        private String text;\n\n        private String appId;\n\n        private String domain;\n\n        private String from;\n\n        /**\n         * 目标语言\n         */\n        private String to;\n\n        public ParamBean(ModelTranslateRequestDTO dto) {\n            // TODO: 2024/6/26 构造paramBean\n        }\n    }\n}",
    "relevantFileList": [],
    "filePath": "news-f10-service/src/main/java/com/myhexin/news/factory/translation/ModelTranslateMode.java",
    "template": "java",
    "multiRes": {
      "hipilot": "newsProperty.getAppId();\n        final String domain = \"\";\n        final String from = \"\";\n        final String to = this.getTargetLang();\n        return new ModelTranslateRequestDTO(text, appId, domain, from, to);\n    }",
      "CodeQwen2.5-7B": "wsProperty.getAppId();",
      "copilot": "\n            return null;\n        }\n        return buildResult(response);\n    }\n\n   ",
      "CodeQwen1.5-7B": "wsProperty.getModelTranslateAppId();"
    }
  },
  {
    "prefix": "public class Main {\n    public static void main(String[] args) {\n        //TIP Press <shortcut actionId=\"ShowIntentionActions\"/> with your caret at the highlighted text\n        // to see how IntelliJ IDEA suggests fixing it.\n        System.out.print(\"Hello and welcome!\");\n\n        for (int i = 1; i <= 5; i++) {\n            //TIP Press <shortcut actionId=\"Debug\"/> to start debugging your code. We have set one <icon src=\"AllIcons.Debugger.Db_set_breakpoint\"/> breakpoint\n            // for you, but you can always add more by pressing <shortcut actionId=\"ToggleLineBreakpoint\"/>.\n            System.out.println(\"i = \" + i);\n        }\n\n        switch (args.length) {\n            case 0:\n                System.out.println(\"No arguments were passed.\");\n                break;\n            case 1:\n                System.out.println(\"One argument was passed.\");\n                break;\n                case 2:\n                System.out.println(\"Two arguments were passed.\");\n                break;\n                case 3:\n                System.out.println(\"Three arguments were passed.\");\n                case 4:\n                System.out.println(\"Four arguments were passed.\");\n                break;\n                case 5:\n                System.out.println(\"Five arguments were passed.\");\n                case 6:\n                System.out.println(\"Six arguments were passed.\");\n                case 7:\n                System.out.println(\"Seven arguments were passed.\");\n                case 8:\n                Syst",
    "infill": "em.out.println(\"Eight arguments were passed.\");\n            default",
    "suffix": ":\n                System.out.println(\"More than one argument was passed.\");\n        }\n\n    }\n}",
    "relevantFile": "",
    "relevantFileList": [],
    "template": "java",
    "multiRes": {
      "hipilot": "em.out.println(\"Eight arguments were passed.\");\n                break;\n            default",
      "CodeQwen2.5-7B": "em.out.println(\"Eight arguments were passed.\");",
      "copilot": "em.out.println(\"Eight arguments were passed.\");\n            default",
      "CodeQwen1.5-7B": " em.out.println(\"Eight arguments were passed.\");"
    }
  },
  {
    "prefix": "public class Main {\n    public static void main(String[] args) {\n        // Press Alt+Enter with your caret at the highlighted text to see how\n        // IntelliJ IDEA suggests fixing it.\n        System.out.printf(\"Hello and welcome!\");\n\n        // Press Shift+F10 or click the green arrow button in the gutter to run the code.\n        for (int i = 1; i <= 5; i++) {\n\n            // Press Shift+F9 to start debugging your code. We have set one breakpoint\n            // for you, but you can always add more by pressing Ctrl+F8.\n            System.out.println(\"i = \" + i);\n            switch(i) {\n                case 1:\n                    System.out.println(\"One\");\n                    break;\n                case 2:\n                    System.out.println(\"Two\");\n                    break;\n                case 3:\n                    System.out.println(\"Three\");\n                    break;\n                case 4:\n                    System.out.println(\"Four\");\n                    break;\n                case 5:\n                    System.out.println(\"Five\");\n                    break; \n                case 6:\n                    System.out.println(\"Six\");\n                    break;\n                    case 7:\n                    System.out.println(\"Seven\");\n                    break;\n                    case 8:\n                    System.out.println(\"Eight\");\n                    case 9:\n                    System.out.println(\"Nine\");\n                    break;\n                    case 10:\nSystem.out.println(\"Ten\"",
    "infill": ");\n\n\n                de",
    "suffix": "fault:\n                    System.out.println(\"Unknown number\");\n                    break;\n            }\n        }\n        int i = 0;\n        while (i < 5) {\n            System.out.println(\"i = \" + i);\n            if (i == 3) {\n                break;\n            }\n            i++;\n        }\n\n    }\n}",
    "relevantFile": "",
    "relevantFileList": [],
    "filePath": "src/Main.java",
    "template": "java",
    "multiRes": {
      "hipilot": ");\n                    break;",
      "CodeQwen2.5-7B": ");",
      "copilot": ");\n\n\n                de",
      "CodeQwen1.5-7B": ");"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.common.external.feign.response;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/28\n */\n@Data\npublic class AgentWorkFlowResponse {\n    /**\n     * task_id 任务id\n     */\n    private String task_id;\n\n    /**\n     * workflow_run_id 工作流运行id\n     */\n    private String workflow_run_id;\n\n    /**\n     * data 数据\n     */\n    private Data data;\n\n    /**\n     * @author wangming@myhexin.com\n     * @date 2024/06/28\n     */\n    public static class Data {\n        /**\n         * id\n         */\n        private String id;\n\n        /**\n         * workflow_id ",
    "infill": "工作流id\n         */\n        pr",
    "suffix": "ivate String workflow_id;\n\n        /**\n         * status 状态\n         */\n        private String status;\n\n        /**\n         * outputs 输出\n         */\n        private Outputs outputs;\n\n        /**\n         *  error 错误\n         */\n        private String error;\n\n        /**\n         * elapsed_time 耗时\n         */\n        private double elapsed_time;\n\n        /**\n         * total_tokens 总令牌\n         */\n        private int total_tokens;\n\n        /**\n         * \n         */\n        private int total_steps;\n        private long created_at;\n        private long finished_at;\n\n        // getters and setters\n    }\n\n    /**\n     * @author wangming@myhexin.com\n     * @date 2024/06/28\n     */\n    public static class Outputs {\n        private List<String> output;\n\n        // getters and setters\n    }\n}\n",
    "relevantFile": "<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/repository/UserMedalRepository.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.repository;\n\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.MedalWallDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.UserMedalDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.UserMedal;\n\nimport java.util.List;\n\n/**\n * 用户勋章仓库接口\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 14:18\n */\npublic interface UserMedalRepository {\n\n    /**\n     * 发放勋章\n     *\n     * @param userId     用户id\n     * @param userMedals 勋章实体\n     * @return 是否发放成功\n     */\n    boolean obtainMedal(Long userId, List<UserMedal.UserMedalMongoInfo> userMedals);\n\n    /**\n     * 删除通过用户勋章id\n     *\n     * @param userId  用户id\n     * @param medalId 勋章id\n     * @return 是否成功\n     */\n    boolean deleteByUserMedalId(Long userId, Integer medalId);\n\n    /**\n     * 获取勋章墙\n     *\n     * @return 勋章墙数据\n     */\n    MedalWallDTO getMedalWall();\n\n    /**\n     * 获取用户拥有勋章\n     *\n     * @param uid 用户id\n     * @return 用户拥有勋章\n     */\n    UserMedalDTO getUserMedal(Long uid);\n\n    /**\n     * 修改用户佩戴信息数据\n     *\n     * @param uid     用户id\n     * @param medalId 勋章id\n     * @param wearFlag    是否佩戴：true-佩戴，false-未佩戴\n     * @return 更新成功:true; 更新失败:false\n     */\n    boolean updateWearMedal(Long uid, Integer medalId, Boolean wearFlag);\n\n    /**\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/common/consts/CacheTypeEnum.java\npackage com.myhexin.community.user.medal.deploy.common.consts;\n\nimport lombok.Getter;\n\nimport java.time.Duration;\n\n/**\n * 缓存配置枚举类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 16:51\n */\n@Getter\npublic enum CacheTypeEnum {\n\n    /**\n     * 历史勋章配置缓存\n     */\n    HISTORY_MEDAL_CACHE(Duration.ofMinutes(30), 1, 5),\n\n    /**\n     * 勋章类别详情缓存\n     */\n    MEDAL_CATEGORY_CACHE(Duration.ofMinutes(1), 5, 20),\n\n    /**\n     * 勋章系列详情缓存\n     */\n    MEDAL_SERIAL_CACHE(Duration.ofMinutes(1), 1000, 5000),\n\n    /**\n     * 勋章缓存\n     */\n    MEDAL_CACHE(Duration.ofMinutes(1), 1000, 5000),\n\n    /**\n     * 用户佩戴勋章数量\n     */\n    USER_MEDAL_NUM(Duration.ofMinutes(1), 1000, 50000);\n\n    /**\n     * 过期时间\n     */\n    private final Duration expire;\n\n    /**\n     * 初始化大小\n     */\n    private final int initCapacity;\n\n    /**\n     * 最大值\n     */\n    private final int maxSize;\n\n    CacheTypeEnum(Duration expire, int initCapacity, int maxSize) {\n        this.expire = expire;\n        this.initCapacity = initCapacity;\n        this.maxSize = maxSize;\n    }\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/service/UserMedalService.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.service;\n\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.MedalWallDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.UserMedalDetailResultDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.UserMedalResultDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.UserWearMedalResultDTO;\n\nimport java.util.List;\n\n\n/**\n * 用户勋章业务接口\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 14:13\n */\n\npublic interface UserMedalService {\n\n    /**\n     * 获取用户勋章信息，标记在勋章墙内\n     *\n     * @param uid       用户id\n     * @param medalWall 勋章墙\n     * @param selfView  是否自身视角\n     * @return 用户勋章墙信息\n     */\n    UserMedalResultDTO getUserMedal(Long uid, MedalWallDTO medalWall, Boolean selfView);\n\n\n    /**\n     * 获取旧版勋章墙数据\n     *\n     * @param uid 用户id\n     * @return 旧版勋章墙\n     */\n    List<UserMedalResultDTO.MedalCategoryResultInfo> getOldMedalWall(Long uid);\n\n    /**\n     * 获取勋章详情信息\n     *\n     * @param uid          用户id\n     * @param medalId      勋章id\n     * @param medalWallDTO 勋章墙DTO\n     * @param selfView     是否自身视角\n     * @return 勋章详情信息\n     */\n    UserMedalDetailResultDTO getMedalDetail(Long uid, Integer medalId, MedalWallDTO medalWallDTO, Boolean selfView);\n\n    /**\n     * 获取用户佩戴的勋章\n     *\n     * @param uid 用户id\n     * @return 用户佩戴的勋章\n     */\n    UserWearMedalResultDTO getWearMedal(Long uid);\n\n    /**\n     * 批量获取用户佩戴勋章\n     *\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/infrastructure/db/model/UserMedal.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.util.List;\n\n/**\n * 用户 - 勋章关系表\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 17:33\n */\n\n@Data\n@Document(\"user_medal\")\npublic class UserMedal {\n\n    /**\n     * 用户ID\n     */\n    @Id\n    private Long userId;\n\n    /**\n     * 用户勋章列表\n     */\n    private List<UserMedalMongoInfo> userMedalList;\n\n    /**\n     * 用户 - 勋章信息\n     */\n    @Data\n    @Builder\n    @AllArgsConstructor\n    @NoArgsConstructor\n    public static class UserMedalMongoInfo {\n\n        /**\n         * 勋章id\n         */\n        private Integer medalId;\n\n        /**\n         * 勋章等级\n         */\n        private Integer medalLevel;\n\n        /**\n         * 勋章名称\n         */\n        private String medalName;\n\n        /**\n         * 勋章logo\n         */",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/common/external/feign/response/AgentWorkFlowResponse.java",
    "template": "java",
    "multiRes": {
      "hipilot": "工作流id\n         */\n        pr",
      "CodeQwen2.5-7B": "工作流id",
      "copilot": "工作流id\n         */\n        pr",
      "CodeQwen1.5-7B": " 工作流id"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.modules.topic.domain.service;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\n\nimport java.util.List;\n\n/**\n * 热点池Service\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\npublic interface HotContentOperatingService {\n\n    /**\n     * 添加热点内容至热点池中\n     * @param hotContentPoolDTO 热点数据\n     */\n    void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery);\n\n    /**\n     * 获取热点池数据总数\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    Integer getHotContentPoolTotal(HotContentQuery hotContentQuery);\n\n    /**\n     * 更新热点内容\n     * @param hotContentPoolDTO 热点数据\n     * @return 被修改的内容数量\n     */\n    Long updateHotContent(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 更新热点池上线状态\n     * @param id 热点id\n     * @param type 热点type\n     * @return 更新条数\n     */\n    Long updateHotContentStatus(String id, String type);\n\n    /**\n     * 删除热点池过期数据\n     * @return 删除条数\n     */\n    Long delHotContentExpireData(Long ",
    "infill": "expireTime);\n}\n",
    "suffix": "",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/job/DelExpireHotContentHandler.java\npackage com.myhexin.community.operating.deploy.interfaces.job;\n\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport com.xxl.job.core.biz.model.ReturnT;\nimport com.xxl.job.core.handler.IJobHandler;\nimport com.xxl.job.core.handler.annotation.JobHandler;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\n/**\n * 定时删除过期热点内容\n * @author ningwenyu@myhexin.com\n * @date 2024/6/21 10:20\n */\n@Component\n@Slf4j\n@JobHandler(\"DelExpireHotContentHandler\")\n@RequiredArgsConstructor\npublic class DelExpireHotContentHandler extends IJobHandler {\n\n    private final HotContentOperatingService hotContentOperatingService;\n    \n    /**\n     * 每天00:00删除热点内容过期数据\n     * @param param 参数\n     * @return 是否成功\n     * @throws Exception\n     */\n    @Override\n    public ReturnT<String> execute(String param) throws Exception {\n        \n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/dto/hottopic/HotTopicDTO.java\npackage com.myhexin.community.operating.deploy.app.manager.dto.hottopic;\n\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicAttachEnum;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicColorEnum;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicOperatingConstant;\nimport com.myhexin.community.operating.deploy.modules.operating.domain.entity.ForumBaseInfo;\nimport lombok.Data;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\n/**\n * @author wangming@myhexin.com\n * @date 2022-05-27 13:57\n */\n@Data\npublic class HotTopicDTO {\n\n    /**\n     * 内容id\n     */\n    private String code;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n\n    /**\n     * 内容描述\n     */\n    private String descripion;\n\n    /**\n     * 人工运营等级\n     */\n    private Integer priority;\n    /**\n     * 标题\n     */\n    private String title;\n    /**\n     * 副标题\n     */\n    private String subtitle;\n    /**\n     * 标签类型\n     */\n    private String labelName;\n    /**\n     * 标签内容\n     */\n    private String labelContent;\n    /**\n     * 标签的背景颜色\n     */\n    private String labelBackgroundColor;\n    /**\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/dto/hottopic/HotContentPoolResultDTO.java\npackage com.myhexin.community.operating.deploy.app.manager.dto.hottopic;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.util.List;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/6/19 17:22\n */\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class HotContentPoolResultDTO {\n\n    /**\n     * 热点池列表\n     */\n    private List<HotContentPoolDTO> list;\n\n    /**\n     * 查询总数\n     */\n    private Integer total;\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/impl/HotContentOperatingServiceImpl.java\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.repository.HotContentOperatingRepository;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * 热点内容Service实现\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\n@Service\n@RequiredArgsConstructor\npublic class HotContentOperatingServiceImpl implements HotContentOperatingService {\n\n    private final HotContentOperatingRepository hotContentRepository;\n\n    /**\n     * 添加热点内容至热点池中\n     *\n     * @param hotContentPoolDTO 热点数据\n     */\n    @Override\n    public void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO) {\n        // 保存至数据库\n        hotContentRepository.addHotContentToPool(hotContentPoolDTO);\n    }\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    @Override\n    public List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPool(hotContentQuery);\n    }\n\n    /**\n     * 获取热点池数据总数\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    @Override\n    public Integer getHotContentPoolTotal(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPoolTotal(hotContentQuery);\n    }\n\n    /**\n     * 更新热点内容\n     *\n     * @param hotContentPoolDTO 热点数据\n     */\n    @Override\n    public Long updateHotContent(HotContentPoolDTO hotContentPoolDTO) {",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/HotContentOperatingService.java",
    "template": "java",
    "multiRes": {
      "hipilot": "time);\n}",
      "CodeQwen2.5-7B": "expireTime);",
      "copilot": "expireTime);\n}\n",
      "CodeQwen1.5-7B": " expireTime);"
    }
  },
  {
    "prefix": "package com.myhexin.sre.change.event.deploy.modules.plane.domain.aggregates;\n\nimport com.myhexin.sre.change.event.deploy.interfaces.rest.query.ChangePlanStartRequest;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.entity.ChangeExePlanId;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.entity.ChangeExeScene;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.valueobjects.*;\nimport lombok.Data;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n/**\n * 变更执行计划单\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/22\n */\n@Data\npublic class ChangeExePlan {\n    /**\n     * 变更执行计划单ID\n     */\n    private ChangeExePlanId planId;\n    /**\n     * 变更执行计划单创建人\n     */\n    private String creator;\n    /**\n     * 变更执行开始时间\n     */\n    private LocalDateTime startTime;\n    /**\n     * 变更执行计划单执行人\n     */\n    private String executor;\n    /**\n     * 变更执行完成时间\n     */\n    private LocalDateTime finishTime;\n    /**\n     * 变更原因\n     */\n    private String reason;\n    /**\n     * 变更环境\n     */\n    private String env;\n    /**\n     * 变更源变更工单/记录唯一ID\n     */\n    private String bizOrderId;\n    /**\n     * 变更执行需要的参数\n     */\n    private String paramsJson;\n    /**\n     * 变更执行详情json\n     */\n    private String detailJson;\n    /**\n     * 变更执行场景\n     */\n    private ChangeExeScene scene;\n    /**\n     * 变更执行灰度信息\n     */\n    private ExePlanGrayInfo grayInfo;\n    /**\n     * 变更执行主体\n     */\n    private List<ExePlanInstance> instances;\n    /**\n     * 变更执行详情\n     */\n    private List<ExePlanDetailItem> detailItems;\n    /**\n     * 变更执行部署\n     */\n    private List<ExePlanDeployment> deployments;\n    /**\n     * 变更执行部门\n     */\n    private ExePlanDepartment department;\n    /**\n     * 变更执行状态\n     */\n    private ExePlanStatus status;\n\n    public ChangeExePlan(ChangePlanStartRequest request) {\n        this.creator = request.getCreator();\n        this.executor = request.getExecutor();\n        this.reason = request.getReason();\n        this.env = request.getEnv();\n        this.bizOrderId = request.getUni();\n        this.paramsJson",
    "infill": " = request.getParamsJson();\n        this.detailJson = request.getChangeDetailJson();\n        this.startTime",
    "suffix": " = LocalDateTime.parse(request.getStartTime());\n\n    }\n    \n    \n\n\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/query/ChangeBaseRequest.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\n\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Size;\n\n\n/**\n * 变更统一接入参数基类\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangeBaseRequest {\n    @NotNull(message = \"变更源不能为空\")\n    @Size(max = 32)\n    private String platform;\n    @NotNull(message = \"变更源记录ID不能为空\")\n    @Size(max = 256)\n    private String uni;\n    @NotNull(message = \"变更环境不能为空\")\n    @Size(max = 16)\n    private String env;\n    @NotNull(message = \"变更场景不能为空\")\n    @Size(max = 128)\n    private String sceneCode;\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/service/ChangeExePlanService.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.service;\n\nimport com.myhexin.sre.change.event.deploy.interfaces.rest.query.ChangePlanStartRequest;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.aggregates.ChangeExePlan;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.repository.ChangeExePlanRepository;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n@Slf4j\n@Service\n@RequiredArgsConstructor\npublic class ChangeExePlanService {\n\n    private final ChangeExePlanRepository changeExePlanRepositoryImpl;\n    public ChangeExePlan createChangeExePlan(ChangePlanStartRequest request) {\n        ChangeExePlan changeExePlan = new ChangeExePlan(request);\n        Long planId = changeExePlanRepositoryImpl.save(changeExePlan);\n        changeExePlan.getPlanId().setPlanId(planId);\n        return changeExePlan;\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/query/ChangePlanStartRequest.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport javax.validation.constraints.NotNull;\n\n\n/**\n * 变更执行单请求\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n\n@Data\n@EqualsAndHashCode(callSuper = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangePlanStartRequest extends ChangePlanRequest {\n    /**\n     * 变更开始时间\n     */\n    private String startTime;\n    /**\n     * 变更完成时间\n     */\n    private String finishTime;\n    /**\n     * 变更执行人\n     */\n    @NotNull(message = \"变更执行人不能为空\")\n    private String executor;\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/query/ChangePlanRequest.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Size;\n\n\n/**\n * 变更执行单请求\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n\n@Data\n@EqualsAndHashCode(callSuper = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangePlanRequest extends ChangeBaseRequest{\n    @Size(max = 256)\n    private String reason;\n    @NotNull(message = \"变更发起人不能为空\")\n    private String creator;\n    @Size(max = 512)\n    private String bizUrl;\n    @NotEmpty(message = \"变更主体实例不能为空\")\n    private ChangeInstance[] instances;\n    private ChangeDeployment[] deployments;\n    @NotNull(message = \"变更所属组织信息不能为空\")\n    private ChangeDepartment department;\n    private String changeParamsJson;\n    private String changeDetailJson;\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/aggregates/ChangeExePlan.java",
    "template": "java",
    "multiRes": {
      "hipilot": "= request.getChangeParamsJson();\n        this.detailJson = request.getChangeDetailJson();",
      "CodeQwen2.5-7B": " = request.getParamsJson();",
      "copilot": " = request.getParamsJson();\n        this.detailJson = request.getChangeDetailJson();\n        this.startTime",
      "CodeQwen1.5-7B": " =request.getParamsJson();"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.common.external.feign.request;\n\nimport lombok.Data;\n\n/**\n * 删除热点内容请求\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/6/20 15:43\n */\n@Data\npublic class DelHotContentRequest {",
    "infill": " /**\n     * 内容id\n     */\n    private String id;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n}\n",
    "suffix": "",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/infrastructure/db/model/HotContentPoolDO.java\nimport com.myhexin.community.operating.deploy.modules.operating.domain.entity.ForumBaseInfo;\nimport lombok.Data;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 热点池DO类\n * @author ningwenyu@myhexin.com\n * @date 2024/6/19 9:59\n */\n@Data\n@Document(\"hot_content\")\npublic class HotContentPoolDO {\n\n    /**\n     * 主键Id\n     */\n    @Id\n    private String id;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n\n    /**\n     * 标题\n     */\n    private String title;\n\n    /**\n     * 内容描述\n     */\n    private String descripion;\n\n    /**\n     * 标签类型\n     */\n    private String labelType;\n\n    /**\n     * 标签的背景颜色\n     */\n    private String labelBackgroundColor;\n\n    /**\n     * 标签的文字颜色\n     */\n    private String labelWordColor;\n\n    /**\n     * 标签名称\n     */\n    private String labelName;\n\n    /**\n     * 内容跳转链接\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/operating/domain/entity/ForumBaseInfo.java\npackage com.myhexin.community.operating.deploy.modules.operating.domain.entity;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * @author wangming@myhexin.com\n * @date 2022-05-18 20:53\n */\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ForumBaseInfo {\n    /**\n     * 股票code\n     */\n    private String code;\n    /**\n     * 股票名称\n     */\n    private String name;\n    /**\n     * 股票市场\n     */\n    @JsonProperty(\"market_id\")\n    private Integer marketId;\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/dto/hottopic/HotContentPoolDTO.java\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicOperatingConstant;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.util.List;\n\n/**\n * 热点数据DTO类\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 20:34\n */\n\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class HotContentPoolDTO {\n\n    /**\n     * 内容id\n     */\n    private String id;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n\n    /**\n     * 标题\n     */\n    private String title;\n\n    /**\n     * 内容描述\n     */\n    private String descripion;\n\n    /**\n     * 标签类型\n     */\n    private String labelType;\n\n    /**\n     * 标签名称\n     */\n    private String labelName;\n\n    /**\n     * 标签的背景颜色\n     */\n    private String labelBackgroundColor;\n\n    /**\n     * 标签的文字颜色\n     */\n    private String labelWordColor;\n\n\n    /**\n     * 内容跳转链接\n     */\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/common/external/feign/request/AddHotContentRequest.java\npackage com.myhexin.community.operating.deploy.common.external.feign.request;\n\nimport com.myhexin.community.operating.deploy.interfaces.rest.vo.hottopic.HotTopicFrontDataVO;\nimport lombok.Data;\n/**\n * 热点内容上榜请求\n * @author ningwenyu@myhexin.com\n * @date 2024/6/19 19:10\n */\n@Data\npublic class AddHotContentRequest {\n\n    /**\n     * 内容id\n     */\n    private String id;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n\n    /**\n     * 附件类型\n     */\n    private Integer attachType;\n\n    /**\n     * 标签类型\n     */\n    private Integer labelType;\n\n    /**\n     * 榜单id\n     */\n    private String rankId;\n\n    /**\n     * 内容元素信息\n     */\n    private HotTopicFrontDataVO.AttInfo attachInfo;\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/common/external/feign/request/DelHotContentRequest.java",
    "template": "java",
    "multiRes": {
      "hipilot": "\n\n    /**\n     * 榜单id\n     */\n    private String rankId;\n\n    /**\n     * 内容id\n     */\n    private String contentId;\n}",
      "CodeQwen2.5-7B": "",
      "copilot": " /**\n     * 内容id\n     */\n    private String id;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n}\n",
      "CodeQwen1.5-7B": " "
    }
  },
  {
    "prefix": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.web.servlet.ServletComponentScan;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\n/**\n * Nacos starter.\n *\n * @author nacos\n */\n@SpringBootApplication(scanBasePackages = {\"com.alibaba.nacos\", \"com.myhexin.nacos\"})\n@ServletComponentScan\n@EnableScheduling\npublic class Nacos {\n\n    \n    public static void main(String[] args) {\n        \n        SpringApplication.r",
    "infill": "\n        SpringApplication.r",
    "suffix": "\n        SpringApplication.run(Nacos.class, args);\n\n\n    }\n}\n",
    "relevantFile": "<file_path>api/src/main/java/com/alibaba/nacos/api/naming/pojo/ServiceInfo.java\n/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.api.naming.pojo;\n\nimport com.alibaba.nacos.api.common.Constants;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * ServiceInfo.\n *\n * @author nkorange\n * @author shizhengxing\n */\n@JsonInclude(Include.NON_NULL)\npublic class ServiceInfo {\n    \n    @JsonIgnore\n    private String jsonFromServer = EMPTY;\n    \n    public static final String SPLITER = \"@@\";\n    \n    private String name;\n    \n    private String groupName;\n    \n    private String clusters;\n    \n    private long cacheMillis = 1000L;\n    \n    private List<Instance> hosts = new ArrayList<Instance>();\n    \n    private long lastRefTime = 0L;\n    \n    private String checksum = \"\";\n    \n    private volatile boolean allIPs = false;\n    \n    public ServiceInfo() {\n<file_path>api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java\n/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.api.naming.pojo;\n\nimport com.alibaba.nacos.api.common.Constants;\nimport com.alibaba.nacos.api.naming.PreservedMetadataKeys;\nimport com.alibaba.nacos.api.utils.StringUtils;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.alibaba.nacos.api.common.Constants.NUMBER_PATTERN;\n\n/**\n * Instance.\n *\n * @author nkorange\n */\n@JsonInclude(Include.NON_NULL)\npublic class Instance implements Serializable {\n    \n    private static final long serialVersionUID = -742906310567291979L;\n    \n    /**\n     * unique id of this instance.\n     */\n    private String instanceId;\n    \n    /**\n     * instance ip.\n     */\n    private String ip;\n    \n    /**\n     * instance port.\n     */\n    private int port;\n    \n    /**\n     * instance weight.\n     */\n    private double weight = 1.0D;\n    \n<file_path>api/src/main/java/com/alibaba/nacos/api/selector/AbstractSelector.java\n/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.api.selector;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\n\nimport java.io.Serializable;\n\n/**\n * Abstract selector that only contains a type.\n *\n * @author nkorange\n * @since 0.7.0\n */\n@JsonTypeInfo(use = Id.NAME, property = \"type\", defaultImpl = NoneSelector.class)\npublic abstract class AbstractSelector implements Serializable {\n    \n    private static final long serialVersionUID = 4530233098102379229L;\n    \n    /**\n     * The type of this selector, each child class should announce its own unique type.\n     */\n    @JsonIgnore\n    private final String type;\n    \n    protected AbstractSelector(String type) {\n        this.type = type;\n    }\n    \n    public String getType() {\n        return type;\n    }\n}",
    "relevantFileList": [],
    "filePath": "console/src/main/java/com/alibaba/nacos/Nacos.java",
    "template": "java",
    "multiRes": {
      "hipilot": "run(Nacos.class);",
      "CodeQwen2.5-7B": "un(Nacos.class, args);",
      "copilot": "\n        SpringApplication.r",
      "CodeQwen1.5-7B": "un(Nacos.class, args);"
    }
  },
  {
    "prefix": "/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.web.servlet.ServletComponentScan;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\n/**\n * Nacos starter.\n *\n * @author nacos\n */\n@SpringBootApplication(scanBasePackages = {\"com.alibaba.nacos\", \"com.myhexin.nacos\"})\n@ServletComponentScan\n@EnableScheduling\npublic class Nacos {\n\n    \n    public static void main(String[] args) {\n        \n        \n        //",
    "infill": " Start Nacos\n        //帮忙写个排序算法\n        \n        \n        S",
    "suffix": "pringApplication.run(Nacos.class, args);\n\n\n    }\n}\n",
    "relevantFile": "<file_path>api/src/main/java/com/alibaba/nacos/api/naming/pojo/ServiceInfo.java\n/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.api.naming.pojo;\n\nimport com.alibaba.nacos.api.common.Constants;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * ServiceInfo.\n *\n * @author nkorange\n * @author shizhengxing\n */\n@JsonInclude(Include.NON_NULL)\npublic class ServiceInfo {\n    \n    @JsonIgnore\n    private String jsonFromServer = EMPTY;\n    \n    public static final String SPLITER = \"@@\";\n    \n    private String name;\n    \n    private String groupName;\n    \n    private String clusters;\n    \n    private long cacheMillis = 1000L;\n    \n    private List<Instance> hosts = new ArrayList<Instance>();\n    \n    private long lastRefTime = 0L;\n    \n    private String checksum = \"\";\n    \n    private volatile boolean allIPs = false;\n    \n    public ServiceInfo() {\n<file_path>api/src/main/java/com/alibaba/nacos/api/naming/pojo/Instance.java\n/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.api.naming.pojo;\n\nimport com.alibaba.nacos.api.common.Constants;\nimport com.alibaba.nacos.api.naming.PreservedMetadataKeys;\nimport com.alibaba.nacos.api.utils.StringUtils;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.alibaba.nacos.api.common.Constants.NUMBER_PATTERN;\n\n/**\n * Instance.\n *\n * @author nkorange\n */\n@JsonInclude(Include.NON_NULL)\npublic class Instance implements Serializable {\n    \n    private static final long serialVersionUID = -742906310567291979L;\n    \n    /**\n     * unique id of this instance.\n     */\n    private String instanceId;\n    \n    /**\n     * instance ip.\n     */\n    private String ip;\n    \n    /**\n     * instance port.\n     */\n    private int port;\n    \n    /**\n     * instance weight.\n     */\n    private double weight = 1.0D;\n    \n<file_path>api/src/main/java/com/alibaba/nacos/api/selector/AbstractSelector.java\n/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.nacos.api.selector;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\n\nimport java.io.Serializable;\n\n/**\n * Abstract selector that only contains a type.\n *\n * @author nkorange\n * @since 0.7.0\n */\n@JsonTypeInfo(use = Id.NAME, property = \"type\", defaultImpl = NoneSelector.class)\npublic abstract class AbstractSelector implements Serializable {\n    \n    private static final long serialVersionUID = 4530233098102379229L;\n    \n    /**\n     * The type of this selector, each child class should announce its own unique type.\n     */\n    @JsonIgnore\n    private final String type;\n    \n    protected AbstractSelector(String type) {\n        this.type = type;\n    }\n    \n    public String getType() {\n        return type;\n    }\n}",
    "relevantFileList": [],
    "filePath": "console/src/main/java/com/alibaba/nacos/Nacos.java",
    "template": "java",
    "multiRes": {
      "hipilot": "for hot-fix test.\n        S",
      "CodeQwen2.5-7B": "S",
      "copilot": " Start Nacos\n        //帮忙写个排序算法\n        \n        \n        S",
      "CodeQwen1.5-7B": " S"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.modules.topic.domain.service;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\n\nimport java.util.List;\n\n/**\n * 热点池Service\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\npublic interface HotContentOperatingService {\n\n    /**\n     * 添加热点内容至热点池中\n     * @param hotContentPoolDTO 热点数据\n     */\n    void addHotContent(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery);\n\n    /**\n     * 获取热点池数据总数\n     * @param hotContentQuery ",
    "infill": "筛选条件\n     * @return 热点池数据总数  \n     */\n    In",
    "suffix": "teger getHotContentPoolTotal(HotContentQuery hotContentQuery);\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/infrastructure/db/repository/mongo/HotContentOperatingRepositoryImpl.java\npackage com.myhexin.community.operating.deploy.modules.topic.infrastructure.db.repository.mongo;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.req.converter.HotContentConvert;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.repository.HotContentOperatingRepository;\nimport com.myhexin.community.operating.deploy.modules.topic.infrastructure.db.model.HotContentPoolDO;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.stereotype.Repository;\n\n/**\n * 热点内容\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:09\n */\n@Repository\n@RequiredArgsConstructor\npublic class HotContentOperatingRepositoryImpl implements HotContentOperatingRepository {\n\n    private final MongoTemplate hotContentMongoTemplate;\n    /**\n     * 新增热点内容至热点池\n     * @param hotContentPoolDTO 热点内容\n     */\n    @Override\n    public void addHotContent(HotContentPoolDTO hotContentPoolDTO) {\n        HotContentPoolDO hotContentPoolDO = HotContentConvert.INSTANCE.toHotContentDO(hotContentPoolDTO);\n        hotContentMongoTemplate.save(hotContentPoolDO);\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/HotContentOperatingManager.java\npackage com.myhexin.community.operating.deploy.app.manager;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolResultDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n/**\n * Manager类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 20:48\n */\n@Component\n@RequiredArgsConstructor\npublic class HotContentOperatingManager {\n    private final HotContentOperatingService hotContentOperatingService;\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param id       内容id\n     * @param type     内容类型\n     * @param creator  创建者\n     * @param page     当前页\n     * @param pageSize 页大小\n     * @param status   状态信息\n     * @return 热点池数据\n     */\n    public HotContentPoolResultDTO getHotContentPool(String id, String type, String creator, Integer page, Integer pageSize, Integer status) {\n        // 创建查询条件\n        HotContentQuery hotContentQuery = HotContentQuery.of()\n                .setId(id)\n                .setType(type)\n                .setCreator(creator)\n                .setLimit((page - NumberUtils.INTEGER_ONE) * pageSize)\n                .setPageSize(pageSize)\n                .setStatus(status);\n\n        // 查询热点池数据\n        List<HotContentPoolDTO> hotContentPoolList = hotContentOperatingService.getHotContentPool(hotContentQuery);\n        // 查询总条数\n        Integer total = hotContentOperatingService.getHotContentPoolTotal(hotContentQuery);\n        return HotContentPoolResultDTO.of()\n                .setList(hotContentPoolList)\n                .setTotal(total);\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/repository/HotContentOperatingRepository.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.repository;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:08\n */\npublic interface HotContentOperatingRepository {\n\n    /**\n     * 添加热门话题\n     * @param hotContentPoolDTO 热门话题\n     */\n    void addHotContent(HotContentPoolDTO hotContentPoolDTO);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/impl/HotContentOperatingServiceImpl.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.service.impl;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.repository.HotContentOperatingRepository;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * 热点内容Service实现\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\n@Service\n@RequiredArgsConstructor\npublic class HotContentOperatingServiceImpl implements HotContentOperatingService {\n\n    private final HotContentOperatingRepository hotContentRepository;\n\n    /**\n     * 添加热点内容至热点池中\n     *\n     * @param hotContentPoolDTO 热点数据\n     */\n    @Override\n    public void addHotContent(HotContentPoolDTO hotContentPoolDTO) {\n        // 保存至数据库\n        hotContentRepository.addHotContent(hotContentPoolDTO);\n    }\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    @Override\n    public List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery) {\n        return null;\n    }\n\n    /**\n     * 获取热点池数据总数\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    @Override\n    public Integer getHotContentPoolTotal(HotContentQuery hotContentQuery) {\n        return null;\n    }\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/HotContentOperatingService.java",
    "template": "java",
    "multiRes": {
      "hipilot": "筛选条件\n     * @return 热点池数据总数\n     */\n    In",
      "CodeQwen2.5-7B": "筛选条件",
      "copilot": "筛选条件\n     * @return 热点池数据总数  \n     */\n    In",
      "CodeQwen1.5-7B": " 筛选条件"
    }
  },
  {
    "prefix": "package com.myhexin.sre.change.event.deploy.modules.plane.domain.enums;\n\n/**\n * 变更计划的执行状态\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/28\n */\npublic enum PlanStatusEnum {\n    /**\n     * 初始化\n     */\n    INIT(\"init\", false),\n    /**",
    "infill": "\n     * 运行中\n     */\n    RU",
    "suffix": "NNING(\"running\", false),\n    /**\n     * cheng'g\n     */\n    SUCCESS(\"success\", true),\n    /**\n     * cmdb\n     */\n    CMDB(\"cmdb\");\n\n    private final String code;\n    \n    private final boolean finalStatus;\n\n    PlanStatusEnum(String code, boolean finalStatus) {\n        this.code = code;\n        this.finalStatus = finalStatus;\n    }\n    public String getCode() {\n        return code;\n    }\n\n    public boolean isFinalStatus() {\n        return finalStatus;\n    }\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/query/ChangePlanStartRequest.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport javax.validation.constraints.NotNull;\n\n\n/**\n * 变更执行单请求\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n\n@Data\n@EqualsAndHashCode(callSuper = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangePlanStartRequest extends ChangePlanRequest {\n    /**\n     * 变更开始时间\n     */\n    private String startTime;\n    /**\n     * 变更执行人\n     */\n    @NotNull(message = \"变更执行人不能为空\")\n    private String executor;\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/vo/ChangePlanResult.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.vo;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\n\n\n/**\n * 变更执行单返回\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangePlanResult {\n    /**\n     * 变更计划ID\n     */\n    private Long planId;\n    /**\n     * 变更管控验证结果状态\n     */\n    private String verdictStatus;\n    /**\n     * 变更管控验证结果描述\n     */\n    private String verdictMsg;\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/entity/BaseChangePlan.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.entity;\n\nimport lombok.Data;\n\nimport java.time.LocalDateTime;\n\n/**\n * 变更计划实体基类\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/19\n */\n@Data\npublic class BaseChangePlan {\n    /**\n     * 变更计划单ID\n     */\n    private Long planId;\n    /**\n     * 变更开始时间\n     */\n    private LocalDateTime startTime;\n    /**\n     * 变更开始时间\n     */\n    private LocalDateTime finishTime;\n    /**\n     * 变更源唯一变更记录ID\n     */\n    private String uni;\n    /**\n     * 变更源平台\n     */\n    private String platform;\n    /**\n     * 变更原因\n     */\n    private String reason;\n    /**\n     * 变更计划单地址\n     */\n    private String changeUrl;\n    \n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/entity/ChangePlan.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.entity;\n\nimport lombok.Data;\n\n/**\n * 变更计划实体\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/19\n */\n@Data\npublic class ChangePlan {\n    private Long id;\n    private String startTime;\n    private String endTime;\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/enums/PlanStatusEnum.java",
    "template": "java",
    "multiRes": {
      "hipilot": "\n     * 运行中\n     */\n    RU",
      "CodeQwen2.5-7B": "",
      "copilot": "\n     * 运行中\n     */\n    RU",
      "CodeQwen1.5-7B": ""
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.app.manager;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolResultDTO;\nimport com.myhexin.community.operating.deploy.common.external.feign.request.AddHotContentRequest;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicColorEnum;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n/**\n * Manager类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 20:48\n */\n@Component\n@RequiredArgsConstructor\npublic class HotContentOperatingManager {\n    private final HotContentOperatingService hotContentOperatingService;\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param id       内容id\n     * @param type     内容类型\n     * @param creator  创建者\n     * @param page     当前页\n     * @param pageSize 页大小\n     * @param status   状态信息\n     * @return 热点池数据\n     */\n    public HotContentPoolResultDTO getHotContentPool(String id, String type, String creator, Integer page, Integer pageSize, Integer status) {\n        // 创建查询条件\n        HotContentQuery hotContentQuery = HotContentQuery.of()\n                .setId(id)\n                .setType(type)\n                .setCreator(creator)\n                .setSkipNum((page - NumberUtils.INTEGER_ONE) * pageSize)\n                .setPageSize(pageSize)\n                .setStatus(status);\n\n        // 查询热点池数据\n        List<HotContentPoolDTO> hotContentPoolList = hotContentOperatingService.getHotContentPool(hotContentQuery);\n        // 查询总条数\n        Integer total = hotContentOperatingService.getHotContentPoolTotal(hotContentQuery);\n        return HotContentPoolResultDTO.of()\n                .setList(hotContentPoolList)\n                .setTotal(total);\n    }\n\n    /**\n     * 添加热点内容至热点池中\n     * @",
    "infill": "request.getId());\n        \n        \n        HotTopicColor",
    "suffix": "Enum\n    }\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/repository/HotContentOperatingRepository.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.repository;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\n\nimport java.util.List;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:08\n */\npublic interface HotContentOperatingRepository {\n\n    /**\n     * 添加热门话题\n     * @param hotContentPoolDTO 热门话题\n     */\n    void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 获取热门话题\n     * @param hotContentQuery 查询条件\n     * @return 热门话题\n     */\n    List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery);\n\n    /**\n     * 获取热门话题总数\n     * @param hotContentQuery 查询条件\n     * @return 热门话题总数\n     */\n    Integer getHotContentPoolTotal(HotContentQuery hotContentQuery);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/HotContentOperatingService.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.service;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\n\nimport java.util.List;\n\n/**\n * 热点池Service\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\npublic interface HotContentOperatingService {\n\n    /**\n     * 添加热点内容至热点池中\n     * @param hotContentPoolDTO 热点数据\n     */\n    void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery);\n\n    /**\n     * 获取热点池数据总数\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    Integer getHotContentPoolTotal(HotContentQuery hotContentQuery);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/dto/hottopic/HotContentPoolDTO.java\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicAttachEnum;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicColorEnum;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicOperatingConstant;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.data.annotation.AccessType;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\n/**\n * 热点数据DTO类\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 20:34\n */\n\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class HotContentPoolDTO {\n\n    /**\n     * 内容id\n     */\n    private String id;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n\n    /**\n     * 标题\n     */\n    private String title;\n\n    /**\n     * 内容描述\n     */\n    private String descripion;\n\n    /**\n     * 标签类型\n     */\n    private Integer labelType;\n\n    /**\n     * 标签名称\n     */\n    private String labelName;\n\n    /**\n     * 标签的背景颜色\n     */\n    private String labelBackgroundColor;\n\n    /**\n     * 标签的文字颜色\n     */\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/impl/HotContentOperatingServiceImpl.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.service.impl;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.repository.HotContentOperatingRepository;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * 热点内容Service实现\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\n@Service\n@RequiredArgsConstructor\npublic class HotContentOperatingServiceImpl implements HotContentOperatingService {\n\n    private final HotContentOperatingRepository hotContentRepository;\n\n    /**\n     * 添加热点内容至热点池中\n     *\n     * @param hotContentPoolDTO 热点数据\n     */\n    @Override\n    public void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO) {\n        // 保存至数据库\n        hotContentRepository.addHotContentToPool(hotContentPoolDTO);\n    }\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    @Override\n    public List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPool(hotContentQuery);\n    }\n\n    /**\n     * 获取热点池数据总数\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    @Override\n    public Integer getHotContentPoolTotal(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPoolTotal(hotContentQuery);\n    }\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/HotContentOperatingManager.java",
    "template": "java",
    "multiRes": {
      "hipilot": "param addHotContentRequest 热点请求数据\n     */\n    public void addHotContentToPool(AddHotContentRequest addHotContentRequest) {",
      "CodeQwen2.5-7B": "param addHotContentRequest 添加热点内容请求",
      "copilot": "request.getId());\n        \n        \n        HotTopicColor",
      "CodeQwen1.5-7B": "param addHotContentRequest 添加热点内容请求"
    }
  },
  {
    "prefix": "import java.util.ArrayList;\nimport java.util.List;",
    "infill": "import java.util.stream.Collectors;\n",
    "suffix": "\npublic class Student {\n    private String name;\n    private int age;\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n",
    "relevantFile": "",
    "relevantFileList": [],
    "template": "java",
    "multiRes": {
      "hipilot": "",
      "CodeQwen2.5-7B": "",
      "copilot": "import java.util.stream.Collectors;\n",
      "CodeQwen1.5-7B": " "
    }
  },
  {
    "prefix": "package com.myhexin.news.common.dto;\n\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.annotation.JSONField;\nimport com.myhexin.news.dto.translate.ModelTranslateResultDTO;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * @author xuzekui\n * @date 2021/11/17 20:44\n * @description\n */\n@Data\n@NoArgsConstructor\npublic class NewsTranslateResult {\n\n    private int code;\n    private String note;\n    private Object data;\n\n    public NewsTranslateResult(Integer code, String note, Object data) {\n        this.code = code;\n        this.note = note;\n        this.data = data;\n    }\n\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class DataBean {\n//        @JSONField(name = \"trans_result\")\n        private List<ModelTranslateResultDTO> transResultList;\n\n//        @JSONField(name = \"result_list\")\n        private List<List<TransResult>> resultList;\n    }\n\n    public static void main(String[] args) {\n        NewsTranslateResult newsTranslateResult = new NewsTranslateResult();\n\n        ;\n\n        final List<TransResult> transResults = new ArrayList<>()",
    "infill": ">()",
    "suffix": ">();\n        DataBean dataBean = new DataBean(\n                Collections.singletonList(new ModelTranslateResultDTO(\"src aaa\", \"dst bbb\")),\n                new ArrayList<>(Collections.singletonList(transResults)));\n        newsTranslateResult.setData(JSON.toJSONString(dataBean));\n//        newsTranslateResult.setData(dataBean);\n        System.out.println(JSON.toJSONString(newsTranslateResult));\n    }\n\n}\n",
    "relevantFile": "<file_path>src/main/java/com/myhexin/zixun/application/manager/flash/news/external/feign/dto/TextSummaryInput.java\npackage com.myhexin.zixun.application.manager.flash.news.external.feign.dto;\n\nimport com.alibaba.fastjson.JSON;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\nimport java.io.Serializable;\n\n/**\n * 文本精简接口入参\n *\n * @author lihe2@myhexin.com\n * @date 2024/3/28 15:57\n */\n@Data\n@Accessors(chain = true)\npublic class TextSummaryInput implements Serializable {\n    private static final long serialVersionUID = -7123821614322339842L;\n    /**\n     * input入参\n     */\n    private String input;\n\n    public TextSummaryInput(String text) {\n        this.input = JSON.toJSONString(new TextSummaryInputBean(text));\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class TextSummaryInputBean implements Serializable {\n        private static final long serialVersionUID = 3929973689786768309L;\n        /**\n         * 文本入参\n         */\n        private String text;\n    }\n}\n<file_path>news-f10-api/src/main/java/com/myhexin/news/dto/translate/ModelTranslateResultDTO.java\npackage com.myhexin.news.dto.translate;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * 大模型翻译的结果协议\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:51\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ModelTranslateResultDTO {\n    /**\n     * 原始内容\n     */\n    private String originContent;\n\n    /**\n     * 翻译后的内容\n     */\n    private String translatedContent;\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/factory/translation/ModelTranslateMode.java\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.annotation.JSONField;\nimport com.myhexin.news.common.dto.NewsTranslateResult;\nimport com.myhexin.news.common.dto.TransResult;\nimport com.myhexin.news.common.util.spring.SpringContextHolder;\nimport com.myhexin.news.dto.translate.ModelTranslateRequestDTO;\nimport com.myhexin.news.dto.translate.ModelTranslateResultDTO;\nimport com.myhexin.news.feign.ModelTranslateFeign;\nimport com.myhexin.news.feign.request.ModelTranslateFeignRequest;\nimport com.myhexin.news.feign.response.ModelTranslateFeignResponse;\nimport com.myhexin.news.properties.NewsProperty;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * 大模型翻译实现\n * 泰语、葡萄牙语、阿拉伯语 翻译的实现（直接继承此接口）\n *\n * TODO 各个实现类在调用那里要new一下\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:45\n */\npublic class ModelTranslateMode extends AbstractTranslateMode {\n    protected static NewsProperty newsProperty = SpringContextHolder.getBean(\"newsProperty\");\n\n    private static ModelTranslateFeign modelTranslateFeign = SpringContextHolder.getBean(\"modelTranslateFeign\");\n\n\n\n    @Override\n    public NewsTranslateResult translateData(List<String> content, int retry) {\n\n        final List<ModelTranslateResultDTO> resultDTOList = content.stream()\n                .map(this::buildRequest)\n                .map(this::modelTranslate)\n                .collect(Collectors.toList());\n\n        return buildResult(resultDTOList);\n    }\n\n    /**\n     * 组装大模型接口请求的参数\n     * @param content 待翻译内容\n     * @return 大模型接口请求的参数\n     */\n    protected ModelTranslateRequestDTO buildRequest(String text) {\n        // 注意这里构造的没有 目标语言的dto对象\n        return new ModelTranslateRequestDTO(text, newsProperty.getAppId(), \"default\", \"en\", null);\n    }\n\n    /**\n     * 调用大模型翻译接口并转换结果\n     * @param requestDTO 请求参数\n     * @return 翻译结果\n<file_path>news-f10-api/src/main/java/com/myhexin/news/common/dto/TransResult.java\npackage com.myhexin.news.common.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * @author xuzekui\n * @date 2021/11/26 11:20\n * @description\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class TransResult {\n\n    private String src;\n    private String dst;\n\n}",
    "relevantFileList": [],
    "filePath": "news-f10-api/src/main/java/com/myhexin/news/common/dto/NewsTranslateResult.java",
    "template": "java",
    "multiRes": { "hipilot": "(", "CodeQwen2.5-7B": ";", "copilot": ">()", "CodeQwen1.5-7B": ";" }
  },
  {
    "prefix": "public class Main {\n    public static void main(String[] args) {\n        // Press Alt+Enter with your caret at the highlighted text to see how\n        // IntelliJ IDEA suggests fixing it.\n        System.out.printf(\"Hello and welcome!\");\n\n        // Press Shift+F10 or click the green arrow button in the gutter to run the code.\n        for (int i = 1; i <= 5; i++) {\n\n            // Press Shift+F9 to start debugging your code. We have set one breakpoint\n            // for you, but you can always add more by pressing Ctrl+F8.\n            System.out.println(\"i = \" + i);\n            switch(i) {\n                case 1:\n                    System.out.println(\"One\");\n                    break;\n                case 2:\n                    System.out.println(\"Two\");\n                    break;\n                case 3:\n                    System.out.println(\"Three\");\n                    break;\n                case 4:\n                    System.out.println(\"Four\");\n                    break;\n                case 5:\n                    System.out.println(\"Five\");\n                    break; \n                case 6:\n                    System.out.println(\"Six\");\n                    break;\n                    case 7:\n                    System.out.println(\"Seven\");\n                    break;\n                    case 8:\n                    System.out.println(\"Eight\");\n                    case 9:\n                    System.out.println(\"Nine\");\n                    break;\n                    case ",
    "infill": "10:\n                default:",
    "suffix": "\n                    System.out.println(\"Unknown number\");\n                    break;\n            }\n        }\n        int i = 0;\n        while (i < 5) {\n            System.out.println(\"i = \" + i);\n            if (i == 3) {\n                break;\n            }\n            i++;\n        }\n\n    }\n}",
    "relevantFile": "",
    "relevantFileList": [],
    "filePath": "src/Main.java",
    "template": "java",
    "multiRes": {
      "hipilot": "10:",
      "CodeQwen2.5-7B": "10:",
      "copilot": "10:\n                default:",
      "CodeQwen1.5-7B": " 10:"
    }
  },
  {
    "prefix": "public class Main22 {\n    public static void main(String[] args) {\n        //TIP 当文本光标位于高亮显示的文本处时按 <shortcut actionId=\"ShowIntentionActions\"/>\n        // 查看 IntelliJ IDEA 建议如何修正。\n        System.out.printf(\"Hello and welcome!\");\n\n        for (int i = 1; i <= 5; i++) {\n            //TIP 按 <shortcut actionId=\"Debug\"/> 开始调试代码。我们已经设置了一个 <icon src=\"AllIcons.Debugger.Db_set_breakpoint\"/> 断点\n            // 但您始终可以通过按 <shortcut actionId=\"ToggleLineBreakpoint\"/> 添加更多断点。\n            System.out.println(\"i = \" + i);\n            if (i == 3) {\n                break;\n            } else if (i == 2) {\n                continue;\n            } else if ",
    "infill": "(i == 1) {\n                System.out.println(\"i is 1\");\n            }\n        }\n    }\n}",
    "suffix": "",
    "relevantFile": "<file_path>src/Student.java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n\npublic class Student {\n    private String name;\n    private int age;\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n<file_path>src/Main.java\n//TIP To <b>Run</b> code, press <shortcut actionId=\"Run\"/> or\n// click the <icon src=\"AllIcons.Actions.Execute\"/> icon in the gutter.\npublic class Main {\n    public static void main(String[] args) {\n        //TIP Press <shortcut actionId=\"ShowIntentionActions\"/> with your caret at the highlighted text\n        // to see how IntelliJ IDEA suggests fixing it.\n        System.out.print(\"Hello and welcome!\");\n\n        for (int i = 1; i <= 5; i++) {\n            //TIP Press <shortcut actionId=\"Debug\"/> to start debugging your code. We have set one <icon src=\"AllIcons.Debugger.Db_set_breakpoint\"/> breakpoint\n            // for you, but you can always add more by pressing <shortcut actionId=\"ToggleLineBreakpoint\"/>.\n            System.out.println(\"i = \" + i);\n        }\n\n        switch (args.length) {\n            case 0:\n                System.out.println(\"No arguments were passed.\");\n                break;\n            case 1:\n                System.out.println(\"One argument was passed.\");\n                break;\n                case 2:\n                System.out.println(\"Two arguments were passed.\");\n                break;\n                case 3:\n                System.out.println(\"Three arguments were passed.\");\n                case 4:\n                System.out.println(\"Four arguments were passed.\");\n                break;\n                case 5:\n                System.out.println(\"Five arguments were passed.\");\n                case 6:\n                System.out.println(\"Six arguments were passed.\");\n                case 7:\n                System.out.println(\"Seven arguments were passed.\");\n                case 8:\n                System.out.println(\"Eight arguments were passed.\");\n                case 9:\n                System.out.println(\"Nine arguments were passed.\");\n                case 10:\n                System.out.println(\"Ten arguments were passed.\");\n                case 11:\n                System.out.println(\"Eleven arguments were passed.\");\n            default:\n                System.out.println(\"More than one argument was passed.\");\n        }\n\n    }\n}\nIP 要<b>运行</b>代码，请按 <shortcut actionId=\"Run\"/> 或\n点击装订区域中的 <icon src=\"AllIcons.Actions.Execute\"/> 图标。",
    "relevantFileList": [],
    "template": "java",
    "multiRes": {
      "hipilot": "(i == 4) {\n                return;\n            }\n        }\n    }\n}",
      "CodeQwen2.5-7B": "(i == 4) {",
      "copilot": "(i == 1) {\n                System.out.println(\"i is 1\");\n            }\n        }\n    }\n}",
      "CodeQwen1.5-7B": " (i == 4) {"
    }
  },
  {
    "prefix": "package com.myhex",
    "infill": " content = \"test content\".getBytes();\n        Respo",
    "suffix": "nse response = Response.builder()\n                .status(HttpStatus.OK.value())\n                .body(new ByteArrayInputStream(content), content.length)\n                .build();\n        when(cbasVenomFeign.download(anyString(), anyString(), anyString())).thenReturn(response);\n\n        DownloadInfo downloadInfo = cbasVenomResourceRepository.download(\"testBucket\", \"testName\", \"targetPath\");\n\n        assertTrue(downloadInfo.getSuccess());\n        assertEquals(\"targetPath\", downloadInfo.getPath());\n        assertEquals(12L, downloadInfo.getSize());\n    }\n\n    @Test\n    public void testDownload_Failure() {\n        Response response = Response.builder()\n                .status(HttpStatus.NOT_FOUND.value())\n                .build();\n        when(cbasVenomFeign.download(anyString(), anyString(), anyString())).thenReturn(response);\n\n        DownloadInfo downloadInfo = cbasVenomResourceRepository.download(\"testBucket\", \"testName\", \"targetPath\");\n\n        assertFalse(downloadInfo.getSuccess());\n        assertNull(downloadInfo.getPath());\n        assertEquals(0L, downloadInfo.getSize());\n    }\n}",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/mobileweb/optdata/selfgroup/deploy/entity/DownloadInfo.java\npackage com.myhexin.mobileweb.optdata.selfgroup.deploy.entity;\n\nimport lombok.Data;\n\n/**\n * 下载信息\n *\n * @author Rick Chen <mail>chencongying@myhexin.com</mail>\n * @date 2023/8/25 16:01\n */\n@Data\npublic class DownloadInfo {\n    /**\n     * 文件大小，单位：字节\n     */\n    private Long size;\n    /**\n     * 文件路径\n     */\n    private String path;\n    /**\n     * 是否下载成功\n     */\n    private Boolean success;\n}\n<file_path>deploy/src/test/java/com/myhexin/mobileweb/optdata/selfgroup/deploy/common/util/XxlJobShardingUtilTest.java\npackage com.myhexin.mobileweb.optdata.selfgroup.deploy.common.util;\n\nimport com.xxl.job.core.util.ShardingUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n * 本单元测试使用 Copilot 生成\n */\npublic class XxlJobShardingUtilTest {\n\n    @BeforeEach\n    public void setUp() {\n        ShardingUtil.setShardingVo(null);\n    }\n\n    @Test\n    public void testGetTotal() {\n        assertEquals(1, XxlJobShardingUtil.getTotal());\n\n        ShardingUtil.setShardingVo(new ShardingUtil.ShardingVO(0, 5));\n        assertEquals(5, XxlJobShardingUtil.getTotal());\n    }\n\n    @Test\n    public void testGetIndex() {\n        assertEquals(0, XxlJobShardingUtil.getIndex());\n\n        ShardingUtil.setShardingVo(new ShardingUtil.ShardingVO(2, 5));\n        assertEquals(2, XxlJobShardingUtil.getIndex());\n    }\n\n    @Test\n    public void testGetShardingList() {\n        List<Integer> taskList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n        // Test when taskList is null\n        assertNull(XxlJobShardingUtil.getShardingList(null));\n\n        // Test when taskList is empty\n        assertTrue(XxlJobShardingUtil.getShardingList(Collections.emptyList()).isEmpty());\n\n        // Test when ShardingVO is null\n        assertEquals(taskList, XxlJobShardingUtil.getShardingList(taskList));\n\n        // Test when ShardingVO is not null\n        ShardingUtil.setShardingVo(new ShardingUtil.ShardingVO(1, 3));\n        assertEquals(Arrays.asList(2, 5, 8), XxlJobShardingUtil.getShardingList(taskList));\n    }\n}\n<file_path>deploy/src/test/java/com/myhexin/mobileweb/optdata/selfgroup/deploy/common/util/DownloadUtilTest.java\npackage com.myhexin.mobileweb.optdata.selfgroup.deploy.common.util;\n\nimport cn.hutool.http.HttpRequest;\nimport cn.hutool.http.HttpResponse;\nimport cn.hutool.http.HttpUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.MockedStatic;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.anyInt;\nimport static org.mockito.ArgumentMatchers.anyString;\n\npublic class DownloadUtilTest {\n\n    @BeforeEach\n    public void setUp() {\n    }\n\n    @Test\n    public void testDownloadFile() {\n        try (MockedStatic<HttpUtil> utilities = Mockito.mockStatic(HttpUtil.class)) {\n            utilities.when(() -> HttpUtil.downloadFile(anyString(), anyString())).thenReturn(100L);\n\n            long size = DownloadUtil.downloadFile(\"http://example.com\", \"/path/to/file\");\n            assertEquals(100L, size);\n        }\n    }\n\n    @Test\n    public void testIsRemoteResourceExists() {\n        try (MockedStatic<HttpRequest> requestMock = Mockito.mockStatic(HttpRequest.class)) {\n            HttpResponse response = Mockito.mock(HttpResponse.class);\n            Mockito.when(response.isOk()).thenReturn(true);\n\n            HttpRequest request = Mockito.mock(HttpRequest.class);\n            Mockito.when(request.timeout(anyInt())).thenReturn(request);\n            Mockito.when(request.execute()).thenReturn(response);\n\n            requestMock.when(() -> HttpRequest.head(anyString())).thenReturn(request);\n\n            boolean exists = DownloadUtil.isRemoteResourceExists(\"http://example.com\");\n            assertTrue(exists);\n        }\n    }\n    @Test\n    public void testDownloadFileWhenUrlIsInvalidShouldThrowException() {\n        try (MockedStatic<HttpUtil> utilities = Mockito.mockStatic(HttpUtil.class)) {\n            utilities.when(() -> HttpUtil.downloadFile(anyString(), anyString())).thenThrow(new RuntimeException(\"Invalid URL\"));\n\n            assertThrows(RuntimeException.class, () -> DownloadUtil.downloadFile(\"invalid_url\", \"/path/to/file\"));\n        }\n    }\n\n    @Test\n    public void testIsRemoteResourceExistsWhenUrlIsInvalidShouldReturnFalse() {\n        try (MockedStatic<HttpRequest> requestMock = Mockito.mockStatic(HttpRequest.class)) {\n            HttpRequest request = Mockito.mock(HttpRequest.class);\n            Mockito.when(request.timeout(anyInt())).thenReturn(request);\n<file_path>deploy/src/main/java/com/myhexin/mobileweb/optdata/selfgroup/deploy/repository/impl/CbasVenomResourceRepositoryImpl.java\npackage com.myhexin.mobileweb.optdata.selfgroup.deploy.repository.impl;\n\nimport com.myhexin.mobileweb.optdata.selfgroup.deploy.entity.DownloadInfo;\nimport com.myhexin.mobileweb.optdata.selfgroup.deploy.repository.RemoteFileResourceRepository;\nimport com.myhexin.mobileweb.optdata.selfgroup.deploy.repository.external.feign.CbasVenomFeign;\nimport feign.Response;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.FileUtils;\nimport org.jetbrains.annotations.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Repository;\n\nimport java.io.File;\n\n/**\n * CBAS Venom 远程资源仓库实现\n *\n * @author Rick Chen <mail>chencongying@myhexin.com</mail>\n * @date 2023/8/25 17:08\n */\n@Repository\n@Slf4j\npublic class CbasVenomResourceRepositoryImpl implements RemoteFileResourceRepository {\n    /**\n     * cbas venom 应用KEY\n     */\n    private final String cbasVenomAppKey;\n    /**\n     * cbas venom客户端\n     */\n    private final CbasVenomFeign cbasVenomFeign;\n\n    @Autowired\n    public CbasVenomResourceRepositoryImpl(\n            CbasVenomFeign cbasVenomFeign,\n            @Value(\"${cbas.venom.app-key}\") String cbasVenomAppKey\n    ) {\n        this.cbasVenomFeign = cbasVenomFeign;\n        this.cbasVenomAppKey = cbasVenomAppKey;\n    }\n\n    @NotNull\n    @Override\n    public DownloadInfo download(String bucket, String name, String targetPath) {\n        DownloadInfo downloadInfo = new DownloadInfo();\n        try (Response response = this.cbasVenomFeign.download(this.cbasVenomAppKey, bucket, name)) {\n            if (response.status() == HttpStatus.OK.value()) {\n                File targetFile = FileUtils.getFile(targetPath);\n                FileUtils.copyInputStreamToFile(response.body().asInputStream(), targetFile);\n                downloadInfo.setSize(FileUtils.sizeOf(targetFile));\n                downloadInfo.setPath(targetPath);\n                downloadInfo.setSuccess(true);\n            } else {\n                downloadInfo.setSize(0L);\n                downloadInfo.setPath(null);\n                downloadInfo.setSuccess(false);\n            }\n        } catch (Exception e) {",
    "relevantFileList": [],
    "filePath": "deploy/src/test/java/com/myhexin/mobileweb/optdata/selfgroup/deploy/repository/impl/CbasVenomResourceRepositoryImplTest.java",
    "template": "java",
    "multiRes": {
      "hipilot": "in.mobileweb.optdata.selfgroup.deploy.repository.impl;\n\nimport com.myhexin.mobileweb.optdata.selfgroup.deploy.entity.DownloadInfo;",
      "CodeQwen2.5-7B": "avoc.cbas.venom.repository;",
      "copilot": " content = \"test content\".getBytes();\n        Respo",
      "CodeQwen1.5-7B": " av.cbas.repository;"
    }
  },
  {
    "prefix": "p",
    "infill": "ign fallback\");\n\n    private static final ModelTranslateFeign FALLBACK = request -> DEFAULT_OUTPUT;\n\n    @Override\n    public ModelTranslateFeign crea",
    "suffix": "te(Throwable throwable) {\n        LogItem instance = LogItem.getInstance();\n        instance.add(\"content\", \"ModelTranslateFeign:modelTranslate()feign failed fallback. msg = \" + throwable.getMessage());\n        OvseStatsLog.error(NewsFlashConstant.BUSINESS_NAME, LogMessage.NEWS_TRANSLATE, instance, throwable);\n        return FALLBACK;\n    }\n}\n",
    "relevantFile": "<file_path>news-f10-service/src/main/java/com/myhexin/news/factory/translation/AbstractTranslateMode.java\npackage com.myhexin.news.factory.translation;\n\n\nimport com.jqka.ovse.framework.base.json.OvseJson;\nimport com.jqka.ovse.framework.common.bean.LogItem;\nimport com.jqka.ovse.framework.common.http.client.DefaultOvseHttpClient;\nimport com.jqka.ovse.framework.common.http.client.OvseHttpClient;\nimport com.jqka.ovse.framework.common.http.client.OvseHttpParams;\nimport com.jqka.ovse.framework.common.http.client.OvseHttpResponse;\nimport com.jqka.ovse.framework.common.util.OvseStatsLog;\nimport com.myhexin.news.common.dto.NewsTranslateResult;\nimport com.myhexin.news.common.util.spring.SpringContextHolder;\nimport com.myhexin.news.constant.LogMessage;\nimport com.myhexin.news.constant.NewsFlashConstant;\nimport com.myhexin.news.metric.Metric;\nimport com.myhexin.news.properties.NewsProperty;\nimport org.apache.commons.codec.digest.DigestUtils;\nimport org.apache.http.Header;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.message.BasicHeader;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\n/**\n * @author xuzekui\n * @date 2022/9/7 9:16\n * @description\n */\npublic abstract class AbstractTranslateMode implements TranslationFactory {\n\n    protected static final String BIZ_NAME = \"translate\";\n\n    protected static final String APP_ID = \"appId\";\n    private static final String APP_KEY = \"appKey\";\n\n    /**\n     * code and msg\n     */\n    protected static final int TRANSLATE_SUCCESS_CODE = 0;\n    protected static final String TRANSLATE_SUCCESS_MSG = \"success\";\n\n    protected static NewsProperty newsProperty = SpringContextHolder.getBean(\"newsProperty\");\n\n    private static Metric metric = SpringContextHolder.getBean(\"metric\");\n\n    static Properties translateProp = new Properties();\n\n    protected List<Header> headers = new ArrayList<>();\n\n    private OvseHttpClient httpClient = DefaultOvseHttpClient.getClient();\n\n    AbstractTranslateMode() {\n        translateProp.put(APP_ID, newsProperty.getAppId());\n        translateProp.put(APP_KEY, newsProperty.getAppKey());\n        translateProp.put(\"url\", newsProperty.getUrl());\n\n        headers.add(new BasicHeader(\"Content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\"));\n<file_path>src/main/java/com/myhexin/zixun/application/manager/flash/news/external/feign/fallback/ComplianceAuditFeignFallbackFactory.java\npackage com.myhexin.zixun.application.manager.flash.news.external.feign.fallback;\n\nimport com.myhexin.zixun.application.manager.flash.news.external.feign.inter.ComplianceAuditFeign;\nimport feign.hystrix.FallbackFactory;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\n/**\n * @Author gaocai\n * @Date 2023/5/29\n * @Description\n */\n@Slf4j\n@Component\npublic class ComplianceAuditFeignFallbackFactory implements FallbackFactory<ComplianceAuditFeign> {\n\n    private final ComplianceAuditFeign fallback = new ComplianceAuditFeignFallback();\n\n    @Override\n    public ComplianceAuditFeign create(Throwable throwable){\n        log.error(\"post机审接口调用失败，降级处理，异常信息：\" + throwable);\n        return fallback;\n    }\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/feign/ModelTranslateFeign.java\npackage com.myhexin.news.feign;\n\nimport com.myhexin.news.feign.fallback.ModelTranslateFeignFallbackFactory;\nimport com.myhexin.news.feign.request.ModelTranslateFeignRequest;\nimport com.myhexin.news.feign.response.ModelTranslateFeignResponse;\nimport feign.Logger;\nimport feign.codec.Encoder;\nimport feign.form.FormEncoder;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\n/**\n * model translate feign\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 22:11\n *\n * TODO nacos待完善\n */\n@FeignClient(\n        name = \"modelTranslateFeign\",\n        url = \"${translation.model.server:http://speech.ths8.com:10020}\",\n        fallbackFactory = ModelTranslateFeignFallbackFactory.class\n)\npublic interface ModelTranslateFeign {\n\n    /**\n     * model translate\n     *\n     * @param request param\n     * @return response\n     */\n    @PostMapping(value = \"${translation.model.path:/translateConnection/model/translate}\",\n            consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)\n    ModelTranslateFeignResponse modelTranslate(@RequestBody ModelTranslateFeignRequest request);\n\n\n    class ClientConfig {\n        @Bean\n        Encoder feignEncoder() {\n            return new FormEncoder();\n        }\n\n        @Bean\n        Logger.Level feignLoggerLevel() {\n            return Logger.Level.FULL;\n        }\n    }\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/factory/translation/ModelTranslateMode.java\nimport com.jqka.ovse.framework.common.bean.LogItem;\nimport com.jqka.ovse.framework.common.util.OvseStatsLog;\nimport com.myhexin.news.common.dto.NewsTranslateResult;\nimport com.myhexin.news.common.dto.TransResult;\nimport com.myhexin.news.common.util.spring.SpringContextHolder;\nimport com.myhexin.news.constant.LogMessage;\nimport com.myhexin.news.constant.NewsFlashConstant;\nimport com.myhexin.news.dto.translate.ModelTranslateRequestDTO;\nimport com.myhexin.news.dto.translate.ModelTranslateResultDTO;\nimport com.myhexin.news.feign.ModelTranslateFeign;\nimport com.myhexin.news.feign.request.ModelTranslateFeignRequest;\nimport com.myhexin.news.feign.response.ModelTranslateFeignResponse;\nimport com.myhexin.news.properties.NewsProperty;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * implements model translate mode\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:45\n */\npublic class ModelTranslateMode extends AbstractTranslateMode {\n    protected static NewsProperty newsProperty = SpringContextHolder.getBean(\"newsProperty\");\n\n    private static ModelTranslateFeign modelTranslateFeign = SpringContextHolder.getBean(\"modelTranslateFeign\");\n\n\n    @Override\n    public NewsTranslateResult translateData(List<String> content, int retry) {\n\n        final List<ModelTranslateResultDTO> resultDTOList = content.stream()\n                .map(this::buildRequest)\n                .map(this::modelTranslate)\n                .collect(Collectors.toList());\n\n        final NewsTranslateResult result = buildResult(resultDTOList);\n\n        // log\n        LogItem instance = LogItem.getInstance();\n        instance.add(\"className\", this.getClass().getSimpleName());\n        instance.add(\"content\", content);\n        OvseStatsLog.info(NewsFlashConstant.BUSINESS_NAME, LogMessage.NEWS_TRANSLATE, instance);\n\n        return result;\n    }\n\n    /**\n     * assemble request\n     * @param text content of before translate\n     * @return request dto\n     */\n    protected ModelTranslateRequestDTO buildRequest(String text) {\n        // with null target language\n        return new ModelTranslateRequestDTO(text, newsProperty.getAppId(), \"default\", \"en\", null);\n    }",
    "relevantFileList": [],
    "filePath": "news-f10-service/src/main/java/com/myhexin/news/feign/fallback/ModelTranslateFeignFallbackFactory.java",
    "template": "java",
    "multiRes": {
      "hipilot": "ackage com.myhexin.news.feign.fallback;\n\nimport com.myhexin.news.constant.LogMessage;\nimport com.myhexin.news.constant.NewsFlashConstant;",
      "CodeQwen2.5-7B": "ackage com.ovse.statslog.feign;",
      "copilot": "ign fallback\");\n\n    private static final ModelTranslateFeign FALLBACK = request -> DEFAULT_OUTPUT;\n\n    @Override\n    public ModelTranslateFeign crea",
      "CodeQwen1.5-7B": " ackage com.ovsebs.javacore.newsflash.service.feign;"
    }
  },
  {
    "prefix": "package com.myhexin.news.service.community.impl;\n\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.jqka.ovse.framework.base.json.JsonObj;\nimport com.jqka.ovse.framework.base.json.OvseJson;\nimport com.jqka.ovse.framework.common.enums.I18nLang;\nimport com.jqka.ovse.framework.ebus.constant.KafkaConstant;\nimport com.myhexin.common.cache.NewsFlashLoader;\nimport com.myhexin.common.util.RedisUtils;\nimport com.myhexin.news.constant.NewsConstants;\nimport com.myhexin.news.constant.RedisKeyConstants;\nimport com.myhexin.news.dto.newsflash.NewsFlashCacheDto;\nimport com.myhexin.news.dto.newsflash.NewsMetricsMsgDto;\nimport com.myhexin.news.enums.NewsMetricsEnum;\nimport com.myhexin.news.feign.CommentServiceFeign;\nimport com.myhexin.news.mapper.NewsFlashMetricsMapper;\nimport com.myhexin.news.po.NewsFlashCounterPO;\nimport com.myhexin.news.service.community.NewsFlashMetricsService;\nimport com.myhexin.news.vo.OvseNewsVO;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.support.Acknowledgment;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.ObjectUtils;\n\nimport java.security.SecureRandom;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\nimport static com.myhexin.news.constant.CommentServiceParam.*;\n\n/**\n * @Author lizhenwei\n */\n\n@Slf4j\n@Service\npublic class NewsFlashMetricsServiceImpl implements NewsFlashMetricsService {\n\n    private static final String NEWS",
    "infill": "NewsFlashCounterPO.builder()\n                            .id(id)\n                            .type(type.name())\n                            .count(entryData.getValue() + )\n                            .build());\n//                    Long delta =",
    "suffix": " entryData.getValue();\n//                    List<NewsFlashCounterPO> data = newsFlashMetricsMapper.selectList(Wrappers.<NewsFlashCounterPO>lambdaQuery()\n//                            .eq(NewsFlashCounterPO::getId, id)\n//                            .eq(NewsFlashCounterPO::getType, type));\n//                    if (CollectionUtils.isEmpty(data)) {\n//                        newsFlashMetricsMapper.insert(NewsFlashCounterPO.builder()\n//                                .id(id)\n//                                .type(type.name())\n//                                .count(delta)\n//                                .build());\n//                    } else {\n//                        newsFlashMetricsMapper.increment(type, id, delta);\n//                    }\n                }\n                //将insertData进行批量插入\n                \n                \n                \n                \n                \n                \n                \n                \n            }\n        } finally {\n            ack.acknowledge();\n        }\n\n    }\n\n    /**\n     * update cache in redis by kafka message\n     * @param type\n     * @param contentIdMap\n     */\n    private void processCacheByMq(NewsMetricsEnum type, Map<String, Long> contentIdMap){\n        Map<String, Long> cacheMap = contentIdMap.entrySet().stream()\n                .collect(Collectors.toMap(item -> String.format(RedisKeyConstants.NEWS_METADATA_KEY, item.getKey()),\n                        Map.Entry::getValue, (var1, var2) -> var1));\n\n        List<String> values = RedisUtils.batchGet(cacheMap.keySet());\n        Map<String, String> result = values.stream().filter(StringUtils::isNotEmpty)\n                .map(item -> OvseJson.toBean(item, OvseNewsVO.UserMetadata.class))\n                .map(item -> {\n                    String key = String.format(RedisKeyConstants.NEWS_METADATA_KEY, item.getContentId());\n                    if (type == NewsMetricsEnum.NEWS_FLASH_SHARE) {\n                        item.setShareCount(item.getShareCount() + cacheMap.getOrDefault(key, 0L));\n                    }\n                    if (type == NewsMetricsEnum.NEWS_FLASH_VIEW) {\n                        item.setViewCount(item.getViewCount() + cacheMap.getOrDefault(key, 0L));\n                    }\n                    return item;\n                }).collect(Collectors.toMap(item -> String.format(RedisKeyConstants.NEWS_METADATA_KEY, item.getContentId()),\n                        OvseJson::toJsonStr, (var1, var2) -> var1));\n        RedisUtils.batchSet(result, EXPIRE_TIME, TimeUnit.MINUTES);\n\n    }\n\n}\n",
    "relevantFile": "<file_path>news-f10-api/src/main/java/com/myhexin/news/query/RobotNewsQuery.java\n */\n@Data\npublic class RobotNewsQuery {\n\n    /**\n     * 消息类型\n     */\n    private String newsType;\n    /**\n     * 消息格式\n     */\n    private String newsFormat;\n\n    /**\n     * 消息来源\n     */\n    private String newsFrom;\n\n    /**\n     * 消息重要性\n     */\n    private Integer newsImportant;\n\n    /**\n     * 股票代码\n     */\n    private List<String> stockCodes;\n\n    /**\n     * 业务标签\n     */\n    private List<String> businessTags;\n\n    /**\n     * 加密货币标签\n     */\n    private List<String> cryptoTags;\n\n    /**\n     * 主题标签\n     */\n    private List<String> themeTags;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    private Date startTime;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    private Date endTime;\n\n    /**\n     * true desc,\n     * false asc\n     */\n    private Boolean orderBy = true;\n\n    private Integer pageNum = 1;\n\n    private Integer pageSize = 100;\n\n}\n<file_path>news-f10-api/src/main/java/com/myhexin/news/vo/NewsFlashVO.java\npublic class NewsFlashVO {\n    /**\n     * news-flash id\n     */\n    private String newsId;\n    /**\n     * content id\n     */\n    private String contentId;\n    /**\n     * news-flash title\n     */\n    private String title;\n    /**\n     * news-flash summary\n     */\n    private String summary;\n    /**\n     * news-flash content\n     */\n    private String content;\n    /**\n     * news source\n     */\n    private String source;\n    /**\n     * seo key\n     */\n    private String sourceUrl;\n    /**\n     * news-flash pictures\n     */\n    private List<Map> imageUrls;\n    /**\n     * news-flash tags ,include stock、concept etc...\n     */\n    private List<Tag> tagList;\n    /**\n     * news-flash publish time\n     */\n    private Long publishTime;\n    /**\n     * news-flash type , 0 is common, 1 is push\n     */\n    private Integer type;\n    /**\n     * news-flash nature, -1 is none, 0 is favorable 1 is unfavorable\n     */\n    private Integer mark;\n    /**\n     * news-flash penny-stock. true or false\n     */\n    private Boolean pennyStock;\n    /**\n     * news type\n     */\n    private Integer newsType;\n    /**\n     * news-flash language\n     */\n<file_path>news-f10-service/src/main/java/com/myhexin/news/service/robotnews/impl/RobotNewsServiceImpl.java\n\nimport javax.annotation.Resource;\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.Optional;\n\n/**\n * @author pengshuo@myhexin.com\n * @date 2024/1/29\n */\n@Slf4j\n@Service\npublic class RobotNewsServiceImpl implements RobotNewsService {\n\n    @Resource\n    private OvseNewsMapper ovseNewsMapper;\n\n    @Resource\n    private OvseNewsEsService ovseNewsEsService;\n\n    @Override\n    public Page<OvseNews> getPage(RobotNewsQuery robotNewsQuery) {\n\n        OvseNewsEsQuery esQuery = OvseNewsEsQuery.builder()\n                .business(robotNewsQuery.getNewsType())\n                .stockCodes(robotNewsQuery.getStockCodes())\n                .newsFormat(robotNewsQuery.getNewsFormat())\n                .newsFrom(robotNewsQuery.getNewsFrom())\n                .businessTag(robotNewsQuery.getBusinessTags())\n                .newsImportant(robotNewsQuery.getNewsImportant())\n                .cryptoTags(robotNewsQuery.getCryptoTags())\n                .themeTags(robotNewsQuery.getThemeTags())\n                .startTime(Optional.ofNullable(robotNewsQuery.getStartTime()).map(Date::getTime).orElse(new Date(0).getTime()))\n                .endTime(Optional.ofNullable(robotNewsQuery.getEndTime()).map(Date::getTime).orElse(DateTime.now().getTime()))\n                .timeOperatorEnum(NewsEsSearchTimeOperatorEnum.BETWEEN)\n                .sorted(Optional.ofNullable(robotNewsQuery.getOrderBy()).orElse(Boolean.TRUE))\n                .builder();\n\n        List<String> ids = ovseNewsEsService.query(esQuery);\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"getPage param={}, result ids={}\", OvseJson.toJsonStr(robotNewsQuery), ids);\n        }\n\n        int pageNum = Math.max(1, robotNewsQuery.getPageNum());\n        int pageSize = Math.min(Math.max(1, robotNewsQuery.getPageSize()), 1000);\n\n        Page<OvseNews> page = new Page<>(pageNum, pageSize);\n        if (CollectionUtils.isEmpty(ids)) {\n            return page;\n        }\n        return ovseNewsMapper.selectPage(page, new LambdaQueryWrapper<OvseNews>()\n                .in(!CollectionUtils.isEmpty(ids), OvseNews::getNewsId, ids)\n                .orderBy(robotNewsQuery.getOrderBy() != null,\n                        Boolean.TRUE.equals(robotNewsQuery.getOrderBy()), OvseNews::getPublishTime));\n\n    }\n\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/mapper/NewsFlashMetricsMapper.java\npackage com.myhexin.news.mapper;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.myhexin.news.enums.NewsMetricsEnum;\nimport com.myhexin.news.po.NewsFlashCounterPO;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\n\n\n/**\n * @Author lizhenwei\n */\n@Mapper\npublic interface NewsFlashMetricsMapper extends BaseMapper<NewsFlashCounterPO> {\n\n    /**\n     * add count\n     *\n     * @param type\n     * @param id\n     * @param delta\n     */\n    void increment(@Param(\"type\") NewsMetricsEnum type, @Param(\"id\") String id, @Param(\"delta\") Long delta);\n\n}",
    "relevantFileList": [],
    "filePath": "news-f10-service/src/main/java/com/myhexin/news/service/community/impl/NewsFlashMetricsServiceImpl.java",
    "template": "java",
    "multiRes": {
      "hipilot": "_COMMENT_TOPIC = KafkaConstant.OVSE_NEWS_COMMENT_TOPIC;",
      "CodeQwen2.5-7B": "_FLASH_METRICS_TOPIC = \"news_flash_metrics\";",
      "copilot": "NewsFlashCounterPO.builder()\n                            .id(id)\n                            .type(type.name())\n                            .count(entryData.getValue() + )\n                            .build());\n//                    Long delta =",
      "CodeQwen1.5-7B": " _FLASH_METRICS_TOPIC = \"news_flash_metrics\";"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.modules.topic.domain.consts;\n\nimport lombok.Getter;\n\n/**\n * @author wangming@myhexin.com\n * @desc 话题label\n */\npublic enum HotTopicColorEnum {\n    /**\n     * 默认\n     */\n    EMPTY(\"\", \"\", \"\", \"\"),\n    /**\n     * 热议\n     */\n    HOT(\"1\", \"热议\", \"#FF801A,#D96C16\", \"#FFF2E8,#2C2118\"),\n    /**\n     * 飙升\n     */\n    SOAR(\"2\", \"飙升\", \"#FF801A,#D96C16\", \"#FFF2E8,#2C2118\"),\n    /**\n     * 活动\n     */\n    ACTIVITY(\"3\", \"活动\", \"#4691EE,#3D76B8\", \"#ECF4FD,#1C2228\"),\n    ;\n    /**\n     * 标签类别\n     */\n    @Getter\n    private final String labelType;\n    /**\n     * 文字颜色\n     */\n    @Getter\n    pri",
    "infill": "标签类型\n     * @return 标签内容\n     */\n",
    "suffix": "    public static String getLabelWordByLabelType(String labelType) {\n        for (HotTopicColorEnum hotTopicColorEnum : HotTopicColorEnum.values()) {\n            if (hotTopicColorEnum.getLabelType().equals(labelType)) {\n                return hotTopicColorEnum.getLabelWord();\n            }\n        }\n        return EMPTY.getLabelWord();\n    }\n\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/HotContentOperatingManager.java\n\n/**\n * Manager类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 20:48\n */\n@Component\n@RequiredArgsConstructor\npublic class HotContentOperatingManager {\n    private final HotContentOperatingService hotContentOperatingService;\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param id       内容id\n     * @param type     内容类型\n     * @param creator  创建者\n     * @param page     当前页\n     * @param pageSize 页大小\n     * @param status   状态信息\n     * @return 热点池数据\n     */\n    public HotContentPoolResultDTO getHotContentPool(String id, String type, String creator, Integer page, Integer pageSize, Integer status) {\n        // 创建查询条件\n        HotContentQuery hotContentQuery = HotContentQuery.of()\n                .setId(id)\n                .setType(type)\n                .setCreator(creator)\n                .setSkipNum((page - NumberUtils.INTEGER_ONE) * pageSize)\n                .setPageSize(pageSize)\n                .setStatus(status);\n\n        // 查询热点池数据\n        List<HotContentPoolDTO> hotContentPoolList = hotContentOperatingService.getHotContentPool(hotContentQuery);\n        // 查询总条数\n        Integer total = hotContentOperatingService.getHotContentPoolTotal(hotContentQuery);\n        return HotContentPoolResultDTO.of()\n                .setList(hotContentPoolList)\n                .setTotal(total);\n    }\n\n    /**\n     * 添加热点内容至热点池中\n     * @param request 请求参数\n     *\n     */\n    public void addHotContentToRank(AddHotContentRequest request) {\n        // 添加热点内容\n        HotContentPoolDTO hotContentPoolDTO = HotContentPoolDTO.of()\n                .setRankId(request.getRankId())\n                .setType(request.getType())\n                .setId(request.getId());\n\n\n        String labelName = HotTopicColorEnum.getLabelWordByLabelType(String.valueOf(request.getLabelType()));\n        \n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/infrastructure/db/repository/mongo/HotContentOperatingRepositoryImpl.java\n\n    private final MongoTemplate hotContentMongoTemplate;\n\n    /**\n     * 新增热点内容至热点池\n     *\n     * @param hotContentPoolDTO 热点内容\n     */\n    @Override\n    public void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO) {\n        HotContentPoolDO hotContentPoolDO = HotContentConvert.INSTANCE.toHotContentDO(hotContentPoolDTO);\n        hotContentMongoTemplate.save(hotContentPoolDO);\n    }\n\n    /**\n     * 获取热门话题\n     *\n     * @param hotContentQuery 查询条件\n     * @return 热门话题\n     */\n    @Override\n    public List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery) {\n        // 1、构建查询条件\n        Query query = getMongoQueryByHotContentQuery(hotContentQuery);\n        // 2、查询mongoDB数据内容\n        List<HotContentPoolDO> hotContentPoolDOList = hotContentMongoTemplate.find(query, HotContentPoolDO.class);\n        // 3、返回查询结果\n        return hotContentPoolDOList.stream().map(HotContentConvert.INSTANCE::toHotContentDTO).collect(Collectors.toList());\n    }\n\n    /**\n     * 获取热门话题总数\n     *\n     * @param hotContentQuery 查询条件\n     * @return 热门话题总数\n     */\n    @Override\n    public Integer getHotContentPoolTotal(HotContentQuery hotContentQuery) {\n        // 1、构建查询条件\n        Query query = getMongoQueryByHotContentQuery(hotContentQuery);\n        // 2、查询mongoDB数据内容\n        return (int) hotContentMongoTemplate.count(query, HotContentPoolDO.class);\n    }\n\n\n    /**\n     * 根据HotContentQuery获取Query\n     *\n     * @param hotContentQuery 热点内容查询\n     * @return Query\n     */\n    public Query getMongoQueryByHotContentQuery(HotContentQuery hotContentQuery) {\n        Query query = new Query();\n        if (hotContentQuery.getId() != null) {\n            query.addCriteria(Criteria.where(\"id\").is(hotContentQuery.getId()));\n        }\n        if (hotContentQuery.getType() != null) {\n            query.addCriteria(Criteria.where(\"type\").is(hotContentQuery.getType()));\n        }\n        if (hotContentQuery.getCreator() != null) {\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/vo/hottopic/HotTopicFrontDataVO.java\n     */\n    private String viewKey;\n    /**\n     * 话题关联原始类型\n     */\n    private Integer attachOldType;\n    /**\n     * 话题关联类型\n     */\n    private String attachType;\n    /**\n     * 话题关联信息\n     */\n    private AttInfo attachInfo;\n    /**\n     * 标签 1==热议  2==飙升\n     */\n    private Integer labelType;\n\n    @Data\n    public static final class AttInfo {\n        /**\n         * 投票id\n         */\n        private String attVoteId;\n        /**\n         * 副标题\n         */\n        private String attSubTitle;\n        /**\n         * 股票信息\n         */\n        private List<ForumBaseInfo> attStock;\n        /**\n         * 话题活动\n         */\n        private Map<String, String> attActivity;\n        /**\n         * 帖子\n         */\n        private Post attPost;\n    }\n\n\n    @Data\n    public static final class Post {\n        /**\n         * 帖子内容\n         */\n        private String content;\n        /**\n         * 用户名称\n         */\n        private String nickname;\n        /**\n         * 跳转地址\n         */\n        private String jumpUrl;\n        /**\n         * 帖子id\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/dto/hottopic/HotContentPoolDTO.java\n\n    /**\n     * 人工运营等级\n     */\n    private Integer priority;\n\n    /**\n     * 榜单id\n     */\n    private String rankId;\n\n    /**\n     * 副标题\n     */\n    private String subtitle;\n\n    /**\n     * 图片\n     */\n    private String img;\n\n    /**\n     * 内容关联属性 1==相关股票  2==热文  3==投票 4==活动  5==副标题\n     */\n    private Integer contentAtt;\n\n    /**\n     * 关联信息扩展字段\n     */\n    private HotTopicDTO.HotTopicAttachDTO attachData;\n\n    @Data\n    public static class HotTopicAttachDTO {\n        /**\n         * 相关股票\n         */\n        private List<ForumBaseInfo> stock;\n\n        /**\n         * 投票id\n         */\n        private String voteId;\n        /**\n         * 活动，{\"name\":\"xxx\",\"url\":\"xxx\"}\n         */\n        private Map<String, String> activity;\n\n    }\n\n    /**\n     * 获取标签id\n     *\n     * @return 标签id\n     */\n    public Integer getLabelTypeVal() {\n        if (HotTopicColorEnum.HOT.getLabelType().equals(getLabelName())) {\n            return 1;\n        }\n        if (HotTopicColorEnum.SOAR.getLabelType().equals(getLabelName())) {\n            return 2;",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/consts/HotTopicColorEnum.java",
    "template": "java",
    "multiRes": {
      "hipilot": "private final String fontColor;\n    /**\n     * 背景渐变色\n     */\n    @Getter\n    private final String backgroundGradientColor;\n    /**\n     * 边框颜色\n     */\n    @Getter\n    private final String borderColor;",
      "CodeQwen2.5-7B": "vate final String labelWord;",
      "copilot": "标签类型\n     * @return 标签内容\n     */\n",
      "CodeQwen1.5-7B": " vate final String labelWord;"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.common.external.feign.response;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/28\n */\n@Data\npublic class AgentWorkFlowResponse {\n    /**\n     * task_id 任务id\n     */\n    private String task_id;\n\n    /**\n     * workflow_run_id 工作流运行id\n     */\n    private String workflow_run_id;\n\n    /**\n     * data 数据\n     */\n    private Data data;\n\n    /**\n     * @author wangming@myhexin.com\n     * @date 2024/06/28\n     */\n    public static class Data {\n        /**\n         * id\n         */\n        private String id;\n\n        /**\n         * workflow_id 工作流id\n         */\n        private String workflow_id;\n\n        /**\n         * status 状态\n         */\n        private String status;\n\n        /**\n         * outputs 输出\n         */\n        private Outputs outputs;\n\n        /**\n         *  ",
    "infill": "error 错误\n         */",
    "suffix": "\n        private String error;\n\n        /**\n         * elapsed_time 耗时\n         */\n        private double elapsed_time;\n\n        /**\n         * total_tokens 总令牌\n         */\n        private int total_tokens;\n\n        /**\n         * total_steps 总步骤\n         */\n        private int total_steps;\n\n        /**\n         * created_at 创建时间\n         */\n        private long created_at;\n\n        /**\n         * started_at 开始时间\n         */\n        private long finished_at;\n\n        // getters and setters\n    }\n\n    /**\n     * @author wangming@myhexin.com\n     * @date 2024/06/28\n     */\n    public static class Outputs {\n        private List<String> output;\n\n        // getters and setters\n    }\n}\n",
    "relevantFile": "<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/repository/UserMedalRepository.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.repository;\n\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.MedalWallDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.UserMedalDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.UserMedal;\n\nimport java.util.List;\n\n/**\n * 用户勋章仓库接口\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 14:18\n */\npublic interface UserMedalRepository {\n\n    /**\n     * 发放勋章\n     *\n     * @param userId     用户id\n     * @param userMedals 勋章实体\n     * @return 是否发放成功\n     */\n    boolean obtainMedal(Long userId, List<UserMedal.UserMedalMongoInfo> userMedals);\n\n    /**\n     * 删除通过用户勋章id\n     *\n     * @param userId  用户id\n     * @param medalId 勋章id\n     * @return 是否成功\n     */\n    boolean deleteByUserMedalId(Long userId, Integer medalId);\n\n    /**\n     * 获取勋章墙\n     *\n     * @return 勋章墙数据\n     */\n    MedalWallDTO getMedalWall();\n\n    /**\n     * 获取用户拥有勋章\n     *\n     * @param uid 用户id\n     * @return 用户拥有勋章\n     */\n    UserMedalDTO getUserMedal(Long uid);\n\n    /**\n     * 修改用户佩戴信息数据\n     *\n     * @param uid     用户id\n     * @param medalId 勋章id\n     * @param wearFlag    是否佩戴：true-佩戴，false-未佩戴\n     * @return 更新成功:true; 更新失败:false\n     */\n    boolean updateWearMedal(Long uid, Integer medalId, Boolean wearFlag);\n\n    /**\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/common/consts/CacheTypeEnum.java\npackage com.myhexin.community.user.medal.deploy.common.consts;\n\nimport lombok.Getter;\n\nimport java.time.Duration;\n\n/**\n * 缓存配置枚举类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 16:51\n */\n@Getter\npublic enum CacheTypeEnum {\n\n    /**\n     * 历史勋章配置缓存\n     */\n    HISTORY_MEDAL_CACHE(Duration.ofMinutes(30), 1, 5),\n\n    /**\n     * 勋章类别详情缓存\n     */\n    MEDAL_CATEGORY_CACHE(Duration.ofMinutes(1), 5, 20),\n\n    /**\n     * 勋章系列详情缓存\n     */\n    MEDAL_SERIAL_CACHE(Duration.ofMinutes(1), 1000, 5000),\n\n    /**\n     * 勋章缓存\n     */\n    MEDAL_CACHE(Duration.ofMinutes(1), 1000, 5000),\n\n    /**\n     * 用户佩戴勋章数量\n     */\n    USER_MEDAL_NUM(Duration.ofMinutes(1), 1000, 50000);\n\n    /**\n     * 过期时间\n     */\n    private final Duration expire;\n\n    /**\n     * 初始化大小\n     */\n    private final int initCapacity;\n\n    /**\n     * 最大值\n     */\n    private final int maxSize;\n\n    CacheTypeEnum(Duration expire, int initCapacity, int maxSize) {\n        this.expire = expire;\n        this.initCapacity = initCapacity;\n        this.maxSize = maxSize;\n    }\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/service/UserMedalService.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.service;\n\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.MedalWallDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.UserMedalDetailResultDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.UserMedalResultDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.UserWearMedalResultDTO;\n\nimport java.util.List;\n\n\n/**\n * 用户勋章业务接口\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 14:13\n */\n\npublic interface UserMedalService {\n\n    /**\n     * 获取用户勋章信息，标记在勋章墙内\n     *\n     * @param uid       用户id\n     * @param medalWall 勋章墙\n     * @param selfView  是否自身视角\n     * @return 用户勋章墙信息\n     */\n    UserMedalResultDTO getUserMedal(Long uid, MedalWallDTO medalWall, Boolean selfView);\n\n\n    /**\n     * 获取旧版勋章墙数据\n     *\n     * @param uid 用户id\n     * @return 旧版勋章墙\n     */\n    List<UserMedalResultDTO.MedalCategoryResultInfo> getOldMedalWall(Long uid);\n\n    /**\n     * 获取勋章详情信息\n     *\n     * @param uid          用户id\n     * @param medalId      勋章id\n     * @param medalWallDTO 勋章墙DTO\n     * @param selfView     是否自身视角\n     * @return 勋章详情信息\n     */\n    UserMedalDetailResultDTO getMedalDetail(Long uid, Integer medalId, MedalWallDTO medalWallDTO, Boolean selfView);\n\n    /**\n     * 获取用户佩戴的勋章\n     *\n     * @param uid 用户id\n     * @return 用户佩戴的勋章\n     */\n    UserWearMedalResultDTO getWearMedal(Long uid);\n\n    /**\n     * 批量获取用户佩戴勋章\n     *\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/infrastructure/db/model/UserMedal.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.util.List;\n\n/**\n * 用户 - 勋章关系表\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 17:33\n */\n\n@Data\n@Document(\"user_medal\")\npublic class UserMedal {\n\n    /**\n     * 用户ID\n     */\n    @Id\n    private Long userId;\n\n    /**\n     * 用户勋章列表\n     */\n    private List<UserMedalMongoInfo> userMedalList;\n\n    /**\n     * 用户 - 勋章信息\n     */\n    @Data\n    @Builder\n    @AllArgsConstructor\n    @NoArgsConstructor\n    public static class UserMedalMongoInfo {\n\n        /**\n         * 勋章id\n         */\n        private Integer medalId;\n\n        /**\n         * 勋章等级\n         */\n        private Integer medalLevel;\n\n        /**\n         * 勋章名称\n         */\n        private String medalName;\n\n        /**\n         * 勋章logo\n         */",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/common/external/feign/response/AgentWorkFlowResponse.java",
    "template": "java",
    "multiRes": {
      "hipilot": "error 错误",
      "CodeQwen2.5-7B": "error 错误信息",
      "copilot": "error 错误\n         */",
      "CodeQwen1.5-7B": "  error 错误"
    }
  },
  {
    "prefix": "package com.myhexin.news.service.community.impl;\n\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.jqka.ovse.framework.base.json.JsonObj;\nimport com.jqka.ovse.framework.base.json.OvseJson;\nimport com.jqka.ovse.framework.common.bean.LogItem;\nimport com.jqka.ovse.framework.common.enums.I18nLang;\nimport com.jqka.ovse.framework.common.util.OvseStatsLog;\nimport com.jqka.ovse.framework.ebus.constant.KafkaConstant;\nimport com.myhexin.common.cache.NewsFlashLoader;\nimport com.myhexin.common.util.RedisUtils;\nimport com.myhexin.news.constant.NewsConstants;\nimport com.myhexin.news.constant.RedisKeyConstants;\nimport com.myhexin.news.dto.newsflash.NewsFlashCacheDto;\nimport com.myhexin.news.dto.newsflash.NewsMetricsMsgDto;\nimport com.myhexin.news.enums.NewsMetricsEnum;\nimport com.myhexin.news.feign.CommentServiceFeign;\nimport com.myhexin.news.mapper.NewsFlashMetricsMapper;\nimport com.myhexin.news.po.NewsFlashCounterPO;\nimport com.myhexin.news.service.community.NewsFlashMetricsService;\nimport com.myhexin.news.vo.OvseNewsVO;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.support.Acknowledgment;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.ObjectUtils;\n\nimport java.security.SecureRandom;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\nimport static com.myhexin.news.constant.CommentServiceParam.*;\n\n/**\n * @Author lizhenwei\n */\n\n@Slf4j\n@Service\npublic class NewsFlashMetricsServiceImpl implements NewsFlashMetricsService {\n\n    private static final String NEWS_FLASH_INCREASE_TOPIC = \"news-flash-counter-increase\";\n\n    private static final SecureRandom RANDOM = new SecureRandom();\n\n    private static final int EXPIRE_TIME = 10;\n\n    private static final int[] VIEW_DEFAULT_RANGE = {10, 100};\n    private static final int[] LIKE_COUNT_DIVISOR = {10, 20};\n\n    private final RedisTemplate redisTemplate;\n\n    private final KafkaTemplate<String, String> kafkaTemplate;\n\n    private final NewsFlashMetricsMapper newsFlashMetricsMapper;\n\n    private final CommentServiceFeign commentServiceFeign;\n\n    private final NewsFlashLoader newsFlashLoader;\n\n    public NewsFlashMetricsServiceImpl(@Qualifier(\"redisTemplate\") RedisTemplate redisTemplate,\n                                       KafkaTemplate<String, String> kafkaTemplate,\n                                       NewsFlashMetricsMapper newsFlashMetricsMapper,\n                                       CommentServiceFeign commentServiceFeign,\n                                       NewsFlashLoader newsFlashLoader) {\n        this.redisTemplate = redisTemplate;\n        this.kafkaTemplate = kafkaTemplate;\n        this.newsFlashMetricsMapper = newsFlashMetricsMapper;\n        this.commentServiceFeign = commentServiceFeign;\n        this.newsFlashLoader = newsFlashLoader;\n    }\n\n    public Map<String, OvseNewsVO.UserMetadata> queryMetricsByIds(List<String> ids) {\n        ids = ids.stream().filter(StringUtils::isNotEmpty).distinct().collect(Collectors.toList());\n        List<String> cacheKeys = ids.stream().map(id -> String.format(RedisKeyConstants.NEWS_METADATA_KEY, id)).collect(Collectors.toList());\n        List<String> values = RedisUtils.batchGet(cacheKeys);\n        List<OvseNewsVO.UserMetadata> result = values.stream()\n                .filter(item -> !ObjectUtils.isEmpty(item))\n                .map(item -> OvseJson.toBean(item, OvseNewsVO.UserMetadata.class))\n                .collect(Collectors.toList());\n\n        if (cacheKeys.size() == result.size()) {\n            return result.stream().collect(Collectors.toMap(\n                    OvseNewsVO.UserMetadata::getContentId,\n                    Function.identity(),\n                    (var1, var2) -> var1)\n            );\n        }\n\n        //找出对应的对视id\n    ",
    "infill": "\"id\", id).add(\"type\", type.name()).add(\"before\").add(\"count\", newData.getCount() + entryData.getValue()));\n            updateData.add(NewsFlashCounterPO.builder()\n                    .",
    "suffix": "id(id)\n                    .type(type.name())\n                    .count(entryData.getValue() + newData.getCount())\n                    .build());\n\n        }\n\n        //根据insertData进行数据插入，根据updateData进行更新数据库以及缓存\n        if (!CollectionUtils.isEmpty(insertData)) {\n            newsFlashMetricsMapper.insertBatch(insertData);\n        }\n        for (NewsFlashCounterPO newData : updateData) {\n            newsFlashMetricsMapper.update(newData);\n        }\n\n        Map<String, NewsFlashCounterPO> collect = updateData.stream()\n                .collect(Collectors.toMap(NewsFlashCounterPO::getId, Function.identity(), (var1, var2) -> var1));\n\n        List<String> cacheKeys = collect.keySet().stream()\n                .map(item -> String.format(RedisKeyConstants.NEWS_METADATA_KEY, item))\n                .collect(Collectors.toList());\n\n        List<String> cacheValues = RedisUtils.batchGet(cacheKeys);\n        Map<String, String> result = cacheValues.stream().filter(StringUtils::isNotEmpty)\n                .map(item -> OvseJson.toBean(item, OvseNewsVO.UserMetadata.class))\n                .map(item -> {\n                    NewsFlashCounterPO newData = collect.get(item.getContentId());\n                    if (type == NewsMetricsEnum.NEWS_FLASH_SHARE) {\n                        item.setShareCount(newData.getCount());\n                    }\n                    if (type == NewsMetricsEnum.NEWS_FLASH_VIEW) {\n                        item.setViewCount(newData.getCount());\n                    }\n                    return item;\n                }).collect(Collectors.toMap(item -> String.format(RedisKeyConstants.NEWS_METADATA_KEY, item.getContentId()),\n                        OvseJson::toJsonStr, (var1, var2) -> var1));\n        RedisUtils.batchSet(result, EXPIRE_TIME, TimeUnit.MINUTES);\n\n    }\n\n}\n",
    "relevantFile": "<file_path>news-f10-api/src/main/java/com/myhexin/news/query/RobotNewsQuery.java\n */\n@Data\npublic class RobotNewsQuery {\n\n    /**\n     * 消息类型\n     */\n    private String newsType;\n    /**\n     * 消息格式\n     */\n    private String newsFormat;\n\n    /**\n     * 消息来源\n     */\n    private String newsFrom;\n\n    /**\n     * 消息重要性\n     */\n    private Integer newsImportant;\n\n    /**\n     * 股票代码\n     */\n    private List<String> stockCodes;\n\n    /**\n     * 业务标签\n     */\n    private List<String> businessTags;\n\n    /**\n     * 加密货币标签\n     */\n    private List<String> cryptoTags;\n\n    /**\n     * 主题标签\n     */\n    private List<String> themeTags;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    private Date startTime;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    private Date endTime;\n\n    /**\n     * true desc,\n     * false asc\n     */\n    private Boolean orderBy = true;\n\n    private Integer pageNum = 1;\n\n    private Integer pageSize = 100;\n\n}\n<file_path>news-f10-api/src/main/java/com/myhexin/news/vo/NewsFlashVO.java\n     */\n    private List<Tag> tagList;\n    /**\n     * news-flash publish time\n     */\n    private Long publishTime;\n    /**\n     * news-flash type , 0 is common, 1 is push\n     */\n    private Integer type;\n    /**\n     * news-flash nature, -1 is none, 0 is favorable 1 is unfavorable\n     */\n    private Integer mark;\n    /**\n     * news-flash penny-stock. true or false\n     */\n    private Boolean pennyStock;\n    /**\n     * news type\n     */\n    private Integer newsType;\n    /**\n     * news-flash language\n     */\n    private String lang;\n\n    /**\n     * count of view\n     */\n    private Long viewCount;\n\n    /**\n     * count of Like\n     */\n    private Long likeCount;\n\n    /**\n     * count of share\n     */\n    private Long shareCount;\n\n    /**\n     * count of comment\n     */\n    private Long commentCount;\n\n    /**\n     * virtual user info\n     */\n    private NewsFlashVirtualUser userInfo;\n\n    /**\n     * addition info. include interpret, user account Info, user behavior data\n     */\n    private JsonObj additionInfo;\n\n    /**\n     * topped identity\n     */\n<file_path>news-f10-service/src/main/java/com/myhexin/news/mapper/NewsFlashMetricsMapper.java\npackage com.myhexin.news.mapper;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.myhexin.news.enums.NewsMetricsEnum;\nimport com.myhexin.news.po.NewsFlashCounterPO;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\n\nimport java.util.List;\n\n\n/**\n * @Author lizhenwei\n */\n@Mapper\npublic interface NewsFlashMetricsMapper extends BaseMapper<NewsFlashCounterPO> {\n\n    /**\n     * insert batch\n     * @param data\n     */\n    void insertBatch(@Param(\"data\") List<NewsFlashCounterPO> data);\n\n    /**\n     * insert batch\n     * @param data\n     */\n    void update(@Param(\"data\") NewsFlashCounterPO data);\n\n    /**\n     * add count\n     *\n     * @param type\n     * @param id\n     * @param delta\n     */\n    void increment(@Param(\"type\") NewsMetricsEnum type, @Param(\"id\") String id, @Param(\"delta\") Long delta);\n\n\n}",
    "relevantFileList": [],
    "filePath": "news-f10-service/src/main/java/com/myhexin/news/service/community/impl/NewsFlashMetricsServiceImpl.java",
    "template": "java",
    "multiRes": {
      "hipilot": "List<NewsFlashCounterPO> dbData = newsFlashMetricsMapper.selectList(Wrappers.<NewsFlashCounterPO>lambdaQuery()\n                .eq(NewsFlashCounterPO::getType, NewsMetricsEnum.NEWS_FLASH_VIEW.name())\n",
      "CodeQwen2.5-7B": "    List<String> notFoundIds = new ArrayList<>();",
      "copilot": "\"id\", id).add(\"type\", type.name()).add(\"before\").add(\"count\", newData.getCount() + entryData.getValue()));\n            updateData.add(NewsFlashCounterPO.builder()\n                    .",
      "CodeQwen1.5-7B": "    List<String> notCacheIds = ids.stream().filter(item -> !cacheKeys.contains(String.format(RedisKeyConstants.NEWS_METADATA_KEY, item))).collect(Collectors.toList());"
    }
  },
  {
    "prefix": "package com.myhexin.news.feign.request;\n\nimport com.alibaba.fastjson.JSON;\nimport com.myhexin.news.dto.translate.ModelTranslateRequestDTO;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * 模型翻译的接口出参\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 22:44\n */\n@Data\n@NoArgsConstructor\npublic class ModelTranslateFeignRequest {\n    /**\n     * 参数\n     */\n    private String param;\n\n\n    public ModelTranslateFeignRequest(ModelTranslateRequestDTO requestDTO) {\n        final ParamBean requestBean = new ParamBean(requestDTO);\n        this.param = JSON.toJSONString(requestBean);\n    }\n\n    @Data\n    @NoArgsConstructor\n    public static class ParamBean {\n        /**\n         * 待翻译内容\n         */\n        private String text;\n\n        private String appId;\n\n        private String domain;\n\n        private String from;\n\n        /**\n         * 目标语言\n         */\n        private String to;\n\n        public ParamBean(ModelTranslateRequestDTO dto) {\n            this.text = dto.buildText();\n            this.appId = dto.getAppId();",
    "infill": "this.domain = dto.getDomain();\n            this.from = dto.getFrom();\n            this.to = dto.getTo();\n        }\n ",
    "suffix": "   }\n}\n",
    "relevantFile": "<file_path>news-f10-service/src/main/java/com/myhexin/news/feign/response/ModelTranslateFeignResponse.java\npackage com.myhexin.news.feign.response;\n\nimport cn.hutool.core.util.StrUtil;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n/**\n * 模型翻译的接口出参\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 22:09\n */\n@Data\n@Accessors(chain = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class ModelTranslateFeignResponse {\n    @JsonProperty(\"code\")\n    private Integer statusCode;\n\n    @JsonProperty(\"note\")\n    private String statusMsg;\n\n    private String data;\n\n    /**\n     * 是否失败\n     * @return 是否失败\n     */\n    public boolean failed() {\n        return !Integer.valueOf(0).equals(statusCode) || StrUtil.isEmpty(data);\n    }\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/factory/translation/ModelTranslateMode.java\nimport com.myhexin.news.dto.translate.ModelTranslateRequestDTO;\nimport com.myhexin.news.feign.ModelTranslateFeign;\nimport com.myhexin.news.feign.request.ModelTranslateFeignRequest;\nimport com.myhexin.news.feign.response.ModelTranslateFeignResponse;\nimport com.myhexin.news.properties.NewsProperty;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.List;\n\n/**\n * 大模型翻译实现\n * 泰语、葡萄牙语、阿拉伯语 翻译的实现（直接继承此接口）\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:45\n */\npublic class ModelTranslateMode extends AbstractTranslateMode {\n    protected static NewsProperty newsProperty = SpringContextHolder.getBean(\"newsProperty\");\n\n    private static ModelTranslateFeign modelTranslateFeign = SpringContextHolder.getBean(\"modelTranslateFeign\");\n\n    @Override\n    public NewsTranslateResult translateData(List<String> content, int retry) {\n\n        ModelTranslateRequestDTO requestDTO = this.buildRequest(content);\n\n        return this.modelTranslateAndConvertResult(requestDTO);\n    }\n\n    /**\n     * 组装大模型接口请求的参数\n     * @param content 待翻译内容\n     * @return 大模型接口请求的参数\n     */\n    protected ModelTranslateRequestDTO buildRequest(List<String> content) {\n        // 注意这里构造的没有 目标语言的dto对象\n        return new ModelTranslateRequestDTO(content, newsProperty.getAppId(), \"default\", \"en\", null);\n    }\n\n    /**\n     * 调用大模型翻译接口并转换结果\n     * @param requestDTO 请求参数\n     * @return 翻译结果\n     */\n    private @Nullable NewsTranslateResult modelTranslateAndConvertResult(ModelTranslateRequestDTO requestDTO) {\n        // TODO: 2024/6/26 记日志\n        // TODO: 2024/6/26 传进来的retry是重试次数，取的newsProp里面的配置，feignClient里面要引用newsProp的配置\n        final ModelTranslateFeignRequest request = new ModelTranslateFeignRequest(requestDTO);\n        final ModelTranslateFeignResponse response = modelTranslateFeign.modelTranslate(request);\n        if (response.failed()) {\n            // TODO: 2024/6/26 记录错误日志\n            return null;\n        }\n        return buildResult(requestDTO, response);\n    }\n\n    /**\n     * 组装返回结果\n     * @param requestDTO 请求参数dto\n     * @param response 大模型接口返回的数据\n<file_path>src/main/java/com/myhexin/zixun/application/manager/flash/news/external/feign/dto/TextSummaryInput.java\npackage com.myhexin.zixun.application.manager.flash.news.external.feign.dto;\n\nimport com.alibaba.fastjson.JSON;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\nimport java.io.Serializable;\n\n/**\n * 文本精简接口入参\n *\n * @author lihe2@myhexin.com\n * @date 2024/3/28 15:57\n */\n@Data\n@Accessors(chain = true)\npublic class TextSummaryInput implements Serializable {\n    private static final long serialVersionUID = -7123821614322339842L;\n    /**\n     * input入参\n     */\n    private String input;\n\n    public TextSummaryInput(String text) {\n        this.input = JSON.toJSONString(new TextSummaryInputBean(text));\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class TextSummaryInputBean implements Serializable {\n        private static final long serialVersionUID = 3929973689786768309L;\n        /**\n         * 文本入参\n         */\n        private String text;\n    }\n}\n<file_path>news-f10-api/src/main/java/com/myhexin/news/dto/translate/ModelTranslateRequestDTO.java\npackage com.myhexin.news.dto.translate;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.List;\n\n/**\n * 大模型翻译的请求协议\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:53\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ModelTranslateRequestDTO {\n    /**\n     * 目标语言\n     * tai-泰语\n     * pt-葡萄牙语\n     * ar-阿拉伯语\n     */\n    public static final String TARGET_LANG_TAI = \"tai\";\n    public static final String TARGET_LANG_PT = \"pt\";\n    public static final String TARGET_LANG_AR = \"ar\";\n\n    /**\n     * 待翻译内容\n     */\n    List<String> contentList;\n\n    private String appId;\n\n    private String domain;\n\n    private String from;\n\n    /**\n     * 目标语言\n     */\n    private String to;\n\n    /**\n     * 构造text的值\n     * @return text的值\n     */\n    public String buildText() {\n        // TODO: 2024/6/26 根据content组装构造text的值\n        return null;\n    }\n}",
    "relevantFileList": [],
    "filePath": "news-f10-service/src/main/java/com/myhexin/news/feign/request/ModelTranslateFeignRequest.java",
    "template": "java",
    "multiRes": {
      "hipilot": "\n            this.domain = dto.getDomain();\n            this.from = dto.getFrom();\n            this.to = dto.getTo();",
      "CodeQwen2.5-7B": "",
      "copilot": "this.domain = dto.getDomain();\n            this.from = dto.getFrom();\n            this.to = dto.getTo();\n        }\n ",
      "CodeQwen1.5-7B": " "
    }
  },
  {
    "prefix": "package com.myhexin.mobileweb.push.gms.recordlog.common.dto;\n\n\nimport com.myhexin.mobileweb.push.gms.recordlog.common.type.LogStatusCode;\nimport lombok.Data;\n\n\nimport java.util.Objects;\n\n/**\n * @author panzheqi [panzheqi@myhexin.com]\n * @date 2022/05/18\n * @Description: 发送日志\n */\n@Data\npublic class SendLog extends CommonLog{\n\n    private String channel ;\n    private String passThrough ;\n    private String pushStyle ;\n    private String language;\n\n    public SendLog() {\n        this.logGroup = \"\";\n        this.logType = \"\";\n        this.pushId = \"\";\n        this.appId = \"\";\n        this.appChannel = \"\";\n        this.appType = \"\";\n        this.userId = \"\";\n        this.deviceId = \"\";\n        this.time = \"\";\n        this.key = \"\";\n        this.channel = \"\";\n        this.passThrough = \"\";\n        this.pushStyle = \"\";\n        this.language = \"\";\n    }\n\n    SendLog(S",
    "infill": ");\n        return logContent.toString();\n   ",
    "suffix": " }\n\n    public static SendLogBuilder builder() {\n        return new SendLogBuilder();\n    }\n\n\n\n    public void setErrCode(LogStatusCode errCode) {\n        this.errorCode = String.valueOf(errCode.getCode());\n    }\n\n    public String getErrCode(){\n        return errorCode;\n    }\n\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/mobileweb/pns/gms/ios/sender/deploy/record/converters/RecordConverters.java\npackage com.myhexin.mobileweb.pns.gms.ios.sender.deploy.record.converters;\n\nimport com.myhexin.mobileweb.pns.gms.event.msg.common.dto.template.mobile.MobileMsg;\nimport com.myhexin.mobileweb.push.gms.recordlog.common.dto.SendLog;\nimport com.myhexin.mobileweb.push.gms.recordlog.common.type.*;\n\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * @author panzheqi [panzheqi@myhexin.com]\n * @date 2022/08/15\n * @Description:\n */\n\npublic final class RecordConverters {\n\n    private static final String DEFAULT_VALUE  = \"\";\n\n    private RecordConverters() {\n    }\n\n    public static SendLog buildSendLog(MobileMsg mobileMsg, String userId, String deviceId, String appChannel\n            ,String appType, LogStatusCode logStatusCode) {\n        appType = Optional.ofNullable(appType).orElse(DEFAULT_VALUE);\n        deviceId = Optional.ofNullable(deviceId).orElse(DEFAULT_VALUE);\n        appChannel = Optional.ofNullable(appChannel).orElse(DEFAULT_VALUE);\n        return SendLog.builder()\n                .logGroup(LogGroupType.EVENT_LOG_GROUP.getLogGroup())\n                .logType(LogType.CHANNEL_LOG.getType())\n                .pushId(mobileMsg.getId())\n                .appId(mobileMsg.getAppId())\n                .appChannel(appChannel)\n                .appType(appType)\n                .userId(userId)\n                .deviceId(deviceId)\n                .time(String.valueOf(System.currentTimeMillis()))\n                .key(String.valueOf(mobileMsg.getComefrom()))\n                .errCode(logStatusCode)\n                .channel(appChannel)\n                .passThrough(PassThroughType.NOT_PASS_THROUGH.getType())\n                .pushStyle(PushStyleType.NOTIFICATION_BAR_DISPLAY.getType())\n                .build();\n    }\n\n\n}\n<file_path>src/main/java/com/myhexin/mobileweb/push/gms/recordlog/common/dto/ArriveReceiptLog.java\npackage com.myhexin.mobileweb.push.gms.recordlog.common.dto;\n\nimport lombok.Data;\n\n/**\n * @author panzheqi [panzheqi@myhexin.com]\n * @date 2022/05/06\n * @Description:  到达回执日志\n */\n@Data\npublic class ArriveReceiptLog extends ClickReceiptLog {\n    private String passThrough = \"\";\n    private String pushStyle = \"\";\n\n    @Override\n    public String toLog() {\n        StringBuilder stringBuilder = new StringBuilder();\n        String logContent = super.toLog();\n        stringBuilder.append(logContent).append(passThrough).append(SEPARATOR)\n                .append(pushStyle);\n        return stringBuilder.toString();\n    }\n\n    public ArriveReceiptLog passThrough(String passThrough) {\n        this.passThrough = passThrough;\n        return this;\n    }\n\n    public ArriveReceiptLog pushStyle(String pushStyle) {\n        this.pushStyle = pushStyle;\n        return this;\n    }\n\n}\n<file_path>src/main/java/com/myhexin/mobileweb/push/gms/recordlog/common/dto/SendLogBuilder.java\nimport lombok.Getter;\n\n/**\n * @author panzheqi [panzheqi@myhexin.com]\n * @date 2023/02/02\n * @Description:\n */\n@Getter\npublic class SendLogBuilder {\n    private String logGroup = \"\";\n    private String logType = \"\";\n    private String pushId = \"\";\n    private String appId = \"\";\n    private String appChannel = \"\";\n    private String appType = \"\";\n    private String userId = \"\";\n    private String deviceId = \"\";\n    private String time = \"\";\n    private String key = \"\";\n    private String errCode;\n    private String channel = \"\";\n    private String passThrough = \"\";\n    private String pushStyle = \"\";\n    private String language = \"\";\n\n    public SendLogBuilder logGroup(String logGroup) {\n        this.logGroup = logGroup;\n        return this;\n    }\n\n    public SendLogBuilder logType(String logType) {\n        this.logType = logType;\n        return this;\n    }\n\n    public SendLogBuilder pushId(String pushId) {\n        this.pushId = pushId;\n        return this;\n    }\n\n    public SendLogBuilder appId(String appId) {\n        this.appId = appId;\n        return this;\n    }\n\n    public SendLogBuilder appType(String appType) {\n        this.appType = appType;\n        return this;\n    }\n\n    public SendLogBuilder appChannel(String appChannel){\n        this.appChannel = appChannel;\n        return this;\n    }\n\n    public SendLogBuilder userId(String userId) {\n        this.userId = userId;\n        return this;\n    }\n<file_path>src/main/java/com/myhexin/mobileweb/push/gms/recordlog/common/dto/CommonLog.java\nimport lombok.Data;\n\nimport java.util.Objects;\nimport java.util.Optional;\n\n/**\n * @author panzheqi [panzheqi@myhexin.com]\n * @date 2023/03/07\n * @Description:\n */\n@Data\npublic class CommonLog {\n    protected static final String SEPARATOR = \"\\t\";\n    protected String logGroup ;\n    protected String logType = \"\";\n    protected String pushId = \"\";\n    protected String appId = \"\";\n    protected String appChannel = \"\";\n    protected String appType = \"\";\n    protected String userId = \"\";\n    protected String deviceId = \"\";\n    protected String time = \"\";\n    protected String key = \"\";\n    protected String errorCode ;\n\n    public String toLog() {\n        StringBuilder logContent = new StringBuilder();\n\n        logContent.append(logGroup).append(SEPARATOR)\n                .append(logType).append(SEPARATOR)\n                .append(pushId).append(SEPARATOR)\n                .append(appId).append(SEPARATOR)\n                .append(Optional.ofNullable(appChannel).orElse(\"\")).append(SEPARATOR)\n                .append(appType).append(SEPARATOR)\n                .append(userId).append(SEPARATOR)\n                .append(deviceId).append(SEPARATOR)\n                .append(time).append(SEPARATOR)\n                .append(key).append(SEPARATOR);\n        if(Objects.nonNull(errorCode)){\n            logContent.append(errorCode).append(SEPARATOR);\n        }else {\n            logContent.append(SEPARATOR);\n        }\n        return logContent.toString();\n    }\n\n\n    public CommonLog logGroup(String logGroup){\n        this.logGroup = logGroup;\n        return this;\n    }\n\n    public CommonLog logType(String logType) {\n        this.logType = logType;\n        return this;\n    }\n\n    public CommonLog pushId(String pushId) {\n        this.pushId = pushId;\n        return this;",
    "relevantFileList": [],
    "filePath": "src/main/java/com/myhexin/mobileweb/push/gms/recordlog/common/dto/SendLog.java",
    "template": "java",
    "multiRes": {
      "hipilot": "tring errorCode) {\n        this.errorCode = errorCode;",
      "CodeQwen2.5-7B": "endLogBuilder builder) {",
      "copilot": ");\n        return logContent.toString();\n   ",
      "CodeQwen1.5-7B": " tring logGroup, String logType, String pushId, String appId, String appChannel, String appType, String userId, String deviceId, String time, String key, String channel, String passThrough, String pushStyle, String language) {"
    }
  },
  {
    "prefix": "package com.myhexin.aixg.service;\n\n/**\n * @author 叶峰瑞<yefengrui @ myhexin.com>\n * @createAt 2022/3/2\n */\npublic interface SelfHealingService {\n    /**\n     * 自愈\n     */\n    void healing();\n    if (true) {\n        System.out.println(\"自愈成功\");\n    } else ",
    "infill": "{\n        System.out.println(\"自愈失败\");\n    }\n    if (false)\n\n}\n",
    "suffix": "",
    "relevantFile": "",
    "relevantFileList": [],
    "filePath": "application/src/main/java/com/myhexin/aixg/service/SelfHealingService.java",
    "template": "java",
    "multiRes": {
      "hipilot": "{\n        System.out.println(\"自愈失败\");\n    }",
      "CodeQwen2.5-7B": "{",
      "copilot": "{\n        System.out.println(\"自愈失败\");\n    }\n    if (false)\n\n}\n",
      "CodeQwen1.5-7B": " {"
    }
  },
  {
    "prefix": "package com.myhexin.zixun.conceptv2manager.deploy.common.config.properties;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\n\n/**\n * @author: menghaizhu\n * @date: 2023/11/6 20:10\n */\n@Data\n@Configuration\n@ConfigurationProperties(prefix = \"chain-param\")\npublic class ChainProperties {\n\n    /**\n     * 审核成分股链\n     */\n    private String auditStockChainId;\n\n    /**\n     * 获取概念添加标准关键词\n     */\n    private String conceptAuditWordChainId;\n\n    /**\n     * 推荐成分股链\n     */\n    private String recommendStockChainId;\n\n    /**\n     * 用户反馈溯源链\n     */\n    private String ",
    "infill": "feedbackTracingChainId;\n\n}\n",
    "suffix": "",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/modules/discovery/domain/service/impl/FeedbackServiceImpl.java\nimport com.myhexin.zixun.conceptv2manager.deploy.modules.review.domain.consts.ReviewOptionEnum;\nimport com.myhexin.zixun.zbase.common.types.DefaultPage;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * 用户反馈领域接口实现\n *\n * @author nixuebing\n * @date 2023/4/10 16:22\n **/\n@Slf4j\n@Service\n@RequiredArgsConstructor\npublic class FeedbackServiceImpl implements FeedbackService {\n\n\n    private final FeedbackRpcRepositoryImpl feedbackRpcRepository;\n\n    private final FeedbackTracingRepository feedbackTracingRepository;\n\n    /**\n     * 根据热词搜索用户反馈\n     *\n     * @param hotWord          热词\n     * @param stockCode        成份股代码\n     * @param reviewOptionEnum {@link ReviewOptionEnum}\n     * @param current          当前分页\n     * @param size             分页大小\n     * @return 用户反馈列表\n     */\n    @NotNull\n    @Override\n    public DefaultPage<FeedbackEntity> searchFeedbackByHotWord(@NotNull String hotWord, @Nullable String stockCode,\n                                                               @Nullable ReviewOptionEnum reviewOptionEnum,\n                                                               Integer current, Integer size) {\n\n        DefaultPage<FeedbackEntity> feedbackPage =\n                feedbackRpcRepository.searchFeedbackByHotWord(hotWord, stockCode, reviewOption2Type(reviewOptionEnum), current, size);\n        // 补充溯源信息\n        feedbackPage.getData().forEach(feedback -> {\n            List<FeedbackEntity.Tracing> tracingList = feedbackTracingRepository.getTracingInfoByFeedbackId(feedback.getId());\n            feedback.setTracingList(tracingList);\n        });\n        return feedbackPage;\n    }\n\n    /**\n     * 根据热词查询未审核用户反馈数量\n     *\n     * @param hotWord          热词\n     * @param stockCode        成份股代码\n     * @param reviewOptionEnum {@link ReviewOptionEnum}\n     * @return 用户反馈数量\n     */\n<file_path>deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/common/external/rpc/NewChainOperateService.java\nimport com.myhexin.zixun.conceptv2manager.deploy.common.config.properties.ChainProperties;\nimport com.myhexin.zixun.conceptv2manager.deploy.modules.discovery.domain.entity.FeedbackEntity;\nimport com.myhexin.zixun.flow.gpt.engine.api.api.ChainOperateRpcService;\nimport com.myhexin.zixun.flow.gpt.engine.api.dto.request.ChainExecuteQuery;\nimport com.myhexin.zixun.flow.gpt.engine.api.dto.response.ChainExecuteResponse;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.dubbo.config.annotation.DubboReference;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author: menghaizhu\n * @date: 2023/11/14 17:16\n */\n@Slf4j\n@Service\n@RequiredArgsConstructor\npublic class NewChainOperateService {\n\n    private static final Long DELAY_TIME = 3000L;\n\n    private static final ConceptChainDTO CONCEPT_CHAINDTO = new ConceptChainDTO().setResult(false);\n\n\n    private final ChainProperties chainProperties;\n\n\n    @DubboReference(version = \"1.0.0\", retries = 0, timeout = 200_000)\n    private ChainOperateRpcService chainOperateRpcService;\n\n\n    /**\n     * @param chainId  执行链id\n     * @param paramMap 链执行全流程的全局参数\n     * @return 执行结果\n     */\n    @Nullable\n    private String executeChain(String chainId, Map<String, String> paramMap) {\n        // 链参数\n        ChainExecuteQuery chainExecuteQuery = new ChainExecuteQuery();\n        chainExecuteQuery.setChainId(chainId);\n        chainExecuteQuery.setChainParamMap(paramMap);\n\n        log.debug(\"开始执行链{},参数{}\", chainId, JSON.toJSONString(chainExecuteQuery));\n        // 执行\n        try {\n            ChainExecuteResponse chainExecuteResponse = chainOperateRpcService.executeChain(chainExecuteQuery);\n            log.debug(\"链执行完毕,执行结果{}\", chainExecuteResponse);\n            return chainExecuteResponse.getResult();\n        } catch (RuntimeException e) {\n            log.error(\"链执行失败\", e);\n        }\n        return \"\";\n    }\n<file_path>deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/modules/discovery/domain/entity/FeedbackEntity.java\npackage com.myhexin.zixun.conceptv2manager.deploy.modules.discovery.domain.entity;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.util.List;\n\n/**\n * 用户反馈 审核数据 实体\n *\n * @author nixuebing\n * @date 2022/10/9 9:24\n **/\n@Data\n@Accessors(chain = true)\npublic class FeedbackEntity {\n\n    /**\n     * 用户反馈记录id\n     */\n    private String id;\n\n    /**\n     * 概念id\n     */\n    private Long conceptId;\n\n    /**\n     * 概念词\n     */\n    private String conceptName;\n\n    /**\n     * 申请理由\n     */\n    private String reason;\n\n    /**\n     * 股票代码\n     */\n    private String stockCode;\n\n    /**\n     * 股票名\n     */\n    private String stockName;\n\n    /**\n     * 申请图片 多张，逗号分隔\n     */\n    private String images;\n\n    /**\n     * 用户上传来源\n     */\n    private String sourceUrl;\n\n    /**\n     * 操作类型\n     * -1 新增概念  1 新增概念股 2 新增股票解析 3 删除概念股\n<file_path>deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/app/manager/dto/ConceptChainDTO.java\npackage com.myhexin.zixun.conceptv2manager.deploy.app.manager.dto;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.util.List;\n\n/**\n * @author: menghaizhu\n * @date: 2023/10/11 19:29\n */\n@Data\n@Accessors(chain = true)\npublic class ConceptChainDTO {\n\n    private Boolean result;\n\n    private List<String> standard;\n\n    private String reason;\n\n    private String quesContent;\n\n    private String ansContent;\n\n    private String ansUrl;\n\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/common/config/properties/ChainProperties.java",
    "template": "java",
    "multiRes": {
      "hipilot": "feedbackTracingChainId;\n}",
      "CodeQwen2.5-7B": "userFeedbackChainId;",
      "copilot": "feedbackTracingChainId;\n\n}\n",
      "CodeQwen1.5-7B": " userFeedbackChainId;"
    }
  },
  {
    "prefix": "public class Main {\n    public static void main(String[] args) {\n        //TIP Press <shortcut actionId=\"ShowIntentionActions\"/> with your caret at the highlighted text\n        // to see how IntelliJ IDEA suggests fixing it.\n        System.out.print(\"Hello and welcome!\");\n\n        for (int i = 1; i <= 5; i++) {\n            //TIP Press <shortcut actionId=\"Debug\"/> to start debugging your code. We have set one <icon src=\"AllIcons.Debugger.Db_set_breakpoint\"/> breakpoint\n            // for you, but you can always add more by pressing <shortcut actionId=\"ToggleLineBreakpoint\"/>.\n            System.out.println(\"i = \" + i);\n        }\n\n        switch (args.length) {\n            case 0:\n                System.out.println(\"No arguments were passed.\");\n                break;\n            case 1:\n                System.out.println(\"One argument was passed.\");\n                break;\n                case 2:\n                System.out.println(\"Two arguments were passed.\");\n                break;\n                case 3:\n                System.out.println(\"Three arguments were passed.\");\n                case 4:\n                System.out.println(\"Four arguments were passed.\");\n                break;\n                case 5:\n                System.out.println(\"Five arguments were passed.\");\n                case 6:\n                System.out.println(\"Six arguments were passed.\");\n                case 7:\n                System.out.println(\"Seven arguments were passed.\");\n                case 8:\n                System.out.println(\"Eight arguments were passed.\");\n                case 9:\n                System.out.println(\"Nine arguments were passed.\");\n                case ",
    "infill": "10:\n                System.out.println(\"Ten arguments were passed.\");\n            default:",
    "suffix": "\n                System.out.println(\"More than one argument was passed.\");\n        }\n\n    }\n}",
    "relevantFile": "<file_path>src/Student.java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n\npublic class Student {\n    private String name;\n    private int age;\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\nIP To <b>Run</b> code, press <shortcut actionId=\"Run\"/> or\nclick the <icon src=\"AllIcons.Actions.Execute\"/> icon in the gutter.",
    "relevantFileList": [],
    "template": "java",
    "multiRes": {
      "hipilot": "10:",
      "CodeQwen2.5-7B": "10:",
      "copilot": "10:\n                System.out.println(\"Ten arguments were passed.\");\n            default:",
      "CodeQwen1.5-7B": " 10:"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.interfaces.rest.controller;\n\nimport com.myhexin.community.operating.deploy.app.manager.HotContentOperatingManager;\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.vo.BaseResponseVO;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.*;\n\n/**\n * 内容池 -- Controller\n * @author ningwenyu@myhexin.com\n * @date 2024/6/17 21:50\n */\n@RestController\n@RequestMapping(\"/auth/api/hot_module/v1/hot_content\")\n@RequiredArgsConstructor\npublic class HotContentOperatingController {\n    private final HotContentOperatingManager hotContentOperatingManager;\n    \n    @GetMapping(\"get_hot_content_pool\")\n    public BaseResponseVO<HotContentDTO> getHotContentPool(@RequestParam(\"id\") String id,\n                                                           @RequestParam(\"type\") String type,\n                                                           @RequestParam(\"creator\") String creator,\n                                                           @RequestParam(\"page\") Integer page,",
    "infill": "@RequestParam(\"page_size\") Integer pageSize,\n                                                           @RequestParam(\"status\") Integer status) {\n        return BaseResponseVO.success(hotContentOperatingManager.getHotContentPool(id, type, creator, page, pageSize, status));\n    }\n}\n",
    "suffix": "",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/infrastructure/db/model/HotContentDO.java\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotTopicDTO;\nimport com.myhexin.community.operating.deploy.modules.operating.domain.entity.ForumBaseInfo;\nimport lombok.Data;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 热点池DO类\n * @author ningwenyu@myhexin.com\n * @date 2024/6/19 9:59\n */\n@Data\n@Document(\"hot_content\")\npublic class HotContentDO {\n\n    /**\n     * 主键Id\n     */\n    @Id\n    private String id;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n\n    /**\n     * 标题\n     */\n    private String title;\n\n    /**\n     * 内容描述\n     */\n    private String descripion;\n\n    /**\n     * 标签类型\n     */\n    private Integer labelType;\n\n    /**\n     * 标签的背景颜色\n     */\n    private String labelBackgroundColor;\n\n    /**\n     * 标签的文字颜色\n     */\n    private String labelWordColor;\n\n    /**\n     * 标签名称\n     */\n    private String labelName;\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/impl/HotContentOperatingServiceImpl.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.service.impl;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentDTO;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.repository.HotContentOperatingRepository;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\n/**\n * 热点内容Service实现\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\n@Service\n@RequiredArgsConstructor\npublic class HotContentOperatingServiceImpl implements HotContentOperatingService {\n\n    private final HotContentOperatingRepository hotContentRepository;\n\n    /**\n     * 添加热点内容至热点池中\n     *\n     * @param hotContentDTO 热点数据\n     */\n    @Override\n    public void addHotContent(HotContentDTO hotContentDTO) {\n        // 保存至数据库\n        hotContentRepository.addHotContent(hotContentDTO);\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/query/HotContentQuery.java\npackage com.myhexin.community.operating.deploy.interfaces.rest.query;\n\nimport lombok.Data;\n\n/**\n * 热点池内容查询条件\n * @author ningwenyu@myhexin.com\n * @date 2024/6/19 17:17\n */\n@Data\npublic class HotContentQuery {\n\n    /**\n     * 内容id\n     */\n    private String id;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n\n    /**\n     * 创建者\n     */\n    private String creator;\n\n    /**\n     * 当前页\n     */\n    private Integer page;\n\n    /**\n     * 页大小\n     */\n    private Integer pageSize;\n\n    /**\n     * 榜单状态\n     */\n    private Integer status;\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/HotContentOperatingManager.java\npackage com.myhexin.community.operating.deploy.app.manager;\n\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Component;\n\n/**\n * Manager类\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 20:48\n */\n@Component\n@RequiredArgsConstructor\npublic class HotContentOperatingManager {\n    private final HotContentOperatingService hotContentOperatingService;\n\n    public Object getHotContentPool(String id, String type, String creator, Integer page, Integer pageSize, Integer status) {\n    }\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/controller/HotContentOperatingController.java",
    "template": "java",
    "multiRes": {
      "hipilot": "\n                                                           @RequestParam(\"pageSize\") Integer pageSize,\n                                                           @RequestParam(\"status\") Integer status) {\n        return null;\n    }\n}",
      "CodeQwen2.5-7B": "",
      "copilot": "@RequestParam(\"page_size\") Integer pageSize,\n                                                           @RequestParam(\"status\") Integer status) {\n        return BaseResponseVO.success(hotContentOperatingManager.getHotContentPool(id, type, creator, page, pageSize, status));\n    }\n}\n",
      "CodeQwen1.5-7B": " "
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.interfaces.rest.controller;\n\nimport com.myhexin.community.operating.deploy.app.manager.HotContentOperatingManager;\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolResultDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.vo.BaseResponseVO;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.*;\n\n/**\n * 内容池 -- Controller\n * @author ningwenyu@myhexin.com\n * @date 2024/6/17 21:50\n */\n@RestController\n@RequestMapping(\"/auth/api/hot_module/v1/hot_content\")\n@RequiredArgsConstructor\npublic class HotContentOperatingController {\n    private final HotContentOperatingManager hotContentOperatingManager;\n\n    /**\n     * 获取热点池数据\n     * @param id 内容id\n     * @param type 内容类型\n     * @param creator 创建者\n     * @param page 当前页\n     * @param pageSize 页大小\n     * @param status ",
    "infill": "状态信息\n     * @return 热点池数据\n     ",
    "suffix": "*/\n    @GetMapping(\"get_hot_content_pool\")\n    public BaseResponseVO<HotContentPoolResultDTO> getHotContentPool(@RequestParam(\"id\") String id,\n                                                                     @RequestParam(\"type\") String type,\n                                                                     @RequestParam(\"creator\") String creator,\n                                                                     @RequestParam(\"page\") Integer page,\n                                                                     @RequestParam(\"page_size\") Integer pageSize,\n                                                                     @RequestParam(\"status\") Integer status) {\n        return BaseResponseVO.success(hotContentOperatingManager.getHotContentPool(id, type, creator, page, pageSize, status));\n    }\n    \n    @PostMapping(\"\")\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/dto/hottopic/HotContentPoolResultDTO.java\npackage com.myhexin.community.operating.deploy.app.manager.dto.hottopic;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.util.List;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/6/19 17:22\n */\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class HotContentPoolResultDTO {\n\n    /**\n     * 热点池列表\n     */\n    private List<HotContentPoolDTO> list;\n\n    /**\n     * 查询总数\n     */\n    private Integer total;\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/impl/HotContentOperatingServiceImpl.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.service.impl;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.repository.HotContentOperatingRepository;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * 热点内容Service实现\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\n@Service\n@RequiredArgsConstructor\npublic class HotContentOperatingServiceImpl implements HotContentOperatingService {\n\n    private final HotContentOperatingRepository hotContentRepository;\n\n    /**\n     * 添加热点内容至热点池中\n     *\n     * @param hotContentPoolDTO 热点数据\n     */\n    @Override\n    public void addHotContent(HotContentPoolDTO hotContentPoolDTO) {\n        // 保存至数据库\n        hotContentRepository.addHotContent(hotContentPoolDTO);\n    }\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    @Override\n    public List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPool(hotContentQuery);\n    }\n\n    /**\n     * 获取热点池数据总数\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    @Override\n    public Integer getHotContentPoolTotal(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPoolTotal(hotContentQuery);\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/query/HotContentQuery.java\npackage com.myhexin.community.operating.deploy.interfaces.rest.query;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n/**\n * 热点池内容查询条件\n * @author ningwenyu@myhexin.com\n * @date 2024/6/19 17:17\n */\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class HotContentQuery {\n\n    /**\n     * 内容id\n     */\n    private String id;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n\n    /**\n     * 创建者\n     */\n    private String creator;\n\n    /**\n     * 偏移量\n     */\n    private Integer skipNum;\n\n    /**\n     * 页大小\n     */\n    private Integer pageSize;\n\n    /**\n     * 大小\n     */\n    private Integer status;\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/HotContentOperatingManager.java\npackage com.myhexin.community.operating.deploy.app.manager;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolResultDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n/**\n * Manager类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 20:48\n */\n@Component\n@RequiredArgsConstructor\npublic class HotContentOperatingManager {\n    private final HotContentOperatingService hotContentOperatingService;\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param id       内容id\n     * @param type     内容类型\n     * @param creator  创建者\n     * @param page     当前页\n     * @param pageSize 页大小\n     * @param status   状态信息\n     * @return 热点池数据\n     */\n    public HotContentPoolResultDTO getHotContentPool(String id, String type, String creator, Integer page, Integer pageSize, Integer status) {\n        // 创建查询条件\n        HotContentQuery hotContentQuery = HotContentQuery.of()\n                .setId(id)\n                .setType(type)\n                .setCreator(creator)\n                .setSkipNum((page - NumberUtils.INTEGER_ONE) * pageSize)\n                .setPageSize(pageSize)\n                .setStatus(status);\n\n        // 查询热点池数据\n        List<HotContentPoolDTO> hotContentPoolList = hotContentOperatingService.getHotContentPool(hotContentQuery);\n        // 查询总条数\n        Integer total = hotContentOperatingService.getHotContentPoolTotal(hotContentQuery);\n        return HotContentPoolResultDTO.of()\n                .setList(hotContentPoolList)\n                .setTotal(total);\n    }\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/controller/HotContentOperatingController.java",
    "template": "java",
    "multiRes": {
      "hipilot": "状态信息\n     * @return 热点池数据\n     ",
      "CodeQwen2.5-7B": "状态",
      "copilot": "状态信息\n     * @return 热点池数据\n     ",
      "CodeQwen1.5-7B": " 状态"
    }
  },
  {
    "prefix": "package com.myhexin.community.user.medal.deploy.interfaces.rest.converter;\n\nimport com.myhexin.community.user.medal.deploy.modules.historymedal.domain.dto.UserHistoryMedalDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.*;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.Medal;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalCategory;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalSeries;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.UserMedal;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.Named;\nimport org.mapstruct.factory.Mappers;\n\nimport java.util.Optional;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/4/24 20:16\n */\n@Mapper(imports = {Optional.class})\npublic interface MedalConvert {\n\n    MedalConvert INSTANCE = Mappers.getMapper(MedalConvert.class);\n\n    /**\n     * 用户勋章DTO转换\n     *\n     * @param userMedal 原始用户勋章信息\n     * @return 用户勋章DTO\n     */\n    UserMedalDTO toUserMedalDTO(UserMedal userMedal);\n    \n    MedalDTO toMedalDTO(Medal medal);\n    \n    MedalSeriesDTO toMedalSeriesDTO(MedalSeries medalSeries);\n    \n    @Mapping(target = \"categoryRank\", expression = \"java(Optional.ofN",
    "infill": "ullable(medalCategory.getCategoryRank()).orElse(0))\")\n    MedalCategoryDTO toMedalCategoryDTO(MedalCategory medalCategory",
    "suffix": ");\n    \n\n    /**\n     * 将历史勋章系列转换至新版返回值\n     *\n     * @param userHistoryMedalDTO 原始历史勋章信息\n     * @return 新版返回值\n     */\n\n    @Mapping(target = \"level\", source = \"medalLevel\", qualifiedByName = \"levelToInt\")\n    @Mapping(target = \"medalName\", source = \"medalName\")\n    @Mapping(target = \"logoUrl\", source = \"logoUrl\")\n    @Mapping(target = \"acquisitionTime\", source = \"acquiredMedalTime\")\n    @Mapping(target = \"acquisitionCriteria\", source = \"condition\")\n    UserMedalDetailResultDTO.UserMedalDetailInfo toUserMedalDetailInfo(UserHistoryMedalDTO userHistoryMedalDTO);\n\n    /**\n     * 将旧版勋章的level由拼接形式转换为纯等级形式\n     *\n     * @param level 等级\n     * @return int型等级\n     */\n    @Named(\"levelToInt\")\n    default Integer levelToInt(String level) {\n        if (level != null && level.contains(\"_\")) {\n            return Integer.parseInt(level.split(\"_\")[1]);\n        }\n        return null;\n    }\n}\n",
    "relevantFile": "<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/infrastructure/db/model/MedalCategory.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model;\n\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\n\n/**\n * 勋章类别表(com.myhexin.community.user.medal.deploy.modules.medal.domain.enums.MedalCategory)表实体类\n *\n * @author makejava\n * @since 2024-04-23 19:56:55\n */\n@Data\n@EqualsAndHashCode(callSuper = false)\n@SuppressWarnings(\"serial\")\npublic class MedalCategory extends Model<MedalCategory> {\n\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    /**\n     * 类别名称，如“股东勋章”\n     */\n    private String name;\n\n    /**\n     * 描述，勋章备注\n     */\n    private String description;\n\n    /**\n     * 勋章类别排序\n     */\n    private Integer categoryRank;\n\n    /**\n     * 勋章类别类型 common 普通勋章 gudong 股东勋章\n     */\n    private String type;\n\n    /**\n     * 勋章类别是否生效，有效（valid）、无效（invalid）\n     */\n    private String validStatus;\n\n    /**\n     * 创建时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 更新时间\n     */\n    private LocalDateTime utime;\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalDTO.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.dto;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.time.LocalDateTime;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 13:06\n */\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class MedalDTO {\n\n    /**\n     * id\n     */\n    private Integer medalId;\n\n    /**\n     * 获取条件\n     */\n    private String acquisitionCriteria;\n\n    /**\n     * 获取时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 描述\n     */\n    private String description;\n\n    /**\n     * 扩展字段\n     */\n    private String ext;\n\n    /**\n     * logo地址\n     */\n    private String logoUrl;\n\n    /**\n     * 等级\n     */\n    private Integer medalLevel;\n\n    /**\n     * 勋章名称\n     */\n    private String medalName;\n\n    /**\n     * 勋章系列id\n     */\n    private Integer seriesId;\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalCategoryDTO.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.dto;\n\nimport lombok.Data;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 11:10\n */\n@Data\npublic class MedalCategoryDTO {\n\n    /**\n     * 奖章类别ID\n     */\n    private Integer id;\n\n    /**\n     * 名称\n     */\n    private String name;\n    /**\n     * 类别描述\n     */\n    private String description;\n\n    /**\n     * 有效状态（valid：有效；invalid：无效）\n     */\n    private String validStatus;\n\n    /**\n     * 奖章类型（common：普通；activity：特殊）\n     */\n    private String medalType;\n\n    /**\n     * 勋章类别创建时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 勋章类别更新时间\n     */\n    private LocalDateTime utime;\n\n    /**\n     * 勋章系列列表\n     */\n    private List<MedalSeriesDTO> medalSeriesList;\n\n    /**\n     * 勋章类别排序\n     */\n    private Integer categoryRank;\n\n    /**\n     * 勋章类别类型 common 普通勋章 gudong 股东勋章\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalWallDTO.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.dto;\n\nimport com.myhexin.community.user.medal.deploy.interfaces.rest.converter.MedalConvert;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalCategory;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.po.MedalWallInfoPO;\nimport lombok.Data;\nimport org.apache.commons.lang3.math.NumberUtils;\n\nimport java.util.*;\n\n/**\n * 勋章墙DTO类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 15:08\n */\n@Data\npublic class MedalWallDTO {\n\n    /**\n     * 勋章类型列表\n     */\n    private List<MedalCategoryInfo> categoryList;\n\n    @Data\n    public static class MedalCategoryInfo {\n        /**\n         * 勋章类别详情\n         */\n        private MedalCategoryDTO medalCategoryDTO;\n\n        /**\n         * 勋章系列列表\n         */\n        List<MedalSeriesInfo> seriesList;\n\n        @Data\n        public static class MedalSeriesInfo {\n\n            /**\n             * 勋章系列详情\n             */\n            private MedalSeriesDTO medalSeriesDTO;\n\n            /**\n             * 勋章详情\n             */\n            private List<MedalDTO> medalList;\n        }\n    }\n\n\n    /**\n     * 转化为勋章墙格式\n     *\n     * @param medalCategoryList 所有勋章分类\n     * @param medalWallInfoList 连表查询返回值\n     * @return 勋章墙DTO对象\n     */\n    public static MedalWallDTO mapMedalsToWallDTO(List<MedalCategory> medalCategoryList,",
    "relevantFileList": [],
    "filePath": "src/main/java/com/myhexin/community/user/medal/deploy/interfaces/rest/converter/MedalConvert.java",
    "template": "java",
    "multiRes": {
      "hipilot": "(medalCategory.getCategoryRank())",
      "CodeQwen2.5-7B": "ullable(medalCategory.getCategoryRank()).orElse(0))\")",
      "copilot": "ullable(medalCategory.getCategoryRank()).orElse(0))\")\n    MedalCategoryDTO toMedalCategoryDTO(MedalCategory medalCategory",
      "CodeQwen1.5-7B": " ullable(userMedal.getCategoryRank()).orElse(0))\")"
    }
  },
  {
    "prefix": "package com.myhexin.ifund.ranking.deploy.interfaces.job.fund;\n\nimport com.alibaba.fastjson.JSON;\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.myhexin.ifund.ranking.api.dto.request.ConfigTrackReq;\nimport com.myhexin.ifund.ranking.deploy.common.external.service.DataCenterService;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.EtfMetaType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.FundMetaType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.SceneCycle;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.ProductInvestDto;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.po.RankingMetaDataPo;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.po.RankingTrackResultPo;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.infrastructure.db.dao.RankingMetaDataMapper;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.infrastructure.db.repository.RankingTrackResultServiceImpl;\nimport com.xxl.job.core.biz.model.ReturnT;\nimport com.xxl.job.core.handler.IJobHandler;\nimport com.xxl.job.core.handler.annotation.JobHandler;\nimport com.xxl.job.core.log.XxlJobLogger;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.*;\n\n@JobHandler(\"FundTrackJobHandler\")\n@Component\n@Slf4j\npublic class FundTrackJobHandler extends IJobHandler {\n\n    private final RedisTemplate<String, Object> redisMarketTemplate;\n\n    private final RankingMetaDataMapper rankingMetaDataMapper;\n\n    private final RankingTrackResultServiceImpl rankingTrackResultService;\n\n    private final DataCenterService dataCenterService;\n\n    public FundTrackJobHandler(RedisTemplate<String, Object> redisMarketTemplate, RankingMetaDataMapper rankingMetaDataMapper,\n                               RankingTrackResultServiceImpl rankingTrackResultService, DataCenterService dataCenterService) {\n        this.redisMarketTemplate = redisMarketTemplate;\n        this.rankingMetaDataMapper = rankingMetaDataMapper;\n        this.rankingTrackResultService = rankingTrackResultService;\n        this.dataCenterService = dataCenterService;\n    }\n\n\n    @Override\n    public ReturnT<String> execute(String s) {\n        try {\n            XxlJobLogger.log(\"FundTrackJobHandler 开始执行\");\n            deal(s);\n\n        } catch (Exception e) {\n            XxlJobLogger.log(e);\n            XxlJobLogger.log(\"FundTrackJobHandler 执行错误 :{}\", e.getMessage());\n            return FAIL;\n        }\n        return SUCCESS;\n    }\n\n    private void deal(String s) {\n        //获取赛道列表配置数据\n        String cacheStr = (String) redisMarketTemplate.opsForValue().get(\"ranking_productInvestRanking\");\n        List<ProductInvestDto> list = JSON.parseArray(cacheStr, ProductInvestDto.class);\n        Map<String, List<ProductInvestDto>> map = new HashMap<>();\n        for (ProductInvestDto po : list) {",
    "infill": "List<ProductInvestDto> trackList = map.getOrDefault(po.getThirdClassification(), new ArrayList<>());\n            trackList.add(po);\n            map.put(po.getThirdClassification(), trackList);\n        }\n\n",
    "suffix": "        XxlJobLogger.log(\"calResult list={}\", list.size());\n        List<RankingTrackResultPo> poList = new ArrayList<>();\n        for (ConfigTrackReq trackPo : list) {\n            List<RankingTrackResultPo> resultList = calResult(trackPo);\n            poList.addAll(resultList);\n        }\n        rankingTrackResultService.saveBatch(poList);\n\n    }\n\n    private List<RankingTrackResultPo> calResult(ConfigTrackReq trackPo) {\n        if (StringUtils.isEmpty(trackPo.getCodeList())) {\n            XxlJobLogger.log(\"calResultEmpty trackPo={}\", trackPo);\n            return new ArrayList<>();\n        }\n        List<String> codeList = Arrays.asList(trackPo.getCodeList().split(\",\"));\n        List<RankingMetaDataPo> metaDataList = rankingMetaDataMapper.selectList(new LambdaQueryWrapper<RankingMetaDataPo>()\n                .eq(RankingMetaDataPo::getScene, \"FUND\")\n                .in(RankingMetaDataPo::getCode, codeList)\n                .in(RankingMetaDataPo::getDataType, Arrays.asList(FundMetaType.RANKING.name(), FundMetaType.RANKING_SCORE.name())));\n\n        Map<String, Map<String, String>> dataMap = new HashMap<>();\n        for (RankingMetaDataPo po : metaDataList) {\n            Map<String, String> map = dataMap.getOrDefault(po.getCode(), new HashMap<>());\n            map.put(po.getDataType(), po.getDataValue());\n            dataMap.put(po.getCode(), map);\n        }\n\n        String typeList = \"simpleName,mgmtName\";\n        //获取并填充名称字段\n        Map<String, Map<String, String>> dataCenterResult = dataCenterService.indexList(codeList, typeList);\n        Map<String, String> resultMap = calPercent(codeList, dataMap);\n\n        List<RankingTrackResultPo> poList = new ArrayList<>();\n        for (String code : codeList) {\n            RankingTrackResultPo res = RankingTrackResultPo.builder()\n                    .scene(\"ETF\")\n                    .trackName(trackPo.getTrackName())\n                    .trackCode(trackPo.getTrackCode())\n                    .trackCount(trackPo.getTrackCount())\n                    .code(code)\n                    .name(dataCenterResult.get(code).get(\"simpleName\"))\n                    .companyName(dataCenterResult.get(code).get(\"mgmtName\"))\n                    .rank(Integer.parseInt(dataMap.get(code).get(EtfMetaType.RANKING.name())))\n                    .result(resultMap.get(code))\n                    .cycleTime(SceneCycle.DAY.getTime())\n                    .build();\n            poList.add(res);\n        }\n        return poList;\n    }\n\n    private Map<String, String> calPercent(List<String> codeList, Map<String, Map<String, String>> dataMap) {\n        if (CollectionUtils.isEmpty(codeList)) {\n            return new HashMap<>();\n        }\n        Map<String, BigDecimal> lnRes = new HashMap<>();\n        BigDecimal total = new BigDecimal(\"0\");\n        for (String code : codeList) {\n            String value = dataMap.get(code).get(FundMetaType.RANKING_SCORE.name());\n            BigDecimal math = new BigDecimal(value).setScale(6, RoundingMode.DOWN).add(new BigDecimal(\"0.000001\"));\n            BigDecimal lnResult = BigDecimal.valueOf(Math.log(math.doubleValue()));\n            total = total.add(lnResult);\n            lnRes.put(code, lnResult);\n        }\n        Map<String, String> res = new HashMap<>();\n        for (String code : codeList) {\n            String result = lnRes.get(code).divide(total, 6, RoundingMode.DOWN).multiply(new BigDecimal(\"100\")).toPlainString();\n            res.put(code, result);\n        }\n        return res;\n    }\n\n\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/ifund/ranking/deploy/modules/ranking/domain/dto/ProductInvestDto.java\npackage com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto;\n\nimport lombok.Data;\n\n@Data\npublic class ProductInvestDto {\n\n    private String fundCode;\n\n    private String fundName;\n\n    private String rank;\n    \n    private String thirdClassification;\n\n}\n<file_path>deploy/src/main/java/com/myhexin/ifund/ranking/deploy/modules/ranking/domain/service/calpoint/fund/FundRankingCalPoint.java\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.MetaDataType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.Product;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.ProductInvestDto;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.PublicWeightConfig;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.entity.ConfigData;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.entity.MetaData;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.service.AbstractCalPoint;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.CollectionUtils;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Slf4j\n@Component\npublic class FundRankingCalPoint extends AbstractCalPoint {\n\n    private final RedisTemplate<String, Object> redisMarketTemplate;\n\n    public FundRankingCalPoint(RedisTemplate<String, Object> redisMarketTemplate) {\n        this.redisMarketTemplate = redisMarketTemplate;\n    }\n\n    @Override\n    public String scene() {\n        return \"FUND\";\n    }\n\n    @Override\n    public MetaDataType targetMetaData() {\n        return MetaDataType.builder()\n                .sceneType(scene())\n                .metaDataType(FundMetaType.RANKING.name())\n                .build();\n    }\n\n    @Override\n    public List<MetaDataType> sourceMetaData() {\n\n        return Arrays.asList(\n                MetaDataType.builder()\n                        .sceneType(scene())\n                        .metaDataType(FundMetaType.INSTITUTION_RANKING.name())\n                        .build(),\n\n                MetaDataType.builder()\n                        .sceneType(scene())\n                        .metaDataType(FundMetaType.MARKETING_RANKING.name())\n                        .build(),\n\n                MetaDataType.builder()\n                        .sceneType(scene())\n                        .metaDataType(FundMetaType.POTENTIAL_RANKING.name())\n                        .build());\n    }",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/ifund/ranking/deploy/interfaces/job/fund/FundTrackJobHandler.java",
    "template": "java",
    "multiRes": {
      "hipilot": "\n            List<ProductInvestDto> orDefault = map.getOrDefault(po.getThirdClassification(), new ArrayList<>());\n            orDefault.add(po);\n            map.put(po.getThirdClassification(), orDefault);\n        }",
      "CodeQwen2.5-7B": "",
      "copilot": "List<ProductInvestDto> trackList = map.getOrDefault(po.getThirdClassification(), new ArrayList<>());\n            trackList.add(po);\n            map.put(po.getThirdClassification(), trackList);\n        }\n\n",
      "CodeQwen1.5-7B": ""
    }
  },
  {
    "prefix": "package com.myhexin.tangram.service.impl;\n\nimport co.elastic.clients.elasticsearch.ElasticsearchClient;\nimport co.elastic.clients.transport.rest_client.RestClientTransport;\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.myhexin.tangram.common.enums.MetricSource;\nimport com.myhexin.tangram.dao.MetricInstanceDao;\nimport com.myhexin.tangram.dao.mapper.MetricMetaMapper;\nimport com.myhexin.tangram.model.biz.ElasticSearchProperties;\nimport com.myhexin.tangram.model.po.MetricExtInfoDO;\nimport com.myhexin.tangram.model.po.MetricMetaRecord;\nimport com.myhexin.tangram.model.po.MetricMetaSearchDO;\nimport com.myhexin.tangram.service.metric.MetricExtInfoService;\nimport com.myhexin.tangram.service.properties.TangramProperties;\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpHost;\nimport org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\nimport org.elasticsearch.action.bulk.BulkRequest;\nimport org.elasticsearch.action.bulk.BulkResponse;\nimport org.elasticsearch.action.delete.DeleteRequest;\nimport org.elasticsearch.action.delete.DeleteResponse;\nimport org.elasticsearch.action.search.SearchRequest;\nimport org.elasticsearch.action.search.SearchResponse;\nimport org.elasticsearch.action.support.WriteRequest;\nimport org.elasticsearch.action.support.master.AcknowledgedResponse;\nimport org.elasticsearch.action.update.UpdateRequest;\nimport org.elasticsearch.client.RequestOptions;\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestClientBuilder;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.client.indices.GetIndexRequest;\nimport org.elasticsearch.client.indices.GetMappingsRequest;\nimport org.elasticsearch.client.indices.GetMappingsResponse;\nimport org.elasticsearch.common.xcontent.XContentType;\nimport org.elasticsearch.index.mapper.MapperService;\nimport org.elasticsearch.index.query.MultiMatchQueryBuilder;\nimport org.elasticsearch.index.query.QueryBuilders;\nimport org.elasticsearch.search.builder.SearchSourceBuilder;\nimport org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport javax.annotation.Resource;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n/**\n * es test\n *\n * @author zzl <zhuzhoulin@myhexin.com>\n * @date 2024/1/26\n */\n@Slf4j\n@SpringBootTest\npublic class MetricMetaRecordEsTest {\n\n    private static final String METRIC_META_INDEX_NAME = \"tangram-metric-meta\";\n\n    @Resource\n    private MetricInstanceDao metricInstanceDao;\n    @Resource\n    private MetricMetaMapper metricMetaMapper;\n    @Resource\n    private ObjectMapper objectMapper;\n    @Resource\n    private TangramProperties tangramProperties;\n    @Resource\n    private MetricExtInfoService metricExtInfoService;\n\n    private RestHighLevelClient restHighLevelClient;\n\n    @BeforeEach\n    private void getRestHighLevelClient() {\n\n\n        final RestClient client = RestClient.builder(\n                Arrays.stream(\"http://172.31.0.10:10619\"\n                                .split(\",\"))\n                        .map(HttpHost::create).toArray(HttpHost[]::new)).build();\n\n\n        RestClientTransport transport = new RestClientTransport;\n        ElasticsearchClient ",
    "infill": "client1 = new ElasticsearchClientBuilder()\n                .transport(transport)\n                .build();\n\n        return new Elastic",
    "suffix": "searchClientBuilder()\n                .transport(transport)\n                .build();\n    }\n\n        RestClientTransportBuilder restClient = RestClient.builder(\n                Arrays.stream(\"http://\n\n        final RestClientBuilder restClient = RestClient.builder(\n                Arrays.stream(\"http://172.31.0.10:10619\"\n                                .split(\",\"))\n                        .map(HttpHost::create).toArray(HttpHost[]::new);\n        new ElasticsearchClient(new RestClientTransportB(restClient,objectMapper));\n\n        restHighLevelClient = new RestHighLevelClient()\n        );\n    }\n\n    @SneakyThrows\n    @AfterEach\n    private void closeRestHighLevelClient() {\n        if (restHighLevelClient != null) {\n            restHighLevelClient.close();\n        }\n    }\n\n    @Test\n    void testCreateEsIndex() throws Exception {\n\n        GetIndexRequest indexRequest = new GetIndexRequest(METRIC_META_INDEX_NAME);\n        final boolean exists = restHighLevelClient.indices().exists(indexRequest, RequestOptions.DEFAULT);\n\n        ElasticSearchProperties elasticSearchProperties = new ElasticSearchProperties();\n        elasticSearchProperties.setClusters(\"http://172.31.0.10:10619\");\n        if (exists) {\n            DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest(METRIC_META_INDEX_NAME);\n            restHighLevelClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);\n        }\n        metricInstanceDao.createIndex(tangramProperties.getEs().getIndexName(), tangramProperties.getEs().getMappings(),\n                elasticSearchProperties);\n        Assertions.assertNotNull(restHighLevelClient);\n    }\n\n\n    @Test\n    void testDeleteEsIndex() throws Exception {\n\n        GetIndexRequest indexRequest = new GetIndexRequest(METRIC_META_INDEX_NAME);\n        final boolean exists = restHighLevelClient.indices().exists(indexRequest, RequestOptions.DEFAULT);\n\n        if (exists) {\n            DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest(METRIC_META_INDEX_NAME);\n            AcknowledgedResponse response = restHighLevelClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);\n            Assertions.assertTrue(response.isAcknowledged());\n        }\n        Assertions.assertNotNull(restHighLevelClient);\n    }\n\n    @Test\n    void testGetEsIndexMapping() throws Exception {\n        GetMappingsRequest indexRequest = new GetMappingsRequest();\n        indexRequest.indices(METRIC_META_INDEX_NAME);\n        final GetMappingsResponse mapping = restHighLevelClient.indices().getMapping(indexRequest, RequestOptions.DEFAULT);\n        Assertions.assertNotNull(mapping);\n    }\n\n    @Test\n    void testEsSaveData() throws Exception {\n        LambdaQueryWrapper<MetricMetaRecord> queryWrapper = Wrappers.lambdaQuery();\n        final List<MetricMetaRecord> dataList = metricMetaMapper.selectList(queryWrapper);\n\n        final List<MetricExtInfoDO> metrixExtList = metricExtInfoService.list();\n        final Map<String, MetricExtInfoDO> metricExtMap = metrixExtList.stream().collect(\n                Collectors.toMap(MetricExtInfoDO::getMetricUid, Function.identity(), (o, n) -> n));\n\n        BulkRequest bulkRequest = new BulkRequest();\n        for (MetricMetaRecord item : dataList) {\n            MetricMetaSearchDO metricMetaSearchDO = new MetricMetaSearchDO( );\n            metricMetaSearchDO.setId(item.getId());\n            metricMetaSearchDO.setUid(item.getUid());\n            metricMetaSearchDO.setMetricCode(item.getCode());\n            metricMetaSearchDO.setSourceCode(item.getSourceCode());\n            metricMetaSearchDO.setMetricName(item.getName());\n            metricMetaSearchDO.setDeleted(item.isDeleted());\n            metricMetaSearchDO.setDescription(item.getDescription());\n            metricMetaSearchDO.setCreateTime(item.getCreateTime());\n            metricMetaSearchDO.setUpdateTime(item.getUpdateTime());\n            metricMetaSearchDO.setValueType(item.getValueType().name());\n            metricMetaSearchDO.setDirUid(item.getDirUid());\n            metricMetaSearchDO.setOnlineStatus(item.getOnlineStatus());\n            metricMetaSearchDO.setDomainUid(item.getDomainUid());\n            metricMetaSearchDO.setMetricSource(item.getMetricSource() != null ? item.getMetricSource().name():\n                    MetricSource.HURRICANE.name());\n\n            MetricExtInfoDO metricExtInfo = metricExtMap.get(item.getUid());\n            if(ObjectUtils.isNotEmpty(metricExtInfo)){\n                metricMetaSearchDO.setSupportSearch(metricExtInfo.getSupportSearch());\n                metricMetaSearchDO.setSupportDataApi(metricExtInfo.getSupportDataApi());\n                metricMetaSearchDO.setDescAi(metricExtInfo.getDescAi());\n            }\n\n            UpdateRequest request = new UpdateRequest(tangramProperties.getEs().getIndexName(),\n                    MapperService.SINGLE_MAPPING_NAME,\n                    metricMetaSearchDO.getId() + StringUtils.EMPTY);\n\n            // 存在则更新\n            try {\n\n                request.docAsUpsert(Boolean.TRUE).doc(objectMapper.writeValueAsString(metricMetaSearchDO),\n                        XContentType.JSON);\n                bulkRequest.add(request);\n            } catch (JsonProcessingException e) {\n                log.error(\"[testEsSaveData] error,errMsg:[{}]\", e.getMessage(), e);\n            }\n        }\n\n        bulkRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);\n\n        final BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);\n\n        Assertions.assertFalse(bulk.hasFailures());\n    }\n\n    @SneakyThrows\n    @Test\n    void testEsSearchData() {\n        SearchRequest searchRequest = new SearchRequest();\n        searchRequest.indices(METRIC_META_INDEX_NAME);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        MultiMatchQueryBuilder queryBuilder = QueryBuilders.multiMatchQuery(\"竞价涨幅\", \"metricCode\",\n                \"sourceCode\", \"metricName\", \"description\");\n        queryBuilder.minimumShouldMatch(\"25%\");\n        searchSourceBuilder.query(queryBuilder);\n        searchSourceBuilder.from(0);\n\n        HighlightBuilder highlightBuilder = new HighlightBuilder();\n        highlightBuilder.preTags(\"<font color='red'>\");\n        highlightBuilder.postTags(\"</font>\");\n        searchSourceBuilder.highlighter(highlightBuilder);\n        searchRequest.source(searchSourceBuilder);\n        final SearchResponse search = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        Assertions.assertNotNull(search);\n    }\n\n    @SneakyThrows\n    @Test\n    void testEsDeleteData(){\n\n        AtomicInteger result = new AtomicInteger(0);\n        List<String> metricIdList =Arrays.asList(\"1760554087329910786\" ,\n                \"1760554043834978305\" ,\n                \"1760554084993683458\" ,\n                \"1760554075929792514\" ,\n                \"1760554072553377793\" ,\n                \"1760554089510948866\");\n        metricIdList.forEach(id->{\n            DeleteRequest deleteRequest = new DeleteRequest(METRIC_META_INDEX_NAME,id);\n            try {\n                final DeleteResponse delete = restHighLevelClient.delete(deleteRequest, RequestOptions.DEFAULT);\n                log.info(\"[deleteMetricMetaEsData]error,params: metricId:[{}],result:[{}]\", id, delete.toString());\n                result.addAndGet(1);\n            } catch (Exception e) {\n                log.error(\"[deleteMetricMetaEsData]error,params: metricId:[{}],errorMsg:[{}]\", id, e.getMessage(), e);\n            }\n        });\n\n        Assertions.assertEquals(metricIdList.size(), result.get());\n\n    }\n}\n",
    "relevantFile": "",
    "relevantFileList": [],
    "filePath": "starter/tangram-service-spring-boot-starter/src/test/java/com/myhexin/tangram/service/impl/MetricMetaRecordEsTest.java",
    "template": "java",
    "multiRes": {
      "hipilot": "elasticsearchClient = Elastic",
      "CodeQwen2.5-7B": "elasticsearchClient = new Elastic",
      "copilot": "client1 = new ElasticsearchClientBuilder()\n                .transport(transport)\n                .build();\n\n        return new Elastic",
      "CodeQwen1.5-7B": " transport = new RestClientTransport(client, objectMapper);"
    }
  },
  {
    "prefix": "package com.myhexin.zixun.conceptv2manager.deploy.common.external.rpc;\n\nimport com.alibaba.fastjson.JSON;\nimport com.myhexin.zixun.conceptv2manager.deploy.app.manager.dto.ConceptChainDTO;\nimport com.myhexin.zixun.conceptv2manager.deploy.common.config.properties.ChainProperties;\nimport com.myhexin.zixun.conceptv2manager.deploy.modules.discovery.domain.entity.FeedbackEntity;\nimport com.myhexin.zixun.flow.gpt.engine.api.api.ChainOperateRpcService;\nimport com.myhexin.zixun.flow.gpt.engine.api.dto.request.ChainExecuteQuery;\nimport com.myhexin.zixun.flow.gpt.engine.api.dto.response.ChainExecuteResponse;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.dubbo.config.annotation.DubboReference;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author: menghaizhu\n * @date: 2023/11/14 17:16\n */\n@Slf4j\n@Service\n@RequiredArgsConstructor\npublic class NewChainOperateService {\n\n    private static final Long DELAY_TIME = 3000L;\n\n    private static final ConceptChainDTO CONCEPT_CHAINDTO = new ConceptChainDTO().setResult(false);\n\n\n    private final ChainProperties chainProperties;\n\n\n    @DubboReference(version = \"1.0.0\", retries = 0, timeout = 200_000)\n    private ChainOperateRpcService chainOperateRpcService;\n\n\n    /**\n     * @param chainId  执行链id\n     * @param paramMap 链执行全流程的全局参数\n     * @return 执行结果\n     */\n    @Nullable\n    private String executeChain(String chainId, Map<String, String> paramMap) {\n        // 链参数\n        ChainExecuteQuery chainExecuteQuery = new ChainExecuteQuery();\n        chainExecuteQuery.setChainId(chainId);\n        chainExecuteQuery.setChainParamMap(paramMap);\n\n        log.debug(\"开始执行链{},参数{}\", chainId, JSON.toJSONString(chainExecuteQuery));\n        // 执行\n        try {\n            ChainExecuteResponse chainExecuteResponse = chainOperateRpcService.executeChain(chainExecuteQuery);\n            log.debug(\"链执行完毕,执行结果{}\", chainExecuteResponse);\n            return chainExecuteResponse.getResult();\n        } catch (RuntimeException e) {\n            log.error(\"链执行失败\", e);\n        }\n        return \"\";\n    }\n\n\n    /**\n     * GPT根据个股线索和概念添加标准给出审核意见\n     *\n     * @param clue        个股线索\n     * @param addStandard 审核标准\n     * @return 审核结果\n     */\n    public ConceptChainDTO matchStockByGpt(String clue, String addStandard) {\n        HashMap<String, String> extendedMap = new HashMap<>(2);\n        extendedMap.put(\"clue\", clue);\n        extendedMap.put(\"addStandard\", addStandard);\n        try {\n            Thread.sleep(DELAY_TIME);\n        } catch (InterruptedException e) {\n            log.error(\"GPT延时失败\", e);\n            Thread.currentThread().interrupt();\n        }\n        String result = executeChain(chainProperties.getRecommendStockChainId(), extendedMap);\n        // 解析结果\n\n        try {\n            ConceptChainDTO conceptChainDTO = JSON.parseObject(result, ConceptChainDTO.class);\n            if (conceptChainDTO == null) {\n                return CONCEPT_CHAINDTO;\n            }\n            return conceptChainDTO;\n        } catch (RuntimeException e) {\n            log.error(\"解析AI审核成分股结果失败\", e);\n        }\n        return CONCEPT_CHAINDTO;\n    }\n\n    /**\n     * 根据用户反馈查询互动易/公告/官网官微\n     *\n     * @param reason 用户反馈原因\n     * @return 互动易/公告/官网官微\n     */\n    public List<FeedbackEntity.Tracing> getFeedbackTracing(@NotNull String reason) {\n        Map<String, String> paramMap = new HashMap<>(1);\n        paramMap.put(",
    "infill": "\"query\", reason);\n        Str",
    "suffix": "ing result = executeChain(chainProperties.getFeedbackTracingChainId(), paramMap);\n        // 解析结果\n        try {\n            return JSON.parseArray(result, FeedbackEntity.Tracing.class);\n        } catch (RuntimeException e) {\n            log.error(\"解析用户反馈数据溯源结果失败\", e);\n        }\n        return null;\n    }\n\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/app/manager/dto/ConceptChainDTO.java\npackage com.myhexin.zixun.conceptv2manager.deploy.app.manager.dto;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.util.List;\n\n/**\n * @author: menghaizhu\n * @date: 2023/10/11 19:29\n */\n@Data\n@Accessors(chain = true)\npublic class ConceptChainDTO {\n\n    private Boolean result;\n\n    private List<String> standard;\n\n    private String reason;\n\n    private String quesContent;\n\n    private String ansContent;\n\n    private String ansUrl;\n\n}\n<file_path>deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/app/manager/strategy/FeedbackDiscoveryStrategy.java\n\n        Set<DiscoveryDTO> discoverySet = new HashSet<>();\n        List<ConceptAuditAddQueryDTO> recordList = new ArrayList<>();\n        int pageNum = 1;\n        boolean getFeedbackFlag = true;\n\n        while (getFeedbackFlag) {\n            // 获取用户反馈数据，按时间倒序排列\n            List<FeedbackEntity> feedbackList = feedbackService.getFeedbackDiscoveryList(pageNum);\n            if (feedbackList.isEmpty()) {\n                // 无新的用户反馈数据，跳出循环\n                break;\n            }\n\n            for (FeedbackEntity feedbackEntity : feedbackList) {\n                // 实体创建时间早于缓存的时间戳，标识已同步过该消息\n                if (feedbackEntity.getPtime() < feedbackTimestamp) {\n                    // 时间倒序排列，后面的消息均已同步过，跳出循环\n                    getFeedbackFlag = false;\n                    break;\n                }\n                discoverySet.add(feedbackToDiscoveryDTO(feedbackEntity));\n                recordList.add(toConceptAuditRecordEntity(feedbackEntity));\n                feedbackTracing(feedbackEntity);\n            }\n            pageNum++;\n        }\n\n        log.debug(\"FeedbackDiscoveryStrategy ======> 发现用户反馈数据 {} 条\", discoverySet.size());\n        // 没有新增数据,无需更新时间戳\n        if (discoverySet.isEmpty()) {\n            return new ArrayList<>();\n        }\n        // 添加审核记\n        reviewService.addConceptAuditRecord(recordList);\n        // 缓存本次同步时间戳\n        redisTemplate.opsForValue().set(FEEDBACK_TIMESTAMP_KEY,\n                String.valueOf(LocalDateTime.now().atZone(ZoneId.systemDefault()).toEpochSecond()),\n                FEEDBACK_TIMESTAMP_KEY_TTL_DAYS, TimeUnit.DAYS);\n\n        return new ArrayList<>(discoverySet);\n    }\n\n    /**\n     * 获取各策略发现渠道\n     *\n     * @return 发现渠道\n     */\n    @NotNull\n    @Override\n    public DiscoveryChannelEnum getStrategyChannel() {\n        return DiscoveryChannelEnum.FEEDBACK;\n    }\n\n    @NotNull\n    private static DiscoveryDTO feedbackToDiscoveryDTO(@NotNull FeedbackEntity feedbackEntity) {\n        DiscoveryDTO discoveryDTO = new DiscoveryDTO();\n        discoveryDTO.setHotWord(feedbackEntity.getConceptName())\n                .setStockCode(feedbackEntity.getStockCode())\n                .setStockName(feedbackEntity.getStockName())\n<file_path>deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/modules/discovery/domain/entity/FeedbackEntity.java\npublic class FeedbackEntity {\n\n    /**\n     * 用户反馈记录id\n     */\n    private String id;\n\n    /**\n     * 概念id\n     */\n    private Long conceptId;\n\n    /**\n     * 概念词\n     */\n    private String conceptName;\n\n    /**\n     * 申请理由\n     */\n    private String reason;\n\n    /**\n     * 股票代码\n     */\n    private String stockCode;\n\n    /**\n     * 股票名\n     */\n    private String stockName;\n\n    /**\n     * 申请图片 多张，逗号分隔\n     */\n    private String images;\n\n    /**\n     * 用户上传来源\n     */\n    private String sourceUrl;\n\n    /**\n     * 操作类型\n     * -1 新增概念  1 新增概念股 2 新增股票解析 3 删除概念股\n     */\n    private Integer type;\n\n    /**\n     * 审核状态\n     */\n    private String status;\n\n    /**\n     * 审核意见\n     */\n    private String delReason;\n\n    /**\n     * 提交时间",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/common/external/rpc/NewChainOperateService.java",
    "template": "java",
    "multiRes": {
      "hipilot": "\"reason\", reason);",
      "CodeQwen2.5-7B": "\"reason\", reason);",
      "copilot": "\"query\", reason);\n        Str",
      "CodeQwen1.5-7B": "\"reason\", reason);"
    }
  },
  {
    "prefix": "package com.myhexin.nacos.console.manager;\n\nimport com.myhexin.nacos.console.pr",
    "infill": "pid dataid 是否有审核记录\n        //如果有审核记录则更新审核记录,\n    }\n}",
    "suffix": "",
    "relevantFile": "<file_path>console/src/main/java/com/myhexin/nacos/console/service/HexinServiceServiceImpl.java\npackage com.myhexin.nacos.console.service;\n\nimport com.alibaba.nacos.auth.exception.AccessException;\nimport com.alibaba.nacos.common.constant.HttpHeaderConsts;\nimport com.alibaba.nacos.common.utils.ExceptionUtil;\nimport com.alibaba.nacos.config.server.model.Page;\nimport com.myhexin.nacos.console.auth.HexinServiceInfo;\nimport com.myhexin.nacos.console.auth.HexinServicePersistService;\nimport com.myhexin.nacos.console.dto.HexinServiceConverter;\nimport com.myhexin.nacos.console.dto.HexinServiceDto;\nimport com.myhexin.nacos.console.proxy.AuthProxy;\nimport com.myhexin.nacos.console.proxy.ConsoleProxy;\nimport com.myhexin.nacos.console.proxy.vo.AddHexinServiceVo;\nimport com.myhexin.nacos.console.utils.VersionUtil;\nimport com.alibaba.nacos.core.cluster.MemberMetaDataConstants;\nimport com.alibaba.nacos.sys.env.Constants;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Pattern;\n\n/**\n * Hexin service impl.\n *\n * @author huaxiaolong\n */\n@Service\npublic class HexinServiceServiceImpl {\n\n    private static final Pattern HTTP_CODE_403_MATCH = Pattern.compile(\"httpCode: 403\");\n\n    @Resource\n    private HexinServicePersistService servicePersistService;\n\n    @Resource\n    private AuthProxy authProxy;\n\n    @Resource\n    private ConsoleProxy consoleProxy;\n\n    /**\n     * Get page of hexin services.\n     *\n     * @param pageNo page no\n     * @param pageSize page size\n     * @return Page<HexinServiceDto>\n     */\n    public Page<HexinServiceDto> getServices(int pageNo, int pageSize) {\n        Page<HexinServiceInfo> serviceInfoPage = servicePersistService.getServices(pageNo, pageSize);\n        Page<HexinServiceDto> serviceDtoPage = new Page<>();\n        serviceDtoPage.setTotalCount(serviceInfoPage.getTotalCount());\n        serviceDtoPage.setPageNumber(serviceInfoPage.getPageNumber());\n        serviceDtoPage.setPagesAvailable(serviceInfoPage.getPagesAvailable());\n        List<HexinServiceDto> serviceDtoList = new ArrayList<>();\n        // desensitization identity key & value\n        serviceInfoPage.getPageItems().forEach(serviceInfo ->\n            serviceDtoList.add(HexinServiceConverter.toDto(serviceInfo)));\n<file_path>console/src/main/java/com/myhexin/nacos/console/service/HexinRoleService.java\npackage com.myhexin.nacos.console.service;\n\n/**\n * Hexin role service interface.\n *\n * @author huaxiaolong\n */\npublic interface HexinRoleService {\n\n    /**\n     * 是否有权限.\n     *\n     * @param clusterName 集群名\n     * @param serviceName 服务名\n     * @param serviceType 服务类型\n     * @param username 用户名\n     * @return true if granted, false otherwise\n     */\n    boolean hasPermission(String clusterName, String serviceName, String serviceType, String username);\n\n    /**\n     * 是否是管理员.\n     *\n     * @param clusterName 集群名\n     * @param serviceName 服务名\n     * @param serviceType 服务类型\n     * @param username 用户名\n     * @return true if is global admin, false otherwise\n     */\n    boolean isGlobalAdmin(String clusterName, String serviceName, String serviceType, String username);\n}\n<file_path>console/src/main/java/com/myhexin/nacos/console/controller/ConfigController.java\npackage com.myhexin.nacos.console.controller;\n\nimport com.alibaba.nacos.api.exception.NacosException;\nimport com.alibaba.nacos.auth.annotation.Secured;\nimport com.alibaba.nacos.auth.common.ActionTypes;\nimport com.alibaba.nacos.config.server.auth.ConfigResourceParser;\nimport com.alibaba.nacos.config.server.constant.Constants;\nimport com.alibaba.nacos.config.server.model.ConfigAllInfo;\nimport com.alibaba.nacos.config.server.model.ConfigInfo;\nimport com.alibaba.nacos.config.server.model.GroupkeyListenserStatus;\nimport com.alibaba.nacos.config.server.model.Page;\nimport com.alibaba.nacos.config.server.utils.RequestUtil;\nimport com.alibaba.nacos.console.security.nacos.users.NacosUser;\nimport com.myhexin.nacos.console.manager.AuditManager;\nimport com.myhexin.nacos.console.proxy.ConfigProxy;\nimport com.myhexin.nacos.console.proxy.vo.PublishConfigVo;\nimport com.myhexin.nacos.console.proxy.vo.SearchConfigVo;\nimport io.jsonwebtoken.lang.Assert;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * config controller.\n *\n * @author huaxiaolong\n */\n@RestController(\"ConfigProxyController\")\n@RequestMapping(Constants.CONFIG_CONTROLLER_PATH)\npublic class ConfigController {\n\n    @Resource\n    private ConfigProxy configProxy;\n    @Resource\n    private AuditManager auditManager;\n\n    /**\n     * Query the configuration information and return it in JSON format.\n     */\n    @GetMapping(params = \"search=accurate\")\n    @Secured(action = ActionTypes.READ, parser = ConfigResourceParser.class)\n    public Page<ConfigInfo> searchConfig(@RequestParam(\"dataId\") String dataId, @RequestParam(\"group\") String group,\n                                         @RequestParam(value = \"appName\", required = false) String appName,\n                                         @RequestParam(value = \"tenant\", required = false, defaultValue = StringUtils.EMPTY) String tenant,\n                                         @RequestParam(value = \"config_tags\", required = false) String configTags,\n                                         @RequestParam(\"pageNo\") int pageNo, @RequestParam(\"pageSize\") int pageSize,\n                                         @RequestParam String hexinClusterName,\n                                         @RequestParam String hexinServiceName) {\n        SearchConfigVo searchConfigVo = new SearchConfigVo();\n        searchConfigVo.setConfigTags(configTags);\n        searchConfigVo.setAppName(appName);\n        searchConfigVo.setDataId(dataId);\n<file_path>console/src/main/java/com/myhexin/nacos/console/proxy/vo/PublishConfigVo.java\npackage com.myhexin.nacos.console.proxy.vo;\n\n/**\n * Publish config vo.\n *\n * @author huaxiaolong\n */\npublic class PublishConfigVo extends HexinVo {\n    /**\n     * 数据ID\n     */\n    private String dataId;\n\n    /**\n     * 数据所属的组\n     */\n    private String group;\n\n    /**\n     * 数据的租户\n     */\n    private String tenant;\n\n    /**\n     * 数据的内容\n     */\n    private String content;\n\n    /**\n     * 与数据关联的标签\n     */\n    private String tag;\n\n    /**\n     * 使用数据的应用名称\n     */\n    private String appName;\n\n    /**\n     * 创建数据的用户\n     */\n    private String srcUser;\n\n    /**\n     * 与配置关联的标签\n     */\n    private String configTags;\n\n    /**\n     * 数据的描述\n     */\n    private String desc;\n\n    /**\n     * 数据的用途\n     */\n    private String use;\n\n    /**\n     * 数据的效果",
    "relevantFileList": [],
    "filePath": "console/src/main/java/com/myhexin/nacos/console/manager/AuditManager.java",
    "template": "java",
    "multiRes": {
      "hipilot": "oxy.vo.HexinVo;",
      "CodeQwen2.5-7B": "operties.NacosProperties;",
      "copilot": "pid dataid 是否有审核记录\n        //如果有审核记录则更新审核记录,\n    }\n}",
      "CodeQwen1.5-7B": " oto.User;"
    }
  },
  {
    "prefix": "package com.myhexin.news.common.dto;\n\n\nimport com.alibaba.fastjson.annotation.JSONField;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * @author xuzekui\n * @date 2021/11/17 20:44\n * @description\n */\n@Data\n@NoArgsConstructor\npublic class NewsTranslateResult {\n\n    private int code;\n    private String note;\n    private Object data;\n\n    public NewsTranslateResult(Integer code, String note, Object data) {\n        this.code = code;\n        this.note = note;\n        this.data = data;\n    }\n\n\n    @Data\n    @AllArgsConstructor\n    public static class DataBean {\n        @JSONField(name = \"trans_result\")\n        private List<TransResult> transResult;\n\n        @JSONField(name = \"result_list\")\n        private List<List<TransResult>> resultList;\n    }\n\n    public static void main(String[] args) {",
    "infill": "NewsTranslateResult newsTranslateResult = new NewsTranslateResult();\n        DataBean dataBean = new DataBean(Collections.singletonList(new TransResult(\"src\", \"dst\")), Collections.singletonList(Collections.singletonList(new TransResult(\"src\", \"dst\"))));\n        newsTranslateResult.setData(dataBean);\n    }\n\n",
    "suffix": "}\n",
    "relevantFile": "<file_path>news-f10-api/src/main/java/com/myhexin/news/dto/translate/ModelTranslateRequestDTO.java\npackage com.myhexin.news.dto.translate;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * 大模型翻译的请求协议\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:53\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ModelTranslateRequestDTO {\n    /**\n     * 目标语言\n     * tai-泰语\n     * pt-葡萄牙语\n     * ar-阿拉伯语\n     */\n    public static final String TARGET_LANG_TAI = \"tai\";\n    public static final String TARGET_LANG_PT = \"pt\";\n    public static final String TARGET_LANG_AR = \"ar\";\n\n    /**\n     * 待翻译内容\n     */\n    private String text;\n\n    private String appId;\n\n    private String domain;\n\n    private String from;\n\n    /**\n     * 目标语言\n     */\n    private String to;\n}\n<file_path>src/main/java/com/myhexin/zixun/application/manager/flash/news/external/feign/dto/TextSummaryInput.java\npackage com.myhexin.zixun.application.manager.flash.news.external.feign.dto;\n\nimport com.alibaba.fastjson.JSON;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\nimport java.io.Serializable;\n\n/**\n * 文本精简接口入参\n *\n * @author lihe2@myhexin.com\n * @date 2024/3/28 15:57\n */\n@Data\n@Accessors(chain = true)\npublic class TextSummaryInput implements Serializable {\n    private static final long serialVersionUID = -7123821614322339842L;\n    /**\n     * input入参\n     */\n    private String input;\n\n    public TextSummaryInput(String text) {\n        this.input = JSON.toJSONString(new TextSummaryInputBean(text));\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class TextSummaryInputBean implements Serializable {\n        private static final long serialVersionUID = 3929973689786768309L;\n        /**\n         * 文本入参\n         */\n        private String text;\n    }\n}\n<file_path>news-f10-api/src/main/java/com/myhexin/news/dto/translate/ModelTranslateResultDTO.java\npackage com.myhexin.news.dto.translate;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * 大模型翻译的结果协议\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:51\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ModelTranslateResultDTO {\n    /**\n     * 原始内容\n     */\n    private String originContent;\n\n    /**\n     * 翻译后的内容\n     */\n    private String translatedContent;\n}\n<file_path>news-f10-api/src/main/java/com/myhexin/news/common/dto/TransResult.java\npackage com.myhexin.news.common.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * @author xuzekui\n * @date 2021/11/26 11:20\n * @description\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class TransResult {\n\n    private String src;\n    private String dst;\n\n}",
    "relevantFileList": [],
    "filePath": "news-f10-api/src/main/java/com/myhexin/news/common/dto/NewsTranslateResult.java",
    "template": "java",
    "multiRes": {
      "hipilot": "String s = JSON.toJSONString(new NewsTranslateResult(1, \"\", new DataBean(Collections.emptyList(), Collections.emptyList())));\n        System.out.println(s);",
      "CodeQwen2.5-7B": "",
      "copilot": "NewsTranslateResult newsTranslateResult = new NewsTranslateResult();\n        DataBean dataBean = new DataBean(Collections.singletonList(new TransResult(\"src\", \"dst\")), Collections.singletonList(Collections.singletonList(new TransResult(\"src\", \"dst\"))));\n        newsTranslateResult.setData(dataBean);\n    }\n\n",
      "CodeQwen1.5-7B": " "
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.app.manager;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolResultDTO;\nimport com.myhexin.community.operating.deploy.common.external.feign.request.AddHotContentRequest;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicAttachEnum;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicColorEnum;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * Manager类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 20:48\n */\n@Component\n@RequiredArgsConstructor\npublic class HotContentOperatingManager {\n    private final HotContentOperatingService hotContentOperatingService;\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param id       内容id\n     * @param type     内容类型\n     * @param creator  创建者\n     * @param page     当前页\n     * @param pageSize 页大小\n     * @param status   状态信息\n     * @return 热点池数据\n     */\n    public HotContentPoolResultDTO getHotContentPool(String id, String type, String creator, Integer page, Integer pageSize, Integer status) {\n        // 创建查询条件\n        HotContentQuery hotContentQuery = HotContentQuery.of()\n                .setId(id)\n                .setType(type)\n                .setCreator(creator)\n                .setSkipNum((page - NumberUtils.INTEGER_ONE) * pageSize)\n                .setPageSize(pageSize)\n                .setStatus(status);\n\n        // 查询热点池数据\n        List<HotContentPoolDTO> hotContentPoolList = hotContentOperatingService.getHotContentPool(hotContentQuery);\n        // 查询总条数\n        Integer total = hotContentOperatingService.getHotContentPoolTotal(hotContentQuery);\n        return HotContentPoolResultDTO.of()\n      ",
    "infill": "hotContentOperatingService.addHotContentToPool(hotContentPoolDTO);\n       ",
    "suffix": " \n        // 2、将上榜内容更新至上榜池\n    }\n\n    private static HotContentPoolDTO assembleHotContentPoolDTO(AddHotContentRequest request) {\n        // 设置基础上榜信息\n        HotContentPoolDTO hotContentPoolDTO = HotContentPoolDTO.of()\n                .setRankId(request.getRankId())\n                .setType(request.getType())\n                .setId(request.getId());\n\n        HotTopicColorEnum hotTopicColorEnum = HotTopicColorEnum.getByLabelType(String.valueOf(request.getLabelType()));\n\n        // 设置标签信息\n        if (hotTopicColorEnum != HotTopicColorEnum.EMPTY) {\n            hotContentPoolDTO.setLabelType(hotTopicColorEnum.getLabelType())\n                    .setLabelName(hotTopicColorEnum.getLabelWord())\n                    .setLabelBackgroundColor(hotTopicColorEnum.getBackgroundColor())\n                    .setLabelWordColor(hotTopicColorEnum.getWordColor());\n        }\n        // 设置内容元素信息\n        boolean isExist = HotTopicAttachEnum.isExist(request.getAttachType());\n        if(isExist){\n            hotContentPoolDTO.setAttachType(request.getAttachType());\n            hotContentPoolDTO.setAttachData(request.getAttachInfo());\n        }\n        return hotContentPoolDTO;\n    }\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/repository/HotContentOperatingRepository.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.repository;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\n\nimport java.util.List;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:08\n */\npublic interface HotContentOperatingRepository {\n\n    /**\n     * 添加热门话题\n     * @param hotContentPoolDTO 热门话题\n     */\n    void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 获取热门话题\n     * @param hotContentQuery 查询条件\n     * @return 热门话题\n     */\n    List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery);\n\n    /**\n     * 获取热门话题总数\n     * @param hotContentQuery 查询条件\n     * @return 热门话题总数\n     */\n    Integer getHotContentPoolTotal(HotContentQuery hotContentQuery);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/HotContentOperatingService.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.service;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\n\nimport java.util.List;\n\n/**\n * 热点池Service\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\npublic interface HotContentOperatingService {\n\n    /**\n     * 添加热点内容至热点池中\n     * @param hotContentPoolDTO 热点数据\n     */\n    void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery);\n\n    /**\n     * 获取热点池数据总数\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    Integer getHotContentPoolTotal(HotContentQuery hotContentQuery);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/dto/hottopic/HotContentPoolDTO.java\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicAttachEnum;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicColorEnum;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicOperatingConstant;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.data.annotation.AccessType;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\n/**\n * 热点数据DTO类\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 20:34\n */\n\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class HotContentPoolDTO {\n\n    /**\n     * 内容id\n     */\n    private String id;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n\n    /**\n     * 标题\n     */\n    private String title;\n\n    /**\n     * 内容描述\n     */\n    private String descripion;\n\n    /**\n     * 标签类型\n     */\n    private String labelType;\n\n    /**\n     * 标签名称\n     */\n    private String labelName;\n\n    /**\n     * 标签的背景颜色\n     */\n    private String labelBackgroundColor;\n\n    /**\n     * 标签的文字颜色\n     */\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/impl/HotContentOperatingServiceImpl.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.service.impl;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.repository.HotContentOperatingRepository;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * 热点内容Service实现\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\n@Service\n@RequiredArgsConstructor\npublic class HotContentOperatingServiceImpl implements HotContentOperatingService {\n\n    private final HotContentOperatingRepository hotContentRepository;\n\n    /**\n     * 添加热点内容至热点池中\n     *\n     * @param hotContentPoolDTO 热点数据\n     */\n    @Override\n    public void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO) {\n        // 保存至数据库\n        hotContentRepository.addHotContentToPool(hotContentPoolDTO);\n    }\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    @Override\n    public List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPool(hotContentQuery);\n    }\n\n    /**\n     * 获取热点池数据总数\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    @Override\n    public Integer getHotContentPoolTotal(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPoolTotal(hotContentQuery);\n    }\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/HotContentOperatingManager.java",
    "template": "java",
    "multiRes": {
      "hipilot": "      .setTotal(total)\n          .setList(hotContentPoolList);",
      "CodeQwen2.5-7B": "          .setHotContentPoolList(hotContentPoolList)",
      "copilot": "hotContentOperatingService.addHotContentToPool(hotContentPoolDTO);\n       ",
      "CodeQwen1.5-7B": "           .setTotal(total)"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.modules.topic.infrastructure.db.repository.mongo;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.interfaces.rest.req.converter.HotContentConvert;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.repository.HotContentOperatingRepository;\nimport com.myhexin.community.operating.deploy.modules.topic.infrastructure.db.model.HotContentPoolDO;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n/**\n * 热点内容\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:09\n */\n@Repository\n@RequiredArgsConstructor\npublic class HotContentOperatingRepositoryImpl implements HotContentOperatingRepository {\n\n    private final MongoTemplate hotContentMongoTemplate;\n    /**\n     * 新增热点内容至热点池\n     * @param hotContentPoolDTO 热点内容\n     */\n    @Override\n    public void addHotContent(HotContentPoolDTO hotContentPoolDTO) {\n        HotContentPoolDO hotContentPoolDO = HotContentConvert.INSTANCE.toHotContentDO(hotContentPoolDTO);\n        hotContentMongoTemplate.save(hotContentPoolDO);\n    }\n\n    /**\n     * 获取热门话题\n     *\n     * @param hotContentQuery 查询条件\n     * @return 热门话题\n     */\n    @Override\n    public List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery) {\n        Q\n        ",
    "infill": " \n        \n      ",
    "suffix": "  return null;\n    }\n\n    /**\n     * 获取热门话题总数\n     *\n     * @param hotContentQuery 查询条件\n     * @return 热门话题总数\n     */\n    @Override\n    public Integer getHotContentPoolTotal(HotContentQuery hotContentQuery) {\n        return null;\n    }\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/req/converter/HotContentConvert.java\npackage com.myhexin.community.operating.deploy.interfaces.rest.req.converter;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.modules.topic.infrastructure.db.model.HotContentPoolDO;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.mapstruct.factory.Mappers;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/6/19 10:08\n */\n@Mapper\npublic interface HotContentConvert {\n    HotContentConvert INSTANCE = Mappers.getMapper(HotContentConvert.class);\n\n    /**\n     * 将热点内容DTO类转化为HotContentDO类\n     * @param dto 热点内容DTO\n     * @return HotContentDO\n     */\n    HotContentPoolDO toHotContentDO(HotContentPoolDTO dto);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/HotContentOperatingService.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.service;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\n\nimport java.util.List;\n\n/**\n * 热点池Service\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\npublic interface HotContentOperatingService {\n\n    /**\n     * 添加热点内容至热点池中\n     * @param hotContentPoolDTO 热点数据\n     */\n    void addHotContent(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery);\n\n    /**\n     * 获取热点池数据总数\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数  \n     */\n    Integer getHotContentPoolTotal(HotContentQuery hotContentQuery);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/repository/HotContentOperatingRepository.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.repository;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\n\nimport java.util.List;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:08\n */\npublic interface HotContentOperatingRepository {\n\n    /**\n     * 添加热门话题\n     * @param hotContentPoolDTO 热门话题\n     */\n    void addHotContent(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 获取热门话题\n     * @param hotContentQuery 查询条件\n     * @return 热门话题\n     */\n    List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery);\n\n    /**\n     * 获取热门话题总数\n     * @param hotContentQuery 查询条件\n     * @return 热门话题总数\n     */\n    Integer getHotContentPoolTotal(HotContentQuery hotContentQuery);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/impl/HotContentOperatingServiceImpl.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.service.impl;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.repository.HotContentOperatingRepository;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * 热点内容Service实现\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\n@Service\n@RequiredArgsConstructor\npublic class HotContentOperatingServiceImpl implements HotContentOperatingService {\n\n    private final HotContentOperatingRepository hotContentRepository;\n\n    /**\n     * 添加热点内容至热点池中\n     *\n     * @param hotContentPoolDTO 热点数据\n     */\n    @Override\n    public void addHotContent(HotContentPoolDTO hotContentPoolDTO) {\n        // 保存至数据库\n        hotContentRepository.addHotContent(hotContentPoolDTO);\n    }\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    @Override\n    public List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPool(hotContentQuery);\n    }\n\n    /**\n     * 获取热点池数据总数\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    @Override\n    public Integer getHotContentPoolTotal(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPoolTotal(hotContentQuery);\n    }\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/infrastructure/db/repository/mongo/HotContentOperatingRepositoryImpl.java",
    "template": "java",
    "multiRes": {
      "hipilot": "hotContentMongoTemplate\n      ",
      "CodeQwen2.5-7B": "  ",
      "copilot": " \n        \n      ",
      "CodeQwen1.5-7B": "return null;"
    }
  },
  {
    "prefix": "package com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts;\n\npublic enum FundMetaType {\n\n    /**\n     * 综合排名\n     */\n    RANKING,\n\n    /**\n     * 潜力排名\n     */\n    PO",
    "infill": "TENTIAL_RANKING,\n\n}\n",
    "suffix": "",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/ifund/ranking/deploy/modules/ranking/domain/service/calpoint/fund/FundPotentialRankingCalPoint.java\npackage com.myhexin.ifund.ranking.deploy.modules.ranking.domain.service.calpoint.fund;\n\nimport com.alibaba.fastjson.JSON;\nimport com.myhexin.ifund.ranking.deploy.common.utils.RankingUtils;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.EtfMetaType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.FundMetaType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.SceneCycle;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.EtfWeightConfig;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.MetaDataType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.Product;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.entity.ConfigData;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.entity.MetaData;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.service.AbstractCalPoint;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Slf4j\n@Component\npublic class FundPotentialRankingCalPoint extends AbstractCalPoint {\n\n\n    @Override\n    public String scene() {\n        return \"FUND\";\n    }\n\n    @Override\n    public MetaDataType targetMetaData() {\n        return MetaDataType.builder()\n                .sceneType(scene())\n                .metaDataType(FundMetaType.POTENTIAL_RANKING.name())\n                .build();\n    }\n\n    @Override\n    public List<MetaDataType> sourceMetaData() {\n\n        return new ArrayList<>();\n    }\n\n    @Override\n    public List<String> sourceConfigData() {\n        return new ArrayList<>();\n    }\n\n\n    @Override\n    public List<MetaData> calData(List<Product> productList, Map<String, Map<String, String>> sourceMetaData, Map<String, ConfigData> configData, SceneCycle sceneCycle) {\n        Map<String, String> marketRanking = sourceMetaData.get(EtfMetaType.MARKETING_RANKING.name());\n\n        Map<String, String> institutionRanking = sourceMetaData.get(EtfMetaType.INSTITUTION_RANKING.name());\n\n        //权重配置\n        String etfWeight = configData.get(\"etfWeight\").getConfigValue();\n        EtfWeightConfig etfWeightConfig = JSON.parseObject(etfWeight, EtfWeightConfig.class);\n<file_path>deploy/src/main/java/com/myhexin/ifund/ranking/deploy/interfaces/job/fund/FundSceneJobHandler.java\npackage com.myhexin.ifund.ranking.deploy.interfaces.job.fund;\n\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.scene.FundScene;\nimport com.xxl.job.core.biz.model.ReturnT;\nimport com.xxl.job.core.handler.IJobHandler;\nimport com.xxl.job.core.handler.annotation.JobHandler;\nimport com.xxl.job.core.log.XxlJobLogger;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\n@JobHandler(\"FundSceneJobHandler\")\n@Component\n@Slf4j\npublic class FundSceneJobHandler extends IJobHandler {\n\n    private final FundScene fundScene;\n\n    public FundSceneJobHandler(FundScene fundScene) {\n        this.fundScene = fundScene;\n    }\n\n\n    @Override\n    public ReturnT<String> execute(String s) {\n        try {\n            XxlJobLogger.log(\"FundSceneJobHandler 开始执行\");\n            deal(s);\n\n        } catch (Exception e) {\n            XxlJobLogger.log(e);\n            XxlJobLogger.log(\"FundSceneJobHandler 执行错误 :{}\", e.getMessage());\n            return FAIL;\n        }\n        return SUCCESS;\n    }\n\n    private void deal(String s) {\n        fundScene.cal();\n    }\n\n}\n<file_path>deploy/src/main/java/com/myhexin/ifund/ranking/deploy/modules/ranking/domain/service/calpoint/fund/FundRankingCalPoint.java\npackage com.myhexin.ifund.ranking.deploy.modules.ranking.domain.service.calpoint.fund;\n\nimport com.alibaba.fastjson.JSON;\nimport com.myhexin.ifund.ranking.deploy.common.utils.RankingUtils;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.EtfMetaType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.FundMetaType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.SceneCycle;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.EtfWeightConfig;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.MetaDataType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.Product;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.entity.ConfigData;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.entity.MetaData;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.service.AbstractCalPoint;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Slf4j\n@Component\npublic class FundRankingCalPoint extends AbstractCalPoint {\n\n\n    @Override\n    public String scene() {\n        return \"FUND\";\n    }\n\n    @Override\n    public MetaDataType targetMetaData() {\n        return MetaDataType.builder()\n                .sceneType(scene())\n                .metaDataType(FundMetaType.RANKING.name())\n                .build();\n    }\n\n    @Override\n    public List<MetaDataType> sourceMetaData() {\n\n        return Arrays.asList(\n                MetaDataType.builder()\n                        .sceneType(scene())\n                        .metaDataType(EtfMetaType.INSTITUTION_RANKING.name())\n                        .build(),\n\n                MetaDataType.builder()\n                        .sceneType(scene())\n                        .metaDataType(EtfMetaType.COOPERATE.name())\n                        .build(),\n\n                MetaDataType.builder()\n                        .sceneType(scene())\n                        .metaDataType(EtfMetaType.MARKETING_RANKING.name())\n                        .build());\n    }\n\n    @Override\n<file_path>api/src/main/java/com/myhexin/ifund/ranking/api/dto/request/WosCreateReq.java\npackage com.myhexin.ifund.ranking.api.dto.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.Map;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class WosCreateReq {\n\n    private String processId;\n\n    private String priority;\n\n    private String title;\n\n    private String creatorEmail;\n\n    private Map<String,String> formData;\n\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/ifund/ranking/deploy/modules/ranking/domain/consts/FundMetaType.java",
    "template": "java",
    "multiRes": {
      "hipilot": "TENTIAL_RANKING,\n\n\n    /**\n     * 三年平均收益排名\n     */\n    AVERAGE_RETURN_RANKING,\n}",
      "CodeQwen2.5-7B": "TENTIAL_RANKING,",
      "copilot": "TENTIAL_RANKING,\n\n}\n",
      "CodeQwen1.5-7B": " TENTIAL,"
    }
  },
  {
    "prefix": "package com.hexin.android.biz_selfstock.selfstockpage.broadindexview.dpkj;\n\nimport android.content.Context;\nimport android.graphics.Paint;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.os.Message;\nimport android.text.TextUtils;\nimport android.util.AttributeSet;\nimport android.util.TypedValue;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.BaseAdapter;\nimport android.widget.LinearLayout;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\nimport com.hexin.android.base_common_utils.RequestUtils;\nimport com.hexin.android.biz_selfstock.selfstockpage.filterview.CategoryDataProcessor;\nimport com.hexin.android.biz_selfstock.selfstockpage.filterview.model.CategoryConfig;\nimport com.hexin.android.biz_selfstock.selfstockpage.broadindexview.SelfCodeDpVoerLayUtil;\nimport com.hexin.android.biz_selfstock.selfstockpage.broadindexview.SelfDPInfoDataHolder;\nimport com.hexin.android.biz_selfstock.selfstockpage.broadindexview.UserGuzhiDataManager;\nimport com.hexin.android.biz_selfstock.selfstockpage.broadindexview.dpkj.listener.GuzhiCheckCurveChangeListener;\nimport com.hexin.android.biz_selfstock.selfstocknews.SelfStockTab;\nimport com.hexin.android.biz_hangqing.customview.DigitalTextView;\nimport com.hexin.android.biz_hangqing.gmg.gangmeigu.UsStockIndexType;\nimport com.hexin.android.base_cbas_api.CBASConstants;\nimport com.hexin.android.base_abtest_api.HeXinUserControlKeys;\nimport com.hexin.uicomponents.theme.OnThemeChangeListener;\nimport com.hexin.android.base_theme.theme.ThemeManager;\nimport com.hexin.android.ui.Component;\nimport com.hexin.middleware.NetWorkClinet;\nimport com.hexin.app.event.param.EQParam;\nimport com.hexin.android.biz_frame.eqframe.event.struct.EQBasicStockInfo;\nimport com.hexin.android.base_common_util.constant.ProtocalDef;\nimport com.hexin.middleware.QueueManagement;\nimport com.hexin.middleware.data.StuffBaseStruct;\nimport com.hexin.middleware.data.mobile.StuffTableStruct;\nimport com.hexin.middleware.data.realdata.model.RTDataSubscriber;\nimport com.hexin.middleware.session.RequestEmitter;\nimport com.hexin.plat.android.R;\nimport com.hexin.android.base_common_utils.HexinCBASUtil;\nimport com.hexin.android.base_common_utils.HexinUtils;\nimport com.hexin.android.base_common_util.log.Log;\nimport com.hexin.android.base_common_util.constant.EQConstants;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\n/**\n * Created by xujiajian on 18-1-15.\n */\n\npublic class SelfStockGuzhiTab extends LinearLayout implements NetWorkClinet, Component, OnThemeChangeListener {\n    private static final String TAG = \"SelfStockGuzhiTab\";\n    public static final int[] DATAIDS_DP_PRICE = SelfCodeDpVoerLayUtil.DATAIDS_DP_PRICE;\n    public static int initIndex = ",
    "infill": "0;\n    private static final int WHAT",
    "suffix": "_HANDLE_DATA = 1;\n    private static final int INDEX_STOCKCODE = 4;\n    private static final int INDEX_STOCKNAME = 5;\n    private static final int FADINGEDGE_LENGTH = 100;\n    private ListView mListView        = null;\n    private GuzhiListAdapter mAdapter = null;\n    private int mCurSelectPosition = 0;\n    private EQBasicStockInfo mCurrentStockInfo = null;\n    private GuzhiCheckCurveChangeListener guzhiCheckCurveChangeListener = null;\n    private boolean isNeedRefresh = true;\n    private boolean isNeedSetSelection = true;\n    public SelfStockGuzhiTab(Context context) {\n        super(context);\n    }\n\n    public SelfStockGuzhiTab(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    public SelfStockGuzhiTab(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    private void init() {\n        mListView = (ListView) findViewById(R.id.lv_guzhilist);\n        mListView.setVerticalFadingEdgeEnabled(true);\n        mListView.setFadingEdgeLength(FADINGEDGE_LENGTH);\n        mAdapter = new GuzhiListAdapter();\n        mListView.setAdapter(mAdapter);\n    }\n\n    private void initThemes() {\n        mListView.setDividerHeight(getResources().getDimensionPixelOffset(R.dimen.dp_6));\n        mListView.setDivider(getResources().getDrawable(R.color.hq_global_bg));\n    }\n\n    private Handler mHandler = new Handler(Looper.getMainLooper()) {\n        @Override\n        public void handleMessage(Message msg) {\n            if (msg != null) {\n                switch (msg.what) {\n                    case WHAT_HANDLE_DATA:\n                        if (mAdapter != null && msg.obj instanceof ArrayList<?>) {\n                            isNeedRefresh = true;\n                            mAdapter.setData((ArrayList<SelfDPInfoDataHolder>) msg.obj);\n                        }\n                        break;\n                }\n            }\n        }\n    };\n\n    @Override\n    public void receive(StuffBaseStruct struct) {\n        Log.i(TAG, \"receive == \" + struct);\n        // 解析表格数据\n        final SelfStockTab.DPDataModel dataModel = parseData(struct, SelfStockTab.DATAIDS_DP_PRICE);\n        if (dataModel == null || dataModel.getSize() <= 0) {\n            return;\n        }\n        setDataHolderToAdatper(dataModel);\n    }\n\n    @Override\n    public void request() {\n        // frameid 保证同发分时请求的frameid一致，保证指数条能收到实时数据\n        RequestUtils.addSubscribeRequestToBuff(ProtocalDef.FRAMEID_ZXG, ProtocalDef.PAGEID_GZ, QueueManagement.getInstanceId(this),\n                buildRequestParams(), DATAIDS_DP_PRICE, null, RTDataSubscriber.RTReqInfo.TYPE_TABLE);\n        RequestEmitter.build().background(true).requestFlush();\n    }\n\n    @Override\n    public void onPageFinishInflate() {\n        init();\n        initThemes();\n    }\n\n    @Override\n    public int onNotifyProcess(String url) {\n        return 0;\n    }\n\n    @Override\n    public void onBackground() {\n        isNeedSetSelection = false;\n        RequestEmitter.build().removeRequestStructBuff(ProtocalDef.FRAMEID_ZXG,ProtocalDef.PAGEID_GZ,\n                QueueManagement.getInstanceId(this));\n        QueueManagement.unSubscribe(QueueManagement.getInstanceId(this));\n    }\n\n    @Override\n    public void onForeground() {\n        isNeedRefresh = true;\n        isNeedSetSelection = true;\n        initCurrentSelectedPosition();\n        ThemeManager.addThemeChangeListener(this);\n    }\n\n    @Override\n    public void onRemove() {\n        QueueManagement.remove(this);\n        if (mHandler != null) {\n            mHandler.removeCallbacksAndMessages(null);\n        }\n        if (guzhiCheckCurveChangeListener != null) {\n            guzhiCheckCurveChangeListener = null;\n        }\n        ThemeManager.removeThemeChangeListener(this);\n    }\n\n    @Override\n    public void onActivity() {\n\n    }\n\n    @Override\n    public void lock() {\n\n    }\n\n    @Override\n    public void unlock() {\n\n    }\n\n    @Override\n    public void parseRuntimeParam(EQParam param) {\n\n    }\n\n    public void setGuzhiCheckListener(GuzhiCheckCurveChangeListener guzhiCheckListener) {\n        this.guzhiCheckCurveChangeListener = guzhiCheckListener;\n    }\n\n    private void initCurrentSelectedPosition() {\n//        mCurSelectPosition = 0;\n//        CategoryConfig config = CategoryDataProcessor.getInstance().getSelectCategoryConfig();\n//        //如果有选中市场，则使用市场对应的股指，如果没有选中市场，则使用用户默认的选中股指\n//        mCurrentStockInfo = (config == null || config.useUserGuZhi()) ?\n//                UserGuzhiDataManager.getInstance().loadSelectedGuzhiDataFromLocalFile() : config.getSelectGuZhiInfo();\n//        if (mCurrentStockInfo == null) {\n//            mCurSelectPosition = 0;\n//            return;\n//        }\n//        ArrayList<EQBasicStockInfo> list = CategoryDataProcessor.getInstance().getSelectMarketGuZhi();\n//        list = list == null ? new ArrayList<>() : list;\n//        if (list.size() <= 0) {\n//            mCurSelectPosition = 0;\n//        }\n//        String stockCode = mCurrentStockInfo.mStockCode;\n//        String market = mCurrentStockInfo.mMarket;\n//        for (int i = 0; i < list.size(); i++) {\n//            EQBasicStockInfo stockInfo = list.get(i);\n//            if (TextUtils.equals(stockCode, stockInfo.mStockCode) && TextUtils.equals(market, stockInfo.mMarket)) {\n//                mCurSelectPosition = i;\n//                break;\n//            }\n//        }\n        \n        \n        \n        String cbasObj = String.format(CBASConstants.CBAS_ZIXUAN_DPKJ_ENTRY, mCurSelectPosition + 1, stockCode);\n        HexinCBASUtil.sendStandardFunctionCbasByClick(cbasObj, false);\n\n    }\n\n    private String buildRequestParams() {\n        ArrayList<EQBasicStockInfo> list = CategoryDataProcessor.getInstance().getSelectMarketGuZhi();\n        if (list != null && list.size() > 0) {\n            int size = list.size();\n            EQBasicStockInfo stockInfo = null;\n            StringBuilder stocks = new StringBuilder();\n            StringBuilder markets = new StringBuilder();\n            for (int i = 0; i < size; i++) {\n                stockInfo = list.get(i);\n                stocks.append(stockInfo.mStockCode).append(EQConstants.REQUEST_SELFSTOCKLIST_SEPARATOR);\n                markets.append(stockInfo.mMarket).append(EQConstants.REQUEST_SELFSTOCKLIST_SEPARATOR);\n            }\n            if (stocks.length() > 0 && markets.length() > 0) {\n                return String.format(SelfStockTab.REQUEST_TEXT, stocks.toString(), markets.toString(), String.valueOf(size));\n            }\n        }\n        return EQConstants.INVALID_STR_VALUE;\n    }\n\n    private void setDataHolderToAdatper(SelfStockTab.DPDataModel dataModel) {\n        if (dataModel == null || dataModel.getSize() <= 0) {\n            return;\n        }\n        final List<SelfDPInfoDataHolder> originList = obtainOriginDataList();\n        if (originList != null) {\n            for (SelfDPInfoDataHolder dataHolder: originList) {\n                fillDataToDataHolder(dataModel, dataHolder);\n            }\n            if (mHandler != null) {\n                mHandler.sendMessage(mHandler.obtainMessage(WHAT_HANDLE_DATA, originList));\n            }\n        }\n    }\n\n    private void fillDataToDataHolder(SelfStockTab.DPDataModel dataModel, SelfDPInfoDataHolder dataHolder) {\n        if (dataModel != null && dataHolder != null && dataHolder.stockInfo != null &&\n                !TextUtils.isEmpty(dataHolder.stockInfo.mStockCode)) {\n            String currentCode = dataHolder.stockInfo.mStockCode;\n            int valuesCount = dataModel.getSize();\n            int dataCount = SelfStockTab.DATAIDS_DP_PRICE.length;\n            String[] codes = dataModel.getvalues(ProtocalDef.HANGQING_STOCK_CODE_4);\n            int currentCodeColIndex = findCurrentStockCodeIndex(codes, currentCode);\n            if (currentCodeColIndex >= 0 && valuesCount == dataCount) {\n                for (int i = 0; i < dataCount; i++) {\n                    int dataId = SelfStockTab.DATAIDS_DP_PRICE[i];\n                    String[] values = dataM",
    "relevantFile": "<file_path>doc/ShellWork/src/main/java/com/hexin/android/biz_selfstock/selfstockpage/filterview/model/CategoryConfig.java\npackage com.hexin.android.biz_selfstock.selfstockpage.filterview.model;\n\nimport android.text.TextUtils;\nimport com.hexin.plat.android.R;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\n\nimport com.hexin.android.biz_selfstock.selfstockugcdataservice.selfcodeugc.selfstock.SelfCodeDataProcessor;\nimport com.hexin.android.biz_selfstock.selfstockugcdataservice_api.SelfCodeData;\nimport com.hexin.android.biz_frame.eqframe.event.struct.EQBasicStockInfo;\nimport com.hexin.android.biz_selfstock.table_view.hot.HotStockClient;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author zhuchengan@myhexin.com\n * @brief 自选股股票分类数据解析\n * @date 2022-11-16\n */\npublic class CategoryConfig {\n\n    public static final String CATEGORY_VISIBLE = \"1\";\n\n    private static final String CATEGORY_INVISIBLE = \"2\";\n\n    public static final String CODE_ALL = \"all\";\n\n    public static final String NAME_ALL = \"全部\";\n\n    /**\n     * 基金tab 的 code\n     */\n    public static final String CODE_FUND = \"JJ\";\n\n    /**\n     * 自选股分类单个数据模型\n     */\n    @NonNull\n    private CategoryDataModel mDataModel;\n    @Nullable\n    private List<EQBasicStockInfo> mSupportStockList;\n    @Nullable\n    private List<EQBasicStockInfo> mSupportGuZhiList;\n    /**\n     * 当前选中的股指信息\n     */\n    @Nullable\n    private EQBasicStockInfo mSelectGuZhiInfo;\n\n    public CategoryConfig(@NonNull CategoryDataModel dataModel) {\n        this.mDataModel = dataModel;\n    }\n\n    @Nullable\n    public String getConfigCode() {\n        return mDataModel.getCode();\n    }",
    "relevantFileList": [],
    "filePath": "biz_selfstock/selfstockpage/src/main/java/com/hexin/android/biz_selfstock/selfstockpage/broadindexview/dpkj/SelfStockGuzhiTab.java",
    "template": "java",
    "multiRes": {
      "hipilot": "0;",
      "CodeQwen2.5-7B": "0;",
      "copilot": "0;\n    private static final int WHAT",
      "CodeQwen1.5-7B": " 0;"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.modules.aicomment.domain.consts;\n\nimport java.time.Duration;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/11\n */\npublic final class AiCommentConstant {\n    /**\n     * 默认评论最小条数\n     */\n    public static final Integer DEFAULT_MIN_COMMENT_NUM = 0;\n\n    /**\n     * 默认评论最大条数\n     */\n    public static final Integer DEFAULT_MAX_COMMENT_NUM = 10;\n\n    /**\n     * 最长文本评论最大条数\n     */\n    public static final Integer LONG_MAX_COMMENT_NUM = 5;\n\n    /**\n     * long\n     */\n    public static final String LONG_KEY = \"long\";\n\n    /**\n     * mid\n     */\n    public static final String MID_KEY = \"mid\";\n\n    /**\n     * short\n     */\n    public static final String SHORT_KEY = \"short\";\n\n    /**\n     * 内容描述 机会物品\n     */\n    public static final String JHWT_KEY = \"jhwp\";\n\n    /**\n     * 内容描述  质量模型\n     */\n    public static final String ZLMX_KEY = \"zlmx\";\n\n    /**\n     * ai评论锁Key\n     */\n    public static final String AI_COMMENT_FILLING_LOCK_TEMP = \"ai_comment_filling_lock_",
    "infill": "ai评论锁过期时间\n     *",
    "suffix": "/\n    public static final Duration AI_COMMENT_FILLING_LOCK_TEMP_EXPIRE = Duration.ofHours(2);\n\n    /**\n     * 默认匹配内容时间\n     */\n    public static final Integer DEFAULT_MATCH_DURATION = 2 * 3600;\n\n    private AiCommentConstant() {\n        throw new IllegalStateException(\"Ai Comment Constant class\");\n    }\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/aicomment/domain/service/impl/AiCommentServiceImpl.java\npackage com.myhexin.community.operating.deploy.modules.aicomment.domain.service.impl;\n\nimport cn.hutool.core.text.CharSequenceUtil;\nimport com.myhexin.community.operating.deploy.common.consts.CommonConstant;\nimport com.myhexin.community.operating.deploy.common.external.feign.ContentPoolClient;\nimport com.myhexin.community.operating.deploy.common.external.feign.HiThinkClient;\nimport com.myhexin.community.operating.deploy.common.external.feign.dto.contentpool.ContentDTO;\nimport com.myhexin.community.operating.deploy.common.external.feign.request.AiCommentRequest;\nimport com.myhexin.community.operating.deploy.common.external.feign.response.AiCommentResponse;\nimport com.myhexin.community.operating.deploy.common.util.ContentUtil;\nimport com.myhexin.community.operating.deploy.interfaces.rest.vo.BaseResponseVO;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.consts.AiCommentConstant;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.dto.BizAiCommentDTO;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.service.AiCommentService;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/06\n */\n@Service\n@Slf4j\n@RequiredArgsConstructor\npublic class AiCommentServiceImpl implements AiCommentService {\n\n    private final ContentPoolClient contentPoolClient;\n\n    private final HiThinkClient hiThinkClient;\n\n    private final StringRedisTemplate communityCacheZeroRedisTemplate;\n\n    /**\n     * 获取业务内容需要的AI评论\n     *\n     * @param bizAiCommentDTO 获取ai评论的条件\n     * @return {@link List}<{@link String}>\n     */\n    @Override\n    public List<String> getBizContentAiCommentList(BizAiCommentDTO bizAiCommentDTO) {\n        if (Objects.isNull(bizAiCommentDTO)) {\n            return Collections.emptyList();\n        }\n\n        String contentDetail = bizAiCommentDTO.getContent();\n        if (CharSequenceUtil.isEmpty(contentDetail)) {\n            contentDetail = Optional.ofNullable(getBizContentDetail(bizAiCommentDTO.getBizType(),\n                    bizAiCommentDTO.getBizId())).map(ContentDTO::getContent).orElse(\"\");\n        }\n        String text = ContentUtil.handleAiRewriteContent(contentDetail);\n        if (CharSequenceUtil.isEmpty(text)) {\n            log.warn(\"getBizContentAiCommentList detail empty;dto:{}\", bizAiCommentDTO);\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/common/external/feign/HiThinkClient.java\npackage com.myhexin.community.operating.deploy.common.external.feign;\n\nimport com.myhexin.community.operating.deploy.common.external.feign.fallback.HiThinkClientFallbackFactory;\nimport com.myhexin.community.operating.deploy.common.external.feign.request.AiCommentRequest;\nimport com.myhexin.community.operating.deploy.common.external.feign.response.AiCommentResponse;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\nimport java.util.List;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/06\n */\n@FeignClient(name = \"hiThinkClient\", url = \"${biz.feign.url.ai-comment}\", fallbackFactory = HiThinkClientFallbackFactory.class)\npublic interface HiThinkClient {\n\n    /**\n     * 生成AI评论\n     *\n     * @param request 请求参数\n     * @return {@link List}<{@link String}>\n     */\n    @PostMapping(\"/nlp-community-comment/bot-comment\")\n    AiCommentResponse postData(@RequestBody AiCommentRequest request);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/aicomment/domain/service/AiCommentService.java\npackage com.myhexin.community.operating.deploy.modules.aicomment.domain.service;\n\nimport com.myhexin.community.operating.deploy.common.external.feign.dto.contentpool.ContentDTO;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.dto.BizAiCommentDTO;\n\nimport java.util.List;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/06\n */\npublic interface AiCommentService {\n\n    /**\n     * 获取业务内容需要的AI评论\n     *\n     * @param bizAiCommentDTO 获取ai评论的条件\n     * @return {@link List}<{@link String}>\n     */\n    List<String> getBizContentAiCommentList(BizAiCommentDTO bizAiCommentDTO);\n\n    /**\n     * 获取内容具体详情\n     *\n     * @param bizType 业务内容类型\n     * @param bizId   业务内容id\n     * @return {@link String}\n     */\n    ContentDTO getBizContentDetail(Integer bizType, Long bizId);\n\n    /**\n     * 检查内容是否被锁定\n     *\n     * @param bizId   业务id\n     * @param bizType 业务类型\n     * @return boolean true=存在锁状态；false=不存在锁状态\n     */\n    boolean checkContentAiCommentLocked(Long bizId, Integer bizType);\n\n    /**\n     * 设置内容锁定状态\n     * @param bizId 业务id\n     * @param bizType 业务类型\n     */\n    void setAiCommentLock(Long bizId, Integer bizType);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/aicomment/domain/consts/AiCommentProperties.java\npackage com.myhexin.community.operating.deploy.modules.aicomment.domain.consts;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.cloud.context.config.annotation.RefreshScope;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/11\n */\n@RefreshScope\n@ConfigurationProperties(prefix = \"biz.ai-comment\")\n@Component\n@Data\npublic class AiCommentProperties {\n    /**\n     * 内容有效匹配时间段\n     */\n    private Integer contentMatchDuration = AiCommentConstant.DEFAULT_MATCH_DURATION;\n\n    /**\n     * 支持匹配的主帖类型 长文，短文，帖子\n     */\n    private List<Integer> contentMatchType = Arrays.asList(10, 11, 24);\n\n    /**\n     * 高质量模型阈值\n     */\n    private Double highQualityThreshold;\n\n    /**\n     * 高质量模型字数控制\n     */\n    private Integer highQualityWordCount;\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/modules/aicomment/domain/consts/AiCommentConstant.java",
    "template": "java",
    "multiRes": {
      "hipilot": "temp:%s:%s\";\n\n    /**\n     * ai评论锁Key\n     *",
      "CodeQwen2.5-7B": "temp_%s\";",
      "copilot": "ai评论锁过期时间\n     *",
      "CodeQwen1.5-7B": "%s\";"
    }
  },
  {
    "prefix": "package com.myhexin.devops.qa.qago.deploy.app.manager.function.impl;\n\n\nimport cn.hutool.core.util.ObjectUtil;\nimport com.myhexin.devops.qa.qago.deploy.app.manager.function.FunctionExecuteAsyncTaskManager;\nimport com.myhexin.devops.qa.qago.deploy.common.annotation.Manager;\nimport com.myhexin.devops.qa.qago.deploy.common.enums.common.IsValidEnum;\nimport com.myhexin.devops.qa.qago.deploy.common.enums.execution.ExecutionResultV2Enum;\nimport com.myhexin.devops.qa.qago.deploy.common.exception.BizException;\nimport com.myhexin.devops.qa.qago.deploy.common.exception.errorcode.BizErrorCode;\nimport com.myhexin.devops.qa.qago.deploy.common.external.feign.cmp.dto.CaseStepAndCheckDTO;\nimport com.myhexin.devops.qa.qago.deploy.common.external.feign.cmp.dto.CheckDTO;\nimport com.myhexin.devops.qa.qago.deploy.common.external.feign.cmp.dto.StepDTO;\nimport com.myhexin.devops.qa.qago.deploy.common.external.feign.cmp.manager.CmpManager;\nimport com.myhexin.devops.qa.qago.deploy.common.util.uuid.UuidUtils;\nimport com.myhexin.devops.qa.qago.deploy.modules.function.domain.entity.FunctionExecuteRecordEntity;\nimport com.myhexin.devops.qa.qago.deploy.modules.function.domain.entity.FunctionExecuteTaskEntity;\nimport com.myhexin.devops.qa.qago.deploy.modules.function.domain.service.FunctionExecuteRecordService;\nimport com.myhexin.devops.qa.qago.deploy.modules.function.domain.service.FunctionExecuteTaskService;\nimport com.myhexin.devops.qa.qago.deploy.modules.function.infrastructure.db.converter.FunctionExecuteRecordConverter;\nimport com.myhexin.devops.qa.qago.deploy.modules.qacase.domain.entity.CaseEntity;\nimport com.myhexin.devops.qa.qago.deploy.modules.qacase.domain.service.CaseService;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.scheduling.annotation.EnableAsync;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.time.Duration;\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@EnableAsync\n@Slf4j\n@Manager\n@RequiredArgsConstructor\npublic class FunctionExecuteAsyncTaskManagerImpl implements FunctionExecuteAsyncTaskManager {\n\n    private final CaseService caseService;\n    private final CmpManager cmpManager;\n    private final FunctionExecuteRecordService recordService;\n    private final FunctionExecuteTaskService taskService;\n\n\n    @Override\n    @Async(\"AsyncTaskExecutor\")\n    public void initExecuteRecordWithBatch(Long fetId, Integer executionResult) {\n        try {\n            log.info(\"开始异步处理手工执行记录表的初始化-{}\", Thread.currentThread().getName());\n            // 根据fetId查询出这个任务信息\n            FunctionExecuteTaskEntity aTask = taskService.getOne(new FunctionExecuteTaskEntity().setFetId(fetId));\n            if (ObjectUtil.isEmpty(aTask)) {\n                throw new BizException(BizErrorCode.FUNCTION_TASK_UNIQUE_ERROR);\n            }\n            // 这个任务规划执行集合查询出这个任务下规划的全部用例\n            List<CaseEntity> cases = caseService.selectAllByTsIds(aTask.buildTsIdsToLong());\n            Map<Long, Long> caseAndVersionRelation = cases.stream().collect(Collectors.toMap(CaseEntity::getCaseCode, CaseEntity::getCaseVersion));\n            // 根据fetId查询出这个任务下规划的全部集合的用例信息\n            Map<Long, CaseStepAndCheckDTO> caseStepAndChecks = cmpManager.getCaseSnapshots(caseAndVersionRelation);\n            // 根据全部用例信息,构建批量执行的数据,构建实际要插入数据表的信息\n            List<FunctionExecuteRecordEntity> insertOrUpdateLists = new ArrayList<>();\n\n            String executor = aTask.getExecutor();\n            LocalDateTime now = LocalDateTime.now();\n\n            for (CaseEntity aCase : cases) {\n                if (caseStepAndChecks.containsKey(aCase.getCaseCode())) {\n                    CaseStepAndCheckDTO caseStepAndCheck = caseStepAndChecks.get(aCase.getCaseCode());\n                    for (StepDTO step : caseStepAndCheck.getStep()) {\n                        for (CheckDTO check : step.getCheck()) {\n                            FunctionExecuteRecordEntity record = new FunctionExecuteRecordEntity()\n                                    .setFerId(UuidUtils.getUid(FunctionExecuteRecordEntity.class))\n                                    .setFetId(fetId)\n                                    .setTsId(aCase.getTsId())\n                                    .setTcId(aCase.getTcId())\n                                    .setCaseCode(aCase.getCaseCode())\n                                    .setStepId(Long.parseLong(step.getStepId()))\n                                    .setCheckId(Long.parseLong(check.getCheckId()))\n                                    .setExecutor(executor)\n                                    .setExecutionResult(ExecutionResultV2Enum.NOT_START.getCode())\n                                    .setStartTime(now)\n                                    .setEndTime(LocalDateTime.now())\n                                    .setDelay(null)\n                                    .setCost(Duration.between(now, LocalDateTime.now()).toMillis())\n                                    .setIsValid(IsValidEnum.VALID.getCode())\n                                    .setCreator(executor)\n                                    .setModificator(executor)\n                                    .setCtime(now)\n                                    .setMtime(LocalDateTime.now());\n                            record.initDescription();\n            ",
    "infill": "try {\n            log.info(\"开始异步处理手工执行记录表的删除-{}\", Thread.currentThread().getName());\n            recordService.deleteByFetId(fetId);\n        } catch (Exception e) {\n            StringWriter sw = new StringWriter();\n            PrintWriter pw = new PrintWriter(sw);\n            e.printStackTrace(pw);\n            String stackTrace = sw.toString();\n            log.error(\"deleteExecuteRecordWithBatch-处理异常-{}\", stackTrace);\n        }\n    }\n\n",
    "suffix": "\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/devops/qa/qago/deploy/app/manager/function/FunctionCollectionsManager.java\n\nimport java.util.List;\n\npublic interface FunctionCollectionsManager {\n\n    /**\n     * 获取功能对象列表\n     *\n     * @param query GetFunctionCollectionListDTO\n     * @return List<FunctionCollectionsDTO>\n     */\n    List<FunctionCollectionsDTO> getList(GetFunctionCollectionListDTO query);\n\n    /**\n     * 解析tag\n     * @param tagStr\n     * @return\n     */\n    String transTag(String tagStr);\n\n    /**\n     * 删除功能对象 支持单个或者批量\n     *\n     * @param dto DelectFunctionCollectionDTO\n     * @return Boolean\n     */\n    Boolean delFunctionCollection(DelectFunctionCollectionDTO dto);\n\n    /**\n     * 插入一个功能对象\n     *\n     * @param dto InsertFunctionCollectionDTO\n     * @return Boolean\n     */\n    Boolean insert(InsertFunctionCollectionDTO dto);\n\n    /**\n     * 更新一个功能对象\n     *\n     * @param dto\n     * @return\n     */\n    Boolean update(UpdateFunctionCollectionDTO dto);\n\n    /**\n     * 根据fcId查询一个功能对象\n     *\n     * @param fcId\n     * @return\n     */\n    FunctionCollectionsDTO getOne(Long fcId);\n\n    List<FunctionCollectionsDTO> getListBySpId(Long spId);\n\n    List<Long> getfcIdsBySpId(Long spId);\n\n    List<Long> getTsIdByFcId(Long fcId);\n\n    void copyAllBySpId(List<Long> spId, List<Long> preSpId);\n}\n<file_path>deploy/src/main/java/com/myhexin/devops/qa/qago/deploy/app/manager/apis/ApiExecuteAsyncTaskManager.java\npackage com.myhexin.devops.qa.qago.deploy.app.manager.apis;\n\nimport com.myhexin.devops.qa.qago.deploy.app.dto.apis.StartApiDTO;\n\nimport java.util.List;\n\npublic interface ApiExecuteAsyncTaskManager {\n\n    void initExecutionRecordAndExecuteByAT3(List<StartApiDTO> perData, String programName, String programVersion, String executor, Integer nextExecuteTime);\n}\n<file_path>deploy/src/main/java/com/myhexin/devops/qa/qago/deploy/app/manager/function/FunctionExecuteAsyncTaskManager.java\npackage com.myhexin.devops.qa.qago.deploy.app.manager.function;\n\npublic interface FunctionExecuteAsyncTaskManager {\n\n    void initExecuteRecordWithBatch(Long fetId, Integer executionResult);\n    \n    void deleteExecuteRecordWithBatch(Long fetId);\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/devops/qa/qago/deploy/app/manager/function/impl/FunctionExecuteAsyncTaskManagerImpl.java",
    "template": "java",
    "multiRes": {
      "hipilot": "insertOrUpdateLists.add(record);\n                        }\n                    }\n                }\n            }\n            recordService.saveBatch(insertOrUpdateLists);\n        } catch (Exception e) {",
      "CodeQwen2.5-7B": "                insertOrUpdateLists.add(record);",
      "copilot": "try {\n            log.info(\"开始异步处理手工执行记录表的删除-{}\", Thread.currentThread().getName());\n            recordService.deleteByFetId(fetId);\n        } catch (Exception e) {\n            StringWriter sw = new StringWriter();\n            PrintWriter pw = new PrintWriter(sw);\n            e.printStackTrace(pw);\n            String stackTrace = sw.toString();\n            log.error(\"deleteExecuteRecordWithBatch-处理异常-{}\", stackTrace);\n        }\n    }\n\n",
      "CodeQwen1.5-7B": "                 insertOrUpdateLists.add(record);"
    }
  },
  {
    "prefix": "package com.myhexin.sre.change.event.deploy.modules.plane.domain.aggregates;\n\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.entity.ChangeExeScene;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.valueobjects.*;\nimport lombok.Data;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n/**\n * 变更执行计划单\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/22\n */\n@Data\npublic class ChangeExePlanOrder {\n    /**\n     * 变更执行计划单ID\n     */\n    private Long planId;\n    /**\n     * 变更执行计划单创建人\n     */\n    private String creator;\n    /**\n     * 变更执行开始时间\n     */\n    private LocalDateTime startTime;\n    /**\n     * 变更执行计划单执行人\n     */\n    private String executor;\n    /**\n     * 变更执行完成时间\n     */\n    private LocalDateTime finishTime;\n    /**\n     * 变更原因\n     */\n    private String reason;\n    /**\n     * 变更环境\n     */\n    private String env;\n    /**\n     * 变更源变更工单/记录唯一ID\n     */\n    private String bizOrderId;\n    /**\n     * 变更执行场景\n     */\n    private ChangeExeScene scene;\n    /**\n     * 变更执行主体\n     */\n    private List<ExePlanInstance> instances;\n    /**\n     * 变更执行详情\n     */\n    private List<ExePlanDetailItem> detailItems;\n    /**\n     * 变更执行部署\n     */\n    private List<ExePlanDeployment> deployments;\n    /**\n     * 变更执行部门\n     */\n    private ExePlanDepartment",
    "infill": " department;\n    /**\n     * 变更执行状态\n     *",
    "suffix": "/\n    private ExePlanStatus status;\n    \n    \n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/enums/ChangeSceneGenerationEnum.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.enums;\n\n/**\n * 变更场景代际\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/28\n */\npublic enum ChangeSceneGenerationEnum {\n    /**\n     * 文本\n     */\n    G0(\"G0\"),\n    /**\n     * json\n     */\n    G1(\"G1\");\n\n    private final String name;\n\n    private ChangeSceneGenerationEnum(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/query/ChangePlanRequest.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Size;\n\n\n/**\n * 变更执行单请求\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n\n@Data\n@EqualsAndHashCode(callSuper = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangePlanRequest extends ChangeBaseRequest{\n    @Size(max = 256)\n    private String reason;\n    @NotNull(message = \"变更发起人不能为空\")\n    private String creator;\n    @Size(max = 512)\n    private String bizUrl;\n    @NotEmpty(message = \"变更主体实例不能为空\")\n    private ChangeInstance[] instances;\n    private ChangeDeployment[] deployments;\n    @NotNull(message = \"变更所属组织信息不能为空\")\n    private ChangeDepartment department;\n    private String changeDetailJson;\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/query/ChangePlanStartRequest.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport javax.validation.constraints.NotNull;\n\n\n/**\n * 变更执行单请求\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n\n@Data\n@EqualsAndHashCode(callSuper = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangePlanStartRequest extends ChangePlanRequest {\n    /**\n     * 变更开始时间\n     */\n    private String startTime;\n    /**\n     * 变更执行人\n     */\n    @NotNull(message = \"变更执行人不能为空\")\n    private String executor;\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/valueobjects/ExePlanInstance.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.valueobjects;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * 变更计划关联变更主体\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n@Data\npublic class ExePlanInstance {\n    /**\n     * 主体名\n     */\n    private String name;\n    /**\n     * 主体类型\n     */\n    private String type;\n    /**\n     * 部署名称列表\n     */\n    private List<String> deploymentName;\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/aggregates/ChangeExePlanOrder.java",
    "template": "java",
    "multiRes": {
      "hipilot": "department;",
      "CodeQwen2.5-7B": " department;",
      "copilot": " department;\n    /**\n     * 变更执行状态\n     *",
      "CodeQwen1.5-7B": " department department;"
    }
  },
  {
    "prefix": "public class Main {\n    public static void main(String[] args) {\n        //TIP Press <shortcut actionId=\"ShowIntentionActions\"/> with your caret at the highlighted text\n        // to see how IntelliJ IDEA suggests fixing it.\n        System.out.print(\"Hello and welcome!\");\n\n        for (int i = 1; i <= 5; i++) {\n            //TIP Press <shortcut actionId=\"Debug\"/> to start debugging your code. We have set one <icon src=\"AllIcons.Debugger.Db_set_breakpoint\"/> breakpoint\n            // for you, but you can always add more by pressing <shortcut actionId=\"ToggleLineBreakpoint\"/>.\n            System.out.println(\"i = \" + i);\n        }\n\n        switch (args.length) {\n            case 0:\n                System.out.println(\"No arguments were passed.\");\n                break;\n            case 1:\n                System.out.println(\"One argument was passed.\");\n                break;\n                case 2:\n                System.out.println(\"Two arguments were passed.\");\n                break;\n                case 3:\n                System.out.println(\"Three arguments were passed.\");\n                case 4:\n                System.out.println(\"Four arguments were passed.\");\n                break;\n                case 5:\n                System.out.println(\"Five arguments were passed.\");\n                case 6:\n                System.out.println(\"Six arguments were passed.\");\n                case 7:\n                System.out.println(\"Seven arguments were passed.\");\n                case 8:\n                System.out.println(\"Eight arguments were passed.\");\n                case 9:\n                System.out.println(\"Nine arguments were passed.\");\n                case 10:\n                System.out.println(\"Ten arguments were passed.\");\n                case 11:\n                System.out.println(\"Eleven arguments were passed.\");\n                case 12:\n                System.out.println(\"Twelve arguments were passed.\");\n                case 13:\n                System.out.println(\"Thirteen arguments were passed.\");\n            case 14:\n                System.out.println();\n                break;\n                case 15:\n                Syst",
    "infill": "em.out.println(\"Fifteen arguments were passed.\");\n\n            defaul",
    "suffix": "t:\n                System.out.println(\"More than one argument was passed.\");\n        }\n\n    }\n}",
    "relevantFile": "<file_path>src/Student.java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n\npublic class Student {\n    private String name;\n    private int age;\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    private String getName() {\n        return name;\n    }\n}\nIP To <b>Run</b> code, press <shortcut actionId=\"Run\"/> or\nclick the <icon src=\"AllIcons.Actions.Execute\"/> icon in the gutter.",
    "relevantFileList": [],
    "filePath": "src/Main.java",
    "template": "java",
    "multiRes": {
      "hipilot": "System.out.println();\n                break;",
      "CodeQwen2.5-7B": "em.out.println(\"Fifteen arguments were passed.\");",
      "copilot": "em.out.println(\"Fifteen arguments were passed.\");\n\n            defaul",
      "CodeQwen1.5-7B": " em.out.println(\"Fifteen arguments were passed.\");"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.interfaces.rest.req.converter;\n\nimport com.myhexin.community.operating.deploy.interfaces.rest.req.aicomment.AiCommentRuleRequest;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.dto.AiCommentAutoRuleDTO;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.ContentRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.ScenariosRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.UserRules;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.factory.Mappers;\n\n/**\n * AI评论请求参数转换\n *\n * @author chenmengsong@myhexin.com\n * @date 2024/6/14\n */\n@Mapper\npublic interface AiCommentReqConvert {\n\n    AiCommentReqConvert INSTANCE = Mappers.getMapper(AiCommentReqConvert.class);\n\n    /**\n     * 请求参数转换为数据传输对象\n     *\n     * @param request 请求参数\n     * @return 数据传输对象\n     */\n    @Mapping(target = \"contentRule\", qualifiedByName = \"convertContentRules\")\n    AiCommentAutoRuleDTO reqToDto(AiCommentRuleRequest request);\n\n    /**\n     * 内容规则转换\n     *\n     * @param contentRules 内容规则\n     * @return 内容规则\n     */\n    default ContentRules convertContentRules(ContentRules contentRules) {\n        if (contentRules == null) {\n            return null;\n        }\n        if (contentRules.getContentLength() == null && contentRules.getContentType() == null && contentRules.getContentCategory() == null){\n            return null;\n        }\n        return contentRules;\n    }\n    /**\n     * 场景规则转换\n     * @param scenariosRules 场景规则\n     * @return 场景规则\n     */\n    default ScenariosRules convertScenariosRules(ScenariosRules scenariosRules) {\n        if (scenariosRules == null) {\n            return null;\n        }\n        if (scenariosRules.getScenarioType() == null && scenariosRules.getScenarioCode() == null){\n            return null;\n        }\n        re",
    "infill": "用户规则转换\n     * @param userRules 用户规则\n     *                  @return 用户规则\n     *",
    "suffix": "/\n    default UserRules convertUserRules(UserRules userRules) {\n        if (userRules == null) {\n            return null;\n        }\n        if (userRules.getBlackList() == null && userRules.get() == null){\n            return null;\n        }\n        return userRules;\n    }\n\n}\n",
    "relevantFile": "<file_path>src/main/java/com/myhexin/community/operating/deploy/modules/aicomment/domain/entity/ScenariosRules.java\npackage com.myhexin.community.operating.deploy.modules.aicomment.domain.entity;\n\nimport lombok.Data;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/04\n */\n@Data\npublic class ScenariosRules {\n\n    /**\n     * 场景类别  用同花顺小市场类别\n     */\n    private String scenarioType;\n\n    /**\n     * 场景类别\n     */\n    private String scenarioCode;\n}\n<file_path>src/main/java/com/myhexin/community/operating/deploy/modules/aicomment/domain/dto/AiCommentAutoRuleDTO.java\npackage com.myhexin.community.operating.deploy.modules.aicomment.domain.dto;\n\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.ContentRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.FillingRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.ScenariosRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.UserRules;\nimport lombok.Data;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/04\n */\n@Data\npublic class AiCommentAutoRuleDTO {\n\n    /**\n     * 规则id\n     */\n    private Long id;\n\n    /**\n     * 提示词\n     */\n    private String prompt;\n\n    /**\n     * 用户维度的规则\n     */\n    private UserRules userRule;\n\n    /**\n     * 内容维度的规则\n     */\n    private ContentRules contentRule;\n\n    /**\n     * 场景维度的规则\n     */\n    private ScenariosRules scenariosRule;\n\n    /**\n     * 填充规则\n     */\n    private FillingRules fillingRules;\n\n    /**\n     * 操作者\n     */\n    private String operator;\n\n    /**\n     * 规则状态\n     */\n    private String status;\n\n    /**\n     * 规则创建时间\n     */\n    private Long ctime;\n<file_path>src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/controller/aicomment/AiCommentController.java\nimport com.myhexin.community.operating.deploy.interfaces.rest.req.aicomment.AiCommentRuleRequest;\nimport com.myhexin.community.operating.deploy.interfaces.rest.req.converter.AiCommentReqConvert;\nimport com.myhexin.community.operating.deploy.interfaces.rest.vo.BaseResponseVO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.vo.aicomment.AiCommentRulePageVO;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.consts.HxContentTypeWithFromIdEnum;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.dto.AiCommentAutoRuleDTO;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.FillingRules;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * AI评论接口\n *\n * @author chenmengsong@myhexin.com\n * @date 2024/6/14\n */\n@RestController\n@RequestMapping(\"/auth/api/ai_comment\")\n@RequiredArgsConstructor\npublic class AiCommentController {\n\n    private final AiCommentManager aiCommentManager;\n\n    /**\n     * 添加AI评论规则\n     *\n     * @param aiCommentRuleRequest 请求参数\n     * @return 响应\n     */\n    @PostMapping(\"/v1/add_rules\")\n    public BaseResponseVO<Void> addAiCommentRule(@RequestBody AiCommentRuleRequest aiCommentRuleRequest) {\n        AiCommentAutoRuleDTO aiCommentAutoRuleDTO = AiCommentReqConvert.INSTANCE.reqToDto(aiCommentRuleRequest);\n        aiCommentManager.addAiCommentRule(aiCommentAutoRuleDTO);\n        return BaseResponseVO.success();\n    }\n\n    /**\n     * 修改AI评论规则\n     *\n     * @param ruleId               规则ID\n     * @param aiCommentRuleRequest 请求参数\n     * @return 响应\n     */\n    @PostMapping(\"/v1/edit_rules/{rule_id}\")\n    public BaseResponseVO<Void> editAiCommentRule(@PathVariable(\"rule_id\") Long ruleId,\n                                                  @RequestBody AiCommentRuleRequest aiCommentRuleRequest) {\n        AiCommentAutoRuleDTO aiCommentAutoRuleDTO = AiCommentReqConvert.INSTANCE.reqToDto(aiCommentRuleRequest);\n        aiCommentAutoRuleDTO.setId(ruleId);\n        aiCommentManager.editAiCommentRule(aiCommentAutoRuleDTO);\n        return BaseResponseVO.success();\n    }\n\n    /**\n     * 修改AI评论规则状态\n     *\n     * @param ruleId               规则ID\n     * @param aiCommentRuleRequest 请求参数\n<file_path>src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/req/aicomment/AiCommentRuleRequest.java\npackage com.myhexin.community.operating.deploy.interfaces.rest.req.aicomment;\n\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.ContentRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.FillingRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.ScenariosRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.UserRules;\nimport lombok.Data;\n\n/**\n * AI评论规则请求\n *\n * @author chenmengsong@myhexin.com\n * @date 2024/6/14\n */\n@Data\npublic class AiCommentRuleRequest {\n\n    /**\n     * 规则id\n     */\n    private Long id;\n\n    /**\n     * 提示词\n     */\n    private String prompt;\n\n    /**\n     * 用户维度的规则\n     */\n    private UserRules userRule;\n\n    /**\n     * 内容维度的规则\n     */\n    private ContentRules contentRule;\n\n    /**\n     * 场景维度的规则\n     */\n    private ScenariosRules scenariosRule;\n\n    /**\n     * 填充规则\n     */\n    private FillingRules fillingRules;\n\n    /**\n     * 状态\n     */\n    private String status;\n}",
    "relevantFileList": [],
    "filePath": "src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/req/converter/AiCommentReqConvert.java",
    "template": "java",
    "multiRes": {
      "hipilot": "turn scenariosRules;\n    }",
      "CodeQwen2.5-7B": "turn scenariosRules;",
      "copilot": "用户规则转换\n     * @param userRules 用户规则\n     *                  @return 用户规则\n     *",
      "CodeQwen1.5-7B": "turn scenariosRules;"
    }
  },
  {
    "prefix": "package com.myhexin.aixg.constant;\n\n\n/**\n * @Author: liuyu <liuyu3@myhexin.com>\n * @Date: 2022/6/28 10:58\n */\npublic class ConstantString {\n\n    /**\n     * http msg成功\n     */\n    public static final String SUCCESS = \"success\";\n    public static final ",
    "infill": "String FAIL = \"fail\";\n    /**\n     * 日期个格式\n  ",
    "suffix": "   */\n    public static final String DATE_FORMAT = \"yyyyMMdd\";\n\n    /**\n     * 行情结果result1\n     */\n    public static final String LEVEL2_RESULT = \"result\";\n\n    /**\n     * PARENT_ID\n     */\n    public static final String PARENT_ID = \"parent_id\";\n\n    /**\n     * strategies\n     */\n    public static final String STRATEGIES = \"strategies\";\n\n    /**\n     * trend\n     */\n    public static final String TREND = \"trend\";\n\n    private ConstantString(){\n        //常量禁止new\n        // 实现数组排序\n        // Arrays.sort(new int[]{1, 2, 3});\n        String[] arr = new String[]{\"1\", \"2\", \"3\"};\n        System.out.println(arr);\n        // 取数组最大值\n        Arrays.stream(new int[]{1, 2, 3}).max().getAsInt();\n        System.out.println(arr);\n    }\n}\n",
    "relevantFile": "",
    "relevantFileList": [],
    "filePath": "application/src/main/java/com/myhexin/aixg/constant/ConstantString.java",
    "template": "java",
    "multiRes": {
      "hipilot": "String FAIL = \"fail\";\n\n    /**\n     * 日期格式\n  ",
      "CodeQwen2.5-7B": "String FAIL = \"fail\";",
      "copilot": "String FAIL = \"fail\";\n    /**\n     * 日期个格式\n  ",
      "CodeQwen1.5-7B": " String FAIL = \"fail\";"
    }
  },
  {
    "prefix": "package com.myhexin.zixun.conceptv2manager.deploy.common.external.rpc;\n\nimport com.alibaba.fastjson.JSON;\nimport com.myhexin.zixun.conceptv2manager.deploy.app.manager.dto.ConceptChainDTO;\nimport com.myhexin.zixun.conceptv2manager.deploy.common.config.properties.ChainProperties;\nimport com.myhexin.zixun.conceptv2manager.deploy.modules.discovery.domain.entity.FeedbackEntity;\nimport com.myhexin.zixun.flow.gpt.engine.api.api.ChainOperateRpcService;\nimport com.myhexin.zixun.flow.gpt.engine.api.dto.request.ChainExecuteQuery;\nimport com.myhexin.zixun.flow.gpt.engine.api.dto.response.ChainExecuteResponse;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.dubbo.config.annotation.DubboReference;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author: menghaizhu\n * @date: 2023/11/14 17:16\n */\n@Slf4j\n@Service\n@RequiredArgsConstructor\npublic class NewChainOperateService {\n\n    private static final Long DELAY_TIME = 3000L;\n\n    private static final ConceptChainDTO CONCEPT_CHAINDTO = new ConceptChainDTO().setResult(false);\n\n\n    private final ChainProperties chainProperties;\n\n\n    @DubboReference(version = \"1.0.0\", retries = 0, timeout = 200_000)\n    private ChainOperateRpcService chainOperateRpcService;\n\n\n    /**\n     * @param chainId  执行链id\n     * @param paramMap 链执行全流程的全局参数\n     * @return 执行结果\n     */\n    @Nullable\n    private String executeChain(String chainId, Map<String, String> paramMap) {\n        // 链参数\n        ChainExecuteQuery chainExecuteQuery = new ChainExecuteQuery();\n        chainExecuteQuery.setChainId(chainId);\n        chainExecuteQuery.setChainParamMap(paramMap);\n\n        log.debug(\"开始执行链{},参数{}\", chainId, JSON.toJSONString(chainExecuteQuery));\n        // 执行\n        try {\n            ChainExecuteResponse chainExecuteResponse = chainOperateRpcService.executeChain(chainExecuteQuery);\n            log.debug(\"链执行完毕,执行结果{}\", chainExecuteResponse);\n            return chainExecuteResponse.getResult();\n        } catch (RuntimeException e) {\n            log.error(\"链执行失败\", e);\n        }\n        return \"\";\n    }\n\n\n    /**\n     * GPT根据个股线索和概念添加标准给出审核意见\n     *\n     * @param clue        个股线索\n     * @param addStandard 审核标准\n     * @return 审核结果\n     */\n    public ConceptChainDTO matchStockByGpt(String clue, String addStandard) {\n        HashMap<String, String> extendedMap = new HashMap<>(2);\n        extendedMap.put(\"clue\", clue);\n        extendedMap.put(\"addStandard\", addStandard);\n        try {\n            Thread.sleep(DELAY_TIME);\n        } catch (InterruptedException e) {\n            log.error(\"GPT延时失败\", e);\n            Thread.currentThread().interrupt();\n        }\n        String result = executeChain(chainProperties.getRecommendStockChainId(), extendedMap);\n        // 解析结果\n\n        try {\n            ConceptChainDTO conceptChainDTO = JSON.parseObject(result, ConceptChainDTO.class);\n            if (conceptChainDTO == null) {\n                return CONCEPT_CHAINDTO;\n            }\n            return conceptChainDTO;\n        } catch (RuntimeException e) {\n            log.error(\"解析AI审核成分股结果失败\", e);\n        }\n        return CONCEPT_CHAINDTO;\n    }\n\n    /**\n     * 根据用户反馈查询互动易/公告/官网官微\n     *\n     * @param reason 用户反馈原因\n     * ",
    "infill": "@return 互动易/公告/官网官微\n     */\n    public L",
    "suffix": "ist<FeedbackEntity.Tracing> getFeedbackTracing(@NotNull String reason) {\n        \n        String result = executeChain(chainProperties.getFeedbackTracingChainId(), new HashMap<>(1));\n        // 解析结果\n        try {\n            return JSON.parseArray(result, FeedbackEntity.Tracing.class);\n        } catch (RuntimeException e) {\n            log.error(\"解析用户反馈数据溯源结果失败\", e);\n        }\n        return null;\n    }\n\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/app/manager/strategy/FeedbackDiscoveryStrategy.java\n        }\n\n        log.debug(\"FeedbackDiscoveryStrategy ======> 发现用户反馈数据 {} 条\", discoverySet.size());\n        // 没有新增数据,无需更新时间戳\n        if (discoverySet.isEmpty()) {\n            return new ArrayList<>();\n        }\n        // 添加审核记\n        reviewService.addConceptAuditRecord(recordList);\n        // 缓存本次同步时间戳\n        redisTemplate.opsForValue().set(FEEDBACK_TIMESTAMP_KEY,\n                String.valueOf(LocalDateTime.now().atZone(ZoneId.systemDefault()).toEpochSecond()),\n                FEEDBACK_TIMESTAMP_KEY_TTL_DAYS, TimeUnit.DAYS);\n\n        return new ArrayList<>(discoverySet);\n    }\n\n    /**\n     * 获取各策略发现渠道\n     *\n     * @return 发现渠道\n     */\n    @NotNull\n    @Override\n    public DiscoveryChannelEnum getStrategyChannel() {\n        return DiscoveryChannelEnum.FEEDBACK;\n    }\n\n    @NotNull\n    private static DiscoveryDTO feedbackToDiscoveryDTO(@NotNull FeedbackEntity feedbackEntity) {\n        DiscoveryDTO discoveryDTO = new DiscoveryDTO();\n        discoveryDTO.setHotWord(feedbackEntity.getConceptName())\n                .setStockCode(feedbackEntity.getStockCode())\n                .setStockName(feedbackEntity.getStockName())\n                .setCtime(LocalDateTime.ofInstant(Instant.ofEpochSecond(feedbackEntity.getPtime()),\n                        ZoneId.systemDefault()))\n                .setDiscoveryChannelEnum(DiscoveryChannelEnum.FEEDBACK);\n\n        switch (feedbackEntity.getType()) {\n            case TYPE_STOCK_DEL:\n                // 删除概念股，标记操作为 DEL\n                discoveryDTO.setDiscoveryOptionEnum(DiscoveryOptionEnum.OPTION_DEL);\n                break;\n            case TYPE_STOCK_EXPLAIN_UPDATE:\n                // 更新股票解析，标记操作为 UPDATE\n                discoveryDTO.setDiscoveryOptionEnum(DiscoveryOptionEnum.OPTION_UPDATE);\n                break;\n            case TYPE_CONCEPT_ADD:\n                // 新增概念,标记为CONCEPT_ADD\n                discoveryDTO.setDiscoveryOptionEnum(DiscoveryOptionEnum.OPTION_CONCEPT_ADD);\n                break;\n            case TYPE_STOCK_ADD:\n            default:\n                // 新增概念股，标记操作为 ADD\n                discoveryDTO.setDiscoveryOptionEnum(DiscoveryOptionEnum.OPTION_ADD);\n                break;\n        }\n\n        return discoveryDTO;\n    }\n<file_path>deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/app/manager/dto/ConceptChainDTO.java\npackage com.myhexin.zixun.conceptv2manager.deploy.app.manager.dto;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.util.List;\n\n/**\n * @author: menghaizhu\n * @date: 2023/10/11 19:29\n */\n@Data\n@Accessors(chain = true)\npublic class ConceptChainDTO {\n\n    private Boolean result;\n\n    private List<String> standard;\n\n    private String reason;\n\n    private String quesContent;\n\n    private String ansContent;\n\n    private String ansUrl;\n\n}\n<file_path>deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/modules/discovery/domain/entity/FeedbackEntity.java\npublic class FeedbackEntity {\n\n    /**\n     * 用户反馈记录id\n     */\n    private String id;\n\n    /**\n     * 概念id\n     */\n    private Long conceptId;\n\n    /**\n     * 概念词\n     */\n    private String conceptName;\n\n    /**\n     * 申请理由\n     */\n    private String reason;\n\n    /**\n     * 股票代码\n     */\n    private String stockCode;\n\n    /**\n     * 股票名\n     */\n    private String stockName;\n\n    /**\n     * 申请图片 多张，逗号分隔\n     */\n    private String images;\n\n    /**\n     * 用户上传来源\n     */\n    private String sourceUrl;\n\n    /**\n     * 操作类型\n     * -1 新增概念  1 新增概念股 2 新增股票解析 3 删除概念股\n     */\n    private Integer type;\n\n    /**\n     * 审核状态\n     */\n    private String status;\n\n    /**\n     * 审核意见\n     */\n    private String delReason;\n\n    /**\n     * 提交时间",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/common/external/rpc/NewChainOperateService.java",
    "template": "java",
    "multiRes": {
      "hipilot": "@return 溯源结果\n     */\n    public L",
      "CodeQwen2.5-7B": "@return 互动易/公告/官网官微",
      "copilot": "@return 互动易/公告/官网官微\n     */\n    public L",
      "CodeQwen1.5-7B": " @return 溯源数据"
    }
  },
  {
    "prefix": "package com.myhexin.zixun.anomalyanalysis.deploy.modules.anomaly.domain.service;\n\nimport com.myhexin.zixun.anomalyanalysis.deploy.modules.anomaly.domain.entity.AIAnalysisMaterialEntity;\n\nimport java.util.List;\n\n/**\n * AI解读语料服务\n *\n * @author zhangenci\n * @date 2024/06/19 21:03\n */\npublic interface AIAnalysisMaterialService {\n\n    /**\n     * 删除AI解读语料\n     *\n     * @param analysisId 解读id\n     * @param bizId      业务id\n     * @param bizType    业务类型\n     * @return 删除结果\n     */\n    Boolean deleteAIAnalysisMaterial(Integer analysisId, String bizId, String bizType);\n\n    /**\n     * 获取AI解读语料列表\n     *\n     * @param analysisId ",
    "infill": "解读id\n     * @return AI解读语料列表\n     */\n ",
    "suffix": "   List<AIAnalysisMaterialEntity> getAIAnalysisMaterialList(Integer analysisId);\n}",
    "relevantFile": "<file_path>anomaly-analysis-deploy/src/main/java/com/myhexin/zixun/anomalyanalysis/deploy/modules/anomaly/domain/types/StockInfo.java\npackage com.myhexin.zixun.anomalyanalysis.deploy.modules.anomaly.domain.types;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n/**\n * 关联的股票信息\n *\n * @author zhangenci\n * @date 2024/06/19 14:02\n */\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class StockInfo implements Serializable {\n    private static final long serialVersionUID = 5376762176573904524L;\n\n    /**\n     * 关联的股票信息列表\n     */\n    private List<StockInfoDTO> stockInfoList;\n}\n<file_path>anomaly-analysis-deploy/src/main/java/com/myhexin/zixun/anomalyanalysis/deploy/modules/anomaly/domain/entity/AIAnomalyAnalysisEntity.java\npackage com.myhexin.zixun.anomalyanalysis.deploy.modules.anomaly.domain.entity;\n\nimport lombok.Data;\n\nimport java.io.Serializable;\nimport java.time.LocalDate;\n\n/**\n * AI异动解读Entity\n *\n * @author zhangenci\n * @date 2024/04/03 14:26\n */\n@Data\npublic class AIAnomalyAnalysisEntity implements Serializable {\n    private static final long serialVersionUID = -2714536229146348827L;\n    /**\n     * 主键id\n     */\n    private Long id;\n    /**\n     * 异动解读主键id\n     */\n    private Integer analysisId;\n    /**\n     * 股票名称\n     */\n    private String stockName;\n    /**\n     * 异动日期\n     */\n    private LocalDate date;\n    /**\n     * 条件\n     */\n    private String aiReason;\n    /**\n     * 条件\n     */\n    private String traceId;\n    /**\n     * 背景信息\n     */\n    private String background;\n    /**\n     * 创建时间\n     */\n    private Long createTime;\n    /**\n     * 更新时间\n     */\n    private Long updateTime;\n}\n<file_path>anomaly-analysis-deploy/src/main/java/com/myhexin/zixun/anomalyanalysis/deploy/modules/anomaly/domain/entity/AIAnalysisMaterialEntity.java\npackage com.myhexin.zixun.anomalyanalysis.deploy.modules.anomaly.domain.entity;\n\nimport com.myhexin.zixun.anomalyanalysis.deploy.modules.anomaly.domain.types.SourceInfo;\nimport com.myhexin.zixun.anomalyanalysis.deploy.modules.anomaly.domain.types.StockInfo;\nimport lombok.Data;\n\nimport java.io.Serializable;\nimport java.time.LocalDate;\n\n/**\n * AI解读语料Entity\n *\n * @author zhangenci\n * @date 2024/06/20 13:41\n */\n@Data\npublic class AIAnalysisMaterialEntity implements Serializable {\n    private static final long serialVersionUID = -5114127665666138859L;\n\n    /**\n     * 主键id\n     */\n    private Long id;\n    /**\n     * 异动解读主键id\n     */\n    private Integer analysisId;\n    /**\n     * 股票名称\n     */\n    private String stockName;\n    /**\n     * 异动日期\n     */\n    private LocalDate date;\n    /**\n     * 业务id\n     */\n    private String bizId;\n    /**\n     * 业务类型\n     */\n    private String bizType;\n    /**\n     * 类型名称\n     */\n    private String typeName;\n    /**\n     * 语料\n     */\n    private String material;\n    /**\n     * 来源信息\n     */\n    private SourceInfo sourceInfo;\n    /**\n     * 股票信息\n     */\n    private StockInfo stockInfo;\n    /**\n<file_path>anomaly-analysis-deploy/src/main/java/com/myhexin/zixun/anomalyanalysis/deploy/modules/anomaly/domain/service/impl/AIAnalysisMaterialServiceImpl.java\npackage com.myhexin.zixun.anomalyanalysis.deploy.modules.anomaly.domain.service.impl;\n\nimport com.myhexin.zixun.anomalyanalysis.deploy.modules.anomaly.domain.entity.AIAnalysisMaterialEntity;\nimport com.myhexin.zixun.anomalyanalysis.deploy.modules.anomaly.domain.repository.AIAnalysisMaterialRepository;\nimport com.myhexin.zixun.anomalyanalysis.deploy.modules.anomaly.domain.service.AIAnalysisMaterialService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * AI解读语料服务\n *\n * @author zhangenci\n * @date 2024/06/19 21:04\n */\n@Service\npublic class AIAnalysisMaterialServiceImpl implements AIAnalysisMaterialService {\n    @Autowired\n    private AIAnalysisMaterialRepository aiAnalysisMaterialRepository;\n\n    @Override\n    public Boolean deleteAIAnalysisMaterial(Integer analysisId, String bizId, String bizType) {\n        return aiAnalysisMaterialRepository.deleteAIAnalysisMaterial(analysisId, bizId, bizType);\n    }\n\n    @Override\n    public List<AIAnalysisMaterialEntity> getAIAnalysisMaterialList(Integer analysisId) {\n        return null;\n    }\n}",
    "relevantFileList": [],
    "filePath": "anomaly-analysis-deploy/src/main/java/com/myhexin/zixun/anomalyanalysis/deploy/modules/anomaly/domain/service/AIAnalysisMaterialService.java",
    "template": "java",
    "multiRes": {
      "hipilot": "解读id\n     * @return 语料列表\n     */\n ",
      "CodeQwen2.5-7B": "解读id",
      "copilot": "解读id\n     * @return AI解读语料列表\n     */\n ",
      "CodeQwen1.5-7B": " 解读id"
    }
  },
  {
    "prefix": "package com.hexin.android.biz_selfstock.selfstockpage.broadindexview.dpkj;\n\nimport android.content.Context;\nimport android.graphics.Paint;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.os.Message;\nimport android.text.TextUtils;\nimport android.util.AttributeSet;\nimport android.util.TypedValue;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.BaseAdapter;\nimport android.widget.LinearLayout;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\nimport com.hexin.android.base_common_utils.RequestUtils;\nimport com.hexin.android.biz_quote_base_api.Security;\nimport com.hexin.android.biz_selfstock.detail.cards.broadindex.BroadIndexUtilKt;\nimport com.hexin.android.biz_selfstock.selfstockpage.filterview.CategoryDataProcessor;\nimport com.hexin.android.biz_selfstock.selfstockpage.filterview.model.CategoryConfig;\nimport com.hexin.android.biz_selfstock.selfstockpage.broadindexview.SelfCodeDpVoerLayUtil;\nimport com.hexin.android.biz_selfstock.selfstockpage.broadindexview.SelfDPInfoDataHolder;\nimport com.hexin.android.biz_selfstock.selfstockpage.broadindexview.UserGuzhiDataManager;\nimport com.hexin.android.biz_selfstock.selfstockpage.broadindexview.dpkj.listener.GuzhiCheckCurveChangeListener;\nimport com.hexin.android.biz_selfstock.selfstocknews.SelfStockTab;\nimport com.hexin.android.biz_hangqing.customview.DigitalTextView;\nimport com.hexin.android.biz_hangqing.gmg.gangmeigu.UsStockIndexType;\nimport com.hexin.android.base_cbas_api.CBASConstants;\nimport com.hexin.android.base_abtest_api.HeXinUserControlKeys;\nimport com.hexin.android.index.IndexDataManager;\nimport com.hexin.uicomponents.theme.OnThemeChangeListener;\nimport com.hexin.android.base_theme.theme.ThemeManager;\nimport com.hexin.android.ui.Component;\nimport com.hexin.middleware.NetWorkClinet;\nimport com.hexin.app.event.param.EQParam;\nimport com.hexin.android.biz_frame.eqframe.event.struct.EQBasicStockInfo;\nimport com.hexin.android.base_common_util.constant.ProtocalDef;\nimport com.hexin.middleware.QueueManagement;\nimport com.hexin.middleware.data.StuffBaseStruct;\nimport com.hexin.middleware.data.mobile.StuffTableStruct;\nimport com.hexin.middleware.data.realdata.model.RTDataSubscriber;\nimport com.hexin.middleware.session.RequestEmitter;\nimport com.hexin.plat.android.R;\nimport com.hexin.android.base_common_utils.HexinCBASUtil;\nimport com.hexin.android.base_common_utils.HexinUtils;\nimport com.hexin.android.base_common_util.log.Log;\nimport com.hexin.android.base_common_util.constant.EQConstants;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\n/**\n * Created by xujiajian on 18-1-15.\n */\n\npublic class SelfStockGuzhiTab extends LinearLayout implements NetWorkClinet, Component, OnThemeChangeListener {\n    private static final String TAG = \"SelfStockGuzhiTab\";\n    public static final int[] DATAIDS_DP_PRICE = SelfCodeDpVoerLayUtil.DATAIDS_DP_PRICE;\n    public static int initIndex = 0;\n    private static final int WHAT_HANDLE_DATA = 1;\n    private static final int INDEX_STOCKCODE = 4;\n    private static final int INDEX_STOCKNAME = 5;\n    private static final int FADINGEDGE_LENGTH = 100;\n    private ListView mListView        = null;\n    private GuzhiListAdapter mAdapter = null;\n    private int mCurSelectPosition = 0;\n    private EQBasicStockInfo mCurrentStockInfo = null;\n    private GuzhiCheckCurveChangeListener guzhiCheckCurveChangeListener = null;\n    private boolean isNeedRefresh = true;\n    private boolean isNeedSetSelection = true;\n    public SelfStockGuzhiTab(Context context) {\n        super(context);\n    }\n\n    public SelfStockGuzhiTab(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    public SelfStockGuzhiTab(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    private void init() {\n        mListView = (ListView) findViewById(R.id.lv_guzhilist);\n        mListView.setVerticalFadingEdgeEnabled(true);\n        mListView.setFadingEdgeLength(FADINGEDGE_LENGTH);\n        mAdapter = new GuzhiListAdapter();\n        mListView.setAdapter(mAdapter);\n    }\n\n    private void initThemes() {\n        mListView.setDividerHeight(getResources().getDimensionPixelOffset(R.dimen.dp_6));\n        mListView.setDivider(getResources().getDrawable(R.color.hq_global_bg));\n    }\n\n    private Handler mHandler = new Handler(Looper.getMainLooper()) {\n        @Override\n        public void handleMessage(Message msg) {\n            if (msg != null) {\n                switch (msg.what) {\n                    case WHAT_HANDLE_DATA:\n                        if (mAdapter != null && msg.obj instanceof ArrayList<?>) {\n                            isNeedRefresh = true;\n                            mAdapter.setData((ArrayList<SelfDPInfoDataHolder>) msg.obj);\n                        }\n                        break;\n                }\n            }\n        }\n    };\n\n    @Override\n    public void receive(StuffBaseStruct struct) {\n        Log.i(TAG, \"receive == \" + struct);\n        // 解析表格数据\n        final SelfStockTab.DPDataModel dataModel = parseData(struct, SelfStockTab.DATAIDS_DP_PRICE);\n        if (dataModel == null || dataModel.getSize() <= 0) {\n            return;\n        }\n        setDataHolderToAdatper(dataModel);\n    }\n\n    @Override\n    public void request() {\n        // frameid 保证同发分时请求的frameid一致，保证指数条能收到实时数据\n        RequestUtils.addSubscribeRequestToBuff(ProtocalDef.FRAMEID_ZXG, ProtocalDef.PAGEID_GZ, QueueManagement.getInstanceId(this),\n                buildRequestParams(), DATAIDS_DP_PRICE, null, RTDataSubscriber.RTReqInfo.TYPE_TABLE);\n        RequestEmitter.build().background(true).requestFlush();\n    }\n\n    @Override\n    public void onPageFinishInflate() {\n        init();\n        initThemes();\n    }\n\n    @Override\n    public int onNotifyProcess(String url) {\n        return 0;\n    }\n\n    @Override\n    public void onBackground() {\n        isNeedSetSelection = false;\n        RequestEmitter.build().removeRequestStructBuff(ProtocalDef.FRAMEID_ZXG,ProtocalDef.PAGEID_GZ,\n                QueueManagement.getInstanceId(this));\n        QueueManagement.unSubscribe(QueueManagement.getInstanceId(this));\n    }\n\n    @Override\n    public void onForeground() {\n        isNeedRefresh = true;\n        isNeedSetSelection = true;\n        initCurrentSelectedPosition();\n        ThemeManager.addThemeChangeListener(this);\n    }\n\n    @Override\n    public void onRemove() {\n        QueueManagement.remove(this);\n        if (mHandler != null) {\n            mHandler.removeCallbacksAndMessages(null);\n        }\n        if (guzhiCheckCurveChangeListener != null) {\n            guzhiCheckCurveChangeListener = null;\n        }\n        ThemeManager.removeThemeChangeListener(this);\n    }\n\n    @Override\n    public void onActivity() {\n\n    }\n\n    @Override\n    public void lock() {\n\n    }\n\n    @Override\n    public void unlock() {\n\n    }\n\n    @Override\n    public void parseRuntimeParam(EQParam param) {\n\n    }\n\n    public void setGuzhiCheckListener(GuzhiCheckCurveChangeListener guzhiCheckListener) {\n        this.guzhiCheckCurveChangeListener = guzhiCheckListener;\n    }\n\n    private void initCurrentSelectedPosition() {\n\n        if (HeXinUserControlKeys.KEY_WATCHLIST_SETTING.isSwitchOn()){\n            if (mCurrentStockInfo == null){\n                List<EQBasicStockInfo> stockInfoList = BroadIndexUtilKt.getBroadIndexStocks();\n                if(IndexDataManager.INSTANCE.isIndexSingleStyle()){\n                    Security selectSecurity",
    "infill": " = BroadIndexUtilKt.getSelectIndexFromSp();\n                }else {\n                  ",
    "suffix": "  mCurSelectPosition = initIndex;\n                    mCurrentStockInfo = stockInfoList.get(mCurSelectPosition);\n                }\n                String cbasObj = String.format(CBASConstants.CBAS_ZIXUAN_DPKJ_ENTRY, mCurSelectPosition + 1, mCurrentStockInfo.mStockCode);\n                HexinCBASUtil.sendStandardFunctionCbasByClick(cbasObj, false);\n            }\n        }else {\n            mCurSelectPosition = 0;\n            CategoryConfig config = CategoryDataProcessor.getInstance().getSelectCategoryConfig();\n            //如果有选中市场，则使用市场对应的股指，如果没有选中市场，则使用用户默认的选中股指\n            mCurrentStockInfo = (config == null || config.useUserGuZhi()) ?\n                    UserGuzhiDataManager.getInstance().loadSelectedGuzhiDataFromLocalFile() : config.getSelectGuZhiInfo();\n            if (mCurrentStockInfo == null) {\n                mCurSelectPosition = 0;\n                return;\n            }\n            ArrayList<EQBasicStockInfo> list = CategoryDataProcessor.getInstance().getSelectMarketGuZhi();\n            list = list == null ? new ArrayList<>() : list;\n            if (list.size() <= 0) {\n                mCurSelectPosition = 0;\n            }\n            String stockCode = mCurrentStockInfo.mStockCode;\n            String market = mCurrentStockInfo.mMarket;\n            for (int i = 0; i < list.size(); i++) {\n                EQBasicStockInfo stockInfo = list.get(i);\n                if (TextUtils.equals(stockCode, stockInfo.mStockCode) && TextUtils.equals(market, stockInfo.mMarket)) {\n                    mCurSelectPosition = i;\n                    break;\n                }\n            }\n        }\n\n    }\n    private String buildRequestParams() {\n        ArrayList<EQBasicStockInfo> list = CategoryDataProcessor.getInstance().getSelectMarketGuZhi();\n        if (list != null && list.size() > 0) {\n            int size = list.size();\n            EQBasicStockInfo stockInfo = null;\n            StringBuilder stocks = new StringBuilder();\n            StringBuilder markets = new StringBuilder();\n            for (int i = 0; i < size; i++) {\n                stockInfo = list.get(i);\n                stocks.append(stockInfo.mStockCode).append(EQConstants.REQUEST_SELFSTOCKLIST_SEPARATOR);\n                markets.append(stockInfo.mMarket).append(EQConstants.REQUEST_SELFSTOCKLIST_SEPARATOR);\n            }\n            if (stocks.length() > 0 && markets.length() > 0) {\n                return String.format(SelfStockTab.REQUEST_TEXT, stocks.toString(), markets.toString(), String.valueOf(size));\n            }\n        }\n        return EQConstants.INVALID_STR_VALUE;\n    }\n\n    private void setDataHolderToAdatper(SelfStockTab.DPDataModel dataModel) {\n        if (dataModel == null || dataModel.getSize() <= 0) {\n            return;\n        }\n        final List<SelfDPInfoDataHolder> originList = obtainOriginDataList();\n        if (originList != null) {\n            for (SelfDPInfoDataHolder dataHolder: originList) {\n                fillDataToDataHolder(dataModel, dataHolder);\n            }\n            if (mHandler != null) {\n                mHandler.sendMessage(mHandler.obtainMessage(WHAT_HANDLE_DATA, originList));\n            }\n        }\n    }\n\n    private void fillDataToDataHolder(SelfStockTab.DPDataModel dataModel, SelfDPInfoDataHolder dataHolder) {\n        if (dataModel != null && dataHolder != null && dataHolder.stockInfo != null &&\n                !TextUtils.isEmpty(dataHolder.stockInfo.mStockCode)) {\n            String currentCode = dataHolder.stockInfo.mStockCode;\n            int valuesCount = dataModel.getSize();\n            int dataCount = SelfStockTab.DATAIDS_DP_PRICE.length;\n            String[] codes = dataModel.getvalues(ProtocalDef.HANGQING_STOCK_CODE_4);\n            int currentCodeColIndex = findCurrentStockCodeIndex(codes, currentCode);\n            if (currentCodeColIndex >= 0 && valuesCount == dataCount) {\n                for (int i = 0; i < dataCount; i++) {\n                    int dataId = SelfStockTab.DATAIDS_DP_PRICE[i];\n                    String[] values = dataModel.getvalues(dataId);\n                    int[] colors = dataModel.getColors(dataId);\n                    if (values != null && colors != null && values.length == colors.length && values.length > currentCodeColIndex) {\n                        dataHolder.putColor(dataId,  colors[currentCodeColIndex]);\n                        dataHolder.putString(dataId, values[currentCodeColIndex]);\n                    }\n                }\n            }\n        }\n    }\n\n    private int findCurrentStockCodeIndex(String[] codes, String currentCode) {\n        if (codes == null || codes.length <= 0 || TextUtils.isEmpty(currentCode)) {\n            return -1;\n        }\n        int cols = codes.length;\n        for (int i = 0; i < cols; i++) {\n            if (currentCode.equals(codes[i])) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private List<SelfDPInfoDataHolder> obtainOriginDataList() {\n        ArrayList<EQBasicStockInfo> list = CategoryDataProcessor.getInstance().getSelectMarketGuZhi();\n        ArrayList<SelfDPInfoDataHolder> resultList = null;\n        if (list != null && list.size() > 0) {\n            int size = list.size();\n            resultList = new ArrayList<SelfDPInfoDataHolder>(size);\n            SelfDPInfoDataHolder holder = null;\n            for (EQBasicStockInfo stockInfo: list) {\n                if (stockInfo != null) {\n                    holder = new SelfDPInfoDataHolder();\n                    holder.stockInfo = stockInfo;\n                    resultList.add(holder);\n                }\n            }\n        }\n        return resultList;\n    }\n\n    private SelfStockTab.DPDataModel parseData(StuffBaseStruct struct, int[] dataIds) {\n        if (struct instanceof StuffTableStruct) {\n            StuffTableStruct fileStruct = (StuffTableStruct) struct;\n            int idsCount = dataIds.length;\n            int rows = fileStruct.getRow();\n            SelfStockTab.DPDataModel dpDataModel = new SelfStockTab.DPDataModel();\n            String[] stockCodes = null;\n            for (int i = 0; i < idsCount; i++) {\n                int dataID = dataIds[i];\n                String[] colValues = (String[]) fileStruct.getData(dataID);\n                if (i == INDEX_STOCKCODE) {\n                    stockCodes = colValues;\n                } else if (i == INDEX_STOCKNAME) {\n                    // 将股票名称转换为简称\n                    if (!HeXinUserControlKeys.KEY_WATCHLIST_SETTING.isSwitchOn()){\n                        colValues = EQData.getBatchAbbByGuzhiCode(stockCodes, colValues);\n                    }\n                }\n                int[] colColors = fileStruct.getDataColor(dataID);\n                if (colValues == null || colValues.length != rows || colColors == null || colColors.length != rows) {\n                    continue;\n                }\n                dpDataModel.putValues(dataID, colValues);\n                dpDataModel.putColors(dataID, colColors);\n            }\n            if (dpDataModel.getSize() == idsCount) {\n                return dpDataModel;\n            }\n            return null;\n        }\n        return null;\n    }\n\n    private void updateListViewUI(int position) {\n        if (mListView == null || mAdapter == null || position >= mListView.getAdapter().getCount()) {\n            return;\n        }\n        for (int i = 0; i < mAdapter.getCount(); i++) {\n            View view = getViewByPosition(i);\n            if (view == null) {\n                continue;\n            }\n            LinearLayout content = (LinearLayout) view.findViewById(R.id.guzhi_content);\n            if (content != null) {\n                if (i == position) {\n                    content.setBackgroundResource(ThemeManager.getDrawableRes(getContext(), R.drawable.dykj_guzhi_selected));\n                } else {\n                    content.setBackgroundResource(ThemeManager.getDrawableRes(getContext(), R.drawable.dykj_guzhi_unselected));\n                }\n                TextView guzhiName = (TextView) content.findViewById(R.id.guzhi_name);\n           ",
    "relevantFile": "",
    "relevantFileList": [],
    "filePath": "doc/ShellWork/src/main/java/com/hexin/android/biz_selfstock/selfstockpage/broadindexview/dpkj/SelfStockGuzhiTab.java",
    "template": "java",
    "multiRes": {
      "hipilot": "= IndexDataManager.INSTANCE.getSelectSecurity();\n                    mCurSelectPosition = stockInfoList.indexOf(selectSecurity);\n                    mCurrentStockInfo = selectSecurity;\n                }else{",
      "CodeQwen2.5-7B": " = HexinUtils.getSelectSecurity();",
      "copilot": " = BroadIndexUtilKt.getSelectIndexFromSp();\n                }else {\n                  ",
      "CodeQwen1.5-7B": "  = HeXinUserControlKeys.KEY_WATCHLIST_SETTING.getSelectSecurity();"
    }
  },
  {
    "prefix": "package com.myhexin.news.dto.translate;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.List;\n\n/**\n * 大模型翻译的请求协议\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:53\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ModelTranslateRequestDTO {\n    /**\n     * 目标语言\n     * tai-泰语\n     * pt-葡萄牙语\n     * ar-阿拉伯语\n     */\n    public static final String TARGET_LANG_TAI = \"tai\";\n    public static final String TARGET_LANG_PT = \"pt\";\n    public static final String TARGET_LANG_AR = \"ar\";\n\n    /**\n     * 目标语言\n     */\n    private String targetLanguage;\n\n    /**\n     * 待翻译内容\n     */\n    private List<String> contentList;\n    \n    private String appId;\n    \n    private ",
    "infill": "String domain;\n    \n    private String \n}\n",
    "suffix": "",
    "relevantFile": "<file_path>news-f10-service/src/main/java/com/myhexin/news/factory/translation/MyBean.java\npackage com.myhexin.news.factory.translation;\n\nimport org.springframework.stereotype.Component;\n\n/**\n * TODO\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 17:13\n */\n@Component\npublic class MyBean {\n    public void test() {\n        System.out.println(\"我是单例的！！！！！！！！\");\n    }\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/factory/translation/ThaiTranslateMode.java\npackage com.myhexin.news.factory.translation;\n\n/**\n * 泰语翻译模式\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:08\n */\npublic class ThaiTranslateMode extends ModelTranslateMode {\n\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/factory/translation/ModelTranslateMode.java\npackage com.myhexin.news.factory.translation;\n\nimport com.myhexin.news.common.dto.NewsTranslateResult;\nimport com.myhexin.news.common.util.spring.SpringContextHolder;\nimport com.myhexin.news.dto.translate.ModelTranslateRequestDTO;\nimport com.myhexin.news.dto.translate.ModelTranslateResultDTO;\nimport com.myhexin.news.properties.NewsProperty;\n\nimport java.util.List;\n\n/**\n * 大模型翻译实现\n * 泰语、葡萄牙语、阿拉伯语 翻译的实现（直接继承此接口）\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:45\n */\npublic class ModelTranslateMode extends AbstractTranslateMode {\n    /**\n     * feignClient按这个格式导进来\n     */\n    private static NewsProperty newsProperty = SpringContextHolder.getBean(\"newsProperty\");\n\n    @Override\n    public NewsTranslateResult translateData(List<String> content, int retry) {\n        // TODO: 2024/6/26 这里的retry是重试次数，取了newsProp里面的配置，feignClient里面要引用newsProp的配置\n        this.buildRequest()\n        return null;\n    }\n\n    protected ModelTranslateRequestDTO buildRequest(List<String> content) {\n        final ModelTranslateRequestDTO requestDTO = new ModelTranslateRequestDTO();\n        requestDTO.setContentList(content);\n        return requestDTO;\n    }\n\n    /**\n     * 调用大模型翻译接口\n     * @param requestDTO 请求参数\n     * @return 翻译结果\n     */\n    protected ModelTranslateResultDTO modelTranslate(ModelTranslateRequestDTO requestDTO) {\n        // TODO: 2024/6/26 调用大模型翻译接口\n        return null;\n    }\n\n    /**\n     * 组装返回结果\n     * @param resultDTO 大模型接口返回的数据\n     * @return 返回结果\n     */\n    private NewsTranslateResult buildResult(ModelTranslateResultDTO resultDTO) {\n        // TODO: 2024/6/26 根据大模型接口返回的数据组装返回结果\n        return new NewsTranslateResult();\n    }\n}\n<file_path>news-f10-api/src/main/java/com/myhexin/news/dto/translate/ModelTranslateResultDTO.java\npackage com.myhexin.news.dto.translate;\n\nimport lombok.Data;\n\n/**\n * TODO 大模型翻译的结果协议\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:51\n */\n@Data\npublic class ModelTranslateResultDTO {\n}",
    "relevantFileList": [],
    "filePath": "news-f10-api/src/main/java/com/myhexin/news/dto/translate/ModelTranslateRequestDTO.java",
    "template": "java",
    "multiRes": {
      "hipilot": "String appKey;\n}",
      "CodeQwen2.5-7B": "String appKey;",
      "copilot": "String domain;\n    \n    private String \n}\n",
      "CodeQwen1.5-7B": " String secretKey;"
    }
  },
  {
    "prefix": "package com.myhexin.sre.change.event.deploy.modules.plane.domain.aggregates;\n\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.entity.ChangeExeScene;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.valueobjects.ExePlanDetailItem;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.valueobjects.ExePlanInstance;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.valueobjects.ExePlanStatus;\nimport lombok.Data;\n\nimport java.time.LocalDateTime;\n\n/**\n * 变更执行计划单\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/22\n */\n@Data\npublic class ChangeExePlanOrder {\n    /**\n     * 变更执行计划单ID\n     */\n    private Long planId;\n    /**\n     * 变更执行计划单创建人\n     */\n    private String creator;\n    /**\n     * 变更执行开始时间\n     */\n    private LocalDateTime startTime;\n    /**\n     * 变更执行计划单执行人\n     */\n    private String executor;\n    /**\n     * 变更执行完成时间\n     */\n    private LocalDateTime finishTime;\n    /**\n     * 变更原因\n     */\n    private String reason;\n    /**\n     * 变更环境\n     */\n    private String env;\n    /**\n     * 变更源变更工单/记录唯一ID\n     */\n    private String bizOrderId;\n    /**\n     * 变更执行场景\n     */\n    private ChangeExeScene scene;\n    /**\n     * 变更执行主体\n     */\n    private List<ExePlanInstance> instance;\n    /**\n     * 变更执行详情\n     */\n    private ExePlanDetailItem",
    "infill": " detailItem;\n    /**\n     * 变更执行状态\n     *",
    "suffix": "/\n    private ExePlanStatus status;\n    \n    \n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/query/ChangePlanStartRequest.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport javax.validation.constraints.NotNull;\n\n\n/**\n * 变更执行单请求\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n\n@Data\n@EqualsAndHashCode(callSuper = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangePlanStartRequest extends ChangePlanRequest {\n    /**\n     * 变更开始时间\n     */\n    private String startTime;\n    /**\n     * 变更执行人\n     */\n    @NotNull(message = \"变更执行人不能为空\")\n    private String executor;\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/valueobjects/ExePlanStatus.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.valueobjects;\n\n/**\n * 变更计划的执行状态\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/28\n */\npublic enum ExePlanStatus {\n    /**\n     * 初始化\n     */\n    INIT(\"init\", false),\n    /**\n     * 运行中\n     */\n    RUNNING(\"running\", false),\n    /**\n     * 成功\n     */\n    SUCCESS(\"success\", true),\n    /**\n     * 失败\n     */\n    FAIL(\"fail\", true),\n    /**\n     * 取消\n     */\n    CANCEL(\"cancel\", true),\n    /**\n     * 回滚\n     */\n    ROLLBACK(\"rollback\", true),\n    ;\n\n    private final String code;\n\n    private final boolean finalStatus;\n\n    ExePlanStatus(String code, boolean finalStatus) {\n        this.code = code;\n        this.finalStatus = finalStatus;\n    }\n    public String getCode() {\n        return code;\n    }\n\n    public boolean isFinalStatus() {\n        return finalStatus;\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/enums/ChangeSceneGenerationEnum.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.enums;\n\n/**\n * 变更场景代际\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/28\n */\npublic enum ChangeSceneGenerationEnum {\n    /**\n     * 文本\n     */\n    G0(\"G0\"),\n    /**\n     * json\n     */\n    G1(\"G1\");\n\n    private final String name;\n\n    private ChangeSceneGenerationEnum(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/valueobjects/ExePlanInstance.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.valueobjects;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * 变更计划关联变更主体\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n@Data\npublic class ExePlanInstance {\n    /**\n     * 主体名\n     */\n    private String name;\n    /**\n     * 主体类型\n     */\n    private String type;\n    /**\n     * 部署名称列表\n     */\n    private List<String> deploymentName;\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/aggregates/ChangeExePlanOrder.java",
    "template": "java",
    "multiRes": {
      "hipilot": " detail;\n    /**\n     * 变更执行状态\n     *",
      "CodeQwen2.5-7B": " detail;",
      "copilot": " detailItem;\n    /**\n     * 变更执行状态\n     *",
      "CodeQwen1.5-7B": " detail;"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.interfaces.rest.controller;\n\nimport com.myhexin.community.operating.deploy.app.manager.HotContentOperatingManager;\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolResultDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.vo.BaseResponseVO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.vo.RespStatusEnum;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.*;\n\n/**\n * 内容池 -- Controller\n * @author ningwenyu@myhexin.com\n * @date 2024/6/17 21:50\n */\n@RestController\n@RequestMapping(\"/auth/api/hot_module/v1/hot_content\")\n@RequiredArgsConstructor\npublic class HotContentOperatingController {\n    private final HotContentOperatingManager hotContentOperatingManager;\n\n    /**\n     * 获取热点池数据\n     * @param id 内容id\n     * @param type 内容类型\n     * @param creator 创建者\n     * @param page 当前页\n     * @param pageSize 页大小\n     * @param status 状态信息\n     * @return 热点池数据\n     */\n    @GetMapping(\"get_hot_content_pool\")\n    public BaseResponseVO<HotContentPoolResultDTO> getHotContentPool(@RequestParam(\"id\") String id,\n                                                                     @RequestParam(\"type\") String type,\n                                                                     @RequestParam(\"creator\") String creator,\n                                                                     @RequestParam(\"page\") Integer page,\n                                                                     @RequestParam(\"page_size\") Integer pageSize,\n                                                                     @RequestParam(\"status\") Integer status) {\n        return BaseResponseVO.success(hotContentOperatingManager.getHotContentPool(id, type, creator, page, pageSize, status));\n    }\n    \n    @PostMapping(\"add_hot_content_to_rank\")\n    public BaseResponseVO<Void> ",
    "infill": "addHotContentToRank(@RequestBody addHotCOnte) {\n        return BaseResponseVO.success();\n    }\n}\n",
    "suffix": "",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/dto/hottopic/HotContentPoolResultDTO.java\npackage com.myhexin.community.operating.deploy.app.manager.dto.hottopic;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.util.List;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/6/19 17:22\n */\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class HotContentPoolResultDTO {\n\n    /**\n     * 热点池列表\n     */\n    private List<HotContentPoolDTO> list;\n\n    /**\n     * 查询总数\n     */\n    private Integer total;\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/impl/HotContentOperatingServiceImpl.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.service.impl;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.repository.HotContentOperatingRepository;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * 热点内容Service实现\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\n@Service\n@RequiredArgsConstructor\npublic class HotContentOperatingServiceImpl implements HotContentOperatingService {\n\n    private final HotContentOperatingRepository hotContentRepository;\n\n    /**\n     * 添加热点内容至热点池中\n     *\n     * @param hotContentPoolDTO 热点数据\n     */\n    @Override\n    public void addHotContent(HotContentPoolDTO hotContentPoolDTO) {\n        // 保存至数据库\n        hotContentRepository.addHotContent(hotContentPoolDTO);\n    }\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    @Override\n    public List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPool(hotContentQuery);\n    }\n\n    /**\n     * 获取热点池数据总数\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    @Override\n    public Integer getHotContentPoolTotal(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPoolTotal(hotContentQuery);\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/query/HotContentQuery.java\npackage com.myhexin.community.operating.deploy.interfaces.rest.query;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n/**\n * 热点池内容查询条件\n * @author ningwenyu@myhexin.com\n * @date 2024/6/19 17:17\n */\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class HotContentQuery {\n\n    /**\n     * 内容id\n     */\n    private String id;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n\n    /**\n     * 创建者\n     */\n    private String creator;\n\n    /**\n     * 偏移量\n     */\n    private Integer skipNum;\n\n    /**\n     * 页大小\n     */\n    private Integer pageSize;\n\n    /**\n     * 大小\n     */\n    private Integer status;\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/HotContentOperatingManager.java\npackage com.myhexin.community.operating.deploy.app.manager;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolResultDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n/**\n * Manager类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 20:48\n */\n@Component\n@RequiredArgsConstructor\npublic class HotContentOperatingManager {\n    private final HotContentOperatingService hotContentOperatingService;\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param id       内容id\n     * @param type     内容类型\n     * @param creator  创建者\n     * @param page     当前页\n     * @param pageSize 页大小\n     * @param status   状态信息\n     * @return 热点池数据\n     */\n    public HotContentPoolResultDTO getHotContentPool(String id, String type, String creator, Integer page, Integer pageSize, Integer status) {\n        // 创建查询条件\n        HotContentQuery hotContentQuery = HotContentQuery.of()\n                .setId(id)\n                .setType(type)\n                .setCreator(creator)\n                .setSkipNum((page - NumberUtils.INTEGER_ONE) * pageSize)\n                .setPageSize(pageSize)\n                .setStatus(status);\n\n        // 查询热点池数据\n        List<HotContentPoolDTO> hotContentPoolList = hotContentOperatingService.getHotContentPool(hotContentQuery);\n        // 查询总条数\n        Integer total = hotContentOperatingService.getHotContentPoolTotal(hotContentQuery);\n        return HotContentPoolResultDTO.of()\n                .setList(hotContentPoolList)\n                .setTotal(total);\n    }\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/controller/HotContentOperatingController.java",
    "template": "java",
    "multiRes": {
      "hipilot": "addHotContentToRank(@RequestBody HotContentPoolDTO hotContentPoolDTO) {\n        hotContentOperatingManager.addHotContent(hotContentPoolDTO);\n        return BaseResponseVO.success(RespStatusEnum.HANDLE_SUCCESS);\n    }",
      "CodeQwen2.5-7B": "addHotContentToRank(@RequestParam(\"id\") String id,",
      "copilot": "addHotContentToRank(@RequestBody addHotCOnte) {\n        return BaseResponseVO.success();\n    }\n}\n",
      "CodeQwen1.5-7B": " addHotContentToRank(@RequestParam(\"id\") String id,"
    }
  },
  {
    "prefix": "package com.myhexin.news.common.dto;\n\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.annotation.JSONField;\nimport com.myhexin.news.dto.translate.ModelTranslateResultDTO;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * @author xuzekui\n * @date 2021/11/17 20:44\n * @description\n */\n@Data\n@NoArgsConstructor\npublic class NewsTranslateResult {\n\n    private int code;\n    private String note;\n    private Object data;\n\n    public NewsTranslateResult(Integer code, String note, Object data) {\n        this.code = code;\n        this.note = note;\n        this.data = data;\n    }\n\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class DataBean {\n//        @JSONField(name = \"trans_result\")\n        private List<ModelTranslateResultDTO> transResultList;\n\n//        @JSONField(name = \"result_list\")\n        private List<List<TransResult>> resultList;\n    }\n\n    public static void main(String[] args) {\n        NewsTranslateResult newsTranslateResult = new NewsTranslateResult();\n\n        ;\n\n        final L",
    "infill": "ist<Trans",
    "suffix": "Result> transResults = new ArrayList<>();\n        DataBean dataBean = new DataBean(\n                Collections.singletonList(new ModelTranslateResultDTO(\"src aaa\", \"dst bbb\")),\n                new ArrayList<>(Collections.singletonList(transResults)));\n        newsTranslateResult.setData(JSON.toJSONString(dataBean));\n//        newsTranslateResult.setData(dataBean);\n        System.out.println(JSON.toJSONString(newsTranslateResult));\n    }\n\n}\n",
    "relevantFile": "<file_path>src/main/java/com/myhexin/zixun/application/manager/flash/news/external/feign/dto/TextSummaryInput.java\npackage com.myhexin.zixun.application.manager.flash.news.external.feign.dto;\n\nimport com.alibaba.fastjson.JSON;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\nimport java.io.Serializable;\n\n/**\n * 文本精简接口入参\n *\n * @author lihe2@myhexin.com\n * @date 2024/3/28 15:57\n */\n@Data\n@Accessors(chain = true)\npublic class TextSummaryInput implements Serializable {\n    private static final long serialVersionUID = -7123821614322339842L;\n    /**\n     * input入参\n     */\n    private String input;\n\n    public TextSummaryInput(String text) {\n        this.input = JSON.toJSONString(new TextSummaryInputBean(text));\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class TextSummaryInputBean implements Serializable {\n        private static final long serialVersionUID = 3929973689786768309L;\n        /**\n         * 文本入参\n         */\n        private String text;\n    }\n}\n<file_path>news-f10-api/src/main/java/com/myhexin/news/dto/translate/ModelTranslateResultDTO.java\npackage com.myhexin.news.dto.translate;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * 大模型翻译的结果协议\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:51\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ModelTranslateResultDTO {\n    /**\n     * 原始内容\n     */\n    private String originContent;\n\n    /**\n     * 翻译后的内容\n     */\n    private String translatedContent;\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/factory/translation/ModelTranslateMode.java\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.annotation.JSONField;\nimport com.myhexin.news.common.dto.NewsTranslateResult;\nimport com.myhexin.news.common.dto.TransResult;\nimport com.myhexin.news.common.util.spring.SpringContextHolder;\nimport com.myhexin.news.dto.translate.ModelTranslateRequestDTO;\nimport com.myhexin.news.dto.translate.ModelTranslateResultDTO;\nimport com.myhexin.news.feign.ModelTranslateFeign;\nimport com.myhexin.news.feign.request.ModelTranslateFeignRequest;\nimport com.myhexin.news.feign.response.ModelTranslateFeignResponse;\nimport com.myhexin.news.properties.NewsProperty;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * 大模型翻译实现\n * 泰语、葡萄牙语、阿拉伯语 翻译的实现（直接继承此接口）\n *\n * TODO 各个实现类在调用那里要new一下\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:45\n */\npublic class ModelTranslateMode extends AbstractTranslateMode {\n    protected static NewsProperty newsProperty = SpringContextHolder.getBean(\"newsProperty\");\n\n    private static ModelTranslateFeign modelTranslateFeign = SpringContextHolder.getBean(\"modelTranslateFeign\");\n\n\n\n    @Override\n    public NewsTranslateResult translateData(List<String> content, int retry) {\n\n        final List<ModelTranslateResultDTO> resultDTOList = content.stream()\n                .map(this::buildRequest)\n                .map(this::modelTranslate)\n                .collect(Collectors.toList());\n\n        return buildResult(resultDTOList);\n    }\n\n    /**\n     * 组装大模型接口请求的参数\n     * @param content 待翻译内容\n     * @return 大模型接口请求的参数\n     */\n    protected ModelTranslateRequestDTO buildRequest(String text) {\n        // 注意这里构造的没有 目标语言的dto对象\n        return new ModelTranslateRequestDTO(text, newsProperty.getAppId(), \"default\", \"en\", null);\n    }\n\n    /**\n     * 调用大模型翻译接口并转换结果\n     * @param requestDTO 请求参数\n     * @return 翻译结果\n<file_path>news-f10-api/src/main/java/com/myhexin/news/common/dto/TransResult.java\npackage com.myhexin.news.common.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * @author xuzekui\n * @date 2021/11/26 11:20\n * @description\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class TransResult {\n\n    private String src;\n    private String dst;\n\n}",
    "relevantFileList": [],
    "filePath": "news-f10-api/src/main/java/com/myhexin/news/common/dto/NewsTranslateResult.java",
    "template": "java",
    "multiRes": {
      "hipilot": "ist<Trans",
      "CodeQwen2.5-7B": "ist<Trans",
      "copilot": "ist<Trans",
      "CodeQwen1.5-7B": " ist<Trans"
    }
  },
  {
    "prefix": "package com.myhexin.community.user.medal.deploy.interfaces.rest.converter;\n\nimport com.myhexin.community.user.medal.deploy.modules.historymedal.domain.dto.UserHistoryMedalDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.*;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.Medal;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalCategory;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalSeries;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.UserMedal;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.Named;\nimport org.mapstruct.factory.Mappers;\n\nimport java.util.Optional;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/4/24 20:16\n */\n@Mapper(imports = {Optional.class})\npublic interface MedalConvert {\n\n    MedalConvert INSTANCE = Mappers.getMapper(MedalConvert.class);\n\n    /**\n     * 用户勋章DTO转换\n     *\n     * @param userMedal 原始用户勋章信息\n     * @return 用户勋章DTO\n     */\n    UserMedalDTO toUserMedalDTO(UserMedal userMedal);\n    \n    MedalDTO toMedalDTO(Medal medal);\n    \n    MedalSeriesDTO toMedalSeriesDTO(MedalSeries medalSeries);\n    \n    @Mapping(target = \"categoryRank\", expression = \"java(Optional.ofN",
    "infill": "ullable(medalCategory.getCategoryRank()).orElse(0))\")\n    MedalCategoryDTO toMedalCategoryDTO(MedalCategory medalCategory",
    "suffix": ");\n    \n\n    /**\n     * 将历史勋章系列转换至新版返回值\n     *\n     * @param userHistoryMedalDTO 原始历史勋章信息\n     * @return 新版返回值\n     */\n\n    @Mapping(target = \"level\", source = \"medalLevel\", qualifiedByName = \"levelToInt\")\n    @Mapping(target = \"medalName\", source = \"medalName\")\n    @Mapping(target = \"logoUrl\", source = \"logoUrl\")\n    @Mapping(target = \"acquisitionTime\", source = \"acquiredMedalTime\")\n    @Mapping(target = \"acquisitionCriteria\", source = \"condition\")\n    UserMedalDetailResultDTO.UserMedalDetailInfo toUserMedalDetailInfo(UserHistoryMedalDTO userHistoryMedalDTO);\n\n    /**\n     * 将旧版勋章的level由拼接形式转换为纯等级形式\n     *\n     * @param level 等级\n     * @return int型等级\n     */\n    @Named(\"levelToInt\")\n    default Integer levelToInt(String level) {\n        if (level != null && level.contains(\"_\")) {\n            return Integer.parseInt(level.split(\"_\")[1]);\n        }\n        return null;\n    }\n}\n",
    "relevantFile": "<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/infrastructure/db/model/MedalCategory.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model;\n\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\n\n/**\n * 勋章类别表(com.myhexin.community.user.medal.deploy.modules.medal.domain.enums.MedalCategory)表实体类\n *\n * @author makejava\n * @since 2024-04-23 19:56:55\n */\n@Data\n@EqualsAndHashCode(callSuper = false)\n@SuppressWarnings(\"serial\")\npublic class MedalCategory extends Model<MedalCategory> {\n\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    /**\n     * 类别名称，如“股东勋章”\n     */\n    private String name;\n\n    /**\n     * 描述，勋章备注\n     */\n    private String description;\n\n    /**\n     * 勋章类别排序\n     */\n    private Integer categoryRank;\n\n    /**\n     * 勋章类别类型 common 普通勋章 gudong 股东勋章\n     */\n    private String type;\n\n    /**\n     * 勋章类别是否生效，有效（valid）、无效（invalid）\n     */\n    private String validStatus;\n\n    /**\n     * 创建时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 更新时间\n     */\n    private LocalDateTime utime;\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalDTO.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.dto;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.time.LocalDateTime;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 13:06\n */\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class MedalDTO {\n\n    /**\n     * id\n     */\n    private Integer medalId;\n\n    /**\n     * 获取条件\n     */\n    private String acquisitionCriteria;\n\n    /**\n     * 获取时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 描述\n     */\n    private String description;\n\n    /**\n     * 扩展字段\n     */\n    private String ext;\n\n    /**\n     * logo地址\n     */\n    private String logoUrl;\n\n    /**\n     * 等级\n     */\n    private Integer medalLevel;\n\n    /**\n     * 勋章名称\n     */\n    private String medalName;\n\n    /**\n     * 勋章系列id\n     */\n    private Integer seriesId;\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalCategoryDTO.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.dto;\n\nimport lombok.Data;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 11:10\n */\n@Data\npublic class MedalCategoryDTO {\n\n    /**\n     * 奖章类别ID\n     */\n    private Integer id;\n\n    /**\n     * 名称\n     */\n    private String name;\n    /**\n     * 类别描述\n     */\n    private String description;\n\n    /**\n     * 有效状态（valid：有效；invalid：无效）\n     */\n    private String validStatus;\n\n    /**\n     * 奖章类型（common：普通；activity：特殊）\n     */\n    private String medalType;\n\n    /**\n     * 勋章类别创建时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 勋章类别更新时间\n     */\n    private LocalDateTime utime;\n\n    /**\n     * 勋章系列列表\n     */\n    private List<MedalSeriesDTO> medalSeriesList;\n\n    /**\n     * 勋章类别排序\n     */\n    private Integer categoryRank;\n\n    /**\n     * 勋章类别类型 common 普通勋章 gudong 股东勋章\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalWallDTO.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.dto;\n\nimport com.myhexin.community.user.medal.deploy.interfaces.rest.converter.MedalConvert;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalCategory;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.po.MedalWallInfoPO;\nimport lombok.Data;\nimport org.apache.commons.lang3.math.NumberUtils;\n\nimport java.util.*;\n\n/**\n * 勋章墙DTO类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 15:08\n */\n@Data\npublic class MedalWallDTO {\n\n    /**\n     * 勋章类型列表\n     */\n    private List<MedalCategoryInfo> categoryList;\n\n    @Data\n    public static class MedalCategoryInfo {\n        /**\n         * 勋章类别详情\n         */\n        private MedalCategoryDTO medalCategoryDTO;\n\n        /**\n         * 勋章系列列表\n         */\n        List<MedalSeriesInfo> seriesList;\n\n        @Data\n        public static class MedalSeriesInfo {\n\n            /**\n             * 勋章系列详情\n             */\n            private MedalSeriesDTO medalSeriesDTO;\n\n            /**\n             * 勋章详情\n             */\n            private List<MedalDTO> medalList;\n        }\n    }\n\n\n    /**\n     * 转化为勋章墙格式\n     *\n     * @param medalCategoryList 所有勋章分类\n     * @param medalWallInfoList 连表查询返回值\n     * @return 勋章墙DTO对象\n     */\n    public static MedalWallDTO mapMedalsToWallDTO(List<MedalCategory> medalCategoryList,",
    "relevantFileList": [],
    "filePath": "src/main/java/com/myhexin/community/user/medal/deploy/interfaces/rest/converter/MedalConvert.java",
    "template": "java",
    "multiRes": {
      "hipilot": "(medalCategory.getCategoryRank())",
      "CodeQwen2.5-7B": "ullable(medalCategory.getCategoryRank()).orElse(0))\")",
      "copilot": "ullable(medalCategory.getCategoryRank()).orElse(0))\")\n    MedalCategoryDTO toMedalCategoryDTO(MedalCategory medalCategory",
      "CodeQwen1.5-7B": " ullable(userMedal.getCategoryRank()).orElse(0))\")"
    }
  },
  {
    "prefix": "package com.myhexin.nacos.console.config;\n\nimport java.sql.Timestamp;\n\n/**\n * HxConfigInfoAudit.\n * This class represents the hx_config_info_audit table in the database.\n */\npublic class HxConfigInfoAudit {\n\n    /**\n     * 'id'\n     */\n    private long id;\n    /**\n     *  'data_id' 配置文件名，比如ifund-gateway.properties\n    */\n    private String dataId;\n\n    /** 'group_id' */\n    private String groupId;\n\n    /** 'content' */\n    private String content;\n\n    /** 'md5' */\n    private String md5;\n\n    /** 'source user' */\n    private String srcUser;\n\n    /** 'source ip' */\n    private String srcIp;\n\n    /**\n     *  'app_name' 归属应用\n      */\n    private String appName;\n\n    /**\n     * '租户字段'。默认就是public，数据库里是“”，不是null，因为有唯一索引。\n     * 原来设计上回有点问题\n     * nacos 控制台对应的命名空间。\n     */\n    private String tenantId;\n\n    /** 'c_desc' */\n    private String cDesc;\n\n    /** 'c_use' */\n    private String cUse;\n\n    /** 'effect' */\n    private String effect;\n\n    /** 'type' */\n    private String type;\n\n    /** 'c_schema' */\n    private String cSchema;\n\n    /**\n     * '集群名'，比如五常集群\n     *\n     */\n    private String clusterName;\n\n    /**\n     * '服务名' NACOS 的",
    "infill": "服务名，比如ifund-gateway\n     */\n    private",
    "suffix": " String serviceName;\n\n    /**\n     * '服务类型'， nacos-server\n     */\n    private String serviceType;\n\n    /**\n     * '审核的状态'\n     * 0-审核中\n     * 1-审核通过\n     * 2-审核不通过\n      */\n    private char cState;\n\n    /**\n     * '当前版本'\n     * 初始化是0\n     * 审核通过或者审核不通过后，设置为当前时间戳，\n     * 目的为了控制一个配置文件只能有一个审核中的版本。\n     */\n    private long niVersion;\n\n\n\n    /**\n     *  '发布的人' paas的账号，正常是邮箱\n     *\n     * */\n    private String username;\n\n    /** '审核人' */\n    private String auditor;\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public String getDataId() {\n        return dataId;\n    }\n\n    public void setDataId(String dataId) {\n        this.dataId = dataId;\n    }\n\n    public String getGroupId() {\n        return groupId;\n    }\n\n    public void setGroupId(String groupId) {\n        this.groupId = groupId;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public String getMd5() {\n        return md5;\n    }\n\n    public void setMd5(String md5) {\n        this.md5 = md5;\n    }\n\n    public String getSrcUser() {\n        return srcUser;\n    }\n\n    public void setSrcUser(String srcUser) {\n        this.srcUser = srcUser;\n    }\n\n    public String getSrcIp() {\n        return srcIp;\n    }\n\n    public void setSrcIp(String srcIp) {\n        this.srcIp = srcIp;\n    }\n\n    public String getAppName() {\n        return appName;\n    }\n\n    public void setAppName(String appName) {\n        this.appName = appName;\n    }\n\n    public String getTenantId() {\n        return tenantId;\n    }\n\n    public void setTenantId(String tenantId) {\n        this.tenantId = tenantId;\n    }\n\n    public String getcDesc() {\n        return cDesc;\n    }\n\n    public void setcDesc(String cDesc) {\n        this.cDesc = cDesc;\n    }\n\n    public String getcUse() {\n        return cUse;\n    }\n\n    public void setcUse(String cUse) {\n        this.cUse = cUse;\n    }\n\n    public String getEffect() {\n        return effect;\n    }\n\n    public void setEffect(String effect) {\n        this.effect = effect;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getcSchema() {\n        return cSchema;\n    }\n\n    public void setcSchema(String cSchema) {\n        this.cSchema = cSchema;\n    }\n\n    public String getClusterName() {\n        return clusterName;\n    }\n\n    public void setClusterName(String clusterName) {\n        this.clusterName = clusterName;\n    }\n\n    public String getServiceName() {\n        return serviceName;\n    }\n\n    public void setServiceName(String serviceName) {\n        this.serviceName = serviceName;\n    }\n\n    public String getServiceType() {\n        return serviceType;\n    }\n\n    public void setServiceType(String serviceType) {\n        this.serviceType = serviceType;\n    }\n\n    public char getcState() {\n        return cState;\n    }\n\n    public void setcState(char cState) {\n        this.cState = cState;\n    }\n\n    public long getNiVersion() {\n        return niVersion;\n    }\n\n    public void setNiVersion(long niVersion) {\n        this.niVersion = niVersion;\n    }\n\n\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getAuditor() {\n        return auditor;\n    }\n\n    public void setAuditor(String auditor) {\n        this.auditor = auditor;\n    }\n}",
    "relevantFile": "<file_path>console/src/main/java/com/myhexin/nacos/console/config/ExternalConfigInfoAuditPersistServiceImpl.java\npackage com.myhexin.nacos.console.config;\n\nimport com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;\nimport com.alibaba.nacos.config.server.service.repository.extrnal.ExternalStoragePersistServiceImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\n\n@Conditional(value = ConditionOnExternalStorage.class)\n@Component\npublic class ExternalConfigInfoAuditPersistServiceImpl implements ConfigInfoAuditPersistService {\n\n    @Autowired\n    private ExternalStoragePersistServiceImpl persistService;\n\n    private JdbcTemplate jt;\n\n    @PostConstruct\n    protected void init() {\n        jt = persistService.getJdbcTemplate();\n    }\n\n    @Override\n    public HxConfigInfoAudit getAuditRecord(String clusterName, String serviceName, String serviceType, String tenantId, String groupId, String dataId) {\n        return null;\n    }\n\n    @Override\n    public void updateAuditRecord(HxConfigInfoAudit hxConfigInfoAudit) {\n\n    }\n\n    @Override\n    public void insertAuditRecord(HxConfigInfoAudit hxConfigInfoAudit) {\n\n    }\n}\n<file_path>console/src/main/java/com/myhexin/nacos/console/config/ConfigInfoAuditPersistService.java\npackage com.myhexin.nacos.console.config;\n\nimport com.myhexin.nacos.console.proxy.vo.PublishConfigVo;\nimport com.alibaba.nacos.console.security.nacos.users.NacosUser;\n\npublic interface ConfigInfoAuditPersistService {\n\n    HxConfigInfoAudit getAuditRecord(String clusterName, String serviceName, String serviceType, String tenantId, String groupId, String dataId);\n\n    void updateAuditRecord(HxConfigInfoAudit hxConfigInfoAudit );\n\n    void insertAuditRecord(HxConfigInfoAudit hxConfigInfoAudit);\n}\n<file_path>config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfo.java\n    \n    private String type;\n    \n    public ConfigInfo() {\n    }\n    \n    public ConfigInfo(String dataId, String group, String content) {\n        super(dataId, group, content);\n    }\n    \n    public ConfigInfo(String dataId, String group, String appName, String content) {\n        super(dataId, group, content);\n        this.appName = appName;\n    }\n    \n    public ConfigInfo(String dataId, String group, String tenant, String appName, String content) {\n        super(dataId, group, content);\n        this.tenant = tenant;\n        this.appName = appName;\n    }\n    \n    public String getTenant() {\n        return tenant;\n    }\n    \n    public void setTenant(String tenant) {\n        this.tenant = tenant;\n    }\n    \n    public String getAppName() {\n        return appName;\n    }\n    \n    public void setAppName(String appName) {\n        this.appName = appName;\n    }\n    \n    public String getType() {\n        return type;\n    }\n    \n    public void setType(String type) {\n        this.type = type;\n    }\n    \n    @Override\n    public int hashCode() {\n        return super.hashCode();\n    }\n    \n    @Override\n    public boolean equals(Object obj) {\n        return super.equals(obj);\n    }\n    \n    @Override\n    public String toString() {\n        return \"ConfigInfo{\" + \"id=\" + getId() + \", dataId='\" + getDataId() + '\\'' + \", group='\" + getGroup() + '\\''\n                + \", tenant='\" + tenant + '\\'' + \", appName='\" + appName + '\\'' + \", content='\" + getContent() + '\\''\n                + \", md5='\" + getMd5() + '\\'' + '}';\n<file_path>config/src/main/java/com/alibaba/nacos/config/server/model/ConfigInfoBase.java\n    private long id;\n    \n    private String dataId;\n    \n    private String group;\n    \n    private String content;\n    \n    private String md5;\n    \n    public ConfigInfoBase() {\n    \n    }\n    \n    public ConfigInfoBase(String dataId, String group, String content) {\n        this.dataId = dataId;\n        this.group = group;\n        this.content = content;\n        if (this.content != null) {\n            this.md5 = MD5Utils.md5Hex(this.content, Constants.ENCODE);\n        }\n    }\n    \n    public long getId() {\n        return id;\n    }\n    \n    public void setId(long id) {\n        this.id = id;\n    }\n    \n    public String getDataId() {\n        return dataId;\n    }\n    \n    public void setDataId(String dataId) {\n        this.dataId = dataId;\n    }\n    \n    public String getGroup() {\n        return group;\n    }\n    \n    public void setGroup(String group) {\n        this.group = group;\n    }\n    \n    public String getContent() {\n        return content;\n    }\n    \n    public void setContent(String content) {\n        this.content = content;\n    }\n    \n    public String getMd5() {\n        return md5;\n    }\n    \n    public void setMd5(String md5) {",
    "relevantFileList": [],
    "filePath": "console/src/main/java/com/myhexin/nacos/console/config/HxConfigInfoAudit.java",
    "template": "java",
    "multiRes": {
      "hipilot": "服务名\n     */\n    private",
      "CodeQwen2.5-7B": "服务名",
      "copilot": "服务名，比如ifund-gateway\n     */\n    private",
      "CodeQwen1.5-7B": " 集群名，比如ifund-gateway"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.modules.topic.infrastructure.db.repository.mongo;\n\nimport com.mongodb.client.result.UpdateResult;\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.interfaces.rest.req.converter.HotContentConvert;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.repository.HotContentOperatingRepository;\nimport com.myhexin.community.operating.deploy.modules.topic.infrastructure.db.model.HotContentPoolDO;\nimport io.micrometer.core.instrument.util.StringUtils;\nimport lombok.RequiredArgsConstructor;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.data.mongodb.core.query.Update;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.stream.Collectors;\n\n/**\n * 热点内容\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:09\n */\n@Repository\n@RequiredArgsConstructor\npublic class HotContentOperatingRepositoryImpl implements HotContentOperatingRepository {\n\n    private final MongoTemplate hotContentMongoTemplate;\n\n    /**\n     * 新增热点内容至热点池\n     *\n     * @param hotContentPoolDTO 热点内容\n     */\n    @Override\n    public void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO) {\n        HotContentPoolDO hotContentPoolDO = HotContentConvert.INSTANCE.toHotContentDO(hotContentPoolDTO);\n        hotContentMongoTemplate.save(hotContentPoolDO);\n    }\n\n    /**\n     * 获取热门话题\n     *\n     * @param hotContentQuery 查询条件\n     * @return 热门话题\n     */\n    @Override\n    public List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery) {\n        // 1、构建查询条件\n     ",
    "infill": ".INTEGER_ZERO);\n        return hotContentMongoTemplate.updat",
    "suffix": "eFirst(query, update, HotContentPoolDO.class).getModifiedCount();\n    }\n\n\n    /**\n     * 根据HotContentQuery获取Query\n     *\n     * @param hotContentQuery 热点内容查询\n     * @return Query\n     */\n    public Query getMongoQueryByHotContentQuery(HotContentQuery hotContentQuery) {\n        Query query = new Query();\n        if (hotContentQuery.getId() != null) {\n            query.addCriteria(Criteria.where(\"id\").is(hotContentQuery.getId()));\n        }\n        if (hotContentQuery.getType() != null) {\n            query.addCriteria(Criteria.where(\"type\").is(hotContentQuery.getType()));\n        }\n        if (hotContentQuery.getCreator() != null) {\n            query.addCriteria(Criteria.where(\"creator\").is(hotContentQuery.getCreator()));\n        }\n        if (hotContentQuery.getRankId() != null) {\n            query.addCriteria(Criteria.where(\"rankId\").in(hotContentQuery.getRankId()));\n        }\n        query.limit(hotContentQuery.getPageSize());\n        query.skip(hotContentQuery.getSkipNum());\n        return query;\n    }\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/HotContentOperatingService.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.service;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\n\nimport java.util.List;\n\n/**\n * 热点池Service\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\npublic interface HotContentOperatingService {\n\n    /**\n     * 添加热点内容至热点池中\n     * @param hotContentPoolDTO 热点数据\n     */\n    void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery);\n\n    /**\n     * 获取热点池数据总数\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    Integer getHotContentPoolTotal(HotContentQuery hotContentQuery);\n\n    /**\n     * 更新热点内容\n     * @param hotContentPoolDTO 热点数据\n     * @return 被修改的内容数量\n     */\n    Long updateHotContent(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 更新热点池上线状态\n     * @param id 热点id\n     * @param type 热点type\n     * @return 更新条数\n     */\n    Long updateHotContentStatus(String id, String type);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/repository/HotContentOperatingRepository.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.repository;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\n\nimport java.util.List;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:08\n */\npublic interface HotContentOperatingRepository {\n\n    /**\n     * 添加热门话题\n     * @param hotContentPoolDTO 热门话题\n     */\n    void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 获取热门话题\n     * @param hotContentQuery 查询条件\n     * @return 热门话题\n     */\n    List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery);\n\n    /**\n     * 获取热门话题总数\n     * @param hotContentQuery 查询条件\n     * @return 热门话题总数\n     */\n    Integer getHotContentPoolTotal(HotContentQuery hotContentQuery);\n\n    /**\n     * 更新热点内容\n     * @param hotContentPoolDTO 热点数据\n     * @return 被修改的内容数量\n     */\n    Long updateHotContent(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 更新热点池上线状态\n     * @param id 热点id\n     * @param type 热点type\n     * @return 更新条数\n     */\n    Long updateHotContentStatus(String id, String type);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/infrastructure/db/model/HotContentPoolDO.java\n     */\n    private String labelBackgroundColor;\n\n    /**\n     * 标签的文字颜色\n     */\n    private String labelWordColor;\n\n    /**\n     * 标签名称\n     */\n    private String labelName;\n\n    /**\n     * 内容跳转链接\n     */\n    private String jumpUrl;\n\n    /**\n     * 创建时间\n     */\n    private Long ctime;\n\n    /**\n     * 修改时间\n     */\n    private Long mtime;\n\n    /**\n     * 操作人\n     */\n    private String operator;\n\n    /**\n     * 榜单状态\n     */\n    private Integer status;\n\n    /**\n     * 人工运营等级\n     */\n    private Integer priority;\n\n    /**\n     * 榜单id\n     */\n    private List<String> rankId;\n\n    /**\n     * 副标题\n     */\n    private String subtitle;\n\n    /**\n     * 图片\n     */\n    private String img;\n\n    /**\n     * 内容关联属性 1==相关股票  2==热文  3==投票 4==活动  5==副标题\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/impl/HotContentOperatingServiceImpl.java\n\n    private final HotContentOperatingRepository hotContentRepository;\n\n    /**\n     * 添加热点内容至热点池中\n     *\n     * @param hotContentPoolDTO 热点数据\n     */\n    @Override\n    public void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO) {\n        // 保存至数据库\n        hotContentRepository.addHotContentToPool(hotContentPoolDTO);\n    }\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    @Override\n    public List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPool(hotContentQuery);\n    }\n\n    /**\n     * 获取热点池数据总数\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    @Override\n    public Integer getHotContentPoolTotal(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPoolTotal(hotContentQuery);\n    }\n\n    /**\n     * 更新热点内容\n     *\n     * @param hotContentPoolDTO 热点数据\n     */\n    @Override\n    public Long updateHotContent(HotContentPoolDTO hotContentPoolDTO) {\n        // 更新数据库\n        return hotContentRepository.updateHotContent(hotContentPoolDTO);\n    }\n\n    /**\n     * 更新热点池上线状态\n     *\n     * @param id   热点id\n     * @param type 热点type\n     * @return 更新条数\n     */\n    @Override\n    public Long updateHotContentStatus(String id, String type) {\n        return hotContentRepository.updateHotContentStatus(id, type);\n    }\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/infrastructure/db/repository/mongo/HotContentOperatingRepositoryImpl.java",
    "template": "java",
    "multiRes": {
      "hipilot": "Query query = getMongoQueryByHotContentQuery(hotContentQuery);",
      "CodeQwen2.5-7B": "   Query query = getMongoQueryByHotContentQuery(hotContentQuery);",
      "copilot": ".INTEGER_ZERO);\n        return hotContentMongoTemplate.updat",
      "CodeQwen1.5-7B": "    Query query = getMongoQueryByHotContentQuery(hotContentQuery);"
    }
  },
  {
    "prefix": "package com.myhexin.zixun.conceptv2app.deploy.app.manager;\n\nimport com.myhexin.zixun.conceptv2app.deploy.common.config.CaffeineCacheConfig;\nimport com.myhexin.zixun.conceptv2app.deploy.common.external.feign.dto.SecurityInfoDTO;\nimport com.myhexin.zixun.conceptv2app.deploy.common.external.feign.dto.StockDTO;\nimport com.myhexin.zixun.conceptv2app.deploy.common.external.feign.service.FuYaoService;\nimport com.myhexin.zixun.conceptv2app.deploy.common.external.feign.service.SecurityInfoService;\nimport com.myhexin.zixun.conceptv2app.deploy.interfaces.rest.vo.converter.EventConverter;\nimport com.myhexin.zixun.conceptv2app.deploy.interfaces.rest.vo.event.EventStockVO;\nimport com.myhexin.zixun.conceptv2app.deploy.interfaces.rest.vo.event.EventVO;\nimport com.myhexin.zixun.conceptv2app.deploy.modules.concept.domain.exception.ConceptEventException;\nimport com.myhexin.zixun.conceptv2app.deploy.modules.event.domain.entity.EventEntity;\nimport com.myhexin.zixun.conceptv2app.deploy.modules.event.domain.entity.EventStockEntity;\nimport com.myhexin.zixun.conceptv2app.deploy.modules.event.domain.entity.StockInfoEntity;\nimport com.myhexin.zixun.conceptv2app.deploy.modules.event.domain.repository.StockSortService;\nimport com.myhexin.zixun.conceptv2app.deploy.modules.event.domain.service.EventService;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.stereotype.Component;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * @author: menghaizhu\n * @date: 2024/6/13 17:25\n */\n@Slf4j\n@Component\n@RequiredArgsConstructor\npublic class EventServiceManager {\n\n    public static final int DAYS_IN_A_MONTH = 30;\n\n    public static final int NUM_OF_TOP_STOCKS = 3;\n\n    private final FuYaoService fuyaoService;\n\n    private final EventService eventService;\n\n    private final StockSortService stockSortService;\n\n    private final SecurityInfoService securityInfoService;\n\n    private final EventConverter eventConverter;\n\n\n    @Cacheable(cacheNames = CaffeineCacheConfig.CACHE_NAME_EVENT_WORD, keyGenerator = \"hexinKeyGenerator\",\n            unless = \"#result == null\")\n    public EventVO getEventWord(String eventId) throws ConceptEventException {\n        EventVO eventVO = new EventVO();\n        eventVO.setEventId(eventId);\n        EventStockEntity eventDetail = eventService.getEventStock(eventId);\n        if (eventDetail == null) {\n            return eventVO;\n        }\n        String eventWord = eventDetail.getEventWord();\n        eventVO.setEventWord(eventWord);\n        // 检查词是否在今天炒什么中使用过，使用过则隐藏\n        List<EventEntity> pageEventList = eventService.getPageEventList(1, DAYS_IN_A_MONTH);\n        for (EventEntity entity : pageEventList) {\n            if (entity.isKeywordIsConcept()) {\n                continue;\n            }\n            String keyword = entity.getKeywordInfo().getKeyword();\n            if (eventWord.equals(keyword)) {\n                return eventVO;\n            }\n        }\n\n        if (Boolean.TRUE.equals(eventDetail.getIsConcept())) {\n            String indexCode = eventDetail.getConcept().getIndexCode();\n            Integer conceptStockNum = fuyaoService.getConceptStockNum(indexCode);\n            eventVO.setStockNum(conceptStockNum);\n            List<StockDTO> blockStockRank = fuyaoService.getBlockStockRank(indexCode, NUM_OF_TOP_STOCKS,\n                    LocalDate.now());\n            List<String> stockCodes = blockStockRank.stream()\n                    .map(StockDTO::getStockCode)\n                    .collect(Collectors.toList());\n            eventVO.setStockName(getStockNames(stockCodes));\n        } else {\n            // 如果不是概念，则获取事件的具体股票列表\n            \n           \n        }\n        return eventVO;\n    }\n\n\n    public EventStockVO getEventStock(String eventId) {\n        EventStockEntity eventDetail = eventService.getEventStock(eventId);\n        return eventConverter.to",
    "infill": "EventSt",
    "suffix": "ockVO(eventDetail);\n    }\n\n    /**\n     * 获取股票名称\n     *\n     * @param stockCodes 股票代码\n     * @return 股票名称\n     */\n    private List<String> getStockNames(List<String> stockCodes) {\n        Map<String, SecurityInfoDTO> stockNameList =\n                securityInfoService.getSecurityInfoByStockCode(stockCodes);\n        return stockNameList.values().stream()\n                .map(SecurityInfoDTO::getStockName)\n                .collect(Collectors.toList());\n    }\n\n}\n",
    "relevantFile": "",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/zixun/conceptv2app/deploy/app/manager/EventServiceManager.java",
    "template": "java",
    "multiRes": {
      "hipilot": "eventSt",
      "CodeQwen2.5-7B": "EventSt",
      "copilot": "EventSt",
      "CodeQwen1.5-7B": "EventSt"
    }
  },
  {
    "prefix": "package com.myhexin.ifund.ranking.deploy.interfaces.job.fund;\n\nimport com.alibaba.fastjson.JSON;\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.myhexin.ifund.ranking.api.dto.request.ConfigTrackReq;\nimport com.myhexin.ifund.ranking.deploy.common.external.service.DataCenterService;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.EtfMetaType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.FundMetaType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.SceneCycle;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.ProductInvestDto;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.po.RankingMetaDataPo;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.po.RankingTrackResultPo;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.infrastructure.db.dao.RankingMetaDataMapper;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.infrastructure.db.repository.RankingTrackResultServiceImpl;\nimport com.xxl.job.core.biz.model.ReturnT;\nimport com.xxl.job.core.handler.IJobHandler;\nimport com.xxl.job.core.handler.annotation.JobHandler;\nimport com.xxl.job.core.log.XxlJobLogger;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@JobHandler(\"FundTrackJobHandler\")\n@Component\n@Slf4j\npublic class FundTrackJobHandler extends IJobHandler {\n\n    private final RedisTemplate<String, Object> redisMarketTemplate;\n\n    private final RankingMetaDataMapper rankingMetaDataMapper;\n\n    private final RankingTrackResultServiceImpl rankingTrackResultService;\n\n    private final DataCenterService dataCenterService;\n\n    public FundTrackJobHandler(RedisTemplate<String, Object> redisMarketTemplate, RankingMetaDataMapper rankingMetaDataMapper,\n                               RankingTrackResultServiceImpl rankingTrackResultService, DataCenterService dataCenterService) {\n        this.redisMarketTemplate = redisMarketTemplate;\n        this.rankingMetaDataMapper = rankingMetaDataMapper;\n        this.rankingTrackResultService = rankingTrackResultService;\n        this.dataCenterService = dataCenterService;\n    }\n\n\n    @Override\n    public ReturnT<String> execute(String s) {\n        try {\n            XxlJobLogger.log(\"FundTrackJobHandler 开始执行\");\n            deal(s);\n\n        } catch (Exception e) {\n            XxlJobLogger.log(e);\n            XxlJobLogger.log(\"FundTrackJobHandler 执行错误 :{}\", e.getMessage());\n            return FAIL;\n        }\n        return SUCCESS;\n    }\n\n    private void deal(String s) {\n        //获取赛道列表配置数据\n        String cacheStr = (String) redisMarketTemplate.opsForValue().get(\"ranking_productInvestRanking\");\n        List<ProductInvestDto> list = JSON.parseArray(cacheStr, ProductInvestDto.class);\n        Map<String, List<ProductInvestDto>> map = new HashMap<>();\n        for (ProductInvestDto po : list) {\n            List<ProductInvestDto> trackList = map.getOrDefault(po.getThirdClassification(), new ArrayList<>());\n            trackList.add(po);\n            map.put(po.getThirdClassification(), trackList);\n        }\n\n        XxlJobLogger.log(\"calResult map={}\", map.size());\n        List<RankingTrackResultPo> poList = new ArrayLis",
    "infill": "ProductInvestDto::getFundCode).collect(Collectors.toList());\n        List<RankingMetaDataPo> metaDataList = ra",
    "suffix": "nkingMetaDataMapper.selectList(new LambdaQueryWrapper<RankingMetaDataPo>()\n                .eq(RankingMetaDataPo::getScene, \"FUND\")\n                .in(RankingMetaDataPo::getCode, codeList)\n                .in(RankingMetaDataPo::getDataType, Arrays.asList(FundMetaType.RANKING.name(), FundMetaType.RANKING_SCORE.name())));\n\n        Map<String, Map<String, String>> dataMap = new HashMap<>();\n        for (RankingMetaDataPo po : metaDataList) {\n            Map<String, String> map = dataMap.getOrDefault(po.getCode(), new HashMap<>());\n            map.put(po.getDataType(), po.getDataValue());\n            dataMap.put(po.getCode(), map);\n        }\n\n        String typeList = \"simpleName,mgmtName\";\n        //获取并填充名称字段\n        Map<String, Map<String, String>> dataCenterResult = dataCenterService.indexList(codeList, typeList);\n        Map<String, String> resultMap = calPercent(codeList, dataMap);\n\n        List<RankingTrackResultPo> poList = new ArrayList<>();\n        for (String code : codeList) {\n            RankingTrackResultPo res = RankingTrackResultPo.builder()\n                    .scene(\"ETF\")\n                    .trackName(trackPo.getTrackName())\n                    .trackCode(trackCode)\n                    .trackCount(trackPo.getTrackCount())\n                    .code(code)\n                    .name(dataCenterResult.get(code).get(\"simpleName\"))\n                    .companyName(dataCenterResult.get(code).get(\"mgmtName\"))\n                    .rank(Integer.parseInt(dataMap.get(code).get(EtfMetaType.RANKING.name())))\n                    .result(resultMap.get(code))\n                    .cycleTime(SceneCycle.DAY.getTime())\n                    .build();\n            poList.add(res);\n        }\n        return poList;\n    }\n\n    private Map<String, String> calPercent(List<String> codeList, Map<String, Map<String, String>> dataMap) {\n        if (CollectionUtils.isEmpty(codeList)) {\n            return new HashMap<>();\n        }\n        Map<String, BigDecimal> lnRes = new HashMap<>();\n        BigDecimal total = new BigDecimal(\"0\");\n        for (String code : codeList) {\n            String value = dataMap.get(code).get(FundMetaType.RANKING_SCORE.name());\n            BigDecimal math = new BigDecimal(value).setScale(6, RoundingMode.DOWN).add(new BigDecimal(\"0.000001\"));\n            BigDecimal lnResult = BigDecimal.valueOf(Math.log(math.doubleValue()));\n            total = total.add(lnResult);\n            lnRes.put(code, lnResult);\n        }\n        Map<String, String> res = new HashMap<>();\n        for (String code : codeList) {\n            String result = lnRes.get(code).divide(total, 6, RoundingMode.DOWN).multiply(new BigDecimal(\"100\")).toPlainString();\n            res.put(code, result);\n        }\n        return res;\n    }\n\n\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/ifund/ranking/deploy/modules/ranking/domain/dto/ProductInvestDto.java\npackage com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto;\n\nimport lombok.Data;\n\n@Data\npublic class ProductInvestDto {\n\n    private String fundCode;\n\n    private String fundName;\n\n    private String rank;\n    \n    private String thirdClassification;\n\n}\n<file_path>deploy/src/main/java/com/myhexin/ifund/ranking/deploy/modules/ranking/domain/service/calpoint/fund/FundRankingCalPoint.java\n\n    @Override\n    public List<MetaData> calData(List<Product> productList, Map<String, Map<String, String>> sourceMetaData, Map<String, ConfigData> configData, SceneCycle sceneCycle) {\n        //机构排名\n        Map<String, String> institutionRanking = sourceMetaData.get(FundMetaType.INSTITUTION_RANKING.name());\n\n        //营销排名\n        Map<String, String> marketRanking = sourceMetaData.get(FundMetaType.MARKETING_RANKING.name());\n\n        //投研排名\n        Map<String, String> investRanking = queryInvestRanking();\n\n        //潜力排名\n        Map<String, String> potentialRanking = sourceMetaData.get(FundMetaType.POTENTIAL_RANKING.name());\n\n        //权重配置\n        String publicWeight = configData.get(\"publicWeight\").getConfigValue();\n        PublicWeightConfig publicWeightConfig = JSON.parseObject(publicWeight, PublicWeightConfig.class);\n        BigDecimal orgRevenueWeight = new BigDecimal(publicWeightConfig.getOrgRevenueWeight()).divide(new BigDecimal(\"100\"), 6, RoundingMode.DOWN);\n        BigDecimal productRevenueWeight = new BigDecimal(publicWeightConfig.getProductRevenueWeight()).divide(new BigDecimal(\"100\"), 6, RoundingMode.DOWN);\n        BigDecimal productInvestRank = new BigDecimal(publicWeightConfig.getProductInvestRank()).divide(new BigDecimal(\"100\"), 6, RoundingMode.DOWN);\n        BigDecimal potentialIncomeRank = new BigDecimal(publicWeightConfig.getPotentialIncomeRank()).divide(new BigDecimal(\"100\"), 6, RoundingMode.DOWN);\n\n\n        Map<String, BigDecimal> institutionRankingNormal = RankingUtils.normalization(institutionRanking);\n        Map<String, BigDecimal> marketRankingNormal = RankingUtils.normalization(marketRanking);\n        Map<String, BigDecimal> investRankingNormal = RankingUtils.normalization(investRanking);\n        Map<String, BigDecimal> potentialRankingNormal = RankingUtils.normalization(potentialRanking);\n\n        List<MetaData> sumNormal = new ArrayList<>();\n        for (Product product : productList) {\n            String code = product.getCode();\n            BigDecimal sum = marketRankingNormal.getOrDefault(code, new BigDecimal(\"0\")).multiply(productRevenueWeight)\n                    .add(institutionRankingNormal.getOrDefault(code, new BigDecimal(\"0\")).multiply(orgRevenueWeight))\n                    .add(investRankingNormal.getOrDefault(code, new BigDecimal(\"0\")).multiply(productInvestRank))\n                    .add(potentialRankingNormal.getOrDefault(code, new BigDecimal(\"0\")).multiply(potentialIncomeRank));\n            MetaData data = MetaData.builder()\n                    .dataType(MetaDataType.builder().sceneType(scene()).metaDataType(FundMetaType.RANKING_SCORE.name()).build())\n                    .code(code)\n                    .value(sum.toPlainString())\n                    .cycleTime(sceneCycle.getTime())\n                    .build();\n            sumNormal.add(data);\n        }\n\n        sumNormal = sumNormal.stream().sorted(Comparator.comparing(o -> new BigDecimal(o.getValue()))).collect(Collectors.toList());\n\n        List<MetaData> res = RankingUtils.rankingBySortedData(sumNormal, targetMetaData(), sceneCycle.getTime());\n        res.addAll(sumNormal);\n        return res;\n    }\n\n    private Map<String, String> queryInvestRanking() {\n        String cacheStr = (String) redisMarketTemplate.opsForValue().get(\"ranking_productInvestRanking\");\n        List<ProductInvestDto> list = JSON.parseArray(cacheStr, ProductInvestDto.class);\n\n        Map<String, String> res = new HashMap<>();\n        if (!CollectionUtils.isEmpty(list)) {\n            for (ProductInvestDto dto : list) {\n                res.put(dto.getFundCode(), dto.getRank());",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/ifund/ranking/deploy/interfaces/job/fund/FundTrackJobHandler.java",
    "template": "java",
    "multiRes": {
      "hipilot": "();\n        for (String key : map.keySet()) {\n            List<RankingTrackResultPo> res = calResult(map.get(key));\n            poList.addAll(res);\n        }\n\n        rankingTrackResultService.saveBatch(poList);",
      "CodeQwen2.5-7B": "t<>();",
      "copilot": "ProductInvestDto::getFundCode).collect(Collectors.toList());\n        List<RankingMetaDataPo> metaDataList = ra",
      "CodeQwen1.5-7B": "t<>();"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.app.manager;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolResultDTO;\nimport com.myhexin.community.operating.deploy.common.external.feign.request.AddHotContentRequest;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n/**\n * Manager类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 20:48\n */\n@Component\n@RequiredArgsConstructor\npublic class HotContentOperatingManager {\n    private final HotContentOperatingService hotContentOperatingService;\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param id       内容id\n     * @param type     内容类型\n     * @param creator  创建者\n     * @param page     当前页\n     * @param pageSize 页大小\n     * @param status   状态信息\n     * @retur",
    "infill": "\n     * 添加热点内容至热点池中\n     * @param request 请求参数\n     *\n     ",
    "suffix": "*/\n    public void addHotContentToRank(AddHotContentRequest request) {\n        \n    }\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/controller/HotContentOperatingController.java\npackage com.myhexin.community.operating.deploy.interfaces.rest.controller;\n\nimport com.myhexin.community.operating.deploy.app.manager.HotContentOperatingManager;\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolResultDTO;\nimport com.myhexin.community.operating.deploy.common.external.feign.request.AddHotContentRequest;\nimport com.myhexin.community.operating.deploy.interfaces.rest.vo.BaseResponseVO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.vo.RespStatusEnum;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.*;\n\n/**\n * 内容池 -- Controller\n * @author ningwenyu@myhexin.com\n * @date 2024/6/17 21:50\n */\n@RestController\n@RequestMapping(\"/auth/api/hot_module/v1/hot_content\")\n@RequiredArgsConstructor\npublic class HotContentOperatingController {\n    private final HotContentOperatingManager hotContentOperatingManager;\n\n    /**\n     * 获取热点池数据\n     * @param id 内容id\n     * @param type 内容类型\n     * @param creator 创建者\n     * @param page 当前页\n     * @param pageSize 页大小\n     * @param status 状态信息\n     * @return 热点池数据\n     */\n    @GetMapping(\"get_hot_content_pool\")\n    public BaseResponseVO<HotContentPoolResultDTO> getHotContentPool(@RequestParam(\"id\") String id,\n                                                                     @RequestParam(\"type\") String type,\n                                                                     @RequestParam(\"creator\") String creator,\n                                                                     @RequestParam(\"page\") Integer page,\n                                                                     @RequestParam(\"page_size\") Integer pageSize,\n                                                                     @RequestParam(\"status\") Integer status) {\n        return BaseResponseVO.success(hotContentOperatingManager.getHotContentPool(id, type, creator, page, pageSize, status));\n    }\n    \n    @PostMapping(\"add_hot_content_to_rank\")\n    public BaseResponseVO<Void> addHotContentToRank(@RequestBody AddHotContentRequest request) {\n        hotContentOperatingManager.addHotContentToRank(request);\n        return BaseResponseVO.success();\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/repository/HotContentOperatingRepository.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.repository;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\n\nimport java.util.List;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:08\n */\npublic interface HotContentOperatingRepository {\n\n    /**\n     * 添加热门话题\n     * @param hotContentPoolDTO 热门话题\n     */\n    void addHotContent(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 获取热门话题\n     * @param hotContentQuery 查询条件\n     * @return 热门话题\n     */\n    List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery);\n\n    /**\n     * 获取热门话题总数\n     * @param hotContentQuery 查询条件\n     * @return 热门话题总数\n     */\n    Integer getHotContentPoolTotal(HotContentQuery hotContentQuery);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/HotContentOperatingService.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.service;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\n\nimport java.util.List;\n\n/**\n * 热点池Service\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\npublic interface HotContentOperatingService {\n\n    /**\n     * 添加热点内容至热点池中\n     * @param hotContentPoolDTO 热点数据\n     */\n    void addHotContent(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery);\n\n    /**\n     * 获取热点池数据总数\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    Integer getHotContentPoolTotal(HotContentQuery hotContentQuery);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/impl/HotContentOperatingServiceImpl.java\npackage com.myhexin.community.operating.deploy.modules.topic.domain.service.impl;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.repository.HotContentOperatingRepository;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * 热点内容Service实现\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\n@Service\n@RequiredArgsConstructor\npublic class HotContentOperatingServiceImpl implements HotContentOperatingService {\n\n    private final HotContentOperatingRepository hotContentRepository;\n\n    /**\n     * 添加热点内容至热点池中\n     *\n     * @param hotContentPoolDTO 热点数据\n     */\n    @Override\n    public void addHotContent(HotContentPoolDTO hotContentPoolDTO) {\n        // 保存至数据库\n        hotContentRepository.addHotContent(hotContentPoolDTO);\n    }\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    @Override\n    public List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPool(hotContentQuery);\n    }\n\n    /**\n     * 获取热点池数据总数\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    @Override\n    public Integer getHotContentPoolTotal(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPoolTotal(hotContentQuery);\n    }\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/HotContentOperatingManager.java",
    "template": "java",
    "multiRes": {
      "hipilot": "n 热点池数据\n     ",
      "CodeQwen2.5-7B": "n 热点池数据内容",
      "copilot": "\n     * 添加热点内容至热点池中\n     * @param request 请求参数\n     *\n     ",
      "CodeQwen1.5-7B": "n 筛选结果"
    }
  },
  {
    "prefix": "package com.myhexin.sre.change.event.deploy.modules.plane.domain.aggregates;\n\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.entity.ChangeExeScene;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.valueobjects.ExePlanStatus;\nimport lombok.Data;\n\n/**\n * 变更执行计划单\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/22\n */\n@Data\npublic class ChangeExePlanOrder {\n    /**\n     * 变更执行计划单ID\n     */\n    private Long planId;\n    private \n    /**\n     * 变更源变更工单/记录唯一ID\n     */\n    private String bizOrderId;\n    /**\n     * 变更执行场景\n     */\n    private ChangeExeScene scene;\n    /**\n     * 变更执行状态\n     */\n    private ExePlanStatus",
    "infill": " status;\n}\n",
    "suffix": "",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/query/ChangeBaseRequest.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\n\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Size;\n\n\n/**\n * 变更统一接入参数基类\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangeBaseRequest {\n    @NotNull(message = \"变更源不能为空\")\n    @Size(max = 32)\n    private String platform;\n    @NotNull(message = \"变更源记录ID不能为空\")\n    @Size(max = 256)\n    private String uni;\n    @NotNull(message = \"变更环境不能为空\")\n    @Size(max = 16)\n    private String env;\n    @NotNull(message = \"变更场景不能为空\")\n    @Size(max = 128)\n    private String sceneCode;\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/query/ChangePlanStartRequest.java\npackage com.myhexin.sre.change.event.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport javax.validation.constraints.NotNull;\n\n\n/**\n * 变更执行单请求\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n\n@Data\n@EqualsAndHashCode(callSuper = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class ChangePlanStartRequest extends ChangePlanRequest {\n    /**\n     * 变更开始时间\n     */\n    private String startTime;\n    /**\n     * 变更执行人\n     */\n    @NotNull(message = \"变更执行人不能为空\")\n    private String executor;\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/valueobjects/ExePlanStatus.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.valueobjects;\n\n/**\n * 变更计划的执行状态\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/28\n */\npublic enum ExePlanStatus {\n    /**\n     * 初始化\n     */\n    INIT(\"init\", false),\n    /**\n     * 运行中\n     */\n    RUNNING(\"running\", false),\n    /**\n     * 成功\n     */\n    SUCCESS(\"success\", true),\n    /**\n     * 失败\n     */\n    FAIL(\"fail\", true),\n    /**\n     * 取消\n     */\n    CANCEL(\"cancel\", true),\n    /**\n     * 回滚\n     */\n    ROLLBACK(\"rollback\", true),\n    ;\n\n    private final String code;\n\n    private final boolean finalStatus;\n\n    ExePlanStatus(String code, boolean finalStatus) {\n        this.code = code;\n        this.finalStatus = finalStatus;\n    }\n    public String getCode() {\n        return code;\n    }\n\n    public boolean isFinalStatus() {\n        return finalStatus;\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/enums/ChangeSceneGenerationEnum.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.enums;\n\n/**\n * 变更场景代际\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/28\n */\npublic enum ChangeSceneGenerationEnum {\n    /**\n     * 文本\n     */\n    G0(\"G0\"),\n    /**\n     * json\n     */\n    G1(\"G1\");\n\n    private final String name;\n\n    private ChangeSceneGenerationEnum(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/aggregates/ChangeExePlanOrder.java",
    "template": "java",
    "multiRes": {
      "hipilot": "status;\n}",
      "CodeQwen2.5-7B": " status;",
      "copilot": " status;\n}\n",
      "CodeQwen1.5-7B": "  exeStatus;"
    }
  },
  {
    "prefix": "package com.hexin.android.biz_quote.charts.curve.aisignal;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport com.hexin.android.base_common_util.ApplicationUtil;\nimport com.hexin.android.base_common_util.log.HXLog;\nimport com.hexin.android.biz_quote.charts.curve.CurveLineParser;\nimport com.hexin.android.biz_quote.charts.curve.data.CurveObj;\nimport com.hexin.plat.android.R;\nimport com.hexin.uicomponents.bitmap.BitmapCacheManager;\nimport com.hexin.uicomponents.theme.CommonThemeManager;\nimport com.hexin.util.ListUtils;\nimport org.jetbrains.annotations.NotNull;\nimport java.text.NumberFormat;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic final class KlineAiDataDrawer {\n    private static final String TAG = \"KlineAiDataDrawerTag\";\n\n    public static final String AI_SIGNAL_RED = \"buy\";\n    public static final String AI_SIGNAL_GREEN = \"sale\";\n    public static final int INVALID_KLINE_INDEX = -1;\n    public static final int CURVE_TIME",
    "infill": "= \" + aiSignalItem);\n            Integer currentKlineIndex = checkAiSignalParam(axisPos, start, end, ai",
    "suffix": "SignalItem, highArrays, lowArrays);\n            Log.e(\"wangzhuotest\", \"KlineAiDataDrawer drawKlineAiData: currentKlineIndex = \" + currentKlineIndex);\n            if (currentKlineIndex == null) {\n                continue;\n            }\n\n            int currentRelativeIndex = currentKlineIndex - start;\n\n            // 获取坐标\n            int highPos = CurveDrawUtil.getAxisXInScreen(highArrays[currentKlineIndex], maxValue, minValue, top, bottom);\n            int lowPos = CurveDrawUtil.getAxisXInScreen(lowArrays[currentKlineIndex], maxValue, minValue, top, bottom);\n\n            if (!CurveDrawUtil.isPositionAvailable(highPos, lowPos)) {\n                continue;\n            }\n\n            //是否是绿色卖出标志位\n            boolean isGreenSymbol = AI_SIGNAL_GREEN.equals(aiSignalItem.getType());\n            float iconWidth = isGreenSymbol ? greenIconWidth : redIconWidth;\n            float middleX = axisPos[currentRelativeIndex];\n\n            //左右边界情况\n            float halfIconWidth = iconWidth / 2;\n            if (middleX - halfIconWidth < 0) {\n                continue;\n            }\n\n            if (isGreenSymbol) {\n                drawGreenIcon(canvas, paint, greenBitmap, overflowGreenBitmap, topLimit, highPos,\n                        lowPos, middleX);\n            } else {\n                drawRedIcon(canvas, paint, redBitmap, overflowRedBitmap, bottomLimit,\n                        highPos, lowPos, middleX);\n            }\n        }\n    }\n\n    private static double[] getExtremeValue(@NonNull CurveObj curveObj, int[] dataIds, int i2) {\n        CurveObj.EQCurveItemData highItem = curveObj.getItem(dataIds[i2]);\n        return (highItem != null) ? highItem.getData() : null;\n    }\n\n    @Nullable\n    private static Integer checkAiSignalParam(float[] axisPos, int start, int end,\n                                              AiSignalItem aiSignalItem, double[] highArrays, double[] lowArrays) {\n        if (aiSignalItem == null || highArrays == null || lowArrays == null) {\n            return null;\n        }\n        if (!AI_SIGNAL_GREEN.equals(aiSignalItem.getType()) && !AI_SIGNAL_RED.equals(aiSignalItem.getType())) {\n            return null;\n        }\n\n        int currentKlineIndex = aiSignalItem.getKlineIndex();\n        if (currentKlineIndex == INVALID_KLINE_INDEX ||\n                currentKlineIndex < start || currentKlineIndex >= end) {\n            return null;\n        }\n\n        if (currentKlineIndex - start >= axisPos.length) {\n            return null;\n        }\n        return currentKlineIndex;\n    }\n\n    @Nullable\n    private static CurveObj.TagMaxMin checkParamAndGetExtremeValue(@Nullable Canvas canvas,\n                                                                   @NonNull CurveLineParser.EQCurveLineDesc desc,\n                                                                   @NotNull CurveObj curveObj,\n                                                                   @Nullable AiSignalData aiSignalData,\n                                                                   float[] axisPos,\n                                                                   int zoomIndex) {\n        if (zoomIndex == 0) {\n            return null;\n        }\n\n        //可空变量判空校验\n        if (canvas == null || aiSignalData == null) {\n            return null;\n        }\n\n        //坐标点\n        if (axisPos == null || axisPos.length <= 0) {\n            return null;\n        }\n\n        //最大最小值\n        CurveObj.TagMaxMin maxMin = curveObj.getMaxMin(desc.getClassId());\n        if (maxMin == null) {\n            return null;\n        }\n        return maxMin;\n    }\n\n    private static void drawRedIcon(@NotNull Canvas canvas, @NotNull Paint picPaint, Bitmap redBitmap,\n                                    Bitmap overflowRedBitmap, int bottomLimit, int highPos, int lowPos, float middleX) {\n        boolean overflow = false;\n        //red的绘制\n        float redIconYPos = lowPos;\n        if (redIconYPos + redBitmap.getHeight() > bottomLimit) {\n            redIconYPos = highPos - overflowRedBitmap.getHeight();\n            overflow = true;\n        }\n        float iconPosX = middleX - (overflow ? overflowRedBitmap.getWidth() / 2 : redBitmap.getWidth() / 2);\n        canvas.drawBitmap(overflow ? overflowRedBitmap : redBitmap, iconPosX, redIconYPos, picPaint);\n    }\n\n    private static void drawGreenIcon(@NotNull Canvas canvas, @NotNull Paint picPaint, Bitmap greenBitmap,\n                                      Bitmap overflowGreenBitmap, int topLimit, int highPos,\n                                      int lowPos, float middleX) {\n        boolean overflow = false;\n        float greenIconYPos = highPos - greenBitmap.getHeight();\n        if (greenIconYPos < topLimit) {\n            greenIconYPos = lowPos;\n            overflow = true;\n        }\n        float iconPosX = middleX - (overflow ? overflowGreenBitmap.getWidth() / 2 : greenBitmap.getWidth() / 2);\n        canvas.drawBitmap(overflow ? overflowGreenBitmap : greenBitmap, iconPosX, greenIconYPos, picPaint);\n    }\n}\n",
    "relevantFile": "<file_path>biz_quote/charts/src/main/java/com/hexin/android/biz_quote/charts/curve/aisignal/AiSignalItem.java\npackage com.hexin.android.biz_quote.charts.curve.aisignal;\n\nimport com.google.gson.annotations.SerializedName;\n\npublic class AiSignalItem {\n    @SerializedName(\"date\")\n    private String mDate;\n    @SerializedName(\"type\")\n    private String mType;\n    private int klineIndex;\n\n    public String getDate() {\n        return mDate;\n    }\n\n    public String getType() {\n        return mType;\n    }\n\n    public int getKlineIndex() {\n        return klineIndex;\n    }\n\n    public void setKlineIndex(int klineIndex) {\n        this.klineIndex = klineIndex;\n    }\n\n    @Override\n    public String toString() {\n        return \"AiSignalItem{\" +\n                \"mData='\" + mDate + '\\'' +\n                \", mType='\" + mType + '\\'' +\n                '}';\n    }\n}\n<file_path>biz_quote/charts/src/main/java/com/hexin/android/biz_quote/charts/curve/aisignal/KlineAiSignalRequest.java\n        /**\n         * 失败处理\n         */\n        void onRequestFailed();\n    }\n\n    private void notifyRequestSuccess(@NonNull AiSignalBean bean,\n                                      @NonNull IDataReceiveListener dataReceiveListener) {\n        HXLog.AM_QUOTE().w(TAG, \"notifyRequestSuccess\");\n        GlobalHandler.post(() -> dataReceiveListener.onRequestSuccess(bean));\n\n    }\n\n    private void notifyRequestFailed(IDataReceiveListener dataReceiveListener) {\n        GlobalHandler.post(() -> dataReceiveListener.onRequestFailed());\n    }\n\n    private void parseResponse(@NonNull Response response,\n                               @NonNull IDataReceiveListener dataReceiveListener) throws IOException {\n        String resultContent = response.body() == null ? \"\" : response.body().string();\n        if (resultContent.isEmpty()) {\n            notifyRequestFailed(dataReceiveListener);\n            return;\n        }\n\n        HXLog.AM_QUOTE().d(TAG, \"parseResponse resultContent:{}\", resultContent);\n        AiSignalBean remoteBean = GsonUtil.fromJson(resultContent, AiSignalBean.class);\n\n        if (remoteBean == null || remoteBean.getData() == null || !remoteBean.isSuccess()) {\n            notifyRequestFailed(dataReceiveListener);\n            return;\n        }\n        notifyRequestSuccess(remoteBean, dataReceiveListener);\n    }\n\n    public void requestAiData(String strategyId, @NonNull EQBasicStockInfo basicStockInfo,\n                              @NonNull IDataReceiveListener dataReceiveListener) {\n\n        String originUrl = UnifyUrlManager.getInstance().getUrlByResourceId(R.string.url_ai_signal);\n        String url = String.format(originUrl,\n                basicStockInfo.getStockCode(),\n                basicStockInfo.getMarketId(),\n                strategyId);\n\n        String cookie = CookieUpdateHelper.getLastCookie();\n        HXLog.AM_QUOTE().d(TAG, \"requestAiData cookie:{}\", cookie);\n        HXLog.AM_QUOTE().d(TAG, \"requestAiData url.trim():{}\", url.trim());\n\n        OkHttpUtils.get().url(url.trim())\n                .addHeader(\"Cookie\", cookie)\n                .build(HxHttpTools.buildOkhttpTcpDnsService())\n                .connTimeOut(OkHttpUtils.CONNECT_TIMEOUT)\n                .readTimeOut(OkHttpUtils.READ_TIMEOUT)\n                .enqueue(new Callback() {\n                    @Override\n                    public void onFailure(Call call, IOException e) {\n                        notifyRequestFailed(dataReceiveListener);\n                    }\n\n                    @Override\n<file_path>biz_quote/charts/src/main/java/com/hexin/android/biz_quote/charts/curve/aisignal/KlineAiSignalProcessor.java\n//            setKlineAiSignalData(null);\n//            return;\n//        }\n        if(mCurveGraph != null){\n            AiSignalData currentData = mCurveGraph.getKlineAiData();\n            if (currentData != null && TextUtils.equals(strategyId, currentData.getStrategyId())){\n                //如果策略id与显示中的一样，则没有必要再次请求数据\n                HXLog.AM_QUOTE().d(TAG, \"requestAiSignalData strategyId is not changed\");\n                return;\n            }\n        }\n\n        KlineAiSignalRequest klineAiSignalRequest = new KlineAiSignalRequest();\n        klineAiSignalRequest.requestAiData(strategyId, stockInfo, new KlineAiSignalRequest.IDataReceiveListener() {\n            @Override\n            public void onRequestSuccess(@NonNull AiSignalBean aiSignalBean) {\n                boolean dataValid = isSignalDataValid(aiSignalBean);\n                if (dataValid) {\n                    setKlineAiSignalData(aiSignalBean.getData());\n                } else {\n                    setKlineAiSignalData(null);\n                }\n            }\n\n            /**\n             * 判断ai信号数码是否有效\n             * @param aiSignalBean ai信号数据\n             */\n            private boolean isSignalDataValid(@NonNull AiSignalBean aiSignalBean) {\n                boolean dataValid = false;\n                if (aiSignalBean.getData() != null && aiSignalBean.getData().getItemList() != null) {\n                    dataValid = true;\n                    for (int i = 0; i < aiSignalBean.getData().getItemList().size(); i++) {\n                        AiSignalItem aiSignalItem = aiSignalBean.getData().getItemList().get(i);\n                        if (aiSignalItem == null || TextUtils.isEmpty(aiSignalItem.getDate()) ||\n                                TextUtils.isEmpty(aiSignalItem.getType())) {\n                            dataValid = false;\n                            break;\n                        }\n                    }\n                }\n                return dataValid;\n            }\n\n            @Override\n            public void onRequestFailed() {\n                HXLog.AM_QUOTE().d(TAG, \"onRequestFailed\");\n                setKlineAiSignalData(null);\n            }\n        });\n    }\n\n    private void setKlineAiSignalData(@Nullable AiSignalData aiSignalData) {\n        HXLog.AM_QUOTE().d(TAG, \"setKlineAiSignalData\");\n        //校验CurveGraph有效性\n        if (mCurveGraph != null && mCurveSurfaceView != null) {\n            HXLog.AM_QUOTE().i(KlineBSPointUtils.TAG, \"setKlineAiSignalData update curve graph\");\n            mCurveGraph.setKlineAiData(aiSignalData);\n            mCurveSurfaceView.notifyDraw();\n        }",
    "relevantFileList": [],
    "filePath": "biz_quote/charts/src/main/java/com/hexin/android/biz_quote/charts/curve/aisignal/KlineAiDataDrawer.java",
    "template": "java",
    "multiRes": {
      "hipilot": "POS = 0;\n\n    private KlineAiDataDrawer() {\n    }",
      "CodeQwen2.5-7B": "_LIMIT = 1000;",
      "copilot": "= \" + aiSignalItem);\n            Integer currentKlineIndex = checkAiSignalParam(axisPos, start, end, ai",
      "CodeQwen1.5-7B": " _INTERVAL = 60 * 60 * 1000;"
    }
  },
  {
    "prefix": "package com.myhexin.community.user.medal.deploy.modules.medal.domain.service;\n\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.MedalWallDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.UserWearMedalDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.Medal;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalCategory;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalSeries;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 用户勋章缓存存储\n *\n * @author chenmengsong@myhexin.com\n * @date 2024/5/29\n */\npublic interface UserMedalCacheService {\n\n    /**\n     * 整个勋章墙获取\n     *\n     * @return 勋章墙\n     */\n    MedalWallDTO getMedalWall();\n\n    /**\n     * 更新勋章墙缓存\n     */\n    void updateMedalWallCache();\n\n    /**\n     * 勋章分类获取\n     *\n     * @param categoryId 勋章分类\n     * @return 勋章分类\n     */\n    MedalCategory getMedalCategory(Integer categoryId);\n\n    /**\n     * 勋章系列获取\n     *\n     * @param seriesId 勋章系列ID\n     * @return 勋章系列\n     */\n    MedalSeries getMedalSeries(Integer seriesId);\n    \n    /**\n     * 勋章获取\n     *\n     * @param medalId 勋章ID\n     * @return 勋章\n     */\n    Medal getMedal",
    "infill": "(Integer medalId);\n\n    /**\n     * 获",
    "suffix": "取用户佩戴勋章列表\n     *\n     * @param uid 用户ID\n     * @return 勋章列表\n     */\n    List<UserWearMedalDTO> getUserWearMedalList(Long uid);\n\n    /**\n     * 保存用户佩戴勋章列表\n     *\n     * @param uid               用户ID\n     * @param userWearMedalList 勋章列表\n     */\n    void saveUserWearMedalList(Long uid, List<UserWearMedalDTO> userWearMedalList);\n\n    /**\n     * 批量获取用户佩戴勋章列表\n     *\n     * @param uidList 用户ID列表\n     * @return 用户佩戴勋章列表\n     */\n    Map<Long, List<UserWearMedalDTO>> multiGetUserWearMedalList(List<Long> uidList);\n\n\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/user/medal/deploy/common/consts/CacheTypeEnum.java\npackage com.myhexin.community.user.medal.deploy.common.consts;\n\nimport lombok.Getter;\n\nimport java.time.Duration;\n\n/**\n * 缓存配置枚举类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 16:51\n */\n@Getter\npublic enum CacheTypeEnum {\n\n    /**\n     * 历史勋章配置缓存\n     */\n    HISTORY_MEDAL_CACHE(Duration.ofMinutes(30), 1, 5),\n\n    /**\n     * 勋章类别详情缓存\n     */\n    MEDAL_CATEGORY_CACHE(Duration.ofMinutes(1), 5, 20),\n\n    /**\n     * 勋章系列详情缓存\n     */\n    MEDAL_SERIAL_CACHE(Duration.ofMinutes(1), 1000, 5000),\n\n    /**\n     * 勋章缓存\n     */\n    MEDAL_CACHE(Duration.ofMinutes(1), 1000, 5000),\n\n    /**\n     * 用户佩戴勋章数量\n     */\n    USER_MEDAL_NUM(Duration.ofMinutes(1), 1000, 50000);\n\n    /**\n     * 过期时间\n     */\n    private final Duration expire;\n\n    /**\n     * 初始化大小\n     */\n    private final int initCapacity;\n\n    /**\n     * 最大值\n     */\n    private final int maxSize;\n\n    CacheTypeEnum(Duration expire, int initCapacity, int maxSize) {\n        this.expire = expire;\n        this.initCapacity = initCapacity;\n        this.maxSize = maxSize;\n    }\n<file_path>src/main/java/com/myhexin/community/post/publish/modules/bulletchat/domain/entity/BulletChatInfo.java\npackage com.myhexin.community.post.publish.modules.bulletchat.domain.entity;\n\nimport com.myhexin.community.post.publish.modules.post.domain.entity.ForumInfo;\nimport com.myhexin.community.user.entity.UserInfo;\nimport lombok.Data;\n\n/**\n * 弹幕实体\n *\n * @author chenmengsong@myhexin.com\n * @date 2022/5/11\n */\n@Data\npublic class BulletChatInfo {\n\n    /**\n     * pid\n     */\n    private Long pid;\n    /**\n     * fid\n     */\n    private Integer fid;\n    /**\n     * uid\n     */\n    private Long uid;\n    /**\n     * 内容\n     */\n    private String content;\n    /**\n     * ip\n     */\n    private String ip;\n    /**\n     * ipv6\n     */\n    private String ipv6;\n    /**\n     * 创建时间\n     */\n    private Long ctime;\n    /**\n     * 更新时间\n     */\n    private Long mtime;\n    /**\n     * 来源\n     */\n    private Integer fromId;\n    /**\n     * 来源\n     */\n    private String from;\n    /**\n     * 有效值\n     */\n    private Integer valid;\n    /**\n<file_path>deploy/src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/service/impl/UserMedalCacheServiceImpl.java\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.MedalWallDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.UserWearMedalDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.repository.MedalCategoryRepository;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.repository.MedalRepository;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.repository.MedalSeriesRepository;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.repository.UserMedalRepository;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.service.UserMedalCacheService;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.Medal;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalCategory;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalSeries;\nimport lombok.RequiredArgsConstructor;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * 用户勋章缓存层\n *\n * @author chenmengsong@myhexin.com\n * @date 2024/5/29\n */\n@Service\n@RequiredArgsConstructor\npublic class UserMedalCacheServiceImpl implements UserMedalCacheService, InitializingBean {\n\n    private static MedalWallDTO medalWallCache = null;\n\n    private final StringRedisTemplate userMedalRedisTemplate;\n    private final UserMedalRepository userMedalRepository;\n    private final MedalCategoryRepository medalCategoryRepository;\n    private final MedalSeriesRepository medalSeriesRepository;\n    private final MedalRepository medalRepository;\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        medalWallCache = getMedalWallFromDb();\n    }\n\n    /**\n     * 整个勋章墙获取\n     *\n     * @return 勋章墙\n     */\n    @Override\n    public MedalWallDTO getMedalWall() {\n        return medalWallCache;\n    }\n\n    /**\n     * 更新勋章墙缓存 / 定时更新\n     */\n    @Override\n    public void updateMedalWallCache() {\n        medalWallCache = getMedalWallFromDb();",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/service/UserMedalCacheService.java",
    "template": "java",
    "multiRes": {
      "hipilot": "(Integer medalId);",
      "CodeQwen2.5-7B": "(Integer medalId);",
      "copilot": "(Integer medalId);\n\n    /**\n     * 获",
      "CodeQwen1.5-7B": "(Integer medalId);"
    }
  },
  {
    "prefix": "package com.myhexin.sre.change.event.deploy.modules.plane.infrastructure.db.converter;\n\nimport com.alibaba.fastjson.JSON;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.aggregates.ChangeExePlan;\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.entity.ChangeExeScene;\nimport com.myhexin.sre.change.event.deploy.modules.plane.infrastructure.db.model.ChangeExePlanDo;\nimport com.myhexin.sre.change.event.deploy.modules.plane.infrastructure.db.model.ChangeExeSceneDo;\nimport org.apache.commons.lang3.ObjectUtils;\n\n/**\n * 变更执行计划转换器\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/24\n */\npublic class ChangeExeSceneConvertor {\n    public static ChangeExeScene toDomainObject(ChangeExeSceneDo changeExeSceneDo) {\n        if (ObjectUtils.isEmpty(changeExeSceneDo)) {\n            throw new IllegalArgumentException(\"changeExeSceneDo is null\");\n        }\n        ChangeExeScene changeExeScene = new ChangeExeScene();\n        changeExeScene.setSceneName(changeExeSceneDo.getSceneName());\n        changeExeScene.setSceneCode(changeExeSceneDo.getSceneCode());\n        changeExeScene.setPlatform(",
    "infill": "changeExeSceneDo.getPlatform());\n        changeExeScene.setSceneDesc(changeExeSceneDo.getSceneDesc());\n        changeExeScene.set\n        changeExePlanDo.setCreator",
    "suffix": "(changeExePlan.getCreator());\n        changeExePlanDo.setExecutor(changeExePlan.getExecutor());\n        changeExePlanDo.setStartTime(changeExePlan.getStartTime());\n        changeExePlanDo.setFinishTime(changeExePlan.getFinishTime());\n        changeExePlanDo.setReason(changeExePlan.getReason());\n        changeExePlanDo.setEnv(changeExePlanDo.getEnv());\n        changeExePlanDo.setBizOrderId(changeExePlan.getBizOrderId());\n        changeExePlanDo.setParamsJson(changeExePlan.getParamsJson());\n        changeExePlanDo.setDetailJson(changeExePlan.getDetailJson());\n        if (ObjectUtils.isEmpty(changeExePlan.getGrayInfo())) {\n            changeExePlanDo.setGrayFlag(changeExePlan.getGrayInfo().getGrayFlag());\n        }\n        if (ObjectUtils.isEmpty(changeExePlan.getScene())) {\n            changeExePlanDo.setSceneCode(changeExePlan.getScene().getSceneCode());\n            changeExePlanDo.setPlatform(changeExePlan.getScene().getPlatform());\n        }\n        if (ObjectUtils.isEmpty(changeExePlan.getDepartment())) {\n            changeExePlanDo.setDepartmentId(changeExePlan.getDepartment().getId());\n            changeExePlanDo.setDepartmentType(changeExePlan.getDepartment().getType());\n        }\n        if (ObjectUtils.isEmpty(changeExePlan.getInstances())) {\n            changeExePlanDo.setInstances(JSON.toJSONString(changeExePlan.getInstances()));\n        }\n        if (ObjectUtils.isEmpty(changeExePlan.getDeployments())) {\n            changeExePlanDo.setInstances(JSON.toJSONString(changeExePlan.getDeployments()));\n        }\n        if (ObjectUtils.isEmpty(changeExePlan.getDetailItems())) {\n            changeExePlanDo.setInstances(JSON.toJSONString(changeExePlan.getDetailItems()));\n        }\n        return changeExePlanDo;\n    }\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/entity/ChangeExeScene.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.entity;\n\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.enums.ChangeSceneGenerationEnum;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * 变更执行场景\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/22\n */\n@Data\n@NoArgsConstructor\npublic class ChangeExeScene {\n    private String sceneCode;\n\n    private String sceneName;\n\n    private String sceneDesc;\n\n    private String platform;\n\n    private Boolean needAudit;\n\n    private ChangeSceneGenerationEnum generation;\n\n    public ChangeExeScene(String sceneCode,String platform) {\n        this.sceneCode = sceneCode;\n        this.platform = platform;\n    }\n\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/infrastructure/db/dao/ChangeExeSceneDaoImpl.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.infrastructure.db.dao;\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.myhexin.sre.change.event.deploy.modules.plane.infrastructure.db.model.ChangeExeSceneDo;\nimport org.springframework.stereotype.Component;\n\n/**\n * 变更计划场景dao\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/24\n */\n@Component\npublic class ChangeExeSceneDaoImpl extends ServiceImpl<ChangeExeSceneDoMapper, ChangeExeSceneDo>\n        implements IService<ChangeExeSceneDo> {\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/infrastructure/db/dao/ChangeExeSceneDoMapper.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.infrastructure.db.dao;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.myhexin.sre.change.event.deploy.modules.plane.infrastructure.db.model.ChangeExeSceneDo;\nimport org.apache.ibatis.annotations.Mapper;\n\n/**\n * 变更计划场景mapper\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/24\n */\n@Mapper\npublic interface ChangeExeSceneDoMapper extends BaseMapper<ChangeExeSceneDo> {\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/infrastructure/db/dao/ChangeExePlanDoMapper.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.infrastructure.db.dao;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.myhexin.sre.change.event.deploy.modules.plane.infrastructure.db.model.ChangeExePlanDo;\nimport org.apache.ibatis.annotations.Mapper;\n\n/**\n * 变更执行计划mapper\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/24\n */\n@Mapper\npublic interface ChangeExePlanDoMapper extends BaseMapper<ChangeExePlanDo> {\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/infrastructure/db/converter/ChangeExeSceneConvertor.java",
    "template": "java",
    "multiRes": {
      "hipilot": "changeExeSceneDo.getPlatform());\n        return changeExeScene;\n    }",
      "CodeQwen2.5-7B": "changeExeSceneDo.getPlatform());",
      "copilot": "changeExeSceneDo.getPlatform());\n        changeExeScene.setSceneDesc(changeExeSceneDo.getSceneDesc());\n        changeExeScene.set\n        changeExePlanDo.setCreator",
      "CodeQwen1.5-7B": " changeExeSceneDo.getPlatform());"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.common.external.feign.response;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/28\n */\n@Data\npublic class AgentWorkFlowResponse {\n    /**\n     * task_id 任务id\n     */\n    private String task_id;\n\n    /**\n     * workflow_run_id 工作流运行id\n     */\n    private String workflow_run_id;\n\n    /**\n     * data 数据\n     */\n    private Data data;\n\n    /**\n     * @author wangming@myhexin.com\n     * @date 2024/06/28\n     */\n    public static class Data {\n        /**\n         * ",
    "infill": "id\n         *",
    "suffix": "/\n        private String id;\n\n        /**\n         * workflow_id 工作流id\n         */\n        private String workflow_id;\n\n        /**\n         * status 状态\n         */\n        private String status;\n\n        /**\n         * outputs 输出\n         */\n        private Outputs outputs;\n\n        /**\n         *\n         */\n        private String error;\n        private double elapsed_time;\n        private int total_tokens;\n        private int total_steps;\n        private long created_at;\n        private long finished_at;\n\n        // getters and setters\n    }\n\n    /**\n     * @author wangming@myhexin.com\n     * @date 2024/06/28\n     */\n    public static class Outputs {\n        private List<String> output;\n\n        // getters and setters\n    }\n}\n",
    "relevantFile": "<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/repository/UserMedalRepository.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.repository;\n\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.MedalWallDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.UserMedalDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.UserMedal;\n\nimport java.util.List;\n\n/**\n * 用户勋章仓库接口\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 14:18\n */\npublic interface UserMedalRepository {\n\n    /**\n     * 发放勋章\n     *\n     * @param userId     用户id\n     * @param userMedals 勋章实体\n     * @return 是否发放成功\n     */\n    boolean obtainMedal(Long userId, List<UserMedal.UserMedalMongoInfo> userMedals);\n\n    /**\n     * 删除通过用户勋章id\n     *\n     * @param userId  用户id\n     * @param medalId 勋章id\n     * @return 是否成功\n     */\n    boolean deleteByUserMedalId(Long userId, Integer medalId);\n\n    /**\n     * 获取勋章墙\n     *\n     * @return 勋章墙数据\n     */\n    MedalWallDTO getMedalWall();\n\n    /**\n     * 获取用户拥有勋章\n     *\n     * @param uid 用户id\n     * @return 用户拥有勋章\n     */\n    UserMedalDTO getUserMedal(Long uid);\n\n    /**\n     * 修改用户佩戴信息数据\n     *\n     * @param uid     用户id\n     * @param medalId 勋章id\n     * @param wearFlag    是否佩戴：true-佩戴，false-未佩戴\n     * @return 更新成功:true; 更新失败:false\n     */\n    boolean updateWearMedal(Long uid, Integer medalId, Boolean wearFlag);\n\n    /**\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/common/consts/CacheTypeEnum.java\npackage com.myhexin.community.user.medal.deploy.common.consts;\n\nimport lombok.Getter;\n\nimport java.time.Duration;\n\n/**\n * 缓存配置枚举类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 16:51\n */\n@Getter\npublic enum CacheTypeEnum {\n\n    /**\n     * 历史勋章配置缓存\n     */\n    HISTORY_MEDAL_CACHE(Duration.ofMinutes(30), 1, 5),\n\n    /**\n     * 勋章类别详情缓存\n     */\n    MEDAL_CATEGORY_CACHE(Duration.ofMinutes(1), 5, 20),\n\n    /**\n     * 勋章系列详情缓存\n     */\n    MEDAL_SERIAL_CACHE(Duration.ofMinutes(1), 1000, 5000),\n\n    /**\n     * 勋章缓存\n     */\n    MEDAL_CACHE(Duration.ofMinutes(1), 1000, 5000),\n\n    /**\n     * 用户佩戴勋章数量\n     */\n    USER_MEDAL_NUM(Duration.ofMinutes(1), 1000, 50000);\n\n    /**\n     * 过期时间\n     */\n    private final Duration expire;\n\n    /**\n     * 初始化大小\n     */\n    private final int initCapacity;\n\n    /**\n     * 最大值\n     */\n    private final int maxSize;\n\n    CacheTypeEnum(Duration expire, int initCapacity, int maxSize) {\n        this.expire = expire;\n        this.initCapacity = initCapacity;\n        this.maxSize = maxSize;\n    }\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/service/UserMedalService.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.domain.service;\n\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.MedalWallDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.UserMedalDetailResultDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.UserMedalResultDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.UserWearMedalResultDTO;\n\nimport java.util.List;\n\n\n/**\n * 用户勋章业务接口\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 14:13\n */\n\npublic interface UserMedalService {\n\n    /**\n     * 获取用户勋章信息，标记在勋章墙内\n     *\n     * @param uid       用户id\n     * @param medalWall 勋章墙\n     * @param selfView  是否自身视角\n     * @return 用户勋章墙信息\n     */\n    UserMedalResultDTO getUserMedal(Long uid, MedalWallDTO medalWall, Boolean selfView);\n\n\n    /**\n     * 获取旧版勋章墙数据\n     *\n     * @param uid 用户id\n     * @return 旧版勋章墙\n     */\n    List<UserMedalResultDTO.MedalCategoryResultInfo> getOldMedalWall(Long uid);\n\n    /**\n     * 获取勋章详情信息\n     *\n     * @param uid          用户id\n     * @param medalId      勋章id\n     * @param medalWallDTO 勋章墙DTO\n     * @param selfView     是否自身视角\n     * @return 勋章详情信息\n     */\n    UserMedalDetailResultDTO getMedalDetail(Long uid, Integer medalId, MedalWallDTO medalWallDTO, Boolean selfView);\n\n    /**\n     * 获取用户佩戴的勋章\n     *\n     * @param uid 用户id\n     * @return 用户佩戴的勋章\n     */\n    UserWearMedalResultDTO getWearMedal(Long uid);\n\n    /**\n     * 批量获取用户佩戴勋章\n     *\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/infrastructure/db/model/UserMedal.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.util.List;\n\n/**\n * 用户 - 勋章关系表\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 17:33\n */\n\n@Data\n@Document(\"user_medal\")\npublic class UserMedal {\n\n    /**\n     * 用户ID\n     */\n    @Id\n    private Long userId;\n\n    /**\n     * 用户勋章列表\n     */\n    private List<UserMedalMongoInfo> userMedalList;\n\n    /**\n     * 用户 - 勋章信息\n     */\n    @Data\n    @Builder\n    @AllArgsConstructor\n    @NoArgsConstructor\n    public static class UserMedalMongoInfo {\n\n        /**\n         * 勋章id\n         */\n        private Integer medalId;\n\n        /**\n         * 勋章等级\n         */\n        private Integer medalLevel;\n\n        /**\n         * 勋章名称\n         */\n        private String medalName;\n\n        /**\n         * 勋章logo\n         */",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/common/external/feign/response/AgentWorkFlowResponse.java",
    "template": "java",
    "multiRes": {
      "hipilot": "id id\n         *",
      "CodeQwen2.5-7B": "id id",
      "copilot": "id\n         *",
      "CodeQwen1.5-7B": " id id"
    }
  },
  {
    "prefix": "package com.myhexin.sre.change.event.deploy.interfaces.rest.vo;\n\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNam",
    "infill": ";\n    /**\n     * 接口名称\n     */\n    private String interfacePath;\n    /**\n     * yapi地址\n  ",
    "suffix": "   */\n    private String yapiUrl;\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/app/manager/InfluenceManager.java\npackage com.myhexin.sre.change.event.deploy.app.manager;\n\nimport com.myhexin.sre.change.event.deploy.interfaces.rest.vo.InfluenceConfigVo;\nimport com.myhexin.sre.change.event.deploy.interfaces.rest.vo.InfluenceDataVo;\nimport com.myhexin.sre.change.event.deploy.interfaces.rest.vo.InfluenceInterfaceVo;\nimport com.myhexin.sre.change.event.deploy.modules.engine.domain.entity.appinfo.ChangeEventProgram;\nimport com.myhexin.sre.change.event.deploy.modules.engine.domain.service.IChangeEventProgramService;\nimport com.myhexin.sre.change.event.deploy.modules.form.domain.dto.influence.InfluenceData;\nimport com.myhexin.sre.change.event.deploy.modules.form.infrastructure.external.feign.service.ThsCmdbFeignService;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * 影响面管理\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/14\n */\n@Service\n@Slf4j\n@RequiredArgsConstructor\npublic class InfluenceManager {\n    private final IChangeEventProgramService changeEventProgramServiceImpl;\n\n    private final ThsCmdbFeignService thsCmdbFeignServiceImpl;\n\n    public List<InfluenceDataVo> getInfluenceDataList(Long eventId) {\n        List<InfluenceDataVo> influenceDataVos = new ArrayList<>();\n        // 根据事件ID获取变更的程序列表\n        List<ChangeEventProgram> changeEventPrograms = changeEventProgramServiceImpl\n                .getChangeEventProgramByEventId(eventId);\n        log.info(\"Event-{},获取变更影响面程序列表：{}\", eventId, changeEventPrograms);\n        if (ObjectUtils.isEmpty(changeEventPrograms)) {\n            return influenceDataVos;\n        }\n        for (ChangeEventProgram changeEventProgram : changeEventPrograms) {\n            InfluenceDataVo influenceDataVo = new InfluenceDataVo();\n            InfluenceData influenceData = thsCmdbFeignServiceImpl.getInfluences(changeEventProgram.getName(),\n                    getProgramVersion(changeEventProgram.getVersion()));\n            if (ObjectUtils.isEmpty(influenceData)) {\n                log.info(\"Event-{},获取变更影响面信息为空\", eventId);\n                continue;\n            }\n            influenceDataVo.setProgramName(influenceData.getProgramName());\n            influenceDataVo.setHttpInterface(influenceData.getHttpInterface().stream().map(influenceInterface -> {\n                        InfluenceInterfaceVo influenceInterfaceVo = new InfluenceInterfaceVo();\n                        influenceInterfaceVo.setHttpType(influenceInterface.getHttpType());\n                        influenceInterfaceVo.setYapiUrl(influenceInterface.getYapiUrl());\n                        return influenceInterfaceVo;\n            }).collect(Collectors.toList()));\n            influenceDataVo.setConfig(influenceData.getConfig().stream().map(influenceConfig -> {\n                InfluenceConfigVo influenceConfigVo = new InfluenceConfigVo();\n                influenceConfigVo.setConfigKey(influenceConfig.getConfigKey());\n                influenceConfigVo.setEnvironment(influenceConfig.getEnvironment());\n<file_path>deploy/src/main/java/com/myhexin/sre/change/risk/detected/deploy/modules/identify/infrastructure/db/model/RuleExecuteRecordDo.java\npackage com.myhexin.sre.change.risk.detected.deploy.modules.identify.infrastructure.db.model;\n\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * 规则执行记录表\n *\n * @author zhounan3@myhexin.com\n * @since 2023/08/18\n */\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"rule_execute_record\")\npublic class RuleExecuteRecordDo {\n    /**\n     * 自增id\n     */\n    @TableId(type = IdType.AUTO, value = \"id\")\n    private Long id;\n    /**\n     * 变更事件ID\n     */\n    private Long eventId;\n    /**\n     * 所属报告ID\n     */\n    private Long reportId;\n    /**\n     * 模型记录ID即checkId\n     */\n    private Long modelId;\n    /**\n     * 规则ID\n     */\n    private Long ruleId;\n    /**\n     * 风险点ID\n     */\n    private Long riskPointId;\n    /**\n     * 风险等级\n     */\n    private Integer riskLevel;\n    /**\n     * rpn分数\n     */\n    private Integer rpnScore;\n    /**\n     * 检测进度\n     */\n    private Integer checkedProgress;\n    /**\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/form/infrastructure/external/feign/result/CmdbInfluenceResult.java\npackage com.myhexin.sre.change.event.deploy.modules.form.infrastructure.external.feign.result;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * 变更影响面请求结果\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/17\n */\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class CmdbInfluenceResult {\n\n    @JsonProperty(\"error_code\")\n    private Integer errorCode;\n\n    @JsonProperty(\"error_msg\")\n    private String errorMsg;\n    @JsonProperty(\"result\")\n    private InfluenceResult result;\n\n    @Data\n    @JsonIgnoreProperties(ignoreUnknown = true)\n    public static class InfluenceResult {\n        @JsonProperty(\"business_name\")\n        private String businessName;\n        @JsonProperty(\"code_scan_info\")\n        private ScanInfo codeScanInfo;\n    }\n\n    @Data\n    @JsonIgnoreProperties(ignoreUnknown = true)\n    public static class ScanInfo {\n        private Integer codeScanFlag;\n        @JsonProperty(\"data\")\n        private DataInfo data;\n    }\n\n    @Data\n    @JsonIgnoreProperties(ignoreUnknown = true)\n    public static class DataInfo {\n        @JsonProperty(\"http_interface\")\n        private List<Interface> interfaces;\n        @JsonProperty(\"config\")\n        private List<Config> configs;\n    }\n\n    @Data\n    @JsonIgnoreProperties(ignoreUnknown = true)\n    public static class Interface {\n        /**\n         * 包路径\n         */\n        @JsonProperty(\"package_path\")\n        private String packagePath;\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/form/domain/dto/influence/InfluenceInterface.java\npackage com.myhexin.sre.change.event.deploy.modules.form.domain.dto.influence;\n\nimport lombok.Builder;\nimport lombok.Data;\n\n\n/**\n * 影响面接口信息\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/14\n */\n@Data\n@Builder\npublic class InfluenceInterface {\n    /**\n     * 包路径\n     */\n    private String packagePath;\n    /**\n     * 类名称\n     */\n    private String className;\n    /**\n     * 方法名称\n     */\n    private String methodName;\n    /**\n     * 方法路径\n     */\n    private String methodPath;\n    /**\n     * 接口请求类型\n     */\n    private String httpType;\n    /**\n     * yapi地址\n     */\n    private String yapiUrl;\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/sre/change/event/deploy/interfaces/rest/vo/InfluenceInterfaceVo.java",
    "template": "java",
    "multiRes": {
      "hipilot": "ing;\nimport lombok.Data;",
      "CodeQwen2.5-7B": "ing;",
      "copilot": ";\n    /**\n     * 接口名称\n     */\n    private String interfacePath;\n    /**\n     * yapi地址\n  ",
      "CodeQwen1.5-7B": "ing;"
    }
  },
  {
    "prefix": "package com.myhexin.community.user.medal.deploy.interfaces.rest.converter;\n\nimport com.myhexin.community.user.medal.deploy.modules.historymedal.domain.dto.UserHistoryMedalDTO;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.*;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.Medal;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalCategory;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalSeries;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.UserMedal;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.po.MedalWallInfoPO;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.Named;\nimport org.mapstruct.factory.Mappers;\n\nimport java.util.Optional;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/4/24 20:16\n */\n@Mapper(imports = {Optional.class})\npublic interface MedalConvert {\n\n    MedalConvert INSTANCE = Mappers.getMapper(MedalConvert.class);\n\n    /**\n     * 用户勋章DTO转换\n     *\n     * @param userMedal 原始用户勋章信息\n     * @return 用户勋章DTO\n     */\n    UserMedalDTO toUserMedalDTO(UserMedal userMedal);\n\n    /**\n     * 勋章DTO转换\n     *\n     * @param medal 勋章\n     * @return 勋章DTO\n     */\n    MedalDTO toMedalDTO(Medal medal);\n\n    /**\n     * 勋章墙信息PO转换\n     *\n     * @param medalWallInfoPO 勋章墙信息PO\n     * @return 勋章DTO\n     */\n    @Mapping(target = \"description\", source = \"medalDescription\")\n    @Mapping(target = \"logoUrl\", source = \"medalLogoUrl\")\n    @Mapping(target = \"acquisitionCriteria\", source = \"medalAcquisitionCriteria\")\n    @Mapping(target = \"ctime\", source = \"medalCtime\")\n    @Mapping(target = \"utime\", source = \"medalUtime\")\n    @Mapping(target = \"ext\", source = \"medalExt\")\n    MedalDTO toMedalDTO(MedalWallInfoPO medalWallInfoPO);\n\n    /**\n     * 勋章系列DTO转换\n     *\n     * @param medalSeries 勋章系列\n     * @return 勋章系列DTO\n     */\n    MedalSeriesDTO toMedalSeriesDTO(MedalSeries medalSeries);\n\n    /**\n     * 勋章墙信息PO转换\n     *\n     * @param medalWallInfoPO 勋章墙信息PO\n     * @return 勋章系列DTO\n     */\n    @Mapping(target = \"id\", source = \"seriesId\")\n    @Mapping(target = \"categoryId\", source = \"categoryId\")\n    @Mapping(target = \"name\", source = \"seriesName\")\n   ",
    "infill": "\"seriesExpirationTime\")\n    @Mapping(target = \"validStatus\", source = \"seriesValidStatus\")\n    @Mapping(target = \"ctime\", source = \"seriesC",
    "suffix": "time\")\n    @Mapping(target = \"utime\", source = \"seriesUtime\")\n    @Mapping(target = \"ext\", source = \"seriesExt\")\n    MedalSeriesDTO toMedalSeriesDTO(MedalWallInfoPO medalWallInfoPO);\n\n    /**\n     * 勋章类别DTO转换\n     *\n     * @param medalCategory 勋章类别\n     * @return 勋章类别DTO\n     */\n    @Mapping(target = \"categoryRank\", expression = \"java(Optional.ofNullable(medalCategory.getCategoryRank()).orElse(0))\")\n    MedalCategoryDTO toMedalCategoryDTO(MedalCategory medalCategory);\n\n\n    /**\n     * 将历史勋章系列转换至新版返回值\n     *\n     * @param userHistoryMedalDTO 原始历史勋章信息\n     * @return 新版返回值\n     */\n    @Mapping(target = \"level\", source = \"medalLevel\", qualifiedByName = \"levelToInt\")\n    @Mapping(target = \"medalName\", source = \"medalName\")\n    @Mapping(target = \"logoUrl\", source = \"logoUrl\")\n    @Mapping(target = \"acquisitionTime\", source = \"acquiredMedalTime\")\n    @Mapping(target = \"acquisitionCriteria\", source = \"condition\")\n    UserMedalDetailResultDTO.UserMedalDetailInfo toUserMedalDetailInfo(UserHistoryMedalDTO userHistoryMedalDTO);\n\n    /**\n     * 将旧版勋章的level由拼接形式转换为纯等级形式\n     *\n     * @param level 等级\n     * @return int型等级\n     */\n    @Named(\"levelToInt\")\n    default Integer levelToInt(String level) {\n        if (level != null && level.contains(\"_\")) {\n            return Integer.parseInt(level.split(\"_\")[1]);\n        }\n        return null;\n    }\n}\n",
    "relevantFile": "<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/infrastructure/db/model/MedalCategory.java\n */\n@Data\n@EqualsAndHashCode(callSuper = false)\n@SuppressWarnings(\"serial\")\npublic class MedalCategory extends Model<MedalCategory> {\n\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    /**\n     * 类别名称，如“股东勋章”\n     */\n    private String name;\n\n    /**\n     * 描述，勋章备注\n     */\n    private String description;\n\n    /**\n     * 勋章类别排序\n     */\n    private Integer categoryRank;\n\n    /**\n     * 勋章类别类型 common 普通勋章 gudong 股东勋章\n     */\n    private String type;\n\n    /**\n     * 勋章类别是否生效，有效（valid）、无效（invalid）\n     */\n    private String validStatus;\n\n    /**\n     * 创建时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 更新时间\n     */\n    private LocalDateTime utime;\n\n    /**\n     * 扩展字段\n     */\n    private String ext;\n\n\n    /**\n     * 获取主键值\n     *\n     * @return 主键值\n     */\n    @Override\n    protected Serializable pkVal() {\n        return this.id;\n    }\n}\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalCategoryDTO.java\n * @date 2024/4/23 11:10\n */\n@Data\npublic class MedalCategoryDTO {\n\n    /**\n     * 奖章类别ID\n     */\n    private Integer id;\n\n    /**\n     * 名称\n     */\n    private String name;\n    /**\n     * 类别描述\n     */\n    private String description;\n\n    /**\n     * 有效状态（valid：有效；invalid：无效）\n     */\n    private String validStatus;\n\n    /**\n     * 奖章类型（common：普通；activity：特殊）\n     */\n    private String medalType;\n\n    /**\n     * 勋章类别创建时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 勋章类别更新时间\n     */\n    private LocalDateTime utime;\n\n    /**\n     * 勋章系列列表\n     */\n    private List<MedalSeriesDTO> medalSeriesList;\n\n    /**\n     * 勋章类别排序\n     */\n    private Integer categoryRank;\n\n    /**\n     * 勋章类别类型 common 普通勋章 gudong 股东勋章\n     */\n    private String type;\n\n    /**\n     * 扩展信息\n     */\n    private String ext;\n}\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalWallDTO.java\n */\n@Data\npublic class MedalWallDTO {\n\n    /**\n     * 勋章类型列表\n     */\n    private List<MedalCategoryInfo> categoryList;\n\n    @Data\n    public static class MedalCategoryInfo {\n        /**\n         * 勋章类别详情\n         */\n        private MedalCategoryDTO medalCategoryDTO;\n\n        /**\n         * 勋章系列列表\n         */\n        List<MedalSeriesInfo> seriesList;\n\n        @Data\n        public static class MedalSeriesInfo {\n\n            /**\n             * 勋章系列详情\n             */\n            private MedalSeriesDTO medalSeriesDTO;\n\n            /**\n             * 勋章详情\n             */\n            private List<MedalDTO> medalList;\n        }\n    }\n\n\n    /**\n     * 转化为勋章墙格式\n     *\n     * @param medalCategoryList 所有勋章分类\n     * @param medalWallInfoList 连表查询返回值\n     * @return 勋章墙DTO对象\n     */\n    public static MedalWallDTO mapMedalsToWallDTO(List<MedalCategory> medalCategoryList,\n                                                  List<MedalWallInfoPO> medalWallInfoList) {\n        Map<Integer, MedalCategoryInfo> categoryMap = new HashMap<>(medalWallInfoList.size());\n        // 处理类别信息\n        for (MedalCategory medalCategory : medalCategoryList) {\n            MedalWallDTO.MedalCategoryInfo categoryInfo = new MedalWallDTO.MedalCategoryInfo();\n            MedalCategoryDTO category = MedalConvert.INSTANCE.toMedalCategoryDTO(medalCategory);\n            categoryInfo.setMedalCategoryDTO(category);\n            categoryInfo.setSeriesList(new ArrayList<>());\n            categoryMap.put(medalCategory.getId(), categoryInfo);\n        }\n\n        for (MedalWallInfoPO medalWallInfoPO : medalWallInfoList) {\n            // 获取类别信息\n            MedalWallDTO.MedalCategoryInfo categoryInfo = categoryMap.get(medalWallInfoPO.getCategoryId());\n            if (categoryInfo == null) {\n<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/dto/MedalDTO.java\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 13:06\n */\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class MedalDTO {\n\n    /**\n     * id\n     */\n    private Integer medalId;\n\n    /**\n     * 获取条件\n     */\n    private String acquisitionCriteria;\n\n    /**\n     * 获取时间\n     */\n    private LocalDateTime ctime;\n\n    /**\n     * 描述\n     */\n    private String description;\n\n    /**\n     * 扩展字段\n     */\n    private String ext;\n\n    /**\n     * logo地址\n     */\n    private String logoUrl;\n\n    /**\n     * 等级\n     */\n    private Integer medalLevel;\n\n    /**\n     * 勋章名称\n     */\n    private String medalName;\n\n    /**\n     * 勋章系列id\n     */\n    private Integer seriesId;\n\n    /**\n     * 修改时间\n     */\n    private LocalDateTime utime;",
    "relevantFileList": [],
    "filePath": "src/main/java/com/myhexin/community/user/medal/deploy/interfaces/rest/converter/MedalConvert.java",
    "template": "java",
    "multiRes": {
      "hipilot": "@Mapping(target = \"description\", source = \"seriesDescription\")\n    @Mapping(target = \"ctime\", source = \"seriesC",
      "CodeQwen2.5-7B": " @Mapping(target = \"description\", source = \"seriesDescription\")",
      "copilot": "\"seriesExpirationTime\")\n    @Mapping(target = \"validStatus\", source = \"seriesValidStatus\")\n    @Mapping(target = \"ctime\", source = \"seriesC",
      "CodeQwen1.5-7B": "  @Mapping(target = \"description\", source = \"seriesDescription\")"
    }
  },
  {
    "prefix": "package com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.service;\n/**\n * 审核人策略模式\n *\n * 根据变更场景，选择不同的审批人和审核内容\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/27\n */\npublic interface AuditorStrategy {\n    void ",
    "infill": "execute();\n    Stri",
    "suffix": "ng getAuditor(String sceneCode);\n    String getAuditContent(String sceneCode);\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/sre/change/risk/detected/deploy/modules/audit/domain/aggregates/AuditOrder.java\npackage com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.aggregates;\n\nimport com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.enums.AuditStatusEnum;\nimport com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.service.AuditorStrategy;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\npublic class AuditOrder {\n    private Long changePlanId;\n    private Long auditSysId;\n    private String sceneCode;\n    private String platform;\n    private String auditOrderType;\n    private String auditor;\n    private String auditContent;\n    private AuditStatusEnum auditStatus;\n    private String auditResultMsg;\n\n    public AuditOrder(Long changePlanId, Long auditSysId, String sceneCode, String platform, String auditOrderType) {\n        this.changePlanId = changePlanId;\n        this.auditSysId = auditSysId;\n        this.sceneCode = sceneCode;\n        this.platform = platform;\n        this.auditOrderType = auditOrderType;\n    }\n    public void updateAuditor(AuditorStrategy auditorStrategy) {\n        this.auditor = auditorStrategy.getAuditor(sceneCode);\n    }\n    public void updateAuditContent(AuditorStrategy auditorStrategy) {\n        this.auditContent = auditorStrategy.getAuditContent(sceneCode);\n    }\n    public void updateAuditStatus(AuditStatusEnum auditStatus, String auditResultMsg) {\n        this.auditStatus = auditStatus;\n        this.auditResultMsg = auditResultMsg;\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/risk/detected/deploy/modules/audit/domain/service/impl/AuditorStrategySelect.java\npackage com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.service.impl;\n\nimport com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.service.AuditorStrategy;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Map;\n\n@Service\npublic class AuditorStrategySelect {\n    private final Map<String, AuditorStrategy> strategyMap;\n\n    public AuditorStrategySelect(Map<String, AuditorStrategy> strategyMap) {\n        this.strategyMap = strategyMap;\n    }\n\n    public void executeStrategy(String strategyId) {\n        strategyMap.get(strategyId).execute();\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/risk/detected/deploy/modules/audit/domain/aggregates/Auditor.java\npackage com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.aggregates;\n\nimport com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.valueobject.AuditDepartment;\nimport lombok.Data;\n\n/**\n * 审核人\n *\n * @author 周楠@myhexin.com\n * @date 2024/06/27\n */\n@Data\npublic class Auditor {\n    private String auditorId;\n    private AuditDepartment auditDepartment;\n\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/risk/detected/deploy/modules/audit/domain/valueobject/AuditDepartment.java\npackage com.myhexin.sre.change.risk.detected.deploy.modules.audit.domain.valueobject;\n\nimport lombok.Data;\n\n/**\n * 审核流程部门标识\n *\n * @author 周楠@myhexin.com\n * @date 2024/06/27\n */\n@Data\npublic class AuditDepartment {\n    private String departmentId;\n    private String departmentType;\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/sre/change/risk/detected/deploy/modules/audit/domain/service/AuditorStrategy.java",
    "template": "java",
    "multiRes": {
      "hipilot": "execute();",
      "CodeQwen2.5-7B": "audit(String sceneCode);",
      "copilot": "execute();\n    Stri",
      "CodeQwen1.5-7B": " setAuditor(String sceneCode, String auditor);"
    }
  },
  {
    "prefix": "package com.myhexin.news.enums;\n\nimport com.jqka.ovse.framework.common.enums.I18nLang;\n\n\n\n/**\n * @author xuzekui\n * @date 2022/9/7 9:07\n * @description\n */\npublic enum LanguageMode {\n\n    /**\n     * from english to english\n     */\n    ENGLISH(I18nLang.EN.getCode()),\n    /**\n     * from english to chinese\n     */\n    CHINESE(I18nLang.ZH.getCode()),\n    /**\n     * from english to spanish\n     */\n    SPANISH(I18nLang.ES.getCode()),\n    /**\n     * from english to french\n     */\n    FRENCH(I18nLang.FR.getCode()),\n    /**\n     * from english to french\n     */\n    CHINESE_TRADITIONAL(I18nLang.ZH_HK.getCode()),\n    /**\n     *from english to german\n     */\n    GERMAN(I18nLang.DE.getCode()),\n    /**\n     * from english to japanese\n     */\n    JAPANESE(I18nLang.JA.getCode()),\n    /**\n     * from english to vietnamese\n     */\n    VIETNAMESE(I18nLang.VI.getCode()),\n    /**\n     * from english to vietnamese\n     */\n    INDONESIAN(I18nLang.ID.getCode()),\n    /**\n     * from english to malay\n     */\n    MALAY(I18nLang.MS.getCode()),\n    /**\n     * from english to korean\n     */\n    KOREAN(I18nLang.KO.getCode()),\n    /**\n     * from english to thai\n     */\n    THAI(I18nLang.TH.getCode()),\n    /**\n     * from english to portuguese\n     */\n    PORTUGUESE(I18nLang.PT.getCode()),",
    "infill": "/**\n     * from english to arabic\n     */\n   ",
    "suffix": " ARABIC(I18nLang.AR.getCode()),\n\n    ;\n\n    private String mode;\n\n    LanguageMode(String mode){\n        this.mode = mode;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n\n    @Override\n    public String toString() {\n        return mode;\n    }\n\n    public static LanguageMode modeOf(String mode) {\n        LanguageMode[] values = LanguageMode.values();\n        for (LanguageMode value : values) {\n            if (value.getMode().equals(mode)) {\n                return value;\n            }\n        }\n        return null;\n    }\n\n}\n",
    "relevantFile": "<file_path>news-f10-service/src/main/java/com/myhexin/news/factory/translation/ThaiTranslateMode.java\npackage com.myhexin.news.factory.translation;\n\nimport com.myhexin.news.dto.translate.ModelTranslateRequestDTO;\n\nimport static com.myhexin.news.dto.translate.ModelTranslateRequestDTO.TARGET_LANG_TAI;\n\n/**\n * 泰语翻译模式\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:08\n */\npublic class ThaiTranslateMode extends ModelTranslateMode {\n    @Override\n    protected ModelTranslateRequestDTO buildRequest(String text) {\n        final ModelTranslateRequestDTO requestDTO = super.buildRequest(text);\n        requestDTO.setTo(TARGET_LANG_TAI);\n        return requestDTO;\n    }\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/factory/translation/AbstractTranslateMode.java\nimport org.apache.http.Header;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.message.BasicHeader;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\n/**\n * @author xuzekui\n * @date 2022/9/7 9:16\n * @description\n */\npublic abstract class AbstractTranslateMode implements TranslationFactory {\n\n    protected static final String BIZ_NAME = \"translate\";\n\n    protected static final String APP_ID = \"appId\";\n    private static final String APP_KEY = \"appKey\";\n\n    /**\n     * 翻译接口成功的返回码和消息\n     */\n    protected static final int TRANSLATE_SUCCESS_CODE = 0;\n    protected static final String TRANSLATE_SUCCESS_MSG = \"success\";\n\n    protected static NewsProperty newsProperty = SpringContextHolder.getBean(\"newsProperty\");\n\n    private static Metric metric = SpringContextHolder.getBean(\"metric\");\n\n    static Properties translateProp = new Properties();\n\n    protected List<Header> headers = new ArrayList<>();\n\n    private OvseHttpClient httpClient = DefaultOvseHttpClient.getClient();\n\n    AbstractTranslateMode() {\n        translateProp.put(APP_ID, newsProperty.getAppId());\n        translateProp.put(APP_KEY, newsProperty.getAppKey());\n        translateProp.put(\"url\", newsProperty.getUrl());\n\n        headers.add(new BasicHeader(\"Content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\"));\n    }\n\n    public NewsTranslateResult translateContext(List<String> content, OvseHttpParams params, int retry) {\n        metric.getCounter().labels(BIZ_NAME, \"total\").inc();\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < retry; i++) {\n            try {\n                OvseHttpResponse response = httpClient.post(translateProp.getProperty(\"url\"), params);\n                if (HttpStatus.SC_OK != response.getStatus()) {\n                    break;\n                }\n                String translateResult = response.getBody();\n                LogItem logItem = LogItem.getInstance().add(\"result\", translateResult)\n                        .add(\"info\", \"print translate result\");\n                OvseStatsLog.info(NewsFlashConstant.BUSINESS_NAME, LogMessage.NEWS_TRANSLATE, logItem);\n                NewsTranslateResult result = OvseJson.toBean(translateResult, NewsTranslateResult.class);\n                if (0 == result.getCode()) {\n<file_path>news-f10-service/src/main/java/com/myhexin/news/factory/translation/ChineseMode.java\npackage com.myhexin.news.factory.translation;\n\nimport com.jqka.ovse.framework.common.http.client.OvseHttpParams;\nimport com.myhexin.news.common.dto.NewsTranslateResult;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author xuzekui\n * @date 2022/9/7 8:59\n * @description\n */\npublic class ChineseMode extends AbstractTranslateMode {\n\n\n    private static Map<String, Object> translationParam = new HashMap<>();\n\n    static {\n        translationParam.put(\"from\", \"en\");\n        translationParam.put(\"to\", \"zh\");\n        translationParam.put(\"domain\", \"default\");\n\n\n    }\n\n    public ChineseMode(){\n        super();\n    }\n\n\n    @Override\n    public NewsTranslateResult translateData(List<String> content, int retry) {\n        translationParam.put(APP_ID, translateProp.getProperty(APP_ID));\n        translationParam.put(\"textList\", content);\n        OvseHttpParams request = prepareParam(translationParam);\n        return translateContext(content, request, retry);\n    }\n\n\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/factory/translation/TranslationDataFactory.java\npackage com.myhexin.news.factory.translation;\n\nimport com.myhexin.news.enums.LanguageMode;\nimport org.springframework.util.ObjectUtils;\n\nimport java.util.EnumMap;\nimport java.util.Map;\n\n\n/**\n * @author xuzekui\n * @date 2022/9/7 9:06\n * @description\n */\npublic class TranslationDataFactory {\n\n    private static Map<LanguageMode, TranslationFactory> modes = new EnumMap(LanguageMode.class);\n\n    static {\n        modes.put(LanguageMode.CHINESE, new ChineseMode());\n        modes.put(LanguageMode.CHINESE_TRADITIONAL, new ChineseTraditionMode());\n        modes.put(LanguageMode.FRENCH, new FrenchMode());\n        modes.put(LanguageMode.GERMAN, new GermanMode());\n        modes.put(LanguageMode.SPANISH, new SpanishMode());\n        modes.put(LanguageMode.INDONESIAN, new IndonesianMode());\n        modes.put(LanguageMode.JAPANESE, new JapaneseMode());\n        modes.put(LanguageMode.KOREAN, new KoreanMode());\n        modes.put(LanguageMode.MALAY, new MalayMode());\n        modes.put(LanguageMode.VIETNAMESE, new VietnameseMode());\n        modes.put(LanguageMode.THAI, new T());\n        modes.put(LanguageMode.VIETNAMESE, new VietnameseMode());\n        modes.put(LanguageMode.VIETNAMESE, new VietnameseMode());\n    }\n\n    public static TranslationFactory getObject(LanguageMode mode){\n\n        TranslationFactory translationFactory = modes.get(mode);\n        if (ObjectUtils.isEmpty(translationFactory)){\n            throw new UnsupportedOperationException();\n        }\n        return translationFactory;\n    }\n\n}",
    "relevantFileList": [],
    "filePath": "news-f10-api/src/main/java/com/myhexin/news/enums/LanguageMode.java",
    "template": "java",
    "multiRes": {
      "hipilot": "\n    /**\n     * from english to italian\n     */\n    ITALIAN(I18nLang.IT.getCode()),\n    /**\n     * from english to arabic\n     */\n   ",
      "CodeQwen2.5-7B": "",
      "copilot": "/**\n     * from english to arabic\n     */\n   ",
      "CodeQwen1.5-7B": ""
    }
  },
  {
    "prefix": "package com.myhexin.community.user.medal.deploy.modules.medal.domain.service.impl;\n\nimport cn.hutool.core.collection.CollUtil;\nimport cn.hutool.core.date.DatePattern;\nimport com.alibaba.csp.sentinel.annotation.SentinelResource;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.TypeReference;\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.myhexin.b2cweb.boot.lock.annotation.RLock;\nimport com.myhexin.community.user.medal.deploy.common.consts.CommonConstant;\nimport com.myhexin.community.user.medal.deploy.common.consts.MedalConstant;\nimport com.myhexin.community.user.medal.deploy.common.consts.RespStatusEnum;\nimport com.myhexin.community.user.medal.deploy.common.util.DateUtils;\nimport com.myhexin.community.user.medal.deploy.interfaces.rest.dto.MedalSeriesDetailDTO;\nimport com.myhexin.community.user.medal.deploy.interfaces.rest.query.request.UserMedalQueryRequest;\nimport com.myhexin.community.user.medal.deploy.interfaces.rest.vo.UserMedalPageVO;\nimport com.myhexin.community.user.medal.deploy.modules.historymedal.domain.dto.UserHistoryMedalDTO;\nimport com.myhexin.community.user.medal.deploy.modules.historymedal.domain.service.UserHistoryMedalService;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.consts.OldCategoryEnum;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.dto.*;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.enums.ExpirationTypeEnum;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.enums.MedalSerialTypeEnum;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.repository.MedalRepository;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.repository.UserMedalRelationRepository;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.repository.UserMedalRepository;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.service.MedalSerialService;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.service.UserMedalService;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.valueobject.UserMedalDistributeContext;\nimport com.myhexin.community.user.medal.deploy.modules.medal.domain.valueobject.UserMedalSearchContext;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.Medal;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.MedalSeries;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.UserMedal;\nimport com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model.UserMedalRelation;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.ObjectUtils;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n/**\n * 用户勋章服务实现类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 14:16\n */\n@Service\n@Slf4j\n@RequiredArgsConstructor\npublic class UserMedalServiceImpl implements UserMedalService {\n\n    private final UserMedalRepository userMedalRepository;\n\n    private final UserMedalRelationRepository userMedalRelationRepository;\n\n    private final UserHistoryMedalService userHistoryMedalService;\n\n    private final StringRedisTemplate userMedalRedisTemplate;\n\n    private final MedalSerialService medalSerialService;\n\n    private final MedalRepository medalRepository;\n\n\n    /**\n     * 获取勋章墙\n     *\n     * @return UserMedalResultDTO\n     */\n\n    @Override\n    @Cacheable(\n            key = \"'MEDAL_ALL_WALL_KEY'\", cacheNames = \"MEDAL_ALL_WALL\",\n            cacheManager = \"caffeineCacheManager\", unless = \"#result == null\"\n    )\n    public MedalWallDTO getMedalWall() {\n        // 获取勋章墙\n        MedalWallDTO medalWall = userMedalRepository.getMedalWall();\n        // 按照运营规定排序\n        sortMedalWall(medalWall);\n        return medalWall;\n    }\n\n    /**\n     * 对勋章墙安按照运营顺序排序\n     *\n     * @param medalWallDTO 勋章墙\n     */\n    public static void sortMedalWall(MedalWallDTO medalWallDTO) {\n        // 对勋章类别进行排序\n        Collections.sort(medalWallDTO.getCategoryList(), Comparator.comparingInt(o -> o.getMedalCategoryDTO().getCategoryRank()));\n\n        // 对每个类别下的勋章系列进行排序\n        medalWallDTO.getCategoryList().forEach(categoryInfo -> {\n            List<MedalWallDTO.MedalCategoryInfo.MedalSeriesInfo> seriesList = categoryInfo.getSeriesList();\n            Collections.sort(seriesList, Comparator.comparingInt(o -> o.getMedalSeriesDTO().getSerialRank()));\n        });\n    }\n\n    /**\n     * 标记勋章墙内用户勋章\n     *\n     * @param userId    用户id\n     * @param medalWall 勋章墙\n     * @param selfView  自身视角\n     * @return 用户勋章墙\n     */\n    @Override\n    public UserMedalResultDTO getUserMedal(Long userId, MedalWallDTO medalWall, Boolean selfView) {\n        // 1.获取用户拥有勋章\n        UserMedalDTO userMedalDTO = userMedalRepository.getUserMedal(userId);\n        // 2.对于相同勋章系列，获取最高等级的勋章\n        if (Objects.nonNull(userMedalDTO)) {\n            userMedalDTO.setUserMedalList(filterHighestLevelMedals(userMedalDTO.getUserMedalList()));\n        }\n        // 3.整合结果值，返回\n        return getUserMedalResultDTO(medalWall, userMedalDTO, selfView, userId);\n    }\n\n    /**\n     * 获取用户佩戴勋章\n     *\n     * @param userMedalDTO 用户拥有勋章\n     * @return 用户佩戴勋章\n     */\n    public MedalDTO getWearableMedal(UserMedalDTO userMedalDTO, MedalWallDTO medalWall, Long userId) {\n        if (Objects.isNull(userMedalDTO)) {\n            return null;\n        }\n        // 过滤出wearMedal为true的项\n        UserMedalDTO.UserMedalInfo wearMedalInfo = userMedalDTO.getUserMedalList().stream()\n                .filter(medal -> CommonConstant.MEDAL_TYPE_COMMON.equals(medal.getMedalType()))\n                .filter(UserMedalDTO.UserMedalInfo::getWearMedal)\n                .findFirst()\n                .orElse(null);\n\n        if (Objects.nonNull(wearMedalInfo)) {\n            String u",
    "infill": "\n    /**\n     * 查找第一个过期的普通类型勋章。\n     *\n     * @param medals        勋章列表。\n     * @param medalValidity 勋章有效性映射。\n     * @param now           当前时间戳。\n     * @return 过期的普通类型勋章。\n     */\n    private UserWearMedalDTO findFirstExpiredCommonMedal(List<UserWearMedalD",
    "suffix": "\n    /**\n     * 查找第一个过期的普通类型勋章。\n     *\n     * @param medals        勋章列表。\n     * @param medalValidity 勋章有效性映射。\n     * @param now           当前时间戳。\n     * @return 过期的普通类型勋章。\n     */\n    private UserWearMedalDTO findFirstExpiredCommonMedal(List<UserWearMedalDTO> medals, Map<Integer, String> medalValidity, long now) {\n        return medals.stream()\n                .filter(medal -> (CommonConstant.MEDAL_TYPE_COMMON.equals(medal.getMedalType()))\n                        && (medal.getExpirationTime() != 0 && medal.getExpirationTime() <= now)\n                        || (CommonConstant.UNVALID.equals(medalValidity.get(medal.getMedalId()))))\n                .findFirst().orElse(null);\n    }\n\n\n\n\n    /**\n     * 处理单个用户佩戴勋章数据\n     *\n     * @param userWearMedalDTOList 用户佩戴勋章列表\n     * @return UserWearMedalResultDTO\n     */\n    private UserWearMedalResultDTO getUserWearMedalResultDTO(List<UserWearMedalDTO> userWearMedalDTOList, Long uid, String sceneCode,\n                                                             Integer sceneType) {\n        UserWearMedalResultDTO resultDTO = UserWearMedalResultDTO.of();\n        if (CollectionUtils.isEmpty(userWearMedalDTOList)) {\n            return resultDTO;\n        }\n\n        // 获取通用勋章\n        UserWearMedalDTO commonMedalDTO = userWearMedalDTOList.stream()\n                .filter(item -> CommonConstant.MEDAL_TYPE_COMMON.equals(item.getMedalType()))\n                .findFirst().orElse(null);\n        if (Objects.nonNull(commonMedalDTO)) {\n            resultDTO.setCommonMedal(commonMedalDTO)\n                    .setUserId(uid);\n        }\n\n        // 获取活动勋章\n        List<UserWearMedalDTO> activityMedalList = userWearMedalDTOList.stream()\n                .filter(item -> CommonConstant.MEDAL_TYPE_ACTIVE.equals(item.getMedalType()))\n                .collect(Collectors.toList());\n        if (!activityMedalList.isEmpty()) {\n            UserWearMedalDTO activityMedalDTO = filterActivityMedal(activityMedalList, sceneCode, sceneType);\n            resultDTO.setActivityMedal(activityMedalDTO)\n                    .setUserId(uid);\n        }\n        return resultDTO;\n    }\n\n    /**\n     * 更新用户勋章的佩戴状态。\n     *\n     * @param uid          用户ID\n     * @param medalId      勋章ID\n     * @param action       行为（佩戴或卸下）\n     * @param medalWallDTO 勋章墙数据传输对象\n     * @return 操作状态，表明更新是否成功\n     */\n    public RespStatusEnum updateMedal(Long uid, Integer medalId, String action, MedalWallDTO medalWallDTO) {\n        try {\n            // 获取用户的勋章数据\n            UserMedalDTO userMedalDTO = userMedalRepository.getUserMedalByMedalId(uid);\n\n            // 如果为佩戴操作，检查用户是否已经拥有该勋章\n            UserMedalDTO.UserMedalInfo userMedalInfo = null;\n            if (CommonConstant.WEAR.equals(action)) {\n                if (userMedalDTO == null || CollectionUtils.isEmpty(userMedalDTO.getUserMedalList())) {\n                    return RespStatusEnum.MEDAL_NOT_EXIST;\n                }\n                userMedalInfo = userMedalDTO.getUserMedalList().stream()\n                        .filter(medalInfo -> medalInfo.getMedalId().equals(medalId))\n                        .findFirst()\n                        .orElse(null);\n\n                if (userMedalInfo != null && userMedalInfo.getWearMedal()) {\n                    return RespStatusEnum.MEDAL_IS_WEAR;\n                }\n            }\n            // 根据用户ID生成Redis键\n            String redisKey = CommonConstant.USER_WEAR_MEDAL_KEY + uid;\n            // 从Redis中获取用户勋章列表\n            List<UserWearMedalDTO> userWearMedalList = getMedalListFromRedis(redisKey);\n            // 判断是佩戴还是卸下动作\n            if (CommonConstant.WEAR.equals(action)) {\n                handleWearAction(uid, medalId, medalWallDTO, userWearMedalList, redisKey, userMedalInfo);\n            } else if (CommonConstant.REMOVE.equals(action)) {\n                handleUnwearAction(uid, medalId, userWearMedalList, redisKey);\n            }\n            return RespStatusEnum.SUCCESS;\n        } catch (Exception e) {\n            log.error(\"[UserMedalServiceImpl] #updateMedal# uid:{} medalId:{} action:{} error:\", uid, medalId, action, e);\n            return RespStatusEnum.SERVER_ERROR;\n        }\n    }\n\n    /**\n     * 批量获取用户佩戴勋章\n     *\n     * @param uidList   用户id列表\n     * @param sceneCode 场景Code\n     * @param sceneType 场景Type\n     * @return List<UserWearMedalResultDTO>\n     */\n    @Override\n    @SentinelResource(value = \"getWearMedalList\", fallback = \"getWearMedalListFallback\")\n    public List<UserWearMedalResultDTO> getWearMedalList(List<Long> uidList, String sceneCode, Integer sceneType) {\n        try {\n            List<String> redisKeyList = uidList.stream()\n                    .map(uid -> CommonConstant.USER_WEAR_MEDAL_KEY + uid)\n                    .collect(Collectors.toList());\n\n            List<String> redisValueList = userMedalRedisTemplate.opsForValue().multiGet(redisKeyList);\n            List<UserWearMedalResultDTO> resultList = new ArrayList<>(uidList.size());\n\n            if (CollUtil.isNotEmpty(redisValueList)) {\n                for (int i = 0; i < uidList.size(); i++) {\n                    String redisValue = redisValueList.get(i);\n                    Long uid = uidList.get(i);\n                    List<UserWearMedalDTO> userWearMedalDTOList = JSON.parseObject(redisValue,\n                            new TypeReference<List<UserWearMedalDTO>>() {\n                            });\n                    // 获取非过期且有效数据\n                    userWearMedalDTOList = filterAndRemoveExpiredMedals(userWearMedalDTOList, uid);\n                    // 过滤并更新Redis存储\n                    resultList.add(getUserWearMedalResultDTO(userWearMedalDTOList, uid, sceneCode, sceneType));\n                }\n            }\n            return resultList;\n        } catch (Exception e) {\n            log.error(\"[UserMedalServiceImpl] #getWearMedalList# uidList:{} sceneCode:{}.sceneType:{} error\", uidList, sceneCode\n                    , sceneType, e);\n            return Collections.emptyList();\n        }\n    }\n\n    /**\n     * 批量获取佩戴勋章 服务降级处理（返回空列表）\n     *\n     * @return 空的列表\n     */\n    public List<UserWearMedalResultDTO> getWearMedalListFallback(List<Long> uidList, Throwable e) {\n        log.error(\"UserMedalManager getWearMedalListFallback uidList:{}\", uidList, e);\n        return Collections.emptyList();\n    }\n\n    /**\n     * 更新用户最新勋章置为非最新\n     *\n     * @param medalIdList 勋章id列表\n     * @param uid         用户id\n     * @return RespStatusEnum\n     */\n    @Override\n    public RespStatusEnum updateMedalToNotNew(List<Integer> medalIdList, Long uid) {\n        if (userMedalRepository.updateMedalToNotNew(medalIdList, uid)) {\n            return RespStatusEnum.SUCCESS;\n        } else {\n            return RespStatusEnum.UPDATE_USER_NEW_MEDAL_ERROR;\n        }\n    }\n\n    /**\n     * 获取用户勋章数\n     *\n     * @param uid          用户id\n     * @param medalWallDTO 勋章墙\n     * @return 用户勋章数\n     */\n    @Cacheable(\n            key = \"'USER_MEDAL_NUM' + #uid\", cacheNames = \"USER_MEDAL_NUM\",\n            cacheManager = \"caffeineCacheManager\", unless = \"#result == null\"\n    )\n    @Override\n    public Integer getUserMedalNum(Long uid, MedalWallDTO medalWallDTO) {\n        // 获取用户新版勋章数\n        int newMedalNum = userMedalRepository.getUserMedalNewNum(uid, medalWallDTO);\n        // 获取用户旧版勋章数\n        List<UserHistoryMedalDTO> userHistoryMedalList = userHistoryMedalService.getUserHistoryMedalList(uid);\n        int oldMedalNum = userHistoryMedalList.size();\n        return newMedalNum + oldMedalNum;\n    }\n\n    /**\n     * 从Redis中获取用户勋章列表。\n     *\n     * @param redisKey Redis键\n     * @return 用户佩戴的勋章列表\n     */\n    private List<UserWearMedalDTO> getMedalListFromRedis(String redisKey) {\n        String redisValue = userMedalRedisTemplate.opsForValue().get(redisKey);\n        if (StringUtils.isNotBlank(redisValue)) {\n            return JSON.parseObject(redisValue,\n                    new TypeReference<List<UserWearMedalDTO>>() {\n                    });\n        }\n        return new ArrayList<>();\n    }\n\n    /**\n     * 处理佩戴勋章的逻辑。\n     *\n     * @param uid ",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/zixun/robot/news/server/deploy/modules/article/domain/entity/ArticlePageEntity.java\npackage com.myhexin.zixun.robot.news.server.deploy.modules.article.domain.entity;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.util.List;\n\n/**\n * 功能：文章pageEntity\n *\n * @author liuwei6\n * @date 2022/3/24 14:05\n **/\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class ArticlePageEntity {\n    /**\n     * 总数量\n     */\n    private long totalNum;\n\n    /**\n     * 每页大小\n     */\n    private long pageSize;\n\n    /**\n     * 具体文章数组\n     */\n    private List<ArticleEntity> list;\n}\n<file_path>deploy/src/main/java/com/myhexin/community/user/medal/deploy/common/external/feign/request/UpdateWearMedalStatusRequest.java\npackage com.myhexin.community.user.medal.deploy.common.external.feign.request;\n\nimport lombok.Data;\n\n/**\n * 勋章佩戴状态接口接收类\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/26 17:39\n */\n@Data\npublic class UpdateWearMedalStatusRequest {\n\n    /**\n     * 用户id\n     */\n    private Long uid;\n\n    /**\n     * 勋章id\n     */\n    private Integer medalId;\n\n    /**\n     * action为remove时，如果已经存在该勋章，则取下\n     * action为wear时，如果不存在该勋章，则无法操作\n     */\n    private String action;\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/domain/service/impl/UserMedalServiceImpl.java",
    "template": "java",
    "multiRes": {
      "CodeQwen2.5-7B": "serIdStr = userId.toString();",
      "copilot": "\n    /**\n     * 查找第一个过期的普通类型勋章。\n     *\n     * @param medals        勋章列表。\n     * @param medalValidity 勋章有效性映射。\n     * @param now           当前时间戳。\n     * @return 过期的普通类型勋章。\n     */\n    private UserWearMedalDTO findFirstExpiredCommonMedal(List<UserWearMedalD",
      "CodeQwen1.5-7B": " serMedalKey = CommonConstant.USER_MEDAL_KEY + userId;"
    }
  },
  {
    "prefix": "package com.myhexin.ifund.ranking.deploy.modules.ranking.domain.service.calpoint.fund;\n\nimport com.myhexin.ifund.ranking.deploy.common.config.param.CbasQueryConfig;\nimport com.myhexin.ifund.ranking.deploy.common.external.service.CbasFileService;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.FundMetaType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.consts.SceneCycle;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.MetaDataType;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.dto.Product;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.entity.ConfigData;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.entity.MetaData;\nimport com.myhexin.ifund.ranking.deploy.modules.ranking.domain.service.AbstractCalPoint;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Slf4j\n@Component\npublic class FundPotentialRankingCalPoint extends AbstractCalPoint {\n\n    private final CbasQueryConfig config;\n\n    private final CbasFileService cbasFileService;\n\n    public FundPotentialRankingCalPoint(CbasQueryConfig config, CbasFileService cbasFileService) {\n        this.config = config;\n        this.cbasFileService = cbasFileService;\n    }\n\n    @Override\n    public String scene() {\n        return \"FUND\";\n    }\n\n    @Override\n    public MetaDataType targetMetaData() {\n        return MetaDataType.builder()\n                .sceneType(scene())\n                .metaDataType(FundMetaType.POTENTIAL_RANKING.name())\n                .build();\n    }\n\n    @Override\n    public List<MetaDataType> sourceMetaData() {\n\n        return new ArrayList<>();\n    }\n\n    @Override\n    public List<String> sourceConfigData() {\n        return new ArrayList<>();\n    }\n\n\n    @Override\n    public List<MetaData> calData(List<Product> productList, Map<String, Map<String, String>> sourceMetaData, Map<String, ConfigData> configData, SceneCycle sceneCycle) {\n        List<List<String>> result = cbasFileService.queryDataList(config.getFundRank(), sceneCycle.getTime());\n        Map<String, String> rankMap = result.stream().collect(Collectors.toMap(o -> ",
    "infill": "o.get(0), o -> o.get(1)));\n        \n        List<MetaData> res = new ArrayList<>();\n        for (Product ",
    "suffix": "product : productList) {\n            String code = product.getCode();\n            MetaData cooperate = MetaData.builder()\n                    .dataType(targetMetaData())\n                    .code(code)\n                    .value(cooperateMap.getOrDefault(code, \"0\"))\n                    .cycleTime(sceneCycle.getTime())\n                    .build();\n            res.add(cooperate);\n        }\n\n        return res;\n    }\n}\n",
    "relevantFile": "",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/ifund/ranking/deploy/modules/ranking/domain/service/calpoint/fund/FundPotentialRankingCalPoint.java",
    "template": "java",
    "multiRes": {
      "hipilot": "o.get(0), o -> o.get(1)));",
      "CodeQwen2.5-7B": "o.get(0), o -> o.get(1)));",
      "copilot": "o.get(0), o -> o.get(1)));\n        \n        List<MetaData> res = new ArrayList<>();\n        for (Product ",
      "CodeQwen1.5-7B": " o.get(0), o -> o.get(1)));"
    }
  },
  {
    "prefix": "package org.example.lx.test;\n\n/**\n * @author lixi\n * @since 2024/5/23 20:23\n * @description\n */\npublic class LxTest {\n\n    // 二分查找\n    public static int binarySearch(int[] arr, int target) {\n        int left = 0;\n        int right = arr.length - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (arr[mid] == target) {\n                return mid;\n            } else if (arr[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return -1;\n    }\n\n    // 快速排序\n    public static void quickSort(int[] arr, int left, int right) {\n        if (left >= right) {\n            return;\n        }\n        int pivot = partition(arr, left, right);\n        quickSort(arr, left, pivot - 1);\n        quickSort(arr, pivot + 1, right);\n    }\n\n    private static int partition(int[] arr, int left, int right) {\n        int pivot = arr[right];\n        int i = left;\n        for (int j = left; j < right; j++) {\n            if (arr[j] < pivot) {\n                swap(arr, i, j);\n                i++;\n            }\n        }\n        swap(arr, i, right);\n        return i;\n    }",
    "infill": "private static void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    \n    // 三个点坐标确定圆的方程\n    public static void circleEquation(int x1, int y1, int x2, int y2, int x3, int y3) {\n        \n    }\n}\n",
    "suffix": "",
    "relevantFile": "<file_path>src/main/java/org/example/Main.java\npackage org.example;\n\nimport org.apache.commons.codec.digest.DigestUtils;\nimport org.bouncycastle.jcajce.provider.digest.SHA3;\nimport org.bouncycastle.util.encoders.Hex;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Base64;\n\nimport static org.apache.commons.codec.digest.DigestUtils.sha3_256;\n\n/**\n * @author lixi\n * @since 2024/5/23 16:43\n * @description\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        String id = \"516a36d9-6a3b-46c9-a629-6e53f6496296\";\n        // 对id进行base64加密\n        String base64Id = Base64.getEncoder().encodeToString(id.getBytes());\n        System.out.println(base64Id);\n        // 对id用MD5加密\n        String md5Id = DigestUtils.md5Hex(id);\n        System.out.println(md5Id);\n        // sha-256\n        String sha256Id = sha256(id);\n        System.out.println(sha256Id);\n        String sha3Id = sha3_256(id);\n        System.out.println(sha3Id);\n    }\n\n    public static String sha3_256(String data) {\n        SHA3.DigestSHA3 digestSHA3 = new SHA3.Digest256();\n        byte[] digest = digestSHA3.digest(data.getBytes());\n        return Hex.toHexString(digest);\n    }\n\n\n    public static String sha256(String data) {\n        StringBuilder hexString = new StringBuilder();\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = digest.digest(data.getBytes(StandardCharsets.UTF_8));\n            for (byte b : hash) {\n                String hex = Integer.toHexString(0xff & b);\n                if (hex.length() == 1) hexString.append('0');\n                hexString.append(hex);\n            }\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return hexString.toString();\n    }\n\n    public static String sha384(String data) {\n        return hash(data, \"SHA-384\");\n<file_path>src/main/java/org/example/lx/test/JavassistTest.java\npackage org.example.lx.test;\n\nimport javassist.ClassPool;\n\n/**\n * @author lixi\n * @since 2024/5/23 17:31\n * @description\n */\npublic class JavassistTest {\n    public static void main(String[] args) {\n        ClassPool aDefault = ClassPool.getDefault();\n    }\n    \n    // 根据用电量计算电费\n    public static double calculateCost(double power) {\n        return power * 0.5;\n    }\n    \n    // 三个点确定一个圆的方程\n    public static void circleEquation(int x1, int y1, int x2, int y2, int x3, int y3) {\n        // 代码省略\n        \n    }\n    \n    // 快速排序\n    public static void quickSort(int[] arr, int left, int right) {\n        // 代码省略\n    }\n    \n    // 二分查找\n    public static int binarySearch(int[] arr, int target) {\n        // 代码省略\n        return -1;\n    }\n    \n}",
    "relevantFileList": [],
    "filePath": "src/main/java/org/example/lx/test/LxTest.java",
    "template": "java",
    "multiRes": {
      "hipilot": "\n\n    private static void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}",
      "CodeQwen2.5-7B": "",
      "copilot": "private static void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    \n    // 三个点坐标确定圆的方程\n    public static void circleEquation(int x1, int y1, int x2, int y2, int x3, int y3) {\n        \n    }\n}\n",
      "CodeQwen1.5-7B": " "
    }
  },
  {
    "prefix": "public class Main {\n    public static void main(String[] args) {\n        //TIP 当文本光标位于高亮显示的文本处时按 <shortcut actionId=\"ShowIntentionActions\"/>\n        // 查看 IntelliJ IDEA 建议如何修正。\n        System.out.printf(\"Hello and welcome!\");\n\n        for (int i = 1; i <= 5; i++) {\n            //TIP 按 <shortcut actionId=\"Debug\"/> 开始调试代码。我们已经设置了一个 <icon src=\"AllIcons.Debugger.Db_set_breakpoint\"/> 断点\n            // 但您始终可以通过按 <shortcut actionId=\"ToggleLineBreakpoint\"/> 添加更多断点。\n            System.out.println(\"i = \" + i);\n            if (i == 3) {\n                break;\n            } else if ",
    "infill": "(i == 2) {\n                continue;\n            }\n        }\n    }\n}",
    "suffix": "",
    "relevantFile": "<file_path>src/Student.java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n\npublic class Student {\n    private String name;\n    private int age;\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n<file_path>src/Main.java\n//TIP To <b>Run</b> code, press <shortcut actionId=\"Run\"/> or\n// click the <icon src=\"AllIcons.Actions.Execute\"/> icon in the gutter.\npublic class Main {\n    public static void main(String[] args) {\n        //TIP Press <shortcut actionId=\"ShowIntentionActions\"/> with your caret at the highlighted text\n        // to see how IntelliJ IDEA suggests fixing it.\n        System.out.print(\"Hello and welcome!\");\n\n        for (int i = 1; i <= 5; i++) {\n            //TIP Press <shortcut actionId=\"Debug\"/> to start debugging your code. We have set one <icon src=\"AllIcons.Debugger.Db_set_breakpoint\"/> breakpoint\n            // for you, but you can always add more by pressing <shortcut actionId=\"ToggleLineBreakpoint\"/>.\n            System.out.println(\"i = \" + i);\n        }\n\n        switch (args.length) {\n            case 0:\n                System.out.println(\"No arguments were passed.\");\n                break;\n            case 1:\n                System.out.println(\"One argument was passed.\");\n                break;\n                case 2:\n                System.out.println(\"Two arguments were passed.\");\n                break;\n                case 3:\n                System.out.println(\"Three arguments were passed.\");\n                case 4:\n                System.out.println(\"Four arguments were passed.\");\n                break;\n                case 5:\n                System.out.println(\"Five arguments were passed.\");\n                case 6:\n                System.out.println(\"Six arguments were passed.\");\n                case 7:\n                System.out.println(\"Seven arguments were passed.\");\n                case 8:\n                System.out.println(\"Eight arguments were passed.\");\n                case 9:\n                System.out.println(\"Nine arguments were passed.\");\n            default:\n                System.out.println(\"More than one argument was passed.\");\n        }\n\n    }\n}\nIP 要<b>运行</b>代码，请按 <shortcut actionId=\"Run\"/> 或\n点击装订区域中的 <icon src=\"AllIcons.Actions.Execute\"/> 图标。",
    "relevantFileList": [],
    "template": "java",
    "multiRes": {
      "hipilot": "(i == 4) {\n                continue;\n            }\n            System.out.println(\"This will not be printed.\");\n        }",
      "CodeQwen2.5-7B": "(i == 2) {",
      "copilot": "(i == 2) {\n                continue;\n            }\n        }\n    }\n}",
      "CodeQwen1.5-7B": " (i == 4) {"
    }
  },
  {
    "prefix": "package com.myhexin.zixun.flow.gpt.engine.deploy.service.converter;\n\nimport com.myhexin.zixun.flow.gpt.core.entity.dto.CmpDefinitionDTO;\nimport com.myhexin.zixun.flow.gpt.engine.deploy.entity.dto.ExamineCmpDefinitionDTO;\nimport org.mapstruct.Mapper;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n/**\n * @Description\n * @Author gaoqiang\n * @Date 2024/6/19\n */\n@Component\n@Mapper(componentModel = \"spring\")\npublic interface CmpDefinitionConverter {\n    /**\n     * 参数转换类\n     *\n     * @param examineCmpDefinition 需要进行转换的参数\n     * @return 返回转换结果\n     */\n    CmpDefinitionDTO toCmpDefinition(ExamineCmpDefinitionDTO examineCmpDefinition);\n\n    /**\n     * 将 ",
    "infill": "ExamineCmpDefinitionDTO.CmpParamDefinitionDTO 转换为 CmpDefinitionDTO.CmpParamDefinitionDTO\n     *\n     * @",
    "suffix": "param examineCmpDefinition 需要进行转换的参数\n     * @return 返回转换结果\n     */\n    List<CmpDefinitionDTO.CmpParamDefinitionDTO>\n    toCmpDefinition(List<ExamineCmpDefinitionDTO.CmpParamDefinitionDTO> examineCmpDefinition);\n}\n\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/zixun/flowgptmanagement/deploy/service/impl/ExamineChainServiceImpl.java\npackage com.myhexin.zixun.flowgptmanagement.deploy.service.impl;\n\nimport com.myhexin.zixun.flow.gpt.core.entity.dto.ChainInfoDTO;\nimport com.myhexin.zixun.flowgptmanagement.deploy.common.config.exception.ChainVisualException;\nimport com.myhexin.zixun.flowgptmanagement.deploy.entity.converter.ChainInfoConverter;\nimport com.myhexin.zixun.flowgptmanagement.deploy.entity.dto.ChainInfoQueryDTO;\nimport com.myhexin.zixun.flowgptmanagement.deploy.mappers.ChainInfoDAO;\nimport com.myhexin.zixun.flowgptmanagement.deploy.mappers.ExamineChainInfoDAO;\nimport com.myhexin.zixun.flowgptmanagement.deploy.service.ExamineChainService;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * @Description\n * @Author gaoqiang\n * @Date 2024/6/4\n */\n@Service\n@RequiredArgsConstructor\n@Slf4j\npublic class ExamineChainServiceImpl implements ExamineChainService {\n    private final ChainInfoDAO chainInfoDAO;\n    private final ExamineChainInfoDAO examineChainInfoDAO;\n    private final ChainInfoConverter chainInfoConverter;\n\n    @Override\n    public String add(ChainInfoDTO chainInfoDTO) {\n        // 测试链信息校验应该在实际的库中校验\n        checkAdd(chainInfoDTO);\n        return examineChainInfoDAO.insert(chainInfoConverter.toChainInfoModel(chainInfoDTO)).getId();\n    }\n\n    @Override\n    public Boolean deleteByChainId(String chainId) {\n        return examineChainInfoDAO.deleteByChainId(chainId);\n    }\n\n    /**\n     * 新增链参数校验\n     *\n     * @param chainInfoDTO 需要进行校验的参数\n     */\n    private void checkAdd(ChainInfoDTO chainInfoDTO) {\n        //1.链名称校验\n        if (Objects.isNull(chainInfoDTO)\n                || Objects.isNull(chainInfoDTO.getName())) {\n            throw new ChainVisualException(\"更新的链参数不完整\");\n        }\n        //2.校验链名称是否重复\n        if (Objects.nonNull(chainInfoDAO.findByChainName(chainInfoDTO.getName()))) {\n            throw new ChainVisualException(\"存在相同的工作流名称\");\n        }\n    }\n\n    @Override\n    public List<ChainInfoDTO> findListByQuery(ChainInfoQueryDTO chainInfoQueryDTO) {\n<file_path>src/main/java/com/myhexin/zixun/flow/gpt/engine/deploy/entity/dto/ExamineCmpDefinitionDTO.java\npackage com.myhexin.zixun.flow.gpt.engine.deploy.entity.dto;\n\nimport lombok.Data;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @Description 测试来奶DTO\n * @Author gaoqiang\n * @Date 2024/6/14\n */\n@Data\npublic class ExamineCmpDefinitionDTO  {\n    /**\n     * 组件测试的入参\n     */\n    private Map<String, String> cmpReplaceParams;\n    /**\n     * 组件id\n     */\n    private String cmpId;\n\n    /**\n     * 组件名称\n     */\n    private String cmpName;\n\n    /**\n     * 组件别名\n     */\n    private String cmpAlias;\n\n    /**\n     * 组件描述\n     */\n    private String cmpDesc;\n\n    /**\n     * 组件类型\n     * 普通组件\n     * 选择组件\n     * 循环组件\n     */\n    private String cmpType;\n\n    /**\n     * 组件方法入参\n     * JSON串\n     */\n    private String cmpMethodParams;\n\n    /**\n     * 组件方法返回\n     */\n    private List<CmpParamDefinitionDTO> cmpMethodReturn;\n\n    /**\n     * 组件参数定义入参\n<file_path>deploy/src/main/java/com/myhexin/zixun/flowgptmanagement/deploy/service/ExamineChainService.java\npackage com.myhexin.zixun.flowgptmanagement.deploy.service;\n\nimport com.myhexin.zixun.flow.gpt.core.entity.dto.ChainInfoDTO;\nimport com.myhexin.zixun.flowgptmanagement.deploy.entity.dto.ChainInfoQueryDTO;\n\nimport java.util.List;\n\n/**\n * @Description 测试链数据保存service\n * @Author gaoqiang\n * @Date 2024/6/4\n */\npublic interface ExamineChainService {\n    /**\n     * 新增链\n     *\n     * @param chainInfoDTO 链信息DTO\n     * @return bool\n     */\n    String add(ChainInfoDTO chainInfoDTO);\n\n    /**\n     * 根据id删除链\n     *\n     * @param chainId 链id\n     * @return bool\n     */\n    Boolean deleteByChainId(String chainId);\n    /**\n     * 根据询问语句查询链详情\n     *\n     * @param chainInfoQueryDTO 需要查询的问句\n     * @return 返回查询结果\n     */\n    List<ChainInfoDTO> findListByQuery(ChainInfoQueryDTO chainInfoQueryDTO);\n}\n<file_path>src/main/java/com/myhexin/zixun/flow/gpt/engine/deploy/interfaces/rest/converter/CmpExecutionLogVosConverter.java\npackage com.myhexin.zixun.flow.gpt.engine.deploy.interfaces.rest.converter;\n\nimport com.myhexin.zixun.flow.gpt.engine.deploy.interfaces.rest.vo.CmpExecutionLogVO;\nimport com.myhexin.zixun.flow.gpt.plugin.base.dto.CmpExecutionLog;\nimport org.mapstruct.Mapper;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n/**\n * @author gaoqiang\n * @Description 组件执行参数转换类\n * @date 2023/12/20\n **/\n@Component\n@Mapper(componentModel = \"spring\")\npublic interface CmpExecutionLogVosConverter {\n    /**\n     * 参数转换类\n     *\n     * @param cmpExecutionLogs 组件执行日志列表\n     * @return 返回转换结果\n     */\n    List<CmpExecutionLogVO> toCmpExecutionLogVO(List<CmpExecutionLog> cmpExecutionLogs);\n}",
    "relevantFileList": [],
    "filePath": "src/main/java/com/myhexin/zixun/flow/gpt/engine/deploy/service/converter/CmpDefinitionConverter.java",
    "template": "java",
    "multiRes": {
      "hipilot": "List<ExamineCmpDefinitionDTO.CmpParamDefinitionDTO>",
      "CodeQwen2.5-7B": "List<ExamineCmpDefinitionDTO.CmpParamDefinitionDTO> 转换为 List<CmpDefinitionDTO.CmpParamDefinitionDTO>",
      "copilot": "ExamineCmpDefinitionDTO.CmpParamDefinitionDTO 转换为 CmpDefinitionDTO.CmpParamDefinitionDTO\n     *\n     * @",
      "CodeQwen1.5-7B": "参数转换类"
    }
  },
  {
    "prefix": "package com.myhexin.news.factory.translation;\n\nimport com.myhexin.news.common.dto.NewsTranslateResult;\nimport com.myhexin.news.common.util.spring.SpringContextHolder;\nimport com.myhexin.news.dto.translate.ModelTranslateRequestDTO;\nimport com.myhexin.news.dto.translate.ModelTranslateResultDTO;\nimport com.myhexin.news.feign.ModelTranslateFeign;\nimport com.myhexin.news.feign.request.ModelTranslateFeignRequest;\nimport com.myhexin.news.feign.response.ModelTranslateFeignResponse;\nimport com.myhexin.news.properties.NewsProperty;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.List;\n\n/**\n * 大模型翻译实现\n * 泰语、葡萄牙语、阿拉伯语 翻译的实现（直接继承此接口）\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:45\n */\npublic class ModelTranslateMode extends AbstractTranslateMode {\n    protected static NewsProperty newsProperty = SpringContextHolder.getBean(\"newsProperty\");\n\n    private static ModelTranslateFeign modelTranslateFeign = SpringContextHolder.getBean(\"modelTranslateFeign\");\n\n    @Override\n    public NewsTranslateResult translateData(List<String> content, int retry) {\n\n        ModelTranslateRequestDTO requestDTO = this.buildRequest(content);\n\n        final ModelTranslateResultDTO modelTranslateResultDTO = this.modelTranslateAndConvertResult(requestDTO);\n\n        return this.buildResult(modelTranslateResultDTO);\n    }\n\n    /**\n     * 组装大模型接口请求的参数\n     * @param content 待翻译内容\n     * @return 大模型接口请求的参数\n     */\n    protected ModelTranslateRequestDTO buildRequest(List<String> content) {\n        // TODO: ",
    "infill": "日志\n            return null;\n        }\n        return buildResu",
    "suffix": "lt(response);\n    }\n\n    /**\n     * 组装返回结果\n     * @param response 大模型接口返回的数据\n     * @return 返回结果\n     */\n    private NewsTranslateResult buildResult(@Nullable ModelTranslateFeignResponse response) {\n        if (response == null) {\n            return null;\n        }\n        // TODO: 2024/6/26 根据大模型接口返回的数据组装返回结果\n        return new NewsTranslateResult();\n    }\n}\n",
    "relevantFile": "<file_path>news-f10-service/src/main/java/com/myhexin/news/feign/ModelTranslateFeign.java\npackage com.myhexin.news.feign;\n\nimport com.myhexin.news.feign.fallback.ModelTranslateFeignFallbackFactory;\nimport com.myhexin.news.feign.request.ModelTranslateFeignRequest;\nimport com.myhexin.news.feign.response.ModelTranslateFeignResponse;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\n/**\n * 模型翻译的feign\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 22:11\n *\n * TODO url的配置 待完善\n */\n@FeignClient(\n        name = \"modelTranslateFeign\",\n        url = \"${news.translate.url:http://speech.ths8.com:10020}\",\n        fallbackFactory = ModelTranslateFeignFallbackFactory.class\n)\npublic interface ModelTranslateFeign {\n\n    /**\n     * 模型翻译\n     *\n     * @param request 请求\n     * @return 返回\n     *\n     * TODO 接口的uri待完善\n     */\n    @PostMapping(value = \"${news.translate.api:/translateConnection/model/translate}\",\n            consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)\n    ModelTranslateFeignResponse modelTranslate(@RequestBody ModelTranslateFeignRequest request);\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/factory/translation/AbstractTranslateMode.java\nimport com.jqka.ovse.framework.common.http.client.DefaultOvseHttpClient;\nimport com.jqka.ovse.framework.common.http.client.OvseHttpClient;\nimport com.jqka.ovse.framework.common.http.client.OvseHttpParams;\nimport com.jqka.ovse.framework.common.http.client.OvseHttpResponse;\nimport com.jqka.ovse.framework.common.util.OvseStatsLog;\nimport com.myhexin.news.common.dto.NewsTranslateResult;\nimport com.myhexin.news.common.util.spring.SpringContextHolder;\nimport com.myhexin.news.constant.LogMessage;\nimport com.myhexin.news.constant.NewsFlashConstant;\nimport com.myhexin.news.metric.Metric;\nimport com.myhexin.news.properties.NewsProperty;\nimport org.apache.commons.codec.digest.DigestUtils;\nimport org.apache.http.Header;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.message.BasicHeader;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\n/**\n * @author xuzekui\n * @date 2022/9/7 9:16\n * @description\n */\npublic abstract class AbstractTranslateMode implements TranslationFactory {\n\n    protected static final String BIZ_NAME = \"translate\";\n\n    protected static final String APP_ID = \"appId\";\n    private static final String APP_KEY = \"appKey\";\n\n    protected static NewsProperty newsProperty = SpringContextHolder.getBean(\"newsProperty\");\n\n    private static Metric metric = SpringContextHolder.getBean(\"metric\");\n\n    static Properties translateProp = new Properties();\n\n    protected List<Header> headers = new ArrayList<>();\n\n    private OvseHttpClient httpClient = DefaultOvseHttpClient.getClient();\n\n    AbstractTranslateMode() {\n        translateProp.put(APP_ID, newsProperty.getAppId());\n        translateProp.put(APP_KEY, newsProperty.getAppKey());\n        translateProp.put(\"url\", newsProperty.getUrl());\n\n        headers.add(new BasicHeader(\"Content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\"));\n    }\n\n    public NewsTranslateResult translateContext(List<String> content, OvseHttpParams params, int retry) {\n        metric.getCounter().labels(BIZ_NAME, \"total\").inc();\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < retry; i++) {\n            try {\n                OvseHttpResponse response = httpClient.post(translateProp.getProperty(\"url\"), params);\n                if (HttpStatus.SC_OK != response.getStatus()) {\n                    break;\n                }\n<file_path>news-f10-api/src/main/java/com/myhexin/news/dto/translate/ModelTranslateRequestDTO.java\npackage com.myhexin.news.dto.translate;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * 大模型翻译的请求协议\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 16:53\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ModelTranslateRequestDTO {\n    /**\n     * 目标语言\n     * tai-泰语\n     * pt-葡萄牙语\n     * ar-阿拉伯语\n     */\n    public static final String TARGET_LANG_TAI = \"tai\";\n    public static final String TARGET_LANG_PT = \"pt\";\n    public static final String TARGET_LANG_AR = \"ar\";\n\n    /**\n     * 待翻译内容\n     */\n    private String text;\n\n    private String appId;\n\n    private String domain;\n\n    private String from;\n\n    /**\n     * 目标语言\n     */\n    private String to;\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/feign/request/ModelTranslateFeignRequest.java\npackage com.myhexin.news.feign.request;\n\nimport com.alibaba.fastjson.JSON;\nimport com.myhexin.news.dto.translate.ModelTranslateRequestDTO;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * 模型翻译的接口出参\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 22:44\n */\n@Data\n@NoArgsConstructor\npublic class ModelTranslateFeignRequest {\n    /**\n     * 参数\n     */\n    private String param;\n\n\n    public ModelTranslateFeignRequest(ModelTranslateRequestDTO requestDTO) {\n        final ParamBean requestBean = new ParamBean(requestDTO);\n        this.param = JSON.toJSONString(requestBean);\n    }\n\n    @Data\n    @NoArgsConstructor\n    public static class ParamBean {\n        /**\n         * 待翻译内容\n         */\n        private String text;\n\n        private String appId;\n\n        private String domain;\n\n        private String from;\n\n        /**\n         * 目标语言\n         */\n        private String to;\n\n        public ParamBean(ModelTranslateRequestDTO dto) {\n            // TODO: 2024/6/26 构造paramBean\n        }\n    }\n}",
    "relevantFileList": [],
    "filePath": "news-f10-service/src/main/java/com/myhexin/news/factory/translation/ModelTranslateMode.java",
    "template": "java",
    "multiRes": {
      "hipilot": "2024/6/26 根据content组装大模型接口请求的参数\n        return new ModelTranslateRequestDTO();\n    }",
      "CodeQwen2.5-7B": "2024/6/26 根据大模型接口的参数组装请求参数",
      "copilot": "日志\n            return null;\n        }\n        return buildResu",
      "CodeQwen1.5-7B": " 2024/6/26 待翻译内容"
    }
  },
  {
    "prefix": "package com.myhexin.aixg.level2.impl;\n\nimport cn.hutool.core.collection.CollUtil;\nimport cn.hutool.core.date.DatePattern;\nimport cn.hutool.core.date.DateUtil;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport ",
    "infill": "e\n    ",
    "suffix": "e\n    public Map<String, Double> getLevel2FormulaData(String type, Integer pickedDateOffset, List<SelectedStockVO> selectedStockVOS) {\n        if (CollUtil.isEmpty(selectedStockVOS)) {\n            return Maps.newHashMap();\n        }\n\n        Map<String, List<SelectedStockVO>> pickDateStockMap = selectedStockVOS.stream()\n                .collect(Collectors.groupingBy(stockVO -> DateUtil.format(stockVO.getSelectedDate(), DatePattern.PURE_DATE_FORMAT)));\n\n        return pickDateStockMap.keySet().stream()\n                .map(date -> {\n                    List<SelectedStockVO> stockSelectedStockVOS = pickDateStockMap.get(date);\n                    if (CollUtil.isEmpty(stockSelectedStockVOS)) {\n                        return null;\n                    }\n                    Date tradeDay = DateUtil.parse(date).toJdkDate();\n                    return getLevel2Result(HqParamsConverterUtil.codeToCodeList(CollUtil.newArrayList(stockSelectedStockVOS.stream()\n                                    .map(SelectedStockVO::getCode)\n                                    .collect(Collectors.toList()))),\n                            type,\n                            HqParamsConverterUtil.dateToDateTime(TradeDayToolFactory.getTradeDayTool().getOffsetTradeDay(tradeDay, pickedDateOffset),\n                                    TradeDayToolFactory.getTradeDayTool().getOffsetTradeDay(tradeDay, pickedDateOffset)));\n                })\n                .filter(Objects::nonNull)\n                .collect(Collectors.toList())\n                .stream()\n                .map(Map::entrySet)\n                .flatMap(Set::stream)\n                .distinct()\n                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (v1, v2) -> v1));\n    }\n\n    public Map<String, Double> getLevel2Result(String codeList, String dataType, String dateTime) {\n        Map<String, Double> resultMap = new HashMap<>();\n\n        // 默认获取所有股票数据，默认时间是当天\n        if (!StringUtils.hasText(codeList)) {\n            codeList = \"33();17();22()\";\n        }\n        if (!StringUtils.hasText(dateTime)) {\n            Date date = new Date();\n            String today = cn.hutool.core.date.DateUtil.format(date, DatePattern.PURE_DATE_FORMAT);\n            dateTime = String.format(\"16384(%s-%s)\", today, today);\n        }\n        ArsenalLevel2QuoteDTO quoteDTO = new ArsenalLevel2QuoteDTO();\n        quoteDTO.setCodeList(codeList);\n        quoteDTO.setDateTime(dateTime);\n        quoteDTO.setDataType(dataType);\n        quoteDTO.setAppName(LocalCache.APPNAME);\n        String arsenalResult;\n        try {\n            arsenalResult = arsenalService.getLevel2QuoteResult(quoteDTO);\n        } catch (Exception e) {\n            log.error(\">>请求行情数据异常--codeList:{},dataType:{},dateTime{}\", quoteDTO.getCodeList(), quoteDTO.getDataType(), quoteDTO.getDateTime(), e);\n            return resultMap;\n        }\n\n        // 解析\n        ObjectMapper objectMapper = new ObjectMapper();\n        JsonNode root;\n        try {\n            root = objectMapper.readTree(arsenalResult);\n            ArrayNode arrayNode = (ArrayNode) root.get(\"result\").get(\"data\");\n            for (JsonNode item : arrayNode) {\n                String code = item.get(\"4\").asText();\n                Double value = item.get(\"table\").get(0).get(dataType).asDouble();\n                resultMap.put(code, value);\n            }\n        } catch (Exception e) {\n            log.error(\">>解析行情数据异常--result:{}\", arsenalResult, e);\n        }\n        return resultMap;\n\n    }\n}\n",
    "relevantFile": "<file_path>src/main/java/org/example/App.java\npackage org.example;\n\nimport cn.hutool.core.date.LocalDateTimeUtil;\nimport cn.hutool.core.io.FileUtil;\nimport cn.hutool.core.lang.Pair;\nimport cn.hutool.core.net.URLEncoder;\nimport cn.hutool.core.text.CharSequenceUtil;\nimport cn.hutool.core.text.UnicodeUtil;\nimport lombok.SneakyThrows;\nimport org.slf4j.helpers.MessageFormatter;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.DirectoryStream;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.util.*;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\npublic class App {\n\n    public static void main(String[] args) {\n        String s=\"{\\\"copy_id\\\":$source_copy_id,\\\"target_storage_id\\\":$target_storage_id}\";\n    }\n\n    public static void localDateTimeUtil() {\n        LocalDate localDate = LocalDateTimeUtil.parseDate(\"2024-05-31\");\n        System.out.println(localDate);\n        long epochMilli = LocalDateTimeUtil.toEpochMilli(localDate);\n        System.out.println(epochMilli);\n        LocalDateTime localDateTime = LocalDateTimeUtil.of(epochMilli);\n        System.out.println(localDateTime);\n    }\n\n    @SneakyThrows\n    public static void filesTest() {\n        try (DirectoryStream<Path> pathDirectoryStream = Files.newDirectoryStream(Paths.get(\"D:/temp/\"))) {\n            Stream<Path> pathStream = StreamSupport.stream(pathDirectoryStream.spliterator(), false);\n            pathStream.skip(0).limit(100).forEach(System.out::println);\n        }\n    }\n\n    public static void fileUtilTest() {\n        File[] files = FileUtil.ls(\"D:/temp/\");\n        Arrays.stream(files).forEach(file-> System.out.println(file.getPath()+\"\\t\"+file.length()));\n    }\n\n    @SneakyThrows\n    public static void ex() {\n        throw new IOException(\"err\");\n    }\n\n    public static void pattern() {\n<file_path>starter/src/main/java/com/myhexin/AppApplication.java\npackage com.myhexin;\n\nimport com.ctrip.framework.apollo.spring.annotation.EnableApolloConfig;\nimport com.myhexin.job.core.annotation.EnableHexinJob;\nimport org.apache.dubbo.config.spring.context.annotation.EnableDubbo;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.scheduling.annotation.EnableAsync;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\n/**\n * 描述：启动类\n *\n * @author 老代码\n */\n@EnableAsync(proxyTargetClass = true)\n@EnableTransactionManagement\n@EnableScheduling\n@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})\n@ComponentScan(\"com.myhexin.*\")\n@EnableApolloConfig\n@EnableDubbo\n@EnableFeignClients(value=\"com.myhexin.*\")\n@EnableHexinJob\npublic class AppApplication extends SpringBootServletInitializer{\n\n    public static void main(String[] args)\n    {\n        System.setProperty(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n        SpringApplication.run(AppApplication.class, args);\n    }\n}\n<file_path>src/main/java/org/example/test/JacksonTest.java\npackage org.example.test;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.deser.std.NumberDeserializers;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\nimport org.example.component.ResponseData;\nimport org.example.component.Stock;\nimport org.example.component.TestEntity;\n\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.net.URL;\nimport java.util.*;\n\n/**\n * @author zengxin [zengxin@myhexin.com]\n * @date 2021/05/25\n */\npublic class JacksonTest {\n\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    public static void main(String[] args) {\n        try {\n            readTestEntity();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void testChild() throws JsonProcessingException {\n        Stock stock = new Stock();\n        System.out.println(MAPPER.writeValueAsString(stock));\n        Stock.ChildStock childStock = new Stock.ChildStock();\n        System.out.println(MAPPER.writeValueAsString(childStock));\n    }\n\n    private static void testResponseData() throws IOException {\n        ResponseData responseData = new ResponseData();\n        responseData.setStatusCode(0);\n        responseData.setStatusMsg(\"ok\");\n        responseData.setData(Arrays.asList(\"1\", \"2\", \"3\"));\n        responseData.setPrice(1.0 / -3);\n        responseData.setDecimal(new BigDecimal(\"30.00\"));\n        String s = MAPPER.writeValueAsString(responseData);\n        System.out.println(s);\n        System.out.println(MAPPER.readValue(s, ResponseData.class));\n    }\n\n    private static void readStock() throws IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        SimpleModule module = new SimpleModule();\n        module.addDeserializer(Number.class, new NumberDeserializers.BigDecimalDeserializer());\n        objectMapper.registerModule(module);\n\n        URL url = JacksonTest.class.getClassLoader().getResource(\"stock.json\");\n        Stock stock = objectMapper.readValue(url, Stock.class);\n<file_path>src/main/java/org/example/component/Stock.java\npackage org.example.component;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.NoArgsConstructor;\n\nimport java.math.BigDecimal;\nimport java.util.List;\n\n/**\n * @author zengxin [zengxin@myhexin.com]\n * @date 2021/08/23\n */\n@Data\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class Stock {\n\n    private String stockCode;\n\n    private Object market;\n\n    private BigDecimal price;\n\n    @JsonSerialize(using = CustomDoubleSerializer.class)\n    private Double change;\n\n    private Boolean enabled;\n\n    private List<List<Object>> body;\n\n    private Long timestamp;\n\n    private String time;\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    @EqualsAndHashCode(callSuper = true)\n    public static class ChildStock extends Stock{\n\n        @JsonProperty(\"child_st\")\n        private String stockCode;\n    }\n}",
    "relevantFileList": [],
    "filePath": "isolation/src/main/java/com/myhexin/aixg/level2/impl/Level2QuotesServiceImpl.java",
    "template": "java",
    "multiRes": {
      "hipilot": "com.fasterxml.jackson.databind.node.ArrayNode;\nimport com.myhexin.aixg.level2.Level2QuotesService;",
      "CodeQwen2.5-7B": "com.fasterxml.jackson.databind.node.ArrayNode;",
      "copilot": "e\n    ",
      "CodeQwen1.5-7B": " com.fasterxml.jackson.databind.node.ArrayNode;"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.interfaces.rest.req.converter;\n\nimport com.myhexin.community.operating.deploy.interfaces.rest.req.aicomment.AiCommentRuleRequest;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.dto.AiCommentAutoRuleDTO;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.ContentRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.ScenariosRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.UserRules;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.factory.Mappers;\n\n/**\n * AI评论请求参数转换\n *\n * @author chenmengsong@myhexin.com\n * @date 2024/6/14\n */\n@Mapper\npublic interface AiCommentReqConvert {\n\n    AiCommentReqConvert INSTANCE = Mappers.getMapper(AiCommentReqConvert.class);\n\n    /**\n     * 请求参数转换为数据传输对象\n     *\n     * @param request 请求参数\n     * @return 数据传输对象\n     */\n    @Mapping(target = \"contentRule\", qualifiedByName = \"convertContentRules\")\n    AiCommentAutoRuleDTO reqToDto(AiCommentRuleRequest request);\n\n    /**\n     * 内容规则转换\n     *\n     * @param contentRules 内容规则\n     * @return 内容规则\n     */\n    default ContentRules convertContentRules(ContentRules contentRules) {\n        if (contentRules == null) {\n            return null;\n        }\n        if (contentRules.getContentLength() == null && contentRules.getContentType() == null && contentRules.getContentCategory() == null){\n            return null;\n        }\n        return contentRules;\n    }\n    /**\n     * 场景规则转换\n     * @param scenariosRules 场景规则\n     * @return 场景规则\n     */\n    default ScenariosRules convertScenariosRules(ScenariosRules scenariosRules) {\n        if (scenariosRules == null) {\n            return null;\n        }\n        if (scenariosRules.getScenarioType() == null && scenariosRules.getScenarioCode() == null){\n            return null;\n        }\n        return scenariosRules;\n    }\n    /**\n     * 用户规则转换\n     * @param userRules 用户规则\n     *                  ",
    "infill": "@return 用户规则\n     */\n    default UserRules convertUserRules(UserRules userRules) {\n        if (userRules == null) {\n            return null;\n        }\n        if (userRules.getBlackList() == null && userRules.getWhiteList() == null){\n            return null;\n        }\n        return userRules;\n    }\n\n}\n",
    "suffix": "",
    "relevantFile": "<file_path>src/main/java/com/myhexin/community/operating/deploy/modules/aicomment/domain/entity/ScenariosRules.java\npackage com.myhexin.community.operating.deploy.modules.aicomment.domain.entity;\n\nimport lombok.Data;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/04\n */\n@Data\npublic class ScenariosRules {\n\n    /**\n     * 场景类别  用同花顺小市场类别\n     */\n    private String scenarioType;\n\n    /**\n     * 场景类别\n     */\n    private String scenarioCode;\n}\n<file_path>src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/controller/aicomment/AiCommentController.java\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.dto.AiCommentAutoRuleDTO;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.FillingRules;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * AI评论接口\n *\n * @author chenmengsong@myhexin.com\n * @date 2024/6/14\n */\n@RestController\n@RequestMapping(\"/auth/api/ai_comment\")\n@RequiredArgsConstructor\npublic class AiCommentController {\n\n    private final AiCommentManager aiCommentManager;\n\n    /**\n     * 添加AI评论规则\n     *\n     * @param aiCommentRuleRequest 请求参数\n     * @return 响应\n     */\n    @PostMapping(\"/v1/add_rules\")\n    public BaseResponseVO<Void> addAiCommentRule(@RequestBody AiCommentRuleRequest aiCommentRuleRequest) {\n        AiCommentAutoRuleDTO aiCommentAutoRuleDTO = AiCommentReqConvert.INSTANCE.reqToDto(aiCommentRuleRequest);\n        aiCommentManager.addAiCommentRule(aiCommentAutoRuleDTO);\n        return BaseResponseVO.success();\n    }\n\n    /**\n     * 修改AI评论规则\n     *\n     * @param ruleId               规则ID\n     * @param aiCommentRuleRequest 请求参数\n     * @return 响应\n     */\n    @PostMapping(\"/v1/edit_rules/{rule_id}\")\n    public BaseResponseVO<Void> editAiCommentRule(@PathVariable(\"rule_id\") Long ruleId,\n                                                  @RequestBody AiCommentRuleRequest aiCommentRuleRequest) {\n        AiCommentAutoRuleDTO aiCommentAutoRuleDTO = AiCommentReqConvert.INSTANCE.reqToDto(aiCommentRuleRequest);\n        aiCommentAutoRuleDTO.setId(ruleId);\n        aiCommentManager.editAiCommentRule(aiCommentAutoRuleDTO);\n        return BaseResponseVO.success();\n    }\n\n    /**\n     * 修改AI评论规则状态\n     *\n     * @param ruleId               规则ID\n     * @param aiCommentRuleRequest 请求参数\n     * @return 响应\n     */\n    @PostMapping(\"/v1/update_rule_status/{rule_id}\")\n    public BaseResponseVO<Void> updateAiCommentRuleStatus(@PathVariable(\"rule_id\") Long ruleId,\n                                                          @RequestBody AiCommentRuleRequest aiCommentRuleRequest) {\n<file_path>src/main/java/com/myhexin/community/operating/deploy/modules/aicomment/domain/dto/AiCommentAutoRuleDTO.java\n\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.ContentRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.FillingRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.ScenariosRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.UserRules;\nimport lombok.Data;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/04\n */\n@Data\npublic class AiCommentAutoRuleDTO {\n\n    /**\n     * 规则id\n     */\n    private Long id;\n\n    /**\n     * 提示词\n     */\n    private String prompt;\n\n    /**\n     * 用户维度的规则\n     */\n    private UserRules userRule;\n\n    /**\n     * 内容维度的规则\n     */\n    private ContentRules contentRule;\n\n    /**\n     * 场景维度的规则\n     */\n    private ScenariosRules scenariosRule;\n\n    /**\n     * 填充规则\n     */\n    private FillingRules fillingRules;\n\n    /**\n     * 操作者\n     */\n    private String operator;\n\n    /**\n     * 规则状态\n     */\n    private String status;\n\n    /**\n     * 规则创建时间\n     */\n    private Long ctime;\n\n    /**\n<file_path>src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/req/aicomment/AiCommentRuleRequest.java\npackage com.myhexin.community.operating.deploy.interfaces.rest.req.aicomment;\n\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.ContentRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.FillingRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.ScenariosRules;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.entity.UserRules;\nimport lombok.Data;\n\n/**\n * AI评论规则请求\n *\n * @author chenmengsong@myhexin.com\n * @date 2024/6/14\n */\n@Data\npublic class AiCommentRuleRequest {\n\n    /**\n     * 规则id\n     */\n    private Long id;\n\n    /**\n     * 提示词\n     */\n    private String prompt;\n\n    /**\n     * 用户维度的规则\n     */\n    private UserRules userRule;\n\n    /**\n     * 内容维度的规则\n     */\n    private ContentRules contentRule;\n\n    /**\n     * 场景维度的规则\n     */\n    private ScenariosRules scenariosRule;\n\n    /**\n     * 填充规则\n     */\n    private FillingRules fillingRules;\n\n    /**\n     * 状态\n     */\n    private String status;\n}",
    "relevantFileList": [],
    "filePath": "src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/req/converter/AiCommentReqConvert.java",
    "template": "java",
    "multiRes": {
      "hipilot": "@return 用户规则\n     */\n    default UserRules convertUserRules(UserRules userRules) {\n        if (userRules == null) {\n            return null;\n        }",
      "CodeQwen2.5-7B": "@return 用户规则",
      "copilot": "@return 用户规则\n     */\n    default UserRules convertUserRules(UserRules userRules) {\n        if (userRules == null) {\n            return null;\n        }\n        if (userRules.getBlackList() == null && userRules.getWhiteList() == null){\n            return null;\n        }\n        return userRules;\n    }\n\n}\n",
      "CodeQwen1.5-7B": " "
    }
  },
  {
    "prefix": "package com.hexin.kaihu.kaihuadmin.repository.impl;\n\n\nimport com.github.pagehelper.PageHelper;\nimport com.github.pagehelper.PageInfo;\nimport com.hexin.kaihu.kaihuadmin.converter.FlowStatsConverter;\nimport com.hexin.kaihu.kaihuadmin.entity.FlowDataStats;\nimport com.hexin.kaihu.kaihuadmin.entity.FlowRecommendStats;\nimport com.hexin.kaihu.kaihuadmin.entity.model.FlowDataStatsPO;\nimport com.hexin.kaihu.kaihuadmin.entity.model.FlowRecommendStatsPO;\nimport com.hexin.kaihu.kaihuadmin.mapper.FlowDataStatsMapper;\nimport com.hexin.kaihu.kaihuadmin.mapper.FlowRecommendStatsMapper;\nimport com.hexin.kaihu.kaihuadmin.repository.FlowStatsRepository;\nimport com.hexin.kaihu.kaihuadmin.request.FlowDataStatsQry;\nimport com.hexin.kaihu.kaihuadmin.request.FlowDataStatsRequest;\nimport com.hexin.kaihu.kaihuadmin.request.FlowRecommendStatsQry;\nimport com.hexin.kaihu.kaihuadmin.request.FlowRecommendStatsRequest;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\nimport java.util.List;\n\n\n/**\n * FlowStatsRepositoryImpl\n * @date 2024/5/27 14:10\n * @author wangshengchuang@myhexin.com\n */\n@Service\npublic class FlowStatsRepositoryImpl implements FlowStatsRepository {\n\n    @Resource\n    private FlowRecommendStatsMapper flowRecommendStatsMapper;\n\n    @Resource\n    private FlowDataStatsMapper flowDataStatsMapper;\n\n    @Override\n    public PageInfo<FlowRecommendStats> pageRecommendByCondition(FlowRecommendStatsRequest flowRecommendStatsRequest) {\n        PageHelper.startPage(flowRecommendStatsRequest.getPage(), flowRecommendStatsRequest.getLimit());\n        FlowRecommendStatsQry flowRecommendStatsQry = FlowStatsConverter.toPo(flowRecommendStatsRequest);\n        List<FlowRecommendStatsPO> flowRecommendStatsPoList = flowRecommendStatsMapper.pageByCondition(flowRecommendStatsQry);\n        PageHelper.clearPage();\n        PageInfo<FlowRecommendStatsPO> pageInfo = new PageInfo<>(flowRecommendStatsPoList);\n        return FlowStatsConverter.toRecommendPageEntity(pageInfo);\n    }\n\n    @Override\n    public FlowDataStats sumDataByCondition(FlowDataStatsRequest flowDataStatsRequest) {\n        FlowDataStatsQry flowDataStatsQry = FlowStatsConverter.toPo(flowDataStatsRequest);\n        FlowDataStatsPO flowDataStatsPo = flowDataStatsMapper.sumByCondition(flowDataStatsQry);\n        return FlowStatsConverter.toPo(flowDataStatsPo);\n    }\n\n    @Override\n    public PageInfo<FlowDataStats> pageDataByCondition(FlowDataStatsRequest flowDataStatsRequest) {\n        PageHelper.startPage(flowDataStatsRequest.getPage(), flowDataStatsRequest.getLimit());\n        FlowDataStatsQry flowDataStatsQry = FlowStatsConverter.toPo(flowDataStatsRequest);\n        List<FlowDataStatsPO> flowDataStatsPoList = flowDataStatsMapper.pageByCondition(flowDataStatsQry);\n        PageHelper.clearPage();\n        PageInfo<FlowDataStatsPO> pageInfo = new PageInfo<>(flowDataStatsPoList);\n        return FlowStatsConverter.toDataPageEntity(pageInfo);\n    }\n\n    @Override\n    public List<FlowRecommendStats> listRecommendByCondition(FlowRecommendStats flowRecommendStats) {\n        FlowRecommendStatsPO flowRecommendStatsPo = FlowStatsConverter.toPo(flowRecommendStats);\n        List<FlowRecommendStatsPO> flowRecommendStatsPoList = flowRecommendStatsMapper.listRecommendByCondition(flowRecommendStatsPo);\n        return FlowStatsConverter.toPo(flowRecommendStatsPoList);\n    }\n\n    @Override\n    public void  deleteRecommendByAddDayAndBrokerId(String addDay, List<Integer> brokerIdList) {\n        flowRecommendStatsMapper.deleteRecommendByAddDayAndBrokerId(addDay, brokerIdList);\n    }\n\n    @Override\n    public void deleteRecommendByAddDayAndProvince(String addDay, String province){\n    \n    }\n\n    @Override\n    public void insertFlowRecommendS",
    "infill": "List<F",
    "suffix": "lowRecommendStats> flowRecommendStatsList) {\n        List<FlowRecommendStatsPO> flowRecommendStatsPoList = FlowStatsConverter.toRecommendPoList(flowRecommendStatsList);\n        flowRecommendStatsMapper.insertFlowRecommendStats(flowRecommendStatsPoList);\n    }\n\n    @Override\n    public void insertFlowDataStats(List<FlowDataStats> flowDataStatsList) {\n        List<FlowDataStatsPO> flowDataStatsPoList = FlowStatsConverter.toDataPoList(flowDataStatsList);\n        flowDataStatsMapper.insertFlowDataStats(flowDataStatsPoList);\n    }\n\n    @Override\n    public void updateFlowRecommendStats(FlowRecommendStats flowRecommendStats) {\n        FlowRecommendStatsPO flowRecommendStatsPo = FlowStatsConverter.toPo(flowRecommendStats);\n        flowRecommendStatsMapper.updateFlowRecommendStats(flowRecommendStatsPo);\n    }\n\n    @Override\n    public List<FlowRecommendStats> sumRecommendStatsByBrokerId(FlowRecommendStats flowRecommendStats) {\n        FlowRecommendStatsPO flowRecommendStatsPo = FlowStatsConverter.toPo(flowRecommendStats);\n        List<FlowRecommendStatsPO> recommendStatsList = flowRecommendStatsMapper.sumRecommendStatsByBrokerId(flowRecommendStatsPo);\n        return FlowStatsConverter.toPo(recommendStatsList);\n    }\n\n    @Override\n    public void batchUpdateByProvince(FlowRecommendStats flowRecommendStats) {\n        FlowRecommendStatsPO flowRecommendStatsPo = FlowStatsConverter.toPo(flowRecommendStats);\n        flowRecommendStatsMapper.batchUpdateByProvince(flowRecommendStatsPo);\n    }\n}\n",
    "relevantFile": "<file_path>src/main/java/com/hexin/kaihu/kaihuadmin/manager/xxljob/FlowStatsNewXxlJobManager.java\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * FlowStatsNewXxlJobManager\n * @Author wangshengchuang\n * @time: 2022/10/26 19:11\n */\n@Slf4j\n@Component\npublic class FlowStatsNewXxlJobManager {\n\n    public static final Integer REGISTER = 0;\n\n    public static final String TABLE = \"kh_logs\";\n\n    public static final String KEY = \"KH_flow_bind\";\n\n    public static final Integer ONE = 1;\n\n    public static final Integer TWO = 2;\n\n    public static final Integer THREE = 3;\n\n    @Autowired\n    private KhLogMapper khLogMapper;\n    @Autowired\n    private FlowStatsMapper flowStatsMapper;\n    @Autowired\n    private FlowStatsClientMapper flowStatsClientMapper;\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    @Resource\n    private FlowStatsNewXxlJobService flowStatsNewXxlJobService;\n\n    /**\n     *插入来源数据\n     *@Author wangshengchuang\n     *@time: 2022/3/25 16:01\n     */\n    public void updateFlowData() {\n        String yesterday = DateUtil.formatLocalDateTimeToString(\n                DateUtil.getCurrentLocalDateTime().minusDays(ONE), DateUtil.DATE_FMT_3);\n        String table1 = TABLE + DateUtil.formatLocalDateTimeToString(\n                DateUtil.getCurrentLocalDateTime().minusDays(ONE), DateUtil.DATE_FMT_14);\n        String twoDay = DateUtil.formatLocalDateTimeToString(\n                DateUtil.getCurrentLocalDateTime().minusDays(TWO), DateUtil.DATE_FMT_3);\n        String threeDay = DateUtil.formatLocalDateTimeToString(\n                DateUtil.getCurrentLocalDateTime().minusDays(THREE), DateUtil.DATE_FMT_3);\n        getLogDealMap(table1,yesterday);\n        updateApply(yesterday,twoDay,threeDay);\n        flowStatsData(yesterday);\n        flowStatsData(twoDay);\n        flowStatsData(threeDay);\n\n    }\n    /**\n     * 插入流量分配注册用户\n<file_path>src/main/java/com/hexin/kaihu/kaihuadmin/repository/FlowStatsRepository.java\n * @author wangshengchuang@myhexin.com\n */\npublic interface FlowStatsRepository {\n\n    /**\n     * pageRecommendByCondition\n     * @param flowRecommendStatsRequest 流量推荐报表入参\n     * @date 2024/5/27 11:20\n     * @author wangshengchuang@myhexin.com\n     * @return PageInfo<FlowRecommendStats>\n     */\n    PageInfo<FlowRecommendStats> pageRecommendByCondition(FlowRecommendStatsRequest flowRecommendStatsRequest);\n\n    /**\n     * sumDataByCondition\n     * @param flowDataStatsRequest 流量历史报表汇总\n     * @date 2024/5/27 11:21\n     * @author wangshengchuang@myhexin.com\n     * @return FlowDataStats\n     */\n    FlowDataStats sumDataByCondition(FlowDataStatsRequest flowDataStatsRequest);\n\n    /**\n     * 分页查询\n     * @param flowDataStatsRequest 排序因子请求参数\n     * @date 2024/3/7 13:56\n     * @author wangshengchuang@myhexin.com\n     * @return PageInfo<FlowDataStats>\n     */\n    PageInfo<FlowDataStats> pageDataByCondition(FlowDataStatsRequest flowDataStatsRequest);\n\n    /**\n     * listRecommendByCondition\n     * @param flowRecommendStats 流量推荐报表参数\n     * @date 2024/5/27 11:21\n     * @author wangshengchuang@myhexin.com\n     * @return  List<FlowRecommendStats>\n     */\n    List<FlowRecommendStats> listRecommendByCondition(FlowRecommendStats flowRecommendStats);\n\n    /**\n     * deleteRecommendByAddDayAndBrokerId\n     * @param addDay 日期\n     * @param brokerIdList 券商ID列表\n     * @date 2024/5/27 11:22\n     * @author wangshengchuang@myhexin.com\n     */\n    void deleteRecommendByAddDayAndBrokerId(String addDay, List<Integer> brokerIdList);\n\n    /**\n     * 根据省份删除\n     * @param addDay 日期\n     * @param province 省份\n     * @date 2024/6/11 21:26\n     * @author wangshengchuang@myhexin.com\n     */\n    void deleteRecommendByAddDayAndProvince(String addDay, String province);\n\n    /**\n     * insertFlowRecommendStats",
    "relevantFileList": [],
    "filePath": "src/main/java/com/hexin/kaihu/kaihuadmin/repository/impl/FlowStatsRepositoryImpl.java",
    "template": "java",
    "multiRes": {
      "hipilot": "tats(List<F",
      "CodeQwen2.5-7B": "tats(List<F",
      "copilot": "List<F",
      "CodeQwen1.5-7B": " tats(List<F<file_sep> /kaihuadmin/src/main/java/com/hexin/kaihu/kaihuadmin/repository/impl/FlowStatsRepositoryImpl.java"
    }
  },
  {
    "prefix": "public class Main {\n    public static void main(String[] args) {\n        //TIP Press <shortcut actionId=\"ShowIntentionActions\"/> with your caret at the highlighted text\n        // to see how IntelliJ IDEA suggests fixing it.\n        System.out.print(\"Hello and welcome!\");\n\n        for (int i = 1; i <= 5; i++) {\n            //TIP Press <shortcut actionId=\"Debug\"/> to start debugging your code. We have set one <icon src=\"AllIcons.Debugger.Db_set_breakpoint\"/> breakpoint\n            // for you, but you can always add more by pressing <shortcut actionId=\"ToggleLineBreakpoint\"/>.\n            System.out.println(\"i = \" + i);\n        }\n\n        switch (args.length) {\n            case 0:\n                System.out.println(\"No arguments were passed.\");\n                break;\n            case 1:\n                System.out.println(\"One argument was passed.\");\n                break;\n                case 2:\n                System.out.println(\"Two arguments were passed.\");\n                break;\n                case 3:\n                System.out.println(\"Three arguments were passed.\");\n                case 4:\n                System.out.println(\"Four arguments were passed.\");\n                break;\n                case 5:\n                System.out.println(\"Five arguments were passed.\");\n                case 6:\n                System.out.println(\"Six arguments were passed.\");\n                case 7:\n                System.out.println(\"Seven arguments were passed.\");\n                case 8:\n                System.out.println(\"Eight arguments were passed.\");\n                case 9:\n                System.out.println(\"Nine arguments were passed.\");\n                case 10:\n                System.out.println(\"Ten arguments were passed.\");\n                case 11:\n                Syst",
    "infill": "em.out.println(\"Eleven arguments were passed.\");\n            default",
    "suffix": ":\n                System.out.println(\"More than one argument was passed.\");\n        }\n\n    }\n}",
    "relevantFile": "<file_path>src/Student.java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n\npublic class Student {\n    private String name;\n    private int age;\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n<file_path>src/Main22.java\n//TIP 要<b>运行</b>代码，请按 <shortcut actionId=\"Run\"/> 或\n// 点击装订区域中的 <icon src=\"AllIcons.Actions.Execute\"/> 图标。\npublic class Main22 {\n    public static void main(String[] args) {\n        //TIP 当文本光标位于高亮显示的文本处时按 <shortcut actionId=\"ShowIntentionActions\"/>\n        // 查看 IntelliJ IDEA 建议如何修正。\n        System.out.printf(\"Hello and welcome!\");\n\n        for (int i = 1; i <= 5; i++) {\n            //TIP 按 <shortcut actionId=\"Debug\"/> 开始调试代码。我们已经设置了一个 <icon src=\"AllIcons.Debugger.Db_set_breakpoint\"/> 断点\n            // 但您始终可以通过按 <shortcut actionId=\"ToggleLineBreakpoint\"/> 添加更多断点。\n            System.out.println(\"i = \" + i);\n            if (i == 3) {\n                break;\n            } else if (i == 2) {\n                continue;\n            } else if (i == 1) {\n                System.out.println(\"i is 1\");\n            } else {\n                System.out.println(\"i is not 1\");\n            }\n        }\n    }\n}\nIP To <b>Run</b> code, press <shortcut actionId=\"Run\"/> or\nclick the <icon src=\"AllIcons.Actions.Execute\"/> icon in the gutter.",
    "relevantFileList": [],
    "template": "java",
    "multiRes": {
      "hipilot": ".out.println(\"Eleven arguments were passed.\");\n                break;\n            default",
      "CodeQwen2.5-7B": "em.out.println(\"Eleven arguments were passed.\");",
      "copilot": "em.out.println(\"Eleven arguments were passed.\");\n            default",
      "CodeQwen1.5-7B": " em.out.println(\"Eleven arguments were passed.\");"
    }
  },
  {
    "prefix": "package com.myhexin.sre.change.event.deploy.modules.plane.domain.entity;\n\npublic class ChangeExePlanOrderId {\n    private Long p",
    "infill": "lanId;\n}\n",
    "suffix": "",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/valueobjects/ExePlanInstance.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.valueobjects;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * 变更计划关联变更主体\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/20\n */\n@Data\npublic class ExePlanInstance {\n    /**\n     * 主体名\n     */\n    private String name;\n    /**\n     * 主体类型\n     */\n    private String type;\n    /**\n     * 部署名称列表\n     */\n    private List<String> deploymentName;\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/enums/ChangeSceneGenerationEnum.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.enums;\n\n/**\n * 变更场景代际\n *\n * @author zhounan3@myhexin.com\n * @date 2024/06/28\n */\npublic enum ChangeSceneGenerationEnum {\n    /**\n     * 文本\n     */\n    G0(\"G0\"),\n    /**\n     * json\n     */\n    G1(\"G1\");\n\n    private final String name;\n\n    private ChangeSceneGenerationEnum(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/infrastructure/db/repository/ChangeExePlanOrderRepositoryImpl.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.infrastructure.db.repository;\n\nimport com.myhexin.sre.change.event.deploy.modules.plane.domain.repository.ChangeExePlanOrderRepository;\n\npublic class ChangeExePlanOrderRepositoryImpl implements ChangeExePlanOrderRepository {\n}\n<file_path>deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/repository/ChangeExePlanOrderRepository.java\npackage com.myhexin.sre.change.event.deploy.modules.plane.domain.repository;\n\npublic interface ChangeExePlanOrderRepository {\n    public void save();\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/sre/change/event/deploy/modules/plane/domain/entity/ChangeExePlanOrderId.java",
    "template": "java",
    "multiRes": {
      "hipilot": "id;\n    private Long id;\n}",
      "CodeQwen2.5-7B": "lanOrderId;",
      "copilot": "lanId;\n}\n",
      "CodeQwen1.5-7B": " lanId;"
    }
  },
  {
    "prefix": "package com.myhexin.aixg.constant;\n\n\n/**\n * @Author: liuyu <liuyu3@myhexin.com>\n * @Date: 2022/6/28 10:58\n */\npublic class ConstantString {\n\n    /**\n     * http msg成功\n     */\n    public static final String SUCCESS = \"success\";\n    public static final String FAIL = \"fail\";\n    public static final String ERROR = \"error\";\n    public static final String MSG = \"msg\";\n    public static final Boolean res = true;\n    public static final Boolean res1 = false;\n    public static final String CODE = \"code\";\n    public static final Object DATA = \"data\";\n    public static final Integer num = 200;\n    public static final Integer num1 = 500;\n    public static final Integer num2 = 404;\n    private static final Boolean res22 = false;\n    public static final String res2 = \"true\";\n    private static final String res3 = \"false\";\n    public add() {\n        System.out.println(\"add\");\n    }\n    public delete() {\n        System.out.println(\"delete\");\n    }\n    public update() {\n        System.out.println(\"update\");\n    }\n    public query(q) {\n        System.out.println(\"query\");\n        if (!q) {\n            return;\n        } else {\n            if (a > 0) {\n                q = a++;\n            } else if (a",
    "infill": " < 0) {\n                q = ",
    "suffix": "a--;\n            } else {\n                q = a;\n            }\n\n        }\n    }\n\n    /**\n     * 日期个格式\n     */\n    public static final String DATE_FORMAT = \"yyyyMMdd\";\n\n    /**\n     * 行情结果result1\n     */\n    public static final String LEVEL2_RESULT = \"result\";\n\n    /**\n     * PARENT_ID\n     */\n    public static final String PARENT_ID = \"parent_id\";\n\n    /**\n     * strategies\n     */\n    public static final String STRATEGIES = \"strategies\";\n\n    /**\n     * trend\n     */\n    public static final String TREND = \"trend\";\n\n    private ConstantString(){\n        //常量禁止new\n        // 实现数组排序\n        // Arrays.sort(new int[]{1, 2, 3});\n        String[] arr = new String[]{\"1\", \"2\", \"3\"};\n        System.out.println(arr);\n        // 取数组最大值\n        Arrays.stream(new int[]{1, 2, 3}).max().getAsInt();\n        System.out.println(arr);\n    }\n}\n",
    "relevantFile": "",
    "relevantFileList": [],
    "filePath": "application/src/main/java/com/myhexin/aixg/constant/ConstantString.java",
    "template": "java",
    "multiRes": {
      "hipilot": "a < 0) {\n                q = ",
      "CodeQwen2.5-7B": " < 0) {",
      "copilot": " < 0) {\n                q = ",
      "CodeQwen1.5-7B": "  < 0) {"
    }
  },
  {
    "prefix": "package com.myhexin.zixun.server.news.page.app.deploy.interfaces.rest.controller;\n\nimport com.myhexin.b2cweb.zixun.cookie.CookieAuth;\nimport com.myhexin.b2cweb.zixun.cookie.ThsCookieInfo;\nimport com.myhexin.zixun.response.config.annotation.SupportBodyRewrite;\nimport com.myhexin.zixun.server.news.page.app.deploy.common.service.LinkQuestionReportService;\nimport com.myhexin.zixun.server.news.page.app.deploy.interfaces.rest.query.LinkQuestionReportQuery;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.MediaType;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * 魔毯问题反馈\n *\n * @author leixiangyang@myhexin.com\n * @date 2024/6/20 20:37\n **/\n@Slf4j\n@Validated\n@RestController\n@SupportBodyRewrite\n@RequiredArgsConstructor\n@RequestMapping(\"/link-question/v1\")\npublic class LinkQuestionReportController {\n    private final LinkQuestionReportService linkQuestionReportService;\n\n    @PostMapping(value = \"report\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public Boolean report(@RequestBody LinkQuestionReportQuery linkQuestionReportQuery, HttpServletRequest httpServletRequest) {\n        CookieAuth cookieAuth = CookieAuth.parseCookies(httpServletRequest.getCookies());\n        if (coo",
    "infill": "kieAuth == null || cookieAuth.getUserId() == null) {\n            log.warn(\"cookieAuth is null\");\n            return false;\n        }\n        retur",
    "suffix": "n linkQuestionReportService.report(linkQuestionReportQuery.getQuestion(), cookieAuth.getUserId(), linkQuestionReportQuery.getSeq());\n    }\n}\n",
    "relevantFile": "<file_path>src/main/java/com/myhexin/zixun/deploy/config/SwitchProperties.java\npackage com.myhexin.zixun.deploy.config;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author gaoqiang\n * @Description 开关配置类\n * @date 2024/3/15\n **/\n@Data\n@Configuration\n@ConfigurationProperties(prefix = \"switch\")\npublic class SwitchProperties {\n    /**\n     * 调用flow-gpt时候的切换开关\n     * true表示切换到新逻辑\n     * false表示不切换，使用老逻辑\n     */\n    private Boolean flowGptSwitch;\n\n\n    /**\n     * 2024.04.09 资讯文章全量识别期货需求\n     * 期货识别开关\n     * true  表示开启所有文章识别期货\n     * false 表示按之前的逻辑识别期货文章\n     */\n    private Boolean futureMatchSwitch;\n\n    /**\n     * 期货额外识别扩展开关\n     * true  表示开启期货额外识别\n     * false 表示按之前的逻辑识别期货文章\n     */\n    private Boolean futureExtendMatchSwitch;\n}\n<file_path>deploy/src/main/java/com/myhexin/zixun/server/news/page/app/deploy/common/service/impl/LinkQuestionReportServiceImpl.java\npackage com.myhexin.zixun.server.news.page.app.deploy.common.service.impl;\n\nimport com.myhexin.zixun.server.news.page.app.deploy.common.service.LinkQuestionReportService;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Service;\n\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * 魔毯问题反馈\n *\n * @author leixiangyang@myhexin.com\n * @date 2024/6/20 20:55\n **/\n@Service\n@Slf4j\n@RequiredArgsConstructor\npublic class LinkQuestionReportServiceImpl implements LinkQuestionReportService {\n    private static final String QUESTION_COUNT_PREFIX = \"question:count:%s\";\n    private static final String QUESTION_USER_PREFIX = \"question:user:%s\";\n\n    private static final int EXPIRE_TIME = 15;\n    private static final DateTimeFormatter QUESTION_COUNTER_PATTERN = DateTimeFormatter.ofPattern(\"yyyyMMdd\");\n\n    private final RedisTemplate<String, Object> redisTemplate;\n\n    @Override\n    public Boolean report(String question, Integer userId, String seq) {\n        // 问题次数统计根据日期统计\n        String questionCountKey = String.format(QUESTION_COUNT_PREFIX, LocalDate.now().format(QUESTION_COUNTER_PATTERN));\n        redisTemplate.opsForHash().increment(questionCountKey, question, 1);\n\n        // 问题反馈人列表\n        String questionUserKey = String.format(QUESTION_USER_PREFIX, question);\n        redisTemplate.opsForSet().add(questionUserKey, userId);\n\n        // 设置过期时间\n        redisTemplate.expire(questionCountKey, EXPIRE_TIME, TimeUnit.DAYS);\n        redisTemplate.expire(questionUserKey, EXPIRE_TIME, TimeUnit.DAYS);\n\n        log.info(\"底层页魔毯反馈，seq={},question={},反馈用户={}\", seq, question, userId);\n        return true;\n    }\n\n}\n<file_path>deploy/src/main/java/com/myhexin/zixun/server/news/page/app/deploy/interfaces/rest/query/LinkQuestionReportQuery.java\npackage com.myhexin.zixun.server.news.page.app.deploy.interfaces.rest.query;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport lombok.Data;\n\n/**\n * 底层页魔毯反馈Query\n *\n * @author leixiangyang@myhexin.com\n * @date 2024/6/21 15:56\n **/\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class LinkQuestionReportQuery {\n    /**\n     * 问题描述\n     */\n    private String question;\n\n    /**\n     * 文章seq\n     */\n    private String seq;\n}\n<file_path>deploy/src/main/java/com/myhexin/zixun/server/news/page/app/deploy/common/service/LinkQuestionReportService.java\npackage com.myhexin.zixun.server.news.page.app.deploy.common.service;\n\n/**\n * 魔毯反馈服务\n *\n * @author leixiangyang@myhexin.com\n * @date 2024/6/20 20:52\n **/\npublic interface LinkQuestionReportService {\n    /**\n     * 反馈问题\n     *\n     * @param question 举报的问题\n     * @param userId   用户ID\n     * @param seq      文章seq\n     * @return 反馈成功与否\n     */\n    Boolean report(String question, Integer userId, String seq);\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/zixun/server/news/page/app/deploy/interfaces/rest/controller/LinkQuestionReportController.java",
    "template": "java",
    "multiRes": {
      "hipilot": "kieAuth.getUserId() == null) {\n            return false;\n        }\n        retur",
      "CodeQwen2.5-7B": "kieAuth == null) {",
      "copilot": "kieAuth == null || cookieAuth.getUserId() == null) {\n            log.warn(\"cookieAuth is null\");\n            return false;\n        }\n        retur",
      "CodeQwen1.5-7B": " kieAuth == null) {"
    }
  },
  {
    "prefix": "package com.myhexin.zixun.conceptv2manager.deploy.common.external.rpc;\n\nimport com.alibaba.fastjson.JSON;\nimport com.myhexin.zixun.conceptv2manager.deploy.app.manager.dto.ConceptChainDTO;\nimport com.myhexin.zixun.conceptv2manager.deploy.common.config.properties.ChainProperties;\nimport com.myhexin.zixun.conceptv2manager.deploy.modules.discovery.domain.entity.FeedbackEntity;\nimport com.myhexin.zixun.flow.gpt.engine.api.api.ChainOperateRpcService;\nimport com.myhexin.zixun.flow.gpt.engine.api.dto.request.ChainExecuteQuery;\nimport com.myhexin.zixun.flow.gpt.engine.api.dto.response.ChainExecuteResponse;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.dubbo.config.annotation.DubboReference;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n\n/**\n * @author: menghaizhu\n * @date: 2023/11/14 17:16\n */\n@Slf4j\n@Service\n@RequiredArgsConstructor\npublic class NewChainOperateService {\n\n    private static final Long DELAY_TIME = 3000L;\n\n    private static final ConceptChainDTO CONCEPT_CHAINDTO = new ConceptChainDTO().setResult(false);\n\n\n    private final ChainProperties chainProperties;\n\n\n    @DubboReference(version = \"1.0.0\", retries = 0, timeout = 200_000)\n    private ChainOperateRpcService chainOperateRpcService;\n\n\n    /**\n     * @param chainId  执行链id\n     * @param paramMap 链执行全流程的全局参数\n     * @return 执行结果\n     */\n    @Nullable\n    private String executeChain(String chainId, Map<String, String> paramMap) {\n        // 链参数\n        ChainExecuteQuery chainExecuteQuery = new ChainExecuteQuery();\n        chainExecuteQuery.setChainId(chainId);\n        chainExecuteQuery.setChainParamMap(paramMap);\n\n        log.debug(\"开始执行链{},参数{}\", chainId, JSON.toJSONString(chainExecuteQuery));\n        // 执行\n        try {\n            ChainExecuteResponse chainExecuteResponse = chainOperateRpcService.executeChain(chainExecuteQuery);\n            log.debug(\"链执行完毕,执行结果{}\", chainExecuteResponse);\n            return chainExecuteResponse.getResult();\n        } catch (RuntimeException e) {\n            log.error(\"链执行失败\", e);\n        }\n        return \"\";\n    }\n\n\n    /**\n     * GPT根据个股线索和概念添加标准给出审核意见\n     *\n     * @param clue        个股线索\n     * @param addStandard 审核标准\n     * @return 审核结果\n     */\n    public ConceptChainDTO matchStockByGpt(String clue, String addStandard) {\n        HashMap<String, String> extendedMap = new HashMap<>(2);\n        extendedMap.put(\"clue\", clue);\n        extendedMap.put(\"addStandard\", addStandard);\n        try {\n            Thread.sleep(DELAY_TIME);\n        } catch (InterruptedException e) {\n            log.error(\"GPT延时失败\", e);\n            Thread.currentThread().interrupt();\n        }\n        String result = executeChain(chainProperties.getRecommendStockChainId(), extendedMap);\n        // 解析结果\n\n        try {\n            ConceptChainDTO conceptChainDTO = JSON.parseObject(result, ConceptChainDTO.class);\n            if (conceptChainDTO == null) {\n                return CONCEPT_CHAINDTO;\n            }\n            return conceptChainDTO;\n        } catch (RuntimeException e) {\n            log.error(\"解析AI审核成分股结果失败\", e);\n        }\n        return CONCEPT_CHAINDTO;\n    }\n\n    /**\n     * 根据用户反馈查询互动易/公告/官网官微\n     *\n     * @param reason 用户反馈原因\n     * @return 互动易/公告/官网官微\n     */\n    @NotNull\n    public List<FeedbackEntity.Tracing> getFeedbackTracing(@NotNull String reason) {\n        Map<String, String> paramMap = Collections.singletonMap(\"",
    "infill": "query\", reason);\n        String result = e",
    "suffix": "xecuteChain(chainProperties.getFeedbackTracingChainId(), paramMap);\n\n        if (result == null) {\n            return Collections.emptyList();\n        }\n\n        // 解析结果\n        try {\n            return Objects.requireNonNull(JSON.parseArray(result, FeedbackEntity.Tracing.class));\n        } catch (RuntimeException e) {\n            log.error(\"解析用户反馈数据溯源结果失败\", e);\n            return Collections.emptyList();\n        }\n    }\n\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/common/config/properties/ChainProperties.java\npackage com.myhexin.zixun.conceptv2manager.deploy.common.config.properties;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\n\n/**\n * @author: menghaizhu\n * @date: 2023/11/6 20:10\n */\n@Data\n@Configuration\n@ConfigurationProperties(prefix = \"chain-param\")\npublic class ChainProperties {\n\n    /**\n     * 审核成分股链\n     */\n    private String auditStockChainId;\n\n    /**\n     * 获取概念添加标准关键词\n     */\n    private String conceptAuditWordChainId;\n\n    /**\n     * 推荐成分股链\n     */\n    private String recommendStockChainId;\n\n    /**\n     * 用户反馈溯源链\n     */\n    private String feedbackTracingChainId;\n\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/zixun/conceptv2manager/deploy/common/external/rpc/NewChainOperateService.java",
    "template": "java",
    "multiRes": {
      "hipilot": "reason\", reason);",
      "CodeQwen2.5-7B": "reason\", reason);",
      "copilot": "query\", reason);\n        String result = e",
      "CodeQwen1.5-7B": "reason\", reason);"
    }
  },
  {
    "prefix": "package com.myhexin.mobileweb.pns.gms.ios.sender.deploy.d",
    "infill": ");\n            }else {\n                title = multipleLanguage.get(lang).getTitle();\n        ",
    "suffix": "        alert = multipleLanguage.get(lang).getContent();\n            }\n            if(StringUtils.isEmpty(alert)){\n                record(mobileMsg, entry.getValue());\n                continue;\n            }\n            IosMsgInfo iosMsgInfo = IosMsgInfo.builder()\n                    .mobileMsg(msgInfo.getMobileMsg())\n                    .apnsTokens(entry.getValue())\n                    .page(msgInfo.getPage())\n                    .title(title)\n                    .alert(alert)\n                    .sendLanguage(lang)\n                    .build();\n            try {\n                log.info(\"dispatchMsg id:{}, alert:{}, title:{}, apnsTokens:{}\", mobileMsg.getId(), alert, title, entry.getValue());\n                SendTask sendTask = SpringUtil.getBean(SendTask.class);\n                sendTask.setIosMsgInfo(iosMsgInfo);\n                dispatchThreadPool.execute(sendTask);\n            } catch (Exception e) {\n                String msg = String.format(\"thread pool reject ,msg:%s\", iosMsgInfo);\n                log.error(msg, e);\n            }\n        }\n    }\n\n    private static ApnsTokenKey generateTokenKey(ApnsToken token, Map<I18nLang, DefaultShowContent> languageMap){\n        if(CollectionUtils.isEmpty(languageMap)){\n            return new ApnsTokenKey(token.getChannel(), null);\n        }\n        I18nLang lang = token.getAppLanguage();\n        if(Objects.isNull(lang)){\n            lang = token.getSystemLanguage();\n        }\n        DefaultShowContent defaultShowContent = languageMap.get(lang);\n        if (Objects.isNull(defaultShowContent)) {\n            lang = null;\n        }\n        return new ApnsTokenKey(token.getChannel(), lang);\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class ApnsTokenKey {\n        private String channel;\n        private I18nLang lang;\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) {\n                return true;\n            }\n            if (o == null || getClass() != o.getClass()) {\n                return false;\n            }\n            ApnsTokenKey tokenKey = (ApnsTokenKey) o;\n            return Objects.equals(channel, tokenKey.channel) && lang == tokenKey.lang;\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(channel, lang);\n        }\n    }\n\n\n    private void record(MobileMsg mobileMsg, List<ApnsToken> deviceTokens){\n        for(ApnsToken deviceToken: deviceTokens){\n            recordService.recordData(mobileMsg, deviceToken, LogStatusCode.LANGUAGE_NOT_PUSH);\n        }\n    }\n\n}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/mobileweb/pns/gms/ios/sender/deploy/manager/impl/PushConfigServiceImpl.java\npackage com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.impl;\n\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.PushConfigService;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.dao.PushConfigDo;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.dao.mapper.PushConfigMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @description: get push config\n * @author:wuqicong@myhexin.com\n * @time: 2024/6/24\n */\n\n@Component\n@Slf4j\npublic class PushConfigServiceImpl implements PushConfigService {\n    private final PushConfigMapper pushConfigMapper;\n\n    private static Map<String, String> pushConfigMap = new HashMap<>();\n\n    public PushConfigServiceImpl(PushConfigMapper pushConfigMapper) {\n        this.pushConfigMapper = pushConfigMapper;\n    }\n\n    @Override\n    public List<PushConfigDo> queryPushConfig() {\n        return pushConfigMapper.queryPushConfig();\n    }\n\n    @Scheduled(cron = \"0/3 * * * * *\")\n    public void setPushConfig() {\n        List<PushConfigDo> pushConfigDos = queryPushConfig();\n        for (PushConfigDo pushConfigDo : pushConfigDos) {\n            pushConfigMap.put(pushConfigDo.getKey(), pushConfigDo.getValue());\n        }\n    }\n\n    @Override\n    public String getPushConfig(String key) {\n        return pushConfigMap.get(key);\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/mobileweb/pns/gms/ios/sender/deploy/receiver/rpc/service/IosSenderServiceImpl.java\npackage com.myhexin.mobileweb.pns.gms.ios.sender.deploy.receiver.rpc.service;\n\nimport com.myhexin.mobileweb.pns.gms.event.msg.common.factory.PushResponseFactory;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.common.dto.IosMsgInfo;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.receiver.ConsumeMsgService;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.receiver.rpc.converters.IosPushRequestConverters;\nimport io.grpc.pns.gms.app.ios.service.DubboIosSenderServiceGrpc;\nimport io.grpc.pns.gms.app.ios.service.IosPushRequest;\nimport io.grpc.pns.gms.event.msg.common.PushResponse;\nimport io.grpc.stub.StreamObserver;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.dubbo.config.annotation.DubboService;\nimport org.springframework.context.annotation.DependsOn;\n\nimport java.util.List;\n\n/**\n * @author panzheqi [panzheqi@myhexin.com]\n * @date 2022/08/12\n * @Description:\n */\n@DubboService(version = \"1.0.0\", timeout = 3000)\n@Slf4j\n@DependsOn(\"bootStrap\")\npublic class IosSenderServiceImpl extends DubboIosSenderServiceGrpc.IosSenderServiceImplBase\n        implements DubboIosSenderServiceGrpc.IIosSenderService {\n\n    private final ConsumeMsgService consumeMsgService;\n\n\n    public IosSenderServiceImpl(ConsumeMsgService consumeMsgService) {\n        this.consumeMsgService = consumeMsgService;\n    }\n\n    @Override\n    public void send(IosPushRequest request, StreamObserver<PushResponse> responseObserver) {\n        List<IosMsgInfo> iosMsgInfoList = IosPushRequestConverters.transferIosPushRequest(request);\n        StringBuilder recvMsg = new StringBuilder();\n\n        for (IosMsgInfo iosMsgInfo : iosMsgInfoList) {\n            String msg = String.format(\"id:%s, appid:%s, page:%s, size:%s  \", iosMsgInfo.getMobileMsg().getId()\n                    , iosMsgInfo.getMobileMsg().getAppId(), iosMsgInfo.getPage(), iosMsgInfo.getApnsTokens().size());\n            recvMsg.append(msg);\n        }\n        try {\n            consumeMsgService.consumeMsg(iosMsgInfoList);\n            log.info(\"recv:\"+ recvMsg);\n            responseObserver.onNext(PushResponseFactory.buildPushResponse(\"recv success \" + recvMsg));\n        } catch (Exception e) {\n            String msg = \"recv msg err \" + recvMsg + \", err\" + e;\n            responseObserver.onNext(PushResponseFactory.buildPushResponse(msg));\n            log.error(msg, e);\n        }\n        responseObserver.onCompleted();\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/mobileweb/pns/gms/ios/sender/deploy/receiver/impl/ConsumeMsgServiceImpl.java\npackage com.myhexin.mobileweb.pns.gms.ios.sender.deploy.receiver.impl;\n\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.common.dto.IosMsgInfo;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.dispatch.DispatcherService;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.receiver.ConsumeMsgService;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n/**\n * @author panzheqi [panzheqi@myhexin.com]\n * @date 2022/08/15\n * @Description:\n */\n@Component\npublic class ConsumeMsgServiceImpl implements ConsumeMsgService {\n\n    private final DispatcherService dispatcherService;\n\n    public ConsumeMsgServiceImpl(DispatcherService dispatcherService) {\n        this.dispatcherService = dispatcherService;\n    }\n\n\n\n    @Override\n    public void consumeMsg(List<IosMsgInfo> iosMsgInfos) {\n        for (IosMsgInfo iosMsgInfo : iosMsgInfos) {\n            dispatcherService.dispatchMsg(iosMsgInfo);\n        }\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/mobileweb/pns/gms/ios/sender/deploy/handler/impl/SendHandler.java\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StopWatch;\n\nimport java.net.ConnectException;\nimport java.time.Instant;\nimport java.util.Objects;\nimport java.util.concurrent.ThreadPoolExecutor;\n\nimport static com.myhexin.mobileweb.pns.gms.ios.sender.deploy.common.conts.MetricsConstants.*;\n\n/**\n * @author panzheqi [panzheqi@myhexin.com]\n * @date 2022/08/15\n * @Description: 发送消息\n */\n@Component\n@Slf4j\npublic class SendHandler implements Handler {\n\n    private static final Integer MAX_PAYLOAD_SIZE = 4 * 1024;\n\n    private static final Integer RETRY_SEND_COUNT = 2;\n\n\n    private final ApnsInfoService apnsInfoService;\n\n    private final RecordService recordService;\n\n\n    private final ThreadPoolExecutor callBackPool;\n\n    public SendHandler( ApnsInfoService apnsInfoService\n            , RecordService recordService\n            , @Qualifier(\"sendCallbackThreadPool\") ThreadPoolExecutor callBackPool) {\n        this.apnsInfoService = apnsInfoService;\n        this.recordService = recordService;\n\n        this.callBackPool = callBackPool;\n    }\n\n    @Override\n    public void doHandler(IosMsgInfo iosMsgInfo) {\n        MobileMsg mobileMsg = iosMsgInfo.getMobileMsg();\n\n        log.info(\"doHandler id:{}, alert:{}, title:{}, apnsTokens:{}\",\n                mobileMsg.getId(),\n                iosMsgInfo.getAlert(),\n                iosMsgInfo.getTitle(),\n                iosMsgInfo.getApnsTokens()\n        );\n\n        String appId = mobileMsg.getAppId();\n        for (ApnsToken apnsToken : iosMsgInfo.getApnsTokens()) {\n\n\n            ApnsInfo apnsInfo = apnsInfoService.queryApnsInfo(appId, apnsToken.getAppType(), apnsToken.getIosEnvType());\n\n            if (Objects.isNull(apnsInfo)) {",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/mobileweb/pns/gms/ios/sender/deploy/dispatch/service/DispatchServiceImpl.java",
    "template": "java",
    "multiRes": {
      "hipilot": "ispatch.service;\n\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.common.dto.IosMsgInfo;",
      "CodeQwen2.5-7B": "ispatch;",
      "copilot": ");\n            }else {\n                title = multipleLanguage.get(lang).getTitle();\n        ",
      "CodeQwen1.5-7B": " eploy;"
    }
  },
  {
    "prefix": "package com.myhexin.nacos.console.manager;\n\nimport com.myhexin.nacos.console.config.HxConfigInfoAudit;\nimport com.myhexin.nacos.console.config.HxConfigInfoAuditPersistService;\nimport com.myhexin.nacos.console.proxy.vo.PublishConfigVo;\nimport com.alibaba.nacos.console.security.nacos.users.NacosUser;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\n\n@Component\npublic class ConfigAuditManager {\n    @Resource\n    private HxConfigInfoAuditPersistService hxConfigInfoAuditPersistService;\n\n    /**\n     * Submit an audit.\n     *\n     * @param publishConfigVo the configuration to be audited\n     * @param nacosUser       the user who submits the audit\n     */\n    public void submitAudit(PublishConfigVo publishConfigVo, NacosUser nacosUser) {\n        HxConfigInfoAudit hxConfigIn",
    "infill": "hxConfigInfoAudit.setDataId(publishConfigVo.getDataId());\n        hxConfigInfoAudit.setcState(publishConfigVo.getCState());\n        hxConfigInfoAudit.setNiVersion(publishConfigVo.getNiVersion());\n        hxConfigInfoAudit.setSrcUser(nacosUser.getUsername());\n        return hxConfigInfoAudit;",
    "suffix": "\n    }\n}",
    "relevantFile": "<file_path>console/src/main/java/com/myhexin/nacos/console/auth/ExternalHexinRolePersistServiceImpl.java\npackage com.myhexin.nacos.console.auth;\n\nimport com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;\nimport com.alibaba.nacos.config.server.model.Page;\nimport com.alibaba.nacos.config.server.service.repository.PaginationHelper;\nimport com.alibaba.nacos.config.server.service.repository.extrnal.ExternalStoragePersistServiceImpl;\nimport com.myhexin.nacos.console.service.repository.RowMapperManager;\nimport com.myhexin.nacos.console.exception.PersistRuntimeException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.dao.EmptyResultDataAccessException;\nimport org.springframework.jdbc.CannotGetJdbcConnectionException;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport java.util.ArrayList;\n\n/**\n * Implemetation of ExternalHexinRolePersistServiceImpl.\n *\n * @author huaxiaolong\n */\n@Conditional(value = ConditionOnExternalStorage.class)\n@Component\npublic class ExternalHexinRolePersistServiceImpl implements HexinRolesPersistService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalHexinRolePersistServiceImpl.class);\n\n    @Autowired\n    private ExternalStoragePersistServiceImpl persistService;\n\n    private JdbcTemplate jt;\n\n    @PostConstruct\n    protected void init() {\n        jt = persistService.getJdbcTemplate();\n    }\n\n    @Override\n    public Page<HexinRoleInfo> getRoles(int pageNo, int pageSize) {\n        PaginationHelper<HexinRoleInfo> helper = persistService.createPaginationHelper();\n\n        String sqlCountRows = \"select count(*) from hxroles where \";\n        String sqlFetchRows = \"select id,role,username,cluster_name,service_name,service_type from hxroles where \";\n\n        String where = \" 1=1 \";\n\n        Page<HexinRoleInfo> pageInfo = helper\n            .fetchPage(sqlCountRows + where, sqlFetchRows + where, new ArrayList<String>().toArray(), pageNo,\n                pageSize, RowMapperManager.HEXIN_ROLE_INFO_ROW_MAPPER);\n        if (pageInfo == null) {\n            pageInfo = new Page<>();\n            pageInfo.setTotalCount(0);\n            pageInfo.setPageItems(new ArrayList<>());\n        }\n        return pageInfo;\n    }\n<file_path>console/src/main/java/com/myhexin/nacos/console/proxy/vo/PublishConfigVo.java\npackage com.myhexin.nacos.console.proxy.vo;\n\n/**\n * Publish config vo.\n *\n * @author huaxiaolong\n */\npublic class PublishConfigVo extends HexinVo {\n    /**\n     * 数据ID\n     */\n    private String dataId;\n\n    /**\n     * 数据所属的组\n     */\n    private String group;\n\n    /**\n     * 数据的租户\n     */\n    private String tenant;\n\n    /**\n     * 数据的内容\n     */\n    private String content;\n\n    /**\n     * 与数据关联的标签\n     */\n    private String tag;\n\n    /**\n     * 使用数据的应用名称\n     */\n    private String appName;\n\n    /**\n     * 创建数据的用户\n     */\n    private String srcUser;\n\n    /**\n     * 与配置关联的标签\n     */\n    private String configTags;\n\n    /**\n     * 数据的描述\n     */\n    private String desc;\n\n    /**\n     * 数据的用途\n     */\n    private String use;\n\n    /**\n     * 数据的效果\n<file_path>console/src/main/java/com/myhexin/nacos/console/config/HxConfigInfoAuditPersistService.java\npackage com.myhexin.nacos.console.config;\n\npublic interface HxConfigInfoAuditPersistService {\n\n    HxConfigInfoAudit getAuditRecord(HxConfigInfoAudit hxConfigInfoAudit);\n\n    boolean findAuditRecord(HxConfigInfoAudit hxConfigInfoAudit);\n\n    void updateAuditRecord(HxConfigInfoAudit hxConfigInfoAudit );\n\n    void insertAuditRecord(HxConfigInfoAudit hxConfigInfoAudit);\n}\n<file_path>console/src/main/java/com/myhexin/nacos/console/config/ExternalHxConfigInfoAuditPersistServiceImpl.java\npackage com.myhexin.nacos.console.config;\n\nimport com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;\nimport com.alibaba.nacos.config.server.service.repository.extrnal.ExternalStoragePersistServiceImpl;\nimport com.myhexin.nacos.console.service.repository.RowMapperManager;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\n\n@Conditional(value = ConditionOnExternalStorage.class)\n@Component\npublic class ExternalHxConfigInfoAuditPersistServiceImpl implements HxConfigInfoAuditPersistService {\n\n    @Autowired\n    private ExternalStoragePersistServiceImpl persistService;\n\n    private JdbcTemplate jt;\n\n    @PostConstruct\n    protected void init() {\n        jt = persistService.getJdbcTemplate();\n    }\n\n    /**\n     * 可能返回的null\n     *\n     * @param hxConfigInfoAudit 正常需要转成一个REQCMD对象\n     * @return\n     */\n    @Override\n    public HxConfigInfoAudit getAuditRecord(HxConfigInfoAudit hxConfigInfoAudit) {\n        String sql = \"SELECT id, data_id, group_id, content, md5, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, cluster_name, service_name, service_type, c_state, ni_version, audit_create, audit_modified, username, auditor \" +\n                \"FROM hx_config_info_audit \" +\n                \"WHERE cluster_name = ? \" +\n                \"AND service_name = ? \" +\n                \"AND service_type = ? \" +\n                \"AND tenant_id = ? \" +\n                \"AND group_id = ? \" +\n                \"AND data_id = ?\" +\n                \"AND c_state = ?\" +\n                \"AND ni_version=?\";\n\n        // Use jdbcTemplate to execute the query and map the result to HxConfigInfoAudit object\n        // Replace the placeholders with actual values\n\n        HxConfigInfoAudit hxConfigInfoAuditRes = jt.queryForObject(sql,\n                new Object[]{hxConfigInfoAudit.getClusterName(), hxConfigInfoAudit.getServiceName(),\n                        hxConfigInfoAudit.getServiceType(), hxConfigInfoAudit.getServiceType(),\n                        hxConfigInfoAudit.getGroupId(), hxConfigInfoAudit.getDataId(),\n                        hxConfigInfoAudit.getcState(),\n                        hxConfigInfoAudit.getNiVersion()\n\n                },\n                RowMapperManager.HX_CONFIG_INFO_AUDIT_ROW_MAPPER);\n\n        return hxConfigInfoAuditRes;\n    }",
    "relevantFileList": [],
    "filePath": "console/src/main/java/com/myhexin/nacos/console/manager/ConfigAuditManager.java",
    "template": "java",
    "multiRes": {
      "hipilot": "Audit = publishConfigVo.translate(HxConfigInfoAudit.class);",
      "CodeQwen2.5-7B": "foAudit = new HxConfigInfoAudit();",
      "copilot": "hxConfigInfoAudit.setDataId(publishConfigVo.getDataId());\n        hxConfigInfoAudit.setcState(publishConfigVo.getCState());\n        hxConfigInfoAudit.setNiVersion(publishConfigVo.getNiVersion());\n        hxConfigInfoAudit.setSrcUser(nacosUser.getUsername());\n        return hxConfigInfoAudit;",
      "CodeQwen1.5-7B": " foAudit = new HxConfigInfoAudit();"
    }
  },
  {
    "prefix": "package com.myhexin.nacos.console.manager;\n\nimport com.myhexin.nacos.console.config.HxConfigInfoAudit;\nimport com.myhexin.nacos.console.config.HxConfigInfoAuditPersistService;\nimport com.myhexin.nacos.console.proxy.vo.PublishConfigVo;\nimport com.alibaba.nacos.console.security.nacos.users.NacosUser;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\n\n@Component\npublic class ConfigAuditManager {\n    @Resource\n    private HxConfigInfoAuditPersistService hxConfigInfoAuditPersistService;\n\n    /**\n ",
    "infill": "hxConfigInfoAudit.setServiceName(publishConfigVo.getServiceName());\n        hxConfigInfoAudit.setServiceType(publishConfigVo.getServiceType());\n        hxConfigInfoAudit.setTenantId(publishConfigVo.getTenantId());\n        hxConfigInfoAudit.setGroupId(publishConfigVo.getGroupId());\n        hxConfigInfoAudit.setDataId(publishConfigVo.getDataId());\n        hxConfigInfoAudit.setcState(publishConfigVo.getCState());\n        hxConfigInfoAudit.setNiVersion(publishConfigVo.getNiVersion());\n        hxConfigInfoAudit.setSrcUser(nacosUser.getUsername());\n        return hxConfigInfoAudit;",
    "suffix": "\n    }\n}",
    "relevantFile": "<file_path>console/src/main/java/com/myhexin/nacos/console/config/HxConfigInfoAudit.java\npackage com.myhexin.nacos.console.config;\n\nimport java.io.Reader;\n\n/**\n * HxConfigInfoAudit.\n * This class represents the hx_config_info_audit table in the database.\n */\npublic class HxConfigInfoAudit {\n\n    /**\n     * 'id'\n     */\n    private long id;\n    /**\n     *  'data_id' 配置文件名，比如ifund-gateway.properties\n    */\n    private String dataId;\n\n    /** 'group_id' */\n    private String groupId;\n\n    /** 'content' */\n    private String content;\n\n    /** 'md5' */\n    private String md5;\n\n    /** 'source user' */\n    private String srcUser;\n\n    /** 'source ip' */\n    private String srcIp;\n\n    /**\n     *  'app_name' 归属应用\n      */\n    private String appName;\n\n    /**\n     * '租户字段'。默认就是public，数据库里是“”，不是null，因为有唯一索引。\n     * 原来设计上回有点问题\n     * nacos 控制台对应的命名空间。\n     */\n    private String tenantId;\n\n    /** 'c_desc' */\n    private String cDesc;\n\n    /** 'c_use' */\n    private String cUse;\n\n    /** 'effect' */\n    private String effect;\n\n    /** 'type' */\n    private String type;\n\n    /** 'c_schema' */\n    private String cSchema;\n<file_path>console/src/main/java/com/myhexin/nacos/console/auth/ExternalHexinRolePersistServiceImpl.java\npackage com.myhexin.nacos.console.auth;\n\nimport com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;\nimport com.alibaba.nacos.config.server.model.Page;\nimport com.alibaba.nacos.config.server.service.repository.PaginationHelper;\nimport com.alibaba.nacos.config.server.service.repository.extrnal.ExternalStoragePersistServiceImpl;\nimport com.myhexin.nacos.console.service.repository.RowMapperManager;\nimport com.myhexin.nacos.console.exception.PersistRuntimeException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.dao.EmptyResultDataAccessException;\nimport org.springframework.jdbc.CannotGetJdbcConnectionException;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport java.util.ArrayList;\n\n/**\n * Implemetation of ExternalHexinRolePersistServiceImpl.\n *\n * @author huaxiaolong\n */\n@Conditional(value = ConditionOnExternalStorage.class)\n@Component\npublic class ExternalHexinRolePersistServiceImpl implements HexinRolesPersistService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalHexinRolePersistServiceImpl.class);\n\n    @Autowired\n    private ExternalStoragePersistServiceImpl persistService;\n\n    private JdbcTemplate jt;\n\n    @PostConstruct\n    protected void init() {\n        jt = persistService.getJdbcTemplate();\n    }\n\n    @Override\n    public Page<HexinRoleInfo> getRoles(int pageNo, int pageSize) {\n        PaginationHelper<HexinRoleInfo> helper = persistService.createPaginationHelper();\n\n        String sqlCountRows = \"select count(*) from hxroles where \";\n        String sqlFetchRows = \"select id,role,username,cluster_name,service_name,service_type from hxroles where \";\n\n        String where = \" 1=1 \";\n\n        Page<HexinRoleInfo> pageInfo = helper\n            .fetchPage(sqlCountRows + where, sqlFetchRows + where, new ArrayList<String>().toArray(), pageNo,\n                pageSize, RowMapperManager.HEXIN_ROLE_INFO_ROW_MAPPER);\n        if (pageInfo == null) {\n            pageInfo = new Page<>();\n            pageInfo.setTotalCount(0);\n            pageInfo.setPageItems(new ArrayList<>());\n        }\n        return pageInfo;\n    }\n<file_path>console/src/main/java/com/myhexin/nacos/console/config/ExternalHxConfigInfoAuditPersistServiceImpl.java\npackage com.myhexin.nacos.console.config;\n\nimport com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;\nimport com.alibaba.nacos.config.server.service.repository.extrnal.ExternalStoragePersistServiceImpl;\nimport com.myhexin.nacos.console.service.repository.RowMapperManager;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\n\n@Conditional(value = ConditionOnExternalStorage.class)\n@Component\npublic class ExternalHxConfigInfoAuditPersistServiceImpl implements HxConfigInfoAuditPersistService {\n\n    @Autowired\n    private ExternalStoragePersistServiceImpl persistService;\n\n    private JdbcTemplate jt;\n\n    @PostConstruct\n    protected void init() {\n        jt = persistService.getJdbcTemplate();\n    }\n\n    /**\n     * 可能返回的null\n     *\n     * @param hxConfigInfoAudit 正常需要转成一个REQCMD对象\n     * @return\n     */\n    @Override\n    public HxConfigInfoAudit getAuditRecord(HxConfigInfoAudit hxConfigInfoAudit) {\n        String sql = \"SELECT id, data_id, group_id, content, md5, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, cluster_name, service_name, service_type, c_state, ni_version, audit_create, audit_modified, username, auditor \" +\n                \"FROM hx_config_info_audit \" +\n                \"WHERE cluster_name = ? \" +\n                \"AND service_name = ? \" +\n                \"AND service_type = ? \" +\n                \"AND tenant_id = ? \" +\n                \"AND group_id = ? \" +\n                \"AND data_id = ?\" +\n                \"AND c_state = ?\" +\n                \"AND ni_version=?\";\n\n        // Use jdbcTemplate to execute the query and map the result to HxConfigInfoAudit object\n        // Replace the placeholders with actual values\n\n        HxConfigInfoAudit hxConfigInfoAuditRes = jt.queryForObject(sql,\n                new Object[]{hxConfigInfoAudit.getClusterName(), hxConfigInfoAudit.getServiceName(),\n                        hxConfigInfoAudit.getServiceType(), hxConfigInfoAudit.getServiceType(),\n                        hxConfigInfoAudit.getGroupId(), hxConfigInfoAudit.getDataId(),\n                        hxConfigInfoAudit.getcState(),\n                        hxConfigInfoAudit.getNiVersion()\n\n                },\n                RowMapperManager.HX_CONFIG_INFO_AUDIT_ROW_MAPPER);\n\n        return hxConfigInfoAuditRes;\n    }\n<file_path>console/src/main/java/com/myhexin/nacos/console/config/HxConfigInfoAuditPersistService.java\npackage com.myhexin.nacos.console.config;\n\npublic interface HxConfigInfoAuditPersistService {\n\n    HxConfigInfoAudit getAuditRecord(HxConfigInfoAudit hxConfigInfoAudit);\n\n    boolean findAuditRecord(HxConfigInfoAudit hxConfigInfoAudit);\n\n    void updateAuditRecord(HxConfigInfoAudit hxConfigInfoAudit );\n\n    void insertAuditRecord(HxConfigInfoAudit hxConfigInfoAudit);\n}",
    "relevantFileList": [],
    "filePath": "console/src/main/java/com/myhexin/nacos/console/manager/ConfigAuditManager.java",
    "template": "java",
    "multiRes": {
      "hipilot": "* 将PublishConfigVo转为HxConfigInfoAudit，并将该对象持久化。\n     * @param publishConfigVo\n     * @param nacosUser\n     */\n    public void audit(PublishConfigVo publishConfigVo, N",
      "CodeQwen2.5-7B": "    * 保存配置发布信息",
      "copilot": "hxConfigInfoAudit.setServiceName(publishConfigVo.getServiceName());\n        hxConfigInfoAudit.setServiceType(publishConfigVo.getServiceType());\n        hxConfigInfoAudit.setTenantId(publishConfigVo.getTenantId());\n        hxConfigInfoAudit.setGroupId(publishConfigVo.getGroupId());\n        hxConfigInfoAudit.setDataId(publishConfigVo.getDataId());\n        hxConfigInfoAudit.setcState(publishConfigVo.getCState());\n        hxConfigInfoAudit.setNiVersion(publishConfigVo.getNiVersion());\n        hxConfigInfoAudit.setSrcUser(nacosUser.getUsername());\n        return hxConfigInfoAudit;",
      "CodeQwen1.5-7B": "     * 添加配置发布审核记录"
    }
  },
  {
    "prefix": "package com.myhexin.news.feign;\n\nimport com.myhexin.news.feign.fallback.ModelTranslateFeignFallbackFactory;\nimport com.myhexin.news.feign.response.ModelTranslateResponse;\nimport org.springframework.cloud.openfeign.FeignClient;\n\n/**\n * 模型",
    "infill": "翻译的feign\n *\n ",
    "suffix": "* @author lihe2@myhexin.com\n * @date 2024/6/26 22:11\n *\n * TODO url的配置 待完善\n */\n@FeignClient(\n        name = \"modelTranslateFeign\",\n        url = \"${news.translate.url:localhost:  }\",\n        fallbackFactory = ModelTranslateFeignFallbackFactory.class\n)\npublic interface ModelTranslateFeign {\n\n    /**\n     * 模型翻译\n     *\n     * @param param 参数\n     * @return 返回\n     */\n    ModelTranslateResponse modelTranslate(String param);\n}\n",
    "relevantFile": "<file_path>src/main/java/com/myhexin/zixun/application/manager/flash/news/external/feign/fallback/ComplianceAuditFeignFallbackFactory.java\npackage com.myhexin.zixun.application.manager.flash.news.external.feign.fallback;\n\nimport com.myhexin.zixun.application.manager.flash.news.external.feign.inter.ComplianceAuditFeign;\nimport feign.hystrix.FallbackFactory;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\n/**\n * @Author gaocai\n * @Date 2023/5/29\n * @Description\n */\n@Slf4j\n@Component\npublic class ComplianceAuditFeignFallbackFactory implements FallbackFactory<ComplianceAuditFeign> {\n\n    private final ComplianceAuditFeign fallback = new ComplianceAuditFeignFallback();\n\n    @Override\n    public ComplianceAuditFeign create(Throwable throwable){\n        log.error(\"post机审接口调用失败，降级处理，异常信息：\" + throwable);\n        return fallback;\n    }\n}\n<file_path>src/main/java/com/myhexin/zixun/application/manager/flash/news/external/feign/inter/ComplianceAuditFeign.java\npackage com.myhexin.zixun.application.manager.flash.news.external.feign.inter;\n\nimport com.myhexin.zixun.application.manager.flash.news.external.feign.dto.ComplianceAuditInput;\nimport com.myhexin.zixun.application.manager.flash.news.external.feign.dto.ComplianceAuditOutput;\nimport com.myhexin.zixun.application.manager.flash.news.external.feign.fallback.ComplianceAuditFeignFallbackFactory;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\n/**\n * @Author gaocai\n * @Date 2023/5/29\n * @Description post审核的feignClient\n */\n@FeignClient(\n        name = \"complianceAuditFeign\",\n        fallbackFactory = ComplianceAuditFeignFallbackFactory.class\n)\n\npublic interface ComplianceAuditFeign {\n    /**\n     * post审核接口调用\n     * @param complianceAuditInput\n     * @return PostFlashMachineOutput post审核接口的结果\n     */\n    @PostMapping(value = \"/gw/openapi/post/v1/check\", consumes = MediaType.APPLICATION_JSON_VALUE)\n    ComplianceAuditOutput complianceAudit(@RequestBody ComplianceAuditInput complianceAuditInput);\n\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/feign/response/ModelTranslateResponse.java\npackage com.myhexin.news.feign.response;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n/**\n * 模型翻译的接口出参\n *\n * @author lihe2@myhexin.com\n * @date 2024/6/26 22:09\n *\n * TODO 模型翻译的接口出参\n */\n@Data\n@Accessors(chain = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class ModelTranslateResponse {\n\n}\n<file_path>news-f10-service/src/main/java/com/myhexin/news/feign/fallback/ModelTranslateFeignFallbackFactory.java\npackage com.myhexin.news.feign.fallback;\n\nimport com.jqka.ovse.framework.common.bean.LogItem;\nimport com.jqka.ovse.framework.common.util.OvseStatsLog;\nimport com.myhexin.news.constant.LogMessage;\nimport com.myhexin.news.constant.NewsFlashConstant;\nimport com.myhexin.news.feign.ModelTranslateFeign;\nimport com.myhexin.news.feign.response.ModelTranslateResponse;\nimport org.springframework.cloud.openfeign.FallbackFactory;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author lihe2@myhexin.com\n * @date 2024/6/26 22:14\n *\n * TODO output的协议待完善\n */\n@Component\npublic class ModelTranslateFeignFallbackFactory implements FallbackFactory<ModelTranslateFeign> {\n    private static final ModelTranslateResponse DEFAULT_OUTPUT = new ModelTranslateResponse();\n\n    private static final ModelTranslateFeign FALLBACK = param -> DEFAULT_OUTPUT;\n\n    @Override\n    public ModelTranslateFeign create(Throwable throwable) {\n        LogItem instance = LogItem.getInstance();\n        instance.add(\"content\", \"ModelTranslateFeign:modelTranslate()模型翻译接口调用失败, 降级处理. msg = \" + throwable.getMessage());\n        OvseStatsLog.error(NewsFlashConstant.BUSINESS_NAME, LogMessage.NEWS_TRANSLATE, instance, throwable);\n        return FALLBACK;\n    }\n}",
    "relevantFileList": [],
    "filePath": "news-f10-service/src/main/java/com/myhexin/news/feign/ModelTranslateFeign.java",
    "template": "java",
    "multiRes": {
      "hipilot": "翻译 feign 接口\n *\n ",
      "CodeQwen2.5-7B": "翻译",
      "copilot": "翻译的feign\n *\n ",
      "CodeQwen1.5-7B": " 翻译"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.modules.topic.domain.service;\n\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\n\nimport java.util.List;\n\n/**\n * 热点池Service\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\npublic interface HotContentOperatingService {\n\n    /**\n     * 添加热点内容至热点池中\n     * @param hotContentPoolDTO 热点数据\n     */\n    void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery);\n\n    /**\n     * 获取热点池数据总数\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    Integer getHotContentPoolTotal(HotContentQuery hotContentQuery);\n\n    /**\n     * 更新热点内容\n     * @param hotContentPoolDTO 热点数据\n     * @return 被修改的内容数量\n     */\n    Long updateHotContent(HotContentPoolDTO hotContentPoolDTO);\n\n    /**\n     * 更新热点池上线状态\n     * @param id 热点id\n     * @param type 热点type\n     * @return 更新条数\n     */\n    Long updateHotContentStatus(String id, String type);\n\n    /**\n     * 删除热点池过期数据\n     * @return 删除条数\n     */\n    Long delHotContentExpireData(Long ",
    "infill": "expireTime);\n}\n",
    "suffix": "",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/job/DelExpireHotContentHandler.java\npackage com.myhexin.community.operating.deploy.interfaces.job;\n\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport com.xxl.job.core.biz.model.ReturnT;\nimport com.xxl.job.core.handler.IJobHandler;\nimport com.xxl.job.core.handler.annotation.JobHandler;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\n/**\n * 定时删除过期热点内容\n * @author ningwenyu@myhexin.com\n * @date 2024/6/21 10:20\n */\n@Component\n@Slf4j\n@JobHandler(\"DelExpireHotContentHandler\")\n@RequiredArgsConstructor\npublic class DelExpireHotContentHandler extends IJobHandler {\n\n    private final HotContentOperatingService hotContentOperatingService;\n    \n    /**\n     * 每天00:00删除热点内容过期数据\n     * @param param 参数\n     * @return 是否成功\n     * @throws Exception\n     */\n    @Override\n    public ReturnT<String> execute(String param) throws Exception {\n        \n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/dto/hottopic/HotTopicDTO.java\npackage com.myhexin.community.operating.deploy.app.manager.dto.hottopic;\n\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicAttachEnum;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicColorEnum;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.consts.HotTopicOperatingConstant;\nimport com.myhexin.community.operating.deploy.modules.operating.domain.entity.ForumBaseInfo;\nimport lombok.Data;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\n/**\n * @author wangming@myhexin.com\n * @date 2022-05-27 13:57\n */\n@Data\npublic class HotTopicDTO {\n\n    /**\n     * 内容id\n     */\n    private String code;\n\n    /**\n     * 内容类型\n     */\n    private String type;\n\n    /**\n     * 内容描述\n     */\n    private String descripion;\n\n    /**\n     * 人工运营等级\n     */\n    private Integer priority;\n    /**\n     * 标题\n     */\n    private String title;\n    /**\n     * 副标题\n     */\n    private String subtitle;\n    /**\n     * 标签类型\n     */\n    private String labelName;\n    /**\n     * 标签内容\n     */\n    private String labelContent;\n    /**\n     * 标签的背景颜色\n     */\n    private String labelBackgroundColor;\n    /**\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/app/manager/dto/hottopic/HotContentPoolResultDTO.java\npackage com.myhexin.community.operating.deploy.app.manager.dto.hottopic;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.util.List;\n\n/**\n * @author ningwenyu@myhexin.com\n * @date 2024/6/19 17:22\n */\n@Data(staticConstructor = \"of\")\n@Accessors(chain = true)\npublic class HotContentPoolResultDTO {\n\n    /**\n     * 热点池列表\n     */\n    private List<HotContentPoolDTO> list;\n\n    /**\n     * 查询总数\n     */\n    private Integer total;\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/impl/HotContentOperatingServiceImpl.java\nimport com.myhexin.community.operating.deploy.app.manager.dto.hottopic.HotContentPoolDTO;\nimport com.myhexin.community.operating.deploy.interfaces.rest.query.HotContentQuery;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.repository.HotContentOperatingRepository;\nimport com.myhexin.community.operating.deploy.modules.topic.domain.service.HotContentOperatingService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * 热点内容Service实现\n * @author ningwenyu@myhexin.com\n * @date 2024/6/18 21:04\n */\n@Service\n@RequiredArgsConstructor\npublic class HotContentOperatingServiceImpl implements HotContentOperatingService {\n\n    private final HotContentOperatingRepository hotContentRepository;\n\n    /**\n     * 添加热点内容至热点池中\n     *\n     * @param hotContentPoolDTO 热点数据\n     */\n    @Override\n    public void addHotContentToPool(HotContentPoolDTO hotContentPoolDTO) {\n        // 保存至数据库\n        hotContentRepository.addHotContentToPool(hotContentPoolDTO);\n    }\n\n    /**\n     * 根据筛选条件，获取热点池数据内容\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据\n     */\n    @Override\n    public List<HotContentPoolDTO> getHotContentPool(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPool(hotContentQuery);\n    }\n\n    /**\n     * 获取热点池数据总数\n     *\n     * @param hotContentQuery 筛选条件\n     * @return 热点池数据总数\n     */\n    @Override\n    public Integer getHotContentPoolTotal(HotContentQuery hotContentQuery) {\n        return hotContentRepository.getHotContentPoolTotal(hotContentQuery);\n    }\n\n    /**\n     * 更新热点内容\n     *\n     * @param hotContentPoolDTO 热点数据\n     */\n    @Override\n    public Long updateHotContent(HotContentPoolDTO hotContentPoolDTO) {",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/modules/topic/domain/service/HotContentOperatingService.java",
    "template": "java",
    "multiRes": {
      "hipilot": "time);\n}",
      "CodeQwen2.5-7B": "expireTime);",
      "copilot": "expireTime);\n}\n",
      "CodeQwen1.5-7B": " expireTime);"
    }
  },
  {
    "prefix": "/",
    "infill": "String key = String.format(AiCommentConstant., bizType, bizId);\n        return Objects.nonNull(communityCacheZeroRedisTemplate.opsForValue().get(key));\n    }\n}",
    "suffix": "\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/rest/controller/aicomment/AiCommentController.java\n        return BaseResponseVO.success();\n    }\n\n    /**\n     * 修改AI评论规则状态\n     *\n     * @param ruleId               规则ID\n     * @param aiCommentRuleRequest 请求参数\n     * @return 响应\n     */\n    @PostMapping(\"/v1/update_rule_status/{rule_id}\")\n    public BaseResponseVO<Void> updateAiCommentRuleStatus(@PathVariable(\"rule_id\") Long ruleId,\n                                                          @RequestBody AiCommentRuleRequest aiCommentRuleRequest) {\n        aiCommentManager.updateAiCommentRuleStatus(ruleId, aiCommentRuleRequest.getStatus());\n        return BaseResponseVO.success();\n    }\n\n    /**\n     * 删除AI评论规则\n     *\n     * @param ruleId 规则ID\n     * @return 响应\n     */\n    @DeleteMapping(\"/v1/del_rules/{rule_id}\")\n    public BaseResponseVO<Void> delAiCommentRule(@PathVariable(\"rule_id\") Long ruleId) {\n        aiCommentManager.deleteAiCommentAutoRule(ruleId);\n        return BaseResponseVO.success();\n    }\n\n    /**\n     * 获取AI评论规则分页列表\n     *\n     * @param page     分页页数\n     * @param pageSize 分页大小\n     * @param status   状态\n     * @return 响应\n     */\n    @GetMapping(\"/v1/rules\")\n    public BaseResponseVO<AiCommentRulePageVO> getAiCommentRulePage(@RequestParam(\"page\") Integer page,\n                                                                    @RequestParam(\"page_size\") Integer pageSize,\n                                                                    @RequestParam(value = \"status\", required = false) String status) {\n        return BaseResponseVO.success(aiCommentManager.getAiCommentRulePage(page, pageSize, status));\n    }\n\n    /**\n     * 根据业务信息获取AI评论列表\n     *\n     * @param bizId   业务id\n     * @param bizType 业务type {@link HxContentTypeWithFromIdEnum} 里的hxContentType\n     * @return {@link BaseResponseVO}<{@link List}<{@link String}>>\n     */\n    @GetMapping(\"v1/ai_comment_list_by_biz\")\n    public BaseResponseVO<List<String>> getAiCommentListByBiz(@RequestParam(\"biz_id\") Long bizId, @RequestParam(\n            \"biz_type\") Integer bizType) {\n        FillingRules.FillingNumRule numRule = new FillingRules.FillingNumRule();\n        numRule.setRandom(true);\n        Map<String, Integer> fillingNumRule = aiCommentManager.getFillingNumRule(numRule);\n        return BaseResponseVO.success(aiCommentManager.getAiCommentList(bizId, bizType, null, fillingNumRule));\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/aicomment/domain/handle/match/UserRulesMatchHandler.java\n    /**\n     * 检查结果\n     *\n     * @param hxContent            内容池数据\n     * @param aiCommentAutoRuleDTO 匹配规则\n     * @return 检查结果\n     */\n    @Override\n    public MatchResult match(HxContent hxContent, AiCommentAutoRuleDTO aiCommentAutoRuleDTO) {\n    UserRules userRule = aiCommentAutoRuleDTO.getUserRule();\n    if (Objects.isNull(userRule)) {\n        return MatchResult.matchSuccessResult();\n    }\n\n    if (isInBlackList(userRule, hxContent)) {\n        return MatchResult.notMatchResult();\n    }\n\n    if (isNotInWhiteList(userRule, hxContent)) {\n        return MatchResult.notMatchResult();\n    }\n\n    return MatchResult.matchSuccessResult();\n}\n\n    /**\n     * 是否在黑名单中\n     * @param userRule 用户规则\n     * @param hxContent 内容\n     * @return boolean\n     */\n    private boolean isInBlackList(UserRules userRule, HxContent hxContent) {\n    if (StrUtil.isNotEmpty(userRule.getBlackList())) {\n        List<String> blackList = StrUtil.split(userRule.getBlackList(), \",\");\n        List<Long> blackListUids = blackList.stream().map(Long::valueOf).collect(Collectors.toList());\n        return CollUtil.contains(blackListUids, hxContent.getAuthor().getId());\n    }\n    return false;\n}\n\n    /**\n     * 是否不在白名单中\n     * @param userRule 用户规则\n     * @param hxContent 内容\n     * @return boolean\n     */\n    private boolean isNotInWhiteList(UserRules userRule, HxContent hxContent) {\n    if (StrUtil.isNotEmpty(userRule.getWhiteList())) {\n        List<String> whiteList = StrUtil.split(userRule.getWhiteList(), \",\");\n        List<Long> whiteListUids = whiteList.stream().map(Long::valueOf).collect(Collectors.toList());\n        return !CollUtil.contains(whiteListUids, hxContent.getAuthor().getId());\n    }\n    return false;\n}\n\n    /**\n     * 顺序\n     *\n     * @return 顺序\n     */\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/modules/aicomment/domain/service/AiCommentService.java\npackage com.myhexin.community.operating.deploy.modules.aicomment.domain.service;\n\nimport com.myhexin.community.operating.deploy.common.external.feign.dto.contentpool.ContentDTO;\nimport com.myhexin.community.operating.deploy.modules.aicomment.domain.dto.BizAiCommentDTO;\n\nimport java.util.List;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/06\n */\npublic interface AiCommentService {\n\n    /**\n     * 获取业务内容需要的AI评论\n     *\n     * @param bizAiCommentDTO 获取ai评论的条件\n     * @return {@link List}<{@link String}>\n     */\n    List<String> getBizContentAiCommentList(BizAiCommentDTO bizAiCommentDTO);\n\n    /**\n     * 获取内容具体详情\n     *\n     * @param bizType 业务内容类型\n     * @param bizId   业务内容id\n     * @return {@link String}\n     */\n    ContentDTO getBizContentDetail(Integer bizType, Long bizId);\n\n    /**\n     * 检查内容是否被锁定\n     *\n     * @param bizId   业务id\n     * @param bizType 业务类型\n     * @return boolean\n     */\n    boolean checkContentAiCommentLocked(Long bizId, Integer bizType);\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/interfaces/consumer/AiCommentConsumer.java\n        }\n    }\n    private boolean checkContentLocked(HxContent hxContent) {\n        return aiCommentManager.checkContentLocked(hxContent.getBizId(), hxContent.getType());\n    }\n\n    /**\n     * 获取ai评论填充规则\n     *\n     * @param hxContent 内容中台内容\n     * @return {@link List}<{@link AiCommentAutoRuleDTO}>\n     */\n    private List<AiCommentAutoRuleDTO> getMatchedRuleList(HxContent hxContent) {\n        List<AiCommentAutoRuleDTO> allValidAiCommentAutoRules = aiCommentManager.getAllValidAiCommentAutoRules();\n        if (CollUtil.isEmpty(allValidAiCommentAutoRules)) {\n            log.info(\"handleAiComment,no valid auto rule;bizId:{},bizType:{}\", hxContent.getBizId(),\n                    hxContent.getType());\n            return Collections.emptyList();\n        }\n        return aiCommentManager.matchAiCommentRule(hxContent, allValidAiCommentAutoRules);\n    }\n\n    /**\n     * 获取ai评论列表\n     *\n     * @param hxContent 内容中台数据\n     * @param numRule   填充条数规则\n     * @return {@link List}<{@link String}>\n     */\n    private List<String> getAiCommentList(HxContent hxContent, FillingRules.FillingNumRule numRule) {\n        if (Objects.isNull(numRule)) {\n            log.info(\"handleAiComment,filling num rule is empty;bizId:{},bizType:{}\", hxContent.getBizId(),\n                    hxContent.getType());\n            return Collections.emptyList();\n        }\n        Map<String, Integer> fillingNumRuleMap = aiCommentManager.getFillingNumRule(numRule);\n        return aiCommentManager.getAiCommentList(\n                Long.valueOf(hxContent.getBizId()), hxContent.getType(), hxContent.getContent(), fillingNumRuleMap);",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/modules/aicomment/domain/service/impl/AiCommentServiceImpl.java",
    "template": "java",
    "multiRes": {
      "hipilot": "**\n     * 获取业务内容需要的AI评论\n     *\n     * @param bizAiCommentDTO 获取ai评论的条件\n     * @return {@link List}<{@link String}",
      "CodeQwen2.5-7B": "**",
      "copilot": "String key = String.format(AiCommentConstant., bizType, bizId);\n        return Objects.nonNull(communityCacheZeroRedisTemplate.opsForValue().get(key));\n    }\n}",
      "CodeQwen1.5-7B": " **"
    }
  },
  {
    "prefix": "package com.myhexin.community.operating.deploy.common.external.feign.response;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/28\n */\n@Data\npublic class AgentWorkFlowResponse {\n    /**\n     * task_id 任务id\n     */\n    @JsonProperty(\"task_id\")\n    private String taskId;\n\n    /**\n     * workflow_run_id 工作流运行id\n     */\n    @JsonProperty(\"workflow_run_id\")\n    private String workflowRunId;\n\n    /**\n     * data 数据\n     */\n    private Data data;\n\n    /**\n     * @author wangming@myhexin.com\n     * @date 2024/06/28\n     */\n    @lombok.Data\n    public static class Data {\n        /**\n         * id\n         */\n        private String id;\n\n        /**\n         * workflow_id 工作流id\n         */\n        @JsonProperty",
    "infill": "(\"workflow_id\")\n        private Stri",
    "suffix": "ng workflowId;\n\n        /**\n         * status 状态\n         */\n        private String status;\n\n        /**\n         * outputs 输出\n         */\n        private Outputs outputs;\n\n        /**\n         *  error 错误\n         */\n        private String error;\n\n        /**\n         * elapsed_time 耗时\n         */\n        @JsonProperty(\"elapsed_time\")\n        private double elapsedTime;\n\n        /**\n         * total_tokens 总令牌\n         */\n        @JsonProperty(\"total_tokens\")\n        private int totalTokens;\n\n        /**\n         * total_steps 总步骤\n         */\n        private int total_steps;\n\n        /**\n         * created_at 创建时间\n         */\n        private long created_at;\n\n        /**\n         * started_at 开始时间\n         */\n        private long finished_at;\n\n    }\n\n    /**\n     * @author wangming@myhexin.com\n     * @date 2024/06/28\n     */\n    @lombok.Data\n    public static class Outputs {\n        /**\n         * output 输出\n         */\n        private List<String> output;\n    }\n}\n",
    "relevantFile": "<file_path>src/main/java/com/myhexin/community/user/medal/deploy/modules/medal/infrastructure/db/model/UserMedal.java\npackage com.myhexin.community.user.medal.deploy.modules.medal.infrastructure.db.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.util.List;\n\n/**\n * 用户 - 勋章关系表\n *\n * @author ningwenyu@myhexin.com\n * @date 2024/4/23 17:33\n */\n\n@Data\n@Document(\"user_medal\")\npublic class UserMedal {\n\n    /**\n     * 用户ID\n     */\n    @Id\n    private Long userId;\n\n    /**\n     * 用户勋章列表\n     */\n    private List<UserMedalMongoInfo> userMedalList;\n\n    /**\n     * 用户 - 勋章信息\n     */\n    @Data\n    @Builder\n    @AllArgsConstructor\n    @NoArgsConstructor\n    public static class UserMedalMongoInfo {\n\n        /**\n         * 勋章id\n         */\n        private Integer medalId;\n\n        /**\n         * 勋章等级\n         */\n        private Integer medalLevel;\n\n        /**\n         * 勋章名称\n         */\n        private String medalName;\n\n        /**\n         * 勋章logo\n         */\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/common/external/feign/response/BanInfoData.java\npackage com.myhexin.community.operating.deploy.common.external.feign.response;\n\nimport com.alibaba.fastjson.annotation.JSONField;\nimport lombok.Data;\n\n/**\n * 审核封禁服务返回封禁信息DTO\n *\n * @author longxingyu@myhexin.com\n * @date 2021/12/3\n */\n@Data\npublic class BanInfoData {\n    private Integer score;\n    @JSONField(name = \"userid\")\n    private Long userId;\n    private String ascode;\n    @JSONField(name = \"ban_user\")\n    private Boolean isBan;\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/common/external/feign/response/BatchCommentQueryResponse.java\npackage com.myhexin.community.operating.deploy.common.external.feign.response;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * 批量查询评论返回对象\n *\n * @author longxingyu@myhexin.com\n * @date 2022/3/10\n */\n@Data\npublic class BatchCommentQueryResponse {\n    @JsonProperty(\"status_code\")\n    private Integer statusCode;\n    @JsonProperty(\"status_msg\")\n    private String statusMsg;\n    private DataField data;\n\n    @Data\n    public static class DataField {\n        private List<CommentResponse.CommentInfo> comments;\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/community/operating/deploy/common/external/feign/response/AiCommentResponse.java\npackage com.myhexin.community.operating.deploy.common.external.feign.response;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * @author wangming@myhexin.com\n * @date 2024/06/17\n */\n@Data\npublic class AiCommentResponse {\n    /**\n     * ai评论结果\n     */\n    private List<String> results;\n}",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/community/operating/deploy/common/external/feign/response/AgentWorkFlowResponse.java",
    "template": "java",
    "multiRes": {
      "hipilot": "(\"workflow_id\")\n        private Stri",
      "CodeQwen2.5-7B": "(\"workflow_id\")",
      "copilot": "(\"workflow_id\")\n        private Stri",
      "CodeQwen1.5-7B": "(\"workflow_id\")"
    }
  },
  {
    "prefix": "package com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.impl;\n\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.PushConfigService;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.dao.PushConfigDo;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.dao.mapper.PushConfigMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @description:\n * @author:wuqicong@myhexin.com\n * @time: 2024/6/24\n */\n\n@Component\n@Slf4j\npublic class PushConfigServiceImpl implements PushConfigService {\n    private final PushConfigMapper pushConfigMapper;\n\n    public static Map<String, String> pushConfigMap = new HashMap<>();\n\n    public PushConfigServiceImpl(PushConfigMapper pushConfigMapper) {\n        this.pushConfigMapper = pushConfigMapper;\n    }\n\n    @Override\n    public List<PushConfigDo> queryPushConfig() {\n        return pushConfigMapper.queryPushConfig();\n    }\n\n    @Scheduled(cron = \"0/3 * * * * *\")\n    public void setPushConfig() {\n        List<PushConfigDo> pushConfigDos = queryPushConfig();",
    "infill": "for (PushConfigDo pushConfigDo : pushConfigDos) {\n            pushConfigMap.put(pushConfigDo.getKey(), pushConfigDo.getValue());\n        }\n\n    }\n",
    "suffix": "}\n",
    "relevantFile": "<file_path>deploy/src/main/java/com/myhexin/mobileweb/pns/gms/ios/sender/deploy/manager/impl/ApnsClientServiceImpl.java\npackage com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.impl;\n\nimport com.eatthepath.pushy.apns.ApnsClient;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.ApnsClientService;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.dto.ApnsClientCacheKey;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * @author panzheqi [panzheqi@myhexin.com]\n * @date 2022/08/15\n * @Description: apnsClient管理类。 管理所以apnsClient\n */\n@Component\n@Slf4j\npublic class ApnsClientServiceImpl implements ApnsClientService {\n\n\n    private final Map<ApnsClientCacheKey, ApnsClient> apnsClientMap = new ConcurrentHashMap<>();\n\n    private final ApnsClientFactory apnsClientFactory;\n\n    public ApnsClientServiceImpl(ApnsClientFactory apnsClientFactory) {\n        this.apnsClientFactory = apnsClientFactory;\n    }\n\n    @Override\n    public ApnsClient getApnsClient(ApnsClientCacheKey apnsClientCacheKey) {\n        return apnsClientMap.get(apnsClientCacheKey);\n    }\n\n    @Override\n    public void addApnsClient(ApnsClientCacheKey cacheKey, String boundId, byte[] cert) {\n        ApnsClient apnsClient = apnsClientFactory.createAnsClient(cert, boundId, cacheKey.getDev());\n        if(Objects.isNull(apnsClient)){\n            apnsClientMap.remove(cacheKey);\n            return;\n        }\n        apnsClientMap.put(cacheKey, apnsClient);\n        log.info(\"add apnsClient, clientInfo, cacheKey:{}, boundId:{}\", cacheKey, boundId);\n    }\n\n    @Override\n    public void removeApnsClient(ApnsClientCacheKey cacheKey) {\n\n        ApnsClient apnsClient = apnsClientMap.remove(cacheKey);\n        if (Objects.nonNull(apnsClient)) {\n            try {\n                apnsClient.close();\n            } catch (Exception e) {\n                String msg = String.format(\"close apnsClient err, cacheKey:%s\", cacheKey);\n                log.error(msg, e);\n            }\n\n        }\n        log.info(\"remove apnsClient, clientInfo, cacheKey:{}\", cacheKey);\n<file_path>deploy/src/main/java/com/myhexin/mobileweb/pns/gms/ios/sender/deploy/manager/PushConfigService.java\npackage com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager;\n\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.dao.PushConfigDo;\n\nimport java.util.List;\n\npublic interface PushConfigService {\n    List<PushConfigDo> queryPushConfig();\n}\n<file_path>deploy/src/main/java/com/myhexin/mobileweb/pns/gms/ios/sender/deploy/manager/impl/ShutDownServiceImpl.java\npackage com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.impl;\n\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.ShutDownService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.dubbo.config.DubboShutdownHook;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.ThreadPoolExecutor;\n\n/**\n * @author panzheqi [panzheqi@myhexin.com]\n * @date 2022/08/16\n * @Description:\n */\n@Component\n@Slf4j\npublic class ShutDownServiceImpl implements ShutDownService {\n\n\n    private final List<ThreadPoolExecutor> allThreadPool;\n\n    public ShutDownServiceImpl(List<ThreadPoolExecutor> allThreadPool) {\n        this.allThreadPool = new ArrayList<>(allThreadPool);\n    }\n\n    @Override\n    public void shutDownApp() {\n        DubboShutdownHook.destroyAll();\n    }\n\n    @Override\n    public boolean isShutDown() {\n        for (ThreadPoolExecutor poolExecutor : allThreadPool) {\n            if (poolExecutor.getActiveCount() > 0) {\n                return false;\n            }\n            log.info(\"threadPool is not free, pool:{}\", poolExecutor);\n        }\n\n        return true;\n    }\n}\n<file_path>deploy/src/main/java/com/myhexin/mobileweb/pns/gms/ios/sender/deploy/manager/impl/ComeFromSwitchServiceImpl.java\npackage com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.impl;\n\nimport com.github.benmanes.caffeine.cache.Cache;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.common.compontent.BatchConsumeDbService;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.common.compontent.InitService;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.common.type.StatusType;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.ComeFromSwitchService;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.dao.PushComeFromDo;\nimport com.myhexin.mobileweb.pns.gms.ios.sender.deploy.manager.dao.mapper.PushComeFromMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\n\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\n\n/**\n * @author panzheqi [panzheqi@myhexin.com]\n * @date 2022/08/15\n * @Description: 业务开关\n */\n@Component\n@Slf4j\npublic class ComeFromSwitchServiceImpl implements BatchConsumeDbService<PushComeFromDo>, InitService, ComeFromSwitchService {\n\n\n    private static final Integer PAGE_SIZE = 10;\n\n    private final PushComeFromMapper pushComeFromMapper;\n\n    private final Cache<String, Boolean> switchCache;\n\n    public ComeFromSwitchServiceImpl(PushComeFromMapper pushComeFromMapper, Cache<String, Boolean> switchCache) {\n        this.pushComeFromMapper = pushComeFromMapper;\n        this.switchCache = switchCache;\n    }\n\n    @Scheduled(cron = \"0/30 * * * * *\")\n    @Override\n    public void batchConsumeDb() {\n        BatchConsumeDbService.super.batchConsumeDb();\n    }\n\n\n    @Override\n    public int getPageSize() {\n        return PAGE_SIZE;\n    }\n\n    @Override\n    public List<PushComeFromDo> queryFromDb(int pageIndex, int pageSize) {\n        return pushComeFromMapper.queryByPage(pageIndex, pageSize);\n    }\n\n    @Override\n    public void accept(PushComeFromDo pushComeFromDo) {\n        if (!check(pushComeFromDo)) {\n            return;",
    "relevantFileList": [],
    "filePath": "deploy/src/main/java/com/myhexin/mobileweb/pns/gms/ios/sender/deploy/manager/impl/PushConfigServiceImpl.java",
    "template": "java",
    "multiRes": {
      "hipilot": ";\n        pushConfigDos.forEach(item -> pushConfigMap.put(item.getConfigName(), item.getConfigValue()));",
      "CodeQwen2.5-7B": "",
      "copilot": "for (PushConfigDo pushConfigDo : pushConfigDos) {\n            pushConfigMap.put(pushConfigDo.getKey(), pushConfigDo.getValue());\n        }\n\n    }\n",
      "CodeQwen1.5-7B": " "
    }
  },
  {
    "prefix": "public class Main {\n    public static void main(String[] args) {\n        //TIP Press <shortcut actionId=\"ShowIntentionActions\"/> with your caret at the highlighted text\n        // to see how IntelliJ IDEA suggests fixing it.\n        System.out.print(\"Hello and welcome!\");\n\n        for (int i = 1; i <= 5; i++) {\n            //TIP Press <shortcut actionId=\"Debug\"/> to start debugging your code. We have set one <icon src=\"AllIcons.Debugger.Db_set_breakpoint\"/> breakpoint\n            // for you, but you can always add more by pressing <shortcut actionId=\"ToggleLineBreakpoint\"/>.\n            System.out.println(\"i = \" + i);\n        }\n\n        switch (args.length) {\n            case 0:\n                System.out.println(\"No arguments were passed.\");\n                break;\n            case 1:\n                System.out.println(\"One argument was passed.\");\n                break;\n                case 2:\n                System.out.println(\"Two arguments were passed.\");\n                break;\n                case 3:\n                System.out.println(\"Three arguments were passed.\");\n                case 4:\n                System.out.println(\"Four arguments were passed.\");\n                break;\n                case 5:\n                Syst",
    "infill": "em.out.println(\"Five arguments were passed.\");\n            default",
    "suffix": ":\n                System.out.println(\"More than one argument was passed.\");\n        }\n\n    }\n}",
    "relevantFile": "",
    "relevantFileList": [],
    "template": "java",
    "multiRes": {
      "hipilot": "em.out.println(\"Five arguments were passed.\");\n                break;",
      "CodeQwen2.5-7B": "em.out.println(\"Five arguments were passed.\");",
      "copilot": "em.out.println(\"Five arguments were passed.\");\n            default",
      "CodeQwen1.5-7B": "em.out.println(\"Five arguments were passed.\");"
    }
  }
]
