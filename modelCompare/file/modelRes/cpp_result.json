[{"prefix":"#include \"stdafx.h\"\n#include \"userrightsmgr.h\"\n\n#include <base/common/devicefingerprint/devicefingerprintmgr.h>\n\n#include <usermanage/verify/publickey.h>\n\n#include \"drawobj/drawtabctrl/drawtabctrl.h\"\n\n#include \"encrypt/strencrypt.h\"\n\nstatic const std::string __queryPublicKeyUrl    = \"http://apigate.10jqka.com.cn/d/charge/plugin/chargeclient/v1/pubkey\";\nstatic const std::string __queryUrl             = \"http://apigate.10jqka.com.cn/d/charge/plugin/chargeclient/v1/confs\";\n\nstatic const TCHAR* __pszIndexGroupSetion       = _T(\"IndexGroupSetion\");\n\nstatic const TCHAR __szKey[][32] = {\n    _T(\"kline\"),\n    _T(\"timeline\")\n};\n\nstatic const TCHAR __szTypeName[][32] = {\n    _T(\"market\"),\n    _T(\"block\"),\n    _T(\"stock\"),\n    _T(\"\"),\n};\n\nstatic const TCHAR __szGropName[][32] = {\n    _T(\"group_a\"),\n    _T(\"group_b\")\n};\n\nenum STOCK_TYPE\n{\n    STOCK_TYPE_INDEX = 0,\n    STOCK_TYPE_BLOCK,\n    STOCK_TYPE_STOCK,\n    STOCK_TYPE_UNKNOW,\n};\n\n#define CHECK_JSON_VALUE(value)\\\nif(value.isNull() || !value.isObject())\\\n{\\\n    return;\\\n}\n\n#define GET_USERRIGHTS_MGR() (CUserRightsMgr::Instance())\n\nstatic void CheckCostFuncIndexByPath(LPCTSTR pstrPath, INDEX_PERIOD_TYPE dwPeriod)\n{\n    CProfileData* pProfileData = GetProfileData();\n    if (!pProfileData)\n    {\n        return;\n    }\n\n    CDataTree* pFuncTree = (CDataTree*)pProfileData->GetTree(SIC_KEY_FUNC);\n    if(!pFuncTree)\n    {\n        return;\n    }\n\n    CHexinTreeBase* pParentFuncTree = NULL;\n    CDataTree* pSonFuncTree = (CDataTree*)pFuncTree->FindSonTree(pstrPath, pParentFuncTree);\n\tif (!pSonFuncTree || !pParentFuncTree)\n\t{\n\t\treturn;\n\t}\n\n\t// 遍历需要添加的下发指标\n    VEC_INDEX *pSetVec = user_rights_mgr::GetIndexSetting(dwPeriod);\n    if(pSetVec && !pSetVec->empty())\n    {\n        for(auto iter = pSetVec->begin(); iter != pSetVec->end(); ++iter)\n        {\n\t\t\tCHexinLeafBase *pLeafBase = pSonFuncTree->FindLeaf(iter->nIndexId);\n\t\t\tif(pLeafBase && pLeafBase->IsKindOf(RUNTIME_CLASS(CCurveLeaf)))\t// 如果已存在\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n            pLeafBase = pFuncTree->FindLeaf(iter->nIndexId);\t\t\t\t// 否则从其他节点下查找\n            if(pLeafBase && pLeafBase->IsKindOf(RUNTIME_CLASS(CCurveLeaf)))\n            {\n                pSonFuncTree->AddSon(pLeafBase);\n            }\n            else\n            {\n                ERROR_LOG(UserRights, _T(\"指标id=%d系统中不存在，请检查配置\"), iter->nIndexId);\n            }\n        }\n    }\n\n\tCDWordArray ayDel;\n\tuser_rights_mgr::GetInvalidIndexGroup(ayDel);\n\t// 在指标设置框中要去除已无权限的指标\n\tfor (int i = 0; i < ayDel.GetSize(); i++)\n\t{\n\t\tCHexinLeafBase *pLeafBase = pSonFuncTree->FindLeaf(ayDel.GetAt(i));\n\t\tif(pLeafBase && pLeafBase->IsKindOf(RUNTIME_CLASS(CCurveLeaf)))\n\t\t{\n\t\t\tpSonFuncTree->DelSon(pLeafBase);\n\t\t}\n\t}\n}\n\nnamespace user_rights_mgr\n{\n    enum APP_RIGHT_TYPE\n    {\n        APP_RIGHT_TYPE_UNKNOW   = -1,\n        APP_RIGHT_TYPE_JRDS     = 0,\n        APP_RIGHT_TYPE_CFXF,\n        APP_RIGHT_TYPE_DYJ,\n        APP_RIGHT_TYPE_JCXF,\n        APP_RIGHT_TYPE_QLJJ,\n    };\n    struct TabAppRightInfo\n    {\n        APP_RIGHT_TYPE  nRightType;\n        std::string     strAppid;\n        std::string     strAppname;\n    };\n\n    const TabAppRightInfo __appRightInfo[] = \n    {\n        { APP_RIGHT_TYPE_JRDS, \"jrds\", \"金融大师至尊版\"},\n        { APP_RIGHT_TYPE_CFXF, \"cfxf\", \"财富先锋至尊版\"},\n        { APP_RIGHT_TYPE_DYJ,  \"dyj\",  \"大研究内参版\"},\n        { APP_RIGHT_TYPE_JCXF, \"jcxf\", \"决策先锋\"},\n    };\n\n    //权限数据请求\n    void Request(void)\n    {\n        GET_USERRIGHTS_MGR().Request();\n    }\n\n    //获取权限请求结果\n    BOOL GetRequestResult()\n    {\n        return GET_USERRIGHTS_MGR().GetRequestResult();\n    }\n\n    //指标设置\n    void CheckCostFuncIndex()\n    {\n        CheckCostFuncIndexByPath(_T(\"技术指标\\\\高端收费指标\\\\分时指标\"), INDEX_PERIOD_TYPE_FSLINE);\n        CheckCostFuncIndexByPath(_T(\"技术指标\\\\高端收费指标\\\\日线指标\"), INDEX_PERIOD_TYPE_KLINE);\n    }\n\n    VEC_INDEX* GetIndexSetting(const INDEX_PERIOD_TYPE dwPeriod)\n    {\n        return GET_USERRIGHTS_MGR().GetIndexSetting(dwPeriod);\n    }\n\n\tvoid GetInvalidIndexGroup(CDWordArray& ayIndexID)\n\t{\n\t\tGET_USERRIGHTS_MGR().GetInvalidIndexGroup(ayIndexID);\n\t}\n\n    //获取指标组默认指标\n    void GetDefaultGroupIndex(INDEX_GROUP &indexGroup,\n                                LPCTSTR pstrGroupName,\n                                LPCTSTR pstrDefaultGroupName,\n                                const DWORD dwPageID,\n                                const unsigned int groupPos,\n                                LPCTSTR pstrCode, WORD wPeriod)\n    {\n        GET_USERRIGHTS_MGR().GetDefaultGroupIndex(indexGroup, pstrGroupName, pstrDefaultGroupName, dwPageID, groupPos, pstrCode, wPeriod);\n    }\n\n    //获取所有指标组\n    INDEX_GROUPS* GetIndexGroups(LPCTSTR pstrCode, const DWORD dwPageID, INDEX_INFO_TYPE infoType, INDEX_PERIOD_TYPE dwPeriod)\n    {\n        return GET_USERRIGHTS_MGR().GetIndexGroups(pstrCode, dwPageID, infoType, dwPeriod);\n    }\n\n    //校验指标组指标\n    bool CheckGroupIndex(INDEX_GROUP &indexGroup,\n                            LPCTSTR pstrCode,\n                            WORD wPeriod,\n                            LPCTSTR pstrGroupName,\n                            const unsigned int groupPos,\n                            const DWORD dwPageID,\n                            const CString &strGroupIndexIdList)\n    {\n        return GET_USERRIGHTS_MGR().CheckGroupIndex(indexGroup, pstrCode, wPeriod, pstrGroupName, groupPos, dwPageID, strGroupIndexIdList);\n    }\n\n    //获取下发表头\n    VEC_TABLE_HEADER* GetTableHeader(const int nTableId, TABLE_HEADER_INFO_TYPE infoType)\n    {\n        return GET_USERRIGHTS_MGR().GetTableHeader(nTableId, infoType);\n    }\n\n    //获取下发的无效表头\n    const MAP_INVALID_TABLE_HEADER& GetInvalidTab","infill":"\r\n    return  lev","suffix":"el == '0';\r\n}\r\n\r\nvoid CUserRightsMgr::Request(void)\r\n{\r\n    m_bRequestSuccess = FALSE;\r\n\r\n    //配置控制,权限下发是否开启\r\n    if(!app_global::IsHasRunOptions(HX_RUNOPS_USERRIGHTS_ISSUE))\r\n    {\r\n        CString strRunOptions;\r\n        strRunOptions.LoadString(IDS_RUN_OPTIONS);\r\n        INFO_LOG(UserRights, \"run ops of userrights is closed!, strRunOptions=%s\", strRunOptions.GetString());\r\n        return;\r\n    }\r\n\r\n\t// 请求失败的话，重试\r\n\tDWORD dwRet = ERROR_NO_DATA;\r\n\tfor (int i = 0; i < 3; i++)\r\n\t{\r\n\t\tERROR_LOG(UserRights, \"begin to request userrights! reqindex=%d\", i);\r\n\t\tm_hEvent = CreateEvent(NULL, FALSE, FALSE, NULL);\r\n\t\tif(m_hEvent)\r\n\t\t{\r\n\t\t\tDWORD dwTick = ::GetTickCount();\r\n\t\t\t//先请求RSA公钥，拿到公钥后再自动请求用户权限数据\r\n\t\t\t//RequestRsaPublicKey();\r\n            {\r\n                std::string strData = \"\";\r\n                CString filepath = app_global::GetProgramPath() + \"shoufei.txt\";\r\n                std::fstream fs(filepath.GetString());\r\n                std::stringstream buffer;\r\n                buffer << fs.rdbuf();\r\n                strData = buffer.str();\r\n                fs.close();\r\n                //解析数据\r\n                Json::Value infoJsonRoot;\r\n                Json::Reader JsonReader;\r\n                if (!JsonReader.parse(strData.c_str(), infoJsonRoot))\r\n                {\r\n                    break;\r\n                }\r\n\r\n                BackupData(app_global::GetUserHxCfgPath(), _T(\"Function\"), true);\r\n\r\n                AnalysisVipLevel(infoJsonRoot);\r\n                ERROR_LOG(UserRights, \"UserRights AnalysisVipLevel ok\");\r\n                AnalysisIndexData(infoJsonRoot);\r\n                ERROR_LOG(UserRights, \"UserRights AnalysisIndexData ok\");\r\n                AnalysisPagesInfo();\r\n                ERROR_LOG(UserRights, \"UserRights AnalysisPagesInfo ok\");\r\n                AnalysisTablesInfo();\r\n                ERROR_LOG(UserRights, \"UserRights AnalysisTablesInfo ok\");\r\n                AnalysisPagesIndexData(infoJsonRoot);\r\n                ERROR_LOG(UserRights, \"UserRights AnalysisPagesIndexData ok\");\r\n                AnalysisTableHeaderData(infoJsonRoot);\r\n                ERROR_LOG(UserRights, \"UserRights AnalysisTableHeaderData ok\");\r\n                AnalysisInvalidTableHeaderData(infoJsonRoot);\r\n                ERROR_LOG(UserRights, \"UserRights AnalysisInvalidTableHeaderData ok\");\r\n                AnalysisPageMutiwndCount(infoJsonRoot);\r\n                ERROR_LOG(UserRights, \"UserRights AnalysisPageMutiwndCount ok\");\r\n                AnalysisPageType2Page(infoJsonRoot);\r\n                ERROR_LOG(UserRights, \"UserRights AnalysisPageType2Page ok\");\r\n                AnalysisTopNavMenuData(infoJsonRoot);\r\n                ERROR_LOG(UserRights, \"UserRights AnalysisTopNavMenuData ok\");\r\n                AnalysisMainKlineIndexMenuData(infoJsonRoot);\r\n                ERROR_LOG(UserRights, \"UserRights AnalysisMainKlineIndexMenuData ok\");\r\n                AnalysisLeftNavTabData(infoJsonRoot);\r\n                ERROR_LOG(UserRights, \"UserRights AnalysisLeftNavTabData ok\");\r\n                AnalysisPluginCfgData(infoJsonRoot);\r\n                ERROR_LOG(UserRights, \"UserRights AnalysisPluginCfgData ok\");\r\n                INFO_LOG(UserRights, \"Analysis Index Data end, m_mapIndexInfo.size=%d\", m_mapIndexInfo.size());\r\n                SetEvent(m_hEvent);\r\n            }\r\n\r\n\t\t\t//同步等待处理结果\r\n\t\t\tdwRet = ::WaitForSingleObject(m_hEvent, 15000);\r\n\t\t\tif(WAIT_OBJECT_0 == dwRet)\r\n\t\t\t{\r\n\t\t\t\tDWORD dwTimeCost = ::GetTickCount() - dwTick;\r\n\t\t\t\t//ERROR_LOG(UserRights, _T(\"用户权限请求耗时 %ldms\"), dwTimeCost);\r\n\t\t\t\tCStringArray ayOutput;\r\n\t\t\t\tCString strTimeCost;\r\n\t\t\t\tstrTimeCost.Format(_T(\"%ld\"), dwTimeCost);\r\n\t\t\t\tayOutput.Add(strTimeCost);\r\n\t\t\t\tAddModuleTraceLogOK(MN_USERRIGHT, MSN_USERRIGHT_REQUEST, MONITOR_ERRTYPE_TIMECOST, ayOutput);\r\n\r\n\t\t\t\tif (m_cVipLevel > '0')\r\n\t\t\t\t{\r\n\t\t\t\t\tm_bRequestSuccess = TRUE;\r\n\t\t\t\t\tapp_global::SetRunOptions(HX_RUNOPS_PRODUCT_VERSION, m_cVipLevel);\r\n                    //关键信息不应该打印\r\n\t\t\t\t\t//ERROR_LOG(UserRights, \"SetRunOptions vip level=%c\", (char)m_cVipLevel);\r\n\t\t\t\t}\r\n\t\t\t\t//同步请求结束，清理事件对象\r\n\t\t\t\t::CloseHandle(m_hEvent);\r\n\t\t\t\tm_hEvent = nullptr;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\telse if(WAIT_TIMEOUT == dwRet)\r\n\t\t\t{\r\n\t\t\t\t//超时\r\n\t\t\t\tERROR_LOG(UserRights, EncStr(_T(\"用户权限请求超时_2\")));\r\n\t\t\t\tmonitor::AddModuleTraceLogErr(MN_USERRIGHT, MSN_USERRIGHT_REQUEST, MONITOR_ERRTYPE_TIMEOUT);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tERROR_LOG(UserRights, EncStr(_T(\"用户权限请求失败\")));\r\n\t\t\t\tmonitor::AddModuleTraceLogErr(MN_USERRIGHT, MSN_USERRIGHT_REQUEST, MONITOR_ERRTYPE_SESSION_ERROR);\r\n\t\t\t}\r\n\r\n\t\t\tif(m_cVipLevel > '0')\r\n\t\t\t{\r\n\t\t\t\tm_bRequestSuccess = TRUE;\r\n\t\t\t\tapp_global::SetRunOptions(HX_RUNOPS_PRODUCT_VERSION, m_cVipLevel);\r\n                //关键信息不应该打印\r\n\t\t\t\t//ERROR_LOG(UserRights, \"app_global::SetRunOptions vip level=%c\", (char)m_cVipLevel);\r\n\t\t\t}\r\n\t\t\t//同步请求结束，清理事件对象\r\n\t\t\t::CloseHandle(m_hEvent);\r\n\t\t\tm_hEvent = nullptr;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tERROR_LOG(UserRights, EncStr(_T(\"创建请求同步事件对象失败\")));\r\n\t\t\tmonitor::AddModuleTraceLogErr(MN_USERRIGHT, MSN_USERRIGHT_REQUEST, MONITOR_ERRTYPE_CREATE_KERNELOBJ_ERR);\r\n\t\t}\r\n\t}\r\n\r\n\tif(WAIT_OBJECT_0 == dwRet)\r\n\t{\r\n\t\tAddModuleTraceLogOK(MN_USERRIGHT, MSN_USERRIGHT_RESULT, MONITOR_ERRTYPE_HTTP_OK);\r\n\r\n\t}\r\n\telse\r\n\t{\r\n\t\tmonitor::AddModuleTraceLogErr(MN_USERRIGHT, MSN_USERRIGHT_RESULT, MONITOR_ERRTYPE_HTTP_TIMEOUT);\r\n\t}\r\n\r\n}\r\n\r\nbool CUserRightsMgr::AddHttpRequestHeader(Hexin::Http::HttpHeaders &header, LPCTSTR lpstrReqSubName)\r\n{\r\n    CPublicKey* pPublicKey  = TSingletonHolder<CPublicKey>::Instance();\r\n    std::string strUserID   = pPublicKey ? pPublicKey->GetUserid().GetString() : _T(\"\");\r\n    if(strUserID.empty())\r\n    {\r\n        ERROR_LOG(UserRights, \"user id is empty!\");\r\n        monitor::AddModuleTraceLogErr(MN_USERRIGHT, lpstrReqSubName, MONITOR_ERRTYPE_USERID_EMPTY);\r\n        return false;\r\n    }\r\n\r\n    std::string strSessionid = pPublicKey ? pPublicKey->GetSessionid().GetString() : _T(\"\");\r\n    if(strSessionid.empty())\r\n    {\r\n        ERROR_LOG(UserRights, \"session id is empty!\");\r\n        monitor::AddModuleTraceLogErr(MN_USERRIGHT, lpstrReqSubName, MONITOR_ERRTYPE_SESSION_EMPTY);\r\n        return false;\r\n    }\r\n\r\n    //填充http头信息\r\n    //userid\r\n    header.Add(std::string(\"userid\"), strUserID);\r\n\r\n    //Sessionid\r\n    header.Add(std::string(\"sessionid\"), strSessionid);\r\n    return true;\r\n}\r\n\r\nbool CUserRightsMgr::RequestRsaPublicKey(void)\r\n{\r\n    Hexin::Http::HttpHeaders header;\r\n    if(AddHttpRequestHeader(header, MSN_USERRIGHT_RSAKEY_REQ))\r\n    {\r\n        Hexin::Http::HttpRequest request(Hexin::Http::GET, __queryPublicKeyUrl);\r\n        request.SetHeaders(header);\r\n\r\n        HTTP_TRACEINFO(traceInfo, USERRIGHT, RSAKEY_REQ);\r\n        HexinHttpModule.HttpRequestAsync(request, std::make_shared<IndexRightsHttpHandler>(this, INDEX_REQUEST_TYPE_PUBLICKEY, traceInfo), 8, 5);\r\n        AddModuleTraceLogOK(MN_USERRIGHT, MSN_USERRIGHT_RSAKEY_REQ, MONITOR_ERRTYPE_HTTP_OK);\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        //失败异常处理\r\n        if(m_hEvent)\r\n        {\r\n            //保证请求流程走完\r\n            ::SetEvent(m_hEvent);\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nbool CUserRightsMgr::RequestUserRightsData(void)\r\n{\r\n    CPublicKey* pPublicKey  = TSingletonHolder<CPublicKey>::Instance();\r\n    if(!pPublicKey)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    //填充http头信息\r\n    Hexin::Http::HttpHeaders header;\r\n    if(!AddHttpRequestHeader(header, MSN_USERRIGHT_RIGHTSDATA_REQ))\r\n    {\r\n\t\tERROR_LOG(UserRights, \"RequestUserRightsData httpheader is null\");\r\n        return false;\r\n    }\r\n\r\n    //appid\r\n    CString strValue,","relevantFile":"<file_path>hexin/selectstock/morphology_select/drawmodelstatic.h\n        {\n            this->point = lPointData.point;\n            this->bMoving = lPointData.bMoving;\n        }\n\n        LinePointData& operator=(const LinePointData& lPointData)\n        {\n            if (&lPointData == this)\n            {\n                return *this;\n            }\n\n            this->point = lPointData.point;\n            this->bMoving = lPointData.bMoving;\n\n            return *this;\n        }\n    };\n\n    enum MouseActionStatus\n    {\n        UNKOWN_MOUSE_STATUS = -1,\n        MOUSE_LBUTTION_DOWN_X_AXIS = 0,\n        MOUSE_LBUTTION_DOWN_Y_AXIS = 1,\n        MOUSE_LBUTTION_DOWN_LINES_RECT = 2,\n        MOUSE_RBUTTION_DOWN_X_AXIS = 3,\n        MOUSE_RBUTTION_DOWN_Y_AXIS = 4,\n        MOUSE_RBUTTION_DOWN_LINES_RECT = 5,\n        MOUSE_UP_STATUS = 6,\n        MOUSE_MOUSE_STATUS = 7\n    };\n\npublic:\n\tDECLARE_DPI_WND()\n    CDrawModelStatic(HWND hWnd, DWORD dwMsgID);\n    virtual ~CDrawModelStatic();\n\n    BOOL Create(LPCTSTR lpszText, DWORD dwStyle,\n\t\t\t\tconst CDIURect& rect, CWnd* pParentWnd, UINT nID = 0xffff);\n\npublic:\n    void SetModelPoints(const CArray<ModelDrawPoint, ModelDrawPoint&>& ayModelPoints, const ModelSaveAxisData& mAData);\n    void GetModelPoints(CArray<ModelDrawPoint, ModelDrawPoint&>& ayModelPoints, ModelSaveAxisData& mAData, long& lKLineNum) const;\n    BOOL IsModifed() const { return m_bModifed; }\n\nprotected:\n    void InitDataMember();\n\n    void DrawXAxis(CDpiDC* pDC); //画X轴.\n    void DrawYAxis(CDpiDC* pDC); //画Y轴.\n    void DrawLines(CDpiDC* pDC); //画连续的线段.\n\n    void ScreenPointToValuePoint(const CDIUPoint& scrPoint, ModelDrawPoint& valPoint) const;  //屏幕坐标转K线坐标.\n    void ValuePointToScreenPoint(const ModelDrawPoint& valPoint, CDIUPoint& scrPoint) const;  //K线坐标转屏幕坐标.\n    BOOL IsPointInLines(const CPoint& scrPoint) const; //未实现.\n\nprotected:\n    afx_msg void OnPaint(); //包含所有绘图逻辑.\n    afx_msg BOOL OnEraseBkgnd(CDC* pDC);\n    afx_msg void OnSize(UINT nType, int cx, int cy);  //控件位置变化，联动点数据变化.","relevantFileList":[],"filePath":"hexin/indicator_app/userrightsmgr.cpp","template":"cpp","multiRes":{"hipilot":"lidTableHeader()\n    {\n        return GET_USERRIGHTS_MGR().GetInvalidTableHeader();\n    }\n\n    //获取期货合约虚拟最大值\n    double GetFuturesMaxVirtualValue(LPCTSTR pstrCommodity)\n    {\n        return GET_USERRIGHTS_MGR().GetFuturesMaxVirtualValue(pstrCommodity);\n    }\n\n    //获取用户VIP等级\n    char GetVipLevel()\n    {\n        return GET_USERRIGHTS_MGR().GetVipLevel();\n    }\n}","deepseek-chat":"leHeader()","copilot":"\r\n    return  lev"}}]